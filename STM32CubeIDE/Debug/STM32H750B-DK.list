
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002274c  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003248  900229ec  900229ec  000429ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  90025c34  90025c34  00045c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  90025dec  90025dec  000a1d98  2**0
                  CONTENTS
  6 .ARM          00000000  90025dec  90025dec  000a1d98  2**0
                  CONTENTS
  7 .preinit_array 00000000  90025dec  90025dec  000a1d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  90025dec  90025dec  00045dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  90025e08  90025e08  00045e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  90025e10  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  90025f50  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020aac  24005b40  9002b950  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  240265ec  9002b950  000565ec  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000a1d98  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002164  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000034  90202164  90202164  00062164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0003fc00  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  000b0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  000b0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  000a1dc6  2**0
                  CONTENTS, READONLY
 21 .debug_line   00070aa8  00000000  00000000  000a1e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00112930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000bd7da  00000000  00000000  0011299b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 000152d3  00000000  00000000  001d0175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00002ff8  00000000  00000000  001e5448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0019b176  00000000  00000000  001e8440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00005dcf  00000000  00000000  003835b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  00048884  00000000  00000000  00389385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000a148  00000000  00000000  003d1c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00035a28  00000000  00000000  003dbd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	900229d4 	.word	0x900229d4

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	900229d4 	.word	0x900229d4

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fc6d 	bl	90006c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f021 fe2b 	bl	90022008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 ff07 	bl	900041c4 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	90025e10 	.word	0x90025e10
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003c8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003cc:	240265ec 	.word	0x240265ec

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 fee7 	bl	900021b0 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be6b 	b.w	900020c0 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 bee2 	b.w	900021b4 <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f021 fa5a 	bl	90021902 <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4403      	add	r3, r0
90000470:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 faf8 	bl	90006aa4 <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 fb71 	bl	90006bc0 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f021 fa04 	bl	90021902 <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f007 f8d3 	bl	900076b0 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f007 f8cb 	bl	900076b0 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f007 f8c3 	bl	900076b0 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f007 f8bb 	bl	900076b0 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b5c 	.word	0x24005b5c
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f007 b8a5 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f007 b89c 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f007 b893 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f007 b88a 	b.w	900076bc <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b5c 	.word	0x24005b5c
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f007 b871 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f007 b868 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f007 b85f 	b.w	900076bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f007 b856 	b.w	900076bc <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b5c 	.word	0x24005b5c
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f007 b846 	b.w	900076c4 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f007 b842 	b.w	900076c4 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f007 b83e 	b.w	900076c4 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f007 b83a 	b.w	900076c4 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	2402620b 	.word	0x2402620b

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f021 f94a 	bl	90021960 <__assert_func>
900006cc:	24026200 	.word	0x24026200
900006d0:	24026202 	.word	0x24026202
900006d4:	24026206 	.word	0x24026206
900006d8:	24026208 	.word	0x24026208
900006dc:	90022a6c 	.word	0x90022a6c
900006e0:	90022ad0 	.word	0x90022ad0
900006e4:	90022b14 	.word	0x90022b14

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f010 faba 	bl	90010c64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be32 	b.w	90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be36 	b.w	90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 fef5 	bl	900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bde0 	b.w	90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f001 bff0 	b.w	90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfda 	b.w	9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bde4 	b.w	90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f00f bcd2 	b.w	90010114 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f021 f8c4 	bl	90021902 <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	24026204 	.word	0x24026204
900007d0:	24026202 	.word	0x24026202
900007d4:	24026200 	.word	0x24026200

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f021 f899 	bl	90021960 <__assert_func>
9000082e:	bf00      	nop
90000830:	2402620a 	.word	0x2402620a
90000834:	90000675 	.word	0x90000675
90000838:	2402620b 	.word	0x2402620b
9000083c:	90022b5c 	.word	0x90022b5c
90000840:	90022b94 	.word	0x90022b94
90000844:	90022b14 	.word	0x90022b14

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8bb 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f006 ff24 	bl	900076bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f006 ff1f 	bl	900076bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f006 ff1a 	bl	900076bc <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8a6 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f010 f9e5 	bl	90010c64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff4a 	bl	90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f021 f81e 	bl	90021960 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	2402620a 	.word	0x2402620a
90000930:	d0000000 	.word	0xd0000000
90000934:	2402620b 	.word	0x2402620b
90000938:	90022b5c 	.word	0x90022b5c
9000093c:	90022b94 	.word	0x90022b94
90000940:	90022b14 	.word	0x90022b14

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f010 f9a3 	bl	90010c98 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f010 f99d 	bl	90010c98 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	2402620c 	.word	0x2402620c

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f020 ffd8 	bl	90021960 <__assert_func>
900009b0:	90022cc0 	.word	0x90022cc0
900009b4:	90022cbc 	.word	0x90022cbc
900009b8:	90022d1c 	.word	0x90022d1c

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f020 ff9e 	bl	90021902 <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
900009d2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d4:	4c65      	ldr	r4, [pc, #404]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d8:	2002      	movs	r0, #2
900009da:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009dc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009de:	0705      	lsls	r5, r0, #28
900009e0:	d003      	beq.n	900009ea <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009e2:	f020 000f 	bic.w	r0, r0, #15
900009e6:	4c61      	ldr	r4, [pc, #388]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
900009e8:	3010      	adds	r0, #16
900009ea:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009ec:	0900      	lsrs	r0, r0, #4
900009ee:	4c5f      	ldr	r4, [pc, #380]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
900009f0:	2700      	movs	r7, #0
900009f2:	4e5f      	ldr	r6, [pc, #380]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009f4:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009fa:	4d5e      	ldr	r5, [pc, #376]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009fc:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
900009fe:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a00:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a04:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a06:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a08:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a0c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a0e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a10:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a14:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a16:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a18:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a1c:	616f      	str	r7, [r5, #20]
90000a1e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a22:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a24:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a28:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a2c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a2e:	4852      	ldr	r0, [pc, #328]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a30:	4c52      	ldr	r4, [pc, #328]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a32:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a34:	4b52      	ldr	r3, [pc, #328]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a36:	4853      	ldr	r0, [pc, #332]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a38:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a3a:	4b53      	ldr	r3, [pc, #332]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a3c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a40:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a42:	4b52      	ldr	r3, [pc, #328]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a44:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	4b52      	ldr	r3, [pc, #328]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a48:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a4e:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a50:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
90000a54:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a58:	686b      	ldr	r3, [r5, #4]
90000a5a:	f007 ff5f 	bl	9000891c <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a5e:	f8d9 3000 	ldr.w	r3, [r9]
90000a62:	b11b      	cbz	r3, 90000a6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a64:	4b4c      	ldr	r3, [pc, #304]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a66:	681b      	ldr	r3, [r3, #0]
90000a68:	2b00      	cmp	r3, #0
90000a6a:	d17d      	bne.n	90000b68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a6c:	f8d8 3000 	ldr.w	r3, [r8]
90000a70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a74:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a78:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a7c:	2901      	cmp	r1, #1
90000a7e:	d042      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000a80:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000a82:	2b01      	cmp	r3, #1
90000a84:	d029      	beq.n	90000ada <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a86:	6833      	ldr	r3, [r6, #0]
90000a88:	b9c3      	cbnz	r3, 90000abc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000a8a:	f8db 3000 	ldr.w	r3, [fp]
90000a8e:	fab3 f383 	clz	r3, r3
90000a92:	095b      	lsrs	r3, r3, #5
90000a94:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a96:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000a98:	6823      	ldr	r3, [r4, #0]
90000a9a:	2b02      	cmp	r3, #2
90000a9c:	d013      	beq.n	90000ac6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000a9e:	6823      	ldr	r3, [r4, #0]
90000aa0:	2b01      	cmp	r3, #1
90000aa2:	d1dc      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000aa4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000aa6:	4a3c      	ldr	r2, [pc, #240]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000aa8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000aac:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ab0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ab4:	6013      	str	r3, [r2, #0]
}
90000ab6:	b005      	add	sp, #20
90000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000abc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000abe:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ac0:	6823      	ldr	r3, [r4, #0]
90000ac2:	2b02      	cmp	r3, #2
90000ac4:	d1eb      	bne.n	90000a9e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ac6:	4b35      	ldr	r3, [pc, #212]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ac8:	f04f 31ff 	mov.w	r1, #4294967295
90000acc:	6818      	ldr	r0, [r3, #0]
90000ace:	f00b fb8b 	bl	9000c1e8 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000ad2:	6823      	ldr	r3, [r4, #0]
90000ad4:	2b01      	cmp	r3, #1
90000ad6:	d1c2      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000ad8:	e7e4      	b.n	90000aa4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000ada:	4b29      	ldr	r3, [pc, #164]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000adc:	681b      	ldr	r3, [r3, #0]
90000ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000ae2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae6:	2b00      	cmp	r3, #0
90000ae8:	d1cd      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aea:	f8d8 3000 	ldr.w	r3, [r8]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c5      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4821      	ldr	r0, [pc, #132]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f008 f854 	bl	90008bac <HAL_JPEG_Resume>
90000b04:	e7bf      	b.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8db 1000 	ldr.w	r1, [fp]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1b8      	bne.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b0e:	3301      	adds	r3, #1
      };
90000b10:	4920      	ldr	r1, [pc, #128]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b12:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b16:	2b01      	cmp	r3, #1
      };
90000b18:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b1c:	bf88      	it	hi
90000b1e:	463b      	movhi	r3, r7
90000b20:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b24:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b28:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b2a:	3302      	adds	r3, #2
90000b2c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b30:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b34:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b36:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b38:	fbb1 f3f0 	udiv	r3, r1, r0
90000b3c:	fb00 1113 	mls	r1, r0, r3, r1
90000b40:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b42:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b46:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b4a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4911      	ldr	r1, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b4e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b52:	4a06      	ldr	r2, [pc, #24]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b54:	680b      	ldr	r3, [r1, #0]
90000b56:	68d2      	ldr	r2, [r2, #12]
90000b58:	4413      	add	r3, r2
90000b5a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b5c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b5e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b62:	691b      	ldr	r3, [r3, #16]
90000b64:	4798      	blx	r3
90000b66:	e78b      	b.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b68:	2301      	movs	r3, #1
90000b6a:	e794      	b.n	90000a96 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b6c:	24005ba0 	.word	0x24005ba0
90000b70:	24005b9c 	.word	0x24005b9c
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b74 	.word	0x24005b74
90000b7c:	24005b8c 	.word	0x24005b8c
90000b80:	24005b88 	.word	0x24005b88
90000b84:	2400aeac 	.word	0x2400aeac
90000b88:	24005b7c 	.word	0x24005b7c
90000b8c:	24005b78 	.word	0x24005b78
90000b90:	24005b80 	.word	0x24005b80
90000b94:	24005b94 	.word	0x24005b94
90000b98:	24005b6c 	.word	0x24005b6c
90000b9c:	24005bd8 	.word	0x24005bd8
90000ba0:	24005b70 	.word	0x24005b70
90000ba4:	24005b84 	.word	0x24005b84
90000ba8:	24005b90 	.word	0x24005b90
90000bac:	24005bb4 	.word	0x24005bb4

90000bb0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb2:	6803      	ldr	r3, [r0, #0]
90000bb4:	2901      	cmp	r1, #1
90000bb6:	4e2a      	ldr	r6, [pc, #168]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bb8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bbc:	bf38      	it	cc
90000bbe:	2101      	movcc	r1, #1
90000bc0:	42b3      	cmp	r3, r6
90000bc2:	460d      	mov	r5, r1
90000bc4:	d138      	bne.n	90000c38 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000bc6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bc8:	4299      	cmp	r1, r3
90000bca:	d82a      	bhi.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bcc:	1e6b      	subs	r3, r5, #1
90000bce:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bd2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bd6:	b350      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bda:	2b0f      	cmp	r3, #15
90000bdc:	d937      	bls.n	90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bde:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000be0:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000be4:	68db      	ldr	r3, [r3, #12]
90000be6:	4631      	mov	r1, r6
90000be8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bea:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bec:	2210      	movs	r2, #16
90000bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bf0:	6803      	ldr	r3, [r0, #0]
90000bf2:	691b      	ldr	r3, [r3, #16]
90000bf4:	4798      	blx	r3
90000bf6:	b1b0      	cbz	r0, 90000c26 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000bfa:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000bfc:	b1bb      	cbz	r3, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000bfe:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c00:	7a93      	ldrb	r3, [r2, #10]
90000c02:	7a51      	ldrb	r1, [r2, #9]
90000c04:	041b      	lsls	r3, r3, #16
90000c06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c0a:	7a11      	ldrb	r1, [r2, #8]
90000c0c:	7ad2      	ldrb	r2, [r2, #11]
90000c0e:	430b      	orrs	r3, r1
90000c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c14:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c16:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c18:	3a04      	subs	r2, #4
90000c1a:	441a      	add	r2, r3
90000c1c:	61a2      	str	r2, [r4, #24]
}
90000c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c20:	68a3      	ldr	r3, [r4, #8]
{
90000c22:	461d      	mov	r5, r3
90000c24:	e7d2      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c26:	230d      	movs	r3, #13
90000c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c2c:	e7e4      	b.n	90000bf8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c2e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c34:	58d3      	ldr	r3, [r2, r3]
90000c36:	e7ed      	b.n	90000c14 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c38:	4798      	blx	r3
90000c3a:	4285      	cmp	r5, r0
90000c3c:	d9c6      	bls.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c3e:	6823      	ldr	r3, [r4, #0]
90000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c42:	42b3      	cmp	r3, r6
90000c44:	d0ec      	beq.n	90000c20 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c46:	4620      	mov	r0, r4
90000c48:	4798      	blx	r3
90000c4a:	4605      	mov	r5, r0
90000c4c:	e7be      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c50:	4b04      	ldr	r3, [pc, #16]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c54:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c5a:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c5c:	f020 fe80 	bl	90021960 <__assert_func>
90000c60:	90000989 	.word	0x90000989
90000c64:	90022d78 	.word	0x90022d78
90000c68:	90022d8c 	.word	0x90022d8c
90000c6c:	90022d1c 	.word	0x90022d1c

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e4 	beq.w	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e7 	bls.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80cf 	beq.w	90000e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80dc 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cbc:	18b1      	adds	r1, r6, r2
90000cbe:	5cb2      	ldrb	r2, [r6, r2]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80c0 	bcc.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d053      	beq.n	90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f007 fde1 	bl	9000891c <HAL_JPEG_Decode_DMA>
    return 0;
90000d5a:	e008      	b.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 3000 	ldr.w	r3, [sl]
90000d60:	fab3 f383 	clz	r3, r3
90000d64:	095b      	lsrs	r3, r3, #5
90000d66:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d68:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d6a:	6833      	ldr	r3, [r6, #0]
90000d6c:	b9db      	cbnz	r3, 90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6e:	f8d9 3000 	ldr.w	r3, [r9]
90000d72:	b11b      	cbz	r3, 90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d74:	4b49      	ldr	r3, [pc, #292]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d76:	681b      	ldr	r3, [r3, #0]
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d161      	bne.n	90000e40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7c:	f8d8 3000 	ldr.w	r3, [r8]
90000d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d84:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d88:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8c:	2901      	cmp	r1, #1
90000d8e:	d024      	beq.n	90000dda <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000d90:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d92:	2b01      	cmp	r3, #1
90000d94:	d00b      	beq.n	90000dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d96:	683b      	ldr	r3, [r7, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d0df      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000d9c:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9e:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000da0:	6833      	ldr	r3, [r6, #0]
90000da2:	2b00      	cmp	r3, #0
90000da4:	d0e3      	beq.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000da6:	2001      	movs	r0, #1
90000da8:	b003      	add	sp, #12
90000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dae:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000db0:	681b      	ldr	r3, [r3, #0]
90000db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dba:	2b00      	cmp	r3, #0
90000dbc:	d1eb      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbe:	f8d8 3000 	ldr.w	r3, [r8]
90000dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	d1e3      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dce:	2102      	movs	r1, #2
90000dd0:	482f      	ldr	r0, [pc, #188]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000dd2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd4:	f007 feea 	bl	90008bac <HAL_JPEG_Resume>
90000dd8:	e7dd      	b.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dda:	f8da 1000 	ldr.w	r1, [sl]
90000dde:	2901      	cmp	r1, #1
90000de0:	d1d6      	bne.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000de2:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de6:	3301      	adds	r3, #1
      };
90000de8:	482a      	ldr	r0, [pc, #168]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000dea:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dee:	2b01      	cmp	r3, #1
      };
90000df0:	f8d0 e000 	ldr.w	lr, [r0]
90000df4:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df8:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfc:	bf88      	it	hi
90000dfe:	2300      	movhi	r3, #0
90000e00:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e04:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e08:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e0c:	2300      	movs	r3, #0
90000e0e:	604a      	str	r2, [r1, #4]
      count_++;
90000e10:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e14:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e18:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e1a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e22:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e26:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e28:	481a      	ldr	r0, [pc, #104]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e2a:	68c9      	ldr	r1, [r1, #12]
90000e2c:	6802      	ldr	r2, [r0, #0]
90000e2e:	440a      	add	r2, r1
90000e30:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e32:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e34:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e38:	6803      	ldr	r3, [r0, #0]
90000e3a:	691b      	ldr	r3, [r3, #16]
90000e3c:	4798      	blx	r3
90000e3e:	e7a7      	b.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e40:	2301      	movs	r3, #1
90000e42:	e791      	b.n	90000d68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e44:	230d      	movs	r3, #13
90000e46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e4a:	e72c      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e50:	f106 0308 	add.w	r3, r6, #8
90000e54:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e56:	4419      	add	r1, r3
90000e58:	e74f      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e5a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5c:	4b10      	ldr	r3, [pc, #64]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5e:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e60:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e66:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e68:	f020 fd7a 	bl	90021960 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	463e      	mov	r6, r7
90000e6e:	e7ee      	b.n	90000e4e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e70:	24005ba0 	.word	0x24005ba0
90000e74:	24005b74 	.word	0x24005b74
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005b9c 	.word	0x24005b9c
90000e80:	24005b88 	.word	0x24005b88
90000e84:	24005b7c 	.word	0x24005b7c
90000e88:	24005b78 	.word	0x24005b78
90000e8c:	24005b80 	.word	0x24005b80
90000e90:	2400aeac 	.word	0x2400aeac
90000e94:	24005b94 	.word	0x24005b94
90000e98:	24005b8c 	.word	0x24005b8c
90000e9c:	24005b6c 	.word	0x24005b6c
90000ea0:	90022d78 	.word	0x90022d78
90000ea4:	90022d8c 	.word	0x90022d8c
90000ea8:	90022d1c 	.word	0x90022d1c
90000eac:	24005b84 	.word	0x24005b84
90000eb0:	24005b70 	.word	0x24005b70
90000eb4:	24005b90 	.word	0x24005b90
90000eb8:	24005bb4 	.word	0x24005bb4

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18a1      	adds	r1, r4, r2
90000f06:	5ca2      	ldrb	r2, [r4, r2]
90000f08:	788c      	ldrb	r4, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	0424      	lsls	r4, r4, #16
90000f0e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f12:	4314      	orrs	r4, r2
90000f14:	78ca      	ldrb	r2, [r1, #3]
90000f16:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f4e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f50:	188b      	adds	r3, r1, r2
90000f52:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2101      	moveq	r1, #1
90000f90:	2100      	movne	r1, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69ab      	ldr	r3, [r5, #24]
90000f96:	441c      	add	r4, r3
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fc4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fca:	4608      	mov	r0, r1
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d22      	adds	r2, r4, #4
90000fda:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	588c      	ldr	r4, [r1, r2]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f020 fcb6 	bl	90021960 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	4614      	mov	r4, r2
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ec      	movs	r1, #236	; 0xec
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f020 fcae 	bl	90021960 <__assert_func>
90001004:	90022d78 	.word	0x90022d78
90001008:	90022d8c 	.word	0x90022d8c
9000100c:	90022d1c 	.word	0x90022d1c
90001010:	90022dd0 	.word	0x90022dd0
90001014:	90022e1c 	.word	0x90022e1c

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 809b 	beq.w	9000115a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d061      	beq.n	900010f4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8097 	bls.w	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d04c      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d04b      	beq.n	900010f2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001066:	1b52      	subs	r2, r2, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000106a:	eb03 0e0c 	add.w	lr, r3, ip
9000106e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001072:	eb03 0805 	add.w	r8, r3, r5
90001076:	f813 c005 	ldrb.w	ip, [r3, r5]
9000107a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000107e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001082:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001086:	f89e 5002 	ldrb.w	r5, [lr, #2]
9000108a:	f89e e003 	ldrb.w	lr, [lr, #3]
9000108e:	042d      	lsls	r5, r5, #16
90001090:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001094:	433d      	orrs	r5, r7
90001096:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000109a:	eb03 0e02 	add.w	lr, r3, r2
9000109e:	5c9b      	ldrb	r3, [r3, r2]
900010a0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a8:	194a      	adds	r2, r1, r5
900010aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010ac:	f102 0e08 	add.w	lr, r2, #8
900010b0:	45be      	cmp	lr, r7
900010b2:	d213      	bcs.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010b4:	f243 0730 	movw	r7, #12336	; 0x3030
900010b8:	45bc      	cmp	ip, r7
900010ba:	d124      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010bc:	f246 3764 	movw	r7, #25444	; 0x6364
900010c0:	42bb      	cmp	r3, r7
900010c2:	d120      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010c4:	bb1d      	cbnz	r5, 9000110e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010c6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010cc:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010d0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010d2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010d4:	d002      	beq.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010d6:	2001      	movs	r0, #1
}
900010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010dc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010de:	6a23      	ldr	r3, [r4, #32]
900010e0:	2000      	movs	r0, #0
900010e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010ea:	230d      	movs	r3, #13
900010ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010f0:	e7ae      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010f2:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010f6:	4629      	mov	r1, r5
900010f8:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010fa:	f832 c005 	ldrh.w	ip, [r2, r5]
900010fe:	442a      	add	r2, r5
90001100:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001102:	6855      	ldr	r5, [r2, #4]
90001104:	e7d0      	b.n	900010a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001106:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001108:	2d00      	cmp	r5, #0
9000110a:	d1dd      	bne.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000110c:	e7db      	b.n	900010c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000110e:	f101 0708 	add.w	r7, r1, #8
90001112:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001114:	b1f0      	cbz	r0, 90001154 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001118:	429d      	cmp	r5, r3
9000111a:	d824      	bhi.n	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000111c:	6803      	ldr	r3, [r0, #0]
9000111e:	4639      	mov	r1, r7
90001120:	68db      	ldr	r3, [r3, #12]
90001122:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001126:	462a      	mov	r2, r5
90001128:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000112a:	6803      	ldr	r3, [r0, #0]
9000112c:	691b      	ldr	r3, [r3, #16]
9000112e:	4798      	blx	r3
90001130:	b910      	cbnz	r0, 90001138 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001132:	230d      	movs	r3, #13
90001134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000113a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000113c:	b126      	cbz	r6, 90001148 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000113e:	4633      	mov	r3, r6
90001140:	462a      	mov	r2, r5
90001142:	4620      	mov	r0, r4
90001144:	f7ff fc42 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001148:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000114c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000114e:	442a      	add	r2, r5
            frameNumber++;
90001150:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001152:	e7b9      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001156:	4439      	add	r1, r7
90001158:	e7f0      	b.n	9000113c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000115a:	4b07      	ldr	r3, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115c:	21b8      	movs	r1, #184	; 0xb8
9000115e:	4a07      	ldr	r2, [pc, #28]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001160:	4807      	ldr	r0, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001162:	f020 fbfd 	bl	90021960 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001168:	4b06      	ldr	r3, [pc, #24]	; (90001184 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000116a:	4a07      	ldr	r2, [pc, #28]	; (90001188 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000116c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000116e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001172:	4803      	ldr	r0, [pc, #12]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001174:	f020 fbf4 	bl	90021960 <__assert_func>
90001178:	90022dd0 	.word	0x90022dd0
9000117c:	90022e50 	.word	0x90022e50
90001180:	90022d1c 	.word	0x90022d1c
90001184:	90022d78 	.word	0x90022d78
90001188:	90022d8c 	.word	0x90022d8c

9000118c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000118e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001190:	4b0f      	ldr	r3, [pc, #60]	; (900011d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001192:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001194:	6003      	str	r3, [r0, #0]
90001196:	63c5      	str	r5, [r0, #60]	; 0x3c
90001198:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000119c:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011a0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011a4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011a8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011ac:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011b0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b8:	f002 fa3e 	bl	90003638 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011bc:	462a      	mov	r2, r5
900011be:	4629      	mov	r1, r5
900011c0:	2001      	movs	r0, #1
900011c2:	f00a ffc1 	bl	9000c148 <osSemaphoreNew>
900011c6:	4b03      	ldr	r3, [pc, #12]	; (900011d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c8:	4602      	mov	r2, r0
}
900011ca:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011cc:	601a      	str	r2, [r3, #0]
}
900011ce:	bd38      	pop	{r3, r4, r5, pc}
900011d0:	90022fd0 	.word	0x90022fd0
900011d4:	24005bd8 	.word	0x24005bd8

900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011dc:	2100      	movs	r1, #0
    if (reader != 0)
900011de:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011e0:	b083      	sub	sp, #12
900011e2:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011e4:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011ea:	2e00      	cmp	r6, #0
900011ec:	f000 81aa 	beq.w	90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
900011f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011f2:	2b47      	cmp	r3, #71	; 0x47
900011f4:	f240 8202 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900011f8:	6833      	ldr	r3, [r6, #0]
900011fa:	4630      	mov	r0, r6
900011fc:	68db      	ldr	r3, [r3, #12]
900011fe:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001200:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001202:	2248      	movs	r2, #72	; 0x48
90001204:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001206:	6803      	ldr	r3, [r0, #0]
90001208:	691b      	ldr	r3, [r3, #16]
9000120a:	4798      	blx	r3
9000120c:	2800      	cmp	r0, #0
9000120e:	f000 80ce 	beq.w	900013ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001212:	2300      	movs	r3, #0
    if (reader != 0)
90001214:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001216:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001218:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000121a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000121c:	2e00      	cmp	r6, #0
9000121e:	f000 8192 	beq.w	90001546 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001226:	2204      	movs	r2, #4
90001228:	49be      	ldr	r1, [pc, #760]	; (90001524 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000122a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000122e:	4658      	mov	r0, fp
90001230:	f020 fe38 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001234:	2800      	cmp	r0, #0
90001236:	f040 81ea 	bne.w	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000123a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000123e:	2204      	movs	r2, #4
90001240:	49b9      	ldr	r1, [pc, #740]	; (90001528 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001242:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001244:	4440      	add	r0, r8
90001246:	f020 fe2d 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000124a:	2800      	cmp	r0, #0
9000124c:	f040 81fa 	bne.w	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001250:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001254:	2204      	movs	r2, #4
90001256:	49b5      	ldr	r1, [pc, #724]	; (9000152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001258:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000125c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001260:	f020 fe20 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001264:	9001      	str	r0, [sp, #4]
90001266:	2800      	cmp	r0, #0
90001268:	f040 81e2 	bne.w	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000126c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001270:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001274:	0424      	lsls	r4, r4, #16
90001276:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000127a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000127e:	f89b 2010 	ldrb.w	r2, [fp, #16]
90001282:	4314      	orrs	r4, r2
    assert(aviListSize);
90001284:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001288:	f000 81cb 	beq.w	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
9000128c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001290:	2204      	movs	r2, #4
90001292:	49a7      	ldr	r1, [pc, #668]	; (90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
90001294:	4440      	add	r0, r8
90001296:	f020 fe05 	bl	90021ea4 <strncmp>
    if (compare(offset, "hdrl", 4))
9000129a:	2800      	cmp	r0, #0
9000129c:	f000 808b 	beq.w	900013b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	2306      	movs	r3, #6
        foundFrame = false;
900012a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ae:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a0      	ldr	r1, [pc, #640]	; (90001534 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012b4:	f020 fdf6 	bl	90021ea4 <strncmp>
    if (compare(offset, "avih", 4))
900012b8:	2800      	cmp	r0, #0
900012ba:	f000 8085 	beq.w	900013c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012be:	2307      	movs	r3, #7
900012c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012c4:	4454      	add	r4, sl
900012c6:	3408      	adds	r4, #8
    if (reader != 0)
900012c8:	f1b9 0f00 	cmp.w	r9, #0
900012cc:	d015      	beq.n	900012fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012d0:	2b0b      	cmp	r3, #11
900012d2:	f240 8193 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012d6:	f8d9 3000 	ldr.w	r3, [r9]
900012da:	4621      	mov	r1, r4
900012dc:	4648      	mov	r0, r9
900012de:	68db      	ldr	r3, [r3, #12]
900012e0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012e4:	220c      	movs	r2, #12
900012e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e8:	6803      	ldr	r3, [r0, #0]
900012ea:	691b      	ldr	r3, [r3, #16]
900012ec:	4798      	blx	r3
900012ee:	b910      	cbnz	r0, 900012f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
900012f0:	230d      	movs	r3, #13
900012f2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f8:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
900012fa:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
900012fe:	4f8e      	ldr	r7, [pc, #568]	; (90001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001300:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001304:	2e00      	cmp	r6, #0
90001306:	d041      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001308:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000130a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000130e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001310:	eba8 0303 	sub.w	r3, r8, r3
90001314:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001316:	f020 fdc5 	bl	90021ea4 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131a:	2800      	cmp	r0, #0
9000131c:	d03e      	beq.n	9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000131e:	f1b9 0f00 	cmp.w	r9, #0
90001322:	d13e      	bne.n	900013a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001324:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001326:	42a3      	cmp	r3, r4
90001328:	f240 80a7 	bls.w	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000132c:	3404      	adds	r4, #4
    if (reader != 0)
9000132e:	2e00      	cmp	r6, #0
90001330:	d046      	beq.n	900013c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001332:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001334:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001338:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133c:	eb01 0204 	add.w	r2, r1, r4
90001340:	5d09      	ldrb	r1, [r1, r4]
90001342:	7894      	ldrb	r4, [r2, #2]
90001344:	7850      	ldrb	r0, [r2, #1]
90001346:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134a:	78d2      	ldrb	r2, [r2, #3]
9000134c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001350:	ea44 0401 	orr.w	r4, r4, r1
90001354:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001358:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000135a:	f240 814f 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000135e:	6833      	ldr	r3, [r6, #0]
90001360:	4621      	mov	r1, r4
90001362:	4630      	mov	r0, r6
90001364:	68db      	ldr	r3, [r3, #12]
90001366:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001368:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136a:	220c      	movs	r2, #12
9000136c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000136e:	6803      	ldr	r3, [r0, #0]
90001370:	691b      	ldr	r3, [r3, #16]
90001372:	4798      	blx	r3
90001374:	b910      	cbnz	r0, 9000137c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001376:	230d      	movs	r3, #13
90001378:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000137c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000137e:	f104 0808 	add.w	r8, r4, #8
90001382:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001386:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001388:	2e00      	cmp	r6, #0
9000138a:	d1bd      	bne.n	90001308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
9000138c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000138e:	2204      	movs	r2, #4
90001390:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
90001392:	4440      	add	r0, r8
    return strncmp(src, str, num);
90001394:	f020 fd86 	bl	90021ea4 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001398:	2800      	cmp	r0, #0
9000139a:	d1c0      	bne.n	9000131e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
9000139c:	f1b9 0f00 	cmp.w	r9, #0
900013a0:	d06b      	beq.n	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013a2:	230a      	movs	r3, #10
900013a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013a8:	b003      	add	sp, #12
900013aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ae:	230d      	movs	r3, #13
900013b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013b4:	e72d      	b.n	90001212 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013b6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013ba:	f04f 0b01 	mov.w	fp, #1
900013be:	e776      	b.n	900012ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013c2:	591c      	ldr	r4, [r3, r4]
900013c4:	4444      	add	r4, r8
    return movieData + offset;
900013c6:	e79b      	b.n	90001300 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013c8:	f1bb 0f00 	cmp.w	fp, #0
900013cc:	f43f af7a 	beq.w	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013d0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d4:	f1b9 0f00 	cmp.w	r9, #0
900013d8:	f000 80f4 	beq.w	900015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013e0:	1ac9      	subs	r1, r1, r3
900013e2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900013e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013ea:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ee:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013f2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013fa:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	4439      	add	r1, r7
90001402:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001404:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001408:	f89e e003 	ldrb.w	lr, [lr, #3]
9000140c:	041b      	lsls	r3, r3, #16
9000140e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001412:	ea43 0308 	orr.w	r3, r3, r8
90001416:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000141a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001422:	099b      	lsrs	r3, r3, #6
90001424:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001426:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000142a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142e:	041b      	lsls	r3, r3, #16
90001430:	f812 e000 	ldrb.w	lr, [r2, r0]
90001434:	f89c c003 	ldrb.w	ip, [ip, #3]
90001438:	1850      	adds	r0, r2, r1
9000143a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143e:	ea43 030e 	orr.w	r3, r3, lr
90001442:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001446:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001448:	7883      	ldrb	r3, [r0, #2]
9000144a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	5c51      	ldrb	r1, [r2, r1]
90001452:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001456:	430b      	orrs	r3, r1
90001458:	78c1      	ldrb	r1, [r0, #3]
9000145a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001460:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001462:	788b      	ldrb	r3, [r1, #2]
90001464:	7848      	ldrb	r0, [r1, #1]
90001466:	041b      	lsls	r3, r3, #16
90001468:	5dd2      	ldrb	r2, [r2, r7]
9000146a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146e:	4313      	orrs	r3, r2
90001470:	78ca      	ldrb	r2, [r1, #3]
90001472:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001476:	612b      	str	r3, [r5, #16]
90001478:	e724      	b.n	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000147a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000147e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001480:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001482:	2e00      	cmp	r6, #0
90001484:	f000 80b2 	beq.w	900015ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
90001488:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000148a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000148c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001490:	f104 0c02 	add.w	ip, r4, #2
90001494:	1c67      	adds	r7, r4, #1
90001496:	f811 e004 	ldrb.w	lr, [r1, r4]
9000149a:	1ce0      	adds	r0, r4, #3
9000149c:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014a0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014a2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014a6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014aa:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ae:	ea43 030e 	orr.w	r3, r3, lr
900014b2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014ba:	4443      	add	r3, r8
900014bc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014be:	f811 300c 	ldrb.w	r3, [r1, ip]
900014c2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014c6:	5d0f      	ldrb	r7, [r1, r4]
900014c8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014cc:	5c09      	ldrb	r1, [r1, r0]
900014ce:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014d2:	ea44 0407 	orr.w	r4, r4, r7
900014d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014da:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014dc:	f240 808e 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900014e0:	6833      	ldr	r3, [r6, #0]
900014e2:	4621      	mov	r1, r4
900014e4:	4630      	mov	r0, r6
900014e6:	68db      	ldr	r3, [r3, #12]
900014e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014ec:	2204      	movs	r2, #4
900014ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014f0:	6803      	ldr	r3, [r0, #0]
900014f2:	691b      	ldr	r3, [r3, #16]
900014f4:	4798      	blx	r3
900014f6:	2800      	cmp	r0, #0
900014f8:	d05a      	beq.n	900015b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
900014fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900014fc:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900014fe:	2b00      	cmp	r3, #0
90001500:	f000 80aa 	beq.w	90001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001504:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001506:	2204      	movs	r2, #4
90001508:	490c      	ldr	r1, [pc, #48]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000150a:	f020 fccb 	bl	90021ea4 <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000150e:	2800      	cmp	r0, #0
90001510:	d166      	bne.n	900015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001512:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001514:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001516:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001518:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000151a:	622b      	str	r3, [r5, #32]
}
9000151c:	b003      	add	sp, #12
9000151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001522:	bf00      	nop
90001524:	90022eac 	.word	0x90022eac
90001528:	90022f64 	.word	0x90022f64
9000152c:	90022f5c 	.word	0x90022f5c
90001530:	90022f54 	.word	0x90022f54
90001534:	90022f3c 	.word	0x90022f3c
90001538:	90022f44 	.word	0x90022f44
9000153c:	90022f4c 	.word	0x90022f4c
90001540:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001544:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001546:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000154a:	2204      	movs	r2, #4
9000154c:	4944      	ldr	r1, [pc, #272]	; (90001660 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000154e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001552:	4620      	mov	r0, r4
90001554:	f020 fca6 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001558:	2800      	cmp	r0, #0
9000155a:	d158      	bne.n	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000155c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001560:	2204      	movs	r2, #4
90001562:	4940      	ldr	r1, [pc, #256]	; (90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001564:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001566:	4440      	add	r0, r8
90001568:	f020 fc9c 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000156c:	2800      	cmp	r0, #0
9000156e:	d169      	bne.n	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001570:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001574:	2204      	movs	r2, #4
90001576:	493c      	ldr	r1, [pc, #240]	; (90001668 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001578:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000157c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001580:	f020 fc90 	bl	90021ea4 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001584:	4683      	mov	fp, r0
90001586:	2800      	cmp	r0, #0
90001588:	d152      	bne.n	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000158a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000158c:	2c00      	cmp	r4, #0
9000158e:	d048      	beq.n	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
90001590:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	4935      	ldr	r1, [pc, #212]	; (9000166c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90001598:	4440      	add	r0, r8
9000159a:	f020 fc83 	bl	90021ea4 <strncmp>
    if (compare(offset, "hdrl", 4))
9000159e:	b958      	cbnz	r0, 900015b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015a0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015a4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015a8:	4440      	add	r0, r8
900015aa:	f04f 0900 	mov.w	r9, #0
900015ae:	e67f      	b.n	900012b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015b0:	230d      	movs	r3, #13
900015b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015b6:	e7a0      	b.n	900014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015b8:	2306      	movs	r3, #6
    offset += 4;
900015ba:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015c2:	e7f1      	b.n	900015a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015c6:	585a      	ldr	r2, [r3, r1]
900015c8:	443b      	add	r3, r7
900015ca:	4929      	ldr	r1, [pc, #164]	; (90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015cc:	fba1 1202 	umull	r1, r2, r1, r2
900015d0:	0992      	lsrs	r2, r2, #6
900015d2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015d6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015da:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015de:	e74a      	b.n	90001476 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015e0:	230b      	movs	r3, #11
900015e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015e6:	b003      	add	sp, #12
900015e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900015ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900015ee:	5903      	ldr	r3, [r0, r4]
900015f0:	4443      	add	r3, r8
900015f2:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900015f4:	5904      	ldr	r4, [r0, r4]
900015f6:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
900015f8:	4420      	add	r0, r4
900015fa:	e784      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900015fc:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900015fe:	4b1d      	ldr	r3, [pc, #116]	; (90001674 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001600:	4a1d      	ldr	r2, [pc, #116]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001602:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001604:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001608:	481c      	ldr	r0, [pc, #112]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000160a:	f020 f9a9 	bl	90021960 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000160e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001610:	4b1b      	ldr	r3, [pc, #108]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001612:	4a1c      	ldr	r2, [pc, #112]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001614:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001618:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000161c:	4817      	ldr	r0, [pc, #92]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000161e:	f020 f99f 	bl	90021960 <__assert_func>
    assert(aviListSize);
90001622:	4b19      	ldr	r3, [pc, #100]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001624:	f240 1149 	movw	r1, #329	; 0x149
90001628:	4a16      	ldr	r2, [pc, #88]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000162a:	4814      	ldr	r0, [pc, #80]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162c:	f020 f998 	bl	90021960 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001630:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001632:	4b16      	ldr	r3, [pc, #88]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001634:	4a13      	ldr	r2, [pc, #76]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001636:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000163a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000163e:	480f      	ldr	r0, [pc, #60]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001640:	f020 f98e 	bl	90021960 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001644:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001646:	4b12      	ldr	r3, [pc, #72]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001648:	4a0e      	ldr	r2, [pc, #56]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000164e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001652:	480a      	ldr	r0, [pc, #40]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001654:	f020 f984 	bl	90021960 <__assert_func>
        src = (const char*)movieData + offset;
90001658:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000165a:	4420      	add	r0, r4
9000165c:	e753      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000165e:	bf00      	nop
90001660:	90022eac 	.word	0x90022eac
90001664:	90022f64 	.word	0x90022f64
90001668:	90022f5c 	.word	0x90022f5c
9000166c:	90022f54 	.word	0x90022f54
90001670:	10624dd3 	.word	0x10624dd3
90001674:	90022d78 	.word	0x90022d78
90001678:	90022d8c 	.word	0x90022d8c
9000167c:	90022d1c 	.word	0x90022d1c
90001680:	90022eb4 	.word	0x90022eb4
90001684:	90022ed0 	.word	0x90022ed0
90001688:	90022f30 	.word	0x90022f30
9000168c:	90022f18 	.word	0x90022f18
90001690:	90022f00 	.word	0x90022f00

90001694 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001694:	b410      	push	{r4}
    reader = 0; //not using reader
90001696:	2400      	movs	r4, #0
    movieLength = length;
90001698:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
9000169c:	6304      	str	r4, [r0, #48]	; 0x30
}
9000169e:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016a2:	f7ff bd99 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016a6:	bf00      	nop

900016a8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016a8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016aa:	680b      	ldr	r3, [r1, #0]
{
900016ac:	4604      	mov	r4, r0
    movieData = 0;
900016ae:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016b0:	4608      	mov	r0, r1
900016b2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016b4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016b8:	4798      	blx	r3
900016ba:	4603      	mov	r3, r0
    readVideoHeader();
900016bc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016be:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016c4:	f7ff bd88 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016c8 <HAL_JPEG_InfoReadyCallback>:
{
900016c8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ca:	684b      	ldr	r3, [r1, #4]
{
900016cc:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ce:	2b01      	cmp	r3, #1
900016d0:	d01a      	beq.n	90001708 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016d2:	2b02      	cmp	r3, #2
900016d4:	d010      	beq.n	900016f8 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016d6:	b94b      	cbnz	r3, 900016ec <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016d8:	68cb      	ldr	r3, [r1, #12]
900016da:	0759      	lsls	r1, r3, #29
900016dc:	d12f      	bne.n	9000173e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016de:	6883      	ldr	r3, [r0, #8]
900016e0:	075a      	lsls	r2, r3, #29
900016e2:	d003      	beq.n	900016ec <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016e4:	f023 0307 	bic.w	r3, r3, #7
900016e8:	3308      	adds	r3, #8
900016ea:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
900016ec:	4a1a      	ldr	r2, [pc, #104]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
900016ee:	491b      	ldr	r1, [pc, #108]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
900016f0:	f00e f9b8 	bl	9000fa64 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
900016f4:	bb40      	cbnz	r0, 90001748 <HAL_JPEG_InfoReadyCallback+0x80>
}
900016f6:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	071a      	lsls	r2, r3, #28
900016fc:	d0ef      	beq.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900016fe:	f023 030f 	bic.w	r3, r3, #15
90001702:	3310      	adds	r3, #16
90001704:	60cb      	str	r3, [r1, #12]
90001706:	e7ea      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001708:	68cb      	ldr	r3, [r1, #12]
9000170a:	071a      	lsls	r2, r3, #28
9000170c:	d003      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000170e:	f023 030f 	bic.w	r3, r3, #15
90001712:	3310      	adds	r3, #16
90001714:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001716:	6883      	ldr	r3, [r0, #8]
90001718:	0719      	lsls	r1, r3, #28
9000171a:	d003      	beq.n	90001724 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000171c:	f023 030f 	bic.w	r3, r3, #15
90001720:	3310      	adds	r3, #16
90001722:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001724:	4a0c      	ldr	r2, [pc, #48]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
90001726:	490d      	ldr	r1, [pc, #52]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
90001728:	f001 fefa 	bl	90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000172c:	2800      	cmp	r0, #0
9000172e:	d0e2      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001730:	4b0b      	ldr	r3, [pc, #44]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
90001732:	f240 212e 	movw	r1, #558	; 0x22e
90001736:	4a0b      	ldr	r2, [pc, #44]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001738:	480b      	ldr	r0, [pc, #44]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000173a:	f020 f911 	bl	90021960 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000173e:	f023 0307 	bic.w	r3, r3, #7
90001742:	3308      	adds	r3, #8
90001744:	60c3      	str	r3, [r0, #12]
90001746:	e7ca      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001748:	4b05      	ldr	r3, [pc, #20]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000174e:	4a05      	ldr	r2, [pc, #20]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	4805      	ldr	r0, [pc, #20]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f020 f905 	bl	90021960 <__assert_func>
90001756:	bf00      	nop
90001758:	24005b98 	.word	0x24005b98
9000175c:	24005bd4 	.word	0x24005bd4
90001760:	90022f6c 	.word	0x90022f6c
90001764:	90022f80 	.word	0x90022f80
90001768:	90022d1c 	.word	0x90022d1c

9000176c <HAL_JPEG_GetDataCallback>:
{
9000176c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000176e:	4c0c      	ldr	r4, [pc, #48]	; (900017a0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001770:	4a0c      	ldr	r2, [pc, #48]	; (900017a4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001772:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001774:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001776:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001778:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000177a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000177c:	d302      	bcc.n	90001784 <HAL_JPEG_GetDataCallback+0x18>
}
9000177e:	f85d 4b04 	ldr.w	r4, [sp], #4
90001782:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
90001784:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001786:	4b08      	ldr	r3, [pc, #32]	; (900017a8 <HAL_JPEG_GetDataCallback+0x3c>)
90001788:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000178a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000178e:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001790:	bf28      	it	cs
90001792:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179a:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000179c:	f007 b938 	b.w	90008a10 <HAL_JPEG_ConfigInputBuffer>
900017a0:	24005b7c 	.word	0x24005b7c
900017a4:	24005b80 	.word	0x24005b80
900017a8:	24005b78 	.word	0x24005b78

900017ac <HAL_JPEG_DataReadyCallback>:
{
900017ac:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ae:	4e1e      	ldr	r6, [pc, #120]	; (90001828 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017b0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017b2:	2001      	movs	r0, #1
900017b4:	4c1d      	ldr	r4, [pc, #116]	; (9000182c <HAL_JPEG_DataReadyCallback+0x80>)
900017b6:	6833      	ldr	r3, [r6, #0]
900017b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017bc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017be:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017c2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017c8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ca:	d91a      	bls.n	90001802 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017cc:	2200      	movs	r2, #0
900017ce:	4613      	mov	r3, r2
900017d0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017d6:	005a      	lsls	r2, r3, #1
900017d8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017dc:	b9c9      	cbnz	r1, 90001812 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017de:	4914      	ldr	r1, [pc, #80]	; (90001830 <HAL_JPEG_DataReadyCallback+0x84>)
900017e0:	4413      	add	r3, r2
900017e2:	4628      	mov	r0, r5
900017e4:	68ca      	ldr	r2, [r1, #12]
900017e6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
900017ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900017ee:	6861      	ldr	r1, [r4, #4]
900017f0:	01d2      	lsls	r2, r2, #7
900017f2:	f007 f911 	bl	90008a18 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
900017f6:	4b0f      	ldr	r3, [pc, #60]	; (90001834 <HAL_JPEG_DataReadyCallback+0x88>)
}
900017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
900017fc:	6818      	ldr	r0, [r3, #0]
900017fe:	f00a bd27 	b.w	9000c250 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001802:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001806:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001808:	005a      	lsls	r2, r3, #1
9000180a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000180e:	2900      	cmp	r1, #0
90001810:	d0e5      	beq.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001812:	2102      	movs	r1, #2
90001814:	4628      	mov	r0, r5
90001816:	f007 f8c3 	bl	900089a0 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000181a:	4a07      	ldr	r2, [pc, #28]	; (90001838 <HAL_JPEG_DataReadyCallback+0x8c>)
9000181c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000181e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001820:	6011      	str	r1, [r2, #0]
90001822:	fa03 f201 	lsl.w	r2, r3, r1
90001826:	e7da      	b.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
90001828:	24005b88 	.word	0x24005b88
9000182c:	24000004 	.word	0x24000004
90001830:	24005ba0 	.word	0x24005ba0
90001834:	24005bd8 	.word	0x24005bd8
90001838:	24005b9c 	.word	0x24005b9c

9000183c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000183c:	b672      	cpsid	i
  while (1)
9000183e:	e7fe      	b.n	9000183e <HAL_JPEG_ErrorCallback+0x2>

90001840 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001840:	4b01      	ldr	r3, [pc, #4]	; (90001848 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001842:	2201      	movs	r2, #1
90001844:	601a      	str	r2, [r3, #0]
}
90001846:	4770      	bx	lr
90001848:	24005b90 	.word	0x24005b90

9000184c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000184c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000184e:	491b      	ldr	r1, [pc, #108]	; (900018bc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001850:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001852:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001854:	4c1a      	ldr	r4, [pc, #104]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001856:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001858:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000185c:	4e19      	ldr	r6, [pc, #100]	; (900018c4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001862:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001866:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001868:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000186a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000186e:	68cb      	ldr	r3, [r1, #12]
90001870:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001874:	690e      	ldr	r6, [r1, #16]
90001876:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000187c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001880:	d317      	bcc.n	900018b2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001882:	6889      	ldr	r1, [r1, #8]
90001884:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001888:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000188a:	490f      	ldr	r1, [pc, #60]	; (900018c8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
9000188c:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001890:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
90001892:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001894:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001896:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001898:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000189a:	4411      	add	r1, r2
9000189c:	4a08      	ldr	r2, [pc, #32]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
9000189e:	4461      	add	r1, ip
900018a0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018a4:	4909      	ldr	r1, [pc, #36]	; (900018cc <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018a6:	4b0a      	ldr	r3, [pc, #40]	; (900018d0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018a8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018aa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018ac:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ae:	6013      	str	r3, [r2, #0]
}
900018b0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018b2:	0519      	lsls	r1, r3, #20
900018b4:	f041 0110 	orr.w	r1, r1, #16
900018b8:	6461      	str	r1, [r4, #68]	; 0x44
900018ba:	e7e6      	b.n	9000188a <DMA2D_CopyBuffer+0x3e>
900018bc:	24005ba0 	.word	0x24005ba0
900018c0:	52001000 	.word	0x52001000
900018c4:	24005b98 	.word	0x24005b98
900018c8:	24005b74 	.word	0x24005b74
900018cc:	ff09000b 	.word	0xff09000b
900018d0:	00010201 	.word	0x00010201

900018d4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018d4:	2200      	movs	r2, #0
900018d6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018d8:	490b      	ldr	r1, [pc, #44]	; (90001908 <DMA2D_ExternalJobCompleted+0x34>)
900018da:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018dc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018de:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
900018e0:	b911      	cbnz	r1, 900018e8 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
900018e2:	4b0a      	ldr	r3, [pc, #40]	; (9000190c <DMA2D_ExternalJobCompleted+0x38>)
900018e4:	2201      	movs	r2, #1
900018e6:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
900018e8:	4b09      	ldr	r3, [pc, #36]	; (90001910 <DMA2D_ExternalJobCompleted+0x3c>)
900018ea:	490a      	ldr	r1, [pc, #40]	; (90001914 <DMA2D_ExternalJobCompleted+0x40>)
900018ec:	681b      	ldr	r3, [r3, #0]
900018ee:	68c9      	ldr	r1, [r1, #12]
900018f0:	6802      	ldr	r2, [r0, #0]
900018f2:	1a5b      	subs	r3, r3, r1
900018f4:	429a      	cmp	r2, r3
900018f6:	d302      	bcc.n	900018fe <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
900018f8:	4b07      	ldr	r3, [pc, #28]	; (90001918 <DMA2D_ExternalJobCompleted+0x44>)
900018fa:	2201      	movs	r2, #1
900018fc:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
900018fe:	4b07      	ldr	r3, [pc, #28]	; (9000191c <DMA2D_ExternalJobCompleted+0x48>)
90001900:	6818      	ldr	r0, [r3, #0]
90001902:	f00a bca5 	b.w	9000c250 <osSemaphoreRelease>
90001906:	bf00      	nop
90001908:	24005bb4 	.word	0x24005bb4
9000190c:	24005b70 	.word	0x24005b70
90001910:	24005b98 	.word	0x24005b98
90001914:	24005ba0 	.word	0x24005ba0
90001918:	24005b6c 	.word	0x24005b6c
9000191c:	24005bd8 	.word	0x24005bd8

90001920 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001920:	4b03      	ldr	r3, [pc, #12]	; (90001930 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001922:	2200      	movs	r2, #0
90001924:	2102      	movs	r1, #2
90001926:	60da      	str	r2, [r3, #12]
90001928:	6019      	str	r1, [r3, #0]
9000192a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000192e:	4770      	bx	lr
90001930:	24005bb4 	.word	0x24005bb4

90001934 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001934:	2101      	movs	r1, #1
90001936:	2200      	movs	r2, #0
{
90001938:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000193a:	4608      	mov	r0, r1
9000193c:	f00a fc04 	bl	9000c148 <osSemaphoreNew>
90001940:	4b0b      	ldr	r3, [pc, #44]	; (90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001942:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001944:	b140      	cbz	r0, 90001958 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001946:	2200      	movs	r2, #0
90001948:	2104      	movs	r1, #4
9000194a:	2001      	movs	r0, #1
9000194c:	f00a fcac 	bl	9000c2a8 <osMessageQueueNew>
90001950:	4b08      	ldr	r3, [pc, #32]	; (90001974 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001952:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001954:	b130      	cbz	r0, 90001964 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001956:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001958:	4b07      	ldr	r3, [pc, #28]	; (90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000195a:	2128      	movs	r1, #40	; 0x28
9000195c:	4a07      	ldr	r2, [pc, #28]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000195e:	4808      	ldr	r0, [pc, #32]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001960:	f01f fffe 	bl	90021960 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001964:	4b07      	ldr	r3, [pc, #28]	; (90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001966:	212c      	movs	r1, #44	; 0x2c
90001968:	4a04      	ldr	r2, [pc, #16]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000196a:	4805      	ldr	r0, [pc, #20]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000196c:	f01f fff8 	bl	90021960 <__assert_func>
90001970:	24005be0 	.word	0x24005be0
90001974:	24005bdc 	.word	0x24005bdc
90001978:	9002300c 	.word	0x9002300c
9000197c:	90023058 	.word	0x90023058
90001980:	90023088 	.word	0x90023088
90001984:	900230dc 	.word	0x900230dc

90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001988:	4b02      	ldr	r3, [pc, #8]	; (90001994 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
9000198a:	f04f 31ff 	mov.w	r1, #4294967295
9000198e:	6818      	ldr	r0, [r3, #0]
90001990:	f00a bc2a 	b.w	9000c1e8 <osSemaphoreAcquire>
90001994:	24005be0 	.word	0x24005be0

90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001998:	4b01      	ldr	r3, [pc, #4]	; (900019a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
9000199a:	6818      	ldr	r0, [r3, #0]
9000199c:	f00a bc58 	b.w	9000c250 <osSemaphoreRelease>
900019a0:	24005be0 	.word	0x24005be0

900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019a4:	4b02      	ldr	r3, [pc, #8]	; (900019b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019a6:	2100      	movs	r1, #0
900019a8:	6818      	ldr	r0, [r3, #0]
900019aa:	f00a bc1d 	b.w	9000c1e8 <osSemaphoreAcquire>
900019ae:	bf00      	nop
900019b0:	24005be0 	.word	0x24005be0

900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019b4:	4b01      	ldr	r3, [pc, #4]	; (900019bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019b6:	6818      	ldr	r0, [r3, #0]
900019b8:	f00a bc4a 	b.w	9000c250 <osSemaphoreRelease>
900019bc:	24005be0 	.word	0x24005be0

900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019c0:	4803      	ldr	r0, [pc, #12]	; (900019d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019c2:	2300      	movs	r3, #0
900019c4:	4903      	ldr	r1, [pc, #12]	; (900019d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019c6:	461a      	mov	r2, r3
900019c8:	6800      	ldr	r0, [r0, #0]
900019ca:	f00a bcab 	b.w	9000c324 <osMessageQueuePut>
900019ce:	bf00      	nop
900019d0:	24005bdc 	.word	0x24005bdc
900019d4:	2400001c 	.word	0x2400001c

900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019d8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019da:	2300      	movs	r3, #0
{
900019dc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019de:	4c07      	ldr	r4, [pc, #28]	; (900019fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019e0:	461a      	mov	r2, r3
900019e2:	a901      	add	r1, sp, #4
900019e4:	6820      	ldr	r0, [r4, #0]
900019e6:	f00a fcdf 	bl	9000c3a8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
900019ea:	f04f 33ff 	mov.w	r3, #4294967295
900019ee:	2200      	movs	r2, #0
900019f0:	a901      	add	r1, sp, #4
900019f2:	6820      	ldr	r0, [r4, #0]
900019f4:	f00a fcd8 	bl	9000c3a8 <osMessageQueueGet>
}
900019f8:	b002      	add	sp, #8
900019fa:	bd10      	pop	{r4, pc}
900019fc:	24005bdc 	.word	0x24005bdc

90001a00 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a00:	6803      	ldr	r3, [r0, #0]
90001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a04:	4718      	bx	r3
90001a06:	bf00      	nop

90001a08 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a08:	2001      	movs	r0, #1
90001a0a:	4770      	bx	lr

90001a0c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a0c:	4905      	ldr	r1, [pc, #20]	; (90001a24 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a12:	4b05      	ldr	r3, [pc, #20]	; (90001a28 <_ZN8STM32DMAD1Ev+0x1c>)
90001a14:	6001      	str	r1, [r0, #0]
90001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a1e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a22:	4770      	bx	lr
90001a24:	90023288 	.word	0x90023288
90001a28:	e000e100 	.word	0xe000e100

90001a2c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a2c:	4b0f      	ldr	r3, [pc, #60]	; (90001a6c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a2e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a30:	490f      	ldr	r1, [pc, #60]	; (90001a70 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a36:	480f      	ldr	r0, [pc, #60]	; (90001a74 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a38:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a3c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a46:	f002 0210 	and.w	r2, r2, #16
90001a4a:	9201      	str	r2, [sp, #4]
90001a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a50:	f042 0210 	orr.w	r2, r2, #16
90001a54:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a58:	f022 0210 	bic.w	r2, r2, #16
90001a5c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a5e:	4b06      	ldr	r3, [pc, #24]	; (90001a78 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a64:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a66:	b002      	add	sp, #8
90001a68:	4770      	bx	lr
90001a6a:	bf00      	nop
90001a6c:	58024400 	.word	0x58024400
90001a70:	2400ae44 	.word	0x2400ae44
90001a74:	90001e25 	.word	0x90001e25
90001a78:	e000e100 	.word	0xe000e100

90001a7c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a7c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop

90001a84 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a84:	4909      	ldr	r1, [pc, #36]	; (90001aac <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a8a:	4b09      	ldr	r3, [pc, #36]	; (90001ab0 <_ZN8STM32DMAD0Ev+0x2c>)
90001a8c:	b510      	push	{r4, lr}
90001a8e:	6001      	str	r1, [r0, #0]
90001a90:	4604      	mov	r4, r0
90001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a9a:	f3bf 8f6f 	isb	sy
}
90001a9e:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aa2:	f01f ff2e 	bl	90021902 <_ZdlPvj>
90001aa6:	4620      	mov	r0, r4
90001aa8:	bd10      	pop	{r4, pc}
90001aaa:	bf00      	nop
90001aac:	90023288 	.word	0x90023288
90001ab0:	e000e100 	.word	0xe000e100

90001ab4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ab4:	b510      	push	{r4, lr}
90001ab6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ab8:	f04f 31ff 	mov.w	r1, #4294967295
90001abc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ac0:	f00a fafc 	bl	9000c0bc <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ac4:	6860      	ldr	r0, [r4, #4]
90001ac6:	6803      	ldr	r3, [r0, #0]
90001ac8:	681b      	ldr	r3, [r3, #0]
90001aca:	4798      	blx	r3
90001acc:	b978      	cbnz	r0, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ace:	7a63      	ldrb	r3, [r4, #9]
90001ad0:	b16b      	cbz	r3, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ad2:	7a23      	ldrb	r3, [r4, #8]
90001ad4:	b92b      	cbnz	r3, 90001ae2 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001ad6:	6822      	ldr	r2, [r4, #0]
90001ad8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001ada:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001ade:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001ae0:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001ae2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001aea:	f00a bb0b 	b.w	9000c104 <osMutexRelease>
      return count_ == 0;
90001aee:	4b0b      	ldr	r3, [pc, #44]	; (90001b1c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001af0:	68da      	ldr	r2, [r3, #12]
90001af2:	2a00      	cmp	r2, #0
90001af4:	d0f5      	beq.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
90001af6:	7a22      	ldrb	r2, [r4, #8]
90001af8:	2a00      	cmp	r2, #0
90001afa:	d1f2      	bne.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001afc:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001afe:	2201      	movs	r2, #1
      return buffer_[head_];
90001b00:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b02:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b06:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b0c:	f7ff fe9e 	bl	9000184c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b10:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b18:	f00a baf4 	b.w	9000c104 <osMutexRelease>
90001b1c:	24005bb4 	.word	0x24005bb4

90001b20 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b20:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b22:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b26:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b28:	b943      	cbnz	r3, 90001b3c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b2a:	6803      	ldr	r3, [r0, #0]
90001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b2e:	4798      	blx	r3
      return count_ == 0;
90001b30:	4b15      	ldr	r3, [pc, #84]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b32:	68da      	ldr	r2, [r3, #12]
90001b34:	b10a      	cbz	r2, 90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b36:	7a22      	ldrb	r2, [r4, #8]
90001b38:	b1d2      	cbz	r2, 90001b70 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b3a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b3c:	4b12      	ldr	r3, [pc, #72]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b3e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b40:	2a00      	cmp	r2, #0
90001b42:	d0fa      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b44:	7a01      	ldrb	r1, [r0, #8]
90001b46:	2900      	cmp	r1, #0
90001b48:	d0f7      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b4a:	2100      	movs	r1, #0
      count_--;
90001b4c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b4e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b52:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b54:	1c41      	adds	r1, r0, #1
      count_--;
90001b56:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b58:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b5a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b5e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b66:	6059      	str	r1, [r3, #4]
    }
90001b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b6c:	f7ff beb2 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b70:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b72:	2201      	movs	r2, #1
      return buffer_[head_];
90001b74:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b76:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b7a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b7c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b84:	f7ff be62 	b.w	9000184c <DMA2D_CopyBuffer>
90001b88:	24005bb4 	.word	0x24005bb4

90001b8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001b8c:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001b8e:	7f8b      	ldrb	r3, [r1, #30]
90001b90:	2b0a      	cmp	r3, #10
90001b92:	d83e      	bhi.n	90001c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001b94:	e8df f003 	tbb	[pc, r3]
90001b98:	3d2a063b 	.word	0x3d2a063b
90001b9c:	063d3d3d 	.word	0x063d3d3d
90001ba0:	0606      	.short	0x0606
90001ba2:	06          	.byte	0x06
90001ba3:	00          	.byte	0x00
90001ba4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ba6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001baa:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bac:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bae:	4b1c      	ldr	r3, [pc, #112]	; (90001c20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bb4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bb8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bba:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bbc:	6908      	ldr	r0, [r1, #16]
90001bbe:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bc2:	680d      	ldr	r5, [r1, #0]
90001bc4:	2d08      	cmp	r5, #8
90001bc6:	d013      	beq.n	90001bf0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001bc8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bca:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bcc:	4c15      	ldr	r4, [pc, #84]	; (90001c24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bce:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bd0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bd2:	0a0a      	lsrs	r2, r1, #8
90001bd4:	0948      	lsrs	r0, r1, #5
90001bd6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bda:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001be2:	4302      	orrs	r2, r0
90001be4:	430a      	orrs	r2, r1
90001be6:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be8:	601c      	str	r4, [r3, #0]
    }
}
90001bea:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001bec:	2400      	movs	r4, #0
90001bee:	e7da      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf0:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001bf4:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001bf6:	4a0c      	ldr	r2, [pc, #48]	; (90001c28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001bf8:	7f0c      	ldrb	r4, [r1, #28]
90001bfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001bfe:	4c0b      	ldr	r4, [pc, #44]	; (90001c2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c00:	61da      	str	r2, [r3, #28]
90001c02:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c04:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c06:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c08:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c0a:	601c      	str	r4, [r3, #0]
}
90001c0c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c0e:	2402      	movs	r4, #2
90001c10:	e7c9      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c12:	4b07      	ldr	r3, [pc, #28]	; (90001c30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c14:	2188      	movs	r1, #136	; 0x88
90001c16:	4a07      	ldr	r2, [pc, #28]	; (90001c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c18:	4807      	ldr	r0, [pc, #28]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c1a:	f01f fea1 	bl	90021960 <__assert_func>
90001c1e:	bf00      	nop
90001c20:	52001000 	.word	0x52001000
90001c24:	00030201 	.word	0x00030201
90001c28:	00010009 	.word	0x00010009
90001c2c:	00020201 	.word	0x00020201
90001c30:	90023120 	.word	0x90023120
90001c34:	9002313c 	.word	0x9002313c
90001c38:	90023188 	.word	0x90023188

90001c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c3e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c42:	f1be 0f0b 	cmp.w	lr, #11
90001c46:	f200 80c1 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c4a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c4e:	0063      	.short	0x0063
90001c50:	004c0065 	.word	0x004c0065
90001c54:	00bf00bf 	.word	0x00bf00bf
90001c58:	00bf00bf 	.word	0x00bf00bf
90001c5c:	000c000c 	.word	0x000c000c
90001c60:	000c000c 	.word	0x000c000c
90001c64:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c66:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c68:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c6c:	f1bc 0f0b 	cmp.w	ip, #11
90001c70:	f200 80ac 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c74:	e8df f00c 	tbb	[pc, ip]
90001c78:	aa0e4b52 	.word	0xaa0e4b52
90001c7c:	06aaaaaa 	.word	0x06aaaaaa
90001c80:	06060606 	.word	0x06060606
    switch (format)
90001c84:	f1ac 0307 	sub.w	r3, ip, #7
90001c88:	2b03      	cmp	r3, #3
90001c8a:	f200 80a5 	bhi.w	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001c8e:	2605      	movs	r6, #5
90001c90:	2701      	movs	r7, #1
90001c92:	e001      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001c94:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c96:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c98:	8a8b      	ldrh	r3, [r1, #20]
90001c9a:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001c9c:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001c9e:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001ca2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ca4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca8:	4b52      	ldr	r3, [pc, #328]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001caa:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cac:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cae:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cb0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cb2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cb6:	6908      	ldr	r0, [r1, #16]
90001cb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cba:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cbc:	680a      	ldr	r2, [r1, #0]
90001cbe:	2a80      	cmp	r2, #128	; 0x80
90001cc0:	d03b      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cc2:	d812      	bhi.n	90001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cc4:	2a20      	cmp	r2, #32
90001cc6:	d02c      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cc8:	2a40      	cmp	r2, #64	; 0x40
90001cca:	d02a      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ccc:	2a04      	cmp	r2, #4
90001cce:	d169      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cd2:	4949      	ldr	r1, [pc, #292]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cdc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cde:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ce0:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ce2:	6019      	str	r1, [r3, #0]
}
90001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001ce6:	2500      	movs	r5, #0
90001ce8:	e7be      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001cea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001cee:	d067      	beq.n	90001dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001cf0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001cf4:	d156      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf6:	7f0c      	ldrb	r4, [r1, #28]
90001cf8:	4a40      	ldr	r2, [pc, #256]	; (90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001cfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001cfe:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d00:	4a3d      	ldr	r2, [pc, #244]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d02:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d04:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d06:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d08:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d0a:	601a      	str	r2, [r3, #0]
}
90001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d0e:	2601      	movs	r6, #1
90001d10:	4637      	mov	r7, r6
90001d12:	e7c1      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d14:	2502      	movs	r5, #2
90001d16:	e7a7      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d18:	2501      	movs	r5, #1
90001d1a:	e7a5      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d1c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d1e:	4637      	mov	r7, r6
90001d20:	e7ba      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d22:	7f0b      	ldrb	r3, [r1, #28]
90001d24:	4a33      	ldr	r2, [pc, #204]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d26:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d2e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d30:	4b31      	ldr	r3, [pc, #196]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d32:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d34:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d36:	6013      	str	r3, [r2, #0]
}
90001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d3a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d3c:	1d14      	adds	r4, r2, #4
90001d3e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d40:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d42:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d48:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d4c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d50:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d52:	b9b1      	cbnz	r1, 90001d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d54:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d56:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d58:	69d8      	ldr	r0, [r3, #28]
90001d5a:	4a29      	ldr	r2, [pc, #164]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d5c:	3901      	subs	r1, #1
90001d5e:	4002      	ands	r2, r0
90001d60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d64:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d66:	4a23      	ldr	r2, [pc, #140]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d68:	69d3      	ldr	r3, [r2, #28]
90001d6a:	f043 0320 	orr.w	r3, r3, #32
90001d6e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d70:	69d3      	ldr	r3, [r2, #28]
90001d72:	069b      	lsls	r3, r3, #26
90001d74:	d4fc      	bmi.n	90001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d76:	2310      	movs	r3, #16
90001d78:	6093      	str	r3, [r2, #8]
            if(blend)
90001d7a:	b324      	cbz	r4, 90001dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d7c:	4b1e      	ldr	r3, [pc, #120]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d7e:	6013      	str	r3, [r2, #0]
}
90001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d82:	2901      	cmp	r1, #1
90001d84:	d12e      	bne.n	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d86:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001d88:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d8a:	69d8      	ldr	r0, [r3, #28]
90001d8c:	4a1c      	ldr	r2, [pc, #112]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d8e:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001d92:	bf18      	it	ne
90001d94:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d96:	4002      	ands	r2, r0
90001d98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d9c:	f042 0210 	orr.w	r2, r2, #16
90001da0:	61da      	str	r2, [r3, #28]
                break;
90001da2:	e7e0      	b.n	90001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001da6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da8:	4b12      	ldr	r3, [pc, #72]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001daa:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dae:	bf14      	ite	ne
90001db0:	4a14      	ldrne	r2, [pc, #80]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001db2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001db6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dba:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dbc:	601a      	str	r2, [r3, #0]
}
90001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	7f0c      	ldrb	r4, [r1, #28]
90001dc2:	4a11      	ldr	r2, [pc, #68]	; (90001e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001dc4:	e799      	b.n	90001cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	4b0f      	ldr	r3, [pc, #60]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001dc8:	6013      	str	r3, [r2, #0]
}
90001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dcc:	4b0f      	ldr	r3, [pc, #60]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dce:	2167      	movs	r1, #103	; 0x67
90001dd0:	4a0f      	ldr	r2, [pc, #60]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dd2:	4810      	ldr	r0, [pc, #64]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dd4:	f01f fdc4 	bl	90021960 <__assert_func>
        assert(0 && "Unsupported Format!");
90001dd8:	4b0c      	ldr	r3, [pc, #48]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dda:	2188      	movs	r1, #136	; 0x88
90001ddc:	4a0e      	ldr	r2, [pc, #56]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dde:	480d      	ldr	r0, [pc, #52]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001de0:	f01f fdbe 	bl	90021960 <__assert_func>
                assert(0 && "Unsupported format");
90001de4:	4b0d      	ldr	r3, [pc, #52]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001de6:	f44f 7189 	mov.w	r1, #274	; 0x112
90001dea:	4a0d      	ldr	r2, [pc, #52]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001dec:	4809      	ldr	r0, [pc, #36]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dee:	f01f fdb7 	bl	90021960 <__assert_func>
90001df2:	bf00      	nop
90001df4:	52001000 	.word	0x52001000
90001df8:	00020201 	.word	0x00020201
90001dfc:	00020009 	.word	0x00020009
90001e00:	ffff00ef 	.word	0xffff00ef
90001e04:	00010201 	.word	0x00010201
90001e08:	0002000a 	.word	0x0002000a
90001e0c:	90023120 	.word	0x90023120
90001e10:	900231d8 	.word	0x900231d8
90001e14:	90023188 	.word	0x90023188
90001e18:	9002313c 	.word	0x9002313c
90001e1c:	90023224 	.word	0x90023224
90001e20:	90023240 	.word	0x90023240

90001e24 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e24:	4b1f      	ldr	r3, [pc, #124]	; (90001ea4 <DMA2D_XferCpltCallback+0x80>)
90001e26:	4920      	ldr	r1, [pc, #128]	; (90001ea8 <DMA2D_XferCpltCallback+0x84>)
90001e28:	681b      	ldr	r3, [r3, #0]
    {
90001e2a:	b570      	push	{r4, r5, r6, lr}
90001e2c:	685c      	ldr	r4, [r3, #4]
90001e2e:	6823      	ldr	r3, [r4, #0]
90001e30:	695a      	ldr	r2, [r3, #20]
90001e32:	428a      	cmp	r2, r1
90001e34:	d125      	bne.n	90001e82 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e36:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e3a:	b942      	cbnz	r2, 90001e4e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e3e:	4620      	mov	r0, r4
90001e40:	4798      	blx	r3
      return count_ == 0;
90001e42:	4b1a      	ldr	r3, [pc, #104]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e44:	68da      	ldr	r2, [r3, #12]
90001e46:	b10a      	cbz	r2, 90001e4c <DMA2D_XferCpltCallback+0x28>
90001e48:	7a22      	ldrb	r2, [r4, #8]
90001e4a:	b1f2      	cbz	r2, 90001e8a <DMA2D_XferCpltCallback+0x66>
    }
90001e4c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e4e:	4b17      	ldr	r3, [pc, #92]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
90001e50:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e52:	2a00      	cmp	r2, #0
90001e54:	d0fa      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
90001e56:	7a21      	ldrb	r1, [r4, #8]
90001e58:	2900      	cmp	r1, #0
90001e5a:	d0f7      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e5c:	2100      	movs	r1, #0
      count_--;
90001e5e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e60:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e64:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e66:	1c41      	adds	r1, r0, #1
      count_--;
90001e68:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e6a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e6c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e70:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e7c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e7e:	f7ff bd29 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
90001e82:	4620      	mov	r0, r4
90001e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e88:	4710      	bx	r2
      return buffer_[head_];
90001e8a:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001e8c:	2201      	movs	r2, #1
      return buffer_[head_];
90001e8e:	3002      	adds	r0, #2
                started_by_external_job = true;
90001e90:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001e94:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e9e:	f7ff bcd5 	b.w	9000184c <DMA2D_CopyBuffer>
90001ea2:	bf00      	nop
90001ea4:	2402620c 	.word	0x2402620c
90001ea8:	90001b21 	.word	0x90001b21
90001eac:	24005bb4 	.word	0x24005bb4

90001eb0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001eb0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb2:	4b10      	ldr	r3, [pc, #64]	; (90001ef4 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001eb4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001eb8:	2500      	movs	r5, #0
90001eba:	300c      	adds	r0, #12
90001ebc:	2260      	movs	r2, #96	; 0x60
90001ebe:	7235      	strb	r5, [r6, #8]
90001ec0:	7275      	strb	r5, [r6, #9]
90001ec2:	6070      	str	r0, [r6, #4]
90001ec4:	f844 3b20 	str.w	r3, [r4], #32
90001ec8:	4621      	mov	r1, r4
90001eca:	f00f f80f 	bl	90010eec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ece:	4621      	mov	r1, r4
90001ed0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ed4:	60cd      	str	r5, [r1, #12]
90001ed6:	3124      	adds	r1, #36	; 0x24
90001ed8:	428b      	cmp	r3, r1
90001eda:	d1fb      	bne.n	90001ed4 <_ZN8STM32DMAC1Ev+0x24>
90001edc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ee0:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ee2:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001ee6:	f00a f8a9 	bl	9000c03c <osMutexNew>
90001eea:	4603      	mov	r3, r0
}
90001eec:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001eee:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001ef2:	bd70      	pop	{r4, r5, r6, pc}
90001ef4:	90023288 	.word	0x90023288

90001ef8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001ef8:	2001      	movs	r0, #1
90001efa:	4770      	bx	lr

90001efc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001efc:	200c      	movs	r0, #12
90001efe:	4770      	bx	lr

90001f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f08:	3008      	adds	r0, #8
90001f0a:	4770      	bx	lr

90001f0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f14:	3008      	adds	r0, #8
90001f16:	4770      	bx	lr

90001f18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f18:	2001      	movs	r0, #1
90001f1a:	4770      	bx	lr

90001f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f1c:	20ec      	movs	r0, #236	; 0xec
90001f1e:	4770      	bx	lr

90001f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f20:	23ec      	movs	r3, #236	; 0xec
90001f22:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f26:	3008      	adds	r0, #8
90001f28:	4770      	bx	lr
90001f2a:	bf00      	nop

90001f2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f2c:	23ec      	movs	r3, #236	; 0xec
90001f2e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f32:	3008      	adds	r0, #8
90001f34:	4770      	bx	lr
90001f36:	bf00      	nop

90001f38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f38:	2001      	movs	r0, #1
90001f3a:	4770      	bx	lr

90001f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f3c:	2010      	movs	r0, #16
90001f3e:	4770      	bx	lr

90001f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f40:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f44:	3008      	adds	r0, #8
90001f46:	4770      	bx	lr

90001f48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f48:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f4c:	3008      	adds	r0, #8
90001f4e:	4770      	bx	lr

90001f50 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f50:	4608      	mov	r0, r1
90001f52:	f003 b903 	b.w	9000515c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f56:	bf00      	nop

90001f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f58:	4b03      	ldr	r3, [pc, #12]	; (90001f68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f5a:	b510      	push	{r4, lr}
90001f5c:	4604      	mov	r4, r0
90001f5e:	6003      	str	r3, [r0, #0]
90001f60:	f00d fe2f 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f64:	4620      	mov	r0, r4
90001f66:	bd10      	pop	{r4, pc}
90001f68:	90023340 	.word	0x90023340

90001f6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f6c:	4b05      	ldr	r3, [pc, #20]	; (90001f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f6e:	b510      	push	{r4, lr}
90001f70:	4604      	mov	r4, r0
90001f72:	6003      	str	r3, [r0, #0]
90001f74:	f00d fe25 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f78:	2114      	movs	r1, #20
90001f7a:	4620      	mov	r0, r4
90001f7c:	f01f fcc1 	bl	90021902 <_ZdlPvj>
90001f80:	4620      	mov	r0, r4
90001f82:	bd10      	pop	{r4, pc}
90001f84:	90023340 	.word	0x90023340

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001f88:	4b03      	ldr	r3, [pc, #12]	; (90001f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f8a:	b510      	push	{r4, lr}
90001f8c:	4604      	mov	r4, r0
90001f8e:	6003      	str	r3, [r0, #0]
90001f90:	f00d fe17 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f94:	4620      	mov	r0, r4
90001f96:	bd10      	pop	{r4, pc}
90001f98:	9002330c 	.word	0x9002330c

90001f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f9c:	4b05      	ldr	r3, [pc, #20]	; (90001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f9e:	b510      	push	{r4, lr}
90001fa0:	4604      	mov	r4, r0
90001fa2:	6003      	str	r3, [r0, #0]
90001fa4:	f00d fe0d 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fa8:	21f4      	movs	r1, #244	; 0xf4
90001faa:	4620      	mov	r0, r4
90001fac:	f01f fca9 	bl	90021902 <_ZdlPvj>
90001fb0:	4620      	mov	r0, r4
90001fb2:	bd10      	pop	{r4, pc}
90001fb4:	9002330c 	.word	0x9002330c

90001fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fb8:	4b03      	ldr	r3, [pc, #12]	; (90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fba:	b510      	push	{r4, lr}
90001fbc:	4604      	mov	r4, r0
90001fbe:	6003      	str	r3, [r0, #0]
90001fc0:	f00d fdff 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fc4:	4620      	mov	r0, r4
90001fc6:	bd10      	pop	{r4, pc}
90001fc8:	900232d8 	.word	0x900232d8

90001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fcc:	4b05      	ldr	r3, [pc, #20]	; (90001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fce:	b510      	push	{r4, lr}
90001fd0:	4604      	mov	r4, r0
90001fd2:	6003      	str	r3, [r0, #0]
90001fd4:	f00d fdf5 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fd8:	2118      	movs	r1, #24
90001fda:	4620      	mov	r0, r4
90001fdc:	f01f fc91 	bl	90021902 <_ZdlPvj>
90001fe0:	4620      	mov	r0, r4
90001fe2:	bd10      	pop	{r4, pc}
90001fe4:	900232d8 	.word	0x900232d8

90001fe8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90001fe8:	b510      	push	{r4, lr}
90001fea:	4a0c      	ldr	r2, [pc, #48]	; (9000201c <_ZN12FrontendHeapD1Ev+0x34>)
90001fec:	4604      	mov	r4, r0
90001fee:	4b0c      	ldr	r3, [pc, #48]	; (90002020 <_ZN12FrontendHeapD1Ev+0x38>)
90001ff0:	f500 7090 	add.w	r0, r0, #288	; 0x120
90001ff4:	6022      	str	r2, [r4, #0]
90001ff6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90001ffa:	f00d fde2 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001ffe:	4620      	mov	r0, r4
90002000:	4b08      	ldr	r3, [pc, #32]	; (90002024 <_ZN12FrontendHeapD1Ev+0x3c>)
90002002:	f840 3f2c 	str.w	r3, [r0, #44]!
90002006:	f00d fddc 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000200a:	4620      	mov	r0, r4
9000200c:	4b06      	ldr	r3, [pc, #24]	; (90002028 <_ZN12FrontendHeapD1Ev+0x40>)
9000200e:	f840 3f14 	str.w	r3, [r0, #20]!
90002012:	f00d fdd6 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002016:	4620      	mov	r0, r4
90002018:	bd10      	pop	{r4, pc}
9000201a:	bf00      	nop
9000201c:	90023374 	.word	0x90023374
90002020:	90023340 	.word	0x90023340
90002024:	9002330c 	.word	0x9002330c
90002028:	900232d8 	.word	0x900232d8

9000202c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
9000202c:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
9000202e:	4c0c      	ldr	r4, [pc, #48]	; (90002060 <__tcf_0+0x34>)
90002030:	4a0c      	ldr	r2, [pc, #48]	; (90002064 <__tcf_0+0x38>)
90002032:	4b0d      	ldr	r3, [pc, #52]	; (90002068 <__tcf_0+0x3c>)
90002034:	f504 7090 	add.w	r0, r4, #288	; 0x120
90002038:	6022      	str	r2, [r4, #0]
9000203a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
9000203e:	f00d fdc0 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002042:	4620      	mov	r0, r4
90002044:	4b09      	ldr	r3, [pc, #36]	; (9000206c <__tcf_0+0x40>)
90002046:	f840 3f2c 	str.w	r3, [r0, #44]!
9000204a:	f00d fdba 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000204e:	4620      	mov	r0, r4
90002050:	4b07      	ldr	r3, [pc, #28]	; (90002070 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002056:	f840 3f14 	str.w	r3, [r0, #20]!
9000205a:	f00d bdb2 	b.w	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000205e:	bf00      	nop
90002060:	24005be8 	.word	0x24005be8
90002064:	90023374 	.word	0x90023374
90002068:	90023340 	.word	0x90023340
9000206c:	9002330c 	.word	0x9002330c
90002070:	900232d8 	.word	0x900232d8

90002074 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002074:	b510      	push	{r4, lr}
90002076:	4a0e      	ldr	r2, [pc, #56]	; (900020b0 <_ZN12FrontendHeapD0Ev+0x3c>)
90002078:	4604      	mov	r4, r0
9000207a:	4b0e      	ldr	r3, [pc, #56]	; (900020b4 <_ZN12FrontendHeapD0Ev+0x40>)
9000207c:	f500 7090 	add.w	r0, r0, #288	; 0x120
90002080:	6022      	str	r2, [r4, #0]
90002082:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90002086:	f00d fd9c 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208a:	4620      	mov	r0, r4
9000208c:	4b0a      	ldr	r3, [pc, #40]	; (900020b8 <_ZN12FrontendHeapD0Ev+0x44>)
9000208e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002092:	f00d fd96 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002096:	4b09      	ldr	r3, [pc, #36]	; (900020bc <_ZN12FrontendHeapD0Ev+0x48>)
90002098:	4620      	mov	r0, r4
9000209a:	f840 3f14 	str.w	r3, [r0, #20]!
9000209e:	f00d fd90 	bl	9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a2:	4620      	mov	r0, r4
900020a4:	f44f 7126 	mov.w	r1, #664	; 0x298
900020a8:	f01f fc2b 	bl	90021902 <_ZdlPvj>
900020ac:	4620      	mov	r0, r4
900020ae:	bd10      	pop	{r4, pc}
900020b0:	90023374 	.word	0x90023374
900020b4:	90023340 	.word	0x90023340
900020b8:	9002330c 	.word	0x9002330c
900020bc:	900232d8 	.word	0x900232d8

900020c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020c4:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020c6:	2400      	movs	r4, #0
900020c8:	f002 fe5e 	bl	90004d88 <_ZN14BitmapDatabase11getInstanceEv>
900020cc:	4605      	mov	r5, r0
900020ce:	f002 fe5f 	bl	90004d90 <_ZN14BitmapDatabase15getInstanceSizeEv>
900020d2:	4623      	mov	r3, r4
900020d4:	4601      	mov	r1, r0
900020d6:	4622      	mov	r2, r4
900020d8:	4628      	mov	r0, r5
900020da:	9400      	str	r4, [sp, #0]
900020dc:	f013 fe1c 	bl	90015d18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900020e0:	4b28      	ldr	r3, [pc, #160]	; (90002184 <touchgfx_init+0xc4>)
900020e2:	4a29      	ldr	r2, [pc, #164]	; (90002188 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900020e4:	4620      	mov	r0, r4
        static FrontendHeap instance;
900020e6:	4c29      	ldr	r4, [pc, #164]	; (9000218c <touchgfx_init+0xcc>)
900020e8:	601a      	str	r2, [r3, #0]
900020ea:	f003 fbe9 	bl	900058c0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900020ee:	4828      	ldr	r0, [pc, #160]	; (90002190 <touchgfx_init+0xd0>)
900020f0:	f013 fd7a 	bl	90015be8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
900020f4:	6823      	ldr	r3, [r4, #0]
900020f6:	f3bf 8f5b 	dmb	ish
900020fa:	07db      	lsls	r3, r3, #31
900020fc:	d505      	bpl.n	9000210a <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
900020fe:	4825      	ldr	r0, [pc, #148]	; (90002194 <touchgfx_init+0xd4>)
}
90002100:	b002      	add	sp, #8
90002102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002106:	f7fe bbd9 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000210a:	4620      	mov	r0, r4
9000210c:	f01f fbfb 	bl	90021906 <__cxa_guard_acquire>
90002110:	2800      	cmp	r0, #0
90002112:	d0f4      	beq.n	900020fe <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
90002114:	4d20      	ldr	r5, [pc, #128]	; (90002198 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002116:	4b21      	ldr	r3, [pc, #132]	; (9000219c <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002118:	f505 769e 	add.w	r6, r5, #316	; 0x13c
        : presenterStorage(pres),
9000211c:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002120:	f105 082c 	add.w	r8, r5, #44	; 0x2c
          transitionStorage(tra),
90002124:	f505 7790 	add.w	r7, r5, #288	; 0x120
90002128:	602b      	str	r3, [r5, #0]
9000212a:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
9000212c:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
9000212e:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002132:	f00d fd47 	bl	9000fbc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002136:	4b1a      	ldr	r3, [pc, #104]	; (900021a0 <touchgfx_init+0xe0>)
90002138:	4640      	mov	r0, r8
9000213a:	616b      	str	r3, [r5, #20]
9000213c:	f00d fd42 	bl	9000fbc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002140:	4b18      	ldr	r3, [pc, #96]	; (900021a4 <touchgfx_init+0xe4>)
90002142:	4638      	mov	r0, r7
90002144:	62eb      	str	r3, [r5, #44]	; 0x2c
90002146:	f00d fd3d 	bl	9000fbc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000214a:	4b17      	ldr	r3, [pc, #92]	; (900021a8 <touchgfx_init+0xe8>)
9000214c:	f505 709a 	add.w	r0, r5, #308	; 0x134
90002150:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
90002154:	f003 fc36 	bl	900059c4 <_ZN5ModelC1Ev>
90002158:	462a      	mov	r2, r5
9000215a:	f505 719a 	add.w	r1, r5, #308	; 0x134
9000215e:	4630      	mov	r0, r6
90002160:	f003 fc24 	bl	900059ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002164:	4630      	mov	r0, r6
90002166:	f002 fff9 	bl	9000515c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000216a:	4810      	ldr	r0, [pc, #64]	; (900021ac <touchgfx_init+0xec>)
9000216c:	f01f fc16 	bl	9002199c <atexit>
90002170:	4620      	mov	r0, r4
90002172:	f01f fbd4 	bl	9002191e <__cxa_guard_release>
90002176:	4807      	ldr	r0, [pc, #28]	; (90002194 <touchgfx_init+0xd4>)
}
90002178:	b002      	add	sp, #8
9000217a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000217e:	f7fe bb9d 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
90002182:	bf00      	nop
90002184:	24026268 	.word	0x24026268
90002188:	24006cb4 	.word	0x24006cb4
9000218c:	24005be4 	.word	0x24005be4
90002190:	24000020 	.word	0x24000020
90002194:	24006c2c 	.word	0x24006c2c
90002198:	24005be8 	.word	0x24005be8
9000219c:	90023374 	.word	0x90023374
900021a0:	900232d8 	.word	0x900232d8
900021a4:	9002330c 	.word	0x9002330c
900021a8:	90023340 	.word	0x90023340
900021ac:	9000202d 	.word	0x9000202d

900021b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021b0:	4770      	bx	lr
900021b2:	bf00      	nop

900021b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021b4:	4801      	ldr	r0, [pc, #4]	; (900021bc <touchgfx_taskEntry+0x8>)
900021b6:	f7fe bb47 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021ba:	bf00      	nop
900021bc:	24006c2c 	.word	0x24006c2c

900021c0 <_GLOBAL__sub_I_touchgfx_init>:
}
900021c0:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021c2:	4b26      	ldr	r3, [pc, #152]	; (9000225c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021c4:	4c26      	ldr	r4, [pc, #152]	; (90002260 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021c6:	4e27      	ldr	r6, [pc, #156]	; (90002264 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021c8:	4d27      	ldr	r5, [pc, #156]	; (90002268 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021ca:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021cc:	4630      	mov	r0, r6
900021ce:	f7ff fe6f 	bl	90001eb0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021d2:	4628      	mov	r0, r5
900021d4:	f016 feaa 	bl	90018f2c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
900021d8:	4b24      	ldr	r3, [pc, #144]	; (9000226c <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
900021da:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900021e0:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900021e4:	62da      	str	r2, [r3, #44]	; 0x2c
900021e6:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
900021e8:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
900021ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
900021ee:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
900021f0:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
900021f4:	4c1e      	ldr	r4, [pc, #120]	; (90002270 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
900021f6:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
900021f8:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
900021fc:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
900021fe:	2401      	movs	r4, #1
90002200:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
90002204:	4c1b      	ldr	r4, [pc, #108]	; (90002274 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002206:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002208:	4c1b      	ldr	r4, [pc, #108]	; (90002278 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
9000220a:	8020      	strh	r0, [r4, #0]
9000220c:	4c1b      	ldr	r4, [pc, #108]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
9000220e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002212:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002214:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002218:	4c19      	ldr	r4, [pc, #100]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000221a:	481a      	ldr	r0, [pc, #104]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
9000221c:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
9000221e:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
90002222:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
90002226:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
9000222a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
9000222e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002232:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
90002236:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
9000223a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000223e:	8021      	strh	r1, [r4, #0]
90002240:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
90002242:	4c11      	ldr	r4, [pc, #68]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002244:	4811      	ldr	r0, [pc, #68]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
90002246:	4912      	ldr	r1, [pc, #72]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90002248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000224c:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
9000224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
90002252:	6018      	str	r0, [r3, #0]
          cc_in(0)
90002254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002258:	67d9      	str	r1, [r3, #124]	; 0x7c
}
9000225a:	bd70      	pop	{r4, r5, r6, pc}
9000225c:	90022a5c 	.word	0x90022a5c
90002260:	24005e80 	.word	0x24005e80
90002264:	24005e84 	.word	0x24005e84
90002268:	24006cb8 	.word	0x24006cb8
9000226c:	24006c2c 	.word	0x24006c2c
90002270:	01000001 	.word	0x01000001
90002274:	2402620c 	.word	0x2402620c
90002278:	24026200 	.word	0x24026200
9000227c:	24026206 	.word	0x24026206
90002280:	24026202 	.word	0x24026202
90002284:	24026208 	.word	0x24026208
90002288:	24026204 	.word	0x24026204
9000228c:	90022bec 	.word	0x90022bec
90002290:	90022a34 	.word	0x90022a34

90002294 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002294:	4801      	ldr	r0, [pc, #4]	; (9000229c <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002296:	f7ff bbb9 	b.w	90001a0c <_ZN8STM32DMAD1Ev>
9000229a:	bf00      	nop
9000229c:	24005e84 	.word	0x24005e84

900022a0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022a4:	b112      	cbz	r2, 900022ac <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022a6:	6803      	ldr	r3, [r0, #0]
900022a8:	695b      	ldr	r3, [r3, #20]
900022aa:	4718      	bx	r3
        }
    }
900022ac:	4770      	bx	lr
900022ae:	bf00      	nop

900022b0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022b0:	2000      	movs	r0, #0
900022b2:	4770      	bx	lr

900022b4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022b4:	8081      	strh	r1, [r0, #4]
    }
900022b6:	4770      	bx	lr

900022b8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022b8:	80c1      	strh	r1, [r0, #6]
    }
900022ba:	4770      	bx	lr

900022bc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022bc:	8101      	strh	r1, [r0, #8]
    }
900022be:	4770      	bx	lr

900022c0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022c0:	8141      	strh	r1, [r0, #10]
    }
900022c2:	4770      	bx	lr

900022c4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022c4:	4770      	bx	lr
900022c6:	bf00      	nop

900022c8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022c8:	4770      	bx	lr
900022ca:	bf00      	nop

900022cc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022cc:	4770      	bx	lr
900022ce:	bf00      	nop

900022d0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022d0:	4770      	bx	lr
900022d2:	bf00      	nop

900022d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022d4:	4770      	bx	lr
900022d6:	bf00      	nop

900022d8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022d8:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022dc:	6803      	ldr	r3, [r0, #0]
900022de:	eba2 020c 	sub.w	r2, r2, ip
900022e2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900022e8:	eba1 010c 	sub.w	r1, r1, ip
900022ec:	b212      	sxth	r2, r2
900022ee:	b209      	sxth	r1, r1
900022f0:	4718      	bx	r3
900022f2:	bf00      	nop

900022f4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900022f4:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022f6:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
900022fa:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022fe:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
90002302:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
90002306:	6010      	str	r0, [r2, #0]
    }
90002308:	4770      	bx	lr
9000230a:	bf00      	nop

9000230c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
9000230c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002310:	b11a      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002312:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002316:	b102      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002318:	6018      	str	r0, [r3, #0]
        }
    }
9000231a:	4770      	bx	lr

9000231c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
9000231c:	2000      	movs	r0, #0
9000231e:	4770      	bx	lr

90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002320:	4b03      	ldr	r3, [pc, #12]	; (90002330 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90002322:	2290      	movs	r2, #144	; 0x90
90002324:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002328:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
9000232c:	4770      	bx	lr
9000232e:	bf00      	nop
90002330:	e000e100 	.word	0xe000e100

90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002334:	4a09      	ldr	r2, [pc, #36]	; (9000235c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90002336:	490a      	ldr	r1, [pc, #40]	; (90002360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002338:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000233a:	480a      	ldr	r0, [pc, #40]	; (90002364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000233c:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002340:	3b01      	subs	r3, #1
90002342:	b29b      	uxth	r3, r3
90002344:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002346:	6911      	ldr	r1, [r2, #16]
90002348:	f3c1 010a 	ubfx	r1, r1, #0, #11
9000234c:	3901      	subs	r1, #1
9000234e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002350:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90002352:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002354:	f043 0301 	orr.w	r3, r3, #1
90002358:	6353      	str	r3, [r2, #52]	; 0x34
}
9000235a:	4770      	bx	lr
9000235c:	50001000 	.word	0x50001000
90002360:	24006d34 	.word	0x24006d34
90002364:	24006d32 	.word	0x24006d32

90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002368:	4b01      	ldr	r3, [pc, #4]	; (90002370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
9000236a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
9000236e:	4770      	bx	lr
90002370:	50001000 	.word	0x50001000

90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002374:	4b02      	ldr	r3, [pc, #8]	; (90002380 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002376:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002378:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000237c:	625a      	str	r2, [r3, #36]	; 0x24
}
9000237e:	4770      	bx	lr
90002380:	50001000 	.word	0x50001000

90002384 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
90002384:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002388:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
9000238a:	4770      	bx	lr

9000238c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
9000238c:	4770      	bx	lr
9000238e:	bf00      	nop

90002390 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002390:	eb00 0081 	add.w	r0, r0, r1, lsl #2
90002394:	4611      	mov	r1, r2
90002396:	6840      	ldr	r0, [r0, #4]
90002398:	6803      	ldr	r3, [r0, #0]
9000239a:	68db      	ldr	r3, [r3, #12]
9000239c:	4718      	bx	r3
9000239e:	bf00      	nop

900023a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023a0:	b510      	push	{r4, lr}
900023a2:	4604      	mov	r4, r0
900023a4:	2148      	movs	r1, #72	; 0x48
900023a6:	f01f faac 	bl	90021902 <_ZdlPvj>
900023aa:	4620      	mov	r0, r4
900023ac:	bd10      	pop	{r4, pc}
900023ae:	bf00      	nop

900023b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023b0:	b911      	cbnz	r1, 900023b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023b2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023b6:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023b8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023ba:	4a03      	ldr	r2, [pc, #12]	; (900023c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023bc:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023c0:	4b02      	ldr	r3, [pc, #8]	; (900023cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023c2:	4803      	ldr	r0, [pc, #12]	; (900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023c4:	f01f facc 	bl	90021960 <__assert_func>
900023c8:	90023394 	.word	0x90023394
900023cc:	90023380 	.word	0x90023380
900023d0:	90023520 	.word	0x90023520

900023d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023d4:	b921      	cbnz	r1, 900023e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023d6:	6840      	ldr	r0, [r0, #4]
900023d8:	4611      	mov	r1, r2
900023da:	6803      	ldr	r3, [r0, #0]
900023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023de:	4718      	bx	r3
        assert(handle < no_streams);
900023e0:	4b03      	ldr	r3, [pc, #12]	; (900023f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900023e2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900023e6:	4a03      	ldr	r2, [pc, #12]	; (900023f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900023e8:	4803      	ldr	r0, [pc, #12]	; (900023f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900023ea:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900023ec:	f01f fab8 	bl	90021960 <__assert_func>
900023f0:	90023380 	.word	0x90023380
900023f4:	90023564 	.word	0x90023564
900023f8:	90023520 	.word	0x90023520

900023fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900023fc:	b909      	cbnz	r1, 90002402 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900023fe:	68c0      	ldr	r0, [r0, #12]
90002400:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
90002402:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002404:	4a02      	ldr	r2, [pc, #8]	; (90002410 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
90002406:	2179      	movs	r1, #121	; 0x79
90002408:	4b02      	ldr	r3, [pc, #8]	; (90002414 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
9000240a:	4803      	ldr	r0, [pc, #12]	; (90002418 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
9000240c:	f01f faa8 	bl	90021960 <__assert_func>
90002410:	90023714 	.word	0x90023714
90002414:	90023380 	.word	0x90023380
90002418:	90023520 	.word	0x90023520

9000241c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
9000241c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000241e:	460c      	mov	r4, r1
90002420:	b949      	cbnz	r1, 90002436 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
90002422:	4611      	mov	r1, r2
90002424:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
90002426:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002428:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
9000242a:	681c      	ldr	r4, [r3, #0]
9000242c:	4618      	mov	r0, r3
9000242e:	68a3      	ldr	r3, [r4, #8]
    }
90002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002434:	4718      	bx	r3
        assert(handle < no_streams);
90002436:	4b03      	ldr	r3, [pc, #12]	; (90002444 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002438:	2190      	movs	r1, #144	; 0x90
9000243a:	4a03      	ldr	r2, [pc, #12]	; (90002448 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
9000243c:	4803      	ldr	r0, [pc, #12]	; (9000244c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
9000243e:	f01f fa8f 	bl	90021960 <__assert_func>
90002442:	bf00      	nop
90002444:	90023380 	.word	0x90023380
90002448:	900238c8 	.word	0x900238c8
9000244c:	90023520 	.word	0x90023520

90002450 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002450:	b921      	cbnz	r1, 9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
90002452:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
90002456:	e9c0 3206 	strd	r3, r2, [r0, #24]
9000245a:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
9000245c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000245e:	4a03      	ldr	r2, [pc, #12]	; (9000246c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002460:	2182      	movs	r1, #130	; 0x82
90002462:	4b03      	ldr	r3, [pc, #12]	; (90002470 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002464:	4803      	ldr	r0, [pc, #12]	; (90002474 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
90002466:	f01f fa7b 	bl	90021960 <__assert_func>
9000246a:	bf00      	nop
9000246c:	90023aa4 	.word	0x90023aa4
90002470:	90023380 	.word	0x90023380
90002474:	90023520 	.word	0x90023520

90002478 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002478:	f00d be88 	b.w	9001018c <_ZN8touchgfx3HAL10beginFrameEv>

9000247c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
9000247c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002480:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
90002482:	b113      	cbz	r3, 9000248a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
90002484:	4b1a      	ldr	r3, [pc, #104]	; (900024f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
90002486:	2201      	movs	r2, #1
90002488:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
9000248a:	4c1a      	ldr	r4, [pc, #104]	; (900024f4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
9000248c:	f00d fe8a 	bl	900101a4 <_ZN8touchgfx3HAL8endFrameEv>
90002490:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
90002494:	b963      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
90002496:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
9000249a:	b94b      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
9000249c:	2301      	movs	r3, #1
        SEM_POST(semDecode);
9000249e:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024a4:	f009 fed4 	bl	9000c250 <osSemaphoreRelease>
        if (uiHasMutex)
900024a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024ac:	b9cb      	cbnz	r3, 900024e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024ae:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024b0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024b4:	69e1      	ldr	r1, [r4, #28]
900024b6:	6922      	ldr	r2, [r4, #16]
900024b8:	fb00 f303 	mul.w	r3, r0, r3
900024bc:	fb01 f202 	mul.w	r2, r1, r2
900024c0:	4293      	cmp	r3, r2
900024c2:	d3eb      	bcc.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024c4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024c8:	b138      	cbz	r0, 900024da <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024ca:	1a9b      	subs	r3, r3, r2
900024cc:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024d0:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024d2:	bf98      	it	ls
900024d4:	f102 32ff 	addls.w	r2, r2, #4294967295
900024d8:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024da:	2301      	movs	r3, #1
900024dc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900024e0:	e7dc      	b.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900024e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
900024e4:	f009 fe0e 	bl	9000c104 <osMutexRelease>
            uiHasMutex = false;
900024e8:	2300      	movs	r3, #0
900024ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900024ee:	bd10      	pop	{r4, pc}
900024f0:	24006d30 	.word	0x24006d30
900024f4:	24006d80 	.word	0x24006d80

900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900024f8:	f00d be12 	b.w	90010120 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900024fc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900024fc:	f00d bf6d 	b.w	900103da <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002500 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90002504:	b903      	cbnz	r3, 90002508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
90002506:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002508:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
9000250a:	f04f 31ff 	mov.w	r1, #4294967295
9000250e:	4604      	mov	r4, r0
90002510:	6c40      	ldr	r0, [r0, #68]	; 0x44
90002512:	f009 fdd3 	bl	9000c0bc <osMutexAcquire>
            firstDrawThisFrame = false;
90002516:	f44f 7380 	mov.w	r3, #256	; 0x100
9000251a:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
9000251e:	bd10      	pop	{r4, pc}

90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002520:	b538      	push	{r3, r4, r5, lr}
90002522:	460c      	mov	r4, r1
90002524:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
90002526:	f04f 31ff 	mov.w	r1, #4294967295
9000252a:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
9000252c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002530:	f009 fdc4 	bl	9000c0bc <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
90002534:	6c68      	ldr	r0, [r5, #68]	; 0x44
90002536:	f009 fde5 	bl	9000c104 <osMutexRelease>
        streams[handle].isActive = false;
9000253a:	2300      	movs	r3, #0
9000253c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
90002544:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002548:	b90b      	cbnz	r3, 9000254e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
9000254a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
9000254c:	63ab      	str	r3, [r5, #56]	; 0x38
    }
9000254e:	bd38      	pop	{r3, r4, r5, pc}

90002550 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002550:	4814      	ldr	r0, [pc, #80]	; (900025a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
90002552:	6943      	ldr	r3, [r0, #20]
90002554:	03d9      	lsls	r1, r3, #15
90002556:	d523      	bpl.n	900025a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002558:	2300      	movs	r3, #0
{
9000255a:	b510      	push	{r4, lr}
9000255c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002560:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90002564:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002568:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000256c:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002570:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90002574:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002578:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000257c:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000257e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90002582:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002584:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002588:	1c5a      	adds	r2, r3, #1
9000258a:	d1f8      	bne.n	9000257e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
9000258c:	f1ac 0c20 	sub.w	ip, ip, #32
90002590:	f11c 0f20 	cmn.w	ip, #32
90002594:	d1f0      	bne.n	90002578 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
90002596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000259a:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
9000259e:	bd10      	pop	{r4, pc}
900025a0:	4770      	bx	lr
900025a2:	bf00      	nop
900025a4:	e000ed00 	.word	0xe000ed00

900025a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025a8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025aa:	2900      	cmp	r1, #0
900025ac:	d133      	bne.n	90002616 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025ae:	4604      	mov	r4, r0
        switch (cmd)
900025b0:	2a05      	cmp	r2, #5
900025b2:	d809      	bhi.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025b4:	e8df f002 	tbb	[pc, r2]
900025b8:	27221e0f 	.word	0x27221e0f
900025bc:	0903      	.short	0x0903
            stream.isPlaying = false;
900025be:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900025c0:	2301      	movs	r3, #1
            stream.isPlaying = false;
900025c2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
900025c6:	6203      	str	r3, [r0, #32]
    }
900025c8:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900025ca:	3b00      	subs	r3, #0
900025cc:	bf18      	it	ne
900025ce:	2301      	movne	r3, #1
900025d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025d4:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025d6:	6840      	ldr	r0, [r0, #4]
900025d8:	6803      	ldr	r3, [r0, #0]
900025da:	691b      	ldr	r3, [r3, #16]
900025dc:	4798      	blx	r3
900025de:	2800      	cmp	r0, #0
900025e0:	d0f2      	beq.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025e2:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025e4:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025e6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025ea:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900025ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900025f2:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900025f4:	2300      	movs	r3, #0
900025f6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900025fa:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900025fc:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900025fe:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002600:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002604:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002606:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002608:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
9000260a:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
9000260c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002610:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002614:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002616:	4b03      	ldr	r3, [pc, #12]	; (90002624 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002618:	21a2      	movs	r1, #162	; 0xa2
9000261a:	4a03      	ldr	r2, [pc, #12]	; (90002628 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
9000261c:	4803      	ldr	r0, [pc, #12]	; (9000262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
9000261e:	f01f f99f 	bl	90021960 <__assert_func>
90002622:	bf00      	nop
90002624:	90023380 	.word	0x90023380
90002628:	90023c60 	.word	0x90023c60
9000262c:	90023520 	.word	0x90023520

90002630 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002630:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002632:	bb39      	cbnz	r1, 90002684 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
90002634:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002638:	4604      	mov	r4, r0
9000263a:	b923      	cbnz	r3, 90002646 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
9000263c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002640:	b963      	cbnz	r3, 9000265c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
90002642:	2001      	movs	r0, #1
    }
90002644:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
90002646:	4912      	ldr	r1, [pc, #72]	; (90002690 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002648:	6943      	ldr	r3, [r0, #20]
9000264a:	6809      	ldr	r1, [r1, #0]
9000264c:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002650:	440b      	add	r3, r1
90002652:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
90002654:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002658:	2b00      	cmp	r3, #0
9000265a:	d0f2      	beq.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
9000265c:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
9000265e:	4610      	mov	r0, r2
90002660:	6813      	ldr	r3, [r2, #0]
90002662:	695b      	ldr	r3, [r3, #20]
90002664:	6311      	str	r1, [r2, #48]	; 0x30
90002666:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002668:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
9000266a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
9000266e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
90002672:	2800      	cmp	r0, #0
90002674:	d1e5      	bne.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
90002676:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
9000267a:	2b00      	cmp	r3, #0
9000267c:	d1e2      	bne.n	90002644 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
9000267e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
90002682:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002684:	4b03      	ldr	r3, [pc, #12]	; (90002694 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
90002686:	21d0      	movs	r1, #208	; 0xd0
90002688:	4a03      	ldr	r2, [pc, #12]	; (90002698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
9000268a:	4804      	ldr	r0, [pc, #16]	; (9000269c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
9000268c:	f01f f968 	bl	90021960 <__assert_func>
90002690:	2402620c 	.word	0x2402620c
90002694:	90023380 	.word	0x90023380
90002698:	90023e34 	.word	0x90023e34
9000269c:	90023520 	.word	0x90023520

900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026a0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026a4:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026a6:	b9fb      	cbnz	r3, 900026e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900026a8:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026aa:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
900026ac:	60c3      	str	r3, [r0, #12]
900026ae:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026b2:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
900026b6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026ba:	6103      	str	r3, [r0, #16]
900026bc:	6143      	str	r3, [r0, #20]
900026be:	6183      	str	r3, [r0, #24]
900026c0:	61c3      	str	r3, [r0, #28]
900026c2:	6203      	str	r3, [r0, #32]
900026c4:	6243      	str	r3, [r0, #36]	; 0x24
900026c6:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ca:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026ce:	4432      	add	r2, r6
900026d0:	4294      	cmp	r4, r2
900026d2:	d810      	bhi.n	900026f6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026d4:	4a0b      	ldr	r2, [pc, #44]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026d6:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026d8:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026da:	4618      	mov	r0, r3
        format = bufferFormat;
900026dc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900026e0:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900026e4:	630b      	str	r3, [r1, #48]	; 0x30
900026e6:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900026e8:	4b07      	ldr	r3, [pc, #28]	; (90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900026ea:	f240 11c5 	movw	r1, #453	; 0x1c5
900026ee:	4a07      	ldr	r2, [pc, #28]	; (9000270c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900026f0:	4807      	ldr	r0, [pc, #28]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026f2:	f01f f935 	bl	90021960 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900026f6:	4b07      	ldr	r3, [pc, #28]	; (90002714 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900026f8:	2152      	movs	r1, #82	; 0x52
900026fa:	4a07      	ldr	r2, [pc, #28]	; (90002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900026fc:	4804      	ldr	r0, [pc, #16]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026fe:	f01f f92f 	bl	90021960 <__assert_func>
90002702:	bf00      	nop
90002704:	012001e0 	.word	0x012001e0
90002708:	90023fd4 	.word	0x90023fd4
9000270c:	90024004 	.word	0x90024004
90002710:	90023520 	.word	0x90023520
90002714:	9002418c 	.word	0x9002418c
90002718:	900241c8 	.word	0x900241c8

9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000271c:	4b08      	ldr	r3, [pc, #32]	; (90002740 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
9000271e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000272a:	f3bf 8f6f 	isb	sy
9000272e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000273a:	f3bf 8f6f 	isb	sy
}
9000273e:	4770      	bx	lr
90002740:	e000e100 	.word	0xe000e100

90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002744:	4b03      	ldr	r3, [pc, #12]	; (90002754 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90002746:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000274a:	609a      	str	r2, [r3, #8]
9000274c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002750:	609a      	str	r2, [r3, #8]
}
90002752:	4770      	bx	lr
90002754:	e000e100 	.word	0xe000e100

90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002758:	b538      	push	{r3, r4, r5, lr}
9000275a:	4604      	mov	r4, r0
    HAL::initialize();
9000275c:	f00d fd2f 	bl	900101be <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002760:	6823      	ldr	r3, [r4, #0]
90002762:	6e5d      	ldr	r5, [r3, #100]	; 0x64
90002764:	f010 fad2 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
90002768:	4601      	mov	r1, r0
9000276a:	4620      	mov	r0, r4
9000276c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000276e:	6823      	ldr	r3, [r4, #0]
90002770:	4a16      	ldr	r2, [pc, #88]	; (900027cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
90002772:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90002776:	4295      	cmp	r5, r2
90002778:	d11c      	bne.n	900027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
9000277a:	4a15      	ldr	r2, [pc, #84]	; (900027d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000277c:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
9000277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90002782:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002786:	4813      	ldr	r0, [pc, #76]	; (900027d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002788:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
9000278c:	4a12      	ldr	r2, [pc, #72]	; (900027d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000278e:	7005      	strb	r5, [r0, #0]
90002790:	4293      	cmp	r3, r2
90002792:	d116      	bne.n	900027c2 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002794:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002796:	4a11      	ldr	r2, [pc, #68]	; (900027dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002798:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000279a:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
9000279c:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
9000279e:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027a2:	4b0f      	ldr	r3, [pc, #60]	; (900027e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027a4:	490f      	ldr	r1, [pc, #60]	; (900027e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027a6:	4a10      	ldr	r2, [pc, #64]	; (900027e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027a8:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027aa:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027ac:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027ae:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027b2:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027b4:	4a0d      	ldr	r2, [pc, #52]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027b6:	2300      	movs	r3, #0
900027b8:	4620      	mov	r0, r4
900027ba:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027be:	47a8      	blx	r5
900027c0:	e7ec      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027c2:	2100      	movs	r1, #0
900027c4:	4620      	mov	r0, r4
900027c6:	4798      	blx	r3
900027c8:	e7e8      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027ca:	bf00      	nop
900027cc:	900007f1 	.word	0x900007f1
900027d0:	d003fc00 	.word	0xd003fc00
900027d4:	2402620a 	.word	0x2402620a
900027d8:	90000675 	.word	0x90000675
900027dc:	2402620b 	.word	0x2402620b
900027e0:	24006d80 	.word	0x24006d80
900027e4:	24006d38 	.word	0x24006d38
900027e8:	d00bf400 	.word	0xd00bf400
900027ec:	d007f800 	.word	0xd007f800

900027f0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900027f0:	b510      	push	{r4, lr}
        return instance;
900027f2:	4c14      	ldr	r4, [pc, #80]	; (90002844 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900027f4:	6823      	ldr	r3, [r4, #0]
900027f6:	b323      	cbz	r3, 90002842 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900027f8:	4b13      	ldr	r3, [pc, #76]	; (90002848 <HAL_LTDC_LineEventCallback+0x58>)
900027fa:	4a14      	ldr	r2, [pc, #80]	; (9000284c <HAL_LTDC_LineEventCallback+0x5c>)
900027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900027fe:	8811      	ldrh	r1, [r2, #0]
90002800:	428b      	cmp	r3, r1
90002802:	d00a      	beq.n	9000281a <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002804:	f007 f926 	bl	90009a54 <HAL_LTDC_ProgramLineEvent>
90002808:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
9000280a:	6803      	ldr	r3, [r0, #0]
9000280c:	6a1b      	ldr	r3, [r3, #32]
9000280e:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002810:	2000      	movs	r0, #0
        }
    }
90002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002816:	f7fd bed1 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
9000281a:	4b0d      	ldr	r3, [pc, #52]	; (90002850 <HAL_LTDC_LineEventCallback+0x60>)
9000281c:	8819      	ldrh	r1, [r3, #0]
9000281e:	f007 f919 	bl	90009a54 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002822:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002824:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002828:	3301      	adds	r3, #1
9000282a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
9000282e:	f7ff f8c7 	bl	900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002832:	6820      	ldr	r0, [r4, #0]
90002834:	f00e fa16 	bl	90010c64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002838:	2000      	movs	r0, #0
    }
9000283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
9000283e:	f7fd be89 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002842:	bd10      	pop	{r4, pc}
90002844:	2402620c 	.word	0x2402620c
90002848:	50001000 	.word	0x50001000
9000284c:	24006d34 	.word	0x24006d34
90002850:	24006d32 	.word	0x24006d32

90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002858:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002914 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
9000285c:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
9000285e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002860:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002864:	4604      	mov	r4, r0
90002866:	e024      	b.n	900028b2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002868:	682b      	ldr	r3, [r5, #0]
9000286a:	4628      	mov	r0, r5
9000286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000286e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002870:	2300      	movs	r3, #0
90002872:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002874:	6829      	ldr	r1, [r5, #0]
90002876:	f44f 7390 	mov.w	r3, #288	; 0x120
9000287a:	9700      	str	r7, [sp, #0]
9000287c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002880:	f8d1 9014 	ldr.w	r9, [r1, #20]
90002884:	4628      	mov	r0, r5
90002886:	68a1      	ldr	r1, [r4, #8]
90002888:	47c8      	blx	r9
                    stream.frameCount++;
9000288a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000288c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002890:	3301      	adds	r3, #1
90002892:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
90002894:	2800      	cmp	r0, #0
90002896:	d033      	beq.n	90002900 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002898:	682b      	ldr	r3, [r5, #0]
9000289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000289c:	4543      	cmp	r3, r8
9000289e:	d131      	bne.n	90002904 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
900028a0:	6968      	ldr	r0, [r5, #20]
900028a2:	3801      	subs	r0, #1
                    stream.doDecode = false;
900028a4:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028a6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028a8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028ae:	f009 fc29 	bl	9000c104 <osMutexRelease>
            SEM_WAIT(semDecode);
900028b2:	f04f 31ff 	mov.w	r1, #4294967295
900028b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028b8:	f009 fc96 	bl	9000c1e8 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028bc:	f04f 31ff 	mov.w	r1, #4294967295
900028c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028c2:	f009 fbfb 	bl	9000c0bc <osMutexAcquire>
                if (stream.doDecode)
900028c6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028ca:	2b00      	cmp	r3, #0
900028cc:	d0ee      	beq.n	900028ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028ce:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028d0:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028d2:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028d6:	2900      	cmp	r1, #0
900028d8:	d1c6      	bne.n	90002868 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028dc:	2b00      	cmp	r3, #0
900028de:	d0c9      	beq.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900028e0:	682a      	ldr	r2, [r5, #0]
900028e2:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900028e6:	4541      	cmp	r1, r8
900028e8:	d10f      	bne.n	9000290a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900028ea:	6968      	ldr	r0, [r5, #20]
900028ec:	18c1      	adds	r1, r0, r3
900028ee:	4628      	mov	r0, r5
900028f0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900028f2:	6923      	ldr	r3, [r4, #16]
900028f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900028f6:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900028f8:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900028fa:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900028fc:	6123      	str	r3, [r4, #16]
900028fe:	e7b9      	b.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
90002900:	2001      	movs	r0, #1
90002902:	e7cf      	b.n	900028a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002904:	4628      	mov	r0, r5
90002906:	4798      	blx	r3
90002908:	e7cb      	b.n	900028a2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
9000290a:	4628      	mov	r0, r5
9000290c:	4788      	blx	r1
9000290e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002910:	e7ec      	b.n	900028ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002912:	bf00      	nop
90002914:	90000969 	.word	0x90000969

90002918 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002918:	4801      	ldr	r0, [pc, #4]	; (90002920 <videoTaskFunc+0x8>)
{
9000291a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
9000291c:	f7ff ff9a 	bl	90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002920:	24006d80 	.word	0x24006d80

90002924 <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002924:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002926:	4815      	ldr	r0, [pc, #84]	; (9000297c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002928:	2500      	movs	r5, #0
9000292a:	f7fe fc2f 	bl	9000118c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000292e:	4c14      	ldr	r4, [pc, #80]	; (90002980 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002930:	4914      	ldr	r1, [pc, #80]	; (90002984 <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002932:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002936:	462a      	mov	r2, r5
90002938:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000293a:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
9000293c:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000293e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002940:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002942:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002944:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002946:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000294a:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000294c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002950:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002954:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002958:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000295c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002960:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002964:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002968:	f009 fbee 	bl	9000c148 <osSemaphoreNew>
9000296c:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
9000296e:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002970:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002972:	f009 fb63 	bl	9000c03c <osMutexNew>
90002976:	6460      	str	r0, [r4, #68]	; 0x44
}
90002978:	bd38      	pop	{r3, r4, r5, pc}
9000297a:	bf00      	nop
9000297c:	24006d38 	.word	0x24006d38
90002980:	24006d80 	.word	0x24006d80
90002984:	90024374 	.word	0x90024374

90002988 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000298c:	4c7e      	ldr	r4, [pc, #504]	; (90002b88 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
9000298e:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002990:	fba4 4303 	umull	r4, r3, r4, r3
{
90002994:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002996:	0a19      	lsrs	r1, r3, #8
{
90002998:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
9000299a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
9000299e:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029a0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029a4:	4293      	cmp	r3, r2
900029a6:	930b      	str	r3, [sp, #44]	; 0x2c
900029a8:	f240 80e9 	bls.w	90002b7e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ac:	4b77      	ldr	r3, [pc, #476]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029ae:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002b9c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029b4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002ba0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029b8:	930a      	str	r3, [sp, #40]	; 0x28
900029ba:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029bc:	f04f 0e02 	mov.w	lr, #2
900029c0:	9908      	ldr	r1, [sp, #32]
900029c2:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029c6:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029c8:	3101      	adds	r1, #1
    currentMCU++;
900029ca:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ce:	980a      	ldr	r0, [sp, #40]	; 0x28
900029d0:	9108      	str	r1, [sp, #32]
900029d2:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029d6:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029da:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029de:	005b      	lsls	r3, r3, #1
900029e0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
900029e4:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
900029e6:	e009      	b.n	900029fc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
900029e8:	9b01      	ldr	r3, [sp, #4]
900029ea:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
900029ee:	d30f      	bcc.n	90002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
900029f0:	f1be 0f10 	cmp.w	lr, #16
900029f4:	f000 80b6 	beq.w	90002b64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
900029f8:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
900029fc:	f1be 0f0a 	cmp.w	lr, #10
90002a00:	d1f2      	bne.n	900029e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a02:	9b06      	ldr	r3, [sp, #24]
90002a04:	3380      	adds	r3, #128	; 0x80
90002a06:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a08:	9b01      	ldr	r3, [sp, #4]
90002a0a:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a0e:	d2f3      	bcs.n	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a10:	9a01      	ldr	r2, [sp, #4]
90002a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a14:	f8cd e01c 	str.w	lr, [sp, #28]
90002a18:	4413      	add	r3, r2
90002a1a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a1e:	f103 0c10 	add.w	ip, r3, #16
90002a22:	3330      	adds	r3, #48	; 0x30
90002a24:	4696      	mov	lr, r2
90002a26:	9102      	str	r1, [sp, #8]
90002a28:	9305      	str	r3, [sp, #20]
90002a2a:	9b02      	ldr	r3, [sp, #8]
90002a2c:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a30:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a34:	4674      	mov	r4, lr
90002a36:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a38:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a3c:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a3e:	4954      	ldr	r1, [pc, #336]	; (90002b90 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a40:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a42:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a46:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a48:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002a4c:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a4e:	4951      	ldr	r1, [pc, #324]	; (90002b94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a50:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a58:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a5c:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a5e:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a60:	4b4d      	ldr	r3, [pc, #308]	; (90002b98 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002a62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a66:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a6a:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a6e:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a70:	eb03 0b02 	add.w	fp, r3, r2
90002a74:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a78:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a7a:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a7e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a82:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a86:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a8a:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002a8e:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002a92:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002a96:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002a9a:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a9e:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aa2:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002aa6:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa8:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aac:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab0:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ab4:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ab8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002abc:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ac0:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002ac4:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ac8:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002acc:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad0:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ad4:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ad8:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ada:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ade:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ae2:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ae6:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aea:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aee:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002af2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002af6:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002afa:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002afe:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b00:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b02:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b04:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b06:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b0a:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b0e:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b12:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b16:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b1e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b22:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b26:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b2a:	d185      	bne.n	90002a38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b2c:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b2e:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b32:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b36:	3304      	adds	r3, #4
90002b38:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b3a:	9b05      	ldr	r3, [sp, #20]
90002b3c:	4563      	cmp	r3, ip
90002b3e:	f47f af74 	bne.w	90002a2a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b42:	9b04      	ldr	r3, [sp, #16]
90002b44:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b48:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b4a:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b4e:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b50:	9b03      	ldr	r3, [sp, #12]
90002b52:	f103 0310 	add.w	r3, r3, #16
90002b56:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b58:	9b01      	ldr	r3, [sp, #4]
90002b5a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b5e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b60:	f47f af4a 	bne.w	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b64:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b66:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b6c:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b70:	4293      	cmp	r3, r2
90002b72:	f47f af22 	bne.w	900029ba <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b76:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b7a:	4a04      	ldr	r2, [pc, #16]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b7c:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b7e:	ee17 0a90 	vmov	r0, s15
90002b82:	b00d      	add	sp, #52	; 0x34
90002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002b88:	aaaaaaab 	.word	0xaaaaaaab
90002b8c:	24009a48 	.word	0x24009a48
90002b90:	24007dc8 	.word	0x24007dc8
90002b94:	240079c8 	.word	0x240079c8
90002b98:	240085c8 	.word	0x240085c8
90002b9c:	240081c8 	.word	0x240081c8
90002ba0:	900243ac 	.word	0x900243ac

90002ba4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002ba8:	0a1c      	lsrs	r4, r3, #8
{
90002baa:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bb0:	ee07 4a90 	vmov	s15, r4
{
90002bb4:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bb6:	429a      	cmp	r2, r3
{
90002bb8:	9007      	str	r0, [sp, #28]
90002bba:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bbc:	930b      	str	r3, [sp, #44]	; 0x2c
90002bbe:	f080 814a 	bcs.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bc2:	4ba7      	ldr	r3, [pc, #668]	; (90002e60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002bc4:	4da7      	ldr	r5, [pc, #668]	; (90002e64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002bc8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002bcc:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bd0:	691b      	ldr	r3, [r3, #16]
90002bd2:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bd6:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002bda:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bde:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002be0:	9301      	str	r3, [sp, #4]
90002be2:	e008      	b.n	90002bf6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be4:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002bec:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bee:	9b08      	ldr	r3, [sp, #32]
90002bf0:	4293      	cmp	r3, r2
90002bf2:	f000 8130 	beq.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bf6:	9a07      	ldr	r2, [sp, #28]
90002bf8:	9908      	ldr	r1, [sp, #32]
90002bfa:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002bfe:	010b      	lsls	r3, r1, #4
90002c00:	3101      	adds	r1, #1
    currentMCU++;
90002c02:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c06:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c08:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c0a:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c0c:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c10:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c14:	fb01 f202 	mul.w	r2, r1, r2
90002c18:	005b      	lsls	r3, r3, #1
90002c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c1e:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c20:	2308      	movs	r3, #8
90002c22:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c24:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c28:	4293      	cmp	r3, r2
90002c2a:	d9db      	bls.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c2e:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c30:	9a03      	ldr	r2, [sp, #12]
90002c32:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c36:	9a02      	ldr	r2, [sp, #8]
90002c38:	f103 0020 	add.w	r0, r3, #32
90002c3c:	3204      	adds	r2, #4
90002c3e:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c40:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c44:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c46:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c4a:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c4c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c50:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c52:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c56:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c5a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c5c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c60:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c64:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c66:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c68:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c6c:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c70:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c74:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c78:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c7a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c7e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002c82:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002c86:	08e4      	lsrs	r4, r4, #3
90002c88:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002c8c:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002c90:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002c94:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002c98:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c9c:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c9e:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca0:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ca2:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002caa:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cae:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cb0:	08c0      	lsrs	r0, r0, #3
90002cb2:	08a4      	lsrs	r4, r4, #2
90002cb4:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cb8:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cbc:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cc4:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc8:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002ccc:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cd0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cd4:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cd6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002cda:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cde:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ce0:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ce2:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ce6:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cea:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cee:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf2:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cf4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf8:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002cfc:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d00:	08e4      	lsrs	r4, r4, #3
90002d02:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d06:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d0a:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d0e:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d12:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d16:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d18:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d1a:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d1c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d20:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d24:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d28:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d2a:	08c0      	lsrs	r0, r0, #3
90002d2c:	08a4      	lsrs	r4, r4, #2
90002d2e:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d32:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d36:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d3a:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d3e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d42:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d46:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d4a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d4e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d54:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d58:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d5a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d5c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d60:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d64:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d68:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d6c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d72:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d76:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d7a:	08e4      	lsrs	r4, r4, #3
90002d7c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d80:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d84:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d88:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002d8c:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d90:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d92:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d94:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d96:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d9a:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d9e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002da2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002da4:	08c0      	lsrs	r0, r0, #3
90002da6:	08a4      	lsrs	r4, r4, #2
90002da8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002dac:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002db0:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002db4:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002db8:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002dc0:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dc4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc8:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dca:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002dce:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dd2:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dd4:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dd6:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dda:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dde:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002de2:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002de6:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002de8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dec:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002df0:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002df4:	08e4      	lsrs	r4, r4, #3
90002df6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dfa:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002dfe:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e02:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e06:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e0a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e0c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e0e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e10:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e14:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e18:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e1c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e1e:	08c0      	lsrs	r0, r0, #3
90002e20:	08a4      	lsrs	r4, r4, #2
90002e22:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e26:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e2a:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e2e:	9804      	ldr	r0, [sp, #16]
90002e30:	4283      	cmp	r3, r0
90002e32:	f47f af05 	bne.w	90002c40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e36:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e38:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e3a:	3308      	adds	r3, #8
90002e3c:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e3e:	9b03      	ldr	r3, [sp, #12]
90002e40:	3308      	adds	r3, #8
90002e42:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e44:	9b00      	ldr	r3, [sp, #0]
90002e46:	4413      	add	r3, r2
90002e48:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e4a:	9b05      	ldr	r3, [sp, #20]
90002e4c:	3b01      	subs	r3, #1
90002e4e:	9305      	str	r3, [sp, #20]
90002e50:	f47f aee8 	bne.w	90002c24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e54:	e6c6      	b.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e56:	ee17 0a90 	vmov	r0, s15
90002e5a:	b00d      	add	sp, #52	; 0x34
90002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e60:	24009a48 	.word	0x24009a48
90002e64:	240079c8 	.word	0x240079c8
90002e68:	240085c8 	.word	0x240085c8
90002e6c:	240081c8 	.word	0x240081c8
90002e70:	24007dc8 	.word	0x24007dc8
90002e74:	900243ac 	.word	0x900243ac

90002e78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e7c:	4cb6      	ldr	r4, [pc, #728]	; (90003158 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e7e:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e80:	fba4 4303 	umull	r4, r3, r4, r3
{
90002e84:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e86:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002e88:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e8c:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002e90:	429a      	cmp	r2, r3
90002e92:	9306      	str	r3, [sp, #24]
{
90002e94:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002e98:	f080 8158 	bcs.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002e9c:	4baf      	ldr	r3, [pc, #700]	; (9000315c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e9e:	4cb0      	ldr	r4, [pc, #704]	; (90003160 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ea2:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003168 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea6:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eaa:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002eac:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eb0:	48ac      	ldr	r0, [pc, #688]	; (90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002eb2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003170 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002eb6:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eb8:	9300      	str	r3, [sp, #0]
90002eba:	e007      	b.n	90002ecc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002ebc:	9b04      	ldr	r3, [sp, #16]
90002ebe:	33c0      	adds	r3, #192	; 0xc0
90002ec0:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002ec2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ec6:	4293      	cmp	r3, r2
90002ec8:	f000 8140 	beq.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ecc:	9e05      	ldr	r6, [sp, #20]
90002ece:	9f07      	ldr	r7, [sp, #28]
90002ed0:	00f2      	lsls	r2, r6, #3
90002ed2:	3601      	adds	r6, #1
90002ed4:	9904      	ldr	r1, [sp, #16]
90002ed6:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ed8:	9e03      	ldr	r6, [sp, #12]
90002eda:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ede:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002ee2:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ee6:	fb06 f505 	mul.w	r5, r6, r5
90002eea:	0052      	lsls	r2, r2, #1
90002eec:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002ef0:	2508      	movs	r5, #8
90002ef2:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ef4:	9d00      	ldr	r5, [sp, #0]
90002ef6:	4295      	cmp	r5, r2
90002ef8:	d9e0      	bls.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002efa:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002efe:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f00:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f04:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f06:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f0a:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f0e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f12:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f14:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f18:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f1c:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f1e:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f20:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f22:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f26:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f2a:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f2e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f30:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f34:	08ed      	lsrs	r5, r5, #3
90002f36:	08bf      	lsrs	r7, r7, #2
90002f38:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f3c:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f3e:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f42:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f44:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f48:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f4c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f50:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f54:	4425      	add	r5, r4
90002f56:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f5a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f5e:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f62:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f64:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f66:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f68:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f6c:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f70:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f74:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f76:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f7a:	08ed      	lsrs	r5, r5, #3
90002f7c:	08bf      	lsrs	r7, r7, #2
90002f7e:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002f82:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f84:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002f88:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002f8a:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f8c:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002f90:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f94:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f96:	4427      	add	r7, r4
90002f98:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f9c:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f9e:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fa2:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fa4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fa8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fb0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fb4:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fb6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fba:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fbc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fc0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fc4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90002fc8:	08fe      	lsrs	r6, r7, #3
90002fca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90002fce:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90002fd2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002fd6:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd8:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fdc:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90002fe0:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90002fec:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fee:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ffa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003000:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003004:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003008:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000300c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003010:	08fe      	lsrs	r6, r7, #3
90003012:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003016:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000301a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301e:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003020:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003024:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003028:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000302c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003030:	4427      	add	r7, r4
90003032:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003036:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003040:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003042:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003044:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003048:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000304c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003050:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003054:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003058:	08fe      	lsrs	r6, r7, #3
9000305a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000305e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003062:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003066:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003068:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000306c:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003074:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307e:	44b9      	add	r9, r7
90003080:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003084:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003090:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	4427      	add	r7, r4
900030c2:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003104:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003108:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000310a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003140:	9d01      	ldr	r5, [sp, #4]
90003142:	3d01      	subs	r5, #1
90003144:	9501      	str	r5, [sp, #4]
90003146:	f47f aed5 	bne.w	90002ef4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000314a:	e6b7      	b.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000314c:	ee17 0a90 	vmov	r0, s15
90003150:	b009      	add	sp, #36	; 0x24
90003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003156:	bf00      	nop
90003158:	aaaaaaab 	.word	0xaaaaaaab
9000315c:	24009a48 	.word	0x24009a48
90003160:	900243ac 	.word	0x900243ac
90003164:	240081c8 	.word	0x240081c8
90003168:	240085c8 	.word	0x240085c8
9000316c:	240079c8 	.word	0x240079c8
90003170:	24007dc8 	.word	0x24007dc8

90003174 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003178:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000317c:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000317e:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003180:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90003184:	f080 8088 	bcs.w	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003188:	4b45      	ldr	r3, [pc, #276]	; (900032a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000318a:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000318e:	691e      	ldr	r6, [r3, #16]
90003190:	e003      	b.n	9000319a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90003192:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
90003194:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003198:	d07e      	beq.n	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000319a:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9000319c:	4604      	mov	r4, r0
9000319e:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a2:	3201      	adds	r2, #1
900031a4:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031a8:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031ac:	fb08 f505 	mul.w	r5, r8, r5
900031b0:	005b      	lsls	r3, r3, #1
900031b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031b6:	429e      	cmp	r6, r3
900031b8:	d9eb      	bls.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031ba:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031be:	18cd      	adds	r5, r1, r3
          pLum++;
900031c0:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031c2:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031c6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031ca:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ce:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031d2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031d6:	ea47 070c 	orr.w	r7, r7, ip
900031da:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031dc:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031de:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031e2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031e6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ea:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031ee:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031f2:	ea47 070c 	orr.w	r7, r7, ip
900031f6:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900031f8:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031fc:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003200:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003204:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003208:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000320c:	ea47 070c 	orr.w	r7, r7, ip
90003210:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90003212:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003216:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000321a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000321e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003222:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003226:	ea47 070c 	orr.w	r7, r7, ip
9000322a:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000322c:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003230:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003234:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003238:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000323c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003240:	ea47 070c 	orr.w	r7, r7, ip
90003244:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90003246:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000324a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000324e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003252:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003256:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000325a:	ea47 070c 	orr.w	r7, r7, ip
9000325e:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003260:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003264:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003268:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000326c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003270:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003274:	ea47 070c 	orr.w	r7, r7, ip
90003278:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000327a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000327e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003282:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003286:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000328a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000328e:	ea47 070c 	orr.w	r7, r7, ip
90003292:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90003294:	d18f      	bne.n	900031b6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90003296:	e77c      	b.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003298:	ee17 0a90 	vmov	r0, s15
9000329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032a0:	24009a48 	.word	0x24009a48

900032a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032a8:	0a1c      	lsrs	r4, r3, #8
{
900032aa:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032b0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032b4:	429a      	cmp	r2, r3
900032b6:	9300      	str	r3, [sp, #0]
900032b8:	f080 8129 	bcs.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032bc:	4b96      	ldr	r3, [pc, #600]	; (90003518 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032be:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000351c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032c4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032c8:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032ca:	9401      	str	r4, [sp, #4]
900032cc:	e005      	b.n	900032da <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900032ce:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032d4:	429a      	cmp	r2, r3
900032d6:	f000 811a 	beq.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032da:	00d3      	lsls	r3, r2, #3
900032dc:	9c01      	ldr	r4, [sp, #4]
900032de:	3201      	adds	r2, #1
    currentMCU++;
900032e0:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032e4:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900032e8:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900032ec:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032ee:	fb08 f505 	mul.w	r5, r8, r5
900032f2:	0064      	lsls	r4, r4, #1
900032f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032f8:	42a6      	cmp	r6, r4
900032fa:	d9e8      	bls.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900032fc:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
90003300:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003302:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90003306:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
9000330a:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000330e:	fb19 f90a 	smulbb	r9, r9, sl
90003312:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003316:	f813 5c08 	ldrb.w	r5, [r3, #-8]
9000331a:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000331e:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003322:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003326:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000332a:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000332e:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003332:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
90003336:	fb19 f90a 	smulbb	r9, r9, sl
9000333a:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000333e:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003342:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003344:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003346:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003348:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000334c:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003350:	fb19 f90a 	smulbb	r9, r9, sl
90003354:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003358:	f813 5c07 	ldrb.w	r5, [r3, #-7]
9000335c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003360:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003364:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003368:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000336c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003370:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003374:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003378:	fb19 f90a 	smulbb	r9, r9, sl
9000337c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003380:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003384:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003386:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003388:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000338c:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003390:	fb19 f90a 	smulbb	r9, r9, sl
90003394:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003398:	f813 5c06 	ldrb.w	r5, [r3, #-6]
9000339c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ac:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033b0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033b4:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900033b8:	fb19 f90a 	smulbb	r9, r9, sl
900033bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900033c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900033c6:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033c8:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033cc:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900033d0:	fb19 f90a 	smulbb	r9, r9, sl
900033d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033d8:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900033dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033f4:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900033f8:	fb19 f90a 	smulbb	r9, r9, sl
900033fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003400:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003404:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003406:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90003408:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000340c:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90003410:	fb19 f90a 	smulbb	r9, r9, sl
90003414:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003418:	f813 5c04 	ldrb.w	r5, [r3, #-4]
9000341c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003420:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003424:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003428:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000342c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003430:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003434:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003438:	fb19 f90a 	smulbb	r9, r9, sl
9000343c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003444:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003446:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003448:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000344c:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003458:	f813 5c03 	ldrb.w	r5, [r3, #-3]
9000345c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003460:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003464:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003468:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000346c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003470:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003474:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003478:	fb19 f90a 	smulbb	r9, r9, sl
9000347c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003484:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003486:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003488:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000348c:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003498:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
9000349c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034a0:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034a8:	ea4f 2555 	mov.w	r5, r5, lsr #9
900034ac:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034b0:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034b4:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900034b8:	fb19 f90a 	smulbb	r9, r9, sl
900034bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034c6:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034c8:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034cc:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034d8:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900034dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034f4:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900034f8:	fb19 f90a 	smulbb	r9, r9, sl
900034fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003504:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003506:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90003508:	f47f aef6 	bne.w	900032f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
9000350c:	e6df      	b.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
9000350e:	ee17 0a90 	vmov	r0, s15
90003512:	b003      	add	sp, #12
90003514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003518:	24009a48 	.word	0x24009a48
9000351c:	80808081 	.word	0x80808081

90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003520:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003522:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003524:	6805      	ldr	r5, [r0, #0]
90003526:	4c3e      	ldr	r4, [pc, #248]	; (90003620 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003528:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000352a:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000352c:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000352e:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003532:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90003536:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003538:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000353c:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000353e:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003540:	d027      	beq.n	90003592 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90003542:	b9ed      	cbnz	r5, 90003580 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90003544:	4837      	ldr	r0, [pc, #220]	; (90003624 <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
90003546:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003548:	f013 0107 	ands.w	r1, r3, #7
9000354c:	d02b      	beq.n	900035a6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000354e:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90003552:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003554:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003556:	4419      	add	r1, r3
90003558:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355a:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000355c:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355e:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003560:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
90003564:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90003566:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000356a:	fb05 6611 	mls	r6, r5, r1, r6
9000356e:	b106      	cbz	r6, 90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003570:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003572:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90003576:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003578:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000357a:	6013      	str	r3, [r2, #0]
}
9000357c:	bcf0      	pop	{r4, r5, r6, r7}
9000357e:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003580:	2d30      	cmp	r5, #48	; 0x30
90003582:	d119      	bne.n	900035b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90003584:	4828      	ldr	r0, [pc, #160]	; (90003628 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
90003586:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003588:	f013 0107 	ands.w	r1, r3, #7
9000358c:	d1df      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000358e:	6161      	str	r1, [r4, #20]
90003590:	e00a      	b.n	900035a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90003592:	2f01      	cmp	r7, #1
90003594:	d024      	beq.n	900035e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90003596:	2f02      	cmp	r7, #2
90003598:	d011      	beq.n	900035be <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9000359a:	4824      	ldr	r0, [pc, #144]	; (9000362c <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
9000359c:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000359e:	f013 0107 	ands.w	r1, r3, #7
900035a2:	d1d4      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
900035a4:	e7f3      	b.n	9000358e <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900035a6:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035a8:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900035aa:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ac:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035ae:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035b0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035b2:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035b6:	e7d6      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900035b8:	2001      	movs	r0, #1
}
900035ba:	bcf0      	pop	{r4, r5, r6, r7}
900035bc:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035be:	481c      	ldr	r0, [pc, #112]	; (90003630 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900035c0:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035c2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035c4:	f013 010f 	ands.w	r1, r3, #15
900035c8:	d022      	beq.n	90003610 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035ca:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900035ce:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035d0:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d2:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900035d4:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d6:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035d8:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035da:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035dc:	62a1      	str	r1, [r4, #40]	; 0x28
900035de:	e7c1      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035e0:	4814      	ldr	r0, [pc, #80]	; (90003634 <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900035e2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035e4:	f013 010f 	ands.w	r1, r3, #15
900035e8:	d107      	bne.n	900035fa <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035ec:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ee:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035f0:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035f2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035f4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035f8:	e7b5      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035fa:	f1c1 0110 	rsb	r1, r1, #16
900035fe:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003600:	4419      	add	r1, r3
90003602:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003604:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003606:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003608:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000360a:	e9c4 5507 	strd	r5, r5, [r4, #28]
9000360e:	e7a9      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
90003610:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90003612:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003614:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
90003616:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000361a:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000361c:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000361e:	e7a2      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
90003620:	24009a48 	.word	0x24009a48
90003624:	90003175 	.word	0x90003175
90003628:	900032a5 	.word	0x900032a5
9000362c:	90002e79 	.word	0x90002e79
90003630:	90002ba5 	.word	0x90002ba5
90003634:	90002989 	.word	0x90002989

90003638 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000363c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 9000376c <TGFX_JPEG_InitColorTables+0x134>
90003640:	b0a5      	sub	sp, #148	; 0x94
90003642:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003770 <TGFX_JPEG_InitColorTables+0x138>
90003646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000364a:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003774 <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
9000364e:	2300      	movs	r3, #0
90003650:	4f3d      	ldr	r7, [pc, #244]	; (90003748 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003652:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
90003656:	4e3d      	ldr	r6, [pc, #244]	; (9000374c <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003658:	f249 4ad0 	movw	sl, #38096	; 0x94d0
9000365c:	4d3c      	ldr	r5, [pc, #240]	; (90003750 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
9000365e:	f644 498b 	movw	r9, #19595	; 0x4c8b
90003662:	4c3c      	ldr	r4, [pc, #240]	; (90003754 <TGFX_JPEG_InitColorTables+0x11c>)
90003664:	483c      	ldr	r0, [pc, #240]	; (90003758 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003666:	f249 6245 	movw	r2, #38469	; 0x9645
9000366a:	fb02 f203 	mul.w	r2, r2, r3
9000366e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003672:	1412      	asrs	r2, r2, #16
90003674:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003678:	f641 522f 	movw	r2, #7471	; 0x1d2f
9000367c:	fb02 f203 	mul.w	r2, r2, r3
90003680:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003684:	1412      	asrs	r2, r2, #16
90003686:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368a:	4a34      	ldr	r2, [pc, #208]	; (9000375c <TGFX_JPEG_InitColorTables+0x124>)
9000368c:	fb02 f203 	mul.w	r2, r2, r3
90003690:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003694:	1412      	asrs	r2, r2, #16
90003696:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000369a:	4a31      	ldr	r2, [pc, #196]	; (90003760 <TGFX_JPEG_InitColorTables+0x128>)
9000369c:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a0:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
900036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036aa:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ae:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036b2:	4a2c      	ldr	r2, [pc, #176]	; (90003764 <TGFX_JPEG_InitColorTables+0x12c>)
900036b4:	fb02 b203 	mla	r2, r2, r3, fp
900036b8:	ea4f 4222 	mov.w	r2, r2, asr #16
900036bc:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c0:	4a29      	ldr	r2, [pc, #164]	; (90003768 <TGFX_JPEG_InitColorTables+0x130>)
900036c2:	fb02 a203 	mla	r2, r2, r3, sl
900036c6:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ca:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ce:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036d2:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d4:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d8:	f343 024f 	sbfx	r2, r3, #1, #16
900036dc:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036e0:	d1c1      	bne.n	90003666 <TGFX_JPEG_InitColorTables+0x2e>
900036e2:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003778 <TGFX_JPEG_InitColorTables+0x140>
900036e6:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036e8:	f04f 0c00 	mov.w	ip, #0
900036ec:	e007      	b.n	900036fe <TGFX_JPEG_InitColorTables+0xc6>
900036ee:	f10c 0c01 	add.w	ip, ip, #1
900036f2:	4641      	mov	r1, r8
900036f4:	f10e 0e20 	add.w	lr, lr, #32
900036f8:	f1bc 0f10 	cmp.w	ip, #16
900036fc:	d03e      	beq.n	9000377c <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900036fe:	f1bc 0f07 	cmp.w	ip, #7
90003702:	f101 0808 	add.w	r8, r1, #8
90003706:	4672      	mov	r2, lr
90003708:	f04f 0001 	mov.w	r0, #1
9000370c:	bf94      	ite	ls
9000370e:	2600      	movls	r6, #0
90003710:	2601      	movhi	r6, #1
90003712:	fa1f f388 	uxth.w	r3, r8
90003716:	2400      	movs	r4, #0
90003718:	2c07      	cmp	r4, #7
9000371a:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
9000371e:	bf94      	ite	ls
90003720:	2700      	movls	r7, #0
90003722:	2701      	movhi	r7, #1
90003724:	2f00      	cmp	r7, #0
90003726:	f000 8407 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
9000372a:	2e00      	cmp	r6, #0
9000372c:	f000 8404 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
90003730:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
90003734:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003736:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003738:	d0d9      	beq.n	900036ee <TGFX_JPEG_InitColorTables+0xb6>
9000373a:	3301      	adds	r3, #1
9000373c:	3401      	adds	r4, #1
9000373e:	3001      	adds	r0, #1
90003740:	3101      	adds	r1, #1
90003742:	3202      	adds	r2, #2
90003744:	b29b      	uxth	r3, r3
90003746:	e7e7      	b.n	90003718 <TGFX_JPEG_InitColorTables+0xe0>
90003748:	2400a604 	.word	0x2400a604
9000374c:	240089c4 	.word	0x240089c4
90003750:	24006dc4 	.word	0x24006dc4
90003754:	24008dc4 	.word	0x24008dc4
90003758:	240071c4 	.word	0x240071c4
9000375c:	ffffd4d1 	.word	0xffffd4d1
90003760:	ffffab30 	.word	0xffffab30
90003764:	ffff94d1 	.word	0xffff94d1
90003768:	ffffeb30 	.word	0xffffeb30
9000376c:	240075c4 	.word	0x240075c4
90003770:	2400aa04 	.word	0x2400aa04
90003774:	240091c4 	.word	0x240091c4
90003778:	2400a408 	.word	0x2400a408
9000377c:	4b07      	ldr	r3, [pc, #28]	; (9000379c <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
9000377e:	2000      	movs	r0, #0
90003780:	4907      	ldr	r1, [pc, #28]	; (900037a0 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
90003782:	f04f 0c80 	mov.w	ip, #128	; 0x80
90003786:	9304      	str	r3, [sp, #16]
90003788:	4b06      	ldr	r3, [pc, #24]	; (900037a4 <TGFX_JPEG_InitColorTables+0x16c>)
9000378a:	4a07      	ldr	r2, [pc, #28]	; (900037a8 <TGFX_JPEG_InitColorTables+0x170>)
9000378c:	9303      	str	r3, [sp, #12]
9000378e:	4b07      	ldr	r3, [pc, #28]	; (900037ac <TGFX_JPEG_InitColorTables+0x174>)
90003790:	f8df e01c 	ldr.w	lr, [pc, #28]	; 900037b0 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
90003794:	469b      	mov	fp, r3
90003796:	9002      	str	r0, [sp, #8]
90003798:	e00c      	b.n	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
9000379a:	bf00      	nop
9000379c:	240095c8 	.word	0x240095c8
900037a0:	24009c88 	.word	0x24009c88
900037a4:	240097c8 	.word	0x240097c8
900037a8:	24009f08 	.word	0x24009f08
900037ac:	24009a88 	.word	0x24009a88
900037b0:	2400a108 	.word	0x2400a108
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037b4:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037b6:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037ba:	f10c 0640 	add.w	r6, ip, #64	; 0x40
900037be:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c0:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
900037c2:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c4:	b2ad      	uxth	r5, r5
900037c6:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c8:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037ca:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037cc:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ce:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d0:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900037d2:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d4:	9606      	str	r6, [sp, #24]
900037d6:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d8:	f503 7580 	add.w	r5, r3, #256	; 0x100
900037dc:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900037e0:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900037e4:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e8:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900037ea:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037ec:	fa1f fa8a 	uxth.w	sl, sl
900037f0:	f365 060f 	bfi	r6, r5, #0, #16
900037f4:	fa1f f989 	uxth.w	r9, r9
900037f8:	f365 461f 	bfi	r6, r5, #16, #16
900037fc:	4635      	mov	r5, r6
900037fe:	9e04      	ldr	r6, [sp, #16]
90003800:	9500      	str	r5, [sp, #0]
90003802:	4634      	mov	r4, r6
90003804:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003806:	f10c 0541 	add.w	r5, ip, #65	; 0x41
9000380a:	b2ad      	uxth	r5, r5
9000380c:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000380e:	f10c 0502 	add.w	r5, ip, #2
90003812:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003816:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000381a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000381e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003822:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003826:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000382a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000382e:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003832:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003836:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000383a:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003842:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003846:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000384a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000384e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003852:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003856:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000385a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000385e:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003862:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003866:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000386a:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000386e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003872:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003876:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000387a:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000387e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003882:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003886:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000388e:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003892:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003896:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000389a:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000389e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038a2:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038a6:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038aa:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b2:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b6:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038ba:	b2ad      	uxth	r5, r5
900038bc:	f365 000f 	bfi	r0, r5, #0, #16
900038c0:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038c4:	f203 1541 	addw	r5, r3, #321	; 0x141
900038c8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038cc:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038d0:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038da:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038de:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038e0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038e4:	f203 1047 	addw	r0, r3, #327	; 0x147
900038e8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ec:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038f0:	b280      	uxth	r0, r0
900038f2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038fa:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038fe:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003906:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000390a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003912:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003916:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000391a:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000391e:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003920:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003924:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003928:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000392a:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000392c:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003930:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003932:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003936:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003938:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000393c:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000393e:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003940:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003942:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003946:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003948:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000394a:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394e:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003950:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003952:	b2ad      	uxth	r5, r5
90003954:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003956:	f503 75c3 	add.w	r5, r3, #390	; 0x186
9000395a:	b2ad      	uxth	r5, r5
9000395c:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000395e:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003962:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003966:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003968:	b29b      	uxth	r3, r3
9000396a:	9323      	str	r3, [sp, #140]	; 0x8c
9000396c:	2300      	movs	r3, #0
9000396e:	f36a 030f 	bfi	r3, sl, #0, #16
90003972:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003976:	f04f 0a00 	mov.w	sl, #0
9000397a:	f369 0a0f 	bfi	sl, r9, #0, #16
9000397e:	60a3      	str	r3, [r4, #8]
90003980:	f369 4a1f 	bfi	sl, r9, #16, #16
90003984:	f04f 0900 	mov.w	r9, #0
90003988:	f368 090f 	bfi	r9, r8, #0, #16
9000398c:	f8c4 a00c 	str.w	sl, [r4, #12]
90003990:	f368 491f 	bfi	r9, r8, #16, #16
90003994:	f04f 0800 	mov.w	r8, #0
90003998:	f367 080f 	bfi	r8, r7, #0, #16
9000399c:	f8c4 9010 	str.w	r9, [r4, #16]
900039a0:	f367 481f 	bfi	r8, r7, #16, #16
900039a4:	2700      	movs	r7, #0
900039a6:	f366 070f 	bfi	r7, r6, #0, #16
900039aa:	f8c4 8014 	str.w	r8, [r4, #20]
900039ae:	f366 471f 	bfi	r7, r6, #16, #16
900039b2:	2600      	movs	r6, #0
900039b4:	f365 060f 	bfi	r6, r5, #0, #16
900039b8:	61a7      	str	r7, [r4, #24]
900039ba:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
900039be:	f104 0520 	add.w	r5, r4, #32
900039c2:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c4:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039c6:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c8:	f36c 050f 	bfi	r5, ip, #0, #16
900039cc:	9c08      	ldr	r4, [sp, #32]
900039ce:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
900039d2:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039d6:	6005      	str	r5, [r0, #0]
900039d8:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
900039da:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039de:	f364 050f 	bfi	r5, r4, #0, #16
900039e2:	f364 451f 	bfi	r5, r4, #16, #16
900039e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900039e8:	6045      	str	r5, [r0, #4]
900039ea:	2500      	movs	r5, #0
900039ec:	f364 050f 	bfi	r5, r4, #0, #16
900039f0:	f364 451f 	bfi	r5, r4, #16, #16
900039f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
900039f6:	6085      	str	r5, [r0, #8]
900039f8:	2500      	movs	r5, #0
900039fa:	f364 050f 	bfi	r5, r4, #0, #16
900039fe:	f364 451f 	bfi	r5, r4, #16, #16
90003a02:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003a04:	60c5      	str	r5, [r0, #12]
90003a06:	2500      	movs	r5, #0
90003a08:	f364 050f 	bfi	r5, r4, #0, #16
90003a0c:	f364 451f 	bfi	r5, r4, #16, #16
90003a10:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003a12:	6105      	str	r5, [r0, #16]
90003a14:	2500      	movs	r5, #0
90003a16:	f364 050f 	bfi	r5, r4, #0, #16
90003a1a:	f364 451f 	bfi	r5, r4, #16, #16
90003a1e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003a20:	6145      	str	r5, [r0, #20]
90003a22:	2500      	movs	r5, #0
90003a24:	f364 050f 	bfi	r5, r4, #0, #16
90003a28:	f364 451f 	bfi	r5, r4, #16, #16
90003a2c:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003a2e:	6185      	str	r5, [r0, #24]
90003a30:	2500      	movs	r5, #0
90003a32:	f364 050f 	bfi	r5, r4, #0, #16
90003a36:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003a3a:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a3e:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a40:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003a42:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a44:	9c05      	ldr	r4, [sp, #20]
90003a46:	f364 050f 	bfi	r5, r4, #0, #16
90003a4a:	f364 451f 	bfi	r5, r4, #16, #16
90003a4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003a50:	f84b 5c20 	str.w	r5, [fp, #-32]
90003a54:	2500      	movs	r5, #0
90003a56:	f364 050f 	bfi	r5, r4, #0, #16
90003a5a:	f364 451f 	bfi	r5, r4, #16, #16
90003a5e:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003a62:	2500      	movs	r5, #0
90003a64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a66:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a68:	f364 050f 	bfi	r5, r4, #0, #16
90003a6c:	f364 451f 	bfi	r5, r4, #16, #16
90003a70:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003a72:	f84b 5c18 	str.w	r5, [fp, #-24]
90003a76:	2500      	movs	r5, #0
90003a78:	f364 050f 	bfi	r5, r4, #0, #16
90003a7c:	f364 451f 	bfi	r5, r4, #16, #16
90003a80:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003a82:	f84b 5c14 	str.w	r5, [fp, #-20]
90003a86:	2500      	movs	r5, #0
90003a88:	f364 050f 	bfi	r5, r4, #0, #16
90003a8c:	f364 451f 	bfi	r5, r4, #16, #16
90003a90:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003a92:	f84b 5c10 	str.w	r5, [fp, #-16]
90003a96:	2500      	movs	r5, #0
90003a98:	f364 050f 	bfi	r5, r4, #0, #16
90003a9c:	f364 451f 	bfi	r5, r4, #16, #16
90003aa0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003aa2:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003aa6:	2500      	movs	r5, #0
90003aa8:	f364 050f 	bfi	r5, r4, #0, #16
90003aac:	f364 451f 	bfi	r5, r4, #16, #16
90003ab0:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003ab2:	f84b 5c08 	str.w	r5, [fp, #-8]
90003ab6:	2500      	movs	r5, #0
90003ab8:	f364 050f 	bfi	r5, r4, #0, #16
90003abc:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003ac0:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ac2:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ac6:	2500      	movs	r5, #0
90003ac8:	f360 050f 	bfi	r5, r0, #0, #16
90003acc:	f360 451f 	bfi	r5, r0, #16, #16
90003ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
90003ad2:	f841 5c20 	str.w	r5, [r1, #-32]
90003ad6:	2500      	movs	r5, #0
90003ad8:	f360 050f 	bfi	r5, r0, #0, #16
90003adc:	f360 451f 	bfi	r5, r0, #16, #16
90003ae0:	980e      	ldr	r0, [sp, #56]	; 0x38
90003ae2:	f841 5c1c 	str.w	r5, [r1, #-28]
90003ae6:	2500      	movs	r5, #0
90003ae8:	f360 050f 	bfi	r5, r0, #0, #16
90003aec:	f360 451f 	bfi	r5, r0, #16, #16
90003af0:	9812      	ldr	r0, [sp, #72]	; 0x48
90003af2:	f841 5c18 	str.w	r5, [r1, #-24]
90003af6:	2500      	movs	r5, #0
90003af8:	f360 050f 	bfi	r5, r0, #0, #16
90003afc:	f360 451f 	bfi	r5, r0, #16, #16
90003b00:	9816      	ldr	r0, [sp, #88]	; 0x58
90003b02:	f841 5c14 	str.w	r5, [r1, #-20]
90003b06:	2500      	movs	r5, #0
90003b08:	f360 050f 	bfi	r5, r0, #0, #16
90003b0c:	f360 451f 	bfi	r5, r0, #16, #16
90003b10:	981a      	ldr	r0, [sp, #104]	; 0x68
90003b12:	f841 5c10 	str.w	r5, [r1, #-16]
90003b16:	2500      	movs	r5, #0
90003b18:	f360 050f 	bfi	r5, r0, #0, #16
90003b1c:	f360 451f 	bfi	r5, r0, #16, #16
90003b20:	981e      	ldr	r0, [sp, #120]	; 0x78
90003b22:	f841 5c0c 	str.w	r5, [r1, #-12]
90003b26:	2500      	movs	r5, #0
90003b28:	f360 050f 	bfi	r5, r0, #0, #16
90003b2c:	f360 451f 	bfi	r5, r0, #16, #16
90003b30:	9822      	ldr	r0, [sp, #136]	; 0x88
90003b32:	f841 5c08 	str.w	r5, [r1, #-8]
90003b36:	2500      	movs	r5, #0
90003b38:	f360 050f 	bfi	r5, r0, #0, #16
90003b3c:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b40:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b42:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b46:	2500      	movs	r5, #0
90003b48:	f360 050f 	bfi	r5, r0, #0, #16
90003b4c:	f360 451f 	bfi	r5, r0, #16, #16
90003b50:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b54:	9d00      	ldr	r5, [sp, #0]
90003b56:	f8ce 5000 	str.w	r5, [lr]
90003b5a:	9801      	ldr	r0, [sp, #4]
90003b5c:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003b62:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b64:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b68:	2300      	movs	r3, #0
90003b6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003b6c:	f366 030f 	bfi	r3, r6, #0, #16
90003b70:	f366 431f 	bfi	r3, r6, #16, #16
90003b74:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b76:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003b7a:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b7e:	f842 3c1c 	str.w	r3, [r2, #-28]
90003b82:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003b84:	9f02      	ldr	r7, [sp, #8]
90003b86:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b8a:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003b8e:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b90:	f366 431f 	bfi	r3, r6, #16, #16
90003b94:	f842 3c18 	str.w	r3, [r2, #-24]
90003b98:	f04f 0300 	mov.w	r3, #0
90003b9c:	f365 030f 	bfi	r3, r5, #0, #16
90003ba0:	f365 431f 	bfi	r3, r5, #16, #16
90003ba4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003ba6:	f842 3c14 	str.w	r3, [r2, #-20]
90003baa:	f04f 0300 	mov.w	r3, #0
90003bae:	f365 040f 	bfi	r4, r5, #0, #16
90003bb2:	f360 030f 	bfi	r3, r0, #0, #16
90003bb6:	f365 441f 	bfi	r4, r5, #16, #16
90003bba:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003bbc:	f360 431f 	bfi	r3, r0, #16, #16
90003bc0:	f04f 0000 	mov.w	r0, #0
90003bc4:	f842 4c0c 	str.w	r4, [r2, #-12]
90003bc8:	f842 3c10 	str.w	r3, [r2, #-16]
90003bcc:	4603      	mov	r3, r0
90003bce:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003bd0:	f365 000f 	bfi	r0, r5, #0, #16
90003bd4:	f364 030f 	bfi	r3, r4, #0, #16
90003bd8:	f365 401f 	bfi	r0, r5, #16, #16
90003bdc:	f364 431f 	bfi	r3, r4, #16, #16
90003be0:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003be4:	f47f ade6 	bne.w	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003be8:	48db      	ldr	r0, [pc, #876]	; (90003f58 <TGFX_JPEG_InitColorTables+0x920>)
90003bea:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003bee:	49db      	ldr	r1, [pc, #876]	; (90003f5c <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf0:	6004      	str	r4, [r0, #0]
90003bf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003bf6:	4ada      	ldr	r2, [pc, #872]	; (90003f60 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf8:	6044      	str	r4, [r0, #4]
90003bfa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003bfe:	4bd9      	ldr	r3, [pc, #868]	; (90003f64 <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c00:	6084      	str	r4, [r0, #8]
90003c02:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c06:	4fd8      	ldr	r7, [pc, #864]	; (90003f68 <TGFX_JPEG_InitColorTables+0x930>)
90003c08:	60c4      	str	r4, [r0, #12]
90003c0a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c0e:	4ed7      	ldr	r6, [pc, #860]	; (90003f6c <TGFX_JPEG_InitColorTables+0x934>)
90003c10:	6104      	str	r4, [r0, #16]
90003c12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c16:	4dd6      	ldr	r5, [pc, #856]	; (90003f70 <TGFX_JPEG_InitColorTables+0x938>)
90003c18:	6144      	str	r4, [r0, #20]
90003c1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c1e:	f8df b374 	ldr.w	fp, [pc, #884]	; 90003f94 <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c22:	6184      	str	r4, [r0, #24]
90003c24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c28:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90003f98 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c2c:	61c4      	str	r4, [r0, #28]
90003c2e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c32:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90003f9c <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c36:	6204      	str	r4, [r0, #32]
90003c38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c3c:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90003fa0 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c40:	6244      	str	r4, [r0, #36]	; 0x24
90003c42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c46:	f8df e35c 	ldr.w	lr, [pc, #860]	; 90003fa4 <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c4a:	6284      	str	r4, [r0, #40]	; 0x28
90003c4c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c50:	62c4      	str	r4, [r0, #44]	; 0x2c
90003c52:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c56:	6304      	str	r4, [r0, #48]	; 0x30
90003c58:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c5c:	6344      	str	r4, [r0, #52]	; 0x34
90003c5e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c62:	6384      	str	r4, [r0, #56]	; 0x38
90003c64:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c68:	63c4      	str	r4, [r0, #60]	; 0x3c
90003c6a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c6e:	6404      	str	r4, [r0, #64]	; 0x40
90003c70:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c74:	6444      	str	r4, [r0, #68]	; 0x44
90003c76:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c7a:	6484      	str	r4, [r0, #72]	; 0x48
90003c7c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c80:	64c4      	str	r4, [r0, #76]	; 0x4c
90003c82:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c86:	6504      	str	r4, [r0, #80]	; 0x50
90003c88:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c8c:	6544      	str	r4, [r0, #84]	; 0x54
90003c8e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c92:	6584      	str	r4, [r0, #88]	; 0x58
90003c94:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c98:	65c4      	str	r4, [r0, #92]	; 0x5c
90003c9a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c9e:	6604      	str	r4, [r0, #96]	; 0x60
90003ca0:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ca4:	6644      	str	r4, [r0, #100]	; 0x64
90003ca6:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003caa:	6684      	str	r4, [r0, #104]	; 0x68
90003cac:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb0:	66c4      	str	r4, [r0, #108]	; 0x6c
90003cb2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb6:	6704      	str	r4, [r0, #112]	; 0x70
90003cb8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cbc:	6744      	str	r4, [r0, #116]	; 0x74
90003cbe:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc2:	6784      	str	r4, [r0, #120]	; 0x78
90003cc4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc8:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cce:	48a9      	ldr	r0, [pc, #676]	; (90003f74 <TGFX_JPEG_InitColorTables+0x93c>)
90003cd0:	e9c1 4000 	strd	r4, r0, [r1]
90003cd4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cd8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cdc:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003ce0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ce4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ce8:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003cec:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cf0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cf4:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003cf8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cfc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d00:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003d04:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d08:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d0c:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003d10:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d14:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d18:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003d1c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d20:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d24:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003d28:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d2c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d30:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003d34:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d38:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d3c:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003d40:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d44:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d48:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003d4c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d50:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d54:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003d58:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d5c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d60:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003d64:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d68:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d6c:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003d70:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d74:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d78:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003d7c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d80:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d84:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003d88:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d8c:	497a      	ldr	r1, [pc, #488]	; (90003f78 <TGFX_JPEG_InitColorTables+0x940>)
90003d8e:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003d92:	e9c2 4100 	strd	r4, r1, [r2]
90003d96:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003d9a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d9e:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003da2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003da6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003daa:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003dae:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003db2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003db6:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003dba:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dbe:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dc2:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003dc6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dca:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dce:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003dd2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dd6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dda:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003dde:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003de2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003de6:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003dea:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dee:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003df2:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003df6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dfa:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dfe:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003e02:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e06:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e0a:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003e0e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e12:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e16:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003e1a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e1e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e22:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003e26:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e2a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e2e:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003e32:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e36:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e3a:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003e3e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e42:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e46:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e4a:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e4e:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003e52:	4a4a      	ldr	r2, [pc, #296]	; (90003f7c <TGFX_JPEG_InitColorTables+0x944>)
90003e54:	e9c3 4000 	strd	r4, r0, [r3]
90003e58:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003e5c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e60:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e64:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e68:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e6c:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003e70:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003e74:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e78:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e7c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e80:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e84:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003e88:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003e8c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e90:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e94:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e98:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e9c:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003ea0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003ea4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eac:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003eb0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003eb4:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003eb8:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003ebc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ec0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ec4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ec8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ecc:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003ed0:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003ed4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003edc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ee0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ee4:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003ee8:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003eec:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ef0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ef4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ef8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003efc:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003f00:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003f04:	4c1e      	ldr	r4, [pc, #120]	; (90003f80 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f06:	481f      	ldr	r0, [pc, #124]	; (90003f84 <TGFX_JPEG_InitColorTables+0x94c>)
90003f08:	491f      	ldr	r1, [pc, #124]	; (90003f88 <TGFX_JPEG_InitColorTables+0x950>)
90003f0a:	4a20      	ldr	r2, [pc, #128]	; (90003f8c <TGFX_JPEG_InitColorTables+0x954>)
90003f0c:	4b20      	ldr	r3, [pc, #128]	; (90003f90 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003f12:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003f14:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003f18:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f1a:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003f1e:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003f24:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003f28:	4452      	add	r2, sl
90003f2a:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f2c:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003f30:	d1ed      	bne.n	90003f0e <TGFX_JPEG_InitColorTables+0x8d6>
}
90003f32:	b025      	add	sp, #148	; 0x94
90003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003f38:	f1bc 0f07 	cmp.w	ip, #7
90003f3c:	d803      	bhi.n	90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f3e:	b117      	cbz	r7, 90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f40:	460d      	mov	r5, r1
90003f42:	f7ff bbf7 	b.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003f46:	2c07      	cmp	r4, #7
90003f48:	f63f abf4 	bhi.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
90003f4c:	2e00      	cmp	r6, #0
90003f4e:	f43f abf1 	beq.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003f52:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003f54:	f7ff bbf1 	b.w	9000373a <TGFX_JPEG_InitColorTables+0x102>
90003f58:	2400a388 	.word	0x2400a388
90003f5c:	240099c8 	.word	0x240099c8
90003f60:	24009e88 	.word	0x24009e88
90003f64:	2400a308 	.word	0x2400a308
90003f68:	240085c4 	.word	0x240085c4
90003f6c:	240079c4 	.word	0x240079c4
90003f70:	240081c4 	.word	0x240081c4
90003f74:	00430042 	.word	0x00430042
90003f78:	00830082 	.word	0x00830082
90003f7c:	00c700c6 	.word	0x00c700c6
90003f80:	24007dc4 	.word	0x24007dc4
90003f84:	002c0c00 	.word	0x002c0c00
90003f88:	005b6800 	.word	0x005b6800
90003f8c:	ff1db000 	.word	0xff1db000
90003f90:	ff4d0c00 	.word	0xff4d0c00
90003f94:	000166e8 	.word	0x000166e8
90003f98:	0001c5a0 	.word	0x0001c5a0
90003f9c:	ffff4930 	.word	0xffff4930
90003fa0:	ffffa7e8 	.word	0xffffa7e8
90003fa4:	00b3f400 	.word	0x00b3f400

90003fa8 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003fa8:	4901      	ldr	r1, [pc, #4]	; (90003fb0 <vApplicationIdleHook+0x8>)
90003faa:	2000      	movs	r0, #0
90003fac:	f00a baec 	b.w	9000e588 <vTaskSetApplicationTaskTag>
90003fb0:	90000945 	.word	0x90000945

90003fb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003fb6:	2064      	movs	r0, #100	; 0x64
90003fb8:	f008 f832 	bl	9000c020 <osDelay>
  for(;;)
90003fbc:	e7fb      	b.n	90003fb6 <StartDefaultTask+0x2>
90003fbe:	bf00      	nop

90003fc0 <consumerTask_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTask_handler */
void consumerTask_handler(void *argument)
{
90003fc0:	b510      	push	{r4, lr}
  /* Infinite loop */
  for(;;)
  {
    void* msg = NULL;

    if(osMessageQueueGet(&controlQueueHandle, msg, NULL, 0) != pdPASS) {
90003fc2:	4c06      	ldr	r4, [pc, #24]	; (90003fdc <consumerTask_handler+0x1c>)
90003fc4:	2300      	movs	r3, #0
90003fc6:	4620      	mov	r0, r4
90003fc8:	461a      	mov	r2, r3
90003fca:	4619      	mov	r1, r3
90003fcc:	f008 f9ec 	bl	9000c3a8 <osMessageQueueGet>
90003fd0:	2801      	cmp	r0, #1
90003fd2:	d1f7      	bne.n	90003fc4 <consumerTask_handler+0x4>
    	continue;
    }

    Control_TypeDef* control = (Control_TypeDef*) msg;

    if(strcmp(control->type, "DHT11")) {
90003fd4:	2300      	movs	r3, #0
90003fd6:	681b      	ldr	r3, [r3, #0]
90003fd8:	deff      	udf	#255	; 0xff
90003fda:	bf00      	nop
90003fdc:	2400ae14 	.word	0x2400ae14

90003fe0 <dht11Task_handler>:
{
90003fe0:	f04f 0a00 	mov.w	sl, #0

	// EMPTY BUFFER
	for (int i=0; i<5; i++) bits[i] = 0;

	// REQUEST SAMPLE
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
90003fe4:	4c48      	ldr	r4, [pc, #288]	; (90004108 <dht11Task_handler+0x128>)
90003fe6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
90003fea:	46d1      	mov	r9, sl
90003fec:	b087      	sub	sp, #28
90003fee:	46d3      	mov	fp, sl
90003ff0:	2200      	movs	r2, #0
90003ff2:	2108      	movs	r1, #8
90003ff4:	4620      	mov	r0, r4
        // wait for high pulse
        uint32_t t = 0;
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
        {
            t++;
            HAL_Delay(1);
90003ff6:	f04f 0801 	mov.w	r8, #1
    memset(bits, 0, sizeof(bits));
90003ffa:	4616      	mov	r6, r2
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
90003ffc:	f003 fb5e 	bl	900076bc <HAL_GPIO_WritePin>
    HAL_Delay(18);
90004000:	2012      	movs	r0, #18
90004002:	f002 fec5 	bl	90006d90 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
90004006:	4642      	mov	r2, r8
90004008:	2108      	movs	r1, #8
9000400a:	4620      	mov	r0, r4
9000400c:	f003 fb56 	bl	900076bc <HAL_GPIO_WritePin>
    HAL_Delay(40);
90004010:	2028      	movs	r0, #40	; 0x28
90004012:	f002 febd 	bl	90006d90 <HAL_Delay>
    memset(bits, 0, sizeof(bits));
90004016:	f8cd b010 	str.w	fp, [sp, #16]
9000401a:	f88d b014 	strb.w	fp, [sp, #20]
    for(i=0; i<40; i++)
9000401e:	b2f7      	uxtb	r7, r6
        while(!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin));
90004020:	2108      	movs	r1, #8
90004022:	4620      	mov	r0, r4
90004024:	f003 fb44 	bl	900076b0 <HAL_GPIO_ReadPin>
90004028:	2800      	cmp	r0, #0
9000402a:	d0f9      	beq.n	90004020 <dht11Task_handler+0x40>
        uint32_t t = 0;
9000402c:	2500      	movs	r5, #0
9000402e:	e002      	b.n	90004036 <dht11Task_handler+0x56>
            t++;
90004030:	3501      	adds	r5, #1
            HAL_Delay(1);
90004032:	f002 fead 	bl	90006d90 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
90004036:	2108      	movs	r1, #8
90004038:	4620      	mov	r0, r4
9000403a:	f003 fb39 	bl	900076b0 <HAL_GPIO_ReadPin>
9000403e:	4603      	mov	r3, r0
            HAL_Delay(1);
90004040:	2001      	movs	r0, #1
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
90004042:	2b00      	cmp	r3, #0
90004044:	d1f4      	bne.n	90004030 <dht11Task_handler+0x50>
        }

        // store bit value in bits array
        if(t > 30)
90004046:	2d1e      	cmp	r5, #30
90004048:	d90c      	bls.n	90004064 <dht11Task_handler+0x84>
        	bits[i/8] |= (1 << (7 - (i % 8)));
9000404a:	aa06      	add	r2, sp, #24
9000404c:	43f3      	mvns	r3, r6
9000404e:	eb02 07d7 	add.w	r7, r2, r7, lsr #3
90004052:	f003 0307 	and.w	r3, r3, #7
90004056:	f817 2c08 	ldrb.w	r2, [r7, #-8]
9000405a:	fa08 f303 	lsl.w	r3, r8, r3
9000405e:	4313      	orrs	r3, r2
90004060:	f807 3c08 	strb.w	r3, [r7, #-8]
    for(i=0; i<40; i++)
90004064:	3601      	adds	r6, #1
90004066:	2e28      	cmp	r6, #40	; 0x28
90004068:	d1d9      	bne.n	9000401e <dht11Task_handler+0x3e>
    }

    // verify checksum
    if(bits[4] == (bits[0] + bits[1] + bits[2] + bits[3]))
9000406a:	f89d 2011 	ldrb.w	r2, [sp, #17]
9000406e:	f89d 3010 	ldrb.w	r3, [sp, #16]
90004072:	f89d 1012 	ldrb.w	r1, [sp, #18]
90004076:	4413      	add	r3, r2
90004078:	f89d 0013 	ldrb.w	r0, [sp, #19]
9000407c:	f89d 5014 	ldrb.w	r5, [sp, #20]
90004080:	440b      	add	r3, r1
90004082:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90004086:	4403      	add	r3, r0
90004088:	429d      	cmp	r5, r3
9000408a:	d015      	beq.n	900040b8 <dht11Task_handler+0xd8>
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
9000408c:	25ff      	movs	r5, #255	; 0xff
	  if(osMessageQueuePut( &controlQueueHandle, ( void * ) &control, 0, 0) != pdPASS) {
9000408e:	2300      	movs	r3, #0
90004090:	a904      	add	r1, sp, #16
90004092:	481e      	ldr	r0, [pc, #120]	; (9000410c <dht11Task_handler+0x12c>)
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
90004094:	f88d 500e 	strb.w	r5, [sp, #14]
	  control.obj = (void*) &dht11;
90004098:	ad03      	add	r5, sp, #12
	  if(osMessageQueuePut( &controlQueueHandle, ( void * ) &control, 0, 0) != pdPASS) {
9000409a:	461a      	mov	r2, r3
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
9000409c:	f88d a00c 	strb.w	sl, [sp, #12]
	  control.obj = (void*) &dht11;
900040a0:	9505      	str	r5, [sp, #20]
	  control.type = "DHT11";
900040a2:	4d1b      	ldr	r5, [pc, #108]	; (90004110 <dht11Task_handler+0x130>)
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900040a4:	f88d 900d 	strb.w	r9, [sp, #13]
	  control.type = "DHT11";
900040a8:	9504      	str	r5, [sp, #16]
	  if(osMessageQueuePut( &controlQueueHandle, ( void * ) &control, 0, 0) != pdPASS) {
900040aa:	f008 f93b 	bl	9000c324 <osMessageQueuePut>
900040ae:	2801      	cmp	r0, #1
900040b0:	d19e      	bne.n	90003ff0 <dht11Task_handler+0x10>
	  osDelay(1);
900040b2:	f007 ffb5 	bl	9000c020 <osDelay>
900040b6:	e79b      	b.n	90003ff0 <dht11Task_handler+0x10>
    {
        // convert temperature and humidity values
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040b8:	020b      	lsls	r3, r1, #8
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040ba:	ba52      	rev16	r2, r2
900040bc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040c0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040c4:	b292      	uxth	r2, r2
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040c6:	4303      	orrs	r3, r0
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040c8:	ee07 2a90 	vmov	s15, r2
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040cc:	ee06 3a90 	vmov	s13, r3
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        if (bits[2] & 0x80) dht11.temperature *= -1;
900040d4:	060b      	lsls	r3, r1, #24
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040da:	ee87 4b05 	vdiv.f64	d4, d7, d5
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040de:	ee86 7b05 	vdiv.f64	d7, d6, d5
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040e2:	eefc 6bc4 	vcvt.u32.f64	s13, d4
900040e6:	edcd 6a00 	vstr	s13, [sp]
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
900040ee:	f89d a000 	ldrb.w	sl, [sp]
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
900040f2:	edcd 7a01 	vstr	s15, [sp, #4]
900040f6:	f89d 9004 	ldrb.w	r9, [sp, #4]
        if (bits[2] & 0x80) dht11.temperature *= -1;
900040fa:	d5c7      	bpl.n	9000408c <dht11Task_handler+0xac>
900040fc:	f1c9 0900 	rsb	r9, r9, #0
90004100:	fa5f f989 	uxtb.w	r9, r9
90004104:	e7c2      	b.n	9000408c <dht11Task_handler+0xac>
90004106:	bf00      	nop
90004108:	58021000 	.word	0x58021000
9000410c:	2400ae14 	.word	0x2400ae14
90004110:	900246ac 	.word	0x900246ac

90004114 <SystemClock_Config>:
{
90004114:	b570      	push	{r4, r5, r6, lr}
90004116:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90004118:	224c      	movs	r2, #76	; 0x4c
9000411a:	2100      	movs	r1, #0
9000411c:	a80a      	add	r0, sp, #40	; 0x28
9000411e:	f01d feb9 	bl	90021e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90004122:	2220      	movs	r2, #32
90004124:	2100      	movs	r1, #0
90004126:	a802      	add	r0, sp, #8
90004128:	f01d feb4 	bl	90021e94 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
9000412c:	2002      	movs	r0, #2
9000412e:	f005 fecf 	bl	90009ed0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90004132:	4b22      	ldr	r3, [pc, #136]	; (900041bc <SystemClock_Config+0xa8>)
90004134:	2100      	movs	r1, #0
90004136:	4a22      	ldr	r2, [pc, #136]	; (900041c0 <SystemClock_Config+0xac>)
90004138:	9101      	str	r1, [sp, #4]
9000413a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000413c:	f021 0101 	bic.w	r1, r1, #1
90004140:	62d9      	str	r1, [r3, #44]	; 0x2c
90004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004144:	f003 0301 	and.w	r3, r3, #1
90004148:	9301      	str	r3, [sp, #4]
9000414a:	6993      	ldr	r3, [r2, #24]
9000414c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90004150:	6193      	str	r3, [r2, #24]
90004152:	6993      	ldr	r3, [r2, #24]
90004154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90004158:	9301      	str	r3, [sp, #4]
9000415a:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
9000415c:	6993      	ldr	r3, [r2, #24]
9000415e:	0499      	lsls	r1, r3, #18
90004160:	d5fc      	bpl.n	9000415c <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004162:	2201      	movs	r2, #1
90004164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90004168:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000416a:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000416c:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000416e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90004170:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004172:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
90004176:	2205      	movs	r2, #5
90004178:	23a0      	movs	r3, #160	; 0xa0
9000417a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000417e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90004180:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004184:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004186:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000418a:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000418e:	f005 ff47 	bl	9000a020 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004192:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004194:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004196:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90004198:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000419a:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000419e:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900041a0:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
900041a2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900041a4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900041a6:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900041a8:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
900041ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
900041b0:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900041b2:	f006 fac9 	bl	9000a748 <HAL_RCC_ClockConfig>
}
900041b6:	b01e      	add	sp, #120	; 0x78
900041b8:	bd70      	pop	{r4, r5, r6, pc}
900041ba:	bf00      	nop
900041bc:	58000400 	.word	0x58000400
900041c0:	58024800 	.word	0x58024800

900041c4 <main>:
{
900041c4:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900041c6:	2400      	movs	r4, #0
{
900041c8:	b098      	sub	sp, #96	; 0x60
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900041ca:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900041cc:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900041ce:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900041d0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900041d4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
900041d8:	f002 fe62 	bl	90006ea0 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
900041dc:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900041e0:	49d5      	ldr	r1, [pc, #852]	; (90004538 <main+0x374>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041e2:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
900041e4:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900041e6:	4bd5      	ldr	r3, [pc, #852]	; (9000453c <main+0x378>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900041e8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900041ec:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041f0:	f002 fe74 	bl	90006edc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
900041f4:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041f8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900041fa:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
900041fe:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004200:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90004204:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004208:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000420c:	f002 fe66 	bl	90006edc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004210:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004212:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004214:	f8ad 6037 	strh.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004218:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
9000421c:	231a      	movs	r3, #26
9000421e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004222:	f240 1301 	movw	r3, #257	; 0x101
90004226:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000422a:	f002 fe57 	bl	90006edc <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000422e:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004232:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004234:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004238:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000423a:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000423e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004242:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004246:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90004248:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000424c:	f002 fe46 	bl	90006edc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004250:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004252:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004254:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004258:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000425c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004260:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004264:	f002 fe3a 	bl	90006edc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90004268:	4620      	mov	r0, r4
9000426a:	f002 fe27 	bl	90006ebc <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000426e:	4ab4      	ldr	r2, [pc, #720]	; (90004540 <main+0x37c>)
90004270:	6953      	ldr	r3, [r2, #20]
90004272:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90004276:	d111      	bne.n	9000429c <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
90004278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000427c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90004280:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90004284:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004288:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000428c:	6953      	ldr	r3, [r2, #20]
9000428e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004292:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90004294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004298:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000429c:	48a8      	ldr	r0, [pc, #672]	; (90004540 <main+0x37c>)
9000429e:	6943      	ldr	r3, [r0, #20]
900042a0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
900042a4:	d124      	bne.n	900042f0 <main+0x12c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900042a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900042aa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900042ae:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900042b2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900042b6:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900042ba:	f3c5 05c9 	ubfx	r5, r5, #3, #10
900042be:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900042c0:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900042c4:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900042c6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
900042ca:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900042cc:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
900042d0:	1c5a      	adds	r2, r3, #1
900042d2:	d1f8      	bne.n	900042c6 <main+0x102>
    } while(sets-- != 0U);
900042d4:	3c20      	subs	r4, #32
900042d6:	f114 0f20 	cmn.w	r4, #32
900042da:	d1f1      	bne.n	900042c0 <main+0xfc>
900042dc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900042e0:	6943      	ldr	r3, [r0, #20]
900042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900042e6:	6143      	str	r3, [r0, #20]
900042e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900042ec:	f3bf 8f6f 	isb	sy
  HAL_Init();
900042f0:	f002 fd0c 	bl	90006d0c <HAL_Init>
  SystemClock_Config();
900042f4:	f7ff ff0e 	bl	90004114 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900042f8:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900042fa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
900042fc:	4d91      	ldr	r5, [pc, #580]	; (90004544 <main+0x380>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900042fe:	21c0      	movs	r1, #192	; 0xc0
90004300:	4891      	ldr	r0, [pc, #580]	; (90004548 <main+0x384>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004302:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004304:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004306:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004308:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
9000430c:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
9000430e:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004312:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004316:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000431a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
9000431e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90004326:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000432a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90004332:	9301      	str	r3, [sp, #4]
90004334:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90004336:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000433a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000433e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004342:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000434a:	9302      	str	r3, [sp, #8]
9000434c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
9000434e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004356:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000435a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004362:	9303      	str	r3, [sp, #12]
90004364:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004366:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000436a:	f043 0310 	orr.w	r3, r3, #16
9000436e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004372:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004376:	f003 0310 	and.w	r3, r3, #16
9000437a:	9304      	str	r3, [sp, #16]
9000437c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
9000437e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004382:	f043 0302 	orr.w	r3, r3, #2
90004386:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000438a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000438e:	f003 0302 	and.w	r3, r3, #2
90004392:	9305      	str	r3, [sp, #20]
90004394:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90004396:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000439a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
9000439e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
900043aa:	9306      	str	r3, [sp, #24]
900043ac:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900043ae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043b2:	f043 0308 	orr.w	r3, r3, #8
900043b6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043ba:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043be:	f003 0308 	and.w	r3, r3, #8
900043c2:	9307      	str	r3, [sp, #28]
900043c4:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900043c6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043ca:	f043 0320 	orr.w	r3, r3, #32
900043ce:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043d2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043d6:	f003 0320 	and.w	r3, r3, #32
900043da:	9308      	str	r3, [sp, #32]
900043dc:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900043de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900043e6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
900043f2:	9309      	str	r3, [sp, #36]	; 0x24
900043f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
900043f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043fa:	f043 0301 	orr.w	r3, r3, #1
900043fe:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004402:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004406:	f003 0301 	and.w	r3, r3, #1
9000440a:	930a      	str	r3, [sp, #40]	; 0x28
9000440c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
9000440e:	f003 f955 	bl	900076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
90004412:	4622      	mov	r2, r4
90004414:	2180      	movs	r1, #128	; 0x80
90004416:	484d      	ldr	r0, [pc, #308]	; (9000454c <main+0x388>)
90004418:	f003 f950 	bl	900076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
9000441c:	4622      	mov	r2, r4
9000441e:	2108      	movs	r1, #8
90004420:	484b      	ldr	r0, [pc, #300]	; (90004550 <main+0x38c>)
90004422:	f003 f94b 	bl	900076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004426:	4622      	mov	r2, r4
90004428:	2108      	movs	r1, #8
9000442a:	484a      	ldr	r0, [pc, #296]	; (90004554 <main+0x390>)
9000442c:	f003 f946 	bl	900076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004430:	2201      	movs	r2, #1
90004432:	4849      	ldr	r0, [pc, #292]	; (90004558 <main+0x394>)
90004434:	4611      	mov	r1, r2
90004436:	f003 f941 	bl	900076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
9000443a:	4622      	mov	r2, r4
9000443c:	2144      	movs	r1, #68	; 0x44
9000443e:	4847      	ldr	r0, [pc, #284]	; (9000455c <main+0x398>)
90004440:	f003 f93c 	bl	900076bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004444:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004446:	a90b      	add	r1, sp, #44	; 0x2c
90004448:	483f      	ldr	r0, [pc, #252]	; (90004548 <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000444a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000444e:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004452:	f002 ff33 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004456:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004458:	a90b      	add	r1, sp, #44	; 0x2c
9000445a:	483c      	ldr	r0, [pc, #240]	; (9000454c <main+0x388>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000445c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000445e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004460:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004464:	f002 ff2a 	bl	900072bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004468:	a90b      	add	r1, sp, #44	; 0x2c
9000446a:	4839      	ldr	r0, [pc, #228]	; (90004550 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000446c:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004470:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004474:	f002 ff22 	bl	900072bc <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004478:	a90b      	add	r1, sp, #44	; 0x2c
9000447a:	4836      	ldr	r0, [pc, #216]	; (90004554 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000447c:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004480:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004484:	f002 ff1a 	bl	900072bc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004488:	a90b      	add	r1, sp, #44	; 0x2c
9000448a:	4833      	ldr	r0, [pc, #204]	; (90004558 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000448c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004490:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004494:	f002 ff12 	bl	900072bc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004498:	a90b      	add	r1, sp, #44	; 0x2c
9000449a:	4830      	ldr	r0, [pc, #192]	; (9000455c <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000449c:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900044a0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900044a4:	f002 ff0a 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900044a8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900044ac:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900044b0:	a90b      	add	r1, sp, #44	; 0x2c
900044b2:	482a      	ldr	r0, [pc, #168]	; (9000455c <main+0x398>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900044b4:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900044b8:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900044bc:	f002 fefe 	bl	900072bc <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900044c0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900044c4:	4622      	mov	r2, r4
900044c6:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900044c8:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900044ca:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900044cc:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900044d0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
900044d4:	4d22      	ldr	r5, [pc, #136]	; (90004560 <main+0x39c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
900044d6:	4033      	ands	r3, r6
900044d8:	9300      	str	r3, [sp, #0]
900044da:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900044dc:	f002 fc82 	bl	90006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900044e0:	207a      	movs	r0, #122	; 0x7a
900044e2:	f002 fcbd 	bl	90006e60 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900044e6:	2234      	movs	r2, #52	; 0x34
900044e8:	4621      	mov	r1, r4
900044ea:	a80b      	add	r0, sp, #44	; 0x2c
900044ec:	f01d fcd2 	bl	90021e94 <memset>
  hltdc.Instance = LTDC;
900044f0:	4b1c      	ldr	r3, [pc, #112]	; (90004564 <main+0x3a0>)
  hltdc.Init.AccumulatedVBP = 11;
900044f2:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.VerticalSync = 8;
900044f4:	61af      	str	r7, [r5, #24]
  hltdc.Instance = LTDC;
900044f6:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900044f8:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.AccumulatedActiveH = 283;
900044fa:	f240 270a 	movw	r7, #522	; 0x20a
  hltdc.Init.TotalHeigh = 285;
900044fe:	f44f 7c04 	mov.w	ip, #528	; 0x210
  hltdc.Init.HorizontalSync = 39;
90004502:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
90004504:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
90004506:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
90004508:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
9000450c:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
90004510:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004514:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
90004516:	e9c5 7309 	strd	r7, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
9000451a:	f240 131d 	movw	r3, #285	; 0x11d
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000451e:	2702      	movs	r7, #2
  hltdc.Init.TotalHeigh = 285;
90004520:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004524:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004528:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000452c:	f005 f8ec 	bl	90009708 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
90004530:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004534:	4622      	mov	r2, r4
90004536:	e017      	b.n	90004568 <main+0x3a4>
90004538:	03000012 	.word	0x03000012
9000453c:	01010001 	.word	0x01010001
90004540:	e000ed00 	.word	0xe000ed00
90004544:	58024400 	.word	0x58024400
90004548:	58020400 	.word	0x58020400
9000454c:	58020c00 	.word	0x58020c00
90004550:	58021000 	.word	0x58021000
90004554:	58021800 	.word	0x58021800
90004558:	58022800 	.word	0x58022800
9000455c:	58020000 	.word	0x58020000
90004560:	2400af04 	.word	0x2400af04
90004564:	50001000 	.word	0x50001000
90004568:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
9000456a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000456c:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
9000456e:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
90004570:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
90004574:	4d4a      	ldr	r5, [pc, #296]	; (900046a0 <main+0x4dc>)
  pLayerCfg.WindowY1 = 272;
90004576:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
90004578:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
9000457a:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000457c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  pLayerCfg.Alpha = 255;
90004580:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004582:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowX0 = 0;
90004586:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004588:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.WindowY0 = 0;
9000458a:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Alpha0 = 0;
9000458c:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
9000458e:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90004590:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
90004594:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004598:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000459a:	f005 f989 	bl	900098b0 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
9000459e:	4b41      	ldr	r3, [pc, #260]	; (900046a4 <main+0x4e0>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900045a0:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
900045a2:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
900045a4:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
900045a6:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
900045a8:	e9c5 4711 	strd	r4, r7, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900045ac:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900045b0:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900045b4:	e9c5 4701 	strd	r4, r7, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900045b8:	f002 fd38 	bl	9000702c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900045bc:	4631      	mov	r1, r6
900045be:	4628      	mov	r0, r5
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900045c0:	2510      	movs	r5, #16
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900045c2:	f002 fe0b 	bl	900071dc <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
900045c6:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900045c8:	4837      	ldr	r0, [pc, #220]	; (900046a8 <main+0x4e4>)
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900045ca:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
900045cc:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
900045ce:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900045d0:	4b36      	ldr	r3, [pc, #216]	; (900046ac <main+0x4e8>)
  SdramTiming.WriteRecoveryTime = 5;
900045d2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900045d6:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900045da:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900045dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900045e0:	6105      	str	r5, [r0, #16]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900045e2:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900045e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SdramTiming.LoadToActiveDelay = 2;
900045e8:	970b      	str	r7, [sp, #44]	; 0x2c
  SdramTiming.SelfRefreshTime = 4;
900045ea:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
900045ee:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900045f2:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900045f6:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900045f8:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900045fa:	e9c0 a308 	strd	sl, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
900045fe:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
90004602:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004606:	f007 f977 	bl	9000b8f8 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
9000460a:	4620      	mov	r0, r4
9000460c:	f002 f910 	bl	90006830 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90004610:	4620      	mov	r0, r4
90004612:	f002 f957 	bl	900068c4 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90004616:	f7fb fedd 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
9000461a:	4b25      	ldr	r3, [pc, #148]	; (900046b0 <main+0x4ec>)
9000461c:	4825      	ldr	r0, [pc, #148]	; (900046b4 <main+0x4f0>)
9000461e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004620:	f004 f846 	bl	900086b0 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90004624:	4824      	ldr	r0, [pc, #144]	; (900046b8 <main+0x4f4>)
90004626:	4b25      	ldr	r3, [pc, #148]	; (900046bc <main+0x4f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004628:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
9000462a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
9000462c:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
9000462e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90004632:	f002 fc85 	bl	90006f40 <HAL_CRC_Init>
  MX_TouchGFX_Init();
90004636:	f7fb fed1 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
9000463a:	f7fb fecd 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
9000463e:	f007 fc79 	bl	9000bf34 <osKernelInitialize>
  controlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &controlQueue_attributes);
90004642:	4a1f      	ldr	r2, [pc, #124]	; (900046c0 <main+0x4fc>)
90004644:	4639      	mov	r1, r7
90004646:	4628      	mov	r0, r5
90004648:	f007 fe2e 	bl	9000c2a8 <osMessageQueueNew>
9000464c:	4b1d      	ldr	r3, [pc, #116]	; (900046c4 <main+0x500>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000464e:	4a1e      	ldr	r2, [pc, #120]	; (900046c8 <main+0x504>)
90004650:	4621      	mov	r1, r4
  controlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &controlQueue_attributes);
90004652:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004654:	481d      	ldr	r0, [pc, #116]	; (900046cc <main+0x508>)
90004656:	f007 fc99 	bl	9000bf8c <osThreadNew>
9000465a:	4b1d      	ldr	r3, [pc, #116]	; (900046d0 <main+0x50c>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000465c:	4a1d      	ldr	r2, [pc, #116]	; (900046d4 <main+0x510>)
9000465e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004660:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004662:	481d      	ldr	r0, [pc, #116]	; (900046d8 <main+0x514>)
90004664:	f007 fc92 	bl	9000bf8c <osThreadNew>
90004668:	4b1c      	ldr	r3, [pc, #112]	; (900046dc <main+0x518>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000466a:	4a1d      	ldr	r2, [pc, #116]	; (900046e0 <main+0x51c>)
9000466c:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000466e:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004670:	481c      	ldr	r0, [pc, #112]	; (900046e4 <main+0x520>)
90004672:	f007 fc8b 	bl	9000bf8c <osThreadNew>
90004676:	4b1c      	ldr	r3, [pc, #112]	; (900046e8 <main+0x524>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
90004678:	4a1c      	ldr	r2, [pc, #112]	; (900046ec <main+0x528>)
9000467a:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000467c:	6018      	str	r0, [r3, #0]
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000467e:	481c      	ldr	r0, [pc, #112]	; (900046f0 <main+0x52c>)
90004680:	f007 fc84 	bl	9000bf8c <osThreadNew>
90004684:	4b1b      	ldr	r3, [pc, #108]	; (900046f4 <main+0x530>)
90004686:	4605      	mov	r5, r0
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
90004688:	4a1b      	ldr	r2, [pc, #108]	; (900046f8 <main+0x534>)
9000468a:	4621      	mov	r1, r4
9000468c:	481b      	ldr	r0, [pc, #108]	; (900046fc <main+0x538>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000468e:	601d      	str	r5, [r3, #0]
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
90004690:	f007 fc7c 	bl	9000bf8c <osThreadNew>
90004694:	4b1a      	ldr	r3, [pc, #104]	; (90004700 <main+0x53c>)
90004696:	6018      	str	r0, [r3, #0]
  osKernelStart();
90004698:	f007 fc5e 	bl	9000bf58 <osKernelStart>
  while (1)
9000469c:	e7fe      	b.n	9000469c <main+0x4d8>
9000469e:	bf00      	nop
900046a0:	2400ae44 	.word	0x2400ae44
900046a4:	52001000 	.word	0x52001000
900046a8:	2400b084 	.word	0x2400b084
900046ac:	52004140 	.word	0x52004140
900046b0:	52003000 	.word	0x52003000
900046b4:	2400aeac 	.word	0x2400aeac
900046b8:	2400ae20 	.word	0x2400ae20
900046bc:	58024c00 	.word	0x58024c00
900046c0:	90024748 	.word	0x90024748
900046c4:	2400ae14 	.word	0x2400ae14
900046c8:	90024760 	.word	0x90024760
900046cc:	90003fb5 	.word	0x90003fb5
900046d0:	2400ae18 	.word	0x2400ae18
900046d4:	90024700 	.word	0x90024700
900046d8:	900003ed 	.word	0x900003ed
900046dc:	2400ae08 	.word	0x2400ae08
900046e0:	900247a8 	.word	0x900247a8
900046e4:	90002919 	.word	0x90002919
900046e8:	2400b0b8 	.word	0x2400b0b8
900046ec:	90024784 	.word	0x90024784
900046f0:	90003fe1 	.word	0x90003fe1
900046f4:	2400ae1c 	.word	0x2400ae1c
900046f8:	90024724 	.word	0x90024724
900046fc:	90003fc1 	.word	0x90003fc1
90004700:	2400ae10 	.word	0x2400ae10

90004704 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90004704:	4b03      	ldr	r3, [pc, #12]	; (90004714 <HAL_TIM_PeriodElapsedCallback+0x10>)
90004706:	6802      	ldr	r2, [r0, #0]
90004708:	429a      	cmp	r2, r3
9000470a:	d000      	beq.n	9000470e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
9000470c:	4770      	bx	lr
    HAL_IncTick();
9000470e:	f002 bb2d 	b.w	90006d6c <HAL_IncTick>
90004712:	bf00      	nop
90004714:	40001000 	.word	0x40001000

90004718 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004718:	4770      	bx	lr
9000471a:	bf00      	nop

9000471c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000471c:	4b0b      	ldr	r3, [pc, #44]	; (9000474c <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
9000471e:	2200      	movs	r2, #0
90004720:	210f      	movs	r1, #15
90004722:	f06f 0001 	mvn.w	r0, #1
{
90004726:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004728:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
9000472c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000472e:	f044 0402 	orr.w	r4, r4, #2
90004732:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
90004736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000473a:	f003 0302 	and.w	r3, r3, #2
9000473e:	9301      	str	r3, [sp, #4]
90004740:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90004742:	b003      	add	sp, #12
90004744:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004748:	f002 bb4c 	b.w	90006de4 <HAL_NVIC_SetPriority>
9000474c:	58024400 	.word	0x58024400

90004750 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90004750:	4b0a      	ldr	r3, [pc, #40]	; (9000477c <HAL_CRC_MspInit+0x2c>)
90004752:	6802      	ldr	r2, [r0, #0]
90004754:	429a      	cmp	r2, r3
90004756:	d000      	beq.n	9000475a <HAL_CRC_MspInit+0xa>
90004758:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
9000475a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
9000475e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90004760:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004764:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004768:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004774:	9301      	str	r3, [sp, #4]
90004776:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004778:	b002      	add	sp, #8
9000477a:	4770      	bx	lr
9000477c:	58024c00 	.word	0x58024c00

90004780 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004780:	4b0f      	ldr	r3, [pc, #60]	; (900047c0 <HAL_DMA2D_MspInit+0x40>)
90004782:	6802      	ldr	r2, [r0, #0]
90004784:	429a      	cmp	r2, r3
90004786:	d000      	beq.n	9000478a <HAL_DMA2D_MspInit+0xa>
90004788:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000478a:	4b0e      	ldr	r3, [pc, #56]	; (900047c4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
9000478c:	205a      	movs	r0, #90	; 0x5a
9000478e:	2200      	movs	r2, #0
90004790:	2105      	movs	r1, #5
{
90004792:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004794:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
90004798:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000479a:	f044 0410 	orr.w	r4, r4, #16
9000479e:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
900047a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
900047a6:	f003 0310 	and.w	r3, r3, #16
900047aa:	9301      	str	r3, [sp, #4]
900047ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900047ae:	f002 fb19 	bl	90006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900047b2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900047b4:	b002      	add	sp, #8
900047b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900047ba:	f002 bb51 	b.w	90006e60 <HAL_NVIC_EnableIRQ>
900047be:	bf00      	nop
900047c0:	52001000 	.word	0x52001000
900047c4:	58024400 	.word	0x58024400

900047c8 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900047c8:	4b3f      	ldr	r3, [pc, #252]	; (900048c8 <HAL_JPEG_MspInit+0x100>)
900047ca:	6802      	ldr	r2, [r0, #0]
900047cc:	429a      	cmp	r2, r3
900047ce:	d000      	beq.n	900047d2 <HAL_JPEG_MspInit+0xa>
900047d0:	4770      	bx	lr
{
900047d2:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900047d4:	4b3d      	ldr	r3, [pc, #244]	; (900048cc <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047d6:	2211      	movs	r2, #17
900047d8:	4e3d      	ldr	r6, [pc, #244]	; (900048d0 <HAL_JPEG_MspInit+0x108>)
{
900047da:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900047dc:	4d3d      	ldr	r5, [pc, #244]	; (900048d4 <HAL_JPEG_MspInit+0x10c>)
900047de:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047e0:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900047e2:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
900047e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900047e8:	493b      	ldr	r1, [pc, #236]	; (900048d8 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
900047ea:	f042 0220 	orr.w	r2, r2, #32
900047ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900047f2:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
900047f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900047f8:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
900047fa:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900047fe:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004800:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004802:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90004804:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90004806:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004808:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000480c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90004810:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004812:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90004814:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004818:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000481c:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
9000481e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
90004822:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90004826:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000482a:	2313      	movs	r3, #19
9000482c:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
9000482e:	2302      	movs	r3, #2
90004830:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90004832:	f005 f931 	bl	90009a98 <HAL_MDMA_Init>
90004836:	2800      	cmp	r0, #0
90004838:	d13a      	bne.n	900048b0 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
9000483a:	2200      	movs	r2, #0
9000483c:	4824      	ldr	r0, [pc, #144]	; (900048d0 <HAL_JPEG_MspInit+0x108>)
9000483e:	4611      	mov	r1, r2
90004840:	f005 f9c8 	bl	90009bd4 <HAL_MDMA_ConfigPostRequestMask>
90004844:	2800      	cmp	r0, #0
90004846:	d13c      	bne.n	900048c2 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004848:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000484a:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
9000484c:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000484e:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004850:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90004852:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004854:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004858:	4920      	ldr	r1, [pc, #128]	; (900048dc <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000485a:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
9000485c:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
9000485e:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004860:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004862:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004866:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000486a:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
9000486c:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000486e:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004872:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004874:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
9000487c:	4815      	ldr	r0, [pc, #84]	; (900048d4 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
9000487e:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004880:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004882:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004884:	f005 f908 	bl	90009a98 <HAL_MDMA_Init>
90004888:	b9c0      	cbnz	r0, 900048bc <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
9000488a:	2200      	movs	r2, #0
9000488c:	4811      	ldr	r0, [pc, #68]	; (900048d4 <HAL_JPEG_MspInit+0x10c>)
9000488e:	4611      	mov	r1, r2
90004890:	f005 f9a0 	bl	90009bd4 <HAL_MDMA_ConfigPostRequestMask>
90004894:	b978      	cbnz	r0, 900048b6 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004896:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004898:	2079      	movs	r0, #121	; 0x79
9000489a:	2200      	movs	r2, #0
9000489c:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000489e:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900048a0:	f002 faa0 	bl	90006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900048a4:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
900048a6:	b002      	add	sp, #8
900048a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900048ac:	f002 bad8 	b.w	90006e60 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900048b0:	f7ff ff32 	bl	90004718 <Error_Handler>
900048b4:	e7c1      	b.n	9000483a <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900048b6:	f7ff ff2f 	bl	90004718 <Error_Handler>
900048ba:	e7ec      	b.n	90004896 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900048bc:	f7ff ff2c 	bl	90004718 <Error_Handler>
900048c0:	e7e3      	b.n	9000488a <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900048c2:	f7ff ff29 	bl	90004718 <Error_Handler>
900048c6:	e7bf      	b.n	90004848 <HAL_JPEG_MspInit+0x80>
900048c8:	52003000 	.word	0x52003000
900048cc:	58024400 	.word	0x58024400
900048d0:	2400afac 	.word	0x2400afac
900048d4:	2400b018 	.word	0x2400b018
900048d8:	52000200 	.word	0x52000200
900048dc:	520001c0 	.word	0x520001c0

900048e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900048e0:	b570      	push	{r4, r5, r6, lr}
900048e2:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900048e4:	2100      	movs	r1, #0
{
900048e6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900048e8:	22c0      	movs	r2, #192	; 0xc0
900048ea:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900048ec:	9109      	str	r1, [sp, #36]	; 0x24
900048ee:	e9cd 1105 	strd	r1, r1, [sp, #20]
900048f2:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900048f6:	f01d facd 	bl	90021e94 <memset>
  if(hltdc->Instance==LTDC)
900048fa:	4b4a      	ldr	r3, [pc, #296]	; (90004a24 <HAL_LTDC_MspInit+0x144>)
900048fc:	6822      	ldr	r2, [r4, #0]
900048fe:	429a      	cmp	r2, r3
90004900:	d001      	beq.n	90004906 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004902:	b03a      	add	sp, #232	; 0xe8
90004904:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004906:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004908:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000490a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
9000490e:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004910:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004912:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004914:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004916:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90004918:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
9000491a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000491e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004920:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004922:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004926:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000492a:	f006 f9e5 	bl	9000acf8 <HAL_RCCEx_PeriphCLKConfig>
9000492e:	2800      	cmp	r0, #0
90004930:	d174      	bne.n	90004a1c <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004932:	4b3d      	ldr	r3, [pc, #244]	; (90004a28 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004934:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004936:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004938:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
9000493a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
9000493e:	a905      	add	r1, sp, #20
90004940:	483a      	ldr	r0, [pc, #232]	; (90004a2c <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004942:	f042 0208 	orr.w	r2, r2, #8
90004946:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
9000494a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
9000494e:	f002 0208 	and.w	r2, r2, #8
90004952:	9200      	str	r2, [sp, #0]
90004954:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004956:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000495a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000495e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004962:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004966:	f402 6280 	and.w	r2, r2, #1024	; 0x400
9000496a:	9201      	str	r2, [sp, #4]
9000496c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
9000496e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004976:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000497a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000497e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004982:	9202      	str	r2, [sp, #8]
90004984:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004986:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
9000498e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004992:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004996:	f402 7200 	and.w	r2, r2, #512	; 0x200
9000499a:	9203      	str	r2, [sp, #12]
9000499c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000499e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900049a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900049a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900049aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900049ae:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049b4:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900049b8:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049ba:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900049bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049be:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900049c2:	f002 fc7b 	bl	900072bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049c6:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049ca:	a905      	add	r1, sp, #20
900049cc:	4818      	ldr	r0, [pc, #96]	; (90004a30 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049d4:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049d8:	f002 fc70 	bl	900072bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900049dc:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900049e0:	a905      	add	r1, sp, #20
900049e2:	4814      	ldr	r0, [pc, #80]	; (90004a34 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900049e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049ea:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900049ee:	f002 fc65 	bl	900072bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900049f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900049f6:	a905      	add	r1, sp, #20
900049f8:	480f      	ldr	r0, [pc, #60]	; (90004a38 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049fa:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900049fc:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004a00:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004a04:	f002 fc5a 	bl	900072bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004a08:	462a      	mov	r2, r5
90004a0a:	2105      	movs	r1, #5
90004a0c:	2058      	movs	r0, #88	; 0x58
90004a0e:	f002 f9e9 	bl	90006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004a12:	2058      	movs	r0, #88	; 0x58
90004a14:	f002 fa24 	bl	90006e60 <HAL_NVIC_EnableIRQ>
}
90004a18:	b03a      	add	sp, #232	; 0xe8
90004a1a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004a1c:	f7ff fe7c 	bl	90004718 <Error_Handler>
90004a20:	e787      	b.n	90004932 <HAL_LTDC_MspInit+0x52>
90004a22:	bf00      	nop
90004a24:	50001000 	.word	0x50001000
90004a28:	58024400 	.word	0x58024400
90004a2c:	58022800 	.word	0x58022800
90004a30:	58022000 	.word	0x58022000
90004a34:	58022400 	.word	0x58022400
90004a38:	58021c00 	.word	0x58021c00

90004a3c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004a3c:	4836      	ldr	r0, [pc, #216]	; (90004b18 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a3e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a40:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004a42:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a44:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004a4a:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004a4e:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004a50:	b109      	cbz	r1, 90004a56 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004a52:	b038      	add	sp, #224	; 0xe0
90004a54:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004a56:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a58:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004a5a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a5c:	a80a      	add	r0, sp, #40	; 0x28
90004a5e:	f01d fa19 	bl	90021e94 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004a66:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a68:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a6e:	f006 f943 	bl	9000acf8 <HAL_RCCEx_PeriphCLKConfig>
90004a72:	2800      	cmp	r0, #0
90004a74:	d14c      	bne.n	90004b10 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004a76:	4b29      	ldr	r3, [pc, #164]	; (90004b1c <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a78:	f64f 7083 	movw	r0, #65411	; 0xff83
90004a7c:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a7e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004a80:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a84:	2600      	movs	r6, #0
90004a86:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004a8c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004a90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a94:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a9e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004aa0:	a902      	add	r1, sp, #8
90004aa2:	481f      	ldr	r0, [pc, #124]	; (90004b20 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004aa4:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004aa6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004aaa:	f002 fc07 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004aae:	f248 1233 	movw	r2, #33075	; 0x8133
90004ab2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004ab4:	a902      	add	r1, sp, #8
90004ab6:	481b      	ldr	r0, [pc, #108]	; (90004b24 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ab8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004aba:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004abe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004ac2:	f002 fbfb 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ac6:	f24c 7203 	movw	r2, #50947	; 0xc703
90004aca:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004acc:	a902      	add	r1, sp, #8
90004ace:	4816      	ldr	r0, [pc, #88]	; (90004b28 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ad0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004ad6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004ada:	f002 fbef 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004ade:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004ae2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004ae4:	a902      	add	r1, sp, #8
90004ae6:	4811      	ldr	r0, [pc, #68]	; (90004b2c <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ae8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004aea:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004aee:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004af2:	f002 fbe3 	bl	900072bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004af6:	22e0      	movs	r2, #224	; 0xe0
90004af8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004afa:	a902      	add	r1, sp, #8
90004afc:	480c      	ldr	r0, [pc, #48]	; (90004b30 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004afe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004b00:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004b04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b08:	f002 fbd8 	bl	900072bc <HAL_GPIO_Init>
}
90004b0c:	b038      	add	sp, #224	; 0xe0
90004b0e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004b10:	f7ff fe02 	bl	90004718 <Error_Handler>
90004b14:	e7af      	b.n	90004a76 <HAL_SDRAM_MspInit+0x3a>
90004b16:	bf00      	nop
90004b18:	2400b0c0 	.word	0x2400b0c0
90004b1c:	58024400 	.word	0x58024400
90004b20:	58021000 	.word	0x58021000
90004b24:	58021800 	.word	0x58021800
90004b28:	58020c00 	.word	0x58020c00
90004b2c:	58021400 	.word	0x58021400
90004b30:	58021c00 	.word	0x58021c00

90004b34 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004b34:	4b13      	ldr	r3, [pc, #76]	; (90004b84 <HAL_SDRAM_MspDeInit+0x50>)
90004b36:	681a      	ldr	r2, [r3, #0]
90004b38:	b102      	cbz	r2, 90004b3c <HAL_SDRAM_MspDeInit+0x8>
90004b3a:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004b3c:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004b3e:	4a12      	ldr	r2, [pc, #72]	; (90004b88 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004b40:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b42:	f64f 7183 	movw	r1, #65411	; 0xff83
90004b46:	4811      	ldr	r0, [pc, #68]	; (90004b8c <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004b48:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004b4a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004b52:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b56:	f002 fce3 	bl	90007520 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004b5a:	f248 1133 	movw	r1, #33075	; 0x8133
90004b5e:	480c      	ldr	r0, [pc, #48]	; (90004b90 <HAL_SDRAM_MspDeInit+0x5c>)
90004b60:	f002 fcde 	bl	90007520 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004b64:	f24c 7103 	movw	r1, #50947	; 0xc703
90004b68:	480a      	ldr	r0, [pc, #40]	; (90004b94 <HAL_SDRAM_MspDeInit+0x60>)
90004b6a:	f002 fcd9 	bl	90007520 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004b6e:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004b72:	4809      	ldr	r0, [pc, #36]	; (90004b98 <HAL_SDRAM_MspDeInit+0x64>)
90004b74:	f002 fcd4 	bl	90007520 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b78:	21e0      	movs	r1, #224	; 0xe0
90004b7a:	4808      	ldr	r0, [pc, #32]	; (90004b9c <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b80:	f002 bcce 	b.w	90007520 <HAL_GPIO_DeInit>
90004b84:	2400b0bc 	.word	0x2400b0bc
90004b88:	58024400 	.word	0x58024400
90004b8c:	58021000 	.word	0x58021000
90004b90:	58021800 	.word	0x58021800
90004b94:	58020c00 	.word	0x58020c00
90004b98:	58021400 	.word	0x58021400
90004b9c:	58021c00 	.word	0x58021c00

90004ba0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004ba0:	280f      	cmp	r0, #15
90004ba2:	d901      	bls.n	90004ba8 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004ba4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004ba6:	4770      	bx	lr
{
90004ba8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004baa:	4601      	mov	r1, r0
{
90004bac:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004bae:	2200      	movs	r2, #0
90004bb0:	4604      	mov	r4, r0
90004bb2:	2036      	movs	r0, #54	; 0x36
90004bb4:	f002 f916 	bl	90006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004bb8:	2036      	movs	r0, #54	; 0x36
90004bba:	f002 f951 	bl	90006e60 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004bbe:	4b1a      	ldr	r3, [pc, #104]	; (90004c28 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004bc0:	4a1a      	ldr	r2, [pc, #104]	; (90004c2c <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004bc2:	4669      	mov	r1, sp
90004bc4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004bc6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004bc8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004bcc:	f042 0210 	orr.w	r2, r2, #16
90004bd0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004bd8:	f003 0310 	and.w	r3, r3, #16
90004bdc:	9301      	str	r3, [sp, #4]
90004bde:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004be0:	f005 ff6a 	bl	9000aab8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004be4:	9b07      	ldr	r3, [sp, #28]
90004be6:	b9bb      	cbnz	r3, 90004c18 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004be8:	f005 fed6 	bl	9000a998 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004bec:	4b10      	ldr	r3, [pc, #64]	; (90004c30 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004bee:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004bf0:	4c10      	ldr	r4, [pc, #64]	; (90004c34 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004bf2:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004bf6:	4d10      	ldr	r5, [pc, #64]	; (90004c38 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004bf8:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004bfc:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004bfe:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004c00:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004c02:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004c04:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004c06:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004c0a:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004c0c:	f006 fee6 	bl	9000b9dc <HAL_TIM_Base_Init>
90004c10:	b130      	cbz	r0, 90004c20 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004c12:	2001      	movs	r0, #1
}
90004c14:	b00b      	add	sp, #44	; 0x2c
90004c16:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004c18:	f005 febe 	bl	9000a998 <HAL_RCC_GetPCLK1Freq>
90004c1c:	0040      	lsls	r0, r0, #1
90004c1e:	e7e5      	b.n	90004bec <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004c20:	4620      	mov	r0, r4
90004c22:	f006 ff91 	bl	9000bb48 <HAL_TIM_Base_Start_IT>
90004c26:	e7f5      	b.n	90004c14 <HAL_InitTick+0x74>
90004c28:	58024400 	.word	0x58024400
90004c2c:	24000060 	.word	0x24000060
90004c30:	431bde83 	.word	0x431bde83
90004c34:	2400b0c4 	.word	0x2400b0c4
90004c38:	40001000 	.word	0x40001000

90004c3c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004c3c:	4770      	bx	lr
90004c3e:	bf00      	nop

90004c40 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004c40:	e7fe      	b.n	90004c40 <HardFault_Handler>
90004c42:	bf00      	nop

90004c44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004c44:	e7fe      	b.n	90004c44 <MemManage_Handler>
90004c46:	bf00      	nop

90004c48 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004c48:	e7fe      	b.n	90004c48 <BusFault_Handler>
90004c4a:	bf00      	nop

90004c4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004c4c:	e7fe      	b.n	90004c4c <UsageFault_Handler>
90004c4e:	bf00      	nop

90004c50 <DebugMon_Handler>:
90004c50:	4770      	bx	lr
90004c52:	bf00      	nop

90004c54 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004c54:	4801      	ldr	r0, [pc, #4]	; (90004c5c <TIM6_DAC_IRQHandler+0x8>)
90004c56:	f006 bfdb 	b.w	9000bc10 <HAL_TIM_IRQHandler>
90004c5a:	bf00      	nop
90004c5c:	2400b0c4 	.word	0x2400b0c4

90004c60 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004c60:	4801      	ldr	r0, [pc, #4]	; (90004c68 <LTDC_IRQHandler+0x8>)
90004c62:	f004 bdc3 	b.w	900097ec <HAL_LTDC_IRQHandler>
90004c66:	bf00      	nop
90004c68:	2400af04 	.word	0x2400af04

90004c6c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004c6c:	4801      	ldr	r0, [pc, #4]	; (90004c74 <DMA2D_IRQHandler+0x8>)
90004c6e:	f002 ba21 	b.w	900070b4 <HAL_DMA2D_IRQHandler>
90004c72:	bf00      	nop
90004c74:	2400ae44 	.word	0x2400ae44

90004c78 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004c78:	4801      	ldr	r0, [pc, #4]	; (90004c80 <JPEG_IRQHandler+0x8>)
90004c7a:	f004 bca3 	b.w	900095c4 <HAL_JPEG_IRQHandler>
90004c7e:	bf00      	nop
90004c80:	2400aeac 	.word	0x2400aeac

90004c84 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c84:	4804      	ldr	r0, [pc, #16]	; (90004c98 <MDMA_IRQHandler+0x14>)
{
90004c86:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c88:	f005 f864 	bl	90009d54 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c8c:	4803      	ldr	r0, [pc, #12]	; (90004c9c <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c92:	f005 b85f 	b.w	90009d54 <HAL_MDMA_IRQHandler>
90004c96:	bf00      	nop
90004c98:	2400b018 	.word	0x2400b018
90004c9c:	2400afac 	.word	0x2400afac

90004ca0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004ca0:	2001      	movs	r0, #1
90004ca2:	4770      	bx	lr

90004ca4 <_kill>:

int _kill(int pid, int sig)
{
90004ca4:	b508      	push	{r3, lr}
	errno = EINVAL;
90004ca6:	f01d f9a9 	bl	90021ffc <__errno>
90004caa:	2216      	movs	r2, #22
90004cac:	4603      	mov	r3, r0
	return -1;
}
90004cae:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004cb2:	601a      	str	r2, [r3, #0]
}
90004cb4:	bd08      	pop	{r3, pc}
90004cb6:	bf00      	nop

90004cb8 <_exit>:

void _exit (int status)
{
90004cb8:	b508      	push	{r3, lr}
	errno = EINVAL;
90004cba:	f01d f99f 	bl	90021ffc <__errno>
90004cbe:	2316      	movs	r3, #22
90004cc0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004cc2:	e7fe      	b.n	90004cc2 <_exit+0xa>

90004cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004cc4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cc6:	1e16      	subs	r6, r2, #0
90004cc8:	dd07      	ble.n	90004cda <_read+0x16>
90004cca:	460c      	mov	r4, r1
90004ccc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004cce:	f3af 8000 	nop.w
90004cd2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cd6:	42a5      	cmp	r5, r4
90004cd8:	d1f9      	bne.n	90004cce <_read+0xa>
	}

return len;
}
90004cda:	4630      	mov	r0, r6
90004cdc:	bd70      	pop	{r4, r5, r6, pc}
90004cde:	bf00      	nop

90004ce0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004ce0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004ce2:	1e16      	subs	r6, r2, #0
90004ce4:	dd07      	ble.n	90004cf6 <_write+0x16>
90004ce6:	460c      	mov	r4, r1
90004ce8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004cea:	f814 0b01 	ldrb.w	r0, [r4], #1
90004cee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cf2:	42ac      	cmp	r4, r5
90004cf4:	d1f9      	bne.n	90004cea <_write+0xa>
	}
	return len;
}
90004cf6:	4630      	mov	r0, r6
90004cf8:	bd70      	pop	{r4, r5, r6, pc}
90004cfa:	bf00      	nop

90004cfc <_close>:

int _close(int file)
{
	return -1;
}
90004cfc:	f04f 30ff 	mov.w	r0, #4294967295
90004d00:	4770      	bx	lr
90004d02:	bf00      	nop

90004d04 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004d08:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004d0a:	604b      	str	r3, [r1, #4]
}
90004d0c:	4770      	bx	lr
90004d0e:	bf00      	nop

90004d10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004d10:	2001      	movs	r0, #1
90004d12:	4770      	bx	lr

90004d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004d14:	2000      	movs	r0, #0
90004d16:	4770      	bx	lr

90004d18 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004d18:	4a0a      	ldr	r2, [pc, #40]	; (90004d44 <_sbrk+0x2c>)
{
90004d1a:	b508      	push	{r3, lr}
90004d1c:	4603      	mov	r3, r0
	if (heap_end == 0)
90004d1e:	6810      	ldr	r0, [r2, #0]
90004d20:	b128      	cbz	r0, 90004d2e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004d22:	4403      	add	r3, r0
90004d24:	4669      	mov	r1, sp
90004d26:	428b      	cmp	r3, r1
90004d28:	d805      	bhi.n	90004d36 <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004d2a:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004d2c:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004d2e:	4906      	ldr	r1, [pc, #24]	; (90004d48 <_sbrk+0x30>)
90004d30:	4608      	mov	r0, r1
90004d32:	6011      	str	r1, [r2, #0]
90004d34:	e7f5      	b.n	90004d22 <_sbrk+0xa>
		errno = ENOMEM;
90004d36:	f01d f961 	bl	90021ffc <__errno>
90004d3a:	220c      	movs	r2, #12
90004d3c:	4603      	mov	r3, r0
		return NULL;
90004d3e:	2000      	movs	r0, #0
		errno = ENOMEM;
90004d40:	601a      	str	r2, [r3, #0]
}
90004d42:	bd08      	pop	{r3, pc}
90004d44:	2400b110 	.word	0x2400b110
90004d48:	240265f0 	.word	0x240265f0

90004d4c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004d4c:	4770      	bx	lr
90004d4e:	bf00      	nop

90004d50 <_ZN23ApplicationFontProviderD0Ev>:
90004d50:	b510      	push	{r4, lr}
90004d52:	4604      	mov	r4, r0
90004d54:	2104      	movs	r1, #4
90004d56:	f01c fdd4 	bl	90021902 <_ZdlPvj>
90004d5a:	4620      	mov	r0, r4
90004d5c:	bd10      	pop	{r4, pc}
90004d5e:	bf00      	nop

90004d60 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004d60:	2901      	cmp	r1, #1
{
90004d62:	b508      	push	{r3, lr}
    switch (typography)
90004d64:	d004      	beq.n	90004d70 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004d66:	2902      	cmp	r1, #2
90004d68:	d00a      	beq.n	90004d80 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004d6a:	b129      	cbz	r1, 90004d78 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004d6c:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004d6e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004d70:	f000 fdf4 	bl	9000595c <_ZN17TypedTextDatabase8getFontsEv>
90004d74:	6840      	ldr	r0, [r0, #4]
}
90004d76:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004d78:	f000 fdf0 	bl	9000595c <_ZN17TypedTextDatabase8getFontsEv>
90004d7c:	6800      	ldr	r0, [r0, #0]
}
90004d7e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004d80:	f000 fdec 	bl	9000595c <_ZN17TypedTextDatabase8getFontsEv>
90004d84:	6880      	ldr	r0, [r0, #8]
}
90004d86:	bd08      	pop	{r3, pc}

90004d88 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004d88:	4800      	ldr	r0, [pc, #0]	; (90004d8c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004d8a:	4770      	bx	lr
90004d8c:	900247e0 	.word	0x900247e0

90004d90 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004d90:	2001      	movs	r0, #1
90004d92:	4770      	bx	lr

90004d94 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004d94:	b169      	cbz	r1, 90004db2 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d96:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004d98:	b530      	push	{r4, r5, lr}
90004d9a:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004d9c:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d9e:	6895      	ldr	r5, [r2, #8]
90004da0:	f10d 0303 	add.w	r3, sp, #3
90004da4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004da6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004da8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004dac:	47a8      	blx	r5
        return glyph;
    }
90004dae:	b003      	add	sp, #12
90004db0:	bd30      	pop	{r4, r5, pc}
            return 0;
90004db2:	4608      	mov	r0, r1
    }
90004db4:	4770      	bx	lr
90004db6:	bf00      	nop

90004db8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004db8:	89c0      	ldrh	r0, [r0, #14]
90004dba:	4770      	bx	lr

90004dbc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004dbc:	8a00      	ldrh	r0, [r0, #16]
90004dbe:	4770      	bx	lr

90004dc0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004dc0:	88c0      	ldrh	r0, [r0, #6]
90004dc2:	4770      	bx	lr

90004dc4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004dc4:	8880      	ldrh	r0, [r0, #4]
90004dc6:	4770      	bx	lr

90004dc8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004dc8:	7a80      	ldrb	r0, [r0, #10]
    }
90004dca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004dce:	4770      	bx	lr

90004dd0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004dd0:	7a80      	ldrb	r0, [r0, #10]
    }
90004dd2:	09c0      	lsrs	r0, r0, #7
90004dd4:	4770      	bx	lr
90004dd6:	bf00      	nop

90004dd8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004dd8:	4770      	bx	lr
90004dda:	bf00      	nop

90004ddc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004ddc:	b510      	push	{r4, lr}
90004dde:	4604      	mov	r4, r0
    }
90004de0:	2108      	movs	r1, #8
90004de2:	f01c fd8e 	bl	90021902 <_ZdlPvj>
90004de6:	4620      	mov	r0, r4
90004de8:	bd10      	pop	{r4, pc}
90004dea:	bf00      	nop

90004dec <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004dec:	4770      	bx	lr
90004dee:	bf00      	nop

90004df0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004df0:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004df4:	6808      	ldr	r0, [r1, #0]
90004df6:	6849      	ldr	r1, [r1, #4]
90004df8:	c303      	stmia	r3!, {r0, r1}
    }
90004dfa:	4770      	bx	lr

90004dfc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004dfc:	4770      	bx	lr
90004dfe:	bf00      	nop

90004e00 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004e00:	4770      	bx	lr
90004e02:	bf00      	nop

90004e04 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004e04:	6041      	str	r1, [r0, #4]
    }
90004e06:	4770      	bx	lr

90004e08 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004e08:	4770      	bx	lr
90004e0a:	bf00      	nop

90004e0c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e0c:	4905      	ldr	r1, [pc, #20]	; (90004e24 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004e0e:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004e10:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004e14:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004e18:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004e1c:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004e20:	4770      	bx	lr
90004e22:	bf00      	nop
90004e24:	90004eb1 	.word	0x90004eb1

90004e28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004e28:	2301      	movs	r3, #1
90004e2a:	7203      	strb	r3, [r0, #8]
    }
90004e2c:	4770      	bx	lr
90004e2e:	bf00      	nop

90004e30 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004e30:	4770      	bx	lr
90004e32:	bf00      	nop

90004e34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004e34:	4770      	bx	lr
90004e36:	bf00      	nop

90004e38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004e38:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004e3a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004e3c:	6841      	ldr	r1, [r0, #4]
90004e3e:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004e42:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004e46:	07d2      	lsls	r2, r2, #31
90004e48:	d401      	bmi.n	90004e4e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004e4a:	689b      	ldr	r3, [r3, #8]
90004e4c:	4718      	bx	r3
90004e4e:	f851 200c 	ldr.w	r2, [r1, ip]
90004e52:	689b      	ldr	r3, [r3, #8]
90004e54:	58d3      	ldr	r3, [r2, r3]
90004e56:	4718      	bx	r3

90004e58 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004e58:	6843      	ldr	r3, [r0, #4]
90004e5a:	b13b      	cbz	r3, 90004e6c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004e5c:	6883      	ldr	r3, [r0, #8]
90004e5e:	b10b      	cbz	r3, 90004e64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004e60:	2001      	movs	r0, #1
    }
90004e62:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004e64:	68c0      	ldr	r0, [r0, #12]
90004e66:	f000 0001 	and.w	r0, r0, #1
90004e6a:	4770      	bx	lr
90004e6c:	4618      	mov	r0, r3
90004e6e:	4770      	bx	lr

90004e70 <_ZN8touchgfx12NoTransitionD0Ev>:
90004e70:	b510      	push	{r4, lr}
90004e72:	4604      	mov	r4, r0
90004e74:	210c      	movs	r1, #12
90004e76:	f01c fd44 	bl	90021902 <_ZdlPvj>
90004e7a:	4620      	mov	r0, r4
90004e7c:	bd10      	pop	{r4, pc}
90004e7e:	bf00      	nop

90004e80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e80:	b510      	push	{r4, lr}
90004e82:	4604      	mov	r4, r0
90004e84:	2110      	movs	r1, #16
90004e86:	f01c fd3c 	bl	90021902 <_ZdlPvj>
90004e8a:	4620      	mov	r0, r4
90004e8c:	bd10      	pop	{r4, pc}
90004e8e:	bf00      	nop

90004e90 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004e90:	b510      	push	{r4, lr}
90004e92:	4604      	mov	r4, r0
90004e94:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004e98:	f01c fd33 	bl	90021902 <_ZdlPvj>
90004e9c:	4620      	mov	r0, r4
90004e9e:	bd10      	pop	{r4, pc}

90004ea0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004ea0:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004ea2:	f00d ff33 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
    }
90004ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004eaa:	f00e bb79 	b.w	900135a0 <_ZN8touchgfx11Application10invalidateEv>
90004eae:	bf00      	nop

90004eb0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004eb4:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004eb8:	4607      	mov	r7, r0
90004eba:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004ebc:	68a0      	ldr	r0, [r4, #8]
90004ebe:	6803      	ldr	r3, [r0, #0]
90004ec0:	6a1b      	ldr	r3, [r3, #32]
90004ec2:	4798      	blx	r3
90004ec4:	28eb      	cmp	r0, #235	; 0xeb
90004ec6:	f240 80a8 	bls.w	9000501a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004eca:	6860      	ldr	r0, [r4, #4]
90004ecc:	6803      	ldr	r3, [r0, #0]
90004ece:	6a1b      	ldr	r3, [r3, #32]
90004ed0:	4798      	blx	r3
90004ed2:	280f      	cmp	r0, #15
90004ed4:	f240 809b 	bls.w	9000500e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x15e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004ed8:	68e0      	ldr	r0, [r4, #12]
90004eda:	6803      	ldr	r3, [r0, #0]
90004edc:	6a1b      	ldr	r3, [r3, #32]
90004ede:	4798      	blx	r3
90004ee0:	280b      	cmp	r0, #11
90004ee2:	f240 80a0 	bls.w	90005026 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x176>
    if (*currentTrans)
90004ee6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 90005058 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>
    Application::getInstance()->clearAllTimerWidgets();
90004eea:	f00d ff0f 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004eee:	3004      	adds	r0, #4
90004ef0:	f00d ff31 	bl	90012d56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004ef4:	f8d9 0000 	ldr.w	r0, [r9]
90004ef8:	b130      	cbz	r0, 90004f08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->tearDown();
90004efa:	6803      	ldr	r3, [r0, #0]
90004efc:	494d      	ldr	r1, [pc, #308]	; (90005034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004efe:	68da      	ldr	r2, [r3, #12]
90004f00:	428a      	cmp	r2, r1
90004f02:	d17c      	bne.n	90004ffe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14e>
        (*currentTrans)->~Transition();
90004f04:	681b      	ldr	r3, [r3, #0]
90004f06:	4798      	blx	r3
    if (*currentScreen)
90004f08:	f8df 8150 	ldr.w	r8, [pc, #336]	; 9000505c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
90004f0c:	f8d8 0000 	ldr.w	r0, [r8]
90004f10:	2800      	cmp	r0, #0
90004f12:	d061      	beq.n	90004fd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
        (*currentScreen)->tearDownScreen();
90004f14:	6803      	ldr	r3, [r0, #0]
90004f16:	695b      	ldr	r3, [r3, #20]
90004f18:	4798      	blx	r3
    if (*currentPresenter)
90004f1a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f1e:	2800      	cmp	r0, #0
90004f20:	d055      	beq.n	90004fce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x11e>
        (*currentPresenter)->deactivate();
90004f22:	6803      	ldr	r3, [r0, #0]
90004f24:	685b      	ldr	r3, [r3, #4]
90004f26:	4798      	blx	r3
    if (*currentScreen)
90004f28:	f8d8 0000 	ldr.w	r0, [r8]
90004f2c:	b110      	cbz	r0, 90004f34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->~Screen();
90004f2e:	6803      	ldr	r3, [r0, #0]
90004f30:	681b      	ldr	r3, [r3, #0]
90004f32:	4798      	blx	r3
    if (*currentPresenter)
90004f34:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f38:	b110      	cbz	r0, 90004f40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->~Presenter();
90004f3a:	6803      	ldr	r3, [r0, #0]
90004f3c:	689b      	ldr	r3, [r3, #8]
90004f3e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004f40:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004f42:	2100      	movs	r1, #0
90004f44:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004f46:	468b      	mov	fp, r1
90004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f4a:	4798      	blx	r3
90004f4c:	4b3a      	ldr	r3, [pc, #232]	; (90005038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004f4e:	4605      	mov	r5, r0
90004f50:	f8c0 b004 	str.w	fp, [r0, #4]
90004f54:	f880 b008 	strb.w	fp, [r0, #8]
90004f58:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004f5a:	68a0      	ldr	r0, [r4, #8]
90004f5c:	602b      	str	r3, [r5, #0]
90004f5e:	6803      	ldr	r3, [r0, #0]
90004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f62:	4798      	blx	r3
90004f64:	4606      	mov	r6, r0
90004f66:	f000 fd8d 	bl	90005a84 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004f6a:	6860      	ldr	r0, [r4, #4]
90004f6c:	4659      	mov	r1, fp
90004f6e:	6803      	ldr	r3, [r0, #0]
90004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f72:	4798      	blx	r3
90004f74:	4604      	mov	r4, r0
90004f76:	4631      	mov	r1, r6
90004f78:	f000 fd5a 	bl	90005a30 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004f7c:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004f80:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004f84:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004f88:	b35c      	cbz	r4, 90004fe2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x132>
90004f8a:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004f8c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004f90:	4630      	mov	r0, r6
90004f92:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004f94:	f8c4 a008 	str.w	sl, [r4, #8]
90004f98:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004f9a:	63f4      	str	r4, [r6, #60]	; 0x3c
90004f9c:	4798      	blx	r3
    newPresenter->activate();
90004f9e:	6823      	ldr	r3, [r4, #0]
90004fa0:	4620      	mov	r0, r4
90004fa2:	681b      	ldr	r3, [r3, #0]
90004fa4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004fa6:	4629      	mov	r1, r5
90004fa8:	4630      	mov	r0, r6
90004faa:	f00f fb49 	bl	90014640 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004fae:	682b      	ldr	r3, [r5, #0]
90004fb0:	4922      	ldr	r1, [pc, #136]	; (9000503c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004fb2:	691a      	ldr	r2, [r3, #16]
90004fb4:	428a      	cmp	r2, r1
90004fb6:	d116      	bne.n	90004fe6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
    newTransition->invalidate();
90004fb8:	695b      	ldr	r3, [r3, #20]
90004fba:	4a21      	ldr	r2, [pc, #132]	; (90005040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004fbc:	4293      	cmp	r3, r2
90004fbe:	d119      	bne.n	90004ff4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
        Application::getInstance()->invalidate();
90004fc0:	f00d fea4 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
}
90004fc4:	b001      	add	sp, #4
90004fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004fca:	f00e bae9 	b.w	900135a0 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90004fce:	f8d8 0000 	ldr.w	r0, [r8]
90004fd2:	2800      	cmp	r0, #0
90004fd4:	d1ab      	bne.n	90004f2e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
90004fd6:	e7b3      	b.n	90004f40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    if (*currentPresenter)
90004fd8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004fdc:	2800      	cmp	r0, #0
90004fde:	d1a0      	bne.n	90004f22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
90004fe0:	e7ae      	b.n	90004f40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    model->bind(newPresenter);
90004fe2:	4623      	mov	r3, r4
90004fe4:	e7d2      	b.n	90004f8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xdc>
    newTransition->init();
90004fe6:	4628      	mov	r0, r5
90004fe8:	4790      	blx	r2
    newTransition->invalidate();
90004fea:	682b      	ldr	r3, [r5, #0]
90004fec:	4a14      	ldr	r2, [pc, #80]	; (90005040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004fee:	695b      	ldr	r3, [r3, #20]
90004ff0:	4293      	cmp	r3, r2
90004ff2:	d0e5      	beq.n	90004fc0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x110>
90004ff4:	4628      	mov	r0, r5
90004ff6:	b001      	add	sp, #4
90004ff8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004ffc:	4718      	bx	r3
        (*currentTrans)->tearDown();
90004ffe:	4790      	blx	r2
    if (*currentTrans)
90005000:	f8d9 0000 	ldr.w	r0, [r9]
90005004:	2800      	cmp	r0, #0
90005006:	f43f af7f 	beq.w	90004f08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->~Transition();
9000500a:	6803      	ldr	r3, [r0, #0]
9000500c:	e77a      	b.n	90004f04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x54>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000500e:	4b0d      	ldr	r3, [pc, #52]	; (90005044 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90005010:	21a4      	movs	r1, #164	; 0xa4
90005012:	4a0d      	ldr	r2, [pc, #52]	; (90005048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005014:	480d      	ldr	r0, [pc, #52]	; (9000504c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005016:	f01c fca3 	bl	90021960 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
9000501a:	4b0d      	ldr	r3, [pc, #52]	; (90005050 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
9000501c:	21a3      	movs	r1, #163	; 0xa3
9000501e:	4a0a      	ldr	r2, [pc, #40]	; (90005048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005020:	480a      	ldr	r0, [pc, #40]	; (9000504c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005022:	f01c fc9d 	bl	90021960 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005026:	4b0b      	ldr	r3, [pc, #44]	; (90005054 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
90005028:	21a5      	movs	r1, #165	; 0xa5
9000502a:	4a07      	ldr	r2, [pc, #28]	; (90005048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
9000502c:	4807      	ldr	r0, [pc, #28]	; (9000504c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
9000502e:	f01c fc97 	bl	90021960 <__assert_func>
90005032:	bf00      	nop
90005034:	90004dfd 	.word	0x90004dfd
90005038:	90024b94 	.word	0x90024b94
9000503c:	90004e01 	.word	0x90004e01
90005040:	90004ea1 	.word	0x90004ea1
90005044:	900249e0 	.word	0x900249e0
90005048:	90024894 	.word	0x90024894
9000504c:	90024998 	.word	0x90024998
90005050:	90024804 	.word	0x90024804
90005054:	90024a84 	.word	0x90024a84
90005058:	2402624c 	.word	0x2402624c
9000505c:	24026248 	.word	0x24026248

90005060 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005060:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90005064:	b1d3      	cbz	r3, 9000509c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90005066:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90005068:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000506a:	68d1      	ldr	r1, [r2, #12]
9000506c:	4604      	mov	r4, r0
9000506e:	4818      	ldr	r0, [pc, #96]	; (900050d0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005070:	4281      	cmp	r1, r0
90005072:	d118      	bne.n	900050a6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90005074:	6858      	ldr	r0, [r3, #4]
90005076:	b180      	cbz	r0, 9000509a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005078:	6899      	ldr	r1, [r3, #8]
9000507a:	b1e1      	cbz	r1, 900050b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
9000507c:	6892      	ldr	r2, [r2, #8]
9000507e:	4915      	ldr	r1, [pc, #84]	; (900050d4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005080:	428a      	cmp	r2, r1
90005082:	d122      	bne.n	900050ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005084:	68da      	ldr	r2, [r3, #12]
90005086:	6858      	ldr	r0, [r3, #4]
90005088:	eb00 0062 	add.w	r0, r0, r2, asr #1
9000508c:	07d2      	lsls	r2, r2, #31
9000508e:	d406      	bmi.n	9000509e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90005090:	689b      	ldr	r3, [r3, #8]
90005092:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90005094:	2300      	movs	r3, #0
90005096:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
9000509a:	bd70      	pop	{r4, r5, r6, pc}
9000509c:	4770      	bx	lr
9000509e:	6899      	ldr	r1, [r3, #8]
900050a0:	6803      	ldr	r3, [r0, #0]
900050a2:	585b      	ldr	r3, [r3, r1]
900050a4:	e7f5      	b.n	90005092 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900050a6:	4618      	mov	r0, r3
900050a8:	4788      	blx	r1
900050aa:	2800      	cmp	r0, #0
900050ac:	d0f5      	beq.n	9000509a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
900050ae:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900050b2:	681a      	ldr	r2, [r3, #0]
900050b4:	e7e2      	b.n	9000507c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
900050b6:	68dd      	ldr	r5, [r3, #12]
900050b8:	07ee      	lsls	r6, r5, #31
900050ba:	d5ee      	bpl.n	9000509a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900050bc:	6892      	ldr	r2, [r2, #8]
900050be:	4e05      	ldr	r6, [pc, #20]	; (900050d4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900050c0:	42b2      	cmp	r2, r6
900050c2:	d102      	bne.n	900050ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900050c4:	eb00 0065 	add.w	r0, r0, r5, asr #1
900050c8:	e7ea      	b.n	900050a0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900050ca:	4618      	mov	r0, r3
900050cc:	4790      	blx	r2
900050ce:	e7e1      	b.n	90005094 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900050d0:	90004e59 	.word	0x90004e59
900050d4:	90004e39 	.word	0x90004e39

900050d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900050d8:	b570      	push	{r4, r5, r6, lr}
900050da:	4604      	mov	r4, r0
900050dc:	4616      	mov	r6, r2
900050de:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900050e0:	f00d feda 	bl	90012e98 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900050e4:	4a18      	ldr	r2, [pc, #96]	; (90005148 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
900050e6:	2300      	movs	r3, #0
      frontendHeap(heap),
900050e8:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
900050ec:	6014      	str	r4, [r2, #0]
        return instance;
900050ee:	4e17      	ldr	r6, [pc, #92]	; (9000514c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
900050f0:	4a17      	ldr	r2, [pc, #92]	; (90005150 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
900050f2:	6830      	ldr	r0, [r6, #0]
900050f4:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900050f6:	4a17      	ldr	r2, [pc, #92]	; (90005154 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
900050f8:	4917      	ldr	r1, [pc, #92]	; (90005158 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
900050fa:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
900050fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90005102:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
90005106:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000510a:	6802      	ldr	r2, [r0, #0]
9000510c:	6892      	ldr	r2, [r2, #8]
9000510e:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
90005110:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
90005114:	d115      	bne.n	90005142 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
90005116:	f44f 7380 	mov.w	r3, #256	; 0x100
9000511a:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
9000511e:	2000      	movs	r0, #0
90005120:	f000 fbce 	bl	900058c0 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90005124:	6833      	ldr	r3, [r6, #0]
90005126:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9000512a:	b12a      	cbz	r2, 90005138 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
9000512c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000512e:	b118      	cbz	r0, 90005138 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005130:	f015 fce3 	bl	9001aafa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005134:	4620      	mov	r0, r4
90005136:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005138:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
9000513a:	f015 fcde 	bl	9001aafa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000513e:	4620      	mov	r0, r4
90005140:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005142:	4619      	mov	r1, r3
90005144:	4790      	blx	r2
90005146:	e7ea      	b.n	9000511e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005148:	24026258 	.word	0x24026258
9000514c:	2402620c 	.word	0x2402620c
90005150:	90024b48 	.word	0x90024b48
90005154:	90024b30 	.word	0x90024b30
90005158:	90000665 	.word	0x90000665

9000515c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
9000515c:	4905      	ldr	r1, [pc, #20]	; (90005174 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
9000515e:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005160:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005164:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005168:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
9000516c:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005170:	4770      	bx	lr
90005172:	bf00      	nop
90005174:	90004eb1 	.word	0x90004eb1

90005178 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90005178:	6a40      	ldr	r0, [r0, #36]	; 0x24
9000517a:	4770      	bx	lr

9000517c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
9000517c:	6a80      	ldr	r0, [r0, #40]	; 0x28
9000517e:	4770      	bx	lr

90005180 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005180:	4770      	bx	lr
90005182:	bf00      	nop

90005184 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90005184:	888b      	ldrh	r3, [r1, #4]
90005186:	69c0      	ldr	r0, [r0, #28]
90005188:	0adb      	lsrs	r3, r3, #11
9000518a:	680a      	ldr	r2, [r1, #0]
9000518c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005190:	4410      	add	r0, r2
90005192:	4770      	bx	lr

90005194 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90005194:	b1da      	cbz	r2, 900051ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
90005196:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90005198:	7b14      	ldrb	r4, [r2, #12]
9000519a:	b1b4      	cbz	r4, 900051ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
9000519c:	f892 c00d 	ldrb.w	ip, [r2, #13]
900051a0:	f892 e00b 	ldrb.w	lr, [r2, #11]
900051a4:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
900051a8:	6a03      	ldr	r3, [r0, #32]
900051aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
900051ae:	ea4e 0202 	orr.w	r2, lr, r2
900051b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051b6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
900051ba:	881a      	ldrh	r2, [r3, #0]
900051bc:	428a      	cmp	r2, r1
900051be:	d008      	beq.n	900051d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051c0:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
900051c4:	d801      	bhi.n	900051ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051c6:	4283      	cmp	r3, r0
900051c8:	d1f7      	bne.n	900051ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900051ca:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900051cc:	bd10      	pop	{r4, pc}
        return 0;
900051ce:	4610      	mov	r0, r2
}
900051d0:	4770      	bx	lr
            return kerndata->distance;
900051d2:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900051d6:	bd10      	pop	{r4, pc}

900051d8 <_ZN8touchgfx13GeneratedFontD0Ev>:
900051d8:	b510      	push	{r4, lr}
900051da:	4604      	mov	r4, r0
900051dc:	212c      	movs	r1, #44	; 0x2c
900051de:	f01c fb90 	bl	90021902 <_ZdlPvj>
900051e2:	4620      	mov	r0, r4
900051e4:	bd10      	pop	{r4, pc}
900051e6:	bf00      	nop

900051e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051e8:	b530      	push	{r4, r5, lr}
900051ea:	b08b      	sub	sp, #44	; 0x2c
900051ec:	4604      	mov	r4, r0
900051ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
900051f2:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051f4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
900051f8:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051fa:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
900051fe:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005200:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005204:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005206:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
9000520a:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000520c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005210:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005212:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005216:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005218:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
9000521c:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000521e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005222:	9508      	str	r5, [sp, #32]
90005224:	f00e fe64 	bl	90013ef0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005228:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
9000522a:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
9000522c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
9000522e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005230:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005232:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005234:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005236:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005238:	62a3      	str	r3, [r4, #40]	; 0x28
9000523a:	4b02      	ldr	r3, [pc, #8]	; (90005244 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
9000523c:	6023      	str	r3, [r4, #0]
}
9000523e:	b00b      	add	sp, #44	; 0x2c
90005240:	bd30      	pop	{r4, r5, pc}
90005242:	bf00      	nop
90005244:	90024bb8 	.word	0x90024bb8

90005248 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005248:	4770      	bx	lr
9000524a:	bf00      	nop

9000524c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
9000524c:	4770      	bx	lr
9000524e:	bf00      	nop

90005250 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005250:	4770      	bx	lr
90005252:	bf00      	nop

90005254 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005254:	4770      	bx	lr
90005256:	bf00      	nop

90005258 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005258:	b530      	push	{r4, r5, lr}
9000525a:	b085      	sub	sp, #20
9000525c:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
9000525e:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005260:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005262:	466d      	mov	r5, sp
90005264:	4601      	mov	r1, r0
        rect.width = width;
90005266:	8102      	strh	r2, [r0, #8]
90005268:	343c      	adds	r4, #60	; 0x3c
9000526a:	4628      	mov	r0, r5
9000526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005270:	4798      	blx	r3
90005272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
9000527a:	b005      	add	sp, #20
9000527c:	bd30      	pop	{r4, r5, pc}
9000527e:	bf00      	nop

90005280 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005280:	b530      	push	{r4, r5, lr}
90005282:	b085      	sub	sp, #20
90005284:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005286:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005288:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000528a:	466d      	mov	r5, sp
9000528c:	4601      	mov	r1, r0
        rect.height = height;
9000528e:	8142      	strh	r2, [r0, #10]
90005290:	343c      	adds	r4, #60	; 0x3c
90005292:	4628      	mov	r0, r5
90005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005298:	4798      	blx	r3
9000529a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000529e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
900052a2:	b005      	add	sp, #20
900052a4:	bd30      	pop	{r4, r5, pc}
900052a6:	bf00      	nop

900052a8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
900052a8:	2200      	movs	r2, #0
900052aa:	6002      	str	r2, [r0, #0]
900052ac:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900052ae:	4770      	bx	lr

900052b0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900052b0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
900052b4:	4770      	bx	lr
900052b6:	bf00      	nop

900052b8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
900052b8:	2000      	movs	r0, #0
900052ba:	4770      	bx	lr

900052bc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
900052bc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900052c0:	b112      	cbz	r2, 900052c8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
900052c2:	6803      	ldr	r3, [r0, #0]
900052c4:	695b      	ldr	r3, [r3, #20]
900052c6:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
900052c8:	4770      	bx	lr
900052ca:	bf00      	nop

900052cc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900052cc:	2200      	movs	r2, #0
900052ce:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
900052d2:	6082      	str	r2, [r0, #8]
900052d4:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
900052d8:	4770      	bx	lr
900052da:	bf00      	nop

900052dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
900052dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
900052de:	4770      	bx	lr

900052e0 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
900052e0:	4770      	bx	lr
900052e2:	bf00      	nop

900052e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
900052e4:	4770      	bx	lr
900052e6:	bf00      	nop

900052e8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
900052e8:	4770      	bx	lr
900052ea:	bf00      	nop

900052ec <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
900052ec:	b510      	push	{r4, lr}
900052ee:	4604      	mov	r4, r0
900052f0:	214c      	movs	r1, #76	; 0x4c
900052f2:	f01c fb06 	bl	90021902 <_ZdlPvj>
900052f6:	4620      	mov	r0, r4
900052f8:	bd10      	pop	{r4, pc}
900052fa:	bf00      	nop

900052fc <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
900052fc:	b510      	push	{r4, lr}
900052fe:	4604      	mov	r4, r0
}
90005300:	21ec      	movs	r1, #236	; 0xec
90005302:	f01c fafe 	bl	90021902 <_ZdlPvj>
90005306:	4620      	mov	r0, r4
90005308:	bd10      	pop	{r4, pc}
9000530a:	bf00      	nop

9000530c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000530c:	4b1b      	ldr	r3, [pc, #108]	; (9000537c <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000530e:	6802      	ldr	r2, [r0, #0]
90005310:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005312:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005314:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005316:	b323      	cbz	r3, 90005362 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005318:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
9000531a:	4919      	ldr	r1, [pc, #100]	; (90005380 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
9000531c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9000531e:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005320:	8809      	ldrh	r1, [r1, #0]
90005322:	4291      	cmp	r1, r2
90005324:	d923      	bls.n	9000536e <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005326:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9000532a:	4b16      	ldr	r3, [pc, #88]	; (90005384 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
9000532c:	681b      	ldr	r3, [r3, #0]
9000532e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005332:	4a15      	ldr	r2, [pc, #84]	; (90005388 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005334:	6803      	ldr	r3, [r0, #0]
90005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005338:	4293      	cmp	r3, r2
9000533a:	d107      	bne.n	9000534c <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
9000533c:	88c0      	ldrh	r0, [r0, #6]
9000533e:	4b13      	ldr	r3, [pc, #76]	; (9000538c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005340:	1a31      	subs	r1, r6, r0
90005342:	429d      	cmp	r5, r3
90005344:	b209      	sxth	r1, r1
90005346:	d107      	bne.n	90005358 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005348:	80e1      	strh	r1, [r4, #6]
    }
9000534a:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000534c:	4798      	blx	r3
9000534e:	4b0f      	ldr	r3, [pc, #60]	; (9000538c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005350:	1a31      	subs	r1, r6, r0
90005352:	429d      	cmp	r5, r3
90005354:	b209      	sxth	r1, r1
90005356:	d0f7      	beq.n	90005348 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005358:	4620      	mov	r0, r4
9000535a:	462b      	mov	r3, r5
    }
9000535c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005360:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005362:	4b0b      	ldr	r3, [pc, #44]	; (90005390 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005364:	216c      	movs	r1, #108	; 0x6c
90005366:	4a0b      	ldr	r2, [pc, #44]	; (90005394 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005368:	480b      	ldr	r0, [pc, #44]	; (90005398 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
9000536a:	f01c faf9 	bl	90021960 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000536e:	4b0b      	ldr	r3, [pc, #44]	; (9000539c <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005370:	216d      	movs	r1, #109	; 0x6d
90005372:	4a08      	ldr	r2, [pc, #32]	; (90005394 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005374:	4808      	ldr	r0, [pc, #32]	; (90005398 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005376:	f01c faf3 	bl	90021960 <__assert_func>
9000537a:	bf00      	nop
9000537c:	2402625c 	.word	0x2402625c
90005380:	24026260 	.word	0x24026260
90005384:	24026264 	.word	0x24026264
90005388:	90004dc1 	.word	0x90004dc1
9000538c:	900022b9 	.word	0x900022b9
90005390:	90024c10 	.word	0x90024c10
90005394:	90024c54 	.word	0x90024c54
90005398:	90024c90 	.word	0x90024c90
9000539c:	90024cd8 	.word	0x90024cd8

900053a0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
900053a0:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
900053a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900053a6:	4f25      	ldr	r7, [pc, #148]	; (9000543c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
900053a8:	4605      	mov	r5, r0
        setX(x);
900053aa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
900053ac:	4690      	mov	r8, r2
900053ae:	42be      	cmp	r6, r7
900053b0:	d125      	bne.n	900053fe <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
900053b2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
900053b4:	80a9      	strh	r1, [r5, #4]
900053b6:	4922      	ldr	r1, [pc, #136]	; (90005440 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900053b8:	428c      	cmp	r4, r1
900053ba:	d126      	bne.n	9000540a <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053bc:	4921      	ldr	r1, [pc, #132]	; (90005444 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053be:	fa1f f888 	uxth.w	r8, r8
900053c2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
900053c4:	680b      	ldr	r3, [r1, #0]
900053c6:	2b00      	cmp	r3, #0
900053c8:	d032      	beq.n	90005430 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
900053ca:	491f      	ldr	r1, [pc, #124]	; (90005448 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
900053cc:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053ce:	8809      	ldrh	r1, [r1, #0]
900053d0:	4291      	cmp	r1, r2
900053d2:	d927      	bls.n	90005424 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
900053d4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900053d8:	4b1c      	ldr	r3, [pc, #112]	; (9000544c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
900053da:	681b      	ldr	r3, [r3, #0]
900053dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900053e0:	4a1b      	ldr	r2, [pc, #108]	; (90005450 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
900053e2:	6803      	ldr	r3, [r0, #0]
900053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900053e6:	4293      	cmp	r3, r2
900053e8:	d11a      	bne.n	90005420 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
900053ea:	88c0      	ldrh	r0, [r0, #6]
900053ec:	4b19      	ldr	r3, [pc, #100]	; (90005454 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
900053ee:	eba8 0200 	sub.w	r2, r8, r0
900053f2:	429e      	cmp	r6, r3
900053f4:	b211      	sxth	r1, r2
900053f6:	d10e      	bne.n	90005416 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
900053f8:	80e9      	strh	r1, [r5, #6]
    }
900053fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
900053fe:	47b0      	blx	r6
        setBaselineY(baselineY);
90005400:	682b      	ldr	r3, [r5, #0]
90005402:	490f      	ldr	r1, [pc, #60]	; (90005440 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005404:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005406:	428c      	cmp	r4, r1
90005408:	d0d8      	beq.n	900053bc <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
9000540a:	4641      	mov	r1, r8
9000540c:	4628      	mov	r0, r5
9000540e:	4623      	mov	r3, r4
    }
90005410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005414:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005416:	4628      	mov	r0, r5
90005418:	4633      	mov	r3, r6
    }
9000541a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000541e:	4718      	bx	r3
90005420:	4798      	blx	r3
90005422:	e7e3      	b.n	900053ec <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005424:	4b0c      	ldr	r3, [pc, #48]	; (90005458 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005426:	216d      	movs	r1, #109	; 0x6d
90005428:	4a0c      	ldr	r2, [pc, #48]	; (9000545c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
9000542a:	480d      	ldr	r0, [pc, #52]	; (90005460 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
9000542c:	f01c fa98 	bl	90021960 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005430:	4b0c      	ldr	r3, [pc, #48]	; (90005464 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005432:	216c      	movs	r1, #108	; 0x6c
90005434:	4a09      	ldr	r2, [pc, #36]	; (9000545c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005436:	480a      	ldr	r0, [pc, #40]	; (90005460 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005438:	f01c fa92 	bl	90021960 <__assert_func>
9000543c:	900022b5 	.word	0x900022b5
90005440:	9000530d 	.word	0x9000530d
90005444:	2402625c 	.word	0x2402625c
90005448:	24026260 	.word	0x24026260
9000544c:	24026264 	.word	0x24026264
90005450:	90004dc1 	.word	0x90004dc1
90005454:	900022b9 	.word	0x900022b9
90005458:	90024cd8 	.word	0x90024cd8
9000545c:	90024c54 	.word	0x90024c54
90005460:	90024c90 	.word	0x90024c90
90005464:	90024c10 	.word	0x90024c10

90005468 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
90005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000546c:	b086      	sub	sp, #24
9000546e:	4604      	mov	r4, r0
        : presenter(0)
90005470:	f00e ff3a 	bl	900142e8 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005474:	4b5e      	ldr	r3, [pc, #376]	; (900055f0 <_ZN15Screen1ViewBaseC1Ev+0x188>)
90005476:	2500      	movs	r5, #0
90005478:	4a5e      	ldr	r2, [pc, #376]	; (900055f4 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
9000547a:	f64f 76ff 	movw	r6, #65535	; 0xffff
          touchable(false),
9000547e:	f44f 7880 	mov.w	r8, #256	; 0x100
90005482:	f104 076c 	add.w	r7, r4, #108	; 0x6c
90005486:	f04f 09ff 	mov.w	r9, #255	; 0xff
9000548a:	6423      	str	r3, [r4, #64]	; 0x40
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
9000548c:	a904      	add	r1, sp, #16
        : Widget(), bitmap(bmp), alpha(255)
9000548e:	4b5a      	ldr	r3, [pc, #360]	; (900055f8 <_ZN15Screen1ViewBaseC1Ev+0x190>)
        Image::setBitmap(bmp);
90005490:	4638      	mov	r0, r7
90005492:	6022      	str	r2, [r4, #0]
90005494:	f04f 3aff 	mov.w	sl, #4294967295
90005498:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
9000549c:	f884 9066 	strb.w	r9, [r4, #102]	; 0x66
900054a0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
900054a4:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
900054a8:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
900054ac:	66e3      	str	r3, [r4, #108]	; 0x6c
900054ae:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
900054b0:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
900054b2:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
900054b4:	66a5      	str	r5, [r4, #104]	; 0x68
900054b6:	f8ad 6010 	strh.w	r6, [sp, #16]
        : x(0), y(0), width(0), height(0)
900054ba:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
900054be:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
900054c2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
900054c6:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
900054ca:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
          nextSibling(0),
900054ce:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
          cachedAbsX(0),
900054d2:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
900054d6:	f00b feec 	bl	900112b2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : TextAreaWithWildcardBase(), wc1(0)
900054da:	4b48      	ldr	r3, [pc, #288]	; (900055fc <_ZN15Screen1ViewBaseC1Ev+0x194>)
          touchable(false),
900054dc:	f8a4 80bc 	strh.w	r8, [r4, #188]	; 0xbc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
900054e0:	f104 0804 	add.w	r8, r4, #4
        : typedTextId(id)
900054e4:	f8a4 60c4 	strh.w	r6, [r4, #196]	; 0xc4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
900054e8:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900054ec:	f8c4 90ce 	str.w	r9, [r4, #206]	; 0xce
900054f0:	f104 0140 	add.w	r1, r4, #64	; 0x40
900054f4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
900054f8:	4640      	mov	r0, r8
        rect.x = x;
900054fa:	4b41      	ldr	r3, [pc, #260]	; (90005600 <_ZN15Screen1ViewBaseC1Ev+0x198>)
900054fc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 9000562c <_ZN15Screen1ViewBaseC1Ev+0x1c4>
90005500:	64a3      	str	r3, [r4, #72]	; 0x48
90005502:	66a6      	str	r6, [r4, #104]	; 0x68
        : color(col)
90005504:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
90005508:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000550c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
90005510:	f8c4 a0d8 	str.w	sl, [r4, #216]	; 0xd8
90005514:	6465      	str	r5, [r4, #68]	; 0x44
90005516:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
        : x(0), y(0), width(0), height(0)
9000551a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
9000551e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
          nextSibling(0),
90005522:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
          cachedAbsX(0),
90005526:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
9000552a:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
9000552e:	f00a fb5d 	bl	9000fbec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_RAYS_ID));
90005532:	a904      	add	r1, sp, #16
90005534:	4638      	mov	r0, r7
        rect.x = x;
90005536:	6725      	str	r5, [r4, #112]	; 0x70
90005538:	f8ad 5010 	strh.w	r5, [sp, #16]
9000553c:	f00b feb9 	bl	900112b2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90005540:	4639      	mov	r1, r7
90005542:	4640      	mov	r0, r8
90005544:	f00a fb52 	bl	9000fbec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005548:	4a2e      	ldr	r2, [pc, #184]	; (90005604 <_ZN15Screen1ViewBaseC1Ev+0x19c>)
        setX(x);
9000554a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        color = newColor;
9000554e:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    textArea1.setXY(161, 124);
90005552:	f104 0698 	add.w	r6, r4, #152	; 0x98
        boundingArea = calculateBoundingArea();
90005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
9000555a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
9000555e:	4a2a      	ldr	r2, [pc, #168]	; (90005608 <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
        linespace = space;
90005560:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
90005564:	4293      	cmp	r3, r2
90005566:	d12c      	bne.n	900055c2 <_ZN15Screen1ViewBaseC1Ev+0x15a>
        boundingArea = calculateBoundingArea();
90005568:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
9000556c:	e9c4 5a35 	strd	r5, sl, [r4, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005570:	4b26      	ldr	r3, [pc, #152]	; (9000560c <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
90005572:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
90005576:	681b      	ldr	r3, [r3, #0]
90005578:	b3a3      	cbz	r3, 900055e4 <_ZN15Screen1ViewBaseC1Ev+0x17c>
        return typedTextId < numberOfTypedTexts;
9000557a:	4b25      	ldr	r3, [pc, #148]	; (90005610 <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000557c:	881b      	ldrh	r3, [r3, #0]
9000557e:	b35b      	cbz	r3, 900055d8 <_ZN15Screen1ViewBaseC1Ev+0x170>
        return texts->getText(typedTextId);
90005580:	4b24      	ldr	r3, [pc, #144]	; (90005614 <_ZN15Screen1ViewBaseC1Ev+0x1ac>)
90005582:	2100      	movs	r1, #0
90005584:	6818      	ldr	r0, [r3, #0]
90005586:	f000 f9d9 	bl	9000593c <_ZNK8touchgfx5Texts7getTextEt>
9000558a:	4a23      	ldr	r2, [pc, #140]	; (90005618 <_ZN15Screen1ViewBaseC1Ev+0x1b0>)
9000558c:	4603      	mov	r3, r0
9000558e:	2104      	movs	r1, #4
90005590:	4628      	mov	r0, r5
90005592:	f010 fb1b 	bl	90015bcc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
90005596:	4630      	mov	r0, r6
        wc1 = value;
90005598:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
9000559c:	f00b fda2 	bl	900110e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900055a0:	2301      	movs	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
900055a2:	a904      	add	r1, sp, #16
900055a4:	4630      	mov	r0, r6
900055a6:	f8ad 3014 	strh.w	r3, [sp, #20]
900055aa:	f8cd 9010 	str.w	r9, [sp, #16]
900055ae:	f00b fdb9 	bl	90011124 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900055b2:	4640      	mov	r0, r8
900055b4:	4631      	mov	r1, r6
900055b6:	f00a fb19 	bl	9000fbec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900055ba:	4620      	mov	r0, r4
900055bc:	b006      	add	sp, #24
900055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900055c2:	466d      	mov	r5, sp
900055c4:	4631      	mov	r1, r6
900055c6:	4628      	mov	r0, r5
900055c8:	4798      	blx	r3
900055ca:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
900055ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900055d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900055d6:	e7cb      	b.n	90005570 <_ZN15Screen1ViewBaseC1Ev+0x108>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900055d8:	4b10      	ldr	r3, [pc, #64]	; (9000561c <_ZN15Screen1ViewBaseC1Ev+0x1b4>)
900055da:	2161      	movs	r1, #97	; 0x61
900055dc:	4a10      	ldr	r2, [pc, #64]	; (90005620 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
900055de:	4811      	ldr	r0, [pc, #68]	; (90005624 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
900055e0:	f01c f9be 	bl	90021960 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900055e4:	4b10      	ldr	r3, [pc, #64]	; (90005628 <_ZN15Screen1ViewBaseC1Ev+0x1c0>)
900055e6:	2160      	movs	r1, #96	; 0x60
900055e8:	4a0d      	ldr	r2, [pc, #52]	; (90005620 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
900055ea:	480e      	ldr	r0, [pc, #56]	; (90005624 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
900055ec:	f01c f9b8 	bl	90021960 <__assert_func>
900055f0:	90025750 	.word	0x90025750
900055f4:	90024dec 	.word	0x90024dec
900055f8:	900257b8 	.word	0x900257b8
900055fc:	90024d5c 	.word	0x90024d5c
90005600:	011001e0 	.word	0x011001e0
90005604:	007c00a1 	.word	0x007c00a1
90005608:	900052cd 	.word	0x900052cd
9000560c:	2402625c 	.word	0x2402625c
90005610:	24026260 	.word	0x24026260
90005614:	24026268 	.word	0x24026268
90005618:	90024d50 	.word	0x90024d50
9000561c:	90024cd8 	.word	0x90024cd8
90005620:	90024d18 	.word	0x90024d18
90005624:	90024c90 	.word	0x90024c90
90005628:	90024c10 	.word	0x90024c10
9000562c:	900247fc 	.word	0x900247fc

90005630 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005630:	4770      	bx	lr
90005632:	bf00      	nop

90005634 <_Z23getFont_verdana_10_4bppv>:
{
90005634:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005636:	4d18      	ldr	r5, [pc, #96]	; (90005698 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90005638:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000563a:	682c      	ldr	r4, [r5, #0]
9000563c:	f3bf 8f5b 	dmb	ish
90005640:	f014 0401 	ands.w	r4, r4, #1
90005644:	d002      	beq.n	9000564c <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90005646:	4815      	ldr	r0, [pc, #84]	; (9000569c <_Z23getFont_verdana_10_4bppv+0x68>)
90005648:	b00f      	add	sp, #60	; 0x3c
9000564a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000564c:	4628      	mov	r0, r5
9000564e:	f01c f95a 	bl	90021906 <__cxa_guard_acquire>
90005652:	2800      	cmp	r0, #0
90005654:	d0f7      	beq.n	90005646 <_Z23getFont_verdana_10_4bppv+0x12>
90005656:	213f      	movs	r1, #63	; 0x3f
90005658:	2201      	movs	r2, #1
9000565a:	230a      	movs	r3, #10
9000565c:	2004      	movs	r0, #4
9000565e:	9204      	str	r2, [sp, #16]
90005660:	9300      	str	r3, [sp, #0]
90005662:	9003      	str	r0, [sp, #12]
90005664:	480d      	ldr	r0, [pc, #52]	; (9000569c <_Z23getFont_verdana_10_4bppv+0x68>)
90005666:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000566a:	490d      	ldr	r1, [pc, #52]	; (900056a0 <_Z23getFont_verdana_10_4bppv+0x6c>)
9000566c:	9108      	str	r1, [sp, #32]
9000566e:	490d      	ldr	r1, [pc, #52]	; (900056a4 <_Z23getFont_verdana_10_4bppv+0x70>)
90005670:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005674:	9107      	str	r1, [sp, #28]
90005676:	490c      	ldr	r1, [pc, #48]	; (900056a8 <_Z23getFont_verdana_10_4bppv+0x74>)
90005678:	e9cd 4405 	strd	r4, r4, [sp, #20]
9000567c:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005680:	f7ff fdb2 	bl	900051e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005684:	4809      	ldr	r0, [pc, #36]	; (900056ac <_Z23getFont_verdana_10_4bppv+0x78>)
90005686:	f01c f989 	bl	9002199c <atexit>
9000568a:	4628      	mov	r0, r5
9000568c:	f01c f947 	bl	9002191e <__cxa_guard_release>
}
90005690:	4802      	ldr	r0, [pc, #8]	; (9000569c <_Z23getFont_verdana_10_4bppv+0x68>)
90005692:	b00f      	add	sp, #60	; 0x3c
90005694:	bd30      	pop	{r4, r5, pc}
90005696:	bf00      	nop
90005698:	2400b114 	.word	0x2400b114
9000569c:	2400b118 	.word	0x2400b118
900056a0:	90025c34 	.word	0x90025c34
900056a4:	90025de0 	.word	0x90025de0
900056a8:	90201c10 	.word	0x90201c10
900056ac:	90005631 	.word	0x90005631

900056b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900056b0:	4770      	bx	lr
900056b2:	bf00      	nop

900056b4 <_Z23getFont_verdana_20_4bppv>:
{
900056b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900056b6:	4d19      	ldr	r5, [pc, #100]	; (9000571c <_Z23getFont_verdana_20_4bppv+0x68>)
{
900056b8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900056ba:	682c      	ldr	r4, [r5, #0]
900056bc:	f3bf 8f5b 	dmb	ish
900056c0:	f014 0401 	ands.w	r4, r4, #1
900056c4:	d002      	beq.n	900056cc <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
900056c6:	4816      	ldr	r0, [pc, #88]	; (90005720 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056c8:	b00f      	add	sp, #60	; 0x3c
900056ca:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900056cc:	4628      	mov	r0, r5
900056ce:	f01c f91a 	bl	90021906 <__cxa_guard_acquire>
900056d2:	2800      	cmp	r0, #0
900056d4:	d0f7      	beq.n	900056c6 <_Z23getFont_verdana_20_4bppv+0x12>
900056d6:	213f      	movs	r1, #63	; 0x3f
900056d8:	4a12      	ldr	r2, [pc, #72]	; (90005724 <_Z23getFont_verdana_20_4bppv+0x70>)
900056da:	2301      	movs	r3, #1
900056dc:	2014      	movs	r0, #20
900056de:	9208      	str	r2, [sp, #32]
900056e0:	2204      	movs	r2, #4
900056e2:	9304      	str	r3, [sp, #16]
900056e4:	9000      	str	r0, [sp, #0]
900056e6:	9401      	str	r4, [sp, #4]
900056e8:	480d      	ldr	r0, [pc, #52]	; (90005720 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056ea:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
900056ee:	490e      	ldr	r1, [pc, #56]	; (90005728 <_Z23getFont_verdana_20_4bppv+0x74>)
900056f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
900056f4:	9107      	str	r1, [sp, #28]
900056f6:	2318      	movs	r3, #24
900056f8:	490c      	ldr	r1, [pc, #48]	; (9000572c <_Z23getFont_verdana_20_4bppv+0x78>)
900056fa:	e9cd 4202 	strd	r4, r2, [sp, #8]
900056fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005702:	225f      	movs	r2, #95	; 0x5f
90005704:	f7ff fd70 	bl	900051e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005708:	4809      	ldr	r0, [pc, #36]	; (90005730 <_Z23getFont_verdana_20_4bppv+0x7c>)
9000570a:	f01c f947 	bl	9002199c <atexit>
9000570e:	4628      	mov	r0, r5
90005710:	f01c f905 	bl	9002191e <__cxa_guard_release>
}
90005714:	4802      	ldr	r0, [pc, #8]	; (90005720 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005716:	b00f      	add	sp, #60	; 0x3c
90005718:	bd30      	pop	{r4, r5, pc}
9000571a:	bf00      	nop
9000571c:	2400b144 	.word	0x2400b144
90005720:	2400b148 	.word	0x2400b148
90005724:	90025c38 	.word	0x90025c38
90005728:	90025de4 	.word	0x90025de4
9000572c:	90201c20 	.word	0x90201c20
90005730:	900056b1 	.word	0x900056b1

90005734 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005734:	4770      	bx	lr
90005736:	bf00      	nop

90005738 <_Z23getFont_verdana_40_4bppv>:
{
90005738:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000573a:	4d18      	ldr	r5, [pc, #96]	; (9000579c <_Z23getFont_verdana_40_4bppv+0x64>)
{
9000573c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000573e:	682c      	ldr	r4, [r5, #0]
90005740:	f3bf 8f5b 	dmb	ish
90005744:	f014 0401 	ands.w	r4, r4, #1
90005748:	d002      	beq.n	90005750 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
9000574a:	4815      	ldr	r0, [pc, #84]	; (900057a0 <_Z23getFont_verdana_40_4bppv+0x68>)
9000574c:	b00f      	add	sp, #60	; 0x3c
9000574e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005750:	4628      	mov	r0, r5
90005752:	f01c f8d8 	bl	90021906 <__cxa_guard_acquire>
90005756:	2800      	cmp	r0, #0
90005758:	d0f7      	beq.n	9000574a <_Z23getFont_verdana_40_4bppv+0x12>
9000575a:	213f      	movs	r1, #63	; 0x3f
9000575c:	2201      	movs	r2, #1
9000575e:	2328      	movs	r3, #40	; 0x28
90005760:	2004      	movs	r0, #4
90005762:	9204      	str	r2, [sp, #16]
90005764:	9300      	str	r3, [sp, #0]
90005766:	9003      	str	r0, [sp, #12]
90005768:	480d      	ldr	r0, [pc, #52]	; (900057a0 <_Z23getFont_verdana_40_4bppv+0x68>)
9000576a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000576e:	490d      	ldr	r1, [pc, #52]	; (900057a4 <_Z23getFont_verdana_40_4bppv+0x6c>)
90005770:	9108      	str	r1, [sp, #32]
90005772:	490d      	ldr	r1, [pc, #52]	; (900057a8 <_Z23getFont_verdana_40_4bppv+0x70>)
90005774:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005778:	9107      	str	r1, [sp, #28]
9000577a:	490c      	ldr	r1, [pc, #48]	; (900057ac <_Z23getFont_verdana_40_4bppv+0x74>)
9000577c:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005780:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005784:	f7ff fd30 	bl	900051e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005788:	4809      	ldr	r0, [pc, #36]	; (900057b0 <_Z23getFont_verdana_40_4bppv+0x78>)
9000578a:	f01c f907 	bl	9002199c <atexit>
9000578e:	4628      	mov	r0, r5
90005790:	f01c f8c5 	bl	9002191e <__cxa_guard_release>
}
90005794:	4802      	ldr	r0, [pc, #8]	; (900057a0 <_Z23getFont_verdana_40_4bppv+0x68>)
90005796:	b00f      	add	sp, #60	; 0x3c
90005798:	bd30      	pop	{r4, r5, pc}
9000579a:	bf00      	nop
9000579c:	2400b174 	.word	0x2400b174
900057a0:	2400b178 	.word	0x2400b178
900057a4:	90025ddc 	.word	0x90025ddc
900057a8:	90025de8 	.word	0x90025de8
900057ac:	90202154 	.word	0x90202154
900057b0:	90005735 	.word	0x90005735

900057b4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900057b4:	2000      	movs	r0, #0
900057b6:	4770      	bx	lr

900057b8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
900057b8:	2000      	movs	r0, #0
900057ba:	4770      	bx	lr

900057bc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900057bc:	b40e      	push	{r1, r2, r3}
900057be:	b500      	push	{lr}
900057c0:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900057c2:	2100      	movs	r1, #0
{
900057c4:	ab03      	add	r3, sp, #12
900057c6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900057ca:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900057cc:	f00e f9b8 	bl	90013b40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900057d0:	b002      	add	sp, #8
900057d2:	f85d eb04 	ldr.w	lr, [sp], #4
900057d6:	b003      	add	sp, #12
900057d8:	4770      	bx	lr
900057da:	bf00      	nop

900057dc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900057dc:	b40c      	push	{r2, r3}
900057de:	b500      	push	{lr}
900057e0:	b083      	sub	sp, #12
900057e2:	ab04      	add	r3, sp, #16
900057e4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
900057e8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
900057ea:	f00e f9a9 	bl	90013b40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900057ee:	b003      	add	sp, #12
900057f0:	f85d eb04 	ldr.w	lr, [sp], #4
900057f4:	b002      	add	sp, #8
900057f6:	4770      	bx	lr

900057f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
900057f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
900057fa:	b510      	push	{r4, lr}
900057fc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
900057fe:	b133      	cbz	r3, 9000580e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005800:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90005802:	b39b      	cbz	r3, 9000586c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005804:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90005806:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9000580a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
9000580c:	b923      	cbnz	r3, 90005818 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
9000580e:	4620      	mov	r0, r4
}
90005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90005814:	f00f bb2e 	b.w	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90005818:	f00f fc2a 	bl	90015070 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
9000581c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9000581e:	2b01      	cmp	r3, #1
90005820:	d92a      	bls.n	90005878 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005822:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90005824:	1c53      	adds	r3, r2, #1
90005826:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90005828:	2b09      	cmp	r3, #9
9000582a:	d812      	bhi.n	90005852 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
9000582c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005830:	f640 103f 	movw	r0, #2367	; 0x93f
90005834:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90005836:	4281      	cmp	r1, r0
90005838:	d1e9      	bne.n	9000580e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
9000583a:	eb04 0142 	add.w	r1, r4, r2, lsl #1
9000583e:	0052      	lsls	r2, r2, #1
90005840:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005842:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90005846:	4422      	add	r2, r4
90005848:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
9000584c:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
9000584e:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90005850:	e7dd      	b.n	9000580e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005852:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90005856:	f640 113f 	movw	r1, #2367	; 0x93f
9000585a:	89db      	ldrh	r3, [r3, #14]
9000585c:	428b      	cmp	r3, r1
9000585e:	d1d6      	bne.n	9000580e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005860:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005864:	2300      	movs	r3, #0
90005866:	0052      	lsls	r2, r2, #1
90005868:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
9000586a:	e7ea      	b.n	90005842 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
9000586c:	4b05      	ldr	r3, [pc, #20]	; (90005884 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
9000586e:	21c5      	movs	r1, #197	; 0xc5
90005870:	4a05      	ldr	r2, [pc, #20]	; (90005888 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005872:	4806      	ldr	r0, [pc, #24]	; (9000588c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005874:	f01c f874 	bl	90021960 <__assert_func>
            assert(offset < used);
90005878:	4b05      	ldr	r3, [pc, #20]	; (90005890 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
9000587a:	21cb      	movs	r1, #203	; 0xcb
9000587c:	4a05      	ldr	r2, [pc, #20]	; (90005894 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
9000587e:	4803      	ldr	r0, [pc, #12]	; (9000588c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005880:	f01c f86e 	bl	90021960 <__assert_func>
90005884:	90024e18 	.word	0x90024e18
90005888:	90024e24 	.word	0x90024e24
9000588c:	90024ed0 	.word	0x90024ed0
90005890:	90024f1c 	.word	0x90024f1c
90005894:	90024f2c 	.word	0x90024f2c

90005898 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90005898:	f00f bab5 	b.w	90014e06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9000589c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
9000589c:	b510      	push	{r4, lr}
9000589e:	b086      	sub	sp, #24
900058a0:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
900058a4:	ac0a      	add	r4, sp, #40	; 0x28
{
900058a6:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900058aa:	461a      	mov	r2, r3
900058ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900058ae:	4661      	mov	r1, ip
900058b0:	9401      	str	r4, [sp, #4]
900058b2:	9300      	str	r3, [sp, #0]
900058b4:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
900058b6:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900058b8:	f00c fde4 	bl	90012484 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900058bc:	b006      	add	sp, #24
900058be:	bd10      	pop	{r4, pc}

900058c0 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
900058c0:	b9e0      	cbnz	r0, 900058fc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
900058c2:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
900058c4:	4b13      	ldr	r3, [pc, #76]	; (90005914 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
900058c6:	681b      	ldr	r3, [r3, #0]
900058c8:	b1cb      	cbz	r3, 900058fe <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058ca:	4c13      	ldr	r4, [pc, #76]	; (90005918 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058cc:	4813      	ldr	r0, [pc, #76]	; (9000591c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900058ce:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058d2:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058d4:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058d6:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900058d8:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058da:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900058dc:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
900058de:	4b10      	ldr	r3, [pc, #64]	; (90005920 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
900058e0:	2200      	movs	r2, #0
900058e2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
900058e4:	f000 f83a 	bl	9000595c <_ZN17TypedTextDatabase8getFontsEv>
900058e8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
900058ea:	f000 f835 	bl	90005958 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
900058ee:	4b0d      	ldr	r3, [pc, #52]	; (90005924 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
900058f0:	4a0d      	ldr	r2, [pc, #52]	; (90005928 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
900058f2:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
900058f4:	4b0d      	ldr	r3, [pc, #52]	; (9000592c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
900058f6:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
900058f8:	8018      	strh	r0, [r3, #0]
    }
}
900058fa:	bd38      	pop	{r3, r4, r5, pc}
900058fc:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
900058fe:	4c0c      	ldr	r4, [pc, #48]	; (90005930 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005900:	4905      	ldr	r1, [pc, #20]	; (90005918 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005902:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005904:	480b      	ldr	r0, [pc, #44]	; (90005934 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90005906:	4b05      	ldr	r3, [pc, #20]	; (9000591c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005908:	4a0b      	ldr	r2, [pc, #44]	; (90005938 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
9000590a:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
9000590c:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
9000590e:	2c00      	cmp	r4, #0
90005910:	d1e5      	bne.n	900058de <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90005912:	bd38      	pop	{r3, r4, r5, pc}
90005914:	2400b1a4 	.word	0x2400b1a4
90005918:	2400b1a8 	.word	0x2400b1a8
9000591c:	2400b1ac 	.word	0x2400b1ac
90005920:	2400b1b0 	.word	0x2400b1b0
90005924:	2402625c 	.word	0x2402625c
90005928:	24026264 	.word	0x24026264
9000592c:	24026260 	.word	0x24026260
90005930:	90202194 	.word	0x90202194
90005934:	9020216c 	.word	0x9020216c
90005938:	90202164 	.word	0x90202164

9000593c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
9000593c:	4a04      	ldr	r2, [pc, #16]	; (90005950 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
9000593e:	4b05      	ldr	r3, [pc, #20]	; (90005954 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005940:	6812      	ldr	r2, [r2, #0]
90005942:	681b      	ldr	r3, [r3, #0]
90005944:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90005948:	eb03 0040 	add.w	r0, r3, r0, lsl #1
9000594c:	4770      	bx	lr
9000594e:	bf00      	nop
90005950:	2400b1ac 	.word	0x2400b1ac
90005954:	2400b1a8 	.word	0x2400b1a8

90005958 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90005958:	2002      	movs	r0, #2
9000595a:	4770      	bx	lr

9000595c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
9000595c:	4800      	ldr	r0, [pc, #0]	; (90005960 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
9000595e:	4770      	bx	lr
90005960:	2400b1b4 	.word	0x2400b1b4

90005964 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90005964:	b510      	push	{r4, lr}
};
90005966:	4c05      	ldr	r4, [pc, #20]	; (9000597c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90005968:	f7ff fea4 	bl	900056b4 <_Z23getFont_verdana_20_4bppv>
};
9000596c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
9000596e:	f7ff fee3 	bl	90005738 <_Z23getFont_verdana_40_4bppv>
};
90005972:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90005974:	f7ff fe5e 	bl	90005634 <_Z23getFont_verdana_10_4bppv>
};
90005978:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
9000597a:	bd10      	pop	{r4, pc}
9000597c:	2400b1b4 	.word	0x2400b1b4

90005980 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90005980:	4770      	bx	lr
90005982:	bf00      	nop

90005984 <_ZN19FrontendApplicationD0Ev>:
90005984:	b510      	push	{r4, lr}
90005986:	4604      	mov	r4, r0
90005988:	f44f 71ae 	mov.w	r1, #348	; 0x15c
9000598c:	f01b ffb9 	bl	90021902 <_ZdlPvj>
90005990:	4620      	mov	r0, r4
90005992:	bd10      	pop	{r4, pc}

90005994 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90005994:	b510      	push	{r4, lr}
90005996:	4604      	mov	r4, r0
    {
        model.tick();
90005998:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
9000599c:	f000 f818 	bl	900059d0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
900059a0:	4620      	mov	r0, r4
    }
900059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
900059a6:	f00d ba33 	b.w	90012e10 <_ZN8touchgfx11Application15handleTickEventEv>
900059aa:	bf00      	nop

900059ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
900059ac:	b510      	push	{r4, lr}
900059ae:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
900059b0:	f7ff fb92 	bl	900050d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
900059b4:	4b01      	ldr	r3, [pc, #4]	; (900059bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
900059b6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
900059b8:	6023      	str	r3, [r4, #0]
}
900059ba:	bd10      	pop	{r4, pc}
900059bc:	90025008 	.word	0x90025008

900059c0 <_ZN13ModelListener6setADCEi>:
    }
    virtual void setADC(int value) {};
900059c0:	4770      	bx	lr
900059c2:	bf00      	nop

900059c4 <_ZN5ModelC1Ev>:
	{
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
	}
}
#endif
Model::Model() : modelListener(0), ADC_VAL(50)
900059c4:	2100      	movs	r1, #0
900059c6:	2232      	movs	r2, #50	; 0x32
900059c8:	e9c0 1200 	strd	r1, r2, [r0]
{

}
900059cc:	4770      	bx	lr
900059ce:	bf00      	nop

900059d0 <_ZN5Model4tickEv>:
//	uint16_t value = HAL_ADC_GetValue(&hadc1);
//	HAL_ADC_Stop (&hadc1);

//	ADC_VAL = map(0, 0, 65535, 0, 100);

	modelListener->setADC(applicationContext.temperature);
900059d0:	6800      	ldr	r0, [r0, #0]
900059d2:	4a04      	ldr	r2, [pc, #16]	; (900059e4 <_ZN5Model4tickEv+0x14>)
900059d4:	6803      	ldr	r3, [r0, #0]
900059d6:	689b      	ldr	r3, [r3, #8]
900059d8:	4293      	cmp	r3, r2
900059da:	d100      	bne.n	900059de <_ZN5Model4tickEv+0xe>
	#endif
}
900059dc:	4770      	bx	lr
	modelListener->setADC(applicationContext.temperature);
900059de:	4a02      	ldr	r2, [pc, #8]	; (900059e8 <_ZN5Model4tickEv+0x18>)
900059e0:	7811      	ldrb	r1, [r2, #0]
900059e2:	4718      	bx	r3
900059e4:	900059c1 	.word	0x900059c1
900059e8:	2400ae0c 	.word	0x2400ae0c

900059ec <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
900059ec:	4770      	bx	lr
900059ee:	bf00      	nop

900059f0 <_ZThn4_N16Screen1PresenterD1Ev>:
900059f0:	3804      	subs	r0, #4
900059f2:	4770      	bx	lr

900059f4 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
900059f4:	4770      	bx	lr
900059f6:	bf00      	nop

900059f8 <_ZN16Screen1Presenter6setADCEi>:

}

void Screen1Presenter::setADC (int value)
{
	view.setADC(value);
900059f8:	68c0      	ldr	r0, [r0, #12]
900059fa:	6803      	ldr	r3, [r0, #0]
900059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900059fe:	4718      	bx	r3

90005a00 <_ZN16Screen1PresenterD0Ev>:
90005a00:	b510      	push	{r4, lr}
90005a02:	4604      	mov	r4, r0
90005a04:	2110      	movs	r1, #16
90005a06:	f01b ff7c 	bl	90021902 <_ZdlPvj>
90005a0a:	4620      	mov	r0, r4
90005a0c:	bd10      	pop	{r4, pc}
90005a0e:	bf00      	nop

90005a10 <_ZThn4_N16Screen1PresenterD0Ev>:
90005a10:	b500      	push	{lr}
90005a12:	3804      	subs	r0, #4
90005a14:	b083      	sub	sp, #12
90005a16:	2110      	movs	r1, #16
90005a18:	9001      	str	r0, [sp, #4]
90005a1a:	f01b ff72 	bl	90021902 <_ZdlPvj>
90005a1e:	9801      	ldr	r0, [sp, #4]
90005a20:	b003      	add	sp, #12
90005a22:	f85d fb04 	ldr.w	pc, [sp], #4
90005a26:	bf00      	nop

90005a28 <_ZThn4_N16Screen1Presenter6setADCEi>:
90005a28:	6880      	ldr	r0, [r0, #8]
90005a2a:	6803      	ldr	r3, [r0, #0]
90005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005a2e:	4718      	bx	r3

90005a30 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90005a30:	4a06      	ldr	r2, [pc, #24]	; (90005a4c <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90005a32:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90005a34:	b410      	push	{r4}
    ModelListener() : model(0) {}
90005a36:	2400      	movs	r4, #0
90005a38:	6084      	str	r4, [r0, #8]
    : view(v)
90005a3a:	f102 0408 	add.w	r4, r2, #8
90005a3e:	3224      	adds	r2, #36	; 0x24
90005a40:	e9c0 4200 	strd	r4, r2, [r0]
}
90005a44:	f85d 4b04 	ldr.w	r4, [sp], #4
90005a48:	4770      	bx	lr
90005a4a:	bf00      	nop
90005a4c:	9002504c 	.word	0x9002504c

90005a50 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005a50:	4770      	bx	lr
90005a52:	bf00      	nop

90005a54 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90005a54:	4b03      	ldr	r3, [pc, #12]	; (90005a64 <_ZN11Screen1ViewD1Ev+0x10>)
90005a56:	b510      	push	{r4, lr}
90005a58:	4604      	mov	r4, r0
90005a5a:	6003      	str	r3, [r0, #0]
90005a5c:	f7ff fc40 	bl	900052e0 <_ZN15Screen1ViewBaseD1Ev>
90005a60:	4620      	mov	r0, r4
90005a62:	bd10      	pop	{r4, pc}
90005a64:	90025088 	.word	0x90025088

90005a68 <_ZN11Screen1ViewD0Ev>:
90005a68:	4b05      	ldr	r3, [pc, #20]	; (90005a80 <_ZN11Screen1ViewD0Ev+0x18>)
90005a6a:	b510      	push	{r4, lr}
90005a6c:	4604      	mov	r4, r0
90005a6e:	6003      	str	r3, [r0, #0]
90005a70:	f7ff fc36 	bl	900052e0 <_ZN15Screen1ViewBaseD1Ev>
90005a74:	21ec      	movs	r1, #236	; 0xec
90005a76:	4620      	mov	r0, r4
90005a78:	f01b ff43 	bl	90021902 <_ZdlPvj>
90005a7c:	4620      	mov	r0, r4
90005a7e:	bd10      	pop	{r4, pc}
90005a80:	90025088 	.word	0x90025088

90005a84 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90005a84:	b510      	push	{r4, lr}
90005a86:	4604      	mov	r4, r0
90005a88:	f7ff fcee 	bl	90005468 <_ZN15Screen1ViewBaseC1Ev>
90005a8c:	4b01      	ldr	r3, [pc, #4]	; (90005a94 <_ZN11Screen1ViewC1Ev+0x10>)
}
90005a8e:	4620      	mov	r0, r4
Screen1View::Screen1View()
90005a90:	6023      	str	r3, [r4, #0]
}
90005a92:	bd10      	pop	{r4, pc}
90005a94:	90025088 	.word	0x90025088

90005a98 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005a98:	f7ff bc24 	b.w	900052e4 <_ZN15Screen1ViewBase11setupScreenEv>

90005a9c <_ZN11Screen1View6setADCEi>:

void Screen1View::setADC(int value) {
90005a9c:	b510      	push	{r4, lr}
90005a9e:	4604      	mov	r4, r0
90005aa0:	460b      	mov	r3, r1
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
90005aa2:	4a05      	ldr	r2, [pc, #20]	; (90005ab8 <_ZN11Screen1View6setADCEi+0x1c>)
90005aa4:	2104      	movs	r1, #4
90005aa6:	30e4      	adds	r0, #228	; 0xe4
90005aa8:	f010 f890 	bl	90015bcc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
90005aac:	f104 0098 	add.w	r0, r4, #152	; 0x98
};
90005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
90005ab4:	f00e b96f 	b.w	90013d96 <_ZNK8touchgfx8Drawable10invalidateEv>
90005ab8:	9002507c 	.word	0x9002507c

90005abc <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005abc:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005ac0:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90005ac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005ac6:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005aca:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005acc:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90005ace:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005ad2:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005ad6:	4770      	bx	lr

90005ad8 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005ad8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005adc:	2b01      	cmp	r3, #1
90005ade:	d102      	bne.n	90005ae6 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90005ae0:	2300      	movs	r3, #0
90005ae2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005ae6:	2000      	movs	r0, #0
90005ae8:	4770      	bx	lr
90005aea:	bf00      	nop

90005aec <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005aec:	2000      	movs	r0, #0
90005aee:	4770      	bx	lr

90005af0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005af0:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005af2:	6904      	ldr	r4, [r0, #16]
90005af4:	8900      	ldrh	r0, [r0, #8]
90005af6:	46a4      	mov	ip, r4
}
90005af8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005afc:	4760      	bx	ip
90005afe:	bf00      	nop

90005b00 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005b00:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005b02:	68c4      	ldr	r4, [r0, #12]
90005b04:	8900      	ldrh	r0, [r0, #8]
90005b06:	46a4      	mov	ip, r4
}
90005b08:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005b0c:	4760      	bx	ip
90005b0e:	bf00      	nop

90005b10 <FT5336_GestureConfig>:
{
90005b10:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005b12:	f100 0518 	add.w	r5, r0, #24
{
90005b16:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005b18:	7809      	ldrb	r1, [r1, #0]
90005b1a:	4628      	mov	r0, r5
90005b1c:	f000 f96c 	bl	90005df8 <ft5336_radian_value>
90005b20:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005b22:	7931      	ldrb	r1, [r6, #4]
90005b24:	4628      	mov	r0, r5
90005b26:	f000 f975 	bl	90005e14 <ft5336_offset_left_right>
90005b2a:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90005b2c:	7a31      	ldrb	r1, [r6, #8]
90005b2e:	4628      	mov	r0, r5
90005b30:	f000 f97e 	bl	90005e30 <ft5336_offset_up_down>
90005b34:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005b36:	7b31      	ldrb	r1, [r6, #12]
90005b38:	4628      	mov	r0, r5
90005b3a:	f000 f987 	bl	90005e4c <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b3e:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005b40:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b42:	4628      	mov	r0, r5
90005b44:	f000 f990 	bl	90005e68 <ft5336_distance_up_down>
90005b48:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b4a:	7d31      	ldrb	r1, [r6, #20]
90005b4c:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b4e:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b50:	f000 f998 	bl	90005e84 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90005b54:	42c4      	cmn	r4, r0
}
90005b56:	bf14      	ite	ne
90005b58:	f04f 30ff 	movne.w	r0, #4294967295
90005b5c:	2000      	moveq	r0, #0
90005b5e:	bd70      	pop	{r4, r5, r6, pc}

90005b60 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90005b60:	3018      	adds	r0, #24
90005b62:	f000 b9ab 	b.w	90005ebc <ft5336_chip_id>
90005b66:	bf00      	nop

90005b68 <FT5336_GetState>:
{
90005b68:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b6a:	f100 0518 	add.w	r5, r0, #24
{
90005b6e:	b083      	sub	sp, #12
90005b70:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b72:	4628      	mov	r0, r5
90005b74:	a901      	add	r1, sp, #4
90005b76:	f000 f931 	bl	90005ddc <ft5336_td_status>
90005b7a:	bb10      	cbnz	r0, 90005bc2 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005b7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b80:	2b05      	cmp	r3, #5
90005b82:	bf94      	ite	ls
90005b84:	4619      	movls	r1, r3
90005b86:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b88:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b8a:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b8c:	4628      	mov	r0, r5
90005b8e:	2103      	movs	r1, #3
90005b90:	eb0d 0203 	add.w	r2, sp, r3
90005b94:	f000 f910 	bl	90005db8 <ft5336_read_reg>
90005b98:	b9b0      	cbnz	r0, 90005bc8 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005b9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005b9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005ba2:	0212      	lsls	r2, r2, #8
90005ba4:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005ba8:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005baa:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005bb2:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bb4:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005bb8:	430b      	orrs	r3, r1
90005bba:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005bbe:	b003      	add	sp, #12
90005bc0:	bd30      	pop	{r4, r5, pc}
90005bc2:	f04f 31ff 	mov.w	r1, #4294967295
90005bc6:	e7df      	b.n	90005b88 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005bc8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005bcc:	e7f7      	b.n	90005bbe <FT5336_GetState+0x56>
90005bce:	bf00      	nop

90005bd0 <FT5336_GetMultiTouchState>:
{
90005bd0:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005bd2:	f100 0518 	add.w	r5, r0, #24
{
90005bd6:	b088      	sub	sp, #32
90005bd8:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005bda:	4628      	mov	r0, r5
90005bdc:	4669      	mov	r1, sp
90005bde:	f000 f8fd 	bl	90005ddc <ft5336_td_status>
90005be2:	2800      	cmp	r0, #0
90005be4:	f040 809a 	bne.w	90005d1c <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005be8:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005bec:	2b05      	cmp	r3, #5
90005bee:	bf94      	ite	ls
90005bf0:	4619      	movls	r1, r3
90005bf2:	2100      	movhi	r1, #0
90005bf4:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005bf6:	231e      	movs	r3, #30
90005bf8:	466a      	mov	r2, sp
90005bfa:	4628      	mov	r0, r5
90005bfc:	2103      	movs	r1, #3
90005bfe:	f000 f8db 	bl	90005db8 <ft5336_read_reg>
90005c02:	2800      	cmp	r0, #0
90005c04:	f040 808d 	bne.w	90005d22 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c08:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c0c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c10:	020a      	lsls	r2, r1, #8
90005c12:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c16:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c18:	f89d c007 	ldrb.w	ip, [sp, #7]
90005c1c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c20:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c26:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c2a:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c2c:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c30:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c32:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c34:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c36:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c38:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c3c:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c42:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c46:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c48:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c4e:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c50:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c52:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c58:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c5a:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c5c:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c60:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c64:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c66:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c68:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c6a:	ea45 050c 	orr.w	r5, r5, ip
90005c6e:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c72:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c76:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c78:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c7a:	0212      	lsls	r2, r2, #8
90005c7c:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c80:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c82:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c86:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c8a:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c8c:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
90005c92:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c94:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c98:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c9a:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ca0:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ca2:	f89d 200f 	ldrb.w	r2, [sp, #15]
90005ca6:	4313      	orrs	r3, r2
90005ca8:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005caa:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cac:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cb4:	020a      	lsls	r2, r1, #8
90005cb6:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cba:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cbc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cc0:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cc2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cc6:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cc8:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005ccc:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cce:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cd0:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005cd4:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cd6:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cd8:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cda:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cde:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ce0:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005ce4:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ce6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cea:	f89d 301d 	ldrb.w	r3, [sp, #29]
90005cee:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cf0:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cf2:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cf4:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cf8:	6625      	str	r5, [r4, #96]	; 0x60
90005cfa:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cfc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005d00:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005d02:	021b      	lsls	r3, r3, #8
90005d04:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005d08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005d0c:	430b      	orrs	r3, r1
90005d0e:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005d10:	f89d 3019 	ldrb.w	r3, [sp, #25]
90005d14:	4313      	orrs	r3, r2
90005d16:	6163      	str	r3, [r4, #20]
}
90005d18:	b008      	add	sp, #32
90005d1a:	bd70      	pop	{r4, r5, r6, pc}
90005d1c:	f04f 31ff 	mov.w	r1, #4294967295
90005d20:	e768      	b.n	90005bf4 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90005d22:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005d26:	e7f7      	b.n	90005d18 <FT5336_GetMultiTouchState+0x148>

90005d28 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005d28:	3018      	adds	r0, #24
90005d2a:	f000 b84d 	b.w	90005dc8 <ft5336_gest_id>
90005d2e:	bf00      	nop

90005d30 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90005d30:	2101      	movs	r1, #1
90005d32:	3018      	adds	r0, #24
90005d34:	f000 b8b4 	b.w	90005ea0 <ft5336_g_mode>

90005d38 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005d38:	2100      	movs	r1, #0
90005d3a:	3018      	adds	r0, #24
90005d3c:	f000 b8b0 	b.w	90005ea0 <ft5336_g_mode>

90005d40 <FT5336_Init>:
{
90005d40:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90005d42:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90005d46:	b98d      	cbnz	r5, 90005d6c <FT5336_Init+0x2c>
    pObj->IO.Init();
90005d48:	4606      	mov	r6, r0
90005d4a:	4604      	mov	r4, r0
90005d4c:	f856 3b18 	ldr.w	r3, [r6], #24
90005d50:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005d52:	4629      	mov	r1, r5
90005d54:	4630      	mov	r0, r6
90005d56:	f000 f8a3 	bl	90005ea0 <ft5336_g_mode>
  if(ret != FT5336_OK)
90005d5a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90005d5c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90005d60:	bf18      	it	ne
90005d62:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90005d64:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
90005d68:	4240      	negs	r0, r0
}
90005d6a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90005d6c:	2000      	movs	r0, #0
}
90005d6e:	bd70      	pop	{r4, r5, r6, pc}

90005d70 <FT5336_ClearIT>:
90005d70:	2000      	movs	r0, #0
90005d72:	4770      	bx	lr

90005d74 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90005d74:	b1c0      	cbz	r0, 90005da8 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
90005d76:	890a      	ldrh	r2, [r1, #8]
{
90005d78:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
90005d7a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90005d7e:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90005d80:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d84:	694a      	ldr	r2, [r1, #20]
90005d86:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
90005d8a:	4909      	ldr	r1, [pc, #36]	; (90005db0 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d8c:	60c5      	str	r5, [r0, #12]
90005d8e:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005d92:	4a08      	ldr	r2, [pc, #32]	; (90005db4 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90005d94:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005d98:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
90005d9a:	b10b      	cbz	r3, 90005da0 <FT5336_RegisterBusIO+0x2c>
}
90005d9c:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90005d9e:	4718      	bx	r3
}
90005da0:	f04f 30ff 	mov.w	r0, #4294967295
90005da4:	bc30      	pop	{r4, r5}
90005da6:	4770      	bx	lr
90005da8:	f04f 30ff 	mov.w	r0, #4294967295
90005dac:	4770      	bx	lr
90005dae:	bf00      	nop
90005db0:	90005af1 	.word	0x90005af1
90005db4:	90005b01 	.word	0x90005b01

90005db8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90005db8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dba:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005dbe:	46a4      	mov	ip, r4
}
90005dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dc4:	4760      	bx	ip
90005dc6:	bf00      	nop

90005dc8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005dc8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dca:	2301      	movs	r3, #1
{
90005dcc:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dce:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005dd2:	4619      	mov	r1, r3
90005dd4:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90005dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dda:	4760      	bx	ip

90005ddc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90005ddc:	b538      	push	{r3, r4, r5, lr}
90005dde:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005de0:	2301      	movs	r3, #1
90005de2:	2102      	movs	r1, #2
90005de4:	4622      	mov	r2, r4
90005de6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90005dea:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90005dec:	b918      	cbnz	r0, 90005df6 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90005dee:	7823      	ldrb	r3, [r4, #0]
90005df0:	f003 030f 	and.w	r3, r3, #15
90005df4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90005df6:	bd38      	pop	{r3, r4, r5, pc}

90005df8 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005df8:	b510      	push	{r4, lr}
90005dfa:	460c      	mov	r4, r1
90005dfc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005dfe:	2301      	movs	r3, #1
90005e00:	2191      	movs	r1, #145	; 0x91
{
90005e02:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e06:	f10d 0207 	add.w	r2, sp, #7
90005e0a:	6804      	ldr	r4, [r0, #0]
90005e0c:	6880      	ldr	r0, [r0, #8]
90005e0e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005e10:	b002      	add	sp, #8
90005e12:	bd10      	pop	{r4, pc}

90005e14 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005e14:	b510      	push	{r4, lr}
90005e16:	460c      	mov	r4, r1
90005e18:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e1a:	2301      	movs	r3, #1
90005e1c:	2192      	movs	r1, #146	; 0x92
{
90005e1e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e22:	f10d 0207 	add.w	r2, sp, #7
90005e26:	6804      	ldr	r4, [r0, #0]
90005e28:	6880      	ldr	r0, [r0, #8]
90005e2a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90005e2c:	b002      	add	sp, #8
90005e2e:	bd10      	pop	{r4, pc}

90005e30 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005e30:	b510      	push	{r4, lr}
90005e32:	460c      	mov	r4, r1
90005e34:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e36:	2301      	movs	r3, #1
90005e38:	2193      	movs	r1, #147	; 0x93
{
90005e3a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e3e:	f10d 0207 	add.w	r2, sp, #7
90005e42:	6804      	ldr	r4, [r0, #0]
90005e44:	6880      	ldr	r0, [r0, #8]
90005e46:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90005e48:	b002      	add	sp, #8
90005e4a:	bd10      	pop	{r4, pc}

90005e4c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005e4c:	b510      	push	{r4, lr}
90005e4e:	460c      	mov	r4, r1
90005e50:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e52:	2301      	movs	r3, #1
90005e54:	2194      	movs	r1, #148	; 0x94
{
90005e56:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e5a:	f10d 0207 	add.w	r2, sp, #7
90005e5e:	6804      	ldr	r4, [r0, #0]
90005e60:	6880      	ldr	r0, [r0, #8]
90005e62:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90005e64:	b002      	add	sp, #8
90005e66:	bd10      	pop	{r4, pc}

90005e68 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005e68:	b510      	push	{r4, lr}
90005e6a:	460c      	mov	r4, r1
90005e6c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e6e:	2301      	movs	r3, #1
90005e70:	2195      	movs	r1, #149	; 0x95
{
90005e72:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e76:	f10d 0207 	add.w	r2, sp, #7
90005e7a:	6804      	ldr	r4, [r0, #0]
90005e7c:	6880      	ldr	r0, [r0, #8]
90005e7e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90005e80:	b002      	add	sp, #8
90005e82:	bd10      	pop	{r4, pc}

90005e84 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90005e84:	b510      	push	{r4, lr}
90005e86:	460c      	mov	r4, r1
90005e88:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e8a:	2301      	movs	r3, #1
90005e8c:	2196      	movs	r1, #150	; 0x96
{
90005e8e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e92:	f10d 0207 	add.w	r2, sp, #7
90005e96:	6804      	ldr	r4, [r0, #0]
90005e98:	6880      	ldr	r0, [r0, #8]
90005e9a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90005e9c:	b002      	add	sp, #8
90005e9e:	bd10      	pop	{r4, pc}

90005ea0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90005ea0:	b510      	push	{r4, lr}
90005ea2:	460c      	mov	r4, r1
90005ea4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005ea6:	2301      	movs	r3, #1
90005ea8:	21a4      	movs	r1, #164	; 0xa4
{
90005eaa:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005eae:	f10d 0207 	add.w	r2, sp, #7
90005eb2:	6804      	ldr	r4, [r0, #0]
90005eb4:	6880      	ldr	r0, [r0, #8]
90005eb6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90005eb8:	b002      	add	sp, #8
90005eba:	bd10      	pop	{r4, pc}

90005ebc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005ebc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ebe:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90005ec2:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ec4:	2301      	movs	r3, #1
90005ec6:	46a4      	mov	ip, r4
90005ec8:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005eca:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ece:	4760      	bx	ip

90005ed0 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005ed2:	680b      	ldr	r3, [r1, #0]
{
90005ed4:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005ed6:	4c2a      	ldr	r4, [pc, #168]	; (90005f80 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005edc:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005ede:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005ee0:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ee2:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90005ee4:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005ee6:	2301      	movs	r3, #1
90005ee8:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005eea:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005eec:	f005 fd3c 	bl	9000b968 <HAL_SDRAM_SendCommand>
90005ef0:	2800      	cmp	r0, #0
90005ef2:	d142      	bne.n	90005f7a <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90005ef4:	f000 ff46 	bl	90006d84 <HAL_GetTick>
90005ef8:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005efa:	f000 ff43 	bl	90006d84 <HAL_GetTick>
90005efe:	4286      	cmp	r6, r0
90005f00:	d0fb      	beq.n	90005efa <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005f02:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005f04:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90005f06:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f08:	491d      	ldr	r1, [pc, #116]	; (90005f80 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005f0a:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005f0c:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005f0e:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f10:	4638      	mov	r0, r7
90005f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90005f16:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005f18:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f1a:	f005 fd25 	bl	9000b968 <HAL_SDRAM_SendCommand>
90005f1e:	bb60      	cbnz	r0, 90005f7a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f20:	4917      	ldr	r1, [pc, #92]	; (90005f80 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90005f22:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90005f26:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f28:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005f2a:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90005f2e:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90005f34:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f36:	f005 fd17 	bl	9000b968 <HAL_SDRAM_SendCommand>
90005f3a:	b9f0      	cbnz	r0, 90005f7a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f3c:	4910      	ldr	r1, [pc, #64]	; (90005f80 <MT48LC4M32B2_Init+0xb0>)
90005f3e:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f40:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90005f44:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90005f46:	696a      	ldr	r2, [r5, #20]
90005f48:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005f4a:	69aa      	ldr	r2, [r5, #24]
90005f4c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f4e:	69ea      	ldr	r2, [r5, #28]
90005f50:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90005f52:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90005f54:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f56:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005f58:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f60:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f62:	f005 fd01 	bl	9000b968 <HAL_SDRAM_SendCommand>
90005f66:	b940      	cbnz	r0, 90005f7a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90005f68:	68a9      	ldr	r1, [r5, #8]
90005f6a:	4638      	mov	r0, r7
90005f6c:	f005 fd1c 	bl	9000b9a8 <HAL_SDRAM_ProgramRefreshRate>
90005f70:	3800      	subs	r0, #0
90005f72:	bf18      	it	ne
90005f74:	2001      	movne	r0, #1
90005f76:	4240      	negs	r0, r0
}
90005f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90005f7a:	f04f 30ff 	mov.w	r0, #4294967295
}
90005f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90005f80:	2400b1c0 	.word	0x2400b1c0

90005f84 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90005f84:	4a10      	ldr	r2, [pc, #64]	; (90005fc8 <BSP_I2C4_DeInit+0x44>)
{
90005f86:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90005f88:	6813      	ldr	r3, [r2, #0]
90005f8a:	3b01      	subs	r3, #1
90005f8c:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90005f8e:	b10b      	cbz	r3, 90005f94 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90005f90:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90005f92:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90005f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90005f98:	480c      	ldr	r0, [pc, #48]	; (90005fcc <BSP_I2C4_DeInit+0x48>)
90005f9a:	f001 fac1 	bl	90007520 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90005f9e:	480b      	ldr	r0, [pc, #44]	; (90005fcc <BSP_I2C4_DeInit+0x48>)
90005fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90005fa4:	f001 fabc 	bl	90007520 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90005fa8:	4a09      	ldr	r2, [pc, #36]	; (90005fd0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005faa:	480a      	ldr	r0, [pc, #40]	; (90005fd4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90005fac:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90005fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005fb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005fb8:	f001 fd5a 	bl	90007a70 <HAL_I2C_DeInit>
90005fbc:	2800      	cmp	r0, #0
90005fbe:	d0e7      	beq.n	90005f90 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90005fc0:	f06f 0007 	mvn.w	r0, #7
}
90005fc4:	bd08      	pop	{r3, pc}
90005fc6:	bf00      	nop
90005fc8:	2400b1d0 	.word	0x2400b1d0
90005fcc:	58020c00 	.word	0x58020c00
90005fd0:	58024400 	.word	0x58024400
90005fd4:	2400bbd8 	.word	0x2400bbd8

90005fd8 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005fd8:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005fda:	2201      	movs	r2, #1
{
90005fdc:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005fde:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90005fe2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90005fe6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005fea:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005fee:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90005ff0:	f001 fce6 	bl	900079c0 <HAL_I2C_Init>
90005ff4:	b108      	cbz	r0, 90005ffa <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90005ff6:	2001      	movs	r0, #1
}
90005ff8:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90005ffa:	4601      	mov	r1, r0
90005ffc:	4620      	mov	r0, r4
90005ffe:	f001 fff5 	bl	90007fec <HAL_I2CEx_ConfigAnalogFilter>
90006002:	2800      	cmp	r0, #0
90006004:	d1f7      	bne.n	90005ff6 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90006006:	4601      	mov	r1, r0
90006008:	4620      	mov	r0, r4
9000600a:	f002 f819 	bl	90008040 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
9000600e:	3800      	subs	r0, #0
90006010:	bf18      	it	ne
90006012:	2001      	movne	r0, #1
}
90006014:	bd10      	pop	{r4, pc}
90006016:	bf00      	nop

90006018 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90006018:	4b99      	ldr	r3, [pc, #612]	; (90006280 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
9000601a:	489a      	ldr	r0, [pc, #616]	; (90006284 <BSP_I2C4_Init+0x26c>)
9000601c:	4a9a      	ldr	r2, [pc, #616]	; (90006288 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
9000601e:	6819      	ldr	r1, [r3, #0]
{
90006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006024:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90006026:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90006028:	9103      	str	r1, [sp, #12]
9000602a:	b119      	cbz	r1, 90006034 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
9000602c:	2000      	movs	r0, #0
}
9000602e:	b01f      	add	sp, #124	; 0x7c
90006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90006034:	2201      	movs	r2, #1
90006036:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90006038:	f001 ffd2 	bl	90007fe0 <HAL_I2C_GetState>
9000603c:	2800      	cmp	r0, #0
9000603e:	d1f5      	bne.n	9000602c <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006040:	4c92      	ldr	r4, [pc, #584]	; (9000628c <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006042:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90006046:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006048:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000604a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000604e:	2600      	movs	r6, #0
90006050:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006052:	f043 0308 	orr.w	r3, r3, #8
90006056:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000605a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000605e:	f003 0308 	and.w	r3, r3, #8
90006062:	9315      	str	r3, [sp, #84]	; 0x54
90006064:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006066:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000606a:	f043 0308 	orr.w	r3, r3, #8
9000606e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90006072:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006076:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006078:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000607c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006080:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006082:	a918      	add	r1, sp, #96	; 0x60
90006084:	4882      	ldr	r0, [pc, #520]	; (90006290 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006086:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006088:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
9000608c:	f001 f916 	bl	900072bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90006090:	2312      	movs	r3, #18
90006092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90006096:	a918      	add	r1, sp, #96	; 0x60
90006098:	487d      	ldr	r0, [pc, #500]	; (90006290 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
9000609a:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
9000609c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
900060a0:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900060a4:	f001 f90a 	bl	900072bc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
900060a8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900060b0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
900060b4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900060bc:	9317      	str	r3, [sp, #92]	; 0x5c
900060be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
900060c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900060c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900060c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
900060cc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900060d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900060d4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900060d8:	f004 fca6 	bl	9000aa28 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900060dc:	2800      	cmp	r0, #0
900060de:	f000 81f6 	beq.w	900064ce <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060e2:	4b6c      	ldr	r3, [pc, #432]	; (90006294 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
900060e4:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060e8:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060ea:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900060ee:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 9000629c <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060f2:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060f4:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900060f8:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060fa:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900060fc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90006100:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
90006104:	4b64      	ldr	r3, [pc, #400]	; (90006298 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90006106:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000610a:	0079      	lsls	r1, r7, #1
9000610c:	681b      	ldr	r3, [r3, #0]
9000610e:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
90006112:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
90006116:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90006118:	4699      	mov	r9, r3
9000611a:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000611c:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90006120:	46b8      	mov	r8, r7
90006122:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90006126:	bf94      	ite	ls
90006128:	2101      	movls	r1, #1
9000612a:	2100      	movhi	r1, #0
9000612c:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90006130:	f001 0101 	and.w	r1, r1, #1
90006134:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90006138:	bf38      	it	cc
9000613a:	2100      	movcc	r1, #0
9000613c:	429c      	cmp	r4, r3
9000613e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90006142:	9105      	str	r1, [sp, #20]
90006144:	bf8c      	ite	hi
90006146:	2100      	movhi	r1, #0
90006148:	2101      	movls	r1, #1
9000614a:	459c      	cmp	ip, r3
9000614c:	bf38      	it	cc
9000614e:	2100      	movcc	r1, #0
90006150:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90006154:	9106      	str	r1, [sp, #24]
90006156:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000615a:	9104      	str	r1, [sp, #16]
9000615c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90006160:	9111      	str	r1, [sp, #68]	; 0x44
90006162:	bf94      	ite	ls
90006164:	2101      	movls	r1, #1
90006166:	2100      	movhi	r1, #0
90006168:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
9000616c:	f001 0e01 	and.w	lr, r1, #1
90006170:	bf38      	it	cc
90006172:	f04f 0e00 	movcc.w	lr, #0
90006176:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006178:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000617c:	f8cd e01c 	str.w	lr, [sp, #28]
90006180:	bf8c      	ite	hi
90006182:	f04f 0e00 	movhi.w	lr, #0
90006186:	f04f 0e01 	movls.w	lr, #1
9000618a:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000618c:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000618e:	bf38      	it	cc
90006190:	f04f 0e00 	movcc.w	lr, #0
90006194:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90006198:	bf98      	it	ls
9000619a:	2101      	movls	r1, #1
9000619c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
900061a0:	f8cd e020 	str.w	lr, [sp, #32]
900061a4:	f001 0101 	and.w	r1, r1, #1
900061a8:	bf38      	it	cc
900061aa:	2100      	movcc	r1, #0
900061ac:	4284      	cmp	r4, r0
900061ae:	9109      	str	r1, [sp, #36]	; 0x24
900061b0:	4601      	mov	r1, r0
900061b2:	bf8c      	ite	hi
900061b4:	2000      	movhi	r0, #0
900061b6:	2001      	movls	r0, #1
900061b8:	458c      	cmp	ip, r1
900061ba:	bf38      	it	cc
900061bc:	2000      	movcc	r0, #0
900061be:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
900061c2:	900b      	str	r0, [sp, #44]	; 0x2c
900061c4:	bf94      	ite	ls
900061c6:	2001      	movls	r0, #1
900061c8:	2000      	movhi	r0, #0
900061ca:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
900061ce:	f000 0001 	and.w	r0, r0, #1
900061d2:	bf38      	it	cc
900061d4:	2000      	movcc	r0, #0
900061d6:	900c      	str	r0, [sp, #48]	; 0x30
900061d8:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
900061dc:	4284      	cmp	r4, r0
900061de:	bf8c      	ite	hi
900061e0:	f04f 0e00 	movhi.w	lr, #0
900061e4:	f04f 0e01 	movls.w	lr, #1
900061e8:	4584      	cmp	ip, r0
900061ea:	bf38      	it	cc
900061ec:	f04f 0e00 	movcc.w	lr, #0
900061f0:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
900061f4:	4670      	mov	r0, lr
900061f6:	bf94      	ite	ls
900061f8:	2001      	movls	r0, #1
900061fa:	2000      	movhi	r0, #0
900061fc:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90006200:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90006204:	f04f 0e00 	mov.w	lr, #0
90006208:	f000 0001 	and.w	r0, r0, #1
9000620c:	bf38      	it	cc
9000620e:	2000      	movcc	r0, #0
90006210:	900e      	str	r0, [sp, #56]	; 0x38
90006212:	9804      	ldr	r0, [sp, #16]
90006214:	4284      	cmp	r4, r0
90006216:	4602      	mov	r2, r0
90006218:	bf8c      	ite	hi
9000621a:	2200      	movhi	r2, #0
9000621c:	2201      	movls	r2, #1
9000621e:	4584      	cmp	ip, r0
90006220:	bf38      	it	cc
90006222:	2200      	movcc	r2, #0
90006224:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90006228:	920f      	str	r2, [sp, #60]	; 0x3c
9000622a:	bf94      	ite	ls
9000622c:	2201      	movls	r2, #1
9000622e:	2200      	movhi	r2, #0
90006230:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90006234:	f002 0201 	and.w	r2, r2, #1
90006238:	bf38      	it	cc
9000623a:	2200      	movcc	r2, #0
9000623c:	9210      	str	r2, [sp, #64]	; 0x40
9000623e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90006240:	4294      	cmp	r4, r2
90006242:	4613      	mov	r3, r2
90006244:	bf8c      	ite	hi
90006246:	2300      	movhi	r3, #0
90006248:	2301      	movls	r3, #1
9000624a:	4594      	cmp	ip, r2
9000624c:	bf38      	it	cc
9000624e:	2300      	movcc	r3, #0
90006250:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90006254:	9311      	str	r3, [sp, #68]	; 0x44
90006256:	bf94      	ite	ls
90006258:	2301      	movls	r3, #1
9000625a:	2300      	movhi	r3, #0
9000625c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90006260:	f003 0301 	and.w	r3, r3, #1
90006264:	bf38      	it	cc
90006266:	2300      	movcc	r3, #0
90006268:	9312      	str	r3, [sp, #72]	; 0x48
9000626a:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
9000626e:	429c      	cmp	r4, r3
90006270:	bf8c      	ite	hi
90006272:	2200      	movhi	r2, #0
90006274:	2201      	movls	r2, #1
90006276:	459c      	cmp	ip, r3
90006278:	bf38      	it	cc
9000627a:	2200      	movcc	r2, #0
9000627c:	9204      	str	r2, [sp, #16]
9000627e:	e014      	b.n	900062aa <BSP_I2C4_Init+0x292>
90006280:	2400b1d0 	.word	0x2400b1d0
90006284:	2400bbd8 	.word	0x2400bbd8
90006288:	58001c00 	.word	0x58001c00
9000628c:	58024400 	.word	0x58024400
90006290:	58020c00 	.word	0x58020c00
90006294:	3b9aca00 	.word	0x3b9aca00
90006298:	2400bbd4 	.word	0x2400bbd4
9000629c:	2400b1d4 	.word	0x2400b1d4
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900062a0:	f1be 0f10 	cmp.w	lr, #16
900062a4:	44b8      	add	r8, r7
900062a6:	f000 826c 	beq.w	90006782 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
900062aa:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
900062ae:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900062b0:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
900062b4:	d3f4      	bcc.n	900062a0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900062b6:	ebbb 0205 	subs.w	r2, fp, r5
900062ba:	bf18      	it	ne
900062bc:	2201      	movne	r2, #1
900062be:	2c00      	cmp	r4, #0
900062c0:	bf18      	it	ne
900062c2:	2200      	movne	r2, #0
900062c4:	2a00      	cmp	r2, #0
900062c6:	f040 824a 	bne.w	9000675e <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900062ca:	45bc      	cmp	ip, r7
900062cc:	bf34      	ite	cc
900062ce:	2200      	movcc	r2, #0
900062d0:	2201      	movcs	r2, #1
900062d2:	42bc      	cmp	r4, r7
900062d4:	bf88      	it	hi
900062d6:	2200      	movhi	r2, #0
            if(presc != prev_presc)
900062d8:	45ab      	cmp	fp, r5
900062da:	bf0c      	ite	eq
900062dc:	2200      	moveq	r2, #0
900062de:	f002 0201 	andne.w	r2, r2, #1
900062e2:	2a00      	cmp	r2, #0
900062e4:	f000 80fd 	beq.w	900064e2 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062e8:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062ec:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062f0:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062f2:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062f6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062fa:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062fe:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006300:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006302:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006304:	f200 81a5 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006308:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000630a:	9906      	ldr	r1, [sp, #24]
9000630c:	45ab      	cmp	fp, r5
9000630e:	bf0c      	ite	eq
90006310:	2100      	moveq	r1, #0
90006312:	f001 0101 	andne.w	r1, r1, #1
90006316:	2900      	cmp	r1, #0
90006318:	f000 80ff 	beq.w	9000651a <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000631c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006320:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006324:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006326:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000632a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000632e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006332:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006334:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006336:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006338:	f200 818b 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
9000633c:	460a      	mov	r2, r1
9000633e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006340:	9908      	ldr	r1, [sp, #32]
90006342:	45ab      	cmp	fp, r5
90006344:	bf0c      	ite	eq
90006346:	2100      	moveq	r1, #0
90006348:	f001 0101 	andne.w	r1, r1, #1
9000634c:	2900      	cmp	r1, #0
9000634e:	f000 80ff 	beq.w	90006550 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006352:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006356:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000635a:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000635c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006360:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006364:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006368:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000636a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000636c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000636e:	f200 8170 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006372:	460a      	mov	r2, r1
90006374:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006376:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006378:	45ab      	cmp	fp, r5
9000637a:	bf0c      	ite	eq
9000637c:	2100      	moveq	r1, #0
9000637e:	f001 0101 	andne.w	r1, r1, #1
90006382:	2900      	cmp	r1, #0
90006384:	f000 80fe 	beq.w	90006584 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006388:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000638c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006390:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006392:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006396:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000639a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000639e:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063a0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063a2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063a4:	f200 8155 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
900063a8:	460a      	mov	r2, r1
900063aa:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063ac:	990d      	ldr	r1, [sp, #52]	; 0x34
900063ae:	45ab      	cmp	fp, r5
900063b0:	bf0c      	ite	eq
900063b2:	2100      	moveq	r1, #0
900063b4:	f001 0101 	andne.w	r1, r1, #1
900063b8:	2900      	cmp	r1, #0
900063ba:	f000 80fd 	beq.w	900065b8 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063be:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900063c2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063c6:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063c8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063cc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063d0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063d4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063d6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063d8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063da:	f200 813a 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
900063de:	460a      	mov	r2, r1
900063e0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
900063e4:	45ab      	cmp	fp, r5
900063e6:	bf0c      	ite	eq
900063e8:	2100      	moveq	r1, #0
900063ea:	f001 0101 	andne.w	r1, r1, #1
900063ee:	2900      	cmp	r1, #0
900063f0:	f000 80fc 	beq.w	900065ec <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063f4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900063f8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063fc:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063fe:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006402:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006406:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000640a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000640c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000640e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006410:	f200 811f 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006414:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006416:	9e11      	ldr	r6, [sp, #68]	; 0x44
90006418:	455d      	cmp	r5, fp
9000641a:	bf0c      	ite	eq
9000641c:	2600      	moveq	r6, #0
9000641e:	f006 0601 	andne.w	r6, r6, #1
90006422:	2e00      	cmp	r6, #0
90006424:	f000 80fb 	beq.w	9000661e <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006428:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000642c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006430:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006432:	4650      	mov	r0, sl
90006434:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006438:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000643c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006440:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006442:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006444:	f200 8105 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006448:	4631      	mov	r1, r6
9000644a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000644c:	9e04      	ldr	r6, [sp, #16]
9000644e:	455d      	cmp	r5, fp
90006450:	bf0c      	ite	eq
90006452:	2600      	moveq	r6, #0
90006454:	f006 0601 	andne.w	r6, r6, #1
90006458:	2e00      	cmp	r6, #0
9000645a:	f000 817c 	beq.w	90006756 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000645e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006462:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006466:	4650      	mov	r0, sl
90006468:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000646c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006470:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006474:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006476:	f04f 030f 	mov.w	r3, #15
9000647a:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000647c:	f200 80e9 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006480:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90006482:	e70d      	b.n	900062a0 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006484:	9a07      	ldr	r2, [sp, #28]
90006486:	9b08      	ldr	r3, [sp, #32]
90006488:	3214      	adds	r2, #20
9000648a:	3301      	adds	r3, #1
9000648c:	9207      	str	r2, [sp, #28]
9000648e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90006490:	9308      	str	r3, [sp, #32]
90006492:	4293      	cmp	r3, r2
90006494:	f040 80ff 	bne.w	90006696 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
90006498:	297f      	cmp	r1, #127	; 0x7f
9000649a:	d818      	bhi.n	900064ce <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000649c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
900064a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900064a2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
900064a6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064aa:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900064ac:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064ae:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064b0:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064b4:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064b8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064bc:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900064be:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064c0:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900064c2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064c6:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064c8:	430b      	orrs	r3, r1
900064ca:	4313      	orrs	r3, r2
900064cc:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900064ce:	9903      	ldr	r1, [sp, #12]
900064d0:	48b5      	ldr	r0, [pc, #724]	; (900067a8 <BSP_I2C4_Init+0x790>)
900064d2:	f7ff fd81 	bl	90005fd8 <MX_I2C4_Init>
900064d6:	2800      	cmp	r0, #0
900064d8:	f43f ada8 	beq.w	9000602c <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
900064dc:	f06f 0007 	mvn.w	r0, #7
  return ret;
900064e0:	e5a5      	b.n	9000602e <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
900064e2:	4632      	mov	r2, r6
900064e4:	9905      	ldr	r1, [sp, #20]
900064e6:	45ab      	cmp	fp, r5
900064e8:	bf0c      	ite	eq
900064ea:	2100      	moveq	r1, #0
900064ec:	f001 0101 	andne.w	r1, r1, #1
900064f0:	2900      	cmp	r1, #0
900064f2:	f43f af0a 	beq.w	9000630a <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064f6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900064fa:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064fe:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006500:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006504:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006508:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000650c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000650e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006510:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006512:	f200 809e 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
90006516:	460a      	mov	r2, r1
90006518:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000651a:	9907      	ldr	r1, [sp, #28]
9000651c:	45ab      	cmp	fp, r5
9000651e:	bf0c      	ite	eq
90006520:	2100      	moveq	r1, #0
90006522:	f001 0101 	andne.w	r1, r1, #1
90006526:	2900      	cmp	r1, #0
90006528:	f43f af0a 	beq.w	90006340 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000652c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006530:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006534:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006536:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000653a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000653e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006542:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006544:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006546:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006548:	f200 8083 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
9000654c:	460a      	mov	r2, r1
9000654e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006550:	9909      	ldr	r1, [sp, #36]	; 0x24
90006552:	45ab      	cmp	fp, r5
90006554:	bf0c      	ite	eq
90006556:	2100      	moveq	r1, #0
90006558:	f001 0101 	andne.w	r1, r1, #1
9000655c:	2900      	cmp	r1, #0
9000655e:	f43f af0a 	beq.w	90006376 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006562:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006566:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000656a:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000656c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006570:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006574:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006578:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000657a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000657c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000657e:	d868      	bhi.n	90006652 <BSP_I2C4_Init+0x63a>
90006580:	460a      	mov	r2, r1
90006582:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006584:	990c      	ldr	r1, [sp, #48]	; 0x30
90006586:	45ab      	cmp	fp, r5
90006588:	bf0c      	ite	eq
9000658a:	2100      	moveq	r1, #0
9000658c:	f001 0101 	andne.w	r1, r1, #1
90006590:	2900      	cmp	r1, #0
90006592:	f43f af0b 	beq.w	900063ac <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006596:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000659a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000659e:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065a0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065a4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065a8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065ac:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065ae:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065b0:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065b2:	d84e      	bhi.n	90006652 <BSP_I2C4_Init+0x63a>
900065b4:	460a      	mov	r2, r1
900065b6:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065b8:	990e      	ldr	r1, [sp, #56]	; 0x38
900065ba:	45ab      	cmp	fp, r5
900065bc:	bf0c      	ite	eq
900065be:	2100      	moveq	r1, #0
900065c0:	f001 0101 	andne.w	r1, r1, #1
900065c4:	2900      	cmp	r1, #0
900065c6:	f43f af0c 	beq.w	900063e2 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065ca:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065ce:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065d2:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065d4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065d8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065dc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065e0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065e2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065e4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065e6:	d834      	bhi.n	90006652 <BSP_I2C4_Init+0x63a>
900065e8:	460a      	mov	r2, r1
900065ea:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065ec:	9910      	ldr	r1, [sp, #64]	; 0x40
900065ee:	45ab      	cmp	fp, r5
900065f0:	bf0c      	ite	eq
900065f2:	2100      	moveq	r1, #0
900065f4:	f001 0101 	andne.w	r1, r1, #1
900065f8:	2900      	cmp	r1, #0
900065fa:	f000 80ae 	beq.w	9000675a <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065fe:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006602:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006606:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006608:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000660c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006610:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006614:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006616:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006618:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000661a:	d81a      	bhi.n	90006652 <BSP_I2C4_Init+0x63a>
9000661c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000661e:	9e12      	ldr	r6, [sp, #72]	; 0x48
90006620:	455d      	cmp	r5, fp
90006622:	bf0c      	ite	eq
90006624:	2600      	moveq	r6, #0
90006626:	f006 0601 	andne.w	r6, r6, #1
9000662a:	2e00      	cmp	r6, #0
9000662c:	f43f af0e 	beq.w	9000644c <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006630:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006634:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006638:	4650      	mov	r0, sl
9000663a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000663e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006642:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006646:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006648:	f04f 030e 	mov.w	r3, #14
9000664c:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000664e:	f67f af17 	bls.w	90006480 <BSP_I2C4_Init+0x468>
90006652:	4b56      	ldr	r3, [pc, #344]	; (900067ac <BSP_I2C4_Init+0x794>)
90006654:	900b      	str	r0, [sp, #44]	; 0x2c
90006656:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
9000665a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000665e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90006660:	f240 4201 	movw	r2, #1025	; 0x401
90006664:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006668:	f640 1ac4 	movw	sl, #2500	; 0x9c4
9000666c:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000666e:	f240 4b12 	movw	fp, #1042	; 0x412
90006672:	920d      	str	r2, [sp, #52]	; 0x34
90006674:	9a02      	ldr	r2, [sp, #8]
90006676:	4296      	cmp	r6, r2
90006678:	bf38      	it	cc
9000667a:	4616      	movcc	r6, r2
9000667c:	4a4c      	ldr	r2, [pc, #304]	; (900067b0 <BSP_I2C4_Init+0x798>)
9000667e:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006680:	2200      	movs	r2, #0
90006682:	9208      	str	r2, [sp, #32]
90006684:	f04f 32ff 	mov.w	r2, #4294967295
90006688:	4611      	mov	r1, r2
9000668a:	f103 0232 	add.w	r2, r3, #50	; 0x32
9000668e:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90006692:	920c      	str	r2, [sp, #48]	; 0x30
90006694:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006696:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006698:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
9000669c:	6818      	ldr	r0, [r3, #0]
9000669e:	9b02      	ldr	r3, [sp, #8]
900066a0:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900066a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900066a6:	1a1b      	subs	r3, r3, r0
900066a8:	ea4f 0943 	mov.w	r9, r3, lsl #1
900066ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900066ae:	eb03 0e00 	add.w	lr, r3, r0
900066b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900066b4:	4403      	add	r3, r0
900066b6:	9309      	str	r3, [sp, #36]	; 0x24
900066b8:	e006      	b.n	900066c8 <BSP_I2C4_Init+0x6b0>
900066ba:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
900066be:	4486      	add	lr, r0
900066c0:	eba9 0900 	sub.w	r9, r9, r0
900066c4:	f43f aede 	beq.w	90006484 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900066c8:	f240 5214 	movw	r2, #1300	; 0x514
900066cc:	f8cd 8004 	str.w	r8, [sp, #4]
900066d0:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900066d4:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900066d8:	4596      	cmp	lr, r2
900066da:	d9ee      	bls.n	900066ba <BSP_I2C4_Init+0x6a2>
900066dc:	9a02      	ldr	r2, [sp, #8]
900066de:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
900066e2:	d2ea      	bcs.n	900066ba <BSP_I2C4_Init+0x6a2>
900066e4:	f640 0c34 	movw	ip, #2100	; 0x834
900066e8:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900066ea:	f8cd 9018 	str.w	r9, [sp, #24]
900066ee:	2200      	movs	r2, #0
900066f0:	ebac 0c03 	sub.w	ip, ip, r3
900066f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900066f6:	4689      	mov	r9, r1
900066f8:	4473      	add	r3, lr
900066fa:	e9cd e804 	strd	lr, r8, [sp, #16]
900066fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
90006702:	f8dd e01c 	ldr.w	lr, [sp, #28]
90006706:	e005      	b.n	90006714 <BSP_I2C4_Init+0x6fc>
90006708:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
9000670c:	4403      	add	r3, r0
9000670e:	eba4 0400 	sub.w	r4, r4, r0
90006712:	d01a      	beq.n	9000674a <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006714:	eb0c 0103 	add.w	r1, ip, r3
90006718:	4617      	mov	r7, r2
9000671a:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000671e:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006720:	42b1      	cmp	r1, r6
90006722:	d9f1      	bls.n	90006708 <BSP_I2C4_Init+0x6f0>
90006724:	455d      	cmp	r5, fp
90006726:	d8ef      	bhi.n	90006708 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90006728:	ea33 0123 	bics.w	r1, r3, r3, asr #32
9000672c:	bf28      	it	cs
9000672e:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90006730:	458a      	cmp	sl, r1
90006732:	d9e9      	bls.n	90006708 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90006734:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006736:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
9000673a:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
9000673c:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000673e:	4403      	add	r3, r0
90006740:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90006744:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006748:	d1e4      	bne.n	90006714 <BSP_I2C4_Init+0x6fc>
9000674a:	4649      	mov	r1, r9
9000674c:	f8dd 9018 	ldr.w	r9, [sp, #24]
90006750:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90006754:	e7b1      	b.n	900066ba <BSP_I2C4_Init+0x6a2>
90006756:	460e      	mov	r6, r1
90006758:	e5a2      	b.n	900062a0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000675a:	4611      	mov	r1, r2
9000675c:	e65b      	b.n	90006416 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000675e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006762:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006766:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006768:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000676c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006770:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006774:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006776:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006778:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000677a:	f63f af6a 	bhi.w	90006652 <BSP_I2C4_Init+0x63a>
9000677e:	46ab      	mov	fp, r5
90006780:	e6b0      	b.n	900064e4 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006782:	3501      	adds	r5, #1
90006784:	9b02      	ldr	r3, [sp, #8]
90006786:	2d10      	cmp	r5, #16
90006788:	441f      	add	r7, r3
9000678a:	f47f acc7 	bne.w	9000611c <BSP_I2C4_Init+0x104>
9000678e:	b126      	cbz	r6, 9000679a <BSP_I2C4_Init+0x782>
90006790:	4b06      	ldr	r3, [pc, #24]	; (900067ac <BSP_I2C4_Init+0x794>)
90006792:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90006796:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
9000679a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000679c:	2b00      	cmp	r3, #0
9000679e:	f43f ae96 	beq.w	900064ce <BSP_I2C4_Init+0x4b6>
900067a2:	4b03      	ldr	r3, [pc, #12]	; (900067b0 <BSP_I2C4_Init+0x798>)
900067a4:	930b      	str	r3, [sp, #44]	; 0x2c
900067a6:	e75a      	b.n	9000665e <BSP_I2C4_Init+0x646>
900067a8:	2400bbd8 	.word	0x2400bbd8
900067ac:	2400bbd4 	.word	0x2400bbd4
900067b0:	2400b1d4 	.word	0x2400b1d4

900067b4 <BSP_I2C4_WriteReg>:
{
900067b4:	b530      	push	{r4, r5, lr}
900067b6:	4614      	mov	r4, r2
900067b8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900067ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900067be:	460a      	mov	r2, r1
900067c0:	9301      	str	r3, [sp, #4]
900067c2:	4601      	mov	r1, r0
900067c4:	2301      	movs	r3, #1
900067c6:	4809      	ldr	r0, [pc, #36]	; (900067ec <BSP_I2C4_WriteReg+0x38>)
900067c8:	9502      	str	r5, [sp, #8]
900067ca:	9400      	str	r4, [sp, #0]
900067cc:	f001 f96a 	bl	90007aa4 <HAL_I2C_Mem_Write>
900067d0:	b908      	cbnz	r0, 900067d6 <BSP_I2C4_WriteReg+0x22>
}
900067d2:	b005      	add	sp, #20
900067d4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900067d6:	4805      	ldr	r0, [pc, #20]	; (900067ec <BSP_I2C4_WriteReg+0x38>)
900067d8:	f001 fc06 	bl	90007fe8 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
900067dc:	2804      	cmp	r0, #4
900067de:	bf0c      	ite	eq
900067e0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900067e4:	f06f 0003 	mvnne.w	r0, #3
900067e8:	e7f3      	b.n	900067d2 <BSP_I2C4_WriteReg+0x1e>
900067ea:	bf00      	nop
900067ec:	2400bbd8 	.word	0x2400bbd8

900067f0 <BSP_I2C4_ReadReg>:
{
900067f0:	b530      	push	{r4, r5, lr}
900067f2:	4614      	mov	r4, r2
900067f4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900067f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900067fa:	460a      	mov	r2, r1
900067fc:	9301      	str	r3, [sp, #4]
900067fe:	4601      	mov	r1, r0
90006800:	2301      	movs	r3, #1
90006802:	4809      	ldr	r0, [pc, #36]	; (90006828 <BSP_I2C4_ReadReg+0x38>)
90006804:	9502      	str	r5, [sp, #8]
90006806:	9400      	str	r4, [sp, #0]
90006808:	f001 fa80 	bl	90007d0c <HAL_I2C_Mem_Read>
9000680c:	b908      	cbnz	r0, 90006812 <BSP_I2C4_ReadReg+0x22>
}
9000680e:	b005      	add	sp, #20
90006810:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006812:	4805      	ldr	r0, [pc, #20]	; (90006828 <BSP_I2C4_ReadReg+0x38>)
90006814:	f001 fbe8 	bl	90007fe8 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006818:	2804      	cmp	r0, #4
9000681a:	bf0c      	ite	eq
9000681c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006820:	f06f 0003 	mvnne.w	r0, #3
90006824:	e7f3      	b.n	9000680e <BSP_I2C4_ReadReg+0x1e>
90006826:	bf00      	nop
90006828:	2400bbd8 	.word	0x2400bbd8

9000682c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
9000682c:	f000 baaa 	b.w	90006d84 <HAL_GetTick>

90006830 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90006830:	b970      	cbnz	r0, 90006850 <BSP_SDRAM_DeInit+0x20>
{
90006832:	b510      	push	{r4, lr}
90006834:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90006836:	4808      	ldr	r0, [pc, #32]	; (90006858 <BSP_SDRAM_DeInit+0x28>)
90006838:	f005 f888 	bl	9000b94c <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
9000683c:	207a      	movs	r0, #122	; 0x7a
9000683e:	f000 fb1d 	bl	90006e7c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006842:	4b06      	ldr	r3, [pc, #24]	; (9000685c <BSP_SDRAM_DeInit+0x2c>)
90006844:	4806      	ldr	r0, [pc, #24]	; (90006860 <BSP_SDRAM_DeInit+0x30>)
90006846:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90006848:	f003 f9a0 	bl	90009b8c <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
9000684c:	4620      	mov	r0, r4
}
9000684e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006850:	f06f 0001 	mvn.w	r0, #1
}
90006854:	4770      	bx	lr
90006856:	bf00      	nop
90006858:	2400bc2c 	.word	0x2400bc2c
9000685c:	52000040 	.word	0x52000040
90006860:	2400bc60 	.word	0x2400bc60

90006864 <MX_SDRAM_BANK2_Init>:
{
90006864:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90006866:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90006868:	2200      	movs	r2, #0
{
9000686a:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
9000686c:	4c13      	ldr	r4, [pc, #76]	; (900068bc <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000686e:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006870:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90006872:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90006874:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006876:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90006878:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
9000687a:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
9000687c:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90006880:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90006882:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006884:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90006886:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006888:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000688a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000688e:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006890:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006894:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006896:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006898:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
9000689c:	2204      	movs	r2, #4
9000689e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
900068a2:	2202      	movs	r2, #2
900068a4:	2302      	movs	r3, #2
900068a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
900068aa:	4b05      	ldr	r3, [pc, #20]	; (900068c0 <MX_SDRAM_BANK2_Init+0x5c>)
900068ac:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900068ae:	f005 f823 	bl	9000b8f8 <HAL_SDRAM_Init>
}
900068b2:	3800      	subs	r0, #0
900068b4:	bf18      	it	ne
900068b6:	2001      	movne	r0, #1
900068b8:	b009      	add	sp, #36	; 0x24
900068ba:	bd30      	pop	{r4, r5, pc}
900068bc:	2400bc2c 	.word	0x2400bc2c
900068c0:	52004140 	.word	0x52004140

900068c4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
900068c4:	2800      	cmp	r0, #0
900068c6:	f040 80d2 	bne.w	90006a6e <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
900068ca:	4b6c      	ldr	r3, [pc, #432]	; (90006a7c <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900068cc:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
900068ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
900068d6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
900068d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
900068dc:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
900068de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068e2:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900068e4:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900068e8:	4c65      	ldr	r4, [pc, #404]	; (90006a80 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
900068ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900068ee:	4e65      	ldr	r6, [pc, #404]	; (90006a84 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
900068f0:	9201      	str	r2, [sp, #4]
900068f2:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
900068f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068f8:	f042 0201 	orr.w	r2, r2, #1
900068fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90006900:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006904:	f002 0201 	and.w	r2, r2, #1
90006908:	9202      	str	r2, [sp, #8]
9000690a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000690c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006910:	f042 0208 	orr.w	r2, r2, #8
90006914:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006918:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000691c:	f002 0208 	and.w	r2, r2, #8
90006920:	9203      	str	r2, [sp, #12]
90006922:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90006924:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006928:	f042 0210 	orr.w	r2, r2, #16
9000692c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006930:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006934:	f002 0210 	and.w	r2, r2, #16
90006938:	9204      	str	r2, [sp, #16]
9000693a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000693c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006940:	f042 0220 	orr.w	r2, r2, #32
90006944:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006948:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000694c:	f002 0220 	and.w	r2, r2, #32
90006950:	9205      	str	r2, [sp, #20]
90006952:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90006954:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000695c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006960:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006964:	f002 0240 	and.w	r2, r2, #64	; 0x40
90006968:	9206      	str	r2, [sp, #24]
9000696a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000696c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90006974:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000697c:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000697e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006980:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006984:	e9cd 0108 	strd	r0, r1, [sp, #32]
90006988:	2001      	movs	r0, #1
9000698a:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000698c:	9307      	str	r3, [sp, #28]
9000698e:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006990:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006994:	a908      	add	r1, sp, #32
90006996:	483c      	ldr	r0, [pc, #240]	; (90006a88 <BSP_SDRAM_Init+0x1c4>)
90006998:	f000 fc90 	bl	900072bc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000699c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900069a0:	a908      	add	r1, sp, #32
900069a2:	483a      	ldr	r0, [pc, #232]	; (90006a8c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900069a4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900069a6:	f000 fc89 	bl	900072bc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900069aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900069ae:	a908      	add	r1, sp, #32
900069b0:	4837      	ldr	r0, [pc, #220]	; (90006a90 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900069b2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900069b4:	f000 fc82 	bl	900072bc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900069b8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900069bc:	a908      	add	r1, sp, #32
900069be:	4835      	ldr	r0, [pc, #212]	; (90006a94 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900069c0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900069c2:	f000 fc7b 	bl	900072bc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900069c6:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900069c8:	a908      	add	r1, sp, #32
900069ca:	4833      	ldr	r0, [pc, #204]	; (90006a98 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900069cc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900069ce:	f000 fc75 	bl	900072bc <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900069d2:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900069d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900069d8:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
900069dc:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900069de:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
900069e0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900069e2:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900069e8:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069ea:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900069ec:	4a2b      	ldr	r2, [pc, #172]	; (90006a9c <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900069ee:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900069f0:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900069f2:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900069f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900069f8:	f640 0308 	movw	r3, #2056	; 0x808
900069fc:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900069fe:	2320      	movs	r3, #32
90006a00:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90006a06:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006a0a:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90006a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006a10:	f003 f8bc 	bl	90009b8c <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90006a14:	4620      	mov	r0, r4
90006a16:	f003 f83f 	bl	90009a98 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90006a1a:	462a      	mov	r2, r5
90006a1c:	210f      	movs	r1, #15
90006a1e:	207a      	movs	r0, #122	; 0x7a
90006a20:	f000 f9e0 	bl	90006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90006a24:	207a      	movs	r0, #122	; 0x7a
90006a26:	f000 fa1b 	bl	90006e60 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90006a2a:	2210      	movs	r2, #16
90006a2c:	2104      	movs	r1, #4
90006a2e:	4630      	mov	r0, r6
90006a30:	f7ff ff18 	bl	90006864 <MX_SDRAM_BANK2_Init>
90006a34:	b9f0      	cbnz	r0, 90006a74 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006a36:	491a      	ldr	r1, [pc, #104]	; (90006aa0 <BSP_SDRAM_Init+0x1dc>)
90006a38:	2208      	movs	r2, #8
90006a3a:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006a3c:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006a3e:	e9c1 2300 	strd	r2, r3, [r1]
90006a42:	f240 6203 	movw	r2, #1539	; 0x603
90006a46:	2300      	movs	r3, #0
90006a48:	e9c1 2302 	strd	r2, r3, [r1, #8]
90006a4c:	2200      	movs	r2, #0
90006a4e:	2330      	movs	r3, #48	; 0x30
90006a50:	e9c1 2304 	strd	r2, r3, [r1, #16]
90006a54:	2200      	movs	r2, #0
90006a56:	f44f 7300 	mov.w	r3, #512	; 0x200
90006a5a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006a5e:	f7ff fa37 	bl	90005ed0 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90006a62:	2800      	cmp	r0, #0
90006a64:	bf18      	it	ne
90006a66:	f06f 0004 	mvnne.w	r0, #4
}
90006a6a:	b00e      	add	sp, #56	; 0x38
90006a6c:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006a6e:	f06f 0001 	mvn.w	r0, #1
}
90006a72:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90006a74:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90006a78:	e7f7      	b.n	90006a6a <BSP_SDRAM_Init+0x1a6>
90006a7a:	bf00      	nop
90006a7c:	58024400 	.word	0x58024400
90006a80:	2400bccc 	.word	0x2400bccc
90006a84:	2400bc2c 	.word	0x2400bc2c
90006a88:	58020c00 	.word	0x58020c00
90006a8c:	58021000 	.word	0x58021000
90006a90:	58021400 	.word	0x58021400
90006a94:	58021800 	.word	0x58021800
90006a98:	58021c00 	.word	0x58021c00
90006a9c:	52000040 	.word	0x52000040
90006aa0:	2400bd38 	.word	0x2400bd38

90006aa4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006aa8:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006aaa:	2800      	cmp	r0, #0
90006aac:	d16b      	bne.n	90006b86 <BSP_TS_Init+0xe2>
90006aae:	680b      	ldr	r3, [r1, #0]
90006ab0:	460c      	mov	r4, r1
90006ab2:	1e5a      	subs	r2, r3, #1
90006ab4:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006ab8:	d265      	bcs.n	90006b86 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006aba:	684a      	ldr	r2, [r1, #4]
90006abc:	1e51      	subs	r1, r2, #1
90006abe:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90006ac2:	d260      	bcs.n	90006b86 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90006ac4:	4293      	cmp	r3, r2
90006ac6:	bf28      	it	cs
90006ac8:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006aca:	68e2      	ldr	r2, [r4, #12]
90006acc:	429a      	cmp	r2, r3
90006ace:	d85a      	bhi.n	90006b86 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ad0:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90006ad2:	4b31      	ldr	r3, [pc, #196]	; (90006b98 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ad4:	4d31      	ldr	r5, [pc, #196]	; (90006b9c <BSP_TS_Init+0xf8>)
90006ad6:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ad8:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006adc:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ade:	4a30      	ldr	r2, [pc, #192]	; (90006ba0 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ae0:	4b30      	ldr	r3, [pc, #192]	; (90006ba4 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ae2:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ae4:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006ae6:	4a30      	ldr	r2, [pc, #192]	; (90006ba8 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006ae8:	4b30      	ldr	r3, [pc, #192]	; (90006bac <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006aea:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006aec:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006aee:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006af0:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006af2:	f7ff f93f 	bl	90005d74 <FT5336_RegisterBusIO>
90006af6:	2800      	cmp	r0, #0
90006af8:	d14b      	bne.n	90006b92 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006afa:	a901      	add	r1, sp, #4
90006afc:	4628      	mov	r0, r5
90006afe:	f7ff f82f 	bl	90005b60 <FT5336_ReadID>
90006b02:	2800      	cmp	r0, #0
90006b04:	d145      	bne.n	90006b92 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90006b06:	9b01      	ldr	r3, [sp, #4]
90006b08:	2b51      	cmp	r3, #81	; 0x51
90006b0a:	d142      	bne.n	90006b92 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b0c:	4b28      	ldr	r3, [pc, #160]	; (90006bb0 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006b0e:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006b10:	4f28      	ldr	r7, [pc, #160]	; (90006bb4 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b12:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006bbc <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90006b16:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b18:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006b1c:	681b      	ldr	r3, [r3, #0]
90006b1e:	4798      	blx	r3
90006b20:	4606      	mov	r6, r0
90006b22:	2800      	cmp	r0, #0
90006b24:	d135      	bne.n	90006b92 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b26:	4d24      	ldr	r5, [pc, #144]	; (90006bb8 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b28:	a902      	add	r1, sp, #8
90006b2a:	6838      	ldr	r0, [r7, #0]
90006b2c:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b30:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b34:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b36:	e9c5 7200 	strd	r7, r2, [r5]
90006b3a:	68a2      	ldr	r2, [r4, #8]
90006b3c:	60aa      	str	r2, [r5, #8]
90006b3e:	68e2      	ldr	r2, [r4, #12]
90006b40:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b42:	4798      	blx	r3
90006b44:	2800      	cmp	r0, #0
90006b46:	db18      	blt.n	90006b7a <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90006b48:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90006b4c:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b50:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b52:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b56:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b58:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b5a:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b5c:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b5e:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b62:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b66:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b68:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b6a:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b6c:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b6e:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b70:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90006b72:	4630      	mov	r0, r6
90006b74:	b008      	add	sp, #32
90006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006b7a:	f06f 0604 	mvn.w	r6, #4
}
90006b7e:	4630      	mov	r0, r6
90006b80:	b008      	add	sp, #32
90006b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006b86:	f06f 0601 	mvn.w	r6, #1
}
90006b8a:	4630      	mov	r0, r6
90006b8c:	b008      	add	sp, #32
90006b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006b92:	f04f 36ff 	mov.w	r6, #4294967295
90006b96:	e7ec      	b.n	90006b72 <BSP_TS_Init+0xce>
90006b98:	90006019 	.word	0x90006019
90006b9c:	2400bd58 	.word	0x2400bd58
90006ba0:	90005f85 	.word	0x90005f85
90006ba4:	900067f1 	.word	0x900067f1
90006ba8:	900067b5 	.word	0x900067b5
90006bac:	9000682d 	.word	0x9000682d
90006bb0:	24000024 	.word	0x24000024
90006bb4:	2400bd80 	.word	0x2400bd80
90006bb8:	2400bd84 	.word	0x2400bd84
90006bbc:	2400bdc4 	.word	0x2400bdc4

90006bc0 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006bc0:	2800      	cmp	r0, #0
90006bc2:	d157      	bne.n	90006c74 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006bc4:	4b2d      	ldr	r3, [pc, #180]	; (90006c7c <BSP_TS_GetState+0xbc>)
90006bc6:	4a2e      	ldr	r2, [pc, #184]	; (90006c80 <BSP_TS_GetState+0xc0>)
90006bc8:	681b      	ldr	r3, [r3, #0]
90006bca:	6810      	ldr	r0, [r2, #0]
90006bcc:	691b      	ldr	r3, [r3, #16]
{
90006bce:	b5f0      	push	{r4, r5, r6, r7, lr}
90006bd0:	b085      	sub	sp, #20
90006bd2:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006bd4:	a901      	add	r1, sp, #4
90006bd6:	4798      	blx	r3
90006bd8:	2800      	cmp	r0, #0
90006bda:	db41      	blt.n	90006c60 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90006bdc:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bde:	4b29      	ldr	r3, [pc, #164]	; (90006c84 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90006be0:	b93d      	cbnz	r5, 90006bf2 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90006be2:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90006be4:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006be8:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006bea:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006bee:	b005      	add	sp, #20
90006bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bf2:	6898      	ldr	r0, [r3, #8]
90006bf4:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90006bf6:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bfa:	d435      	bmi.n	90006c68 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006bfc:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
90006bfe:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006c00:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006c02:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006c06:	bf1c      	itt	ne
90006c08:	f106 32ff 	addne.w	r2, r6, #4294967295
90006c0c:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006c10:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006c14:	6958      	ldr	r0, [r3, #20]
90006c16:	bf18      	it	ne
90006c18:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006c1a:	681f      	ldr	r7, [r3, #0]
90006c1c:	fb07 f202 	mul.w	r2, r7, r2
90006c20:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c24:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
90006c26:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c28:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006c2c:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006c2e:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006c30:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006c32:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c34:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006c38:	bf8c      	ite	hi
90006c3a:	1b90      	subhi	r0, r2, r6
90006c3c:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006c3e:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c40:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006c42:	bf8c      	ite	hi
90006c44:	1b4f      	subhi	r7, r1, r5
90006c46:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c48:	42b8      	cmp	r0, r7
90006c4a:	bf38      	it	cc
90006c4c:	4638      	movcc	r0, r7
90006c4e:	68df      	ldr	r7, [r3, #12]
90006c50:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90006c52:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c56:	d20a      	bcs.n	90006c6e <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90006c58:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90006c5a:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90006c5c:	b005      	add	sp, #20
90006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90006c60:	f06f 0004 	mvn.w	r0, #4
}
90006c64:	b005      	add	sp, #20
90006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90006c68:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
90006c6a:	463a      	mov	r2, r7
90006c6c:	e7c8      	b.n	90006c00 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006c6e:	e9c4 6501 	strd	r6, r5, [r4, #4]
90006c72:	e7bc      	b.n	90006bee <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90006c74:	f06f 0001 	mvn.w	r0, #1
}
90006c78:	4770      	bx	lr
90006c7a:	bf00      	nop
90006c7c:	2400bdc4 	.word	0x2400bdc4
90006c80:	2400bd80 	.word	0x2400bd80
90006c84:	2400bd84 	.word	0x2400bd84

90006c88 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90006c88:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c8a:	4c19      	ldr	r4, [pc, #100]	; (90006cf0 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90006c8c:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90006c8e:	4b19      	ldr	r3, [pc, #100]	; (90006cf4 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c90:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90006c94:	4818      	ldr	r0, [pc, #96]	; (90006cf8 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90006c9a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90006c9e:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006ca0:	4c16      	ldr	r4, [pc, #88]	; (90006cfc <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90006ca2:	f041 0101 	orr.w	r1, r1, #1
90006ca6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90006ca8:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90006caa:	6819      	ldr	r1, [r3, #0]
90006cac:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006cae:	4914      	ldr	r1, [pc, #80]	; (90006d00 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90006cb0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90006cb2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90006cb4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
90006cb6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
90006cb8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
90006cba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90006cbc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90006cbe:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90006cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90006cc4:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90006cc6:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90006cc8:	6818      	ldr	r0, [r3, #0]
90006cca:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006cce:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006cd0:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006cd2:	6823      	ldr	r3, [r4, #0]
90006cd4:	4019      	ands	r1, r3
90006cd6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90006cda:	d203      	bcs.n	90006ce4 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006cdc:	4b09      	ldr	r3, [pc, #36]	; (90006d04 <SystemInit+0x7c>)
90006cde:	2201      	movs	r2, #1
90006ce0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006ce4:	4a08      	ldr	r2, [pc, #32]	; (90006d08 <SystemInit+0x80>)
90006ce6:	4b02      	ldr	r3, [pc, #8]	; (90006cf0 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90006ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006cec:	609a      	str	r2, [r3, #8]
}
90006cee:	4770      	bx	lr
90006cf0:	e000ed00 	.word	0xe000ed00
90006cf4:	58024400 	.word	0x58024400
90006cf8:	eaf6ed7f 	.word	0xeaf6ed7f
90006cfc:	5c001000 	.word	0x5c001000
90006d00:	ffff0000 	.word	0xffff0000
90006d04:	51008000 	.word	0x51008000
90006d08:	90000000 	.word	0x90000000

90006d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006d0c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006d0e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d10:	4c12      	ldr	r4, [pc, #72]	; (90006d5c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006d12:	f000 f855 	bl	90006dc0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d16:	f003 fc77 	bl	9000a608 <HAL_RCC_GetSysClockFreq>
90006d1a:	4b11      	ldr	r3, [pc, #68]	; (90006d60 <HAL_Init+0x54>)
90006d1c:	4911      	ldr	r1, [pc, #68]	; (90006d64 <HAL_Init+0x58>)
90006d1e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d20:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d22:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d26:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d2a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d2c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d2e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90006d32:	490d      	ldr	r1, [pc, #52]	; (90006d68 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d34:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d38:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d3a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90006d3e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d40:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d42:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d44:	f7fd ff2c 	bl	90004ba0 <HAL_InitTick>
90006d48:	b110      	cbz	r0, 90006d50 <HAL_Init+0x44>
  {
    return HAL_ERROR;
90006d4a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90006d4c:	4620      	mov	r0, r4
90006d4e:	bd10      	pop	{r4, pc}
90006d50:	4604      	mov	r4, r0
  HAL_MspInit();
90006d52:	f7fd fce3 	bl	9000471c <HAL_MspInit>
}
90006d56:	4620      	mov	r0, r4
90006d58:	bd10      	pop	{r4, pc}
90006d5a:	bf00      	nop
90006d5c:	24000058 	.word	0x24000058
90006d60:	58024400 	.word	0x58024400
90006d64:	900250b8 	.word	0x900250b8
90006d68:	24000054 	.word	0x24000054

90006d6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90006d6c:	4a03      	ldr	r2, [pc, #12]	; (90006d7c <HAL_IncTick+0x10>)
90006d6e:	4b04      	ldr	r3, [pc, #16]	; (90006d80 <HAL_IncTick+0x14>)
90006d70:	6811      	ldr	r1, [r2, #0]
90006d72:	781b      	ldrb	r3, [r3, #0]
90006d74:	440b      	add	r3, r1
90006d76:	6013      	str	r3, [r2, #0]
}
90006d78:	4770      	bx	lr
90006d7a:	bf00      	nop
90006d7c:	2400bdc8 	.word	0x2400bdc8
90006d80:	2400005c 	.word	0x2400005c

90006d84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90006d84:	4b01      	ldr	r3, [pc, #4]	; (90006d8c <HAL_GetTick+0x8>)
90006d86:	6818      	ldr	r0, [r3, #0]
}
90006d88:	4770      	bx	lr
90006d8a:	bf00      	nop
90006d8c:	2400bdc8 	.word	0x2400bdc8

90006d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90006d90:	b538      	push	{r3, r4, r5, lr}
90006d92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90006d94:	f7ff fff6 	bl	90006d84 <HAL_GetTick>
90006d98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90006d9a:	1c63      	adds	r3, r4, #1
90006d9c:	d002      	beq.n	90006da4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
90006d9e:	4b04      	ldr	r3, [pc, #16]	; (90006db0 <HAL_Delay+0x20>)
90006da0:	781b      	ldrb	r3, [r3, #0]
90006da2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90006da4:	f7ff ffee 	bl	90006d84 <HAL_GetTick>
90006da8:	1b43      	subs	r3, r0, r5
90006daa:	42a3      	cmp	r3, r4
90006dac:	d3fa      	bcc.n	90006da4 <HAL_Delay+0x14>
  {
  }
}
90006dae:	bd38      	pop	{r3, r4, r5, pc}
90006db0:	2400005c 	.word	0x2400005c

90006db4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90006db4:	4b01      	ldr	r3, [pc, #4]	; (90006dbc <HAL_GetREVID+0x8>)
90006db6:	6818      	ldr	r0, [r3, #0]
}
90006db8:	0c00      	lsrs	r0, r0, #16
90006dba:	4770      	bx	lr
90006dbc:	5c001000 	.word	0x5c001000

90006dc0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90006dc0:	4906      	ldr	r1, [pc, #24]	; (90006ddc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90006dc2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90006dc6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90006dc8:	4b05      	ldr	r3, [pc, #20]	; (90006de0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90006dca:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90006dcc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90006dd0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90006dd4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90006dd6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90006dd8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90006dda:	4770      	bx	lr
90006ddc:	e000ed00 	.word	0xe000ed00
90006de0:	05fa0000 	.word	0x05fa0000

90006de4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90006de4:	4b1b      	ldr	r3, [pc, #108]	; (90006e54 <HAL_NVIC_SetPriority+0x70>)
90006de6:	68db      	ldr	r3, [r3, #12]
90006de8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90006dec:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90006dee:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006df2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90006df6:	f1be 0f04 	cmp.w	lr, #4
90006dfa:	bf28      	it	cs
90006dfc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006e00:	f1bc 0f06 	cmp.w	ip, #6
90006e04:	d91a      	bls.n	90006e3c <HAL_NVIC_SetPriority+0x58>
90006e06:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90006e08:	f04f 3cff 	mov.w	ip, #4294967295
90006e0c:	fa0c fc03 	lsl.w	ip, ip, r3
90006e10:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90006e14:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90006e18:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90006e1a:	fa0c fc0e 	lsl.w	ip, ip, lr
90006e1e:	ea21 010c 	bic.w	r1, r1, ip
90006e22:	fa01 f103 	lsl.w	r1, r1, r3
90006e26:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90006e2a:	db0a      	blt.n	90006e42 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90006e2c:	0109      	lsls	r1, r1, #4
90006e2e:	4b0a      	ldr	r3, [pc, #40]	; (90006e58 <HAL_NVIC_SetPriority+0x74>)
90006e30:	b2c9      	uxtb	r1, r1
90006e32:	4403      	add	r3, r0
90006e34:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90006e38:	f85d fb04 	ldr.w	pc, [sp], #4
90006e3c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006e3e:	4613      	mov	r3, r2
90006e40:	e7e8      	b.n	90006e14 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90006e42:	f000 000f 	and.w	r0, r0, #15
90006e46:	0109      	lsls	r1, r1, #4
90006e48:	4b04      	ldr	r3, [pc, #16]	; (90006e5c <HAL_NVIC_SetPriority+0x78>)
90006e4a:	b2c9      	uxtb	r1, r1
90006e4c:	4403      	add	r3, r0
90006e4e:	7619      	strb	r1, [r3, #24]
90006e50:	f85d fb04 	ldr.w	pc, [sp], #4
90006e54:	e000ed00 	.word	0xe000ed00
90006e58:	e000e100 	.word	0xe000e100
90006e5c:	e000ecfc 	.word	0xe000ecfc

90006e60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90006e60:	2800      	cmp	r0, #0
90006e62:	db07      	blt.n	90006e74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90006e64:	2301      	movs	r3, #1
90006e66:	f000 011f 	and.w	r1, r0, #31
90006e6a:	4a03      	ldr	r2, [pc, #12]	; (90006e78 <HAL_NVIC_EnableIRQ+0x18>)
90006e6c:	0940      	lsrs	r0, r0, #5
90006e6e:	408b      	lsls	r3, r1
90006e70:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90006e74:	4770      	bx	lr
90006e76:	bf00      	nop
90006e78:	e000e100 	.word	0xe000e100

90006e7c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90006e7c:	2800      	cmp	r0, #0
90006e7e:	db0c      	blt.n	90006e9a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90006e80:	0943      	lsrs	r3, r0, #5
90006e82:	2201      	movs	r2, #1
90006e84:	f000 001f 	and.w	r0, r0, #31
90006e88:	4904      	ldr	r1, [pc, #16]	; (90006e9c <HAL_NVIC_DisableIRQ+0x20>)
90006e8a:	3320      	adds	r3, #32
90006e8c:	4082      	lsls	r2, r0
90006e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90006e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90006e96:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90006e9a:	4770      	bx	lr
90006e9c:	e000e100 	.word	0xe000e100

90006ea0 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90006ea0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90006ea4:	4b04      	ldr	r3, [pc, #16]	; (90006eb8 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90006ea6:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90006ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90006eaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90006eae:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90006eb0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90006eb4:	4770      	bx	lr
90006eb6:	bf00      	nop
90006eb8:	e000ed00 	.word	0xe000ed00

90006ebc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90006ebc:	4b06      	ldr	r3, [pc, #24]	; (90006ed8 <HAL_MPU_Enable+0x1c>)
90006ebe:	f040 0001 	orr.w	r0, r0, #1
90006ec2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90006ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90006ec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90006ecc:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90006ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90006ed2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90006ed6:	4770      	bx	lr
90006ed8:	e000ed00 	.word	0xe000ed00

90006edc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90006edc:	4a17      	ldr	r2, [pc, #92]	; (90006f3c <HAL_MPU_ConfigRegion+0x60>)
90006ede:	7843      	ldrb	r3, [r0, #1]
90006ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90006ee4:	7801      	ldrb	r1, [r0, #0]
90006ee6:	b321      	cbz	r1, 90006f32 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90006ee8:	6843      	ldr	r3, [r0, #4]
{
90006eea:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90006eec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90006ef0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006ef2:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90006ef6:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90006ef8:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006efc:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90006f00:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006f04:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90006f06:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006f08:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90006f0c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006f10:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90006f14:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006f18:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90006f1c:	7a01      	ldrb	r1, [r0, #8]
90006f1e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90006f22:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90006f26:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006f2a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90006f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90006f32:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90006f36:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90006f3a:	4770      	bx	lr
90006f3c:	e000ed00 	.word	0xe000ed00

90006f40 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90006f40:	2800      	cmp	r0, #0
90006f42:	d036      	beq.n	90006fb2 <HAL_CRC_Init+0x72>
{
90006f44:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90006f46:	7f43      	ldrb	r3, [r0, #29]
90006f48:	4604      	mov	r4, r0
90006f4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006f4e:	b363      	cbz	r3, 90006faa <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90006f50:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90006f52:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90006f54:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90006f56:	b9f3      	cbnz	r3, 90006f96 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90006f58:	6823      	ldr	r3, [r4, #0]
90006f5a:	4a17      	ldr	r2, [pc, #92]	; (90006fb8 <HAL_CRC_Init+0x78>)
90006f5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90006f5e:	689a      	ldr	r2, [r3, #8]
90006f60:	f022 0218 	bic.w	r2, r2, #24
90006f64:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90006f66:	7962      	ldrb	r2, [r4, #5]
90006f68:	b18a      	cbz	r2, 90006f8e <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90006f6a:	6922      	ldr	r2, [r4, #16]
90006f6c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90006f6e:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006f70:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90006f74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90006f78:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90006f7a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90006f7c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006f7e:	689a      	ldr	r2, [r3, #8]
90006f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90006f84:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90006f86:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006f88:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90006f8a:	7761      	strb	r1, [r4, #29]
}
90006f8c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90006f8e:	f04f 32ff 	mov.w	r2, #4294967295
90006f92:	611a      	str	r2, [r3, #16]
90006f94:	e7eb      	b.n	90006f6e <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90006f96:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90006f9a:	4620      	mov	r0, r4
90006f9c:	f000 f80e 	bl	90006fbc <HAL_CRCEx_Polynomial_Set>
90006fa0:	b908      	cbnz	r0, 90006fa6 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90006fa2:	6823      	ldr	r3, [r4, #0]
90006fa4:	e7df      	b.n	90006f66 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90006fa6:	2001      	movs	r0, #1
}
90006fa8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90006faa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90006fac:	f7fd fbd0 	bl	90004750 <HAL_CRC_MspInit>
90006fb0:	e7ce      	b.n	90006f50 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90006fb2:	2001      	movs	r0, #1
}
90006fb4:	4770      	bx	lr
90006fb6:	bf00      	nop
90006fb8:	04c11db7 	.word	0x04c11db7

90006fbc <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90006fbc:	07cb      	lsls	r3, r1, #31
90006fbe:	d51a      	bpl.n	90006ff6 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90006fc0:	231e      	movs	r3, #30
{
90006fc2:	b410      	push	{r4}
90006fc4:	e001      	b.n	90006fca <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90006fc6:	3b01      	subs	r3, #1
90006fc8:	d317      	bcc.n	90006ffa <HAL_CRCEx_Polynomial_Set+0x3e>
90006fca:	fa21 fc03 	lsr.w	ip, r1, r3
90006fce:	f01c 0f01 	tst.w	ip, #1
90006fd2:	d0f8      	beq.n	90006fc6 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90006fd4:	2a18      	cmp	r2, #24
90006fd6:	d811      	bhi.n	90006ffc <HAL_CRCEx_Polynomial_Set+0x40>
90006fd8:	e8df f002 	tbb	[pc, r2]
90006fdc:	10101016 	.word	0x10101016
90006fe0:	10101010 	.word	0x10101010
90006fe4:	10101024 	.word	0x10101024
90006fe8:	10101010 	.word	0x10101010
90006fec:	10101021 	.word	0x10101021
90006ff0:	10101010 	.word	0x10101010
90006ff4:	14          	.byte	0x14
90006ff5:	00          	.byte	0x00
    status =  HAL_ERROR;
90006ff6:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90006ff8:	4770      	bx	lr
    switch (PolyLength)
90006ffa:	b12a      	cbz	r2, 90007008 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90006ffc:	2001      	movs	r0, #1
}
90006ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
90007002:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90007004:	2b06      	cmp	r3, #6
90007006:	d8f9      	bhi.n	90006ffc <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90007008:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
9000700a:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
9000700c:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
9000700e:	68a3      	ldr	r3, [r4, #8]
90007010:	f023 0318 	bic.w	r3, r3, #24
90007014:	4313      	orrs	r3, r2
90007016:	60a3      	str	r3, [r4, #8]
}
90007018:	f85d 4b04 	ldr.w	r4, [sp], #4
9000701c:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
9000701e:	2b07      	cmp	r3, #7
90007020:	d9f2      	bls.n	90007008 <HAL_CRCEx_Polynomial_Set+0x4c>
90007022:	e7eb      	b.n	90006ffc <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90007024:	2b0f      	cmp	r3, #15
90007026:	d9ef      	bls.n	90007008 <HAL_CRCEx_Polynomial_Set+0x4c>
90007028:	e7e8      	b.n	90006ffc <HAL_CRCEx_Polynomial_Set+0x40>
9000702a:	bf00      	nop

9000702c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
9000702c:	2800      	cmp	r0, #0
9000702e:	d035      	beq.n	9000709c <HAL_DMA2D_Init+0x70>
{
90007030:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90007032:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90007036:	4604      	mov	r4, r0
90007038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000703c:	b34b      	cbz	r3, 90007092 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000703e:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007040:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007042:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007044:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007048:	69e1      	ldr	r1, [r4, #28]
9000704a:	681d      	ldr	r5, [r3, #0]
9000704c:	4814      	ldr	r0, [pc, #80]	; (900070a0 <HAL_DMA2D_Init+0x74>)
9000704e:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007050:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007052:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007054:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007056:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007058:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000705a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000705c:	4302      	orrs	r2, r0
9000705e:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007060:	4810      	ldr	r0, [pc, #64]	; (900070a4 <HAL_DMA2D_Init+0x78>)
90007062:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007064:	4910      	ldr	r1, [pc, #64]	; (900070a8 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007066:	4302      	orrs	r2, r0
90007068:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000706a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000706c:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000706e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007072:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007074:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007076:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007078:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000707a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000707e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007080:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90007084:	430a      	orrs	r2, r1
90007086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007088:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000708a:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000708c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90007090:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007092:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90007096:	f7fd fb73 	bl	90004780 <HAL_DMA2D_MspInit>
9000709a:	e7d0      	b.n	9000703e <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
9000709c:	2001      	movs	r0, #1
}
9000709e:	4770      	bx	lr
900070a0:	fff8ffbf 	.word	0xfff8ffbf
900070a4:	fffffef8 	.word	0xfffffef8
900070a8:	ffff0000 	.word	0xffff0000

900070ac <HAL_DMA2D_LineEventCallback>:
900070ac:	4770      	bx	lr
900070ae:	bf00      	nop

900070b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
900070b0:	4770      	bx	lr
900070b2:	bf00      	nop

900070b4 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
900070b4:	6803      	ldr	r3, [r0, #0]
{
900070b6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
900070b8:	685d      	ldr	r5, [r3, #4]
{
900070ba:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
900070bc:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
900070be:	07ea      	lsls	r2, r5, #31
900070c0:	d501      	bpl.n	900070c6 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
900070c2:	05f1      	lsls	r1, r6, #23
900070c4:	d456      	bmi.n	90007174 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
900070c6:	06aa      	lsls	r2, r5, #26
900070c8:	d501      	bpl.n	900070ce <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
900070ca:	04b3      	lsls	r3, r6, #18
900070cc:	d43b      	bmi.n	90007146 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900070ce:	0728      	lsls	r0, r5, #28
900070d0:	d501      	bpl.n	900070d6 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
900070d2:	0531      	lsls	r1, r6, #20
900070d4:	d421      	bmi.n	9000711a <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
900070d6:	076a      	lsls	r2, r5, #29
900070d8:	d501      	bpl.n	900070de <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
900070da:	0573      	lsls	r3, r6, #21
900070dc:	d472      	bmi.n	900071c4 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
900070de:	07a8      	lsls	r0, r5, #30
900070e0:	d501      	bpl.n	900070e6 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
900070e2:	05b1      	lsls	r1, r6, #22
900070e4:	d404      	bmi.n	900070f0 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
900070e6:	06ea      	lsls	r2, r5, #27
900070e8:	d501      	bpl.n	900070ee <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
900070ea:	04f3      	lsls	r3, r6, #19
900070ec:	d457      	bmi.n	9000719e <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
900070ee:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
900070f0:	6823      	ldr	r3, [r4, #0]
900070f2:	681a      	ldr	r2, [r3, #0]
900070f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
900070f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
900070fa:	2202      	movs	r2, #2
900070fc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
900070fe:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007100:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007102:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007104:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007106:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000710a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
9000710e:	6a23      	ldr	r3, [r4, #32]
90007110:	2b00      	cmp	r3, #0
90007112:	d0e8      	beq.n	900070e6 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90007114:	4620      	mov	r0, r4
90007116:	4798      	blx	r3
90007118:	e7e5      	b.n	900070e6 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
9000711a:	6823      	ldr	r3, [r4, #0]
9000711c:	681a      	ldr	r2, [r3, #0]
9000711e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90007122:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90007124:	2208      	movs	r2, #8
90007126:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007128:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000712a:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000712c:	4313      	orrs	r3, r2
9000712e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007130:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007134:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007138:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000713c:	2b00      	cmp	r3, #0
9000713e:	d0ca      	beq.n	900070d6 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007140:	4620      	mov	r0, r4
90007142:	4798      	blx	r3
90007144:	e7c7      	b.n	900070d6 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90007146:	6823      	ldr	r3, [r4, #0]
90007148:	681a      	ldr	r2, [r3, #0]
9000714a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
9000714e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007150:	2220      	movs	r2, #32
90007152:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007154:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90007156:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007158:	f043 0302 	orr.w	r3, r3, #2
9000715c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000715e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007162:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007164:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007166:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000716a:	2b00      	cmp	r3, #0
9000716c:	d0af      	beq.n	900070ce <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
9000716e:	4620      	mov	r0, r4
90007170:	4798      	blx	r3
90007172:	e7ac      	b.n	900070ce <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007174:	681a      	ldr	r2, [r3, #0]
90007176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000717a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000717c:	6e42      	ldr	r2, [r0, #100]	; 0x64
9000717e:	f042 0201 	orr.w	r2, r2, #1
90007182:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007184:	2201      	movs	r2, #1
90007186:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007188:	2304      	movs	r3, #4
9000718a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000718e:	2300      	movs	r3, #0
90007190:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007194:	6a43      	ldr	r3, [r0, #36]	; 0x24
90007196:	2b00      	cmp	r3, #0
90007198:	d095      	beq.n	900070c6 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
9000719a:	4798      	blx	r3
9000719c:	e793      	b.n	900070c6 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000719e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
900071a0:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
900071a2:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
900071a4:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
900071a6:	681a      	ldr	r2, [r3, #0]
900071a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
900071ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
900071ae:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
900071b0:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900071b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
900071b4:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900071b8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
900071ba:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
900071be:	f7ff ff77 	bl	900070b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
900071c2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900071c4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
900071c6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900071c8:	681a      	ldr	r2, [r3, #0]
900071ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
900071ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
900071d0:	2204      	movs	r2, #4
900071d2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
900071d4:	f7ff ff6a 	bl	900070ac <HAL_DMA2D_LineEventCallback>
900071d8:	e781      	b.n	900070de <HAL_DMA2D_IRQHandler+0x2a>
900071da:	bf00      	nop

900071dc <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900071dc:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
900071e0:	2a01      	cmp	r2, #1
900071e2:	d065      	beq.n	900072b0 <HAL_DMA2D_ConfigLayer+0xd4>
900071e4:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900071e6:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900071ea:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900071ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
900071f0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
900071f2:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900071f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
900071f8:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900071fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900071fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90007200:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007202:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007204:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007208:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
9000720c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000720e:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007212:	ea42 0204 	orr.w	r2, r2, r4
90007216:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000721a:	d922      	bls.n	90007262 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
9000721c:	6b45      	ldr	r5, [r0, #52]	; 0x34
9000721e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007222:	b981      	cbnz	r1, 90007246 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007224:	6818      	ldr	r0, [r3, #0]
90007226:	4923      	ldr	r1, [pc, #140]	; (900072b4 <HAL_DMA2D_ConfigLayer+0xd8>)
90007228:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000722a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000722c:	4029      	ands	r1, r5
9000722e:	4311      	orrs	r1, r2
90007230:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007232:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90007234:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007236:	2101      	movs	r1, #1

  return HAL_OK;
90007238:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000723a:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
9000723e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90007242:	bc70      	pop	{r4, r5, r6}
90007244:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007246:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007248:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000724a:	d129      	bne.n	900072a0 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000724c:	69e5      	ldr	r5, [r4, #28]
9000724e:	491a      	ldr	r1, [pc, #104]	; (900072b8 <HAL_DMA2D_ConfigLayer+0xdc>)
90007250:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90007252:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007254:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007256:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
9000725a:	4311      	orrs	r1, r2
9000725c:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000725e:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007260:	e7e8      	b.n	90007234 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90007262:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007264:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90007268:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000726a:	b961      	cbnz	r1, 90007286 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000726c:	6819      	ldr	r1, [r3, #0]
9000726e:	4a11      	ldr	r2, [pc, #68]	; (900072b4 <HAL_DMA2D_ConfigLayer+0xd8>)
90007270:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007272:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007274:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007276:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000727c:	4322      	orrs	r2, r4
9000727e:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007280:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007282:	6288      	str	r0, [r1, #40]	; 0x28
90007284:	e7d6      	b.n	90007234 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007286:	6819      	ldr	r1, [r3, #0]
90007288:	4a0a      	ldr	r2, [pc, #40]	; (900072b4 <HAL_DMA2D_ConfigLayer+0xd8>)
9000728a:	69cd      	ldr	r5, [r1, #28]
9000728c:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000728e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007290:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007292:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007294:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007298:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000729a:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000729c:	620c      	str	r4, [r1, #32]
9000729e:	e7c9      	b.n	90007234 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900072a0:	69e5      	ldr	r5, [r4, #28]
900072a2:	4904      	ldr	r1, [pc, #16]	; (900072b4 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900072a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900072a6:	4029      	ands	r1, r5
900072a8:	4311      	orrs	r1, r2
900072aa:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900072ac:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900072ae:	e7c1      	b.n	90007234 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
900072b0:	2002      	movs	r0, #2
}
900072b2:	4770      	bx	lr
900072b4:	00ccfff0 	.word	0x00ccfff0
900072b8:	00c0fff0 	.word	0x00c0fff0

900072bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
900072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900072c0:	680c      	ldr	r4, [r1, #0]
{
900072c2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900072c4:	2c00      	cmp	r4, #0
900072c6:	f000 80a7 	beq.w	90007418 <HAL_GPIO_Init+0x15c>
900072ca:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900072ce:	4f8a      	ldr	r7, [pc, #552]	; (900074f8 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
900072d0:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
900072d2:	2201      	movs	r2, #1
900072d4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
900072d6:	ea12 0e04 	ands.w	lr, r2, r4
900072da:	f000 8096 	beq.w	9000740a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900072de:	684d      	ldr	r5, [r1, #4]
900072e0:	f005 0903 	and.w	r9, r5, #3
900072e4:	f109 36ff 	add.w	r6, r9, #4294967295
900072e8:	2e01      	cmp	r6, #1
900072ea:	f240 8098 	bls.w	9000741e <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900072ee:	f1b9 0f03 	cmp.w	r9, #3
900072f2:	f040 80d2 	bne.w	9000749a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900072f6:	fa09 f20c 	lsl.w	r2, r9, ip
900072fa:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
900072fe:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90007300:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90007304:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90007308:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
9000730c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000730e:	d07c      	beq.n	9000740a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007310:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90007314:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007318:	f003 0903 	and.w	r9, r3, #3
9000731c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000731e:	f042 0202 	orr.w	r2, r2, #2
90007322:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007326:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000732a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
9000732e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90007332:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007336:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000733a:	f002 0202 	and.w	r2, r2, #2
9000733e:	9201      	str	r2, [sp, #4]
90007340:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90007342:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007346:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000734a:	4e6c      	ldr	r6, [pc, #432]	; (900074fc <HAL_GPIO_Init+0x240>)
9000734c:	42b0      	cmp	r0, r6
9000734e:	d028      	beq.n	900073a2 <HAL_GPIO_Init+0xe6>
90007350:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90007354:	42b0      	cmp	r0, r6
90007356:	f000 80ac 	beq.w	900074b2 <HAL_GPIO_Init+0x1f6>
9000735a:	4e69      	ldr	r6, [pc, #420]	; (90007500 <HAL_GPIO_Init+0x244>)
9000735c:	42b0      	cmp	r0, r6
9000735e:	f000 80ad 	beq.w	900074bc <HAL_GPIO_Init+0x200>
90007362:	4e68      	ldr	r6, [pc, #416]	; (90007504 <HAL_GPIO_Init+0x248>)
90007364:	42b0      	cmp	r0, r6
90007366:	f000 809f 	beq.w	900074a8 <HAL_GPIO_Init+0x1ec>
9000736a:	4e67      	ldr	r6, [pc, #412]	; (90007508 <HAL_GPIO_Init+0x24c>)
9000736c:	42b0      	cmp	r0, r6
9000736e:	f000 80af 	beq.w	900074d0 <HAL_GPIO_Init+0x214>
90007372:	4e66      	ldr	r6, [pc, #408]	; (9000750c <HAL_GPIO_Init+0x250>)
90007374:	42b0      	cmp	r0, r6
90007376:	f000 80b0 	beq.w	900074da <HAL_GPIO_Init+0x21e>
9000737a:	4e65      	ldr	r6, [pc, #404]	; (90007510 <HAL_GPIO_Init+0x254>)
9000737c:	42b0      	cmp	r0, r6
9000737e:	f000 80a2 	beq.w	900074c6 <HAL_GPIO_Init+0x20a>
90007382:	4e64      	ldr	r6, [pc, #400]	; (90007514 <HAL_GPIO_Init+0x258>)
90007384:	42b0      	cmp	r0, r6
90007386:	f000 80ad 	beq.w	900074e4 <HAL_GPIO_Init+0x228>
9000738a:	4e63      	ldr	r6, [pc, #396]	; (90007518 <HAL_GPIO_Init+0x25c>)
9000738c:	42b0      	cmp	r0, r6
9000738e:	f000 80ae 	beq.w	900074ee <HAL_GPIO_Init+0x232>
90007392:	4e62      	ldr	r6, [pc, #392]	; (9000751c <HAL_GPIO_Init+0x260>)
90007394:	42b0      	cmp	r0, r6
90007396:	bf0c      	ite	eq
90007398:	2609      	moveq	r6, #9
9000739a:	260a      	movne	r6, #10
9000739c:	fa06 f609 	lsl.w	r6, r6, r9
900073a0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
900073a2:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900073a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900073aa:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
900073ae:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
900073b2:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
900073b4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900073b8:	bf0c      	ite	eq
900073ba:	4032      	andeq	r2, r6
          temp |= iocurrent;
900073bc:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
900073c0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
900073c4:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
900073c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
900073cc:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900073d0:	bf0c      	ite	eq
900073d2:	4032      	andeq	r2, r6
          temp |= iocurrent;
900073d4:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
900073d8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
900073dc:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
900073e0:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
900073e4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900073e8:	bf0c      	ite	eq
900073ea:	4032      	andeq	r2, r6
          temp |= iocurrent;
900073ec:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900073f0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
900073f2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
900073f6:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
900073fa:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
900073fe:	bf54      	ite	pl
90007400:	4032      	andpl	r2, r6
          temp |= iocurrent;
90007402:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90007406:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
9000740a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000740c:	f10c 0c02 	add.w	ip, ip, #2
90007410:	fa34 f203 	lsrs.w	r2, r4, r3
90007414:	f47f af5d 	bne.w	900072d2 <HAL_GPIO_Init+0x16>
  }
}
90007418:	b003      	add	sp, #12
9000741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000741e:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90007422:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007424:	fa08 f80c 	lsl.w	r8, r8, ip
90007428:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
9000742c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000742e:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90007432:	fa06 f60c 	lsl.w	r6, r6, ip
90007436:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
9000743a:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000743c:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90007440:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007444:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90007446:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000744a:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
9000744c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
9000744e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90007450:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007454:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90007456:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000745a:	fa06 f60c 	lsl.w	r6, r6, ip
9000745e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90007462:	fa09 f20c 	lsl.w	r2, r9, ip
90007466:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90007468:	f47f af49 	bne.w	900072fe <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
9000746c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007470:	f003 0b07 	and.w	fp, r3, #7
90007474:	260f      	movs	r6, #15
90007476:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000747a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
9000747e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007482:	fa06 f60b 	lsl.w	r6, r6, fp
90007486:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000748a:	690e      	ldr	r6, [r1, #16]
9000748c:	fa06 f60b 	lsl.w	r6, r6, fp
90007490:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90007494:	f8c9 6020 	str.w	r6, [r9, #32]
90007498:	e731      	b.n	900072fe <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000749a:	f04f 0803 	mov.w	r8, #3
9000749e:	fa08 f80c 	lsl.w	r8, r8, ip
900074a2:	ea6f 0808 	mvn.w	r8, r8
900074a6:	e7d2      	b.n	9000744e <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900074a8:	2603      	movs	r6, #3
900074aa:	fa06 f609 	lsl.w	r6, r6, r9
900074ae:	4332      	orrs	r2, r6
900074b0:	e777      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074b2:	2601      	movs	r6, #1
900074b4:	fa06 f609 	lsl.w	r6, r6, r9
900074b8:	4332      	orrs	r2, r6
900074ba:	e772      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074bc:	2602      	movs	r6, #2
900074be:	fa06 f609 	lsl.w	r6, r6, r9
900074c2:	4332      	orrs	r2, r6
900074c4:	e76d      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074c6:	2606      	movs	r6, #6
900074c8:	fa06 f609 	lsl.w	r6, r6, r9
900074cc:	4332      	orrs	r2, r6
900074ce:	e768      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074d0:	2604      	movs	r6, #4
900074d2:	fa06 f609 	lsl.w	r6, r6, r9
900074d6:	4332      	orrs	r2, r6
900074d8:	e763      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074da:	2605      	movs	r6, #5
900074dc:	fa06 f609 	lsl.w	r6, r6, r9
900074e0:	4332      	orrs	r2, r6
900074e2:	e75e      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074e4:	2607      	movs	r6, #7
900074e6:	fa06 f609 	lsl.w	r6, r6, r9
900074ea:	4332      	orrs	r2, r6
900074ec:	e759      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074ee:	2608      	movs	r6, #8
900074f0:	fa06 f609 	lsl.w	r6, r6, r9
900074f4:	4332      	orrs	r2, r6
900074f6:	e754      	b.n	900073a2 <HAL_GPIO_Init+0xe6>
900074f8:	58024400 	.word	0x58024400
900074fc:	58020000 	.word	0x58020000
90007500:	58020800 	.word	0x58020800
90007504:	58020c00 	.word	0x58020c00
90007508:	58021000 	.word	0x58021000
9000750c:	58021400 	.word	0x58021400
90007510:	58021800 	.word	0x58021800
90007514:	58021c00 	.word	0x58021c00
90007518:	58022000 	.word	0x58022000
9000751c:	58022400 	.word	0x58022400

90007520 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90007520:	2900      	cmp	r1, #0
90007522:	f000 80a4 	beq.w	9000766e <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
90007526:	2300      	movs	r3, #0
{
90007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000752c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90007698 <HAL_GPIO_DeInit+0x178>
90007530:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007532:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9000769c <HAL_GPIO_DeInit+0x17c>
90007536:	f8df a168 	ldr.w	sl, [pc, #360]	; 900076a0 <HAL_GPIO_DeInit+0x180>
9000753a:	f8df b168 	ldr.w	fp, [pc, #360]	; 900076a4 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
9000753e:	f04f 0e01 	mov.w	lr, #1
90007542:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90007546:	ea12 0c01 	ands.w	ip, r2, r1
9000754a:	d06b      	beq.n	90007624 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000754c:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90007550:	f003 0403 	and.w	r4, r3, #3
90007554:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007556:	4540      	cmp	r0, r8
90007558:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000755a:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000755e:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90007560:	fa06 f604 	lsl.w	r6, r6, r4
90007564:	ea07 0706 	and.w	r7, r7, r6
90007568:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000756a:	d01f      	beq.n	900075ac <HAL_GPIO_DeInit+0x8c>
9000756c:	4550      	cmp	r0, sl
9000756e:	d01a      	beq.n	900075a6 <HAL_GPIO_DeInit+0x86>
90007570:	4558      	cmp	r0, fp
90007572:	d05e      	beq.n	90007632 <HAL_GPIO_DeInit+0x112>
90007574:	4f43      	ldr	r7, [pc, #268]	; (90007684 <HAL_GPIO_DeInit+0x164>)
90007576:	42b8      	cmp	r0, r7
90007578:	d065      	beq.n	90007646 <HAL_GPIO_DeInit+0x126>
9000757a:	4f43      	ldr	r7, [pc, #268]	; (90007688 <HAL_GPIO_DeInit+0x168>)
9000757c:	42b8      	cmp	r0, r7
9000757e:	d067      	beq.n	90007650 <HAL_GPIO_DeInit+0x130>
90007580:	4f42      	ldr	r7, [pc, #264]	; (9000768c <HAL_GPIO_DeInit+0x16c>)
90007582:	42b8      	cmp	r0, r7
90007584:	d05a      	beq.n	9000763c <HAL_GPIO_DeInit+0x11c>
90007586:	4f42      	ldr	r7, [pc, #264]	; (90007690 <HAL_GPIO_DeInit+0x170>)
90007588:	42b8      	cmp	r0, r7
9000758a:	d06b      	beq.n	90007664 <HAL_GPIO_DeInit+0x144>
9000758c:	4f41      	ldr	r7, [pc, #260]	; (90007694 <HAL_GPIO_DeInit+0x174>)
9000758e:	42b8      	cmp	r0, r7
90007590:	d06e      	beq.n	90007670 <HAL_GPIO_DeInit+0x150>
90007592:	f8df e114 	ldr.w	lr, [pc, #276]	; 900076a8 <HAL_GPIO_DeInit+0x188>
90007596:	4570      	cmp	r0, lr
90007598:	d05f      	beq.n	9000765a <HAL_GPIO_DeInit+0x13a>
9000759a:	f8df e110 	ldr.w	lr, [pc, #272]	; 900076ac <HAL_GPIO_DeInit+0x18c>
9000759e:	4570      	cmp	r0, lr
900075a0:	d06b      	beq.n	9000767a <HAL_GPIO_DeInit+0x15a>
900075a2:	f04f 0e0a 	mov.w	lr, #10
900075a6:	fa0e f404 	lsl.w	r4, lr, r4
900075aa:	e000      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
900075ac:	2400      	movs	r4, #0
900075ae:	9f01      	ldr	r7, [sp, #4]
900075b0:	42a7      	cmp	r7, r4
900075b2:	d119      	bne.n	900075e8 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
900075b4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
900075b8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
900075bc:	ea27 070c 	bic.w	r7, r7, ip
900075c0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
900075c4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
900075c8:	ea27 070c 	bic.w	r7, r7, ip
900075cc:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
900075d0:	6867      	ldr	r7, [r4, #4]
900075d2:	ea27 070c 	bic.w	r7, r7, ip
900075d6:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
900075d8:	6827      	ldr	r7, [r4, #0]
900075da:	ea27 070c 	bic.w	r7, r7, ip
900075de:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900075e0:	68ac      	ldr	r4, [r5, #8]
900075e2:	ea24 0406 	bic.w	r4, r4, r6
900075e6:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900075e8:	005d      	lsls	r5, r3, #1
900075ea:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900075ec:	f003 0607 	and.w	r6, r3, #7
900075f0:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900075f2:	40ac      	lsls	r4, r5
900075f4:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900075f6:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900075f8:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900075fa:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900075fc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900075fe:	08dd      	lsrs	r5, r3, #3
90007600:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90007604:	6a2e      	ldr	r6, [r5, #32]
90007606:	ea26 0607 	bic.w	r6, r6, r7
9000760a:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000760c:	68c5      	ldr	r5, [r0, #12]
9000760e:	ea25 0504 	bic.w	r5, r5, r4
90007612:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90007614:	6845      	ldr	r5, [r0, #4]
90007616:	ea25 0202 	bic.w	r2, r5, r2
9000761a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000761c:	6882      	ldr	r2, [r0, #8]
9000761e:	ea22 0204 	bic.w	r2, r2, r4
90007622:	6082      	str	r2, [r0, #8]
    }

    position++;
90007624:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90007626:	fa31 f203 	lsrs.w	r2, r1, r3
9000762a:	d188      	bne.n	9000753e <HAL_GPIO_DeInit+0x1e>
  }
}
9000762c:	b003      	add	sp, #12
9000762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007632:	f04f 0e02 	mov.w	lr, #2
90007636:	fa0e f404 	lsl.w	r4, lr, r4
9000763a:	e7b8      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
9000763c:	f04f 0e05 	mov.w	lr, #5
90007640:	fa0e f404 	lsl.w	r4, lr, r4
90007644:	e7b3      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
90007646:	f04f 0e03 	mov.w	lr, #3
9000764a:	fa0e f404 	lsl.w	r4, lr, r4
9000764e:	e7ae      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
90007650:	f04f 0e04 	mov.w	lr, #4
90007654:	fa0e f404 	lsl.w	r4, lr, r4
90007658:	e7a9      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
9000765a:	f04f 0e08 	mov.w	lr, #8
9000765e:	fa0e f404 	lsl.w	r4, lr, r4
90007662:	e7a4      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
90007664:	f04f 0e06 	mov.w	lr, #6
90007668:	fa0e f404 	lsl.w	r4, lr, r4
9000766c:	e79f      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
9000766e:	4770      	bx	lr
90007670:	f04f 0e07 	mov.w	lr, #7
90007674:	fa0e f404 	lsl.w	r4, lr, r4
90007678:	e799      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
9000767a:	f04f 0e09 	mov.w	lr, #9
9000767e:	fa0e f404 	lsl.w	r4, lr, r4
90007682:	e794      	b.n	900075ae <HAL_GPIO_DeInit+0x8e>
90007684:	58020c00 	.word	0x58020c00
90007688:	58021000 	.word	0x58021000
9000768c:	58021400 	.word	0x58021400
90007690:	58021800 	.word	0x58021800
90007694:	58021c00 	.word	0x58021c00
90007698:	58000400 	.word	0x58000400
9000769c:	58020000 	.word	0x58020000
900076a0:	58020400 	.word	0x58020400
900076a4:	58020800 	.word	0x58020800
900076a8:	58022000 	.word	0x58022000
900076ac:	58022400 	.word	0x58022400

900076b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
900076b0:	6903      	ldr	r3, [r0, #16]
900076b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
900076b4:	bf14      	ite	ne
900076b6:	2001      	movne	r0, #1
900076b8:	2000      	moveq	r0, #0
900076ba:	4770      	bx	lr

900076bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900076bc:	b902      	cbnz	r2, 900076c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
900076be:	0409      	lsls	r1, r1, #16
900076c0:	6181      	str	r1, [r0, #24]
  }
}
900076c2:	4770      	bx	lr

900076c4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
900076c4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
900076c6:	ea01 0203 	and.w	r2, r1, r3
900076ca:	ea21 0103 	bic.w	r1, r1, r3
900076ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900076d2:	6181      	str	r1, [r0, #24]
}
900076d4:	4770      	bx	lr
900076d6:	bf00      	nop

900076d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900076dc:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900076de:	f04f 0820 	mov.w	r8, #32
{
900076e2:	4605      	mov	r5, r0
900076e4:	460e      	mov	r6, r1
900076e6:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900076e8:	6998      	ldr	r0, [r3, #24]
900076ea:	f010 0902 	ands.w	r9, r0, #2
900076ee:	f040 809e 	bne.w	9000782e <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
900076f2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900076f4:	f014 0410 	ands.w	r4, r4, #16
900076f8:	d068      	beq.n	900077cc <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900076fa:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
900076fc:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
900076fe:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007700:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007702:	1c71      	adds	r1, r6, #1
90007704:	699a      	ldr	r2, [r3, #24]
90007706:	d163      	bne.n	900077d0 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
90007708:	0690      	lsls	r0, r2, #26
9000770a:	f100 8093 	bmi.w	90007834 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000770e:	f1ba 0f00 	cmp.w	sl, #0
90007712:	d104      	bne.n	9000771e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90007714:	699c      	ldr	r4, [r3, #24]
90007716:	06a1      	lsls	r1, r4, #26
90007718:	d5fc      	bpl.n	90007714 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000771a:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000771e:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90007722:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90007724:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007726:	05d0      	lsls	r0, r2, #23
90007728:	d530      	bpl.n	9000778c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000772a:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000772e:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007730:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007734:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007736:	d504      	bpl.n	90007742 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007738:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000773c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007740:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007742:	0591      	lsls	r1, r2, #22
90007744:	d504      	bpl.n	90007750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007746:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000774a:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000774e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007750:	699a      	ldr	r2, [r3, #24]
90007752:	0790      	lsls	r0, r2, #30
90007754:	d501      	bpl.n	9000775a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
90007756:	2200      	movs	r2, #0
90007758:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000775a:	699a      	ldr	r2, [r3, #24]
9000775c:	07d1      	lsls	r1, r2, #31
9000775e:	d403      	bmi.n	90007768 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007760:	699a      	ldr	r2, [r3, #24]
90007762:	f042 0201 	orr.w	r2, r2, #1
90007766:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90007768:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000776a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000776c:	4834      	ldr	r0, [pc, #208]	; (90007840 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
9000776e:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90007770:	4002      	ands	r2, r0
      return HAL_ERROR;
90007772:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90007774:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007776:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007778:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000777c:	4323      	orrs	r3, r4
9000777e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007780:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007784:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000778c:	0550      	lsls	r0, r2, #21
9000778e:	d4d3      	bmi.n	90007738 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007790:	0592      	lsls	r2, r2, #22
90007792:	d4d8      	bmi.n	90007746 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90007794:	2900      	cmp	r1, #0
90007796:	d1db      	bne.n	90007750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90007798:	1c72      	adds	r2, r6, #1
9000779a:	d0a5      	beq.n	900076e8 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000779c:	f7ff faf2 	bl	90006d84 <HAL_GetTick>
900077a0:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900077a2:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900077a4:	42b0      	cmp	r0, r6
900077a6:	d801      	bhi.n	900077ac <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
900077a8:	2e00      	cmp	r6, #0
900077aa:	d19d      	bne.n	900076e8 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900077ac:	699a      	ldr	r2, [r3, #24]
900077ae:	f012 0202 	ands.w	r2, r2, #2
900077b2:	d199      	bne.n	900076e8 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900077b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900077b6:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
900077b8:	2001      	movs	r0, #1
900077ba:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900077be:	430b      	orrs	r3, r1
900077c0:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900077c2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900077c6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
900077ca:	e7dd      	b.n	90007788 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
900077cc:	4621      	mov	r1, r4
900077ce:	e7a9      	b.n	90007724 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900077d0:	0692      	lsls	r2, r2, #26
900077d2:	d42f      	bmi.n	90007834 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
900077d4:	f1ba 0f00 	cmp.w	sl, #0
900077d8:	d1a1      	bne.n	9000771e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900077da:	f7ff fad3 	bl	90006d84 <HAL_GetTick>
900077de:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900077e0:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900077e2:	4286      	cmp	r6, r0
900077e4:	d301      	bcc.n	900077ea <I2C_WaitOnTXISFlagUntilTimeout+0x112>
900077e6:	2e00      	cmp	r6, #0
900077e8:	d18b      	bne.n	90007702 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900077ea:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
900077ec:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900077f0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
900077f2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900077f4:	0409      	lsls	r1, r1, #16
900077f6:	d50b      	bpl.n	90007810 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
900077f8:	0441      	lsls	r1, r0, #17
900077fa:	d409      	bmi.n	90007810 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
900077fc:	2a20      	cmp	r2, #32
900077fe:	d007      	beq.n	90007810 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007800:	685a      	ldr	r2, [r3, #4]
90007802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007806:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007808:	f7ff fabc 	bl	90006d84 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000780c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
9000780e:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007810:	699a      	ldr	r2, [r3, #24]
90007812:	0690      	lsls	r0, r2, #26
90007814:	f53f af75 	bmi.w	90007702 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007818:	f7ff fab4 	bl	90006d84 <HAL_GetTick>
9000781c:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000781e:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007820:	2819      	cmp	r0, #25
90007822:	d9f5      	bls.n	90007810 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007824:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
90007828:	f04f 0a01 	mov.w	sl, #1
9000782c:	e769      	b.n	90007702 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
9000782e:	2000      	movs	r0, #0
}
90007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90007834:	f1ba 0f00 	cmp.w	sl, #0
90007838:	f43f af6f 	beq.w	9000771a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
9000783c:	e76f      	b.n	9000771e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000783e:	bf00      	nop
90007840:	fe00e800 	.word	0xfe00e800

90007844 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007848:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000784a:	6802      	ldr	r2, [r0, #0]
{
9000784c:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000784e:	6991      	ldr	r1, [r2, #24]
90007850:	068c      	lsls	r4, r1, #26
90007852:	d469      	bmi.n	90007928 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90007854:	4606      	mov	r6, r0
90007856:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007858:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
9000785c:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000785e:	f014 0410 	ands.w	r4, r4, #16
90007862:	d064      	beq.n	9000792e <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90007864:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007866:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
90007868:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000786a:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
9000786e:	46aa      	mov	sl, r5
90007870:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007872:	699a      	ldr	r2, [r3, #24]
90007874:	d15d      	bne.n	90007932 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90007876:	0690      	lsls	r0, r2, #26
90007878:	f100 8083 	bmi.w	90007982 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000787c:	f1ba 0f00 	cmp.w	sl, #0
90007880:	d104      	bne.n	9000788c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90007882:	699c      	ldr	r4, [r3, #24]
90007884:	06a1      	lsls	r1, r4, #26
90007886:	d5fc      	bpl.n	90007882 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007888:	2220      	movs	r2, #32
9000788a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
9000788c:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90007890:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90007892:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007894:	05d0      	lsls	r0, r2, #23
90007896:	d530      	bpl.n	900078fa <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007898:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000789c:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000789e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900078a2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900078a4:	d504      	bpl.n	900078b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900078a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
900078aa:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900078ae:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900078b0:	0591      	lsls	r1, r2, #22
900078b2:	d504      	bpl.n	900078be <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900078b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
900078b8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900078bc:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900078be:	699a      	ldr	r2, [r3, #24]
900078c0:	0795      	lsls	r5, r2, #30
900078c2:	d501      	bpl.n	900078c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
900078c4:	2200      	movs	r2, #0
900078c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900078c8:	699a      	ldr	r2, [r3, #24]
900078ca:	07d0      	lsls	r0, r2, #31
900078cc:	d403      	bmi.n	900078d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900078ce:	699a      	ldr	r2, [r3, #24]
900078d0:	f042 0201 	orr.w	r2, r2, #1
900078d4:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
900078d6:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
900078d8:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
900078da:	4837      	ldr	r0, [pc, #220]	; (900079b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
900078dc:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
900078de:	4002      	ands	r2, r0
      return HAL_ERROR;
900078e0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
900078e2:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
900078e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
900078e6:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900078ea:	4323      	orrs	r3, r4
900078ec:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900078ee:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900078f2:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
900078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900078fa:	0550      	lsls	r0, r2, #21
900078fc:	d4d3      	bmi.n	900078a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900078fe:	0592      	lsls	r2, r2, #22
90007900:	d4d8      	bmi.n	900078b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90007902:	2900      	cmp	r1, #0
90007904:	d1db      	bne.n	900078be <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007906:	f7ff fa3d 	bl	90006d84 <HAL_GetTick>
9000790a:	eba0 0008 	sub.w	r0, r0, r8
9000790e:	42b8      	cmp	r0, r7
90007910:	d801      	bhi.n	90007916 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
90007912:	2f00      	cmp	r7, #0
90007914:	d132      	bne.n	9000797c <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007916:	6832      	ldr	r2, [r6, #0]
90007918:	6991      	ldr	r1, [r2, #24]
9000791a:	4613      	mov	r3, r2
9000791c:	f011 0120 	ands.w	r1, r1, #32
90007920:	d034      	beq.n	9000798c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007922:	6991      	ldr	r1, [r2, #24]
90007924:	0689      	lsls	r1, r1, #26
90007926:	d599      	bpl.n	9000785c <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
90007928:	2000      	movs	r0, #0
}
9000792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
9000792e:	4621      	mov	r1, r4
90007930:	e7af      	b.n	90007892 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007932:	0692      	lsls	r2, r2, #26
90007934:	d425      	bmi.n	90007982 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90007936:	f1ba 0f00 	cmp.w	sl, #0
9000793a:	d1a7      	bne.n	9000788c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000793c:	f7ff fa22 	bl	90006d84 <HAL_GetTick>
90007940:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007942:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007944:	4287      	cmp	r7, r0
90007946:	d301      	bcc.n	9000794c <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
90007948:	2f00      	cmp	r7, #0
9000794a:	d191      	bne.n	90007870 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000794c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000794e:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007952:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007954:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007956:	0409      	lsls	r1, r1, #16
90007958:	d503      	bpl.n	90007962 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
9000795a:	0441      	lsls	r1, r0, #17
9000795c:	d401      	bmi.n	90007962 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000795e:	2a20      	cmp	r2, #32
90007960:	d121      	bne.n	900079a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007962:	699a      	ldr	r2, [r3, #24]
90007964:	0690      	lsls	r0, r2, #26
90007966:	d483      	bmi.n	90007870 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007968:	f7ff fa0c 	bl	90006d84 <HAL_GetTick>
9000796c:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000796e:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007970:	2819      	cmp	r0, #25
90007972:	d9f6      	bls.n	90007962 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007974:	2520      	movs	r5, #32
              status = HAL_ERROR;
90007976:	f04f 0a01 	mov.w	sl, #1
9000797a:	e779      	b.n	90007870 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000797c:	6833      	ldr	r3, [r6, #0]
9000797e:	461a      	mov	r2, r3
90007980:	e7cf      	b.n	90007922 <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
90007982:	f1ba 0f00 	cmp.w	sl, #0
90007986:	f43f af7f 	beq.w	90007888 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000798a:	e77f      	b.n	9000788c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000798c:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000798e:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
90007990:	2001      	movs	r0, #1
90007992:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007996:	4313      	orrs	r3, r2
90007998:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000799a:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000799e:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
900079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900079a6:	685a      	ldr	r2, [r3, #4]
900079a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900079ac:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
900079ae:	f7ff f9e9 	bl	90006d84 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900079b2:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
900079b4:	4604      	mov	r4, r0
900079b6:	e7d4      	b.n	90007962 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
900079b8:	fe00e800 	.word	0xfe00e800

900079bc <HAL_I2C_MspInit>:
}
900079bc:	4770      	bx	lr
900079be:	bf00      	nop

900079c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
900079c0:	2800      	cmp	r0, #0
900079c2:	d04e      	beq.n	90007a62 <HAL_I2C_Init+0xa2>
{
900079c4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
900079c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900079ca:	4604      	mov	r4, r0
900079cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900079d0:	2b00      	cmp	r3, #0
900079d2:	d041      	beq.n	90007a58 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
900079d4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
900079d6:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900079d8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
900079da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
900079de:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900079e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900079e4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
900079e6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900079ea:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
900079ec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900079ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900079f0:	689a      	ldr	r2, [r3, #8]
900079f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900079f6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900079f8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900079fa:	d029      	beq.n	90007a50 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900079fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007a00:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007a02:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007a04:	d102      	bne.n	90007a0c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90007a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
90007a0a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007a0c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90007a0e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007a12:	4915      	ldr	r1, [pc, #84]	; (90007a68 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007a14:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007a16:	4301      	orrs	r1, r0
90007a18:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90007a1a:	68d9      	ldr	r1, [r3, #12]
90007a1c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
90007a20:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90007a22:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007a26:	4302      	orrs	r2, r0
90007a28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007a2c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007a30:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007a32:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007a34:	4301      	orrs	r1, r0
  return HAL_OK;
90007a36:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007a38:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90007a3a:	6819      	ldr	r1, [r3, #0]
90007a3c:	f041 0101 	orr.w	r1, r1, #1
90007a40:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007a42:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90007a44:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90007a48:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007a4a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007a4e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90007a54:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007a56:	e7d9      	b.n	90007a0c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
90007a58:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90007a5c:	f7ff ffae 	bl	900079bc <HAL_I2C_MspInit>
90007a60:	e7b8      	b.n	900079d4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
90007a62:	2001      	movs	r0, #1
}
90007a64:	4770      	bx	lr
90007a66:	bf00      	nop
90007a68:	02008000 	.word	0x02008000

90007a6c <HAL_I2C_MspDeInit>:
90007a6c:	4770      	bx	lr
90007a6e:	bf00      	nop

90007a70 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
90007a70:	b1b0      	cbz	r0, 90007aa0 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
90007a72:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007a74:	2324      	movs	r3, #36	; 0x24
{
90007a76:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
90007a78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
90007a7c:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
90007a7e:	6813      	ldr	r3, [r2, #0]
90007a80:	f023 0301 	bic.w	r3, r3, #1
90007a84:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90007a86:	f7ff fff1 	bl	90007a6c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007a8a:	2300      	movs	r3, #0
90007a8c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
90007a8e:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
90007a90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
90007a94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
90007a98:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007a9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
90007a9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90007aa0:	2001      	movs	r0, #1
}
90007aa2:	4770      	bx	lr

90007aa4 <HAL_I2C_Mem_Write>:
{
90007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007aa8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007aaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90007aae:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
90007ab2:	2b20      	cmp	r3, #32
{
90007ab4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007ab6:	d132      	bne.n	90007b1e <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
90007ab8:	9b08      	ldr	r3, [sp, #32]
90007aba:	4604      	mov	r4, r0
90007abc:	b34b      	cbz	r3, 90007b12 <HAL_I2C_Mem_Write+0x6e>
90007abe:	f1ba 0f00 	cmp.w	sl, #0
90007ac2:	d026      	beq.n	90007b12 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90007ac4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007ac8:	2b01      	cmp	r3, #1
90007aca:	d028      	beq.n	90007b1e <HAL_I2C_Mem_Write+0x7a>
90007acc:	2301      	movs	r3, #1
90007ace:	460e      	mov	r6, r1
90007ad0:	4691      	mov	r9, r2
90007ad2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007ad6:	f7ff f955 	bl	90006d84 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ada:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007adc:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ade:	699a      	ldr	r2, [r3, #24]
90007ae0:	0411      	lsls	r1, r2, #16
90007ae2:	d51f      	bpl.n	90007b24 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ae4:	f7ff f94e 	bl	90006d84 <HAL_GetTick>
90007ae8:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007aea:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007aec:	2819      	cmp	r0, #25
90007aee:	d9f6      	bls.n	90007ade <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007af0:	699a      	ldr	r2, [r3, #24]
90007af2:	0412      	lsls	r2, r2, #16
90007af4:	d5f3      	bpl.n	90007ade <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007af8:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007afa:	2200      	movs	r2, #0
      return HAL_ERROR;
90007afc:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007afe:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007b00:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007b04:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007b06:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007b0a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007b12:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90007b16:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007b18:	6463      	str	r3, [r4, #68]	; 0x44
}
90007b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
90007b1e:	2002      	movs	r0, #2
}
90007b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90007b24:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007b26:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007b28:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007b2c:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007b2e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007b32:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007b34:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007b36:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007b38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007b3c:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007b3e:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007b40:	496d      	ldr	r1, [pc, #436]	; (90007cf8 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90007b42:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007b46:	685a      	ldr	r2, [r3, #4]
90007b48:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007b4a:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90007b4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007b52:	496a      	ldr	r1, [pc, #424]	; (90007cfc <HAL_I2C_Mem_Write+0x258>)
90007b54:	4332      	orrs	r2, r6
90007b56:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007b58:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007b5a:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007b5c:	4639      	mov	r1, r7
90007b5e:	f7ff fdbb 	bl	900076d8 <I2C_WaitOnTXISFlagUntilTimeout>
90007b62:	2800      	cmp	r0, #0
90007b64:	d175      	bne.n	90007c52 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007b66:	f1b8 0f01 	cmp.w	r8, #1
90007b6a:	d00a      	beq.n	90007b82 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007b6c:	ea4f 2219 	mov.w	r2, r9, lsr #8
90007b70:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007b72:	4639      	mov	r1, r7
90007b74:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007b76:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007b78:	462a      	mov	r2, r5
90007b7a:	f7ff fdad 	bl	900076d8 <I2C_WaitOnTXISFlagUntilTimeout>
90007b7e:	2800      	cmp	r0, #0
90007b80:	d167      	bne.n	90007c52 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007b82:	fa5f f389 	uxtb.w	r3, r9
90007b86:	6822      	ldr	r2, [r4, #0]
90007b88:	6293      	str	r3, [r2, #40]	; 0x28
90007b8a:	1c78      	adds	r0, r7, #1
90007b8c:	d14a      	bne.n	90007c24 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007b8e:	6993      	ldr	r3, [r2, #24]
90007b90:	0619      	lsls	r1, r3, #24
90007b92:	d5fc      	bpl.n	90007b8e <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007b94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007b96:	b29b      	uxth	r3, r3
90007b98:	2bff      	cmp	r3, #255	; 0xff
90007b9a:	f240 808a 	bls.w	90007cb2 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
90007b9e:	6853      	ldr	r3, [r2, #4]
90007ba0:	4957      	ldr	r1, [pc, #348]	; (90007d00 <HAL_I2C_Mem_Write+0x25c>)
90007ba2:	400b      	ands	r3, r1
90007ba4:	4957      	ldr	r1, [pc, #348]	; (90007d04 <HAL_I2C_Mem_Write+0x260>)
90007ba6:	4333      	orrs	r3, r6
90007ba8:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007baa:	23ff      	movs	r3, #255	; 0xff
90007bac:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007bae:	6051      	str	r1, [r2, #4]
90007bb0:	f8df 814c 	ldr.w	r8, [pc, #332]	; 90007d00 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007bb4:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007bb8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 90007d04 <HAL_I2C_Mem_Write+0x260>
90007bbc:	e004      	b.n	90007bc8 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
90007bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007bc0:	b29b      	uxth	r3, r3
90007bc2:	2b00      	cmp	r3, #0
90007bc4:	f000 8083 	beq.w	90007cce <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007bc8:	462a      	mov	r2, r5
90007bca:	4639      	mov	r1, r7
90007bcc:	4620      	mov	r0, r4
90007bce:	f7ff fd83 	bl	900076d8 <I2C_WaitOnTXISFlagUntilTimeout>
90007bd2:	2800      	cmp	r0, #0
90007bd4:	d16b      	bne.n	90007cae <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007bd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90007bd8:	6821      	ldr	r1, [r4, #0]
90007bda:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
90007bde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007be0:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
90007be2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
90007be4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
90007be6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90007be8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90007bea:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90007bec:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90007bee:	b292      	uxth	r2, r2
90007bf0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007bf2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
90007bf4:	b292      	uxth	r2, r2
90007bf6:	2a00      	cmp	r2, #0
90007bf8:	d0e1      	beq.n	90007bbe <HAL_I2C_Mem_Write+0x11a>
90007bfa:	2b00      	cmp	r3, #0
90007bfc:	d1df      	bne.n	90007bbe <HAL_I2C_Mem_Write+0x11a>
90007bfe:	1c78      	adds	r0, r7, #1
90007c00:	d12c      	bne.n	90007c5c <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007c02:	698b      	ldr	r3, [r1, #24]
90007c04:	061a      	lsls	r2, r3, #24
90007c06:	d5fc      	bpl.n	90007c02 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007c0a:	b29b      	uxth	r3, r3
90007c0c:	2bff      	cmp	r3, #255	; 0xff
90007c0e:	d940      	bls.n	90007c92 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
90007c10:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007c12:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007c16:	ea03 0308 	and.w	r3, r3, r8
90007c1a:	4333      	orrs	r3, r6
90007c1c:	ea43 0309 	orr.w	r3, r3, r9
90007c20:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90007c22:	e7cc      	b.n	90007bbe <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007c24:	6993      	ldr	r3, [r2, #24]
90007c26:	061b      	lsls	r3, r3, #24
90007c28:	d4b4      	bmi.n	90007b94 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007c2a:	f7ff f8ab 	bl	90006d84 <HAL_GetTick>
90007c2e:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007c30:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007c32:	4287      	cmp	r7, r0
90007c34:	d301      	bcc.n	90007c3a <HAL_I2C_Mem_Write+0x196>
90007c36:	2f00      	cmp	r7, #0
90007c38:	d1a7      	bne.n	90007b8a <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007c3a:	6993      	ldr	r3, [r2, #24]
90007c3c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007c40:	d1a3      	bne.n	90007b8a <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c42:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c44:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c46:	430a      	orrs	r2, r1
90007c48:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007c52:	2300      	movs	r3, #0
      return HAL_ERROR;
90007c54:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90007c56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90007c5a:	e75e      	b.n	90007b1a <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007c5c:	698b      	ldr	r3, [r1, #24]
90007c5e:	061b      	lsls	r3, r3, #24
90007c60:	d4d2      	bmi.n	90007c08 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007c62:	f7ff f88f 	bl	90006d84 <HAL_GetTick>
90007c66:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007c68:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007c6a:	4287      	cmp	r7, r0
90007c6c:	d301      	bcc.n	90007c72 <HAL_I2C_Mem_Write+0x1ce>
90007c6e:	2f00      	cmp	r7, #0
90007c70:	d1c5      	bne.n	90007bfe <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007c72:	698b      	ldr	r3, [r1, #24]
90007c74:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007c78:	d1c1      	bne.n	90007bfe <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c7c:	2120      	movs	r1, #32
          return HAL_ERROR;
90007c7e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90007c80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c84:	430a      	orrs	r2, r1
90007c86:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
90007c90:	e743      	b.n	90007b1a <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
90007c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007c94:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007c96:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
90007c98:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007c9a:	684b      	ldr	r3, [r1, #4]
90007c9c:	ea03 0308 	and.w	r3, r3, r8
90007ca0:	4333      	orrs	r3, r6
90007ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007caa:	604b      	str	r3, [r1, #4]
}
90007cac:	e787      	b.n	90007bbe <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
90007cae:	2001      	movs	r0, #1
90007cb0:	e733      	b.n	90007b1a <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
90007cb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007cb4:	4812      	ldr	r0, [pc, #72]	; (90007d00 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
90007cb6:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007cb8:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90007cba:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007cbc:	6853      	ldr	r3, [r2, #4]
90007cbe:	4003      	ands	r3, r0
90007cc0:	4333      	orrs	r3, r6
90007cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007cca:	6053      	str	r3, [r2, #4]
}
90007ccc:	e770      	b.n	90007bb0 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007cce:	462a      	mov	r2, r5
90007cd0:	4639      	mov	r1, r7
90007cd2:	4620      	mov	r0, r4
90007cd4:	f7ff fdb6 	bl	90007844 <I2C_WaitOnSTOPFlagUntilTimeout>
90007cd8:	2800      	cmp	r0, #0
90007cda:	d1e8      	bne.n	90007cae <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007cdc:	6823      	ldr	r3, [r4, #0]
90007cde:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007ce0:	4d09      	ldr	r5, [pc, #36]	; (90007d08 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007ce2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007ce4:	685a      	ldr	r2, [r3, #4]
90007ce6:	402a      	ands	r2, r5
90007ce8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007cea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007cee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007cf2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90007cf6:	e710      	b.n	90007b1a <HAL_I2C_Mem_Write+0x76>
90007cf8:	fc009800 	.word	0xfc009800
90007cfc:	01002000 	.word	0x01002000
90007d00:	fc009c00 	.word	0xfc009c00
90007d04:	01ff0000 	.word	0x01ff0000
90007d08:	fe00e800 	.word	0xfe00e800

90007d0c <HAL_I2C_Mem_Read>:
{
90007d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007d10:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007d12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90007d16:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
90007d1a:	2b20      	cmp	r3, #32
{
90007d1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
90007d1e:	d137      	bne.n	90007d90 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
90007d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90007d22:	4683      	mov	fp, r0
90007d24:	b36b      	cbz	r3, 90007d82 <HAL_I2C_Mem_Read+0x76>
90007d26:	f1b9 0f00 	cmp.w	r9, #0
90007d2a:	d02a      	beq.n	90007d82 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
90007d2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007d30:	2b01      	cmp	r3, #1
90007d32:	d02d      	beq.n	90007d90 <HAL_I2C_Mem_Read+0x84>
90007d34:	2301      	movs	r3, #1
90007d36:	460f      	mov	r7, r1
90007d38:	4690      	mov	r8, r2
90007d3a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007d3e:	f7ff f821 	bl	90006d84 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007d42:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90007d46:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007d48:	699a      	ldr	r2, [r3, #24]
90007d4a:	0410      	lsls	r0, r2, #16
90007d4c:	d523      	bpl.n	90007d96 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007d4e:	f7ff f819 	bl	90006d84 <HAL_GetTick>
90007d52:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007d54:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007d58:	2819      	cmp	r0, #25
90007d5a:	d9f5      	bls.n	90007d48 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007d5c:	699a      	ldr	r2, [r3, #24]
90007d5e:	0411      	lsls	r1, r2, #16
90007d60:	d5f2      	bpl.n	90007d48 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d62:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007d66:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007d68:	2200      	movs	r2, #0
      return HAL_ERROR;
90007d6a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d6c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007d6e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d72:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007d76:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007d7a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
90007d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007d82:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90007d86:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007d88:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
90007d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
90007d90:	2002      	movs	r0, #2
}
90007d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
90007d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90007d98:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007d9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d9e:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90007da0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007da4:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007da6:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007daa:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007dac:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007db0:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007db4:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90007db8:	4983      	ldr	r1, [pc, #524]	; (90007fc8 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
90007dba:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007dbe:	685a      	ldr	r2, [r3, #4]
90007dc0:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007dc2:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90007dc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007dc8:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007dca:	433a      	orrs	r2, r7
90007dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90007dd0:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007dd2:	4632      	mov	r2, r6
90007dd4:	f7ff fc80 	bl	900076d8 <I2C_WaitOnTXISFlagUntilTimeout>
90007dd8:	2800      	cmp	r0, #0
90007dda:	f040 8091 	bne.w	90007f00 <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007dde:	2c01      	cmp	r4, #1
90007de0:	d00c      	beq.n	90007dfc <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007de2:	ea4f 2218 	mov.w	r2, r8, lsr #8
90007de6:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007dea:	4629      	mov	r1, r5
90007dec:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007dee:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007df0:	4632      	mov	r2, r6
90007df2:	f7ff fc71 	bl	900076d8 <I2C_WaitOnTXISFlagUntilTimeout>
90007df6:	2800      	cmp	r0, #0
90007df8:	f040 8082 	bne.w	90007f00 <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007dfc:	fa5f f388 	uxtb.w	r3, r8
90007e00:	f8db 4000 	ldr.w	r4, [fp]
90007e04:	62a3      	str	r3, [r4, #40]	; 0x28
90007e06:	1c6a      	adds	r2, r5, #1
90007e08:	d160      	bne.n	90007ecc <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e0a:	69a3      	ldr	r3, [r4, #24]
90007e0c:	065b      	lsls	r3, r3, #25
90007e0e:	d5fc      	bpl.n	90007e0a <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007e10:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007e14:	b29b      	uxth	r3, r3
90007e16:	2bff      	cmp	r3, #255	; 0xff
90007e18:	f240 80ae 	bls.w	90007f78 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
90007e1c:	6863      	ldr	r3, [r4, #4]
90007e1e:	4a6a      	ldr	r2, [pc, #424]	; (90007fc8 <HAL_I2C_Mem_Read+0x2bc>)
90007e20:	4013      	ands	r3, r2
90007e22:	4a6a      	ldr	r2, [pc, #424]	; (90007fcc <HAL_I2C_Mem_Read+0x2c0>)
90007e24:	433b      	orrs	r3, r7
90007e26:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007e28:	23ff      	movs	r3, #255	; 0xff
90007e2a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007e2e:	6062      	str	r2, [r4, #4]
90007e30:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 90007fd8 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007e34:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007e38:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 90007fdc <HAL_I2C_Mem_Read+0x2d0>
90007e3c:	1c69      	adds	r1, r5, #1
90007e3e:	d127      	bne.n	90007e90 <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e40:	69a3      	ldr	r3, [r4, #24]
90007e42:	075a      	lsls	r2, r3, #29
90007e44:	d5fc      	bpl.n	90007e40 <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90007e46:	6a62      	ldr	r2, [r4, #36]	; 0x24
90007e48:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
90007e4c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90007e4e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
90007e52:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
90007e56:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90007e58:	3301      	adds	r3, #1
      hi2c->XferCount--;
90007e5a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90007e5c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
90007e60:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
90007e64:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90007e68:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007e6a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90007e6e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007e70:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90007e72:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007e76:	b10a      	cbz	r2, 90007e7c <HAL_I2C_Mem_Read+0x170>
90007e78:	2b00      	cmp	r3, #0
90007e7a:	d046      	beq.n	90007f0a <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
90007e7c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007e80:	b29b      	uxth	r3, r3
90007e82:	2b00      	cmp	r3, #0
90007e84:	f000 8088 	beq.w	90007f98 <HAL_I2C_Mem_Read+0x28c>
90007e88:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e8a:	f8db 4000 	ldr.w	r4, [fp]
90007e8e:	d0d7      	beq.n	90007e40 <HAL_I2C_Mem_Read+0x134>
90007e90:	69a3      	ldr	r3, [r4, #24]
90007e92:	075b      	lsls	r3, r3, #29
90007e94:	d4d7      	bmi.n	90007e46 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007e96:	f7fe ff75 	bl	90006d84 <HAL_GetTick>
90007e9a:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007e9c:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ea0:	4285      	cmp	r5, r0
90007ea2:	d301      	bcc.n	90007ea8 <HAL_I2C_Mem_Read+0x19c>
90007ea4:	2d00      	cmp	r5, #0
90007ea6:	d1c9      	bne.n	90007e3c <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ea8:	69a3      	ldr	r3, [r4, #24]
90007eaa:	f013 0304 	ands.w	r3, r3, #4
90007eae:	d1c5      	bne.n	90007e3c <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007eb0:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007eb4:	2120      	movs	r1, #32
          return HAL_ERROR;
90007eb6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90007eb8:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ebc:	430a      	orrs	r2, r1
90007ebe:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ec2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ec6:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
90007eca:	e75f      	b.n	90007d8c <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ecc:	69a3      	ldr	r3, [r4, #24]
90007ece:	0658      	lsls	r0, r3, #25
90007ed0:	d49e      	bmi.n	90007e10 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ed2:	f7fe ff57 	bl	90006d84 <HAL_GetTick>
90007ed6:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ed8:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007edc:	4285      	cmp	r5, r0
90007ede:	d301      	bcc.n	90007ee4 <HAL_I2C_Mem_Read+0x1d8>
90007ee0:	2d00      	cmp	r5, #0
90007ee2:	d190      	bne.n	90007e06 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ee4:	69a3      	ldr	r3, [r4, #24]
90007ee6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90007eea:	d18c      	bne.n	90007e06 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007eec:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ef0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ef2:	430a      	orrs	r2, r1
90007ef4:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ef8:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007efc:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007f00:	2300      	movs	r3, #0
      return HAL_ERROR;
90007f02:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90007f04:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
90007f08:	e740      	b.n	90007d8c <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007f0a:	f8db 2000 	ldr.w	r2, [fp]
90007f0e:	1c68      	adds	r0, r5, #1
90007f10:	d111      	bne.n	90007f36 <HAL_I2C_Mem_Read+0x22a>
90007f12:	6993      	ldr	r3, [r2, #24]
90007f14:	0619      	lsls	r1, r3, #24
90007f16:	d5fc      	bpl.n	90007f12 <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007f18:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007f1c:	b29b      	uxth	r3, r3
90007f1e:	2bff      	cmp	r3, #255	; 0xff
90007f20:	d91a      	bls.n	90007f58 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
90007f22:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007f24:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f28:	ea03 0308 	and.w	r3, r3, r8
90007f2c:	433b      	orrs	r3, r7
90007f2e:	ea43 0309 	orr.w	r3, r3, r9
90007f32:	6053      	str	r3, [r2, #4]
}
90007f34:	e7a2      	b.n	90007e7c <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007f36:	6993      	ldr	r3, [r2, #24]
90007f38:	061b      	lsls	r3, r3, #24
90007f3a:	d4ed      	bmi.n	90007f18 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007f3c:	f7fe ff22 	bl	90006d84 <HAL_GetTick>
90007f40:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007f42:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007f46:	4285      	cmp	r5, r0
90007f48:	d301      	bcc.n	90007f4e <HAL_I2C_Mem_Read+0x242>
90007f4a:	2d00      	cmp	r5, #0
90007f4c:	d1df      	bne.n	90007f0e <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007f4e:	6993      	ldr	r3, [r2, #24]
90007f50:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007f54:	d1db      	bne.n	90007f0e <HAL_I2C_Mem_Read+0x202>
90007f56:	e7ab      	b.n	90007eb0 <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
90007f58:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007f5c:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f5e:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90007f60:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f64:	6853      	ldr	r3, [r2, #4]
90007f66:	ea03 0308 	and.w	r3, r3, r8
90007f6a:	433b      	orrs	r3, r7
90007f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007f74:	6053      	str	r3, [r2, #4]
}
90007f76:	e781      	b.n	90007e7c <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
90007f78:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007f7c:	4912      	ldr	r1, [pc, #72]	; (90007fc8 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
90007f7e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f80:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
90007f82:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f86:	6863      	ldr	r3, [r4, #4]
90007f88:	400b      	ands	r3, r1
90007f8a:	433b      	orrs	r3, r7
90007f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007f90:	4a0f      	ldr	r2, [pc, #60]	; (90007fd0 <HAL_I2C_Mem_Read+0x2c4>)
90007f92:	431a      	orrs	r2, r3
90007f94:	6062      	str	r2, [r4, #4]
}
90007f96:	e74b      	b.n	90007e30 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007f98:	4632      	mov	r2, r6
90007f9a:	4629      	mov	r1, r5
90007f9c:	4658      	mov	r0, fp
90007f9e:	f7ff fc51 	bl	90007844 <I2C_WaitOnSTOPFlagUntilTimeout>
90007fa2:	b970      	cbnz	r0, 90007fc2 <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007fa4:	f8db 3000 	ldr.w	r3, [fp]
90007fa8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007faa:	4c0a      	ldr	r4, [pc, #40]	; (90007fd4 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007fac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007fae:	685a      	ldr	r2, [r3, #4]
90007fb0:	4022      	ands	r2, r4
90007fb2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007fb4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007fb8:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007fbc:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
90007fc0:	e6e4      	b.n	90007d8c <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90007fc2:	2001      	movs	r0, #1
90007fc4:	e6e2      	b.n	90007d8c <HAL_I2C_Mem_Read+0x80>
90007fc6:	bf00      	nop
90007fc8:	fc009800 	.word	0xfc009800
90007fcc:	01ff2400 	.word	0x01ff2400
90007fd0:	02002400 	.word	0x02002400
90007fd4:	fe00e800 	.word	0xfe00e800
90007fd8:	fc009c00 	.word	0xfc009c00
90007fdc:	01ff0000 	.word	0x01ff0000

90007fe0 <HAL_I2C_GetState>:
  return hi2c->State;
90007fe0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90007fe4:	4770      	bx	lr
90007fe6:	bf00      	nop

90007fe8 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90007fe8:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90007fea:	4770      	bx	lr

90007fec <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007fec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90007ff0:	2a20      	cmp	r2, #32
90007ff2:	d123      	bne.n	9000803c <HAL_I2CEx_ConfigAnalogFilter+0x50>
90007ff4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007ff8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90007ffc:	4603      	mov	r3, r0
90007ffe:	2a01      	cmp	r2, #1
90008000:	d01c      	beq.n	9000803c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008002:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008004:	2024      	movs	r0, #36	; 0x24
{
90008006:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90008008:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000800c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90008010:	6810      	ldr	r0, [r2, #0]
90008012:	f020 0001 	bic.w	r0, r0, #1
90008016:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008018:	6810      	ldr	r0, [r2, #0]
9000801a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000801e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90008020:	6810      	ldr	r0, [r2, #0]
90008022:	4301      	orrs	r1, r0

    return HAL_OK;
90008024:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008026:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008028:	6811      	ldr	r1, [r2, #0]
9000802a:	f041 0101 	orr.w	r1, r1, #1
9000802e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008030:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008034:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008038:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000803c:	2002      	movs	r0, #2
}
9000803e:	4770      	bx	lr

90008040 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008040:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008044:	2a20      	cmp	r2, #32
90008046:	d122      	bne.n	9000808e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90008048:	4603      	mov	r3, r0
{
9000804a:	b500      	push	{lr}
9000804c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008050:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008054:	2a01      	cmp	r2, #1
90008056:	d01c      	beq.n	90008092 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008058:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000805a:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000805c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90008060:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90008064:	6810      	ldr	r0, [r2, #0]
90008066:	f020 0001 	bic.w	r0, r0, #1
9000806a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000806c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000806e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90008072:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90008076:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90008078:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000807a:	6811      	ldr	r1, [r2, #0]
9000807c:	f041 0101 	orr.w	r1, r1, #1
90008080:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008082:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008086:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000808a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000808e:	2002      	movs	r0, #2
}
90008090:	4770      	bx	lr
    return HAL_BUSY;
90008092:	2002      	movs	r0, #2
}
90008094:	f85d fb04 	ldr.w	pc, [sp], #4

90008098 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000809c:	460d      	mov	r5, r1
9000809e:	4614      	mov	r4, r2
900080a0:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
900080a2:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
900080a4:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
900080a6:	2701      	movs	r7, #1
  p = 0;
900080a8:	f04f 0800 	mov.w	r8, #0
900080ac:	e006      	b.n	900080bc <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
900080ae:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
900080b2:	eb06 0308 	add.w	r3, r6, r8
900080b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900080ba:	d837      	bhi.n	9000812c <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
900080bc:	eb05 0008 	add.w	r0, r5, r8
900080c0:	4632      	mov	r2, r6
900080c2:	4639      	mov	r1, r7
    while (i != 0UL)
900080c4:	b116      	cbz	r6, 900080cc <JPEG_Bits_To_SizeCodes+0x34>
      p++;
900080c6:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
900080c8:	f019 fee4 	bl	90021e94 <memset>
  for (l = 0; l < 16UL; l++)
900080cc:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
900080ce:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
900080d2:	d1ec      	bne.n	900080ae <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
900080d4:	2300      	movs	r3, #0
900080d6:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
900080da:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
900080de:	7828      	ldrb	r0, [r5, #0]
900080e0:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
900080e2:	b300      	cbz	r0, 90008126 <JPEG_Bits_To_SizeCodes+0x8e>
900080e4:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
900080e8:	2701      	movs	r7, #1
  p = 0;
900080ea:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
900080ec:	4288      	cmp	r0, r1
900080ee:	d10f      	bne.n	90008110 <JPEG_Bits_To_SizeCodes+0x78>
900080f0:	eb02 0008 	add.w	r0, r2, r8
900080f4:	1c56      	adds	r6, r2, #1
900080f6:	eb05 0c02 	add.w	ip, r5, r2
900080fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
900080fe:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
90008100:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90008104:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008106:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000810a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000810c:	458e      	cmp	lr, r1
9000810e:	d0f7      	beq.n	90008100 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
90008110:	291f      	cmp	r1, #31
90008112:	d80b      	bhi.n	9000812c <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008114:	fa07 f001 	lsl.w	r0, r7, r1
90008118:	4298      	cmp	r0, r3
9000811a:	d907      	bls.n	9000812c <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000811c:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000811e:	005b      	lsls	r3, r3, #1
    si++;
90008120:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
90008122:	2800      	cmp	r0, #0
90008124:	d1e2      	bne.n	900080ec <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90008126:	2000      	movs	r0, #0
}
90008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000812c:	2001      	movs	r0, #1
}
9000812e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90008132:	bf00      	nop

90008134 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90008134:	b5f0      	push	{r4, r5, r6, r7, lr}
90008136:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000813a:	460d      	mov	r5, r1
9000813c:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000813e:	ab01      	add	r3, sp, #4
90008140:	aa43      	add	r2, sp, #268	; 0x10c
90008142:	a902      	add	r1, sp, #8
90008144:	f7ff ffa8 	bl	90008098 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008148:	b9d0      	cbnz	r0, 90008180 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000814a:	9f01      	ldr	r7, [sp, #4]
9000814c:	b1c7      	cbz	r7, 90008180 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000814e:	370f      	adds	r7, #15
90008150:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90008154:	a902      	add	r1, sp, #8
90008156:	f104 0c0f 	add.w	ip, r4, #15
9000815a:	4427      	add	r7, r4
9000815c:	e009      	b.n	90008172 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000815e:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
90008162:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008164:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008168:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000816c:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000816e:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
90008170:	d006      	beq.n	90008180 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
90008172:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008176:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008178:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000817c:	d9ef      	bls.n	9000815e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000817e:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008180:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008184:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008186:	bf00      	nop

90008188 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000818c:	6804      	ldr	r4, [r0, #0]
{
9000818e:	b093      	sub	sp, #76	; 0x4c
90008190:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008192:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
90008196:	429a      	cmp	r2, r3
90008198:	f000 809d 	beq.w	900082d6 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000819c:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
900081a0:	429a      	cmp	r2, r3
900081a2:	d003      	beq.n	900081ac <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
900081a4:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
900081a6:	b013      	add	sp, #76	; 0x4c
900081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
900081ac:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
900081b0:	a903      	add	r1, sp, #12
900081b2:	f7ff ffbf 	bl	90008134 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
900081b6:	2800      	cmp	r0, #0
900081b8:	d1f5      	bne.n	900081a6 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
900081ba:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081be:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081c2:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
900081c6:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081c8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
900081cc:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ce:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
900081d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081d6:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
900081da:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081de:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
900081e2:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081e4:	f89d 9015 	ldrb.w	r9, [sp, #21]
900081e8:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ec:	f89d c014 	ldrb.w	ip, [sp, #20]
900081f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081f4:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081f8:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081fc:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008200:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008202:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008206:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9000820a:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000820e:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008212:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008216:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000821a:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000821e:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008222:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
90008224:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008228:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000822c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008230:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
90008232:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008236:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008238:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
9000823c:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008240:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008244:	f89d 600f 	ldrb.w	r6, [sp, #15]
90008248:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000824c:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008250:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008252:	9b01      	ldr	r3, [sp, #4]
90008254:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008258:	f89d 500d 	ldrb.w	r5, [sp, #13]
9000825c:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008260:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
90008264:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008268:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
9000826a:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000826e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008272:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90008276:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000827a:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000827e:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008282:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
90008286:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
9000828a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000828e:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008292:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
90008296:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008298:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000829c:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000829e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
900082a2:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900082a6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
900082aa:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900082ac:	f89d 2020 	ldrb.w	r2, [sp, #32]
900082b0:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
900082b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
900082b6:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900082ba:	f89d 301c 	ldrb.w	r3, [sp, #28]
900082be:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900082c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
900082c4:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
900082c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
900082cc:	f844 3c18 	str.w	r3, [r4, #-24]
}
900082d0:	b013      	add	sp, #76	; 0x4c
900082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
900082d6:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
900082da:	e769      	b.n	900081b0 <JPEG_Set_HuffDC_Mem+0x28>

900082dc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
900082dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
900082e0:	6804      	ldr	r4, [r0, #0]
{
900082e2:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
900082e6:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
900082e8:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
900082ec:	429a      	cmp	r2, r3
900082ee:	d042      	beq.n	90008376 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
900082f0:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
900082f4:	429a      	cmp	r2, r3
900082f6:	d004      	beq.n	90008302 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
900082f8:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
900082fa:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900082fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008302:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008306:	4628      	mov	r0, r5
90008308:	466b      	mov	r3, sp
9000830a:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000830e:	a901      	add	r1, sp, #4
90008310:	f7ff fec2 	bl	90008098 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008314:	2800      	cmp	r0, #0
90008316:	d1f0      	bne.n	900082fa <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90008318:	9b00      	ldr	r3, [sp, #0]
9000831a:	b37b      	cbz	r3, 9000837c <JPEG_Set_HuffAC_Mem+0xa0>
9000831c:	330f      	adds	r3, #15
9000831e:	f20d 4734 	addw	r7, sp, #1076	; 0x434
90008322:	f10d 0c04 	add.w	ip, sp, #4
90008326:	f105 020f 	add.w	r2, r5, #15
9000832a:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000832e:	ae42      	add	r6, sp, #264	; 0x108
90008330:	e011      	b.n	90008356 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
90008332:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
90008336:	2ba1      	cmp	r3, #161	; 0xa1
90008338:	d8de      	bhi.n	900082f8 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000833a:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000833e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
90008342:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
90008346:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008348:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000834c:	4631      	mov	r1, r6
9000834e:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008352:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
90008354:	d013      	beq.n	9000837e <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
90008356:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000835a:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000835c:	2900      	cmp	r1, #0
9000835e:	d0ec      	beq.n	9000833a <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
90008360:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
90008362:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90008366:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
90008368:	eb05 0585 	add.w	r5, r5, r5, lsl #2
9000836c:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90008370:	d1df      	bne.n	90008332 <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
90008372:	23a1      	movs	r3, #161	; 0xa1
90008374:	e7e1      	b.n	9000833a <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008376:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000837a:	e7c4      	b.n	90008306 <JPEG_Set_HuffAC_Mem+0x2a>
9000837c:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000837e:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
90008382:	4a1a      	ldr	r2, [pc, #104]	; (900083ec <JPEG_Set_HuffAC_Mem+0x110>)
90008384:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
90008388:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000838c:	6023      	str	r3, [r4, #0]
9000838e:	6063      	str	r3, [r4, #4]
90008390:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90008394:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90008396:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000839a:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000839c:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
900083a0:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
900083a4:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
900083a6:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
900083aa:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
900083ac:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
900083b0:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083b2:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083b6:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083ba:	0212      	lsls	r2, r2, #8
900083bc:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083c0:	021b      	lsls	r3, r3, #8
900083c2:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083c6:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
900083ca:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083d0:	433a      	orrs	r2, r7
    while (i > 1UL)
900083d2:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900083d4:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
900083d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900083dc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
900083e0:	d1e7      	bne.n	900083b2 <JPEG_Set_HuffAC_Mem+0xd6>
}
900083e2:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900083e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900083ea:	bf00      	nop
900083ec:	0fd10fd0 	.word	0x0fd10fd0

900083f0 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
900083f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900083f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
900083f6:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900083f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900083fa:	f003 0303 	and.w	r3, r3, #3
900083fe:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90008400:	6803      	ldr	r3, [r0, #0]
90008402:	685a      	ldr	r2, [r3, #4]
90008404:	bf0c      	ite	eq
90008406:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000840a:	f022 0208 	bicne.w	r2, r2, #8
9000840e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008410:	681a      	ldr	r2, [r3, #0]
90008412:	f022 0201 	bic.w	r2, r2, #1
90008416:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000841a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000841e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90008426:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000842a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000842e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008432:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008436:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
90008438:	681a      	ldr	r2, [r3, #0]
9000843a:	f042 0201 	orr.w	r2, r2, #1
9000843e:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008440:	6d42      	ldr	r2, [r0, #84]	; 0x54
90008442:	f002 020c 	and.w	r2, r2, #12
90008446:	2a08      	cmp	r2, #8
90008448:	d00a      	beq.n	90008460 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000844a:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000844c:	f002 020c 	and.w	r2, r2, #12
90008450:	2a0c      	cmp	r2, #12
90008452:	d000      	beq.n	90008456 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90008454:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008458:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000845c:	631a      	str	r2, [r3, #48]	; 0x30
}
9000845e:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
90008460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008462:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
90008466:	631a      	str	r2, [r3, #48]	; 0x30
90008468:	4770      	bx	lr
9000846a:	bf00      	nop

9000846c <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000846c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000846e:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
90008470:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008472:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
90008474:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008476:	42aa      	cmp	r2, r5
90008478:	d32d      	bcc.n	900084d6 <JPEG_DMA_StartProcess+0x6a>
9000847a:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000847c:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000847e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008480:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008482:	42b3      	cmp	r3, r6
90008484:	d327      	bcc.n	900084d6 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90008486:	4f1b      	ldr	r7, [pc, #108]	; (900084f4 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90008488:	f8df c074 	ldr.w	ip, [pc, #116]	; 90008500 <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000848c:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000848e:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008492:	4919      	ldr	r1, [pc, #100]	; (900084f8 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90008494:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008496:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90008498:	4918      	ldr	r1, [pc, #96]	; (900084fc <JPEG_DMA_StartProcess+0x90>)
9000849a:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000849c:	b1a5      	cbz	r5, 900084c8 <JPEG_DMA_StartProcess+0x5c>
9000849e:	b19e      	cbz	r6, 900084c8 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900084a0:	fbb2 f1f5 	udiv	r1, r2, r5
900084a4:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900084a8:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900084aa:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900084ac:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900084ae:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900084b0:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
900084b2:	fbb3 f2f6 	udiv	r2, r3, r6
900084b6:	fb06 3212 	mls	r2, r6, r2, r3
900084ba:	1a9b      	subs	r3, r3, r2
900084bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900084be:	9500      	str	r5, [sp, #0]
900084c0:	69e2      	ldr	r2, [r4, #28]
900084c2:	f001 fbb5 	bl	90009c30 <HAL_MDMA_Start_IT>
900084c6:	b148      	cbz	r0, 900084dc <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900084c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
900084ca:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900084cc:	f043 0304 	orr.w	r3, r3, #4
900084d0:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
900084d2:	b003      	add	sp, #12
900084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
900084d6:	2001      	movs	r0, #1
}
900084d8:	b003      	add	sp, #12
900084da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900084dc:	6822      	ldr	r2, [r4, #0]
900084de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900084e0:	69a1      	ldr	r1, [r4, #24]
900084e2:	3240      	adds	r2, #64	; 0x40
900084e4:	9500      	str	r5, [sp, #0]
900084e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
900084e8:	f001 fba2 	bl	90009c30 <HAL_MDMA_Start_IT>
900084ec:	2800      	cmp	r0, #0
900084ee:	d0f3      	beq.n	900084d8 <JPEG_DMA_StartProcess+0x6c>
900084f0:	e7ea      	b.n	900084c8 <JPEG_DMA_StartProcess+0x5c>
900084f2:	bf00      	nop
900084f4:	90008a25 	.word	0x90008a25
900084f8:	90008c9d 	.word	0x90008c9d
900084fc:	90008d1d 	.word	0x90008d1d
90008500:	90008a51 	.word	0x90008a51

90008504 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90008504:	6803      	ldr	r3, [r0, #0]
90008506:	685a      	ldr	r2, [r3, #4]
90008508:	f002 0203 	and.w	r2, r2, #3
9000850c:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000850e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90008512:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90008514:	f000 8094 	beq.w	90008640 <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90008518:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000851a:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000851c:	f014 0403 	ands.w	r4, r4, #3
90008520:	d172      	bne.n	90008608 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008522:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008524:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008526:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008528:	68da      	ldr	r2, [r3, #12]
9000852a:	0c12      	lsrs	r2, r2, #16
9000852c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000852e:	4a5f      	ldr	r2, [pc, #380]	; (900086ac <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
90008530:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
90008534:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
90008538:	2600      	movs	r6, #0
9000853a:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000853e:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
90008542:	f241 3488 	movw	r4, #5000	; 0x1388
90008546:	e033      	b.n	900085b0 <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008548:	f892 8001 	ldrb.w	r8, [r2, #1]
9000854c:	fb0e f707 	mul.w	r7, lr, r7
90008550:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008552:	f811 8008 	ldrb.w	r8, [r1, r8]
90008556:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000855a:	2f64      	cmp	r7, #100	; 0x64
9000855c:	d961      	bls.n	90008622 <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000855e:	fbb4 f7f7 	udiv	r7, r4, r7
90008562:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008564:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
90008568:	2f01      	cmp	r7, #1
9000856a:	d03d      	beq.n	900085e8 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000856c:	f892 8002 	ldrb.w	r8, [r2, #2]
90008570:	fb0e f707 	mul.w	r7, lr, r7
90008574:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008576:	f811 8008 	ldrb.w	r8, [r1, r8]
9000857a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000857e:	2f64      	cmp	r7, #100	; 0x64
90008580:	d94a      	bls.n	90008618 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
90008582:	fbb4 f7f7 	udiv	r7, r4, r7
90008586:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008588:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000858a:	2b01      	cmp	r3, #1
9000858c:	d030      	beq.n	900085f0 <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000858e:	78d7      	ldrb	r7, [r2, #3]
90008590:	fb0e f303 	mul.w	r3, lr, r3
90008594:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008596:	5dcf      	ldrb	r7, [r1, r7]
90008598:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000859c:	2b64      	cmp	r3, #100	; 0x64
9000859e:	d94a      	bls.n	90008636 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
900085a0:	fbb4 f3f3 	udiv	r3, r4, r3
900085a4:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900085a6:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
900085a8:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900085ac:	4295      	cmp	r5, r2
900085ae:	d025      	beq.n	900085fc <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
900085b0:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900085b4:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
900085b6:	2f01      	cmp	r7, #1
900085b8:	d02c      	beq.n	90008614 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900085ba:	f892 8000 	ldrb.w	r8, [r2]
900085be:	fb0e f707 	mul.w	r7, lr, r7
900085c2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900085c4:	f811 8008 	ldrb.w	r8, [r1, r8]
900085c8:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900085cc:	2f64      	cmp	r7, #100	; 0x64
900085ce:	d92d      	bls.n	9000862c <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
900085d0:	fbb4 f7f7 	udiv	r7, r4, r7
900085d4:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900085d6:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
900085da:	2f01      	cmp	r7, #1
900085dc:	d1b4      	bne.n	90008548 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900085de:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900085e2:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900085e4:	2f01      	cmp	r7, #1
900085e6:	d1c1      	bne.n	9000856c <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900085e8:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
900085ea:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900085ec:	2b01      	cmp	r3, #1
900085ee:	d1ce      	bne.n	9000858e <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900085f0:	3204      	adds	r2, #4
        quality += 100UL;
900085f2:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
900085f4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900085f8:	4295      	cmp	r5, r2
900085fa:	d1d9      	bne.n	900085b0 <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
900085fc:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
900085fe:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
90008600:	f8c9 6010 	str.w	r6, [r9, #16]
}
90008604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
90008608:	f002 0203 	and.w	r2, r2, #3
9000860c:	2a03      	cmp	r2, #3
9000860e:	d14a      	bne.n	900086a6 <HAL_JPEG_GetInfo.part.0+0x1a2>
90008610:	2430      	movs	r4, #48	; 0x30
90008612:	e016      	b.n	90008642 <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
90008614:	3664      	adds	r6, #100	; 0x64
90008616:	e7de      	b.n	900085d6 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
90008618:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000861c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008620:	e7b2      	b.n	90008588 <HAL_JPEG_GetInfo.part.0+0x84>
90008622:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008626:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000862a:	e79b      	b.n	90008564 <HAL_JPEG_GetInfo.part.0+0x60>
9000862c:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008630:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008634:	e7cf      	b.n	900085d6 <HAL_JPEG_GetInfo.part.0+0xd2>
90008636:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000863a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000863e:	e7b2      	b.n	900085a6 <HAL_JPEG_GetInfo.part.0+0xa2>
90008640:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008642:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008644:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008648:	0c12      	lsrs	r2, r2, #16
9000864a:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000864e:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008650:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90008652:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008654:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90008656:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008658:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000865c:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90008660:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008664:	ea4f 1215 	mov.w	r2, r5, lsr #4
90008668:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000866c:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008670:	d108      	bne.n	90008684 <HAL_JPEG_GetInfo.part.0+0x180>
90008672:	2d01      	cmp	r5, #1
90008674:	d106      	bne.n	90008684 <HAL_JPEG_GetInfo.part.0+0x180>
90008676:	f016 0f0f 	tst.w	r6, #15
9000867a:	bf0c      	ite	eq
9000867c:	2401      	moveq	r4, #1
9000867e:	2400      	movne	r4, #0
90008680:	0064      	lsls	r4, r4, #1
90008682:	e754      	b.n	9000852e <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008684:	ea42 020c 	orr.w	r2, r2, ip
90008688:	f012 040f 	ands.w	r4, r2, #15
9000868c:	f43f af4f 	beq.w	9000852e <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008690:	ea4c 0206 	orr.w	r2, ip, r6
90008694:	f3c2 0203 	ubfx	r2, r2, #0, #4
90008698:	2d03      	cmp	r5, #3
9000869a:	bf08      	it	eq
9000869c:	2a00      	cmpeq	r2, #0
9000869e:	bf0c      	ite	eq
900086a0:	2401      	moveq	r4, #1
900086a2:	2400      	movne	r4, #0
900086a4:	e743      	b.n	9000852e <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
900086a6:	2001      	movs	r0, #1
}
900086a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900086ac:	900252e8 	.word	0x900252e8

900086b0 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
900086b0:	2800      	cmp	r0, #0
900086b2:	f000 810b 	beq.w	900088cc <HAL_JPEG_Init+0x21c>
{
900086b6:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
900086b8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
900086bc:	4604      	mov	r4, r0
900086be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900086c2:	2b00      	cmp	r3, #0
900086c4:	f000 80fd 	beq.w	900088c2 <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
900086c8:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900086ca:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
900086cc:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
900086ce:	4880      	ldr	r0, [pc, #512]	; (900088d0 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900086d0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
900086d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
900086d6:	f041 0101 	orr.w	r1, r1, #1
900086da:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900086dc:	6811      	ldr	r1, [r2, #0]
900086de:	f021 0101 	bic.w	r1, r1, #1
900086e2:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900086e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
900086e6:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
900086ea:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
900086ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
900086ee:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
900086f2:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
900086f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
900086f6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
900086fa:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900086fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
900086fe:	f041 0160 	orr.w	r1, r1, #96	; 0x60
90008702:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008704:	4973      	ldr	r1, [pc, #460]	; (900088d4 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008706:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008708:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000870a:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000870c:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008710:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
90008714:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
90008718:	4b6f      	ldr	r3, [pc, #444]	; (900088d8 <HAL_JPEG_Init+0x228>)
9000871a:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000871e:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008722:	486e      	ldr	r0, [pc, #440]	; (900088dc <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008724:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008728:	4b6d      	ldr	r3, [pc, #436]	; (900088e0 <HAL_JPEG_Init+0x230>)
9000872a:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000872e:	496d      	ldr	r1, [pc, #436]	; (900088e4 <HAL_JPEG_Init+0x234>)
90008730:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008734:	4b6c      	ldr	r3, [pc, #432]	; (900088e8 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008736:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000873a:	486c      	ldr	r0, [pc, #432]	; (900088ec <HAL_JPEG_Init+0x23c>)
9000873c:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
90008740:	496b      	ldr	r1, [pc, #428]	; (900088f0 <HAL_JPEG_Init+0x240>)
90008742:	4b6c      	ldr	r3, [pc, #432]	; (900088f4 <HAL_JPEG_Init+0x244>)
90008744:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
90008748:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000874c:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008750:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
90008754:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
90008758:	4967      	ldr	r1, [pc, #412]	; (900088f8 <HAL_JPEG_Init+0x248>)
9000875a:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000875c:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008760:	430b      	orrs	r3, r1
  *address = value;
90008762:	4966      	ldr	r1, [pc, #408]	; (900088fc <HAL_JPEG_Init+0x24c>)
90008764:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
90008768:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000876c:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
90008770:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008772:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008776:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
90008778:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000877c:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
90008780:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008782:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008786:	ea43 030c 	orr.w	r3, r3, ip
9000878a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000878e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
90008792:	d1eb      	bne.n	9000876c <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
90008794:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008798:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000879c:	4856      	ldr	r0, [pc, #344]	; (900088f8 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000879e:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
900087a0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
900087a2:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
900087a6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
900087aa:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900087ae:	4003      	ands	r3, r0
  *address = value;
900087b0:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900087b4:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
900087b8:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
900087bc:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900087c0:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
900087c4:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900087c8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
900087ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900087ce:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
900087d2:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
900087d6:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900087d8:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900087da:	4b49      	ldr	r3, [pc, #292]	; (90008900 <HAL_JPEG_Init+0x250>)
  *address = value;
900087dc:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
900087e0:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900087e4:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
900087e8:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
900087ec:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
900087f0:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
900087f4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
900087f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
900087fa:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
900087fe:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
90008802:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008804:	483f      	ldr	r0, [pc, #252]	; (90008904 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008806:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008808:	4b3f      	ldr	r3, [pc, #252]	; (90008908 <HAL_JPEG_Init+0x258>)
  *address = value;
9000880a:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000880e:	493f      	ldr	r1, [pc, #252]	; (9000890c <HAL_JPEG_Init+0x25c>)
90008810:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90008814:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008818:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000881c:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
90008820:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008824:	493a      	ldr	r1, [pc, #232]	; (90008910 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
90008826:	b29b      	uxth	r3, r3
90008828:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000882c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90008830:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008834:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
90008838:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000883a:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000883e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90008840:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008844:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
90008848:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000884a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000884e:	ea43 030e 	orr.w	r3, r3, lr
90008852:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008856:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000885a:	d1eb      	bne.n	90008834 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000885c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90008860:	4926      	ldr	r1, [pc, #152]	; (900088fc <HAL_JPEG_Init+0x24c>)
90008862:	4620      	mov	r0, r4
90008864:	f7ff fd3a 	bl	900082dc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008868:	b118      	cbz	r0, 90008872 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000886a:	2301      	movs	r3, #1
    return HAL_ERROR;
9000886c:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000886e:	6523      	str	r3, [r4, #80]	; 0x50
}
90008870:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
90008872:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90008874:	4620      	mov	r0, r4
90008876:	4926      	ldr	r1, [pc, #152]	; (90008910 <HAL_JPEG_Init+0x260>)
90008878:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000887c:	f7ff fd2e 	bl	900082dc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008880:	2800      	cmp	r0, #0
90008882:	d1f2      	bne.n	9000886a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
90008884:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
90008886:	4620      	mov	r0, r4
90008888:	4922      	ldr	r1, [pc, #136]	; (90008914 <HAL_JPEG_Init+0x264>)
9000888a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000888e:	f7ff fc7b 	bl	90008188 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
90008892:	2800      	cmp	r0, #0
90008894:	d1e9      	bne.n	9000886a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
90008896:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
90008898:	4620      	mov	r0, r4
9000889a:	491f      	ldr	r1, [pc, #124]	; (90008918 <HAL_JPEG_Init+0x268>)
9000889c:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
900088a0:	f7ff fc72 	bl	90008188 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
900088a4:	2800      	cmp	r0, #0
900088a6:	d1e0      	bne.n	9000886a <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900088a8:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
900088aa:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900088ac:	6853      	ldr	r3, [r2, #4]
900088ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900088b2:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
900088b4:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
900088b6:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
900088b8:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
900088bc:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
900088be:	6560      	str	r0, [r4, #84]	; 0x54
}
900088c0:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
900088c2:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
900088c6:	f7fb ff7f 	bl	900047c8 <HAL_JPEG_MspInit>
900088ca:	e6fd      	b.n	900086c8 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
900088cc:	2001      	movs	r0, #1
}
900088ce:	4770      	bx	lr
900088d0:	900252a8 	.word	0x900252a8
900088d4:	90025230 	.word	0x90025230
900088d8:	01050100 	.word	0x01050100
900088dc:	0b0a0908 	.word	0x0b0a0908
900088e0:	07060504 	.word	0x07060504
900088e4:	03020100 	.word	0x03020100
900088e8:	7d010000 	.word	0x7d010000
900088ec:	04040505 	.word	0x04040505
900088f0:	03040203 	.word	0x03040203
900088f4:	03010200 	.word	0x03010200
900088f8:	ffff0000 	.word	0xffff0000
900088fc:	9002517c 	.word	0x9002517c
90008900:	09080706 	.word	0x09080706
90008904:	01000404 	.word	0x01000404
90008908:	04040201 	.word	0x04040201
9000890c:	05070403 	.word	0x05070403
90008910:	900250c8 	.word	0x900250c8
90008914:	9002528c 	.word	0x9002528c
90008918:	90025270 	.word	0x90025270

9000891c <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000891c:	2b00      	cmp	r3, #0
9000891e:	bf18      	it	ne
90008920:	2900      	cmpne	r1, #0
90008922:	d03b      	beq.n	9000899c <HAL_JPEG_Decode_DMA+0x80>
{
90008924:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008926:	fab0 f580 	clz	r5, r0
9000892a:	4604      	mov	r4, r0
9000892c:	096d      	lsrs	r5, r5, #5
9000892e:	b330      	cbz	r0, 9000897e <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
90008930:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
90008934:	f1bc 0f01 	cmp.w	ip, #1
90008938:	d02e      	beq.n	90008998 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000893a:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000893e:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008942:	45f4      	cmp	ip, lr
90008944:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
90008948:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000894c:	d119      	bne.n	90008982 <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000894e:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90008950:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90008954:	9b04      	ldr	r3, [sp, #16]
90008956:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
90008958:	2304      	movs	r3, #4
9000895a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000895e:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008960:	f023 030f 	bic.w	r3, r3, #15
90008964:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
90008966:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008968:	f043 030e 	orr.w	r3, r3, #14
9000896c:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000896e:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90008970:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
90008972:	f7ff fd3d 	bl	900083f0 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
90008976:	f7ff fd79 	bl	9000846c <JPEG_DMA_StartProcess>
9000897a:	b930      	cbnz	r0, 9000898a <HAL_JPEG_Decode_DMA+0x6e>
}
9000897c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000897e:	2001      	movs	r0, #1
}
90008980:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
90008982:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
90008984:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
90008988:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000898a:	2306      	movs	r3, #6
      return HAL_ERROR;
9000898c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000898e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008992:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
90008996:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
90008998:	2002      	movs	r0, #2
}
9000899a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000899c:	2001      	movs	r0, #1
}
9000899e:	4770      	bx	lr

900089a0 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900089a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089a2:	f003 030c 	and.w	r3, r3, #12
900089a6:	2b0c      	cmp	r3, #12
900089a8:	d01a      	beq.n	900089e0 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900089aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089ac:	f003 030c 	and.w	r3, r3, #12
900089b0:	2b08      	cmp	r3, #8
900089b2:	d001      	beq.n	900089b8 <HAL_JPEG_Pause+0x18>
}
900089b4:	2000      	movs	r0, #0
900089b6:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900089b8:	07ca      	lsls	r2, r1, #31
900089ba:	d41f      	bmi.n	900089fc <HAL_JPEG_Pause+0x5c>
900089bc:	f04f 3cff 	mov.w	ip, #4294967295
900089c0:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900089c4:	078b      	lsls	r3, r1, #30
900089c6:	d504      	bpl.n	900089d2 <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
900089c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089ca:	4694      	mov	ip, r2
900089cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900089d0:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900089d2:	6802      	ldr	r2, [r0, #0]
}
900089d4:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900089d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
900089d8:	ea03 030c 	and.w	r3, r3, ip
900089dc:	6313      	str	r3, [r2, #48]	; 0x30
}
900089de:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900089e0:	07cb      	lsls	r3, r1, #31
900089e2:	d503      	bpl.n	900089ec <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900089e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900089ea:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900089ec:	0789      	lsls	r1, r1, #30
900089ee:	d5e1      	bpl.n	900089b4 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
900089f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900089f6:	6543      	str	r3, [r0, #84]	; 0x54
}
900089f8:	2000      	movs	r0, #0
900089fa:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900089fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
900089fe:	f06f 0c06 	mvn.w	ip, #6
90008a02:	f06f 022e 	mvn.w	r2, #46	; 0x2e
90008a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008a0a:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008a0c:	e7da      	b.n	900089c4 <HAL_JPEG_Pause+0x24>
90008a0e:	bf00      	nop

90008a10 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90008a10:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
90008a12:	6282      	str	r2, [r0, #40]	; 0x28
}
90008a14:	4770      	bx	lr
90008a16:	bf00      	nop

90008a18 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
90008a18:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
90008a1a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
90008a1c:	4770      	bx	lr
90008a1e:	bf00      	nop

90008a20 <HAL_JPEG_EncodeCpltCallback>:
90008a20:	4770      	bx	lr
90008a22:	bf00      	nop

90008a24 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008a24:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
90008a26:	2101      	movs	r1, #1
{
90008a28:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008a2a:	6803      	ldr	r3, [r0, #0]
90008a2c:	681a      	ldr	r2, [r3, #0]
90008a2e:	f022 0201 	bic.w	r2, r2, #1
90008a32:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008a36:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
90008a3c:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008a40:	6d03      	ldr	r3, [r0, #80]	; 0x50
90008a42:	f043 0304 	orr.w	r3, r3, #4
90008a46:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
90008a48:	f7f8 fef8 	bl	9000183c <HAL_JPEG_ErrorCallback>
}
90008a4c:	bd08      	pop	{r3, pc}
90008a4e:	bf00      	nop

90008a50 <JPEG_MDMAInCpltCallback>:
{
90008a50:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008a52:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008a54:	f248 010c 	movw	r1, #32780	; 0x800c
{
90008a58:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008a5a:	6822      	ldr	r2, [r4, #0]
90008a5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008a5e:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
90008a62:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008a66:	400b      	ands	r3, r1
90008a68:	2b0c      	cmp	r3, #12
90008a6a:	d001      	beq.n	90008a70 <JPEG_MDMAInCpltCallback+0x20>
}
90008a6c:	b003      	add	sp, #12
90008a6e:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008a70:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008a72:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008a76:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008a78:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008a7a:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008a7e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008a80:	1a9b      	subs	r3, r3, r2
90008a82:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008a84:	6a21      	ldr	r1, [r4, #32]
90008a86:	f7f8 fe71 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
90008a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008a8c:	42ab      	cmp	r3, r5
90008a8e:	d311      	bcc.n	90008ab4 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
90008a90:	b305      	cbz	r5, 90008ad4 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008a92:	fbb3 f2f5 	udiv	r2, r3, r5
90008a96:	fb05 3212 	mls	r2, r5, r2, r3
90008a9a:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008a9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008a9e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008aa0:	04d1      	lsls	r1, r2, #19
90008aa2:	d400      	bmi.n	90008aa6 <JPEG_MDMAInCpltCallback+0x56>
90008aa4:	b963      	cbnz	r3, 90008ac0 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008aa6:	6822      	ldr	r2, [r4, #0]
90008aa8:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008aaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
90008aae:	6313      	str	r3, [r2, #48]	; 0x30
}
90008ab0:	b003      	add	sp, #12
90008ab2:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
90008ab4:	b1cb      	cbz	r3, 90008aea <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
90008ab6:	0798      	lsls	r0, r3, #30
90008ab8:	d119      	bne.n	90008aee <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008aba:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008abc:	04d2      	lsls	r2, r2, #19
90008abe:	d4f2      	bmi.n	90008aa6 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008ac0:	6822      	ldr	r2, [r4, #0]
90008ac2:	2501      	movs	r5, #1
90008ac4:	69a1      	ldr	r1, [r4, #24]
90008ac6:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008ac8:	3240      	adds	r2, #64	; 0x40
90008aca:	9500      	str	r5, [sp, #0]
90008acc:	f001 f8b0 	bl	90009c30 <HAL_MDMA_Start_IT>
90008ad0:	2800      	cmp	r0, #0
90008ad2:	d0e8      	beq.n	90008aa6 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008ad4:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008ad6:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
90008ad8:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008ada:	f043 0304 	orr.w	r3, r3, #4
90008ade:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008ae0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
90008ae4:	f7f8 feaa 	bl	9000183c <HAL_JPEG_ErrorCallback>
        return;
90008ae8:	e7c0      	b.n	90008a6c <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008aec:	e7db      	b.n	90008aa6 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90008aee:	f023 0303 	bic.w	r3, r3, #3
90008af2:	3304      	adds	r3, #4
90008af4:	e7d2      	b.n	90008a9c <JPEG_MDMAInCpltCallback+0x4c>
90008af6:	bf00      	nop

90008af8 <JPEG_DMA_PollResidualData>:
{
90008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008afa:	6802      	ldr	r2, [r0, #0]
90008afc:	2610      	movs	r6, #16
{
90008afe:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008b00:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008b02:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008b06:	d11d      	bne.n	90008b44 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008b08:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008b0a:	06df      	lsls	r7, r3, #27
90008b0c:	d51a      	bpl.n	90008b44 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90008b0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008b10:	69e7      	ldr	r7, [r4, #28]
90008b12:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008b14:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008b16:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008b18:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008b1a:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008b1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
90008b1e:	69e2      	ldr	r2, [r4, #28]
90008b20:	443a      	add	r2, r7
90008b22:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008b24:	6a60      	ldr	r0, [r4, #36]	; 0x24
90008b26:	69e2      	ldr	r2, [r4, #28]
90008b28:	4402      	add	r2, r0
90008b2a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008b2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008b2e:	69e2      	ldr	r2, [r4, #28]
90008b30:	440a      	add	r2, r1
90008b32:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90008b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
90008b38:	3304      	adds	r3, #4
90008b3a:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008b3e:	4293      	cmp	r3, r2
90008b40:	d021      	beq.n	90008b86 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008b42:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90008b44:	3e01      	subs	r6, #1
90008b46:	d1db      	bne.n	90008b00 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
90008b48:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008b4a:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008b4c:	06d8      	lsls	r0, r3, #27
90008b4e:	d501      	bpl.n	90008b54 <JPEG_DMA_PollResidualData+0x5c>
90008b50:	048b      	lsls	r3, r1, #18
90008b52:	d417      	bmi.n	90008b84 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008b54:	6813      	ldr	r3, [r2, #0]
90008b56:	f023 0301 	bic.w	r3, r3, #1
90008b5a:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90008b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008b5e:	b9eb      	cbnz	r3, 90008b9c <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90008b60:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008b62:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008b64:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008b66:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008b68:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008b6c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008b70:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008b74:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008b76:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008b78:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008b7a:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008b7e:	d00a      	beq.n	90008b96 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008b80:	f7ff ff4e 	bl	90008a20 <HAL_JPEG_EncodeCpltCallback>
}
90008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008b86:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b88:	4620      	mov	r0, r4
90008b8a:	69e1      	ldr	r1, [r4, #28]
90008b8c:	f7f8 fe0e 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008b90:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
90008b92:	6265      	str	r5, [r4, #36]	; 0x24
90008b94:	e7d6      	b.n	90008b44 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008b96:	f7f8 fe53 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
90008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b9e:	4620      	mov	r0, r4
90008ba0:	69e1      	ldr	r1, [r4, #28]
90008ba2:	f7f8 fe03 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008ba6:	2300      	movs	r3, #0
90008ba8:	6263      	str	r3, [r4, #36]	; 0x24
90008baa:	e7d9      	b.n	90008b60 <JPEG_DMA_PollResidualData+0x68>

90008bac <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90008bac:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008bae:	f413 5f40 	tst.w	r3, #12288	; 0x3000
90008bb2:	d028      	beq.n	90008c06 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008bb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008bb6:	f003 030c 	and.w	r3, r3, #12
90008bba:	2b0c      	cmp	r3, #12
{
90008bbc:	b570      	push	{r4, r5, r6, lr}
90008bbe:	4604      	mov	r4, r0
90008bc0:	b082      	sub	sp, #8
90008bc2:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008bc4:	d007      	beq.n	90008bd6 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008bc6:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008bc8:	f003 030c 	and.w	r3, r3, #12
90008bcc:	2b08      	cmp	r3, #8
90008bce:	d037      	beq.n	90008c40 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
90008bd0:	2000      	movs	r0, #0
}
90008bd2:	b002      	add	sp, #8
90008bd4:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008bd6:	07c8      	lsls	r0, r1, #31
90008bd8:	d417      	bmi.n	90008c0a <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008bda:	07a9      	lsls	r1, r5, #30
90008bdc:	d5f8      	bpl.n	90008bd0 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008be4:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008be8:	041a      	lsls	r2, r3, #16
90008bea:	d453      	bmi.n	90008c94 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008bec:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008bee:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
90008bf0:	2a00      	cmp	r2, #0
90008bf2:	d13e      	bne.n	90008c72 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008bf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008bf6:	2206      	movs	r2, #6
          return HAL_ERROR;
90008bf8:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008bfa:	f043 0304 	orr.w	r3, r3, #4
90008bfe:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008c00:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90008c04:	e7e5      	b.n	90008bd2 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
90008c06:	2001      	movs	r0, #1
}
90008c08:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008c0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008c0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008c12:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008c14:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
90008c16:	2a00      	cmp	r2, #0
90008c18:	d0ec      	beq.n	90008bf4 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
90008c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008c1c:	fbb3 f1f2 	udiv	r1, r3, r2
90008c20:	fb02 3211 	mls	r2, r2, r1, r3
90008c24:	1a9b      	subs	r3, r3, r2
90008c26:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
90008c28:	2b00      	cmp	r3, #0
90008c2a:	d0d6      	beq.n	90008bda <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008c2c:	6822      	ldr	r2, [r4, #0]
90008c2e:	2601      	movs	r6, #1
90008c30:	3240      	adds	r2, #64	; 0x40
90008c32:	9600      	str	r6, [sp, #0]
90008c34:	69a1      	ldr	r1, [r4, #24]
90008c36:	f000 fffb 	bl	90009c30 <HAL_MDMA_Start_IT>
90008c3a:	2800      	cmp	r0, #0
90008c3c:	d0cd      	beq.n	90008bda <HAL_JPEG_Resume+0x2e>
90008c3e:	e7d9      	b.n	90008bf4 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008c40:	f011 0101 	ands.w	r1, r1, #1
90008c44:	d013      	beq.n	90008c6e <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008c46:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008c48:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008c4a:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90008c50:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008c52:	07ab      	lsls	r3, r5, #30
90008c54:	d504      	bpl.n	90008c60 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
90008c58:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008c5e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008c60:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90008c62:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008c64:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008c66:	430b      	orrs	r3, r1
90008c68:	6313      	str	r3, [r2, #48]	; 0x30
}
90008c6a:	b002      	add	sp, #8
90008c6c:	bd70      	pop	{r4, r5, r6, pc}
90008c6e:	2228      	movs	r2, #40	; 0x28
90008c70:	e7ef      	b.n	90008c52 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c74:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008c76:	fbb3 f1f2 	udiv	r1, r3, r2
90008c7a:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c7e:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008c80:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c82:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008c84:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c86:	9500      	str	r5, [sp, #0]
90008c88:	69e2      	ldr	r2, [r4, #28]
90008c8a:	f000 ffd1 	bl	90009c30 <HAL_MDMA_Start_IT>
90008c8e:	2800      	cmp	r0, #0
90008c90:	d09e      	beq.n	90008bd0 <HAL_JPEG_Resume+0x24>
90008c92:	e7af      	b.n	90008bf4 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90008c94:	4620      	mov	r0, r4
90008c96:	f7ff ff2f 	bl	90008af8 <JPEG_DMA_PollResidualData>
90008c9a:	e799      	b.n	90008bd0 <HAL_JPEG_Resume+0x24>

90008c9c <JPEG_MDMAOutCpltCallback>:
{
90008c9c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008c9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008ca0:	f248 010c 	movw	r1, #32780	; 0x800c
{
90008ca4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008ca6:	6823      	ldr	r3, [r4, #0]
90008ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008caa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008cae:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008cb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008cb2:	400a      	ands	r2, r1
90008cb4:	2a0c      	cmp	r2, #12
90008cb6:	d001      	beq.n	90008cbc <JPEG_MDMAOutCpltCallback+0x20>
}
90008cb8:	b003      	add	sp, #12
90008cba:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
90008cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008cbe:	0692      	lsls	r2, r2, #26
90008cc0:	d505      	bpl.n	90008cce <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008cc4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008cc8:	631a      	str	r2, [r3, #48]	; 0x30
}
90008cca:	b003      	add	sp, #12
90008ccc:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008cce:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008cd0:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008cd4:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008cd6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008cd8:	f3c2 0210 	ubfx	r2, r2, #0, #17
90008cdc:	1a9b      	subs	r3, r3, r2
90008cde:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008ce0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ce2:	f7f8 fd63 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008ce6:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008ce8:	049b      	lsls	r3, r3, #18
90008cea:	d501      	bpl.n	90008cf0 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008cec:	6823      	ldr	r3, [r4, #0]
90008cee:	e7e8      	b.n	90008cc2 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008cf0:	6821      	ldr	r1, [r4, #0]
90008cf2:	2501      	movs	r5, #1
90008cf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008cf6:	69e2      	ldr	r2, [r4, #28]
90008cf8:	3144      	adds	r1, #68	; 0x44
90008cfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008cfc:	9500      	str	r5, [sp, #0]
90008cfe:	f000 ff97 	bl	90009c30 <HAL_MDMA_Start_IT>
90008d02:	2800      	cmp	r0, #0
90008d04:	d0f2      	beq.n	90008cec <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008d06:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008d08:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90008d0a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008d0c:	f043 0304 	orr.w	r3, r3, #4
90008d10:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008d12:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
90008d16:	f7f8 fd91 	bl	9000183c <HAL_JPEG_ErrorCallback>
          return;
90008d1a:	e7cd      	b.n	90008cb8 <JPEG_MDMAOutCpltCallback+0x1c>

90008d1c <JPEG_MDMAOutAbortCallback>:
{
90008d1c:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008d1e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008d22:	041a      	lsls	r2, r3, #16
90008d24:	d400      	bmi.n	90008d28 <JPEG_MDMAOutAbortCallback+0xc>
}
90008d26:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
90008d2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90008d2c:	681b      	ldr	r3, [r3, #0]
90008d2e:	695b      	ldr	r3, [r3, #20]
90008d30:	f3c3 0310 	ubfx	r3, r3, #0, #17
90008d34:	1ad3      	subs	r3, r2, r3
90008d36:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008d3a:	429a      	cmp	r2, r3
90008d3c:	d025      	beq.n	90008d8a <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90008d3e:	6822      	ldr	r2, [r4, #0]
90008d40:	6b55      	ldr	r5, [r2, #52]	; 0x34
90008d42:	f015 0510 	ands.w	r5, r5, #16
90008d46:	d118      	bne.n	90008d7a <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90008d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008d4a:	bb4b      	cbnz	r3, 90008da0 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008d4c:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90008d4e:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90008d50:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008d52:	f023 0301 	bic.w	r3, r3, #1
90008d56:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90008d58:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008d5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008d5c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008d60:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008d64:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008d68:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008d6a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008d6c:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008d6e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008d72:	d012      	beq.n	90008d9a <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008d74:	f7ff fe54 	bl	90008a20 <HAL_JPEG_EncodeCpltCallback>
}
90008d78:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008d7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008d7c:	049b      	lsls	r3, r3, #18
90008d7e:	d4d2      	bmi.n	90008d26 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
90008d80:	4620      	mov	r0, r4
}
90008d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90008d86:	f7ff beb7 	b.w	90008af8 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d8c:	4620      	mov	r0, r4
90008d8e:	69e1      	ldr	r1, [r4, #28]
90008d90:	f7f8 fd0c 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90008d94:	2300      	movs	r3, #0
90008d96:	6263      	str	r3, [r4, #36]	; 0x24
90008d98:	e7d1      	b.n	90008d3e <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008d9a:	f7f8 fd51 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
90008d9e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008da2:	4620      	mov	r0, r4
90008da4:	69e1      	ldr	r1, [r4, #28]
90008da6:	f7f8 fd01 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008daa:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90008dac:	6265      	str	r5, [r4, #36]	; 0x24
90008dae:	e7cd      	b.n	90008d4c <JPEG_MDMAOutAbortCallback+0x30>

90008db0 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008db0:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008db2:	f003 0303 	and.w	r3, r3, #3
90008db6:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90008db8:	6803      	ldr	r3, [r0, #0]
{
90008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008dbe:	4604      	mov	r4, r0
90008dc0:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008dc2:	d01f      	beq.n	90008e04 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
90008dc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008dc6:	04d7      	lsls	r7, r2, #19
90008dc8:	d407      	bmi.n	90008dda <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
90008dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008dcc:	0796      	lsls	r6, r2, #30
90008dce:	f100 811d 	bmi.w	9000900c <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90008dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008dd4:	0750      	lsls	r0, r2, #29
90008dd6:	f100 81b1 	bmi.w	9000913c <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008dda:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008ddc:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008de0:	d107      	bne.n	90008df2 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90008de2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90008de4:	f016 0608 	ands.w	r6, r6, #8
90008de8:	d14c      	bne.n	90008e84 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008dec:	06d2      	lsls	r2, r2, #27
90008dee:	f100 81e3 	bmi.w	900091b8 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008df4:	f002 0238 	and.w	r2, r2, #56	; 0x38
90008df8:	2a20      	cmp	r2, #32
90008dfa:	d01a      	beq.n	90008e32 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
90008dfc:	2000      	movs	r0, #0
}
90008dfe:	b002      	add	sp, #8
90008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90008e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008e06:	0652      	lsls	r2, r2, #25
90008e08:	d5dc      	bpl.n	90008dc4 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90008e0a:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90008e0c:	9101      	str	r1, [sp, #4]
90008e0e:	f7ff fb79 	bl	90008504 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90008e12:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90008e14:	9901      	ldr	r1, [sp, #4]
90008e16:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90008e18:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90008e1a:	f7f8 fc55 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90008e1e:	6823      	ldr	r3, [r4, #0]
90008e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90008e26:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90008e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90008e2e:	639a      	str	r2, [r3, #56]	; 0x38
90008e30:	e7c8      	b.n	90008dc4 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008e32:	681a      	ldr	r2, [r3, #0]
90008e34:	f022 0201 	bic.w	r2, r2, #1
90008e38:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008e3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008e3c:	f002 020c 	and.w	r2, r2, #12
90008e40:	2a08      	cmp	r2, #8
90008e42:	f000 81e6 	beq.w	90009212 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008e48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008e4c:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
90008e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008e50:	2b00      	cmp	r3, #0
90008e52:	f040 81e3 	bne.w	9000921c <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
90008e56:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008e58:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008e5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008e5c:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008e5e:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008e62:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008e64:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90008e68:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008e6c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008e6e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008e70:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008e74:	f000 81c9 	beq.w	9000920a <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008e78:	f7ff fdd2 	bl	90008a20 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90008e7c:	4628      	mov	r0, r5
}
90008e7e:	b002      	add	sp, #8
90008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90008e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008e88:	3220      	adds	r2, #32
90008e8a:	4296      	cmp	r6, r2
90008e8c:	f0c0 81e4 	bcc.w	90009258 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
90008e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e92:	69e1      	ldr	r1, [r4, #28]
90008e94:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e96:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008e98:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e9a:	69e2      	ldr	r2, [r4, #28]
90008e9c:	440a      	add	r2, r1
90008e9e:	0a19      	lsrs	r1, r3, #8
90008ea0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ea4:	69e2      	ldr	r2, [r4, #28]
90008ea6:	440a      	add	r2, r1
90008ea8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008eaa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008eac:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008eae:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008eb0:	69e2      	ldr	r2, [r4, #28]
90008eb2:	440a      	add	r2, r1
90008eb4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008eb8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008eba:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ebc:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008ebe:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008ec0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ec2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ec4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008ec6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ec8:	69e2      	ldr	r2, [r4, #28]
90008eca:	440a      	add	r2, r1
90008ecc:	0a19      	lsrs	r1, r3, #8
90008ece:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ed0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ed2:	69e2      	ldr	r2, [r4, #28]
90008ed4:	440a      	add	r2, r1
90008ed6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ed8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008eda:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ede:	69e2      	ldr	r2, [r4, #28]
90008ee0:	440a      	add	r2, r1
90008ee2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008ee6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008ee8:	3304      	adds	r3, #4
90008eea:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008eec:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ef0:	69e1      	ldr	r1, [r4, #28]
90008ef2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ef6:	69e2      	ldr	r2, [r4, #28]
90008ef8:	440a      	add	r2, r1
90008efa:	0a19      	lsrs	r1, r3, #8
90008efc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f00:	69e2      	ldr	r2, [r4, #28]
90008f02:	440a      	add	r2, r1
90008f04:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f06:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f08:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f0c:	69e2      	ldr	r2, [r4, #28]
90008f0e:	440a      	add	r2, r1
90008f10:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f14:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008f16:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f18:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008f1a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008f1c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f20:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008f22:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f24:	69e2      	ldr	r2, [r4, #28]
90008f26:	440a      	add	r2, r1
90008f28:	0a19      	lsrs	r1, r3, #8
90008f2a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f2e:	69e2      	ldr	r2, [r4, #28]
90008f30:	440a      	add	r2, r1
90008f32:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f34:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f36:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f3a:	69e2      	ldr	r2, [r4, #28]
90008f3c:	440a      	add	r2, r1
90008f3e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f42:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008f44:	3304      	adds	r3, #4
90008f46:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008f48:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f4c:	69e1      	ldr	r1, [r4, #28]
90008f4e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008f50:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f52:	69e2      	ldr	r2, [r4, #28]
90008f54:	440a      	add	r2, r1
90008f56:	0a19      	lsrs	r1, r3, #8
90008f58:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f5c:	69e2      	ldr	r2, [r4, #28]
90008f5e:	440a      	add	r2, r1
90008f60:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f62:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f64:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f66:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f68:	69e2      	ldr	r2, [r4, #28]
90008f6a:	440a      	add	r2, r1
90008f6c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f70:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008f72:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f74:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008f76:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008f78:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f7c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f80:	69e2      	ldr	r2, [r4, #28]
90008f82:	440a      	add	r2, r1
90008f84:	0a19      	lsrs	r1, r3, #8
90008f86:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f88:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f8a:	69e2      	ldr	r2, [r4, #28]
90008f8c:	440a      	add	r2, r1
90008f8e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f90:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f92:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f96:	69e2      	ldr	r2, [r4, #28]
90008f98:	440a      	add	r2, r1
90008f9a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f9e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008fa0:	3304      	adds	r3, #4
90008fa2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008fa4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008fa8:	69e1      	ldr	r1, [r4, #28]
90008faa:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008fae:	69e2      	ldr	r2, [r4, #28]
90008fb0:	440a      	add	r2, r1
90008fb2:	0a19      	lsrs	r1, r3, #8
90008fb4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008fb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008fb8:	69e2      	ldr	r2, [r4, #28]
90008fba:	440a      	add	r2, r1
90008fbc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008fbe:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008fc0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008fc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008fc4:	69e2      	ldr	r2, [r4, #28]
90008fc6:	440a      	add	r2, r1
90008fc8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008fcc:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008fce:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008fd0:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008fd2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008fd4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008fd8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008fda:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008fdc:	69e2      	ldr	r2, [r4, #28]
90008fde:	440a      	add	r2, r1
90008fe0:	0a19      	lsrs	r1, r3, #8
90008fe2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008fe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008fe6:	69e2      	ldr	r2, [r4, #28]
90008fe8:	440a      	add	r2, r1
90008fea:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008fec:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008fee:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ff2:	69e2      	ldr	r2, [r4, #28]
90008ff4:	440a      	add	r2, r1
90008ff6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008ffa:	3304      	adds	r3, #4
90008ffc:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009000:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009002:	429a      	cmp	r2, r3
90009004:	f000 82ae 	beq.w	90009564 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009008:	6823      	ldr	r3, [r4, #0]
9000900a:	e6f2      	b.n	90008df2 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000900c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000900e:	2a00      	cmp	r2, #0
90009010:	f000 810c 	beq.w	9000922c <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009014:	6a21      	ldr	r1, [r4, #32]
90009016:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009018:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000901a:	f240 81a4 	bls.w	90009366 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000901e:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009020:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009022:	04cd      	lsls	r5, r1, #19
90009024:	f53f aed9 	bmi.w	90008dda <JPEG_Process+0x2a>
90009028:	2a00      	cmp	r2, #0
9000902a:	f43f aed6 	beq.w	90008dda <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000902e:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90009030:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009034:	f240 8203 	bls.w	9000943e <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009038:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000903a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000903c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000903e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009040:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009042:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009044:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009046:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009048:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000904c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000904e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009052:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009054:	6a21      	ldr	r1, [r4, #32]
90009056:	3104      	adds	r1, #4
90009058:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000905a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000905c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000905e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009060:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009062:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009064:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009066:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009068:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000906c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000906e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009072:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009074:	6a21      	ldr	r1, [r4, #32]
90009076:	3104      	adds	r1, #4
90009078:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000907a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000907c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000907e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009080:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009082:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009084:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009086:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009088:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000908c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000908e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009092:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009094:	6a21      	ldr	r1, [r4, #32]
90009096:	3104      	adds	r1, #4
90009098:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000909a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000909c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000909e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090a0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090a2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090a4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900090a6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090a8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900090ac:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090ae:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090b2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900090b4:	6a21      	ldr	r1, [r4, #32]
900090b6:	3104      	adds	r1, #4
900090b8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900090ba:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090bc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090be:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090c0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090c2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090c4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900090c6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090c8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900090cc:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090ce:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090d2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900090d4:	6a21      	ldr	r1, [r4, #32]
900090d6:	3104      	adds	r1, #4
900090d8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900090da:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090dc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090de:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090e0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090e2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090e4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900090e6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090e8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900090ec:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090ee:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090f2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900090f4:	6a21      	ldr	r1, [r4, #32]
900090f6:	3104      	adds	r1, #4
900090f8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900090fa:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090fc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090fe:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009100:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009102:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009104:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009106:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009108:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000910c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000910e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009112:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009114:	6a21      	ldr	r1, [r4, #32]
90009116:	3104      	adds	r1, #4
90009118:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000911a:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000911c:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000911e:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009120:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009122:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009124:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009126:	7849      	ldrb	r1, [r1, #1]
90009128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000912c:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000912e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009132:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009134:	6a22      	ldr	r2, [r4, #32]
90009136:	3204      	adds	r2, #4
90009138:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000913a:	e64e      	b.n	90008dda <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000913c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000913e:	2a00      	cmp	r2, #0
90009140:	d074      	beq.n	9000922c <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009142:	6a21      	ldr	r1, [r4, #32]
90009144:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009146:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009148:	f200 8164 	bhi.w	90009414 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000914c:	428a      	cmp	r2, r1
9000914e:	f040 810c 	bne.w	9000936a <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009152:	6a21      	ldr	r1, [r4, #32]
90009154:	4620      	mov	r0, r4
90009156:	f7f8 fb09 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000915a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000915c:	2a04      	cmp	r2, #4
9000915e:	d902      	bls.n	90009166 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009160:	f022 0203 	bic.w	r2, r2, #3
90009164:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009166:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009168:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000916a:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000916c:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000916e:	04c9      	lsls	r1, r1, #19
90009170:	f53f ae33 	bmi.w	90008dda <JPEG_Process+0x2a>
90009174:	2a00      	cmp	r2, #0
90009176:	f43f ae30 	beq.w	90008dda <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000917a:	0891      	lsrs	r1, r2, #2
9000917c:	f040 8203 	bne.w	90009586 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009180:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009182:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009184:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009186:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009188:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000918c:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000918e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009190:	d010      	beq.n	900091b4 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009192:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009194:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009196:	5c69      	ldrb	r1, [r5, r1]
90009198:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000919c:	6a21      	ldr	r1, [r4, #32]
9000919e:	f101 0101 	add.w	r1, r1, #1
900091a2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900091a4:	d106      	bne.n	900091b4 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900091a6:	6a22      	ldr	r2, [r4, #32]
900091a8:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
900091aa:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900091ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
900091b0:	3201      	adds	r2, #1
900091b2:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
900091b4:	6418      	str	r0, [r3, #64]	; 0x40
900091b6:	e610      	b.n	90008dda <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
900091b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900091ba:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
900091bc:	3204      	adds	r2, #4
900091be:	4295      	cmp	r5, r2
900091c0:	f0c0 80d5 	bcc.w	9000936e <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
900091c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900091c6:	69e1      	ldr	r1, [r4, #28]
900091c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900091ca:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900091cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
900091ce:	69e2      	ldr	r2, [r4, #28]
900091d0:	440a      	add	r2, r1
900091d2:	0a19      	lsrs	r1, r3, #8
900091d4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900091d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
900091d8:	69e2      	ldr	r2, [r4, #28]
900091da:	440a      	add	r2, r1
900091dc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900091de:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900091e0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900091e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
900091e4:	69e2      	ldr	r2, [r4, #28]
900091e6:	440a      	add	r2, r1
900091e8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900091ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900091ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
900091ee:	3304      	adds	r3, #4
900091f0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900091f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900091f4:	429a      	cmp	r2, r3
900091f6:	f47f af07 	bne.w	90009008 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900091fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
900091fc:	4620      	mov	r0, r4
900091fe:	69e1      	ldr	r1, [r4, #28]
90009200:	f7f8 fad4 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009204:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009206:	6266      	str	r6, [r4, #36]	; 0x24
90009208:	e5f3      	b.n	90008df2 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000920a:	f7f8 fb19 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000920e:	4628      	mov	r0, r5
90009210:	e5f5      	b.n	90008dfe <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009214:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009218:	631a      	str	r2, [r3, #48]	; 0x30
9000921a:	e614      	b.n	90008e46 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000921c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000921e:	4620      	mov	r0, r4
90009220:	69e1      	ldr	r1, [r4, #28]
90009222:	f7f8 fac3 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009226:	2300      	movs	r3, #0
90009228:	6263      	str	r3, [r4, #36]	; 0x24
9000922a:	e614      	b.n	90008e56 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000922c:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000922e:	f002 020c 	and.w	r2, r2, #12
90009232:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009234:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009236:	f000 80fd 	beq.w	90009434 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000923a:	f002 020c 	and.w	r2, r2, #12
9000923e:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009240:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009242:	f47f adca 	bne.w	90008dda <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000924a:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000924c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000924e:	f022 0206 	bic.w	r2, r2, #6
90009252:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009254:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009256:	e5c0      	b.n	90008dda <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009258:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000925a:	4296      	cmp	r6, r2
9000925c:	f67f adc9 	bls.w	90008df2 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009260:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009262:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90009264:	0880      	lsrs	r0, r0, #2
90009266:	d020      	beq.n	900092aa <JPEG_Process+0x4fa>
90009268:	4629      	mov	r1, r5
9000926a:	e000      	b.n	9000926e <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000926c:	6823      	ldr	r3, [r4, #0]
9000926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009270:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009272:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009274:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009276:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009278:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000927a:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000927c:	69e2      	ldr	r2, [r4, #28]
9000927e:	4432      	add	r2, r6
90009280:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009284:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009286:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009288:	69e2      	ldr	r2, [r4, #28]
9000928a:	4432      	add	r2, r6
9000928c:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009290:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009294:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009296:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009298:	69e2      	ldr	r2, [r4, #28]
9000929a:	4432      	add	r2, r6
9000929c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000929e:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092a0:	f103 0304 	add.w	r3, r3, #4
900092a4:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
900092a6:	d1e1      	bne.n	9000926c <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900092a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900092aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092ac:	42b3      	cmp	r3, r6
900092ae:	f000 8161 	beq.w	90009574 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
900092b2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900092b6:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
900092b8:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
900092bc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
900092be:	d00e      	beq.n	900092de <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900092c0:	f005 0303 	and.w	r3, r5, #3
900092c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092c6:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
900092c8:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900092ca:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
900092cc:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900092ce:	fa27 f303 	lsr.w	r3, r7, r3
900092d2:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
900092d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092d6:	f103 0301 	add.w	r3, r3, #1
900092da:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
900092dc:	d1f0      	bne.n	900092c0 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
900092de:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900092e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092e4:	69e1      	ldr	r1, [r4, #28]
900092e6:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
900092e8:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900092ec:	f7f8 fa5e 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900092f0:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
900092f2:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
900092f6:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900092f8:	f63f ae86 	bhi.w	90009008 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900092fc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90009300:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009302:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009304:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009308:	fa27 f003 	lsr.w	r0, r7, r3
9000930c:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000930e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009310:	f102 0201 	add.w	r2, r2, #1
90009314:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009316:	f43f ae77 	beq.w	90009008 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000931a:	f103 0208 	add.w	r2, r3, #8
9000931e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009320:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009322:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009326:	fa27 f202 	lsr.w	r2, r7, r2
9000932a:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000932c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000932e:	f102 0201 	add.w	r2, r2, #1
90009332:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009334:	f108 0202 	add.w	r2, r8, #2
90009338:	f43f ae66 	beq.w	90009008 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000933c:	3310      	adds	r3, #16
9000933e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009340:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009342:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009344:	fa27 f303 	lsr.w	r3, r7, r3
90009348:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000934a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000934c:	f103 0301 	add.w	r3, r3, #1
90009350:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009352:	f47f ae59 	bne.w	90009008 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009356:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009358:	0e3f      	lsrs	r7, r7, #24
9000935a:	69e2      	ldr	r2, [r4, #28]
9000935c:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000935e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009360:	3301      	adds	r3, #1
90009362:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009364:	e650      	b.n	90009008 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009366:	428a      	cmp	r2, r1
90009368:	d056      	beq.n	90009418 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000936a:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000936c:	e535      	b.n	90008dda <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000936e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009370:	4295      	cmp	r5, r2
90009372:	f67f ad3e 	bls.w	90008df2 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009376:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009378:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000937a:	0880      	lsrs	r0, r0, #2
9000937c:	d020      	beq.n	900093c0 <JPEG_Process+0x610>
9000937e:	4631      	mov	r1, r6
90009380:	e000      	b.n	90009384 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
90009382:	6823      	ldr	r3, [r4, #0]
90009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009386:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009388:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000938a:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000938c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000938e:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009390:	6a65      	ldr	r5, [r4, #36]	; 0x24
90009392:	69e2      	ldr	r2, [r4, #28]
90009394:	442a      	add	r2, r5
90009396:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000939a:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000939c:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000939e:	69e2      	ldr	r2, [r4, #28]
900093a0:	442a      	add	r2, r5
900093a2:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900093a6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900093aa:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900093ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
900093ae:	69e2      	ldr	r2, [r4, #28]
900093b0:	442a      	add	r2, r5
900093b2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900093b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
900093b6:	f103 0304 	add.w	r3, r3, #4
900093ba:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
900093bc:	d1e1      	bne.n	90009382 <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900093be:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
900093c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
900093c2:	429d      	cmp	r5, r3
900093c4:	f000 80d6 	beq.w	90009574 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
900093c8:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900093cc:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
900093ce:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
900093d2:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
900093d4:	d00e      	beq.n	900093f4 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900093d6:	f006 0303 	and.w	r3, r6, #3
900093da:	6a62      	ldr	r2, [r4, #36]	; 0x24
900093dc:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
900093de:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900093e0:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
900093e2:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900093e4:	fa27 f303 	lsr.w	r3, r7, r3
900093e8:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
900093ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
900093ec:	f103 0301 	add.w	r3, r3, #1
900093f0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
900093f2:	d1f0      	bne.n	900093d6 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
900093f4:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900093f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900093fa:	69e1      	ldr	r1, [r4, #28]
900093fc:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
900093fe:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009402:	f7f8 f9d3 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009406:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90009408:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000940c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000940e:	f67f af75 	bls.w	900092fc <JPEG_Process+0x54c>
90009412:	e5f9      	b.n	90009008 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009414:	1a52      	subs	r2, r2, r1
90009416:	e6a9      	b.n	9000916c <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009418:	6a21      	ldr	r1, [r4, #32]
9000941a:	4620      	mov	r0, r4
9000941c:	f7f8 f9a6 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009420:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009422:	2a04      	cmp	r2, #4
90009424:	d902      	bls.n	9000942c <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009426:	f022 0203 	bic.w	r2, r2, #3
9000942a:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000942c:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000942e:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009430:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
90009432:	e5f5      	b.n	90009020 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009438:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000943a:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000943c:	e4cd      	b.n	90008dda <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000943e:	2a03      	cmp	r2, #3
90009440:	f240 80a4 	bls.w	9000958c <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
90009444:	2900      	cmp	r1, #0
90009446:	f43f acc8 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000944a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000944c:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000944e:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009450:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009454:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009456:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009458:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000945a:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000945e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009460:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009464:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009468:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000946c:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000946e:	6a20      	ldr	r0, [r4, #32]
90009470:	f100 0004 	add.w	r0, r0, #4
90009474:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009476:	f43f acb0 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000947a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000947c:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000947e:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009482:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009484:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009486:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009488:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000948c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000948e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009492:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009496:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000949a:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000949c:	6a20      	ldr	r0, [r4, #32]
9000949e:	f100 0004 	add.w	r0, r0, #4
900094a2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094a4:	f43f ac99 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900094a8:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094aa:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094ac:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094b0:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094b2:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094b4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094b6:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094ba:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094bc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900094c0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094c4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094c8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900094ca:	6a20      	ldr	r0, [r4, #32]
900094cc:	f100 0004 	add.w	r0, r0, #4
900094d0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094d2:	f43f ac82 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900094d6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094d8:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094da:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094de:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094e0:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094e2:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094e4:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094e8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094ea:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900094ee:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094f2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094f6:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900094f8:	6a20      	ldr	r0, [r4, #32]
900094fa:	f100 0004 	add.w	r0, r0, #4
900094fe:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009500:	f43f ac6b 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009504:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009506:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009508:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000950c:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000950e:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009510:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009512:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009516:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009518:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000951c:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009520:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009524:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009526:	6a20      	ldr	r0, [r4, #32]
90009528:	f100 0004 	add.w	r0, r0, #4
9000952c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000952e:	f43f ac54 	beq.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009532:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009534:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009536:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000953a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000953c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000953e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009540:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009544:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009546:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000954a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000954e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009552:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009554:	6a20      	ldr	r0, [r4, #32]
90009556:	f100 0004 	add.w	r0, r0, #4
9000955a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000955c:	f47f ac3d 	bne.w	90008dda <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009560:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009562:	e5db      	b.n	9000911c <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009564:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009566:	4620      	mov	r0, r4
90009568:	69e1      	ldr	r1, [r4, #28]
9000956a:	f7f8 f91f 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000956e:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009570:	6265      	str	r5, [r4, #36]	; 0x24
90009572:	e43e      	b.n	90008df2 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009574:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009576:	4620      	mov	r0, r4
90009578:	69e1      	ldr	r1, [r4, #28]
9000957a:	f7f8 f917 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000957e:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009580:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009582:	6262      	str	r2, [r4, #36]	; 0x24
90009584:	e435      	b.n	90008df2 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
90009586:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009588:	69a0      	ldr	r0, [r4, #24]
9000958a:	e5c7      	b.n	9000911c <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000958c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000958e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009590:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009592:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009594:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009598:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000959a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000959c:	d010      	beq.n	900095c0 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000959e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900095a0:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900095a2:	5c28      	ldrb	r0, [r5, r0]
900095a4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
900095a8:	6a20      	ldr	r0, [r4, #32]
900095aa:	f100 0001 	add.w	r0, r0, #1
900095ae:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900095b0:	d106      	bne.n	900095c0 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900095b2:	6a22      	ldr	r2, [r4, #32]
900095b4:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
900095b6:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900095b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
900095bc:	3201      	adds	r2, #1
900095be:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
900095c0:	6419      	str	r1, [r3, #64]	; 0x40
900095c2:	e40a      	b.n	90008dda <JPEG_Process+0x2a>

900095c4 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
900095c4:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
900095c8:	3b03      	subs	r3, #3
900095ca:	2b01      	cmp	r3, #1
900095cc:	d900      	bls.n	900095d0 <HAL_JPEG_IRQHandler+0xc>
900095ce:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900095d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900095d2:	f003 030c 	and.w	r3, r3, #12
900095d6:	2b08      	cmp	r3, #8
{
900095d8:	b530      	push	{r4, r5, lr}
900095da:	4604      	mov	r4, r0
900095dc:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900095de:	d006      	beq.n	900095ee <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900095e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900095e2:	f003 030c 	and.w	r3, r3, #12
900095e6:	2b0c      	cmp	r3, #12
900095e8:	d006      	beq.n	900095f8 <HAL_JPEG_IRQHandler+0x34>
}
900095ea:	b003      	add	sp, #12
900095ec:	bd30      	pop	{r4, r5, pc}
900095ee:	b003      	add	sp, #12
900095f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
900095f4:	f7ff bbdc 	b.w	90008db0 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900095f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900095fa:	f003 0303 	and.w	r3, r3, #3
900095fe:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009600:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009602:	d045      	beq.n	90009690 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
90009604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009606:	0692      	lsls	r2, r2, #26
90009608:	d5ef      	bpl.n	900095ea <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000960a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000960c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000960e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90009612:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009614:	681a      	ldr	r2, [r3, #0]
90009616:	f022 0201 	bic.w	r2, r2, #1
9000961a:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000961c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000961e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009622:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009626:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000962a:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000962c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90009630:	2b02      	cmp	r3, #2
90009632:	d052      	beq.n	900096da <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
90009634:	6b60      	ldr	r0, [r4, #52]	; 0x34
90009636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000963a:	2b02      	cmp	r3, #2
9000963c:	d03f      	beq.n	900096be <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000963e:	6803      	ldr	r3, [r0, #0]
90009640:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009642:	695b      	ldr	r3, [r3, #20]
90009644:	f3c3 0310 	ubfx	r3, r3, #0, #17
90009648:	1ad3      	subs	r3, r2, r3
9000964a:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000964c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000964e:	429a      	cmp	r2, r3
90009650:	d046      	beq.n	900096e0 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90009652:	6822      	ldr	r2, [r4, #0]
90009654:	6b55      	ldr	r5, [r2, #52]	; 0x34
90009656:	f015 0510 	ands.w	r5, r5, #16
9000965a:	d135      	bne.n	900096c8 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000965c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000965e:	2b00      	cmp	r3, #0
90009660:	d149      	bne.n	900096f6 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009662:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90009664:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90009666:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009668:	f023 0301 	bic.w	r3, r3, #1
9000966c:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000966e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009670:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009672:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009676:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000967a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000967e:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009680:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009682:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009684:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009688:	d032      	beq.n	900096f0 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000968a:	f7ff f9c9 	bl	90008a20 <HAL_JPEG_EncodeCpltCallback>
9000968e:	e7ac      	b.n	900095ea <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009692:	0651      	lsls	r1, r2, #25
90009694:	d5b6      	bpl.n	90009604 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009696:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009698:	9101      	str	r1, [sp, #4]
9000969a:	f7fe ff33 	bl	90008504 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000969e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900096a0:	9901      	ldr	r1, [sp, #4]
900096a2:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
900096a4:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900096a6:	f7f8 f80f 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
900096aa:	6823      	ldr	r3, [r4, #0]
900096ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900096ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
900096b2:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
900096b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900096b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900096ba:	639a      	str	r2, [r3, #56]	; 0x38
900096bc:	e7a2      	b.n	90009604 <HAL_JPEG_IRQHandler+0x40>
}
900096be:	b003      	add	sp, #12
900096c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
900096c4:	f000 bb30 	b.w	90009d28 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900096c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
900096ca:	049b      	lsls	r3, r3, #18
900096cc:	d48d      	bmi.n	900095ea <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
900096ce:	4620      	mov	r0, r4
}
900096d0:	b003      	add	sp, #12
900096d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
900096d6:	f7ff ba0f 	b.w	90008af8 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
900096da:	f000 fb25 	bl	90009d28 <HAL_MDMA_Abort_IT>
900096de:	e7a9      	b.n	90009634 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900096e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096e2:	4620      	mov	r0, r4
900096e4:	69e1      	ldr	r1, [r4, #28]
900096e6:	f7f8 f861 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
900096ea:	2300      	movs	r3, #0
900096ec:	6263      	str	r3, [r4, #36]	; 0x24
900096ee:	e7b0      	b.n	90009652 <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900096f0:	f7f8 f8a6 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
900096f4:	e779      	b.n	900095ea <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900096f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096f8:	4620      	mov	r0, r4
900096fa:	69e1      	ldr	r1, [r4, #28]
900096fc:	f7f8 f856 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009700:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009702:	6265      	str	r5, [r4, #36]	; 0x24
90009704:	e7ad      	b.n	90009662 <HAL_JPEG_IRQHandler+0x9e>
90009706:	bf00      	nop

90009708 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90009708:	2800      	cmp	r0, #0
9000970a:	d067      	beq.n	900097dc <HAL_LTDC_Init+0xd4>
{
9000970c:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000970e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90009712:	4604      	mov	r4, r0
90009714:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009718:	2b00      	cmp	r3, #0
9000971a:	d05a      	beq.n	900097d2 <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000971c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000971e:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009720:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009724:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009728:	4302      	orrs	r2, r0
9000972a:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000972c:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000972e:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009730:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009732:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009736:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009738:	4929      	ldr	r1, [pc, #164]	; (900097e0 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000973a:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000973c:	6998      	ldr	r0, [r3, #24]
9000973e:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90009740:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009742:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009744:	689a      	ldr	r2, [r3, #8]
90009746:	400a      	ands	r2, r1
90009748:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000974a:	689a      	ldr	r2, [r3, #8]
9000974c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009750:	69a0      	ldr	r0, [r4, #24]
90009752:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90009754:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90009756:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90009758:	68da      	ldr	r2, [r3, #12]
9000975a:	400a      	ands	r2, r1
9000975c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000975e:	68da      	ldr	r2, [r3, #12]
90009760:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009764:	6a20      	ldr	r0, [r4, #32]
90009766:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90009768:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000976a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000976c:	691a      	ldr	r2, [r3, #16]
9000976e:	400a      	ands	r2, r1
90009770:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90009772:	691a      	ldr	r2, [r3, #16]
90009774:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009778:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000977a:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000977c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000977e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90009780:	695a      	ldr	r2, [r3, #20]
90009782:	400a      	ands	r2, r1
90009784:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90009786:	695a      	ldr	r2, [r3, #20]
90009788:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000978a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000978e:	430a      	orrs	r2, r1
90009790:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90009794:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009798:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000979c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900097a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900097a2:	6add      	ldr	r5, [r3, #44]	; 0x2c
900097a4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900097a8:	432a      	orrs	r2, r5
900097aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900097ae:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900097b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900097b4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900097b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900097b8:	f042 0206 	orr.w	r2, r2, #6
900097bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900097be:	699a      	ldr	r2, [r3, #24]
900097c0:	f042 0201 	orr.w	r2, r2, #1
900097c4:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
900097c6:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900097c8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
900097cc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
900097d0:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
900097d2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
900097d6:	f7fb f883 	bl	900048e0 <HAL_LTDC_MspInit>
900097da:	e79f      	b.n	9000971c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
900097dc:	2001      	movs	r0, #1
}
900097de:	4770      	bx	lr
900097e0:	f000f800 	.word	0xf000f800

900097e4 <HAL_LTDC_ErrorCallback>:
900097e4:	4770      	bx	lr
900097e6:	bf00      	nop

900097e8 <HAL_LTDC_ReloadEventCallback>:
900097e8:	4770      	bx	lr
900097ea:	bf00      	nop

900097ec <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
900097ec:	6803      	ldr	r3, [r0, #0]
{
900097ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
900097f0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
900097f2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
900097f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
900097f6:	076a      	lsls	r2, r5, #29
900097f8:	d501      	bpl.n	900097fe <HAL_LTDC_IRQHandler+0x12>
900097fa:	0771      	lsls	r1, r6, #29
900097fc:	d41d      	bmi.n	9000983a <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
900097fe:	07aa      	lsls	r2, r5, #30
90009800:	d501      	bpl.n	90009806 <HAL_LTDC_IRQHandler+0x1a>
90009802:	07b3      	lsls	r3, r6, #30
90009804:	d42d      	bmi.n	90009862 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90009806:	07e8      	lsls	r0, r5, #31
90009808:	d501      	bpl.n	9000980e <HAL_LTDC_IRQHandler+0x22>
9000980a:	07f1      	lsls	r1, r6, #31
9000980c:	d440      	bmi.n	90009890 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000980e:	072a      	lsls	r2, r5, #28
90009810:	d501      	bpl.n	90009816 <HAL_LTDC_IRQHandler+0x2a>
90009812:	0733      	lsls	r3, r6, #28
90009814:	d400      	bmi.n	90009818 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90009816:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009818:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000981a:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000981c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000981e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009822:	f022 0208 	bic.w	r2, r2, #8
90009826:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009828:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000982a:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000982c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009830:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
90009834:	f7ff ffd8 	bl	900097e8 <HAL_LTDC_ReloadEventCallback>
}
90009838:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000983a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000983c:	f022 0204 	bic.w	r2, r2, #4
90009840:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
90009842:	2204      	movs	r2, #4
90009844:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
90009846:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000984a:	f043 0301 	orr.w	r3, r3, #1
9000984e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
90009852:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009854:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009858:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000985c:	f7ff ffc2 	bl	900097e4 <HAL_LTDC_ErrorCallback>
90009860:	e7cd      	b.n	900097fe <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009862:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
90009864:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009868:	f022 0202 	bic.w	r2, r2, #2
9000986c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000986e:	2202      	movs	r2, #2
90009870:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009872:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90009874:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
90009878:	f043 0302 	orr.w	r3, r3, #2
9000987c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
90009880:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009882:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009886:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000988a:	f7ff ffab 	bl	900097e4 <HAL_LTDC_ErrorCallback>
9000988e:	e7ba      	b.n	90009806 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009890:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
90009892:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009896:	f022 0201 	bic.w	r2, r2, #1
9000989a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000989c:	2201      	movs	r2, #1
9000989e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
900098a0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
900098a2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
900098a6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
900098aa:	f7f8 ffa1 	bl	900027f0 <HAL_LTDC_LineEventCallback>
900098ae:	e7ae      	b.n	9000980e <HAL_LTDC_IRQHandler+0x22>

900098b0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900098b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
900098b4:	2b01      	cmp	r3, #1
900098b6:	f000 80c0 	beq.w	90009a3a <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900098ba:	2302      	movs	r3, #2
{
900098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900098c0:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900098c4:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
900098c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
900098cc:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900098ce:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900098d2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900098d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900098d8:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900098da:	f102 0684 	add.w	r6, r2, #132	; 0x84
900098de:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900098e0:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
900098e4:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900098e6:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900098ea:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900098ee:	f8df a160 	ldr.w	sl, [pc, #352]	; 90009a50 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900098f2:	f8dc 3004 	ldr.w	r3, [ip, #4]
900098f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
900098fa:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900098fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900098fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009904:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000990a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000990c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009910:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009912:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009914:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009918:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000991a:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000991c:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009920:	f8d9 300c 	ldr.w	r3, [r9, #12]
90009924:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009926:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009928:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000992c:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009930:	440b      	add	r3, r1
90009932:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009936:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000993a:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000993e:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009942:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009946:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000994a:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000994c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009950:	68ab      	ldr	r3, [r5, #8]
90009952:	f8d9 000c 	ldr.w	r0, [r9, #12]
90009956:	3301      	adds	r3, #1
90009958:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000995c:	4403      	add	r3, r0
9000995e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009962:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009964:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90009968:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000996c:	f023 0307 	bic.w	r3, r3, #7
90009970:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009974:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009978:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000997c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000997e:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90009982:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009986:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000998a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000998e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
90009992:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
90009996:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000999a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000999e:	f8dc 3014 	ldr.w	r3, [ip, #20]
900099a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
900099a6:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900099aa:	696b      	ldr	r3, [r5, #20]
900099ac:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900099b0:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900099b4:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900099b6:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900099ba:	6a28      	ldr	r0, [r5, #32]
900099bc:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900099be:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900099c2:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900099c6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
900099ca:	2300      	movs	r3, #0
900099cc:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900099d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
900099d2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900099d6:	bb59      	cbnz	r1, 90009a30 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
900099d8:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900099da:	1abf      	subs	r7, r7, r2
900099dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
900099de:	fb03 f707 	mul.w	r7, r3, r7
900099e2:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900099e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900099e8:	3707      	adds	r7, #7
900099ea:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900099ee:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
900099f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
900099f6:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900099fa:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900099fe:	4b12      	ldr	r3, [pc, #72]	; (90009a48 <HAL_LTDC_ConfigLayer+0x198>)
90009a00:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
90009a04:	400b      	ands	r3, r1
90009a06:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009a0a:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009a0e:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90009a10:	f859 3006 	ldr.w	r3, [r9, r6]
90009a14:	4313      	orrs	r3, r2
90009a16:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
90009a1a:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009a1c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
90009a20:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
90009a22:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90009a26:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
90009a2a:	b003      	add	sp, #12
90009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90009a30:	3901      	subs	r1, #1
90009a32:	2906      	cmp	r1, #6
90009a34:	d903      	bls.n	90009a3e <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009a36:	2301      	movs	r3, #1
90009a38:	e7cf      	b.n	900099da <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
90009a3a:	2002      	movs	r0, #2
}
90009a3c:	4770      	bx	lr
90009a3e:	4b03      	ldr	r3, [pc, #12]	; (90009a4c <HAL_LTDC_ConfigLayer+0x19c>)
90009a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
90009a44:	e7c9      	b.n	900099da <HAL_LTDC_ConfigLayer+0x12a>
90009a46:	bf00      	nop
90009a48:	fffff800 	.word	0xfffff800
90009a4c:	90025328 	.word	0x90025328
90009a50:	fffff8f8 	.word	0xfffff8f8

90009a54 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
90009a54:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
90009a58:	2a01      	cmp	r2, #1
90009a5a:	d019      	beq.n	90009a90 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009a5c:	6802      	ldr	r2, [r0, #0]
90009a5e:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009a60:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
90009a62:	f04f 0c00 	mov.w	ip, #0
{
90009a66:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009a68:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009a6c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
90009a6e:	4c09      	ldr	r4, [pc, #36]	; (90009a94 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009a70:	f020 0001 	bic.w	r0, r0, #1
90009a74:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009a76:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
90009a78:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
90009a7a:	6b51      	ldr	r1, [r2, #52]	; 0x34
90009a7c:	4301      	orrs	r1, r0
90009a7e:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009a80:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
90009a84:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
90009a86:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
90009a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
90009a8e:	4770      	bx	lr
  __HAL_LOCK(hltdc);
90009a90:	2002      	movs	r0, #2
}
90009a92:	4770      	bx	lr
90009a94:	50001000 	.word	0x50001000

90009a98 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90009a98:	b538      	push	{r3, r4, r5, lr}
90009a9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90009a9c:	f7fd f972 	bl	90006d84 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009aa0:	2c00      	cmp	r4, #0
90009aa2:	d05a      	beq.n	90009b5a <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90009aa4:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009aa6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
90009aa8:	2100      	movs	r1, #0
90009aaa:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009aac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
90009ab0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
90009ab4:	68da      	ldr	r2, [r3, #12]
90009ab6:	f022 0201 	bic.w	r2, r2, #1
90009aba:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009abc:	e005      	b.n	90009aca <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90009abe:	f7fd f961 	bl	90006d84 <HAL_GetTick>
90009ac2:	1b43      	subs	r3, r0, r5
90009ac4:	2b05      	cmp	r3, #5
90009ac6:	d841      	bhi.n	90009b4c <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009ac8:	6823      	ldr	r3, [r4, #0]
90009aca:	68da      	ldr	r2, [r3, #12]
90009acc:	07d2      	lsls	r2, r2, #31
90009ace:	d4f6      	bmi.n	90009abe <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009ad0:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
90009ad4:	69e0      	ldr	r0, [r4, #28]
90009ad6:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009ad8:	68e1      	ldr	r1, [r4, #12]
90009ada:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009adc:	4302      	orrs	r2, r0
90009ade:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009ae0:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009ae2:	4302      	orrs	r2, r0
90009ae4:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009ae6:	4302      	orrs	r2, r0
90009ae8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90009aea:	4302      	orrs	r2, r0
90009aec:	6b20      	ldr	r0, [r4, #48]	; 0x30
90009aee:	4302      	orrs	r2, r0
90009af0:	68a0      	ldr	r0, [r4, #8]
90009af2:	4302      	orrs	r2, r0
90009af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90009af6:	3801      	subs	r0, #1
90009af8:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009afc:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009afe:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009b00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009b04:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009b06:	d103      	bne.n	90009b10 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009b08:	691a      	ldr	r2, [r3, #16]
90009b0a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
90009b0e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009b10:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009b12:	6b62      	ldr	r2, [r4, #52]	; 0x34
90009b14:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
90009b16:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009b18:	db30      	blt.n	90009b7c <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90009b1a:	b292      	uxth	r2, r2
90009b1c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90009b1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90009b20:	2a00      	cmp	r2, #0
90009b22:	db1c      	blt.n	90009b5e <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009b24:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009b26:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009b2a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009b2e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009b30:	d021      	beq.n	90009b76 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90009b32:	b2c0      	uxtb	r0, r0
90009b34:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90009b36:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
90009b38:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
90009b3a:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
90009b3c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009b3e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
90009b40:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
90009b42:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
90009b46:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
90009b4a:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009b4c:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009b4e:	2303      	movs	r3, #3
      return HAL_ERROR;
90009b50:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009b52:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009b54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
90009b58:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90009b5a:	2001      	movs	r0, #1
}
90009b5c:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009b5e:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90009b60:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009b62:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009b66:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
90009b6a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009b6c:	6a19      	ldr	r1, [r3, #32]
90009b6e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009b72:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009b74:	d1dd      	bne.n	90009b32 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
90009b76:	2200      	movs	r2, #0
90009b78:	629a      	str	r2, [r3, #40]	; 0x28
90009b7a:	e7dc      	b.n	90009b36 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009b7c:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90009b7e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009b80:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009b84:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009b86:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009b88:	621a      	str	r2, [r3, #32]
90009b8a:	e7c8      	b.n	90009b1e <HAL_MDMA_Init+0x86>

90009b8c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
90009b8c:	b1f8      	cbz	r0, 90009bce <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
90009b8e:	6802      	ldr	r2, [r0, #0]
90009b90:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
90009b92:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
90009b94:	68d0      	ldr	r0, [r2, #12]
{
90009b96:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
90009b98:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009b9c:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
90009b9e:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
90009ba0:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
90009ba2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
90009ba4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
90009ba6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
90009ba8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
90009baa:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
90009bac:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
90009bae:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90009bb0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90009bb2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90009bb4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009bb6:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009bb8:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
90009bba:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
90009bbe:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
90009bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
90009bc6:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
90009bc8:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
90009bcc:	4770      	bx	lr
    return HAL_ERROR;
90009bce:	2001      	movs	r0, #1
}
90009bd0:	4770      	bx	lr
90009bd2:	bf00      	nop

90009bd4 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
90009bd4:	b310      	cbz	r0, 90009c1c <HAL_MDMA_ConfigPostRequestMask+0x48>
90009bd6:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
90009bd8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
90009bdc:	2801      	cmp	r0, #1
90009bde:	d01f      	beq.n	90009c20 <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
90009be0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
90009be2:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009be6:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
90009bea:	45f4      	cmp	ip, lr
90009bec:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
90009bf0:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009bf4:	d004      	beq.n	90009c00 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
90009bf6:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
90009bf8:	2200      	movs	r2, #0
90009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
90009bfe:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
90009c00:	681d      	ldr	r5, [r3, #0]
90009c02:	692c      	ldr	r4, [r5, #16]
90009c04:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
90009c08:	d1f6      	bne.n	90009bf8 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
90009c0a:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
90009c0c:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009c0e:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
90009c10:	b941      	cbnz	r1, 90009c24 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009c12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009c16:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009c18:	612a      	str	r2, [r5, #16]
90009c1a:	e7ed      	b.n	90009bf8 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
90009c1c:	2001      	movs	r0, #1
90009c1e:	4770      	bx	lr
  __HAL_LOCK(hmdma);
90009c20:	2002      	movs	r0, #2
}
90009c22:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009c24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009c28:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009c2a:	612a      	str	r2, [r5, #16]
90009c2c:	e7e4      	b.n	90009bf8 <HAL_MDMA_ConfigPostRequestMask+0x24>
90009c2e:	bf00      	nop

90009c30 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
90009c30:	2800      	cmp	r0, #0
90009c32:	d06f      	beq.n	90009d14 <HAL_MDMA_Start_IT+0xe4>
90009c34:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
90009c36:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
90009c3a:	2801      	cmp	r0, #1
90009c3c:	d072      	beq.n	90009d24 <HAL_MDMA_Start_IT+0xf4>
90009c3e:	2001      	movs	r0, #1
90009c40:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009c44:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
90009c48:	2801      	cmp	r0, #1
90009c4a:	d004      	beq.n	90009c56 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
90009c4c:	2300      	movs	r3, #0
    return HAL_BUSY;
90009c4e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
90009c50:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
90009c54:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009c56:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009c58:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009c5c:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
90009c60:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009c62:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009c64:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009c68:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
90009c6c:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009c70:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009c74:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009c78:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
90009c7c:	68e5      	ldr	r5, [r4, #12]
90009c7e:	f025 0501 	bic.w	r5, r5, #1
90009c82:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009c84:	6965      	ldr	r5, [r4, #20]
90009c86:	ea00 0005 	and.w	r0, r0, r5
90009c8a:	ea40 0003 	orr.w	r0, r0, r3
90009c8e:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009c90:	6963      	ldr	r3, [r4, #20]
90009c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
90009c96:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
90009c9a:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
90009c9c:	f04f 031f 	mov.w	r3, #31
90009ca0:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
90009ca2:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
90009ca4:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
90009ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009ca8:	bf0c      	ite	eq
90009caa:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009cae:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009cb2:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
90009cb6:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009cba:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
90009cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009cbe:	bf0c      	ite	eq
90009cc0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
90009cc4:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
90009cc8:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
90009cca:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
90009cce:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
90009cd0:	68e3      	ldr	r3, [r4, #12]
90009cd2:	f043 0306 	orr.w	r3, r3, #6
90009cd6:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
90009cd8:	b11a      	cbz	r2, 90009ce2 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
90009cda:	68e3      	ldr	r3, [r4, #12]
90009cdc:	f043 0310 	orr.w	r3, r3, #16
90009ce0:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009ce2:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
90009ce6:	b11b      	cbz	r3, 90009cf0 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
90009ce8:	68e3      	ldr	r3, [r4, #12]
90009cea:	f043 0308 	orr.w	r3, r3, #8
90009cee:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
90009cf0:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
90009cf4:	b11b      	cbz	r3, 90009cfe <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
90009cf6:	68e3      	ldr	r3, [r4, #12]
90009cf8:	f043 0320 	orr.w	r3, r3, #32
90009cfc:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
90009cfe:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009d00:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
90009d04:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009d08:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
90009d0c:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009d0e:	d003      	beq.n	90009d18 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
90009d10:	2000      	movs	r0, #0
}
90009d12:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
90009d14:	2001      	movs	r0, #1
90009d16:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
90009d18:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
90009d1a:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
90009d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90009d20:	60e3      	str	r3, [r4, #12]
}
90009d22:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
90009d24:	2002      	movs	r0, #2
}
90009d26:	4770      	bx	lr

90009d28 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
90009d28:	4603      	mov	r3, r0
90009d2a:	b188      	cbz	r0, 90009d50 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
90009d2c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
90009d30:	2a02      	cmp	r2, #2
90009d32:	d003      	beq.n	90009d3c <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
90009d34:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
90009d36:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
90009d38:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
90009d3a:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
90009d3c:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009d3e:	2104      	movs	r1, #4
  return HAL_OK;
90009d40:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009d42:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
90009d46:	68d3      	ldr	r3, [r2, #12]
90009d48:	f023 0301 	bic.w	r3, r3, #1
90009d4c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
90009d4e:	4770      	bx	lr
    return HAL_ERROR;
90009d50:	2001      	movs	r0, #1
}
90009d52:	4770      	bx	lr

90009d54 <HAL_MDMA_IRQHandler>:
{
90009d54:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
90009d56:	2300      	movs	r3, #0
{
90009d58:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009d5a:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
90009d5e:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
90009d60:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009d62:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
90009d64:	4b57      	ldr	r3, [pc, #348]	; (90009ec4 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009d66:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009d68:	4a57      	ldr	r2, [pc, #348]	; (90009ec8 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
90009d6a:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009d6c:	6823      	ldr	r3, [r4, #0]
90009d6e:	441a      	add	r2, r3
90009d70:	f3c2 1284 	ubfx	r2, r2, #6, #5
90009d74:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009d78:	4202      	tst	r2, r0
90009d7a:	f000 80a0 	beq.w	90009ebe <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
90009d7e:	681a      	ldr	r2, [r3, #0]
90009d80:	07d1      	lsls	r1, r2, #31
90009d82:	d529      	bpl.n	90009dd8 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
90009d84:	68da      	ldr	r2, [r3, #12]
90009d86:	0792      	lsls	r2, r2, #30
90009d88:	d526      	bpl.n	90009dd8 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
90009d8a:	68da      	ldr	r2, [r3, #12]
90009d8c:	f022 0202 	bic.w	r2, r2, #2
90009d90:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
90009d92:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
90009d94:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
90009d96:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
90009d98:	bf54      	ite	pl
90009d9a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
90009d9e:	f041 0102 	orrmi.w	r1, r1, #2
90009da2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
90009da4:	0591      	lsls	r1, r2, #22
90009da6:	d503      	bpl.n	90009db0 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
90009da8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009daa:	f041 0104 	orr.w	r1, r1, #4
90009dae:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
90009db0:	05d0      	lsls	r0, r2, #23
90009db2:	d503      	bpl.n	90009dbc <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
90009db4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009db6:	f041 0108 	orr.w	r1, r1, #8
90009dba:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
90009dbc:	0551      	lsls	r1, r2, #21
90009dbe:	d503      	bpl.n	90009dc8 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
90009dc0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009dc2:	f041 0110 	orr.w	r1, r1, #16
90009dc6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
90009dc8:	0510      	lsls	r0, r2, #20
90009dca:	d503      	bpl.n	90009dd4 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
90009dcc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
90009dce:	f042 0220 	orr.w	r2, r2, #32
90009dd2:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
90009dd4:	2201      	movs	r2, #1
90009dd6:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
90009dd8:	681a      	ldr	r2, [r3, #0]
90009dda:	06d1      	lsls	r1, r2, #27
90009ddc:	d509      	bpl.n	90009df2 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
90009dde:	68da      	ldr	r2, [r3, #12]
90009de0:	0692      	lsls	r2, r2, #26
90009de2:	d506      	bpl.n	90009df2 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
90009de4:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
90009de6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
90009de8:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
90009dea:	b112      	cbz	r2, 90009df2 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
90009dec:	4620      	mov	r0, r4
90009dee:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
90009df0:	6823      	ldr	r3, [r4, #0]
90009df2:	681a      	ldr	r2, [r3, #0]
90009df4:	0710      	lsls	r0, r2, #28
90009df6:	d509      	bpl.n	90009e0c <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
90009df8:	68da      	ldr	r2, [r3, #12]
90009dfa:	06d1      	lsls	r1, r2, #27
90009dfc:	d506      	bpl.n	90009e0c <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009dfe:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
90009e00:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009e02:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
90009e04:	b112      	cbz	r2, 90009e0c <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
90009e06:	4620      	mov	r0, r4
90009e08:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
90009e0a:	6823      	ldr	r3, [r4, #0]
90009e0c:	681a      	ldr	r2, [r3, #0]
90009e0e:	0752      	lsls	r2, r2, #29
90009e10:	d509      	bpl.n	90009e26 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
90009e12:	68da      	ldr	r2, [r3, #12]
90009e14:	0710      	lsls	r0, r2, #28
90009e16:	d506      	bpl.n	90009e26 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
90009e18:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009e1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
90009e1c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009e1e:	b112      	cbz	r2, 90009e26 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
90009e20:	4620      	mov	r0, r4
90009e22:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
90009e24:	6823      	ldr	r3, [r4, #0]
90009e26:	681a      	ldr	r2, [r3, #0]
90009e28:	0791      	lsls	r1, r2, #30
90009e2a:	d516      	bpl.n	90009e5a <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
90009e2c:	68da      	ldr	r2, [r3, #12]
90009e2e:	0752      	lsls	r2, r2, #29
90009e30:	d513      	bpl.n	90009e5a <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
90009e32:	68da      	ldr	r2, [r3, #12]
90009e34:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
90009e38:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
90009e3a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
90009e3e:	2a04      	cmp	r2, #4
90009e40:	d034      	beq.n	90009eac <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
90009e42:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
90009e44:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
90009e46:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
90009e48:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
90009e4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
90009e4c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
90009e50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
90009e54:	b10b      	cbz	r3, 90009e5a <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
90009e56:	4620      	mov	r0, r4
90009e58:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
90009e5a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
90009e5c:	2b00      	cmp	r3, #0
90009e5e:	d02e      	beq.n	90009ebe <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
90009e60:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009e62:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
90009e64:	4b19      	ldr	r3, [pc, #100]	; (90009ecc <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009e66:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
90009e6a:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
90009e6e:	68cb      	ldr	r3, [r1, #12]
90009e70:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
90009e74:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
90009e76:	60cb      	str	r3, [r1, #12]
90009e78:	e002      	b.n	90009e80 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
90009e7a:	68cb      	ldr	r3, [r1, #12]
90009e7c:	07d8      	lsls	r0, r3, #31
90009e7e:	d504      	bpl.n	90009e8a <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
90009e80:	9b01      	ldr	r3, [sp, #4]
90009e82:	3301      	adds	r3, #1
90009e84:	4293      	cmp	r3, r2
90009e86:	9301      	str	r3, [sp, #4]
90009e88:	d9f7      	bls.n	90009e7a <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
90009e8a:	2300      	movs	r3, #0
90009e8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009e90:	68cb      	ldr	r3, [r1, #12]
90009e92:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009e94:	bf4c      	ite	mi
90009e96:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
90009e98:	2301      	movpl	r3, #1
90009e9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
90009e9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009ea0:	b16b      	cbz	r3, 90009ebe <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
90009ea2:	4620      	mov	r0, r4
}
90009ea4:	b003      	add	sp, #12
90009ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
90009eaa:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
90009eac:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
90009eae:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
90009eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
90009eb2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
90009eb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
90009eba:	2b00      	cmp	r3, #0
90009ebc:	d1f1      	bne.n	90009ea2 <HAL_MDMA_IRQHandler+0x14e>
}
90009ebe:	b003      	add	sp, #12
90009ec0:	bd30      	pop	{r4, r5, pc}
90009ec2:	bf00      	nop
90009ec4:	24000054 	.word	0x24000054
90009ec8:	adffffc0 	.word	0xadffffc0
90009ecc:	1b4e81b5 	.word	0x1b4e81b5

90009ed0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90009ed0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009ed2:	4c10      	ldr	r4, [pc, #64]	; (90009f14 <HAL_PWREx_ConfigSupply+0x44>)
90009ed4:	68e3      	ldr	r3, [r4, #12]
90009ed6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009eda:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009edc:	d105      	bne.n	90009eea <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009ede:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90009ee2:	1a18      	subs	r0, r3, r0
90009ee4:	bf18      	it	ne
90009ee6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
90009ee8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90009eea:	f023 0307 	bic.w	r3, r3, #7
90009eee:	4303      	orrs	r3, r0
90009ef0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
90009ef2:	f7fc ff47 	bl	90006d84 <HAL_GetTick>
90009ef6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009ef8:	e005      	b.n	90009f06 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90009efa:	f7fc ff43 	bl	90006d84 <HAL_GetTick>
90009efe:	1b40      	subs	r0, r0, r5
90009f00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90009f04:	d804      	bhi.n	90009f10 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009f06:	6863      	ldr	r3, [r4, #4]
90009f08:	049b      	lsls	r3, r3, #18
90009f0a:	d5f6      	bpl.n	90009efa <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
90009f0c:	2000      	movs	r0, #0
}
90009f0e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
90009f10:	2001      	movs	r0, #1
}
90009f12:	bd38      	pop	{r3, r4, r5, pc}
90009f14:	58024800 	.word	0x58024800

90009f18 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009f18:	4b3b      	ldr	r3, [pc, #236]	; (9000a008 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
90009f1a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009f1e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009f20:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
90009f22:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009f26:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009f28:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
90009f2c:	d038      	beq.n	90009fa0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009f2e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009f32:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009f36:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009f3a:	fb05 f101 	mul.w	r1, r5, r1
90009f3e:	2a01      	cmp	r2, #1
90009f40:	ee07 1a90 	vmov	s15, r1
90009f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
90009f48:	d002      	beq.n	90009f50 <HAL_RCC_GetSysClockFreq.part.0+0x38>
90009f4a:	2a02      	cmp	r2, #2
90009f4c:	d04e      	beq.n	90009fec <HAL_RCC_GetSysClockFreq.part.0+0xd4>
90009f4e:	b34a      	cbz	r2, 90009fa4 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f50:	ee07 0a90 	vmov	s15, r0
90009f54:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000a00c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
90009f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009f5e:	eec5 6a27 	vdiv.f32	s13, s10, s15
90009f62:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000a010 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
90009f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009f6a:	ee07 3a90 	vmov	s15, r3
90009f6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
90009f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009f76:	eee7 7a25 	vfma.f32	s15, s14, s11
90009f7a:	ee77 7a86 	vadd.f32	s15, s15, s12
90009f7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90009f82:	4b21      	ldr	r3, [pc, #132]	; (9000a008 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
90009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009f86:	f3c3 2346 	ubfx	r3, r3, #9, #7
90009f8a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90009f8c:	ee07 3a90 	vmov	s15, r3
90009f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
90009f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009f9c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
90009fa0:	bc30      	pop	{r4, r5}
90009fa2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009fa4:	681a      	ldr	r2, [r3, #0]
90009fa6:	0692      	lsls	r2, r2, #26
90009fa8:	d527      	bpl.n	90009ffa <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009faa:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009fac:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009fb0:	4a18      	ldr	r2, [pc, #96]	; (9000a014 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009fb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
90009fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009fb8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009fc0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000a010 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
90009fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009fc8:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009fca:	ee06 3a90 	vmov	s13, r3
90009fce:	ee06 2a10 	vmov	s12, r2
90009fd2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90009fd6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
90009fda:	eee7 6a05 	vfma.f32	s13, s14, s10
90009fde:	ee86 7a27 	vdiv.f32	s14, s12, s15
90009fe2:	ee76 6aa5 	vadd.f32	s13, s13, s11
90009fe6:	ee66 6a87 	vmul.f32	s13, s13, s14
90009fea:	e7ca      	b.n	90009f82 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009fec:	ee07 0a90 	vmov	s15, r0
90009ff0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000a018 <HAL_RCC_GetSysClockFreq.part.0+0x100>
90009ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009ff8:	e7b0      	b.n	90009f5c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009ffa:	ee07 0a90 	vmov	s15, r0
90009ffe:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000a01c <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000a002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a006:	e7a9      	b.n	90009f5c <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000a008:	58024400 	.word	0x58024400
9000a00c:	4a742400 	.word	0x4a742400
9000a010:	39000000 	.word	0x39000000
9000a014:	03d09000 	.word	0x03d09000
9000a018:	4bbebc20 	.word	0x4bbebc20
9000a01c:	4c742400 	.word	0x4c742400

9000a020 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000a020:	2800      	cmp	r0, #0
9000a022:	f000 81e8 	beq.w	9000a3f6 <HAL_RCC_OscConfig+0x3d6>
{
9000a026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000a028:	6803      	ldr	r3, [r0, #0]
9000a02a:	4604      	mov	r4, r0
9000a02c:	07d9      	lsls	r1, r3, #31
9000a02e:	d52e      	bpl.n	9000a08e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a030:	49a4      	ldr	r1, [pc, #656]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a032:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a034:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a036:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a03a:	2a10      	cmp	r2, #16
9000a03c:	f000 8107 	beq.w	9000a24e <HAL_RCC_OscConfig+0x22e>
9000a040:	2a18      	cmp	r2, #24
9000a042:	f000 80ff 	beq.w	9000a244 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a046:	6863      	ldr	r3, [r4, #4]
9000a048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000a04c:	f000 812a 	beq.w	9000a2a4 <HAL_RCC_OscConfig+0x284>
9000a050:	2b00      	cmp	r3, #0
9000a052:	f000 8168 	beq.w	9000a326 <HAL_RCC_OscConfig+0x306>
9000a056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000a05a:	4b9a      	ldr	r3, [pc, #616]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a05c:	681a      	ldr	r2, [r3, #0]
9000a05e:	f000 8289 	beq.w	9000a574 <HAL_RCC_OscConfig+0x554>
9000a062:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000a066:	601a      	str	r2, [r3, #0]
9000a068:	681a      	ldr	r2, [r3, #0]
9000a06a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000a06e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000a070:	f7fc fe88 	bl	90006d84 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a074:	4e93      	ldr	r6, [pc, #588]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000a076:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a078:	e005      	b.n	9000a086 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a07a:	f7fc fe83 	bl	90006d84 <HAL_GetTick>
9000a07e:	1b40      	subs	r0, r0, r5
9000a080:	2864      	cmp	r0, #100	; 0x64
9000a082:	f200 814e 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a086:	6833      	ldr	r3, [r6, #0]
9000a088:	039b      	lsls	r3, r3, #14
9000a08a:	d5f6      	bpl.n	9000a07a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000a08c:	6823      	ldr	r3, [r4, #0]
9000a08e:	079d      	lsls	r5, r3, #30
9000a090:	f100 808a 	bmi.w	9000a1a8 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a094:	06d9      	lsls	r1, r3, #27
9000a096:	d533      	bpl.n	9000a100 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a098:	4a8a      	ldr	r2, [pc, #552]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a09a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a09c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a09e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a0a2:	2b08      	cmp	r3, #8
9000a0a4:	f000 80e3 	beq.w	9000a26e <HAL_RCC_OscConfig+0x24e>
9000a0a8:	2b18      	cmp	r3, #24
9000a0aa:	f000 80db 	beq.w	9000a264 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a0ae:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000a0b0:	4d84      	ldr	r5, [pc, #528]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a0b2:	2b00      	cmp	r3, #0
9000a0b4:	f000 816f 	beq.w	9000a396 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000a0b8:	682b      	ldr	r3, [r5, #0]
9000a0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a0be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a0c0:	f7fc fe60 	bl	90006d84 <HAL_GetTick>
9000a0c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a0c6:	e005      	b.n	9000a0d4 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a0c8:	f7fc fe5c 	bl	90006d84 <HAL_GetTick>
9000a0cc:	1b80      	subs	r0, r0, r6
9000a0ce:	2802      	cmp	r0, #2
9000a0d0:	f200 8127 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a0d4:	682b      	ldr	r3, [r5, #0]
9000a0d6:	05db      	lsls	r3, r3, #23
9000a0d8:	d5f6      	bpl.n	9000a0c8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a0da:	f7fc fe6b 	bl	90006db4 <HAL_GetREVID>
9000a0de:	f241 0303 	movw	r3, #4099	; 0x1003
9000a0e2:	4298      	cmp	r0, r3
9000a0e4:	f200 826d 	bhi.w	9000a5c2 <HAL_RCC_OscConfig+0x5a2>
9000a0e8:	6a22      	ldr	r2, [r4, #32]
9000a0ea:	686b      	ldr	r3, [r5, #4]
9000a0ec:	2a20      	cmp	r2, #32
9000a0ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a0f2:	bf0c      	ite	eq
9000a0f4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000a0f8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000a0fc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a0fe:	6823      	ldr	r3, [r4, #0]
9000a100:	071d      	lsls	r5, r3, #28
9000a102:	d516      	bpl.n	9000a132 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a104:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000a106:	4d6f      	ldr	r5, [pc, #444]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a108:	2b00      	cmp	r3, #0
9000a10a:	f000 8122 	beq.w	9000a352 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000a10e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a110:	f043 0301 	orr.w	r3, r3, #1
9000a114:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a116:	f7fc fe35 	bl	90006d84 <HAL_GetTick>
9000a11a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a11c:	e005      	b.n	9000a12a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a11e:	f7fc fe31 	bl	90006d84 <HAL_GetTick>
9000a122:	1b80      	subs	r0, r0, r6
9000a124:	2802      	cmp	r0, #2
9000a126:	f200 80fc 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a12a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a12c:	0798      	lsls	r0, r3, #30
9000a12e:	d5f6      	bpl.n	9000a11e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000a130:	6823      	ldr	r3, [r4, #0]
9000a132:	069a      	lsls	r2, r3, #26
9000a134:	d516      	bpl.n	9000a164 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a136:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000a138:	4d62      	ldr	r5, [pc, #392]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a13a:	2b00      	cmp	r3, #0
9000a13c:	f000 811a 	beq.w	9000a374 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000a140:	682b      	ldr	r3, [r5, #0]
9000a142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000a146:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a148:	f7fc fe1c 	bl	90006d84 <HAL_GetTick>
9000a14c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a14e:	e005      	b.n	9000a15c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a150:	f7fc fe18 	bl	90006d84 <HAL_GetTick>
9000a154:	1b80      	subs	r0, r0, r6
9000a156:	2802      	cmp	r0, #2
9000a158:	f200 80e3 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a15c:	682b      	ldr	r3, [r5, #0]
9000a15e:	049f      	lsls	r7, r3, #18
9000a160:	d5f6      	bpl.n	9000a150 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000a162:	6823      	ldr	r3, [r4, #0]
9000a164:	0759      	lsls	r1, r3, #29
9000a166:	f100 80a3 	bmi.w	9000a2b0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000a16a:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a16c:	b1d0      	cbz	r0, 9000a1a4 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000a16e:	4d55      	ldr	r5, [pc, #340]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a170:	692b      	ldr	r3, [r5, #16]
9000a172:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a176:	2b18      	cmp	r3, #24
9000a178:	f000 81ae 	beq.w	9000a4d8 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000a17c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a17e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000a180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000a184:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a186:	f000 8142 	beq.w	9000a40e <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000a18a:	f7fc fdfb 	bl	90006d84 <HAL_GetTick>
9000a18e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a190:	e005      	b.n	9000a19e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a192:	f7fc fdf7 	bl	90006d84 <HAL_GetTick>
9000a196:	1b00      	subs	r0, r0, r4
9000a198:	2802      	cmp	r0, #2
9000a19a:	f200 80c2 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a19e:	682b      	ldr	r3, [r5, #0]
9000a1a0:	019b      	lsls	r3, r3, #6
9000a1a2:	d4f6      	bmi.n	9000a192 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000a1a4:	2000      	movs	r0, #0
}
9000a1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a1a8:	4a46      	ldr	r2, [pc, #280]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a1aa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a1ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a1ae:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000a1b2:	d12d      	bne.n	9000a210 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000a1b4:	4b43      	ldr	r3, [pc, #268]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a1b6:	68e2      	ldr	r2, [r4, #12]
9000a1b8:	681b      	ldr	r3, [r3, #0]
9000a1ba:	0759      	lsls	r1, r3, #29
9000a1bc:	d501      	bpl.n	9000a1c2 <HAL_RCC_OscConfig+0x1a2>
9000a1be:	2a00      	cmp	r2, #0
9000a1c0:	d04e      	beq.n	9000a260 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a1c2:	4d40      	ldr	r5, [pc, #256]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a1c4:	682b      	ldr	r3, [r5, #0]
9000a1c6:	f023 0319 	bic.w	r3, r3, #25
9000a1ca:	4313      	orrs	r3, r2
9000a1cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a1ce:	f7fc fdd9 	bl	90006d84 <HAL_GetTick>
9000a1d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a1d4:	e005      	b.n	9000a1e2 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a1d6:	f7fc fdd5 	bl	90006d84 <HAL_GetTick>
9000a1da:	1b80      	subs	r0, r0, r6
9000a1dc:	2802      	cmp	r0, #2
9000a1de:	f200 80a0 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a1e2:	682b      	ldr	r3, [r5, #0]
9000a1e4:	075b      	lsls	r3, r3, #29
9000a1e6:	d5f6      	bpl.n	9000a1d6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a1e8:	f7fc fde4 	bl	90006db4 <HAL_GetREVID>
9000a1ec:	f241 0303 	movw	r3, #4099	; 0x1003
9000a1f0:	4298      	cmp	r0, r3
9000a1f2:	f200 80f7 	bhi.w	9000a3e4 <HAL_RCC_OscConfig+0x3c4>
9000a1f6:	6922      	ldr	r2, [r4, #16]
9000a1f8:	686b      	ldr	r3, [r5, #4]
9000a1fa:	2a40      	cmp	r2, #64	; 0x40
9000a1fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000a200:	bf0c      	ite	eq
9000a202:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000a206:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000a20a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a20c:	6823      	ldr	r3, [r4, #0]
9000a20e:	e741      	b.n	9000a094 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a210:	2b18      	cmp	r3, #24
9000a212:	f000 80e3 	beq.w	9000a3dc <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a216:	4d2b      	ldr	r5, [pc, #172]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a218:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a21a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a21c:	2a00      	cmp	r2, #0
9000a21e:	f000 80cc 	beq.w	9000a3ba <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a222:	f023 0319 	bic.w	r3, r3, #25
9000a226:	4313      	orrs	r3, r2
9000a228:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a22a:	f7fc fdab 	bl	90006d84 <HAL_GetTick>
9000a22e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a230:	e004      	b.n	9000a23c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a232:	f7fc fda7 	bl	90006d84 <HAL_GetTick>
9000a236:	1b80      	subs	r0, r0, r6
9000a238:	2802      	cmp	r0, #2
9000a23a:	d872      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a23c:	682b      	ldr	r3, [r5, #0]
9000a23e:	075f      	lsls	r7, r3, #29
9000a240:	d5f7      	bpl.n	9000a232 <HAL_RCC_OscConfig+0x212>
9000a242:	e7d1      	b.n	9000a1e8 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a244:	f001 0103 	and.w	r1, r1, #3
9000a248:	2902      	cmp	r1, #2
9000a24a:	f47f aefc 	bne.w	9000a046 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000a24e:	4a1d      	ldr	r2, [pc, #116]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a250:	6812      	ldr	r2, [r2, #0]
9000a252:	0392      	lsls	r2, r2, #14
9000a254:	f57f af1b 	bpl.w	9000a08e <HAL_RCC_OscConfig+0x6e>
9000a258:	6862      	ldr	r2, [r4, #4]
9000a25a:	2a00      	cmp	r2, #0
9000a25c:	f47f af17 	bne.w	9000a08e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000a260:	2001      	movs	r0, #1
}
9000a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a264:	f002 0203 	and.w	r2, r2, #3
9000a268:	2a01      	cmp	r2, #1
9000a26a:	f47f af20 	bne.w	9000a0ae <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000a26e:	4b15      	ldr	r3, [pc, #84]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a270:	681b      	ldr	r3, [r3, #0]
9000a272:	05da      	lsls	r2, r3, #23
9000a274:	d502      	bpl.n	9000a27c <HAL_RCC_OscConfig+0x25c>
9000a276:	69e3      	ldr	r3, [r4, #28]
9000a278:	2b80      	cmp	r3, #128	; 0x80
9000a27a:	d1f1      	bne.n	9000a260 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a27c:	f7fc fd9a 	bl	90006db4 <HAL_GetREVID>
9000a280:	f241 0303 	movw	r3, #4099	; 0x1003
9000a284:	4298      	cmp	r0, r3
9000a286:	f200 80b8 	bhi.w	9000a3fa <HAL_RCC_OscConfig+0x3da>
9000a28a:	6a22      	ldr	r2, [r4, #32]
9000a28c:	2a20      	cmp	r2, #32
9000a28e:	f000 81a7 	beq.w	9000a5e0 <HAL_RCC_OscConfig+0x5c0>
9000a292:	490c      	ldr	r1, [pc, #48]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a294:	684b      	ldr	r3, [r1, #4]
9000a296:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a29a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000a29e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a2a0:	6823      	ldr	r3, [r4, #0]
9000a2a2:	e72d      	b.n	9000a100 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a2a4:	4a07      	ldr	r2, [pc, #28]	; (9000a2c4 <HAL_RCC_OscConfig+0x2a4>)
9000a2a6:	6813      	ldr	r3, [r2, #0]
9000a2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a2ac:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000a2ae:	e6df      	b.n	9000a070 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000a2b0:	4d05      	ldr	r5, [pc, #20]	; (9000a2c8 <HAL_RCC_OscConfig+0x2a8>)
9000a2b2:	682b      	ldr	r3, [r5, #0]
9000a2b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000a2b8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000a2ba:	f7fc fd63 	bl	90006d84 <HAL_GetTick>
9000a2be:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a2c0:	e009      	b.n	9000a2d6 <HAL_RCC_OscConfig+0x2b6>
9000a2c2:	bf00      	nop
9000a2c4:	58024400 	.word	0x58024400
9000a2c8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000a2cc:	f7fc fd5a 	bl	90006d84 <HAL_GetTick>
9000a2d0:	1b80      	subs	r0, r0, r6
9000a2d2:	2864      	cmp	r0, #100	; 0x64
9000a2d4:	d825      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a2d6:	682b      	ldr	r3, [r5, #0]
9000a2d8:	05da      	lsls	r2, r3, #23
9000a2da:	d5f7      	bpl.n	9000a2cc <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a2dc:	68a3      	ldr	r3, [r4, #8]
9000a2de:	2b01      	cmp	r3, #1
9000a2e0:	f000 8178 	beq.w	9000a5d4 <HAL_RCC_OscConfig+0x5b4>
9000a2e4:	2b00      	cmp	r3, #0
9000a2e6:	f000 8153 	beq.w	9000a590 <HAL_RCC_OscConfig+0x570>
9000a2ea:	2b05      	cmp	r3, #5
9000a2ec:	4ba5      	ldr	r3, [pc, #660]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
9000a2ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a2f0:	f000 817f 	beq.w	9000a5f2 <HAL_RCC_OscConfig+0x5d2>
9000a2f4:	f022 0201 	bic.w	r2, r2, #1
9000a2f8:	671a      	str	r2, [r3, #112]	; 0x70
9000a2fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a2fc:	f022 0204 	bic.w	r2, r2, #4
9000a300:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a302:	f7fc fd3f 	bl	90006d84 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a306:	4e9f      	ldr	r6, [pc, #636]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a308:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000a30c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a30e:	e004      	b.n	9000a31a <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a310:	f7fc fd38 	bl	90006d84 <HAL_GetTick>
9000a314:	1b40      	subs	r0, r0, r5
9000a316:	42b8      	cmp	r0, r7
9000a318:	d803      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a31a:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000a31c:	079b      	lsls	r3, r3, #30
9000a31e:	d5f7      	bpl.n	9000a310 <HAL_RCC_OscConfig+0x2f0>
9000a320:	e723      	b.n	9000a16a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000a322:	2003      	movs	r0, #3
}
9000a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a326:	4d97      	ldr	r5, [pc, #604]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
9000a328:	682b      	ldr	r3, [r5, #0]
9000a32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000a32e:	602b      	str	r3, [r5, #0]
9000a330:	682b      	ldr	r3, [r5, #0]
9000a332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000a336:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a338:	f7fc fd24 	bl	90006d84 <HAL_GetTick>
9000a33c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a33e:	e004      	b.n	9000a34a <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a340:	f7fc fd20 	bl	90006d84 <HAL_GetTick>
9000a344:	1b80      	subs	r0, r0, r6
9000a346:	2864      	cmp	r0, #100	; 0x64
9000a348:	d8eb      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a34a:	682b      	ldr	r3, [r5, #0]
9000a34c:	039f      	lsls	r7, r3, #14
9000a34e:	d4f7      	bmi.n	9000a340 <HAL_RCC_OscConfig+0x320>
9000a350:	e69c      	b.n	9000a08c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000a352:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a354:	f023 0301 	bic.w	r3, r3, #1
9000a358:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a35a:	f7fc fd13 	bl	90006d84 <HAL_GetTick>
9000a35e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a360:	e004      	b.n	9000a36c <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a362:	f7fc fd0f 	bl	90006d84 <HAL_GetTick>
9000a366:	1b80      	subs	r0, r0, r6
9000a368:	2802      	cmp	r0, #2
9000a36a:	d8da      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a36c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a36e:	0799      	lsls	r1, r3, #30
9000a370:	d4f7      	bmi.n	9000a362 <HAL_RCC_OscConfig+0x342>
9000a372:	e6dd      	b.n	9000a130 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000a374:	682b      	ldr	r3, [r5, #0]
9000a376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000a37a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a37c:	f7fc fd02 	bl	90006d84 <HAL_GetTick>
9000a380:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a382:	e004      	b.n	9000a38e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a384:	f7fc fcfe 	bl	90006d84 <HAL_GetTick>
9000a388:	1b80      	subs	r0, r0, r6
9000a38a:	2802      	cmp	r0, #2
9000a38c:	d8c9      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a38e:	682b      	ldr	r3, [r5, #0]
9000a390:	0498      	lsls	r0, r3, #18
9000a392:	d4f7      	bmi.n	9000a384 <HAL_RCC_OscConfig+0x364>
9000a394:	e6e5      	b.n	9000a162 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000a396:	682b      	ldr	r3, [r5, #0]
9000a398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000a39c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a39e:	f7fc fcf1 	bl	90006d84 <HAL_GetTick>
9000a3a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a3a4:	e004      	b.n	9000a3b0 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a3a6:	f7fc fced 	bl	90006d84 <HAL_GetTick>
9000a3aa:	1b80      	subs	r0, r0, r6
9000a3ac:	2802      	cmp	r0, #2
9000a3ae:	d8b8      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a3b0:	682b      	ldr	r3, [r5, #0]
9000a3b2:	05df      	lsls	r7, r3, #23
9000a3b4:	d4f7      	bmi.n	9000a3a6 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a3b6:	6823      	ldr	r3, [r4, #0]
9000a3b8:	e6a2      	b.n	9000a100 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000a3ba:	f023 0301 	bic.w	r3, r3, #1
9000a3be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a3c0:	f7fc fce0 	bl	90006d84 <HAL_GetTick>
9000a3c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a3c6:	e004      	b.n	9000a3d2 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a3c8:	f7fc fcdc 	bl	90006d84 <HAL_GetTick>
9000a3cc:	1b80      	subs	r0, r0, r6
9000a3ce:	2802      	cmp	r0, #2
9000a3d0:	d8a7      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a3d2:	682b      	ldr	r3, [r5, #0]
9000a3d4:	0758      	lsls	r0, r3, #29
9000a3d6:	d4f7      	bmi.n	9000a3c8 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a3d8:	6823      	ldr	r3, [r4, #0]
9000a3da:	e65b      	b.n	9000a094 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a3dc:	0790      	lsls	r0, r2, #30
9000a3de:	f47f af1a 	bne.w	9000a216 <HAL_RCC_OscConfig+0x1f6>
9000a3e2:	e6e7      	b.n	9000a1b4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a3e4:	686b      	ldr	r3, [r5, #4]
9000a3e6:	6922      	ldr	r2, [r4, #16]
9000a3e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000a3ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a3f0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a3f2:	6823      	ldr	r3, [r4, #0]
9000a3f4:	e64e      	b.n	9000a094 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000a3f6:	2001      	movs	r0, #1
}
9000a3f8:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a3fa:	4a62      	ldr	r2, [pc, #392]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
9000a3fc:	6a21      	ldr	r1, [r4, #32]
9000a3fe:	68d3      	ldr	r3, [r2, #12]
9000a400:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a404:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000a408:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a40a:	6823      	ldr	r3, [r4, #0]
9000a40c:	e678      	b.n	9000a100 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000a40e:	f7fc fcb9 	bl	90006d84 <HAL_GetTick>
9000a412:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a414:	e004      	b.n	9000a420 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a416:	f7fc fcb5 	bl	90006d84 <HAL_GetTick>
9000a41a:	1b80      	subs	r0, r0, r6
9000a41c:	2802      	cmp	r0, #2
9000a41e:	d880      	bhi.n	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a420:	682b      	ldr	r3, [r5, #0]
9000a422:	0199      	lsls	r1, r3, #6
9000a424:	d4f7      	bmi.n	9000a416 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a426:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000a428:	4b57      	ldr	r3, [pc, #348]	; (9000a588 <HAL_RCC_OscConfig+0x568>)
9000a42a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a42c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a42e:	4957      	ldr	r1, [pc, #348]	; (9000a58c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a430:	4e54      	ldr	r6, [pc, #336]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a432:	4313      	orrs	r3, r2
9000a434:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a436:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000a43a:	62ab      	str	r3, [r5, #40]	; 0x28
9000a43c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000a440:	3b01      	subs	r3, #1
9000a442:	3a01      	subs	r2, #1
9000a444:	025b      	lsls	r3, r3, #9
9000a446:	0412      	lsls	r2, r2, #16
9000a448:	b29b      	uxth	r3, r3
9000a44a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000a44e:	4313      	orrs	r3, r2
9000a450:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000a452:	3a01      	subs	r2, #1
9000a454:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a458:	4313      	orrs	r3, r2
9000a45a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000a45c:	3a01      	subs	r2, #1
9000a45e:	0612      	lsls	r2, r2, #24
9000a460:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000a464:	4313      	orrs	r3, r2
9000a466:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000a468:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a46a:	f023 0301 	bic.w	r3, r3, #1
9000a46e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a470:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000a472:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000a474:	4011      	ands	r1, r2
9000a476:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000a47a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000a47c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a47e:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000a480:	f023 030c 	bic.w	r3, r3, #12
9000a484:	4313      	orrs	r3, r2
9000a486:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000a488:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a48a:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000a48c:	f023 0302 	bic.w	r3, r3, #2
9000a490:	4313      	orrs	r3, r2
9000a492:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000a494:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a49a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a49c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a49e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000a4a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000a4a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a4a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000a4aa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000a4ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a4ae:	f043 0301 	orr.w	r3, r3, #1
9000a4b2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000a4b4:	682b      	ldr	r3, [r5, #0]
9000a4b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000a4ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a4bc:	f7fc fc62 	bl	90006d84 <HAL_GetTick>
9000a4c0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a4c2:	e005      	b.n	9000a4d0 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a4c4:	f7fc fc5e 	bl	90006d84 <HAL_GetTick>
9000a4c8:	1b00      	subs	r0, r0, r4
9000a4ca:	2802      	cmp	r0, #2
9000a4cc:	f63f af29 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a4d0:	6833      	ldr	r3, [r6, #0]
9000a4d2:	019a      	lsls	r2, r3, #6
9000a4d4:	d5f6      	bpl.n	9000a4c4 <HAL_RCC_OscConfig+0x4a4>
9000a4d6:	e665      	b.n	9000a1a4 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a4d8:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000a4da:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000a4dc:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a4de:	f43f ae62 	beq.w	9000a1a6 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a4e2:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a4e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000a4e8:	428b      	cmp	r3, r1
9000a4ea:	f47f aeb9 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a4ee:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a4f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a4f4:	429a      	cmp	r2, r3
9000a4f6:	f47f aeb3 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a4fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a4fc:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000a500:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a502:	429a      	cmp	r2, r3
9000a504:	f47f aeac 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a508:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a50a:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000a50e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a510:	429a      	cmp	r2, r3
9000a512:	f47f aea5 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000a518:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000a51c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a51e:	429a      	cmp	r2, r3
9000a520:	f47f ae9e 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000a524:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000a526:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000a52a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a52c:	429e      	cmp	r6, r3
9000a52e:	f47f ae97 	bne.w	9000a260 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a532:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a534:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a536:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a53a:	429a      	cmp	r2, r3
9000a53c:	f43f ae32 	beq.w	9000a1a4 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000a540:	4a10      	ldr	r2, [pc, #64]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
9000a542:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a544:	f023 0301 	bic.w	r3, r3, #1
9000a548:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000a54a:	f7fc fc1b 	bl	90006d84 <HAL_GetTick>
9000a54e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000a550:	f7fc fc18 	bl	90006d84 <HAL_GetTick>
9000a554:	42a8      	cmp	r0, r5
9000a556:	d0fb      	beq.n	9000a550 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a558:	4a0a      	ldr	r2, [pc, #40]	; (9000a584 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000a55a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a55c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000a55e:	4b0b      	ldr	r3, [pc, #44]	; (9000a58c <HAL_RCC_OscConfig+0x56c>)
9000a560:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000a562:	4023      	ands	r3, r4
9000a564:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000a568:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000a56a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a56c:	f043 0301 	orr.w	r3, r3, #1
9000a570:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a574:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000a578:	601a      	str	r2, [r3, #0]
9000a57a:	681a      	ldr	r2, [r3, #0]
9000a57c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000a580:	601a      	str	r2, [r3, #0]
9000a582:	e575      	b.n	9000a070 <HAL_RCC_OscConfig+0x50>
9000a584:	58024400 	.word	0x58024400
9000a588:	fffffc0c 	.word	0xfffffc0c
9000a58c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a590:	4d1c      	ldr	r5, [pc, #112]	; (9000a604 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a592:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a596:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a598:	f023 0301 	bic.w	r3, r3, #1
9000a59c:	672b      	str	r3, [r5, #112]	; 0x70
9000a59e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a5a0:	f023 0304 	bic.w	r3, r3, #4
9000a5a4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a5a6:	f7fc fbed 	bl	90006d84 <HAL_GetTick>
9000a5aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a5ac:	e005      	b.n	9000a5ba <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a5ae:	f7fc fbe9 	bl	90006d84 <HAL_GetTick>
9000a5b2:	1b80      	subs	r0, r0, r6
9000a5b4:	42b8      	cmp	r0, r7
9000a5b6:	f63f aeb4 	bhi.w	9000a322 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a5ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a5bc:	0798      	lsls	r0, r3, #30
9000a5be:	d4f6      	bmi.n	9000a5ae <HAL_RCC_OscConfig+0x58e>
9000a5c0:	e5d3      	b.n	9000a16a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a5c2:	68eb      	ldr	r3, [r5, #12]
9000a5c4:	6a22      	ldr	r2, [r4, #32]
9000a5c6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a5ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a5ce:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a5d0:	6823      	ldr	r3, [r4, #0]
9000a5d2:	e595      	b.n	9000a100 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a5d4:	4a0b      	ldr	r2, [pc, #44]	; (9000a604 <HAL_RCC_OscConfig+0x5e4>)
9000a5d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000a5d8:	f043 0301 	orr.w	r3, r3, #1
9000a5dc:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a5de:	e690      	b.n	9000a302 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a5e0:	4a08      	ldr	r2, [pc, #32]	; (9000a604 <HAL_RCC_OscConfig+0x5e4>)
9000a5e2:	6853      	ldr	r3, [r2, #4]
9000a5e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a5e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000a5ec:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a5ee:	6823      	ldr	r3, [r4, #0]
9000a5f0:	e586      	b.n	9000a100 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a5f2:	f042 0204 	orr.w	r2, r2, #4
9000a5f6:	671a      	str	r2, [r3, #112]	; 0x70
9000a5f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a5fa:	f042 0201 	orr.w	r2, r2, #1
9000a5fe:	671a      	str	r2, [r3, #112]	; 0x70
9000a600:	e67f      	b.n	9000a302 <HAL_RCC_OscConfig+0x2e2>
9000a602:	bf00      	nop
9000a604:	58024400 	.word	0x58024400

9000a608 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a608:	4a47      	ldr	r2, [pc, #284]	; (9000a728 <HAL_RCC_GetSysClockFreq+0x120>)
9000a60a:	6913      	ldr	r3, [r2, #16]
9000a60c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a610:	2b10      	cmp	r3, #16
9000a612:	d004      	beq.n	9000a61e <HAL_RCC_GetSysClockFreq+0x16>
9000a614:	2b18      	cmp	r3, #24
9000a616:	d00d      	beq.n	9000a634 <HAL_RCC_GetSysClockFreq+0x2c>
9000a618:	b11b      	cbz	r3, 9000a622 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000a61a:	4844      	ldr	r0, [pc, #272]	; (9000a72c <HAL_RCC_GetSysClockFreq+0x124>)
9000a61c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a61e:	4844      	ldr	r0, [pc, #272]	; (9000a730 <HAL_RCC_GetSysClockFreq+0x128>)
9000a620:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a622:	6813      	ldr	r3, [r2, #0]
9000a624:	0699      	lsls	r1, r3, #26
9000a626:	d54a      	bpl.n	9000a6be <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a628:	6813      	ldr	r3, [r2, #0]
9000a62a:	4842      	ldr	r0, [pc, #264]	; (9000a734 <HAL_RCC_GetSysClockFreq+0x12c>)
9000a62c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a630:	40d8      	lsrs	r0, r3
9000a632:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a634:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000a636:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a638:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a63a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000a63c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a640:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a642:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a646:	d038      	beq.n	9000a6ba <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a648:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a64c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a650:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a654:	fb05 f101 	mul.w	r1, r5, r1
9000a658:	2b01      	cmp	r3, #1
9000a65a:	ee07 1a90 	vmov	s15, r1
9000a65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000a662:	d002      	beq.n	9000a66a <HAL_RCC_GetSysClockFreq+0x62>
9000a664:	2b02      	cmp	r3, #2
9000a666:	d02c      	beq.n	9000a6c2 <HAL_RCC_GetSysClockFreq+0xba>
9000a668:	b393      	cbz	r3, 9000a6d0 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a66a:	ee07 0a90 	vmov	s15, r0
9000a66e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000a738 <HAL_RCC_GetSysClockFreq+0x130>
9000a672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a676:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000a678:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000a67c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000a73c <HAL_RCC_GetSysClockFreq+0x134>
9000a680:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a684:	ee07 3a90 	vmov	s15, r3
9000a688:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000a68c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a690:	eee7 7a25 	vfma.f32	s15, s14, s11
9000a694:	ee77 7a86 	vadd.f32	s15, s15, s12
9000a698:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a69c:	4b22      	ldr	r3, [pc, #136]	; (9000a728 <HAL_RCC_GetSysClockFreq+0x120>)
9000a69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a6a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a6a4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a6a6:	ee07 3a90 	vmov	s15, r3
9000a6aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000a6ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a6b6:	ee17 0a90 	vmov	r0, s15
}
9000a6ba:	bc30      	pop	{r4, r5}
9000a6bc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a6be:	481d      	ldr	r0, [pc, #116]	; (9000a734 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000a6c0:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a6c2:	ee07 0a90 	vmov	s15, r0
9000a6c6:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000a740 <HAL_RCC_GetSysClockFreq+0x138>
9000a6ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a6ce:	e7d2      	b.n	9000a676 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a6d0:	6813      	ldr	r3, [r2, #0]
9000a6d2:	069b      	lsls	r3, r3, #26
9000a6d4:	d520      	bpl.n	9000a718 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a6d6:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a6d8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a6dc:	4915      	ldr	r1, [pc, #84]	; (9000a734 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a6de:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000a6e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a6e4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a6ec:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000a73c <HAL_RCC_GetSysClockFreq+0x134>
9000a6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a6f4:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a6f6:	ee06 3a90 	vmov	s13, r3
9000a6fa:	ee06 1a10 	vmov	s12, r1
9000a6fe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000a702:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000a706:	eee7 6a05 	vfma.f32	s13, s14, s10
9000a70a:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000a70e:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000a712:	ee66 6a87 	vmul.f32	s13, s13, s14
9000a716:	e7c1      	b.n	9000a69c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a718:	ee07 0a90 	vmov	s15, r0
9000a71c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000a744 <HAL_RCC_GetSysClockFreq+0x13c>
9000a720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a724:	e7a7      	b.n	9000a676 <HAL_RCC_GetSysClockFreq+0x6e>
9000a726:	bf00      	nop
9000a728:	58024400 	.word	0x58024400
9000a72c:	003d0900 	.word	0x003d0900
9000a730:	017d7840 	.word	0x017d7840
9000a734:	03d09000 	.word	0x03d09000
9000a738:	4a742400 	.word	0x4a742400
9000a73c:	39000000 	.word	0x39000000
9000a740:	4bbebc20 	.word	0x4bbebc20
9000a744:	4c742400 	.word	0x4c742400

9000a748 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000a748:	2800      	cmp	r0, #0
9000a74a:	f000 810c 	beq.w	9000a966 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a74e:	4a8c      	ldr	r2, [pc, #560]	; (9000a980 <HAL_RCC_ClockConfig+0x238>)
9000a750:	6813      	ldr	r3, [r2, #0]
9000a752:	f003 030f 	and.w	r3, r3, #15
9000a756:	428b      	cmp	r3, r1
{
9000a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a75c:	4604      	mov	r4, r0
9000a75e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a760:	d20c      	bcs.n	9000a77c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a762:	6813      	ldr	r3, [r2, #0]
9000a764:	f023 030f 	bic.w	r3, r3, #15
9000a768:	430b      	orrs	r3, r1
9000a76a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a76c:	6813      	ldr	r3, [r2, #0]
9000a76e:	f003 030f 	and.w	r3, r3, #15
9000a772:	428b      	cmp	r3, r1
9000a774:	d002      	beq.n	9000a77c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000a776:	2001      	movs	r0, #1
}
9000a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a77c:	6823      	ldr	r3, [r4, #0]
9000a77e:	075f      	lsls	r7, r3, #29
9000a780:	d50b      	bpl.n	9000a79a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a782:	4980      	ldr	r1, [pc, #512]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a784:	6920      	ldr	r0, [r4, #16]
9000a786:	698a      	ldr	r2, [r1, #24]
9000a788:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a78c:	4290      	cmp	r0, r2
9000a78e:	d904      	bls.n	9000a79a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a790:	698a      	ldr	r2, [r1, #24]
9000a792:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a796:	4302      	orrs	r2, r0
9000a798:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a79a:	071e      	lsls	r6, r3, #28
9000a79c:	d50b      	bpl.n	9000a7b6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a79e:	4979      	ldr	r1, [pc, #484]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a7a0:	6960      	ldr	r0, [r4, #20]
9000a7a2:	69ca      	ldr	r2, [r1, #28]
9000a7a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a7a8:	4290      	cmp	r0, r2
9000a7aa:	d904      	bls.n	9000a7b6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a7ac:	69ca      	ldr	r2, [r1, #28]
9000a7ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a7b2:	4302      	orrs	r2, r0
9000a7b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a7b6:	06d8      	lsls	r0, r3, #27
9000a7b8:	d50b      	bpl.n	9000a7d2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a7ba:	4972      	ldr	r1, [pc, #456]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a7bc:	69a0      	ldr	r0, [r4, #24]
9000a7be:	69ca      	ldr	r2, [r1, #28]
9000a7c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a7c4:	4290      	cmp	r0, r2
9000a7c6:	d904      	bls.n	9000a7d2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a7c8:	69ca      	ldr	r2, [r1, #28]
9000a7ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a7ce:	4302      	orrs	r2, r0
9000a7d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a7d2:	0699      	lsls	r1, r3, #26
9000a7d4:	d50b      	bpl.n	9000a7ee <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a7d6:	496b      	ldr	r1, [pc, #428]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a7d8:	69e0      	ldr	r0, [r4, #28]
9000a7da:	6a0a      	ldr	r2, [r1, #32]
9000a7dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a7e0:	4290      	cmp	r0, r2
9000a7e2:	d904      	bls.n	9000a7ee <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a7e4:	6a0a      	ldr	r2, [r1, #32]
9000a7e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a7ea:	4302      	orrs	r2, r0
9000a7ec:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a7ee:	079a      	lsls	r2, r3, #30
9000a7f0:	f140 80ab 	bpl.w	9000a94a <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a7f4:	4863      	ldr	r0, [pc, #396]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a7f6:	68e1      	ldr	r1, [r4, #12]
9000a7f8:	6982      	ldr	r2, [r0, #24]
9000a7fa:	f002 020f 	and.w	r2, r2, #15
9000a7fe:	4291      	cmp	r1, r2
9000a800:	d904      	bls.n	9000a80c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a802:	6982      	ldr	r2, [r0, #24]
9000a804:	f022 020f 	bic.w	r2, r2, #15
9000a808:	430a      	orrs	r2, r1
9000a80a:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a80c:	07d8      	lsls	r0, r3, #31
9000a80e:	d530      	bpl.n	9000a872 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000a810:	4a5c      	ldr	r2, [pc, #368]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a812:	68a1      	ldr	r1, [r4, #8]
9000a814:	6993      	ldr	r3, [r2, #24]
9000a816:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000a81a:	430b      	orrs	r3, r1
9000a81c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a81e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a820:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a822:	2902      	cmp	r1, #2
9000a824:	f000 80a1 	beq.w	9000a96a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000a828:	2903      	cmp	r1, #3
9000a82a:	f000 8098 	beq.w	9000a95e <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000a82e:	2901      	cmp	r1, #1
9000a830:	f000 80a1 	beq.w	9000a976 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a834:	0758      	lsls	r0, r3, #29
9000a836:	d59e      	bpl.n	9000a776 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a838:	4e52      	ldr	r6, [pc, #328]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a83a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a83e:	6933      	ldr	r3, [r6, #16]
9000a840:	f023 0307 	bic.w	r3, r3, #7
9000a844:	430b      	orrs	r3, r1
9000a846:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000a848:	f7fc fa9c 	bl	90006d84 <HAL_GetTick>
9000a84c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a84e:	e005      	b.n	9000a85c <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a850:	f7fc fa98 	bl	90006d84 <HAL_GetTick>
9000a854:	1bc0      	subs	r0, r0, r7
9000a856:	4540      	cmp	r0, r8
9000a858:	f200 808b 	bhi.w	9000a972 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a85c:	6933      	ldr	r3, [r6, #16]
9000a85e:	6862      	ldr	r2, [r4, #4]
9000a860:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a864:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000a868:	d1f2      	bne.n	9000a850 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a86a:	6823      	ldr	r3, [r4, #0]
9000a86c:	0799      	lsls	r1, r3, #30
9000a86e:	d506      	bpl.n	9000a87e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a870:	68e1      	ldr	r1, [r4, #12]
9000a872:	4844      	ldr	r0, [pc, #272]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a874:	6982      	ldr	r2, [r0, #24]
9000a876:	f002 020f 	and.w	r2, r2, #15
9000a87a:	428a      	cmp	r2, r1
9000a87c:	d869      	bhi.n	9000a952 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000a87e:	4940      	ldr	r1, [pc, #256]	; (9000a980 <HAL_RCC_ClockConfig+0x238>)
9000a880:	680a      	ldr	r2, [r1, #0]
9000a882:	f002 020f 	and.w	r2, r2, #15
9000a886:	42aa      	cmp	r2, r5
9000a888:	d90a      	bls.n	9000a8a0 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a88a:	680a      	ldr	r2, [r1, #0]
9000a88c:	f022 020f 	bic.w	r2, r2, #15
9000a890:	432a      	orrs	r2, r5
9000a892:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a894:	680a      	ldr	r2, [r1, #0]
9000a896:	f002 020f 	and.w	r2, r2, #15
9000a89a:	42aa      	cmp	r2, r5
9000a89c:	f47f af6b 	bne.w	9000a776 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a8a0:	075a      	lsls	r2, r3, #29
9000a8a2:	d50b      	bpl.n	9000a8bc <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a8a4:	4937      	ldr	r1, [pc, #220]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a8a6:	6920      	ldr	r0, [r4, #16]
9000a8a8:	698a      	ldr	r2, [r1, #24]
9000a8aa:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a8ae:	4290      	cmp	r0, r2
9000a8b0:	d204      	bcs.n	9000a8bc <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a8b2:	698a      	ldr	r2, [r1, #24]
9000a8b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a8b8:	4302      	orrs	r2, r0
9000a8ba:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a8bc:	071f      	lsls	r7, r3, #28
9000a8be:	d50b      	bpl.n	9000a8d8 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a8c0:	4930      	ldr	r1, [pc, #192]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a8c2:	6960      	ldr	r0, [r4, #20]
9000a8c4:	69ca      	ldr	r2, [r1, #28]
9000a8c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a8ca:	4290      	cmp	r0, r2
9000a8cc:	d204      	bcs.n	9000a8d8 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a8ce:	69ca      	ldr	r2, [r1, #28]
9000a8d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a8d4:	4302      	orrs	r2, r0
9000a8d6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a8d8:	06de      	lsls	r6, r3, #27
9000a8da:	d50b      	bpl.n	9000a8f4 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a8dc:	4929      	ldr	r1, [pc, #164]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a8de:	69a0      	ldr	r0, [r4, #24]
9000a8e0:	69ca      	ldr	r2, [r1, #28]
9000a8e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a8e6:	4290      	cmp	r0, r2
9000a8e8:	d204      	bcs.n	9000a8f4 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a8ea:	69ca      	ldr	r2, [r1, #28]
9000a8ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a8f0:	4302      	orrs	r2, r0
9000a8f2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a8f4:	069d      	lsls	r5, r3, #26
9000a8f6:	d50b      	bpl.n	9000a910 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a8f8:	4a22      	ldr	r2, [pc, #136]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a8fa:	69e1      	ldr	r1, [r4, #28]
9000a8fc:	6a13      	ldr	r3, [r2, #32]
9000a8fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000a902:	4299      	cmp	r1, r3
9000a904:	d204      	bcs.n	9000a910 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a906:	6a13      	ldr	r3, [r2, #32]
9000a908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000a90c:	430b      	orrs	r3, r1
9000a90e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a910:	f7ff fe7a 	bl	9000a608 <HAL_RCC_GetSysClockFreq>
9000a914:	4a1b      	ldr	r2, [pc, #108]	; (9000a984 <HAL_RCC_ClockConfig+0x23c>)
9000a916:	4603      	mov	r3, r0
9000a918:	481b      	ldr	r0, [pc, #108]	; (9000a988 <HAL_RCC_ClockConfig+0x240>)
9000a91a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a91c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a91e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000a922:	4d1a      	ldr	r5, [pc, #104]	; (9000a98c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a924:	f002 020f 	and.w	r2, r2, #15
9000a928:	4c19      	ldr	r4, [pc, #100]	; (9000a990 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a92a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a92c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a92e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000a932:	4818      	ldr	r0, [pc, #96]	; (9000a994 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a934:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a938:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000a93a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000a93c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a93e:	40d3      	lsrs	r3, r2
9000a940:	6023      	str	r3, [r4, #0]
}
9000a942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000a946:	f7fa b92b 	b.w	90004ba0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a94a:	07da      	lsls	r2, r3, #31
9000a94c:	f53f af60 	bmi.w	9000a810 <HAL_RCC_ClockConfig+0xc8>
9000a950:	e795      	b.n	9000a87e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a952:	6982      	ldr	r2, [r0, #24]
9000a954:	f022 020f 	bic.w	r2, r2, #15
9000a958:	430a      	orrs	r2, r1
9000a95a:	6182      	str	r2, [r0, #24]
9000a95c:	e78f      	b.n	9000a87e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a95e:	019f      	lsls	r7, r3, #6
9000a960:	f53f af6a 	bmi.w	9000a838 <HAL_RCC_ClockConfig+0xf0>
9000a964:	e707      	b.n	9000a776 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000a966:	2001      	movs	r0, #1
}
9000a968:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a96a:	039b      	lsls	r3, r3, #14
9000a96c:	f53f af64 	bmi.w	9000a838 <HAL_RCC_ClockConfig+0xf0>
9000a970:	e701      	b.n	9000a776 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000a972:	2003      	movs	r0, #3
9000a974:	e700      	b.n	9000a778 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a976:	05de      	lsls	r6, r3, #23
9000a978:	f53f af5e 	bmi.w	9000a838 <HAL_RCC_ClockConfig+0xf0>
9000a97c:	e6fb      	b.n	9000a776 <HAL_RCC_ClockConfig+0x2e>
9000a97e:	bf00      	nop
9000a980:	52002000 	.word	0x52002000
9000a984:	58024400 	.word	0x58024400
9000a988:	900250b8 	.word	0x900250b8
9000a98c:	24000054 	.word	0x24000054
9000a990:	24000058 	.word	0x24000058
9000a994:	24000060 	.word	0x24000060

9000a998 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a998:	4a1c      	ldr	r2, [pc, #112]	; (9000aa0c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000a99a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a99c:	6913      	ldr	r3, [r2, #16]
9000a99e:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a9a2:	2b10      	cmp	r3, #16
9000a9a4:	d021      	beq.n	9000a9ea <HAL_RCC_GetPCLK1Freq+0x52>
9000a9a6:	2b18      	cmp	r3, #24
9000a9a8:	d02a      	beq.n	9000aa00 <HAL_RCC_GetPCLK1Freq+0x68>
9000a9aa:	b303      	cbz	r3, 9000a9ee <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000a9ac:	4818      	ldr	r0, [pc, #96]	; (9000aa10 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9ae:	4a17      	ldr	r2, [pc, #92]	; (9000aa0c <HAL_RCC_GetPCLK1Freq+0x74>)
9000a9b0:	4918      	ldr	r1, [pc, #96]	; (9000aa14 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000a9b2:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9b4:	4c18      	ldr	r4, [pc, #96]	; (9000aa18 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000a9ba:	4d18      	ldr	r5, [pc, #96]	; (9000aa1c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9bc:	5ccb      	ldrb	r3, [r1, r3]
9000a9be:	f003 031f 	and.w	r3, r3, #31
9000a9c2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9c4:	6993      	ldr	r3, [r2, #24]
9000a9c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000a9ca:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9cc:	5ccb      	ldrb	r3, [r1, r3]
9000a9ce:	f003 031f 	and.w	r3, r3, #31
9000a9d2:	fa20 f303 	lsr.w	r3, r0, r3
9000a9d6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000a9d8:	69d2      	ldr	r2, [r2, #28]
9000a9da:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000a9de:	5c88      	ldrb	r0, [r1, r2]
9000a9e0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000a9e4:	fa23 f000 	lsr.w	r0, r3, r0
9000a9e8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a9ea:	480d      	ldr	r0, [pc, #52]	; (9000aa20 <HAL_RCC_GetPCLK1Freq+0x88>)
9000a9ec:	e7df      	b.n	9000a9ae <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a9ee:	6813      	ldr	r3, [r2, #0]
9000a9f0:	069b      	lsls	r3, r3, #26
9000a9f2:	d508      	bpl.n	9000aa06 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a9f4:	6813      	ldr	r3, [r2, #0]
9000a9f6:	480b      	ldr	r0, [pc, #44]	; (9000aa24 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000a9f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a9fc:	40d8      	lsrs	r0, r3
9000a9fe:	e7d6      	b.n	9000a9ae <HAL_RCC_GetPCLK1Freq+0x16>
9000aa00:	f7ff fa8a 	bl	90009f18 <HAL_RCC_GetSysClockFreq.part.0>
9000aa04:	e7d3      	b.n	9000a9ae <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000aa06:	4807      	ldr	r0, [pc, #28]	; (9000aa24 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000aa08:	e7d1      	b.n	9000a9ae <HAL_RCC_GetPCLK1Freq+0x16>
9000aa0a:	bf00      	nop
9000aa0c:	58024400 	.word	0x58024400
9000aa10:	003d0900 	.word	0x003d0900
9000aa14:	900250b8 	.word	0x900250b8
9000aa18:	24000058 	.word	0x24000058
9000aa1c:	24000054 	.word	0x24000054
9000aa20:	017d7840 	.word	0x017d7840
9000aa24:	03d09000 	.word	0x03d09000

9000aa28 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa28:	4a1c      	ldr	r2, [pc, #112]	; (9000aa9c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000aa2a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa2c:	6913      	ldr	r3, [r2, #16]
9000aa2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000aa32:	2b10      	cmp	r3, #16
9000aa34:	d021      	beq.n	9000aa7a <HAL_RCC_GetPCLK2Freq+0x52>
9000aa36:	2b18      	cmp	r3, #24
9000aa38:	d02a      	beq.n	9000aa90 <HAL_RCC_GetPCLK2Freq+0x68>
9000aa3a:	b303      	cbz	r3, 9000aa7e <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000aa3c:	4818      	ldr	r0, [pc, #96]	; (9000aaa0 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa3e:	4a17      	ldr	r2, [pc, #92]	; (9000aa9c <HAL_RCC_GetPCLK2Freq+0x74>)
9000aa40:	4918      	ldr	r1, [pc, #96]	; (9000aaa4 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000aa42:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa44:	4c18      	ldr	r4, [pc, #96]	; (9000aaa8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa46:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000aa4a:	4d18      	ldr	r5, [pc, #96]	; (9000aaac <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa4c:	5ccb      	ldrb	r3, [r1, r3]
9000aa4e:	f003 031f 	and.w	r3, r3, #31
9000aa52:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa54:	6993      	ldr	r3, [r2, #24]
9000aa56:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000aa5a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa5c:	5ccb      	ldrb	r3, [r1, r3]
9000aa5e:	f003 031f 	and.w	r3, r3, #31
9000aa62:	fa20 f303 	lsr.w	r3, r0, r3
9000aa66:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000aa68:	69d2      	ldr	r2, [r2, #28]
9000aa6a:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000aa6e:	5c88      	ldrb	r0, [r1, r2]
9000aa70:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000aa74:	fa23 f000 	lsr.w	r0, r3, r0
9000aa78:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa7a:	480d      	ldr	r0, [pc, #52]	; (9000aab0 <HAL_RCC_GetPCLK2Freq+0x88>)
9000aa7c:	e7df      	b.n	9000aa3e <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000aa7e:	6813      	ldr	r3, [r2, #0]
9000aa80:	069b      	lsls	r3, r3, #26
9000aa82:	d508      	bpl.n	9000aa96 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aa84:	6813      	ldr	r3, [r2, #0]
9000aa86:	480b      	ldr	r0, [pc, #44]	; (9000aab4 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000aa88:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000aa8c:	40d8      	lsrs	r0, r3
9000aa8e:	e7d6      	b.n	9000aa3e <HAL_RCC_GetPCLK2Freq+0x16>
9000aa90:	f7ff fa42 	bl	90009f18 <HAL_RCC_GetSysClockFreq.part.0>
9000aa94:	e7d3      	b.n	9000aa3e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000aa96:	4807      	ldr	r0, [pc, #28]	; (9000aab4 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000aa98:	e7d1      	b.n	9000aa3e <HAL_RCC_GetPCLK2Freq+0x16>
9000aa9a:	bf00      	nop
9000aa9c:	58024400 	.word	0x58024400
9000aaa0:	003d0900 	.word	0x003d0900
9000aaa4:	900250b8 	.word	0x900250b8
9000aaa8:	24000058 	.word	0x24000058
9000aaac:	24000054 	.word	0x24000054
9000aab0:	017d7840 	.word	0x017d7840
9000aab4:	03d09000 	.word	0x03d09000

9000aab8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000aab8:	4b13      	ldr	r3, [pc, #76]	; (9000ab08 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000aaba:	223f      	movs	r2, #63	; 0x3f
9000aabc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000aabe:	691a      	ldr	r2, [r3, #16]
9000aac0:	f002 0207 	and.w	r2, r2, #7
9000aac4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000aac6:	699a      	ldr	r2, [r3, #24]
9000aac8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000aacc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000aace:	699a      	ldr	r2, [r3, #24]
9000aad0:	f002 020f 	and.w	r2, r2, #15
9000aad4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000aad6:	699a      	ldr	r2, [r3, #24]
9000aad8:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aadc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000aade:	69da      	ldr	r2, [r3, #28]
9000aae0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aae4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000aae6:	69da      	ldr	r2, [r3, #28]
9000aae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000aaec:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaee:	6a1b      	ldr	r3, [r3, #32]
{
9000aaf0:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aaf6:	4c05      	ldr	r4, [pc, #20]	; (9000ab0c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaf8:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aafa:	6823      	ldr	r3, [r4, #0]
}
9000aafc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000ab00:	f003 030f 	and.w	r3, r3, #15
9000ab04:	600b      	str	r3, [r1, #0]
}
9000ab06:	4770      	bx	lr
9000ab08:	58024400 	.word	0x58024400
9000ab0c:	52002000 	.word	0x52002000

9000ab10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ab12:	4c3a      	ldr	r4, [pc, #232]	; (9000abfc <RCCEx_PLL2_Config+0xec>)
9000ab14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ab16:	f003 0303 	and.w	r3, r3, #3
9000ab1a:	2b03      	cmp	r3, #3
9000ab1c:	d067      	beq.n	9000abee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000ab1e:	6823      	ldr	r3, [r4, #0]
9000ab20:	4606      	mov	r6, r0
9000ab22:	460f      	mov	r7, r1
9000ab24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000ab28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ab2a:	f7fc f92b 	bl	90006d84 <HAL_GetTick>
9000ab2e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ab30:	e004      	b.n	9000ab3c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000ab32:	f7fc f927 	bl	90006d84 <HAL_GetTick>
9000ab36:	1b43      	subs	r3, r0, r5
9000ab38:	2b02      	cmp	r3, #2
9000ab3a:	d856      	bhi.n	9000abea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ab3c:	6823      	ldr	r3, [r4, #0]
9000ab3e:	011a      	lsls	r2, r3, #4
9000ab40:	d4f7      	bmi.n	9000ab32 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000ab42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ab44:	6832      	ldr	r2, [r6, #0]
9000ab46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000ab4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000ab4e:	62a3      	str	r3, [r4, #40]	; 0x28
9000ab50:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000ab54:	3b01      	subs	r3, #1
9000ab56:	3a01      	subs	r2, #1
9000ab58:	025b      	lsls	r3, r3, #9
9000ab5a:	0412      	lsls	r2, r2, #16
9000ab5c:	b29b      	uxth	r3, r3
9000ab5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000ab62:	4313      	orrs	r3, r2
9000ab64:	6872      	ldr	r2, [r6, #4]
9000ab66:	3a01      	subs	r2, #1
9000ab68:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ab6c:	4313      	orrs	r3, r2
9000ab6e:	6932      	ldr	r2, [r6, #16]
9000ab70:	3a01      	subs	r2, #1
9000ab72:	0612      	lsls	r2, r2, #24
9000ab74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ab78:	4313      	orrs	r3, r2
9000ab7a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000ab7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ab7e:	6972      	ldr	r2, [r6, #20]
9000ab80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000ab84:	4313      	orrs	r3, r2
9000ab86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ab88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ab8a:	69b3      	ldr	r3, [r6, #24]
9000ab8c:	f022 0220 	bic.w	r2, r2, #32
9000ab90:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000ab92:	4b1b      	ldr	r3, [pc, #108]	; (9000ac00 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ab94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000ab96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ab98:	f022 0210 	bic.w	r2, r2, #16
9000ab9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000ab9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000aba0:	69f2      	ldr	r2, [r6, #28]
9000aba2:	400b      	ands	r3, r1
9000aba4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000aba8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000abaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000abac:	f043 0310 	orr.w	r3, r3, #16
9000abb0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000abb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000abb4:	b1ef      	cbz	r7, 9000abf2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000abb6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000abb8:	bf0c      	ite	eq
9000abba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000abbe:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000abc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000abc4:	4c0d      	ldr	r4, [pc, #52]	; (9000abfc <RCCEx_PLL2_Config+0xec>)
9000abc6:	6823      	ldr	r3, [r4, #0]
9000abc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000abcc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000abce:	f7fc f8d9 	bl	90006d84 <HAL_GetTick>
9000abd2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000abd4:	e004      	b.n	9000abe0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000abd6:	f7fc f8d5 	bl	90006d84 <HAL_GetTick>
9000abda:	1b40      	subs	r0, r0, r5
9000abdc:	2802      	cmp	r0, #2
9000abde:	d804      	bhi.n	9000abea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000abe0:	6823      	ldr	r3, [r4, #0]
9000abe2:	011b      	lsls	r3, r3, #4
9000abe4:	d5f7      	bpl.n	9000abd6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000abe6:	2000      	movs	r0, #0
}
9000abe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000abea:	2003      	movs	r0, #3
}
9000abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000abee:	2001      	movs	r0, #1
}
9000abf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000abf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000abf6:	62e3      	str	r3, [r4, #44]	; 0x2c
9000abf8:	e7e4      	b.n	9000abc4 <RCCEx_PLL2_Config+0xb4>
9000abfa:	bf00      	nop
9000abfc:	58024400 	.word	0x58024400
9000ac00:	ffff0007 	.word	0xffff0007

9000ac04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ac06:	4c3a      	ldr	r4, [pc, #232]	; (9000acf0 <RCCEx_PLL3_Config+0xec>)
9000ac08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ac0a:	f003 0303 	and.w	r3, r3, #3
9000ac0e:	2b03      	cmp	r3, #3
9000ac10:	d067      	beq.n	9000ace2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000ac12:	6823      	ldr	r3, [r4, #0]
9000ac14:	4606      	mov	r6, r0
9000ac16:	460f      	mov	r7, r1
9000ac18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000ac1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ac1e:	f7fc f8b1 	bl	90006d84 <HAL_GetTick>
9000ac22:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000ac24:	e004      	b.n	9000ac30 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000ac26:	f7fc f8ad 	bl	90006d84 <HAL_GetTick>
9000ac2a:	1b43      	subs	r3, r0, r5
9000ac2c:	2b02      	cmp	r3, #2
9000ac2e:	d856      	bhi.n	9000acde <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000ac30:	6823      	ldr	r3, [r4, #0]
9000ac32:	009a      	lsls	r2, r3, #2
9000ac34:	d4f7      	bmi.n	9000ac26 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000ac36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ac38:	6832      	ldr	r2, [r6, #0]
9000ac3a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000ac3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000ac42:	62a3      	str	r3, [r4, #40]	; 0x28
9000ac44:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000ac48:	3b01      	subs	r3, #1
9000ac4a:	3a01      	subs	r2, #1
9000ac4c:	025b      	lsls	r3, r3, #9
9000ac4e:	0412      	lsls	r2, r2, #16
9000ac50:	b29b      	uxth	r3, r3
9000ac52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000ac56:	4313      	orrs	r3, r2
9000ac58:	6872      	ldr	r2, [r6, #4]
9000ac5a:	3a01      	subs	r2, #1
9000ac5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ac60:	4313      	orrs	r3, r2
9000ac62:	6932      	ldr	r2, [r6, #16]
9000ac64:	3a01      	subs	r2, #1
9000ac66:	0612      	lsls	r2, r2, #24
9000ac68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ac6c:	4313      	orrs	r3, r2
9000ac6e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000ac70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ac72:	6972      	ldr	r2, [r6, #20]
9000ac74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000ac78:	4313      	orrs	r3, r2
9000ac7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ac7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ac7e:	69b3      	ldr	r3, [r6, #24]
9000ac80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000ac84:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ac86:	4b1b      	ldr	r3, [pc, #108]	; (9000acf4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ac88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000ac8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ac8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000ac90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ac92:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000ac94:	69f2      	ldr	r2, [r6, #28]
9000ac96:	400b      	ands	r3, r1
9000ac98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000ac9c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000ac9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000aca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000aca4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000aca6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000aca8:	b1ef      	cbz	r7, 9000ace6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000acaa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000acac:	bf0c      	ite	eq
9000acae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000acb2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000acb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000acb8:	4c0d      	ldr	r4, [pc, #52]	; (9000acf0 <RCCEx_PLL3_Config+0xec>)
9000acba:	6823      	ldr	r3, [r4, #0]
9000acbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000acc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000acc2:	f7fc f85f 	bl	90006d84 <HAL_GetTick>
9000acc6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000acc8:	e004      	b.n	9000acd4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000acca:	f7fc f85b 	bl	90006d84 <HAL_GetTick>
9000acce:	1b40      	subs	r0, r0, r5
9000acd0:	2802      	cmp	r0, #2
9000acd2:	d804      	bhi.n	9000acde <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000acd4:	6823      	ldr	r3, [r4, #0]
9000acd6:	009b      	lsls	r3, r3, #2
9000acd8:	d5f7      	bpl.n	9000acca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000acda:	2000      	movs	r0, #0
}
9000acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000acde:	2003      	movs	r0, #3
}
9000ace0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000ace2:	2001      	movs	r0, #1
}
9000ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ace6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000acea:	62e3      	str	r3, [r4, #44]	; 0x2c
9000acec:	e7e4      	b.n	9000acb8 <RCCEx_PLL3_Config+0xb4>
9000acee:	bf00      	nop
9000acf0:	58024400 	.word	0x58024400
9000acf4:	ffff0007 	.word	0xffff0007

9000acf8 <HAL_RCCEx_PeriphCLKConfig>:
{
9000acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000acfc:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000ad00:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000ad02:	011d      	lsls	r5, r3, #4
9000ad04:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000ad08:	d523      	bpl.n	9000ad52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ad0a:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000ad0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000ad10:	f000 8553 	beq.w	9000b7ba <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000ad14:	d812      	bhi.n	9000ad3c <HAL_RCCEx_PeriphCLKConfig+0x44>
9000ad16:	2900      	cmp	r1, #0
9000ad18:	f000 85a9 	beq.w	9000b86e <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000ad1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000ad20:	f040 85a2 	bne.w	9000b868 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ad24:	2102      	movs	r1, #2
9000ad26:	3008      	adds	r0, #8
9000ad28:	f7ff fef2 	bl	9000ab10 <RCCEx_PLL2_Config>
9000ad2c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000ad2e:	2e00      	cmp	r6, #0
9000ad30:	f040 8522 	bne.w	9000b778 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ad34:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ad36:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ad3a:	e003      	b.n	9000ad44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ad3c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000ad40:	f040 8592 	bne.w	9000b868 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ad44:	4dae      	ldr	r5, [pc, #696]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ad46:	2600      	movs	r6, #0
9000ad48:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000ad4a:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000ad4e:	4301      	orrs	r1, r0
9000ad50:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ad52:	05d8      	lsls	r0, r3, #23
9000ad54:	d50a      	bpl.n	9000ad6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000ad56:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000ad58:	2904      	cmp	r1, #4
9000ad5a:	d806      	bhi.n	9000ad6a <HAL_RCCEx_PeriphCLKConfig+0x72>
9000ad5c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000ad60:	053d0536 	.word	0x053d0536
9000ad64:	0323051a 	.word	0x0323051a
9000ad68:	0323      	.short	0x0323
9000ad6a:	2601      	movs	r6, #1
9000ad6c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000ad6e:	0599      	lsls	r1, r3, #22
9000ad70:	d51d      	bpl.n	9000adae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000ad72:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000ad74:	2980      	cmp	r1, #128	; 0x80
9000ad76:	f000 8516 	beq.w	9000b7a6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000ad7a:	f200 80f9 	bhi.w	9000af70 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000ad7e:	2900      	cmp	r1, #0
9000ad80:	f000 8433 	beq.w	9000b5ea <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000ad84:	2940      	cmp	r1, #64	; 0x40
9000ad86:	f040 80fa 	bne.w	9000af7e <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ad8a:	2100      	movs	r1, #0
9000ad8c:	f104 0008 	add.w	r0, r4, #8
9000ad90:	f7ff febe 	bl	9000ab10 <RCCEx_PLL2_Config>
9000ad94:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000ad96:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ad9a:	2d00      	cmp	r5, #0
9000ad9c:	f040 83fe 	bne.w	9000b59c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000ada0:	4f97      	ldr	r7, [pc, #604]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ada2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000ada4:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000ada6:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000adaa:	4301      	orrs	r1, r0
9000adac:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000adae:	055f      	lsls	r7, r3, #21
9000adb0:	d521      	bpl.n	9000adf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000adb2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000adb6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000adba:	f000 8521 	beq.w	9000b800 <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000adbe:	f200 80e1 	bhi.w	9000af84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000adc2:	2900      	cmp	r1, #0
9000adc4:	f000 8418 	beq.w	9000b5f8 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000adc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000adcc:	f040 80e2 	bne.w	9000af94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000add0:	2100      	movs	r1, #0
9000add2:	f104 0008 	add.w	r0, r4, #8
9000add6:	f7ff fe9b 	bl	9000ab10 <RCCEx_PLL2_Config>
9000adda:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000addc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ade0:	2d00      	cmp	r5, #0
9000ade2:	f040 83e2 	bne.w	9000b5aa <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000ade6:	4f86      	ldr	r7, [pc, #536]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ade8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000adec:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000adee:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000adf2:	4301      	orrs	r1, r0
9000adf4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000adf6:	0518      	lsls	r0, r3, #20
9000adf8:	d521      	bpl.n	9000ae3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000adfa:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000adfe:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000ae02:	f000 84bd 	beq.w	9000b780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000ae06:	f200 80c8 	bhi.w	9000af9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000ae0a:	2900      	cmp	r1, #0
9000ae0c:	f000 83e7 	beq.w	9000b5de <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000ae10:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000ae14:	f040 80c9 	bne.w	9000afaa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ae18:	2100      	movs	r1, #0
9000ae1a:	f104 0008 	add.w	r0, r4, #8
9000ae1e:	f7ff fe77 	bl	9000ab10 <RCCEx_PLL2_Config>
9000ae22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000ae24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ae28:	2d00      	cmp	r5, #0
9000ae2a:	f040 83b5 	bne.w	9000b598 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000ae2e:	4f74      	ldr	r7, [pc, #464]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae30:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000ae34:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ae36:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000ae3a:	4301      	orrs	r1, r0
9000ae3c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000ae3e:	0199      	lsls	r1, r3, #6
9000ae40:	d518      	bpl.n	9000ae74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000ae42:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000ae44:	2920      	cmp	r1, #32
9000ae46:	f000 841f 	beq.w	9000b688 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000ae4a:	f200 80b1 	bhi.w	9000afb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000ae4e:	b139      	cbz	r1, 9000ae60 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000ae50:	2910      	cmp	r1, #16
9000ae52:	f040 80b0 	bne.w	9000afb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ae56:	486a      	ldr	r0, [pc, #424]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae58:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000ae5a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000ae5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000ae60:	2d00      	cmp	r5, #0
9000ae62:	f040 83d8 	bne.w	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000ae66:	4f66      	ldr	r7, [pc, #408]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000ae6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000ae6c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000ae70:	4301      	orrs	r1, r0
9000ae72:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000ae74:	04df      	lsls	r7, r3, #19
9000ae76:	d51f      	bpl.n	9000aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000ae78:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000ae7a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000ae7e:	f000 84b5 	beq.w	9000b7ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000ae82:	f200 809b 	bhi.w	9000afbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000ae86:	2900      	cmp	r1, #0
9000ae88:	f000 83a3 	beq.w	9000b5d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000ae8c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000ae90:	f040 809c 	bne.w	9000afcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ae94:	2100      	movs	r1, #0
9000ae96:	f104 0008 	add.w	r0, r4, #8
9000ae9a:	f7ff fe39 	bl	9000ab10 <RCCEx_PLL2_Config>
9000ae9e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000aea0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aea4:	2d00      	cmp	r5, #0
9000aea6:	f040 837b 	bne.w	9000b5a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000aeaa:	4f55      	ldr	r7, [pc, #340]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aeac:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000aeae:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aeb0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000aeb4:	4301      	orrs	r1, r0
9000aeb6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000aeb8:	0498      	lsls	r0, r3, #18
9000aeba:	d51d      	bpl.n	9000aef8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000aebc:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000aebe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000aec2:	f000 8410 	beq.w	9000b6e6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000aec6:	f200 8084 	bhi.w	9000afd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000aeca:	b159      	cbz	r1, 9000aee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000aecc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000aed0:	f040 8087 	bne.w	9000afe2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000aed4:	2101      	movs	r1, #1
9000aed6:	f104 0008 	add.w	r0, r4, #8
9000aeda:	f7ff fe19 	bl	9000ab10 <RCCEx_PLL2_Config>
9000aede:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aee0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aee4:	2d00      	cmp	r5, #0
9000aee6:	f040 839a 	bne.w	9000b61e <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000aeea:	4f45      	ldr	r7, [pc, #276]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aeec:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000aeee:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aef0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000aef4:	4301      	orrs	r1, r0
9000aef6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aef8:	0459      	lsls	r1, r3, #17
9000aefa:	d51d      	bpl.n	9000af38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000aefc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000af00:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000af04:	f000 83fb 	beq.w	9000b6fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000af08:	d86e      	bhi.n	9000afe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000af0a:	b151      	cbz	r1, 9000af22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000af0c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000af10:	d172      	bne.n	9000aff8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000af12:	2101      	movs	r1, #1
9000af14:	f104 0008 	add.w	r0, r4, #8
9000af18:	f7ff fdfa 	bl	9000ab10 <RCCEx_PLL2_Config>
9000af1c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000af1e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000af22:	2d00      	cmp	r5, #0
9000af24:	f040 837f 	bne.w	9000b626 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000af28:	4f35      	ldr	r7, [pc, #212]	; (9000b000 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000af2a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000af2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000af30:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000af34:	4301      	orrs	r1, r0
9000af36:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000af38:	041f      	lsls	r7, r3, #16
9000af3a:	d50d      	bpl.n	9000af58 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000af3c:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000af3e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000af42:	f000 83c8 	beq.w	9000b6d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000af46:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000af4a:	f000 823b 	beq.w	9000b3c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000af4e:	2900      	cmp	r1, #0
9000af50:	f000 8240 	beq.w	9000b3d4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000af54:	2601      	movs	r6, #1
9000af56:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000af58:	01d8      	lsls	r0, r3, #7
9000af5a:	d562      	bpl.n	9000b022 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000af5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000af5e:	2903      	cmp	r1, #3
9000af60:	f200 84bf 	bhi.w	9000b8e2 <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000af64:	e8df f011 	tbh	[pc, r1, lsl #1]
9000af68:	004e0053 	.word	0x004e0053
9000af6c:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000af70:	29c0      	cmp	r1, #192	; 0xc0
9000af72:	f43f af12 	beq.w	9000ad9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000af76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000af7a:	f43f af0e 	beq.w	9000ad9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000af7e:	2601      	movs	r6, #1
9000af80:	4635      	mov	r5, r6
9000af82:	e714      	b.n	9000adae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000af84:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000af88:	f43f af2a 	beq.w	9000ade0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000af8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000af90:	f43f af26 	beq.w	9000ade0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000af94:	2601      	movs	r6, #1
9000af96:	4635      	mov	r5, r6
9000af98:	e72d      	b.n	9000adf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000af9a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000af9e:	f43f af43 	beq.w	9000ae28 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000afa2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000afa6:	f43f af3f 	beq.w	9000ae28 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000afaa:	2601      	movs	r6, #1
9000afac:	4635      	mov	r5, r6
9000afae:	e746      	b.n	9000ae3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000afb0:	2930      	cmp	r1, #48	; 0x30
9000afb2:	f43f af55 	beq.w	9000ae60 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000afb6:	2601      	movs	r6, #1
9000afb8:	4635      	mov	r5, r6
9000afba:	e75b      	b.n	9000ae74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000afbc:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000afc0:	f43f af70 	beq.w	9000aea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000afc4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000afc8:	f43f af6c 	beq.w	9000aea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000afcc:	2601      	movs	r6, #1
9000afce:	4635      	mov	r5, r6
9000afd0:	e772      	b.n	9000aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000afd2:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000afd6:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000afda:	d083      	beq.n	9000aee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000afdc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000afe0:	d080      	beq.n	9000aee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000afe2:	2601      	movs	r6, #1
9000afe4:	4635      	mov	r5, r6
9000afe6:	e787      	b.n	9000aef8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000afe8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000afec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000aff0:	d097      	beq.n	9000af22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000aff2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000aff6:	d094      	beq.n	9000af22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000aff8:	2601      	movs	r6, #1
9000affa:	4635      	mov	r5, r6
9000affc:	e79c      	b.n	9000af38 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000affe:	bf00      	nop
9000b000:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b004:	4839      	ldr	r0, [pc, #228]	; (9000b0ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b006:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b008:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b00c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b00e:	2d00      	cmp	r5, #0
9000b010:	f040 8303 	bne.w	9000b61a <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000b014:	4f35      	ldr	r7, [pc, #212]	; (9000b0ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b016:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000b018:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b01a:	f021 0103 	bic.w	r1, r1, #3
9000b01e:	4301      	orrs	r1, r0
9000b020:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b022:	0259      	lsls	r1, r3, #9
9000b024:	f100 826a 	bmi.w	9000b4fc <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b028:	07d8      	lsls	r0, r3, #31
9000b02a:	d52f      	bpl.n	9000b08c <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000b02c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000b02e:	2928      	cmp	r1, #40	; 0x28
9000b030:	d82a      	bhi.n	9000b088 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000b032:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b036:	020a      	.short	0x020a
9000b038:	00290029 	.word	0x00290029
9000b03c:	00290029 	.word	0x00290029
9000b040:	00290029 	.word	0x00290029
9000b044:	02020029 	.word	0x02020029
9000b048:	00290029 	.word	0x00290029
9000b04c:	00290029 	.word	0x00290029
9000b050:	00290029 	.word	0x00290029
9000b054:	04070029 	.word	0x04070029
9000b058:	00290029 	.word	0x00290029
9000b05c:	00290029 	.word	0x00290029
9000b060:	00290029 	.word	0x00290029
9000b064:	020a0029 	.word	0x020a0029
9000b068:	00290029 	.word	0x00290029
9000b06c:	00290029 	.word	0x00290029
9000b070:	00290029 	.word	0x00290029
9000b074:	020a0029 	.word	0x020a0029
9000b078:	00290029 	.word	0x00290029
9000b07c:	00290029 	.word	0x00290029
9000b080:	00290029 	.word	0x00290029
9000b084:	020a0029 	.word	0x020a0029
9000b088:	2601      	movs	r6, #1
9000b08a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b08c:	0799      	lsls	r1, r3, #30
9000b08e:	d51d      	bpl.n	9000b0cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b090:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000b092:	2905      	cmp	r1, #5
9000b094:	f200 8421 	bhi.w	9000b8da <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000b098:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b09c:	0006000e 	.word	0x0006000e
9000b0a0:	000e03c8 	.word	0x000e03c8
9000b0a4:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b0a8:	2101      	movs	r1, #1
9000b0aa:	f104 0008 	add.w	r0, r4, #8
9000b0ae:	f7ff fd2f 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b0b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b0b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b0b8:	2d00      	cmp	r5, #0
9000b0ba:	f040 82b8 	bne.w	9000b62e <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000b0be:	4f0b      	ldr	r7, [pc, #44]	; (9000b0ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b0c0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000b0c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b0c4:	f021 0107 	bic.w	r1, r1, #7
9000b0c8:	4301      	orrs	r1, r0
9000b0ca:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b0cc:	075f      	lsls	r7, r3, #29
9000b0ce:	d522      	bpl.n	9000b116 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b0d0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000b0d4:	2905      	cmp	r1, #5
9000b0d6:	f200 8408 	bhi.w	9000b8ea <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000b0da:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b0de:	0011      	.short	0x0011
9000b0e0:	039b0009 	.word	0x039b0009
9000b0e4:	00110011 	.word	0x00110011
9000b0e8:	0011      	.short	0x0011
9000b0ea:	bf00      	nop
9000b0ec:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b0f0:	2101      	movs	r1, #1
9000b0f2:	f104 0008 	add.w	r0, r4, #8
9000b0f6:	f7ff fd0b 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b0fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b0fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b100:	2d00      	cmp	r5, #0
9000b102:	f040 8286 	bne.w	9000b612 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000b106:	4fae      	ldr	r7, [pc, #696]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b108:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000b10c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b10e:	f021 0107 	bic.w	r1, r1, #7
9000b112:	4301      	orrs	r1, r0
9000b114:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b116:	0698      	lsls	r0, r3, #26
9000b118:	d51f      	bpl.n	9000b15a <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b11a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000b11e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000b122:	f000 82f7 	beq.w	9000b714 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000b126:	f200 810b 	bhi.w	9000b340 <HAL_RCCEx_PeriphCLKConfig+0x648>
9000b12a:	b159      	cbz	r1, 9000b144 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b12c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000b130:	f040 8110 	bne.w	9000b354 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b134:	2100      	movs	r1, #0
9000b136:	f104 0008 	add.w	r0, r4, #8
9000b13a:	f7ff fce9 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b13e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b140:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b144:	2d00      	cmp	r5, #0
9000b146:	f040 8260 	bne.w	9000b60a <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000b14a:	4f9d      	ldr	r7, [pc, #628]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b14c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000b150:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b152:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000b156:	4301      	orrs	r1, r0
9000b158:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b15a:	0659      	lsls	r1, r3, #25
9000b15c:	d51f      	bpl.n	9000b19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b15e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000b162:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000b166:	f000 829b 	beq.w	9000b6a0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000b16a:	f200 80f6 	bhi.w	9000b35a <HAL_RCCEx_PeriphCLKConfig+0x662>
9000b16e:	b159      	cbz	r1, 9000b188 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b170:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000b174:	f040 80fb 	bne.w	9000b36e <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b178:	2100      	movs	r1, #0
9000b17a:	f104 0008 	add.w	r0, r4, #8
9000b17e:	f7ff fcc7 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b182:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b184:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b188:	2d00      	cmp	r5, #0
9000b18a:	f040 824e 	bne.w	9000b62a <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000b18e:	4f8c      	ldr	r7, [pc, #560]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b190:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000b194:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b196:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000b19a:	4301      	orrs	r1, r0
9000b19c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b19e:	061f      	lsls	r7, r3, #24
9000b1a0:	d51f      	bpl.n	9000b1e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b1a2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000b1a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000b1aa:	f000 8289 	beq.w	9000b6c0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000b1ae:	f200 80e1 	bhi.w	9000b374 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000b1b2:	b159      	cbz	r1, 9000b1cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b1b4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000b1b8:	f040 80e6 	bne.w	9000b388 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1bc:	2100      	movs	r1, #0
9000b1be:	f104 0008 	add.w	r0, r4, #8
9000b1c2:	f7ff fca5 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b1c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b1c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b1cc:	2d00      	cmp	r5, #0
9000b1ce:	f040 8228 	bne.w	9000b622 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000b1d2:	4f7b      	ldr	r7, [pc, #492]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b1d4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000b1d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b1da:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000b1de:	4301      	orrs	r1, r0
9000b1e0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b1e2:	0718      	lsls	r0, r3, #28
9000b1e4:	d50b      	bpl.n	9000b1fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000b1e6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000b1ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b1ee:	f000 82a9 	beq.w	9000b744 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b1f2:	4f73      	ldr	r7, [pc, #460]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b1f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b1f6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000b1fa:	4301      	orrs	r1, r0
9000b1fc:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b1fe:	06d9      	lsls	r1, r3, #27
9000b200:	d50b      	bpl.n	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000b202:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000b206:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000b20a:	f000 82a8 	beq.w	9000b75e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b20e:	4f6c      	ldr	r7, [pc, #432]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b210:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b212:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000b216:	4301      	orrs	r1, r0
9000b218:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b21a:	031f      	lsls	r7, r3, #12
9000b21c:	d50e      	bpl.n	9000b23c <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000b21e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000b222:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b226:	f000 80f4 	beq.w	9000b412 <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000b22a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000b22e:	f000 80f8 	beq.w	9000b422 <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000b232:	2900      	cmp	r1, #0
9000b234:	f000 821c 	beq.w	9000b670 <HAL_RCCEx_PeriphCLKConfig+0x978>
9000b238:	2601      	movs	r6, #1
9000b23a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b23c:	0358      	lsls	r0, r3, #13
9000b23e:	d50f      	bpl.n	9000b260 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000b240:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000b244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b248:	f000 80cf 	beq.w	9000b3ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000b24c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000b250:	f000 80d3 	beq.w	9000b3fa <HAL_RCCEx_PeriphCLKConfig+0x702>
9000b254:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000b258:	f000 8202 	beq.w	9000b660 <HAL_RCCEx_PeriphCLKConfig+0x968>
9000b25c:	2601      	movs	r6, #1
9000b25e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b260:	03d9      	lsls	r1, r3, #15
9000b262:	d509      	bpl.n	9000b278 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000b264:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000b266:	2900      	cmp	r1, #0
9000b268:	f000 81f1 	beq.w	9000b64e <HAL_RCCEx_PeriphCLKConfig+0x956>
9000b26c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b270:	f000 819d 	beq.w	9000b5ae <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000b274:	2601      	movs	r6, #1
9000b276:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b278:	009f      	lsls	r7, r3, #2
9000b27a:	f100 80f1 	bmi.w	9000b460 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b27e:	0398      	lsls	r0, r3, #14
9000b280:	d50c      	bpl.n	9000b29c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000b282:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000b286:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000b28a:	f000 81d8 	beq.w	9000b63e <HAL_RCCEx_PeriphCLKConfig+0x946>
9000b28e:	d97e      	bls.n	9000b38e <HAL_RCCEx_PeriphCLKConfig+0x696>
9000b290:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000b294:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000b298:	d07b      	beq.n	9000b392 <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000b29a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000b29c:	02d9      	lsls	r1, r3, #11
9000b29e:	d506      	bpl.n	9000b2ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000b2a0:	4847      	ldr	r0, [pc, #284]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2a2:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000b2a4:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b2a6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000b2aa:	4329      	orrs	r1, r5
9000b2ac:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000b2ae:	00df      	lsls	r7, r3, #3
9000b2b0:	d507      	bpl.n	9000b2c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000b2b2:	4843      	ldr	r0, [pc, #268]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2b4:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000b2b8:	6901      	ldr	r1, [r0, #16]
9000b2ba:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000b2be:	4329      	orrs	r1, r5
9000b2c0:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000b2c2:	029d      	lsls	r5, r3, #10
9000b2c4:	d506      	bpl.n	9000b2d4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000b2c6:	483e      	ldr	r0, [pc, #248]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2c8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000b2ca:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b2cc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000b2d0:	4329      	orrs	r1, r5
9000b2d2:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000b2d4:	0058      	lsls	r0, r3, #1
9000b2d6:	d509      	bpl.n	9000b2ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000b2d8:	4939      	ldr	r1, [pc, #228]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2da:	6908      	ldr	r0, [r1, #16]
9000b2dc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000b2e0:	6108      	str	r0, [r1, #16]
9000b2e2:	6908      	ldr	r0, [r1, #16]
9000b2e4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000b2e8:	4328      	orrs	r0, r5
9000b2ea:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000b2ec:	2b00      	cmp	r3, #0
9000b2ee:	da06      	bge.n	9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000b2f0:	4833      	ldr	r0, [pc, #204]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2f2:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b2f4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000b2f6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b2fa:	4329      	orrs	r1, r5
9000b2fc:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000b2fe:	0219      	lsls	r1, r3, #8
9000b300:	d507      	bpl.n	9000b312 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000b302:	492f      	ldr	r1, [pc, #188]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b304:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000b308:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000b30a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000b30e:	4303      	orrs	r3, r0
9000b310:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000b312:	07d3      	lsls	r3, r2, #31
9000b314:	f100 80b0 	bmi.w	9000b478 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b318:	0797      	lsls	r7, r2, #30
9000b31a:	f100 80ba 	bmi.w	9000b492 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b31e:	0755      	lsls	r5, r2, #29
9000b320:	f100 80c4 	bmi.w	9000b4ac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b324:	0710      	lsls	r0, r2, #28
9000b326:	f100 80ce 	bmi.w	9000b4c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b32a:	06d1      	lsls	r1, r2, #27
9000b32c:	f100 80d8 	bmi.w	9000b4e0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b330:	0692      	lsls	r2, r2, #26
9000b332:	f100 8125 	bmi.w	9000b580 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000b336:	1e30      	subs	r0, r6, #0
9000b338:	bf18      	it	ne
9000b33a:	2001      	movne	r0, #1
}
9000b33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b340:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000b344:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000b348:	f43f aefc 	beq.w	9000b144 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b34c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000b350:	f43f aef8 	beq.w	9000b144 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b354:	2601      	movs	r6, #1
9000b356:	4635      	mov	r5, r6
9000b358:	e6ff      	b.n	9000b15a <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b35a:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000b35e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b362:	f43f af11 	beq.w	9000b188 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b366:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000b36a:	f43f af0d 	beq.w	9000b188 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b36e:	2601      	movs	r6, #1
9000b370:	4635      	mov	r5, r6
9000b372:	e714      	b.n	9000b19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b374:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000b378:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000b37c:	f43f af26 	beq.w	9000b1cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b380:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000b384:	f43f af22 	beq.w	9000b1cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b388:	2601      	movs	r6, #1
9000b38a:	4635      	mov	r5, r6
9000b38c:	e729      	b.n	9000b1e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000b38e:	2900      	cmp	r1, #0
9000b390:	d183      	bne.n	9000b29a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000b392:	2d00      	cmp	r5, #0
9000b394:	f040 8151 	bne.w	9000b63a <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000b398:	4d09      	ldr	r5, [pc, #36]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b39a:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000b39c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000b3a0:	4301      	orrs	r1, r0
9000b3a2:	6569      	str	r1, [r5, #84]	; 0x54
9000b3a4:	e77a      	b.n	9000b29c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b3a6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000b3a8:	2d00      	cmp	r5, #0
9000b3aa:	f040 80fb 	bne.w	9000b5a4 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000b3ae:	4f04      	ldr	r7, [pc, #16]	; (9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b3b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b3b4:	f021 0107 	bic.w	r1, r1, #7
9000b3b8:	4301      	orrs	r1, r0
9000b3ba:	6539      	str	r1, [r7, #80]	; 0x50
9000b3bc:	e4d7      	b.n	9000ad6e <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b3be:	bf00      	nop
9000b3c0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b3c4:	2101      	movs	r1, #1
9000b3c6:	f104 0008 	add.w	r0, r4, #8
9000b3ca:	f7ff fba1 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b3ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000b3d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3d4:	2d00      	cmp	r5, #0
9000b3d6:	f040 811a 	bne.w	9000b60e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000b3da:	4fb7      	ldr	r7, [pc, #732]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b3dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000b3de:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b3e0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b3e4:	4301      	orrs	r1, r0
9000b3e6:	6539      	str	r1, [r7, #80]	; 0x50
9000b3e8:	e5b6      	b.n	9000af58 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b3ea:	2101      	movs	r1, #1
9000b3ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b3f0:	f7ff fc08 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b3f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b3f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3fa:	2d00      	cmp	r5, #0
9000b3fc:	f040 811b 	bne.w	9000b636 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000b400:	4fad      	ldr	r7, [pc, #692]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b402:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000b406:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b408:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000b40c:	4301      	orrs	r1, r0
9000b40e:	6579      	str	r1, [r7, #84]	; 0x54
9000b410:	e726      	b.n	9000b260 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b412:	2102      	movs	r1, #2
9000b414:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b418:	f7ff fbf4 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b41c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b41e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b422:	2d00      	cmp	r5, #0
9000b424:	f040 8105 	bne.w	9000b632 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000b428:	4fa3      	ldr	r7, [pc, #652]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b42a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000b42e:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b430:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000b434:	4301      	orrs	r1, r0
9000b436:	65b9      	str	r1, [r7, #88]	; 0x58
9000b438:	e700      	b.n	9000b23c <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b43a:	2101      	movs	r1, #1
9000b43c:	f104 0008 	add.w	r0, r4, #8
9000b440:	f7ff fb66 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b444:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b446:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b44a:	2d00      	cmp	r5, #0
9000b44c:	f040 80db 	bne.w	9000b606 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000b450:	4f99      	ldr	r7, [pc, #612]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b452:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000b454:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b456:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000b45a:	4301      	orrs	r1, r0
9000b45c:	6579      	str	r1, [r7, #84]	; 0x54
9000b45e:	e615      	b.n	9000b08c <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b460:	2102      	movs	r1, #2
9000b462:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b466:	f7ff fbcd 	bl	9000ac04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b46a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b46e:	2800      	cmp	r0, #0
9000b470:	f43f af05 	beq.w	9000b27e <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000b474:	2601      	movs	r6, #1
9000b476:	e702      	b.n	9000b27e <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b478:	2100      	movs	r1, #0
9000b47a:	f104 0008 	add.w	r0, r4, #8
9000b47e:	f7ff fb47 	bl	9000ab10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b482:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b484:	2800      	cmp	r0, #0
9000b486:	f43f af47 	beq.w	9000b318 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b48a:	0797      	lsls	r7, r2, #30
9000b48c:	4606      	mov	r6, r0
9000b48e:	f57f af46 	bpl.w	9000b31e <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b492:	2101      	movs	r1, #1
9000b494:	f104 0008 	add.w	r0, r4, #8
9000b498:	f7ff fb3a 	bl	9000ab10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b49c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b49e:	2800      	cmp	r0, #0
9000b4a0:	f43f af3d 	beq.w	9000b31e <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b4a4:	0755      	lsls	r5, r2, #29
9000b4a6:	4606      	mov	r6, r0
9000b4a8:	f57f af3c 	bpl.w	9000b324 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b4ac:	2102      	movs	r1, #2
9000b4ae:	f104 0008 	add.w	r0, r4, #8
9000b4b2:	f7ff fb2d 	bl	9000ab10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b4b6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b4b8:	2800      	cmp	r0, #0
9000b4ba:	f43f af33 	beq.w	9000b324 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b4be:	4606      	mov	r6, r0
9000b4c0:	0710      	lsls	r0, r2, #28
9000b4c2:	f57f af32 	bpl.w	9000b32a <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b4c6:	2100      	movs	r1, #0
9000b4c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b4cc:	f7ff fb9a 	bl	9000ac04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b4d0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b4d2:	2800      	cmp	r0, #0
9000b4d4:	f43f af29 	beq.w	9000b32a <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b4d8:	06d1      	lsls	r1, r2, #27
9000b4da:	4606      	mov	r6, r0
9000b4dc:	f57f af28 	bpl.w	9000b330 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b4e0:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000b4e4:	2101      	movs	r1, #1
9000b4e6:	4628      	mov	r0, r5
9000b4e8:	f7ff fb8c 	bl	9000ac04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b4ec:	2800      	cmp	r0, #0
9000b4ee:	f000 80c9 	beq.w	9000b684 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b4f2:	6863      	ldr	r3, [r4, #4]
9000b4f4:	069b      	lsls	r3, r3, #26
9000b4f6:	d54c      	bpl.n	9000b592 <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000b4f8:	4606      	mov	r6, r0
9000b4fa:	e043      	b.n	9000b584 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000b4fc:	4f6f      	ldr	r7, [pc, #444]	; (9000b6bc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000b4fe:	683b      	ldr	r3, [r7, #0]
9000b500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b504:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000b506:	f7fb fc3d 	bl	90006d84 <HAL_GetTick>
9000b50a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b50c:	e006      	b.n	9000b51c <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000b50e:	f7fb fc39 	bl	90006d84 <HAL_GetTick>
9000b512:	eba0 0008 	sub.w	r0, r0, r8
9000b516:	2864      	cmp	r0, #100	; 0x64
9000b518:	f200 81a0 	bhi.w	9000b85c <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b51c:	683b      	ldr	r3, [r7, #0]
9000b51e:	05da      	lsls	r2, r3, #23
9000b520:	d5f5      	bpl.n	9000b50e <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000b522:	2d00      	cmp	r5, #0
9000b524:	f040 81d4 	bne.w	9000b8d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000b528:	4a63      	ldr	r2, [pc, #396]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b52a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b52e:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000b530:	4059      	eors	r1, r3
9000b532:	f411 7f40 	tst.w	r1, #768	; 0x300
9000b536:	d00b      	beq.n	9000b550 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b538:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000b53a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b53c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000b540:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000b544:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000b546:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000b548:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000b54c:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000b54e:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000b550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b554:	f000 819e 	beq.w	9000b894 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b558:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000b55c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000b560:	f000 81ac 	beq.w	9000b8bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000b564:	4954      	ldr	r1, [pc, #336]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b566:	690a      	ldr	r2, [r1, #16]
9000b568:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000b56c:	610a      	str	r2, [r1, #16]
9000b56e:	4852      	ldr	r0, [pc, #328]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b570:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000b574:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000b576:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b578:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b57c:	6701      	str	r1, [r0, #112]	; 0x70
9000b57e:	e553      	b.n	9000b028 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b580:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b584:	2102      	movs	r1, #2
9000b586:	4628      	mov	r0, r5
9000b588:	f7ff fb3c 	bl	9000ac04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b58c:	2800      	cmp	r0, #0
9000b58e:	f43f aed2 	beq.w	9000b336 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000b592:	2001      	movs	r0, #1
}
9000b594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b598:	462e      	mov	r6, r5
9000b59a:	e450      	b.n	9000ae3e <HAL_RCCEx_PeriphCLKConfig+0x146>
9000b59c:	462e      	mov	r6, r5
9000b59e:	e406      	b.n	9000adae <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000b5a0:	462e      	mov	r6, r5
9000b5a2:	e489      	b.n	9000aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000b5a4:	462e      	mov	r6, r5
9000b5a6:	f7ff bbe2 	b.w	9000ad6e <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b5aa:	462e      	mov	r6, r5
9000b5ac:	e423      	b.n	9000adf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b5ae:	2102      	movs	r1, #2
9000b5b0:	f104 0008 	add.w	r0, r4, #8
9000b5b4:	f7ff faac 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b5b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b5ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b5be:	2d00      	cmp	r5, #0
9000b5c0:	d14c      	bne.n	9000b65c <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b5c2:	4f3d      	ldr	r7, [pc, #244]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000b5c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b5c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000b5cc:	4301      	orrs	r1, r0
9000b5ce:	64f9      	str	r1, [r7, #76]	; 0x4c
9000b5d0:	e652      	b.n	9000b278 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5d2:	4839      	ldr	r0, [pc, #228]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5d6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5da:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5dc:	e462      	b.n	9000aea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5de:	4836      	ldr	r0, [pc, #216]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5e2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5e6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5e8:	e41e      	b.n	9000ae28 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5ea:	4833      	ldr	r0, [pc, #204]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5f2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5f4:	f7ff bbd1 	b.w	9000ad9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5f8:	482f      	ldr	r0, [pc, #188]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b600:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b602:	f7ff bbed 	b.w	9000ade0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b606:	462e      	mov	r6, r5
9000b608:	e540      	b.n	9000b08c <HAL_RCCEx_PeriphCLKConfig+0x394>
9000b60a:	462e      	mov	r6, r5
9000b60c:	e5a5      	b.n	9000b15a <HAL_RCCEx_PeriphCLKConfig+0x462>
9000b60e:	462e      	mov	r6, r5
9000b610:	e4a2      	b.n	9000af58 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000b612:	462e      	mov	r6, r5
9000b614:	e57f      	b.n	9000b116 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000b616:	462e      	mov	r6, r5
9000b618:	e42c      	b.n	9000ae74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000b61a:	462e      	mov	r6, r5
9000b61c:	e501      	b.n	9000b022 <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000b61e:	462e      	mov	r6, r5
9000b620:	e46a      	b.n	9000aef8 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000b622:	462e      	mov	r6, r5
9000b624:	e5dd      	b.n	9000b1e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000b626:	462e      	mov	r6, r5
9000b628:	e486      	b.n	9000af38 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000b62a:	462e      	mov	r6, r5
9000b62c:	e5b7      	b.n	9000b19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000b62e:	462e      	mov	r6, r5
9000b630:	e54c      	b.n	9000b0cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000b632:	462e      	mov	r6, r5
9000b634:	e602      	b.n	9000b23c <HAL_RCCEx_PeriphCLKConfig+0x544>
9000b636:	462e      	mov	r6, r5
9000b638:	e612      	b.n	9000b260 <HAL_RCCEx_PeriphCLKConfig+0x568>
9000b63a:	462e      	mov	r6, r5
9000b63c:	e62e      	b.n	9000b29c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b63e:	4f1e      	ldr	r7, [pc, #120]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b642:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b646:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000b648:	2d00      	cmp	r5, #0
9000b64a:	d1f6      	bne.n	9000b63a <HAL_RCCEx_PeriphCLKConfig+0x942>
9000b64c:	e6a4      	b.n	9000b398 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b64e:	481a      	ldr	r0, [pc, #104]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b650:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b652:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b656:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b658:	2d00      	cmp	r5, #0
9000b65a:	d0b2      	beq.n	9000b5c2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000b65c:	462e      	mov	r6, r5
9000b65e:	e60b      	b.n	9000b278 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b660:	4815      	ldr	r0, [pc, #84]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b662:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b664:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b668:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b66a:	2d00      	cmp	r5, #0
9000b66c:	d1e3      	bne.n	9000b636 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000b66e:	e6c7      	b.n	9000b400 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b670:	f104 0008 	add.w	r0, r4, #8
9000b674:	f7ff fa4c 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b678:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b67a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b67e:	2d00      	cmp	r5, #0
9000b680:	d1d7      	bne.n	9000b632 <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000b682:	e6d1      	b.n	9000b428 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b684:	6862      	ldr	r2, [r4, #4]
9000b686:	e653      	b.n	9000b330 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b688:	2102      	movs	r1, #2
9000b68a:	f104 0008 	add.w	r0, r4, #8
9000b68e:	f7ff fa3f 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b692:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000b694:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b698:	2d00      	cmp	r5, #0
9000b69a:	d1bc      	bne.n	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000b69c:	f7ff bbe3 	b.w	9000ae66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b6a0:	2102      	movs	r1, #2
9000b6a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6a6:	f7ff faad 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b6aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b6ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6b0:	2d00      	cmp	r5, #0
9000b6b2:	d1ba      	bne.n	9000b62a <HAL_RCCEx_PeriphCLKConfig+0x932>
9000b6b4:	e56b      	b.n	9000b18e <HAL_RCCEx_PeriphCLKConfig+0x496>
9000b6b6:	bf00      	nop
9000b6b8:	58024400 	.word	0x58024400
9000b6bc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b6c0:	2102      	movs	r1, #2
9000b6c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6c6:	f7ff fa9d 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b6ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b6cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6d0:	2d00      	cmp	r5, #0
9000b6d2:	d1a6      	bne.n	9000b622 <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000b6d4:	e57d      	b.n	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b6d6:	4886      	ldr	r0, [pc, #536]	; (9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b6d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b6da:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b6de:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b6e0:	2d00      	cmp	r5, #0
9000b6e2:	d194      	bne.n	9000b60e <HAL_RCCEx_PeriphCLKConfig+0x916>
9000b6e4:	e679      	b.n	9000b3da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b6e6:	2101      	movs	r1, #1
9000b6e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6ec:	f7ff fa8a 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b6f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b6f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6f6:	2d00      	cmp	r5, #0
9000b6f8:	d191      	bne.n	9000b61e <HAL_RCCEx_PeriphCLKConfig+0x926>
9000b6fa:	f7ff bbf6 	b.w	9000aeea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b6fe:	2101      	movs	r1, #1
9000b700:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b704:	f7ff fa7e 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b708:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b70a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b70e:	2d00      	cmp	r5, #0
9000b710:	d189      	bne.n	9000b626 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000b712:	e409      	b.n	9000af28 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b714:	2102      	movs	r1, #2
9000b716:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b71a:	f7ff fa73 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b71e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b720:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b724:	2d00      	cmp	r5, #0
9000b726:	f47f af70 	bne.w	9000b60a <HAL_RCCEx_PeriphCLKConfig+0x912>
9000b72a:	e50e      	b.n	9000b14a <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b72c:	2102      	movs	r1, #2
9000b72e:	f104 0008 	add.w	r0, r4, #8
9000b732:	f7ff f9ed 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b736:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b738:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b73c:	2d00      	cmp	r5, #0
9000b73e:	f47f af6c 	bne.w	9000b61a <HAL_RCCEx_PeriphCLKConfig+0x922>
9000b742:	e467      	b.n	9000b014 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b744:	2102      	movs	r1, #2
9000b746:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b74a:	f7ff fa5b 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b74e:	2800      	cmp	r0, #0
9000b750:	f040 8094 	bne.w	9000b87c <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b754:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b758:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b75c:	e549      	b.n	9000b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b75e:	2102      	movs	r1, #2
9000b760:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b764:	f7ff fa4e 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b768:	2800      	cmp	r0, #0
9000b76a:	f040 808d 	bne.w	9000b888 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b76e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b772:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b776:	e54a      	b.n	9000b20e <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b778:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b77c:	f7ff bae9 	b.w	9000ad52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b780:	2100      	movs	r1, #0
9000b782:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b786:	f7ff fa3d 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b78a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b78c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b790:	f7ff bb4a 	b.w	9000ae28 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b794:	2100      	movs	r1, #0
9000b796:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b79a:	f7ff fa33 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b79e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b7a0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7a4:	e600      	b.n	9000b3a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b7a6:	2100      	movs	r1, #0
9000b7a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7ac:	f7ff fa2a 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b7b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b7b2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7b6:	f7ff baf0 	b.w	9000ad9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b7ba:	2102      	movs	r1, #2
9000b7bc:	3028      	adds	r0, #40	; 0x28
9000b7be:	f7ff fa21 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b7c2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000b7c4:	2e00      	cmp	r6, #0
9000b7c6:	f43f aab5 	beq.w	9000ad34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000b7ca:	e7d5      	b.n	9000b778 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b7cc:	4848      	ldr	r0, [pc, #288]	; (9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000b7ce:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b7d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b7d2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b7d6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b7d8:	e5e6      	b.n	9000b3a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b7da:	2100      	movs	r1, #0
9000b7dc:	f104 0008 	add.w	r0, r4, #8
9000b7e0:	f7ff f996 	bl	9000ab10 <RCCEx_PLL2_Config>
9000b7e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b7e6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7ea:	e5dd      	b.n	9000b3a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b7ec:	2100      	movs	r1, #0
9000b7ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7f2:	f7ff fa07 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b7f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b7f8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7fc:	f7ff bb52 	b.w	9000aea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b800:	2100      	movs	r1, #0
9000b802:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b806:	f7ff f9fd 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b80a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b80c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b810:	f7ff bae6 	b.w	9000ade0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b814:	2101      	movs	r1, #1
9000b816:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b81a:	f7ff f9f3 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b81e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b820:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b824:	2d00      	cmp	r5, #0
9000b826:	f47f aef4 	bne.w	9000b612 <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000b82a:	e46c      	b.n	9000b106 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b82c:	2101      	movs	r1, #1
9000b82e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b832:	f7ff f9e7 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b836:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b838:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b83c:	2d00      	cmp	r5, #0
9000b83e:	f47f aef6 	bne.w	9000b62e <HAL_RCCEx_PeriphCLKConfig+0x936>
9000b842:	e43c      	b.n	9000b0be <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b844:	2101      	movs	r1, #1
9000b846:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b84a:	f7ff f9db 	bl	9000ac04 <RCCEx_PLL3_Config>
9000b84e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b850:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b854:	2d00      	cmp	r5, #0
9000b856:	f47f aed6 	bne.w	9000b606 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000b85a:	e5f9      	b.n	9000b450 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000b85c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b85e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b862:	4635      	mov	r5, r6
9000b864:	f7ff bbe0 	b.w	9000b028 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b868:	2601      	movs	r6, #1
9000b86a:	f7ff ba72 	b.w	9000ad52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b86e:	4d20      	ldr	r5, [pc, #128]	; (9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b870:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000b872:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b876:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000b878:	f7ff ba64 	b.w	9000ad44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b87c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000b880:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b882:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b886:	e4b4      	b.n	9000b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b888:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000b88c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b88e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b892:	e4bc      	b.n	9000b20e <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000b894:	f7fb fa76 	bl	90006d84 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b898:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000b89c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b89e:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b8a2:	e004      	b.n	9000b8ae <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b8a4:	f7fb fa6e 	bl	90006d84 <HAL_GetTick>
9000b8a8:	1bc0      	subs	r0, r0, r7
9000b8aa:	4548      	cmp	r0, r9
9000b8ac:	d8d6      	bhi.n	9000b85c <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b8ae:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000b8b2:	079b      	lsls	r3, r3, #30
9000b8b4:	d5f6      	bpl.n	9000b8a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b8b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b8ba:	e64d      	b.n	9000b558 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000b8bc:	480c      	ldr	r0, [pc, #48]	; (9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b8be:	4a0d      	ldr	r2, [pc, #52]	; (9000b8f4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000b8c0:	6901      	ldr	r1, [r0, #16]
9000b8c2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000b8c6:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000b8ca:	430a      	orrs	r2, r1
9000b8cc:	6102      	str	r2, [r0, #16]
9000b8ce:	e64e      	b.n	9000b56e <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b8d0:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b8d4:	462e      	mov	r6, r5
9000b8d6:	f7ff bba7 	b.w	9000b028 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b8da:	2601      	movs	r6, #1
9000b8dc:	4635      	mov	r5, r6
9000b8de:	f7ff bbf5 	b.w	9000b0cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000b8e2:	2601      	movs	r6, #1
9000b8e4:	4635      	mov	r5, r6
9000b8e6:	f7ff bb9c 	b.w	9000b022 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b8ea:	2601      	movs	r6, #1
9000b8ec:	4635      	mov	r5, r6
9000b8ee:	e412      	b.n	9000b116 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000b8f0:	58024400 	.word	0x58024400
9000b8f4:	00ffffcf 	.word	0x00ffffcf

9000b8f8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000b8f8:	b318      	cbz	r0, 9000b942 <HAL_SDRAM_Init+0x4a>
{
9000b8fa:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000b8fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000b900:	4604      	mov	r4, r0
9000b902:	460d      	mov	r5, r1
9000b904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b908:	b1b3      	cbz	r3, 9000b938 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000b90a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b90c:	2302      	movs	r3, #2
9000b90e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000b912:	f851 0b04 	ldr.w	r0, [r1], #4
9000b916:	f000 fa39 	bl	9000bd8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000b91a:	6862      	ldr	r2, [r4, #4]
9000b91c:	4629      	mov	r1, r5
9000b91e:	6820      	ldr	r0, [r4, #0]
9000b920:	f000 fa72 	bl	9000be08 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000b924:	4a08      	ldr	r2, [pc, #32]	; (9000b948 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000b926:	2101      	movs	r1, #1

  return HAL_OK;
9000b928:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000b92a:	6813      	ldr	r3, [r2, #0]
9000b92c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000b930:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000b932:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000b936:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000b938:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000b93c:	f7f9 f87e 	bl	90004a3c <HAL_SDRAM_MspInit>
9000b940:	e7e3      	b.n	9000b90a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000b942:	2001      	movs	r0, #1
}
9000b944:	4770      	bx	lr
9000b946:	bf00      	nop
9000b948:	52004000 	.word	0x52004000

9000b94c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000b94c:	b510      	push	{r4, lr}
9000b94e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000b950:	f7f9 f8f0 	bl	90004b34 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000b954:	e9d4 0100 	ldrd	r0, r1, [r4]
9000b958:	f000 faa4 	bl	9000bea4 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000b95c:	2000      	movs	r0, #0
9000b95e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000b962:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000b966:	bd10      	pop	{r4, pc}

9000b968 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000b968:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000b96a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000b96e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000b970:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000b972:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000b974:	d004      	beq.n	9000b980 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000b976:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000b97a:	2e01      	cmp	r6, #1
9000b97c:	d001      	beq.n	9000b982 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000b97e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000b980:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b982:	2302      	movs	r3, #2
9000b984:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000b986:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b988:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000b98c:	f000 fa9e 	bl	9000becc <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000b990:	682b      	ldr	r3, [r5, #0]
9000b992:	2b02      	cmp	r3, #2
9000b994:	d003      	beq.n	9000b99e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000b996:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000b998:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000b99c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000b99e:	2305      	movs	r3, #5
  return HAL_OK;
9000b9a0:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000b9a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000b9a6:	bd70      	pop	{r4, r5, r6, pc}

9000b9a8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000b9a8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000b9aa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000b9ae:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000b9b0:	2b02      	cmp	r3, #2
9000b9b2:	b2d8      	uxtb	r0, r3
9000b9b4:	d005      	beq.n	9000b9c2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000b9b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000b9ba:	2b01      	cmp	r3, #1
9000b9bc:	b2dd      	uxtb	r5, r3
9000b9be:	d001      	beq.n	9000b9c4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000b9c0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000b9c2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b9c4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000b9c6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b9c8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000b9cc:	f000 fa96 	bl	9000befc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000b9d0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000b9d2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000b9d6:	bd38      	pop	{r3, r4, r5, pc}

9000b9d8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000b9d8:	4770      	bx	lr
9000b9da:	bf00      	nop

9000b9dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000b9dc:	2800      	cmp	r0, #0
9000b9de:	f000 80a5 	beq.w	9000bb2c <HAL_TIM_Base_Init+0x150>
{
9000b9e2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000b9e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000b9e8:	4604      	mov	r4, r0
9000b9ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b9ee:	2b00      	cmp	r3, #0
9000b9f0:	d076      	beq.n	9000bae0 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000b9f2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000b9f4:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b9f6:	494e      	ldr	r1, [pc, #312]	; (9000bb30 <HAL_TIM_Base_Init+0x154>)
9000b9f8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000b9fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ba00:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000ba04:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ba06:	fab1 f181 	clz	r1, r1
9000ba0a:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000ba0e:	d027      	beq.n	9000ba60 <HAL_TIM_Base_Init+0x84>
9000ba10:	bb31      	cbnz	r1, 9000ba60 <HAL_TIM_Base_Init+0x84>
9000ba12:	4848      	ldr	r0, [pc, #288]	; (9000bb34 <HAL_TIM_Base_Init+0x158>)
9000ba14:	4d48      	ldr	r5, [pc, #288]	; (9000bb38 <HAL_TIM_Base_Init+0x15c>)
9000ba16:	4282      	cmp	r2, r0
9000ba18:	d067      	beq.n	9000baea <HAL_TIM_Base_Init+0x10e>
9000ba1a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000ba1e:	4282      	cmp	r2, r0
9000ba20:	d063      	beq.n	9000baea <HAL_TIM_Base_Init+0x10e>
9000ba22:	1b55      	subs	r5, r2, r5
9000ba24:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000ba28:	fab5 f585 	clz	r5, r5
9000ba2c:	4282      	cmp	r2, r0
9000ba2e:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000ba32:	d063      	beq.n	9000bafc <HAL_TIM_Base_Init+0x120>
9000ba34:	2d00      	cmp	r5, #0
9000ba36:	d161      	bne.n	9000bafc <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000ba38:	4840      	ldr	r0, [pc, #256]	; (9000bb3c <HAL_TIM_Base_Init+0x160>)
9000ba3a:	4941      	ldr	r1, [pc, #260]	; (9000bb40 <HAL_TIM_Base_Init+0x164>)
9000ba3c:	428a      	cmp	r2, r1
9000ba3e:	bf18      	it	ne
9000ba40:	4282      	cmpne	r2, r0
9000ba42:	d065      	beq.n	9000bb10 <HAL_TIM_Base_Init+0x134>
9000ba44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000ba48:	428a      	cmp	r2, r1
9000ba4a:	d061      	beq.n	9000bb10 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ba4c:	69a0      	ldr	r0, [r4, #24]
9000ba4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ba52:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ba54:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000ba56:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000ba58:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ba5a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000ba5c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000ba5e:	e023      	b.n	9000baa8 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ba60:	4d35      	ldr	r5, [pc, #212]	; (9000bb38 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000ba62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000ba66:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ba68:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000ba6a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ba6c:	fab5 f585 	clz	r5, r5
9000ba70:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000ba72:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000ba74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000ba78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ba7a:	69a0      	ldr	r0, [r4, #24]
9000ba7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000ba80:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000ba82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ba84:	68e3      	ldr	r3, [r4, #12]
9000ba86:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000ba88:	6863      	ldr	r3, [r4, #4]
9000ba8a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000ba8c:	b951      	cbnz	r1, 9000baa4 <HAL_TIM_Base_Init+0xc8>
9000ba8e:	b94d      	cbnz	r5, 9000baa4 <HAL_TIM_Base_Init+0xc8>
9000ba90:	492a      	ldr	r1, [pc, #168]	; (9000bb3c <HAL_TIM_Base_Init+0x160>)
9000ba92:	4b2b      	ldr	r3, [pc, #172]	; (9000bb40 <HAL_TIM_Base_Init+0x164>)
9000ba94:	429a      	cmp	r2, r3
9000ba96:	bf18      	it	ne
9000ba98:	428a      	cmpne	r2, r1
9000ba9a:	d003      	beq.n	9000baa4 <HAL_TIM_Base_Init+0xc8>
9000ba9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000baa0:	429a      	cmp	r2, r3
9000baa2:	d101      	bne.n	9000baa8 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000baa4:	6963      	ldr	r3, [r4, #20]
9000baa6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000baa8:	2301      	movs	r3, #1
  return HAL_OK;
9000baaa:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000baac:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000baae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bab2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000bab6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000baba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000babe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000bac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000bac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000baca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000bace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000bad2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000bad6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000bada:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000bade:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000bae0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000bae4:	f7ff ff78 	bl	9000b9d8 <HAL_TIM_Base_MspInit>
9000bae8:	e783      	b.n	9000b9f2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000baea:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000baec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000baf0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000baf2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000baf6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000baf8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bafa:	e7ba      	b.n	9000ba72 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000bafc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bb02:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bb04:	480f      	ldr	r0, [pc, #60]	; (9000bb44 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bb06:	4282      	cmp	r2, r0
9000bb08:	d0b3      	beq.n	9000ba72 <HAL_TIM_Base_Init+0x96>
9000bb0a:	2d00      	cmp	r5, #0
9000bb0c:	d1b1      	bne.n	9000ba72 <HAL_TIM_Base_Init+0x96>
9000bb0e:	e793      	b.n	9000ba38 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bb10:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000bb12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bb16:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bb18:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bb1a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bb1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bb20:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000bb22:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000bb24:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bb26:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bb28:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bb2a:	e7b1      	b.n	9000ba90 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000bb2c:	2001      	movs	r0, #1
}
9000bb2e:	4770      	bx	lr
9000bb30:	40010000 	.word	0x40010000
9000bb34:	40000400 	.word	0x40000400
9000bb38:	40010400 	.word	0x40010400
9000bb3c:	40014000 	.word	0x40014000
9000bb40:	40014400 	.word	0x40014400
9000bb44:	40000c00 	.word	0x40000c00

9000bb48 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000bb48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bb4c:	2b01      	cmp	r3, #1
9000bb4e:	d141      	bne.n	9000bbd4 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000bb50:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000bb52:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bb54:	4b24      	ldr	r3, [pc, #144]	; (9000bbe8 <HAL_TIM_Base_Start_IT+0xa0>)
9000bb56:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000bb5a:	bf18      	it	ne
9000bb5c:	429a      	cmpne	r2, r3
{
9000bb5e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bb60:	bf0c      	ite	eq
9000bb62:	2301      	moveq	r3, #1
9000bb64:	2300      	movne	r3, #0
9000bb66:	4d21      	ldr	r5, [pc, #132]	; (9000bbec <HAL_TIM_Base_Start_IT+0xa4>)
9000bb68:	4c21      	ldr	r4, [pc, #132]	; (9000bbf0 <HAL_TIM_Base_Start_IT+0xa8>)
9000bb6a:	42aa      	cmp	r2, r5
9000bb6c:	bf08      	it	eq
9000bb6e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000bb72:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000bb76:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bb78:	42a2      	cmp	r2, r4
9000bb7a:	bf08      	it	eq
9000bb7c:	f043 0301 	orreq.w	r3, r3, #1
9000bb80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000bb84:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bb88:	481a      	ldr	r0, [pc, #104]	; (9000bbf4 <HAL_TIM_Base_Start_IT+0xac>)
9000bb8a:	42a2      	cmp	r2, r4
9000bb8c:	bf08      	it	eq
9000bb8e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000bb92:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bb94:	4282      	cmp	r2, r0
9000bb96:	bf08      	it	eq
9000bb98:	f043 0301 	orreq.w	r3, r3, #1
9000bb9c:	4916      	ldr	r1, [pc, #88]	; (9000bbf8 <HAL_TIM_Base_Start_IT+0xb0>)
9000bb9e:	428a      	cmp	r2, r1
9000bba0:	bf08      	it	eq
9000bba2:	f043 0301 	orreq.w	r3, r3, #1
9000bba6:	b933      	cbnz	r3, 9000bbb6 <HAL_TIM_Base_Start_IT+0x6e>
9000bba8:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000bbac:	1a10      	subs	r0, r2, r0
9000bbae:	fab0 f080 	clz	r0, r0
9000bbb2:	0940      	lsrs	r0, r0, #5
9000bbb4:	b198      	cbz	r0, 9000bbde <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000bbb6:	6891      	ldr	r1, [r2, #8]
9000bbb8:	4b10      	ldr	r3, [pc, #64]	; (9000bbfc <HAL_TIM_Base_Start_IT+0xb4>)
9000bbba:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000bbbc:	2b06      	cmp	r3, #6
9000bbbe:	d00b      	beq.n	9000bbd8 <HAL_TIM_Base_Start_IT+0x90>
9000bbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000bbc4:	d008      	beq.n	9000bbd8 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000bbc6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000bbc8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000bbca:	f043 0301 	orr.w	r3, r3, #1
9000bbce:	6013      	str	r3, [r2, #0]
}
9000bbd0:	bc30      	pop	{r4, r5}
9000bbd2:	4770      	bx	lr
    return HAL_ERROR;
9000bbd4:	2001      	movs	r0, #1
}
9000bbd6:	4770      	bx	lr
  return HAL_OK;
9000bbd8:	2000      	movs	r0, #0
}
9000bbda:	bc30      	pop	{r4, r5}
9000bbdc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000bbde:	6813      	ldr	r3, [r2, #0]
9000bbe0:	f043 0301 	orr.w	r3, r3, #1
9000bbe4:	6013      	str	r3, [r2, #0]
9000bbe6:	e7f3      	b.n	9000bbd0 <HAL_TIM_Base_Start_IT+0x88>
9000bbe8:	40010000 	.word	0x40010000
9000bbec:	40000400 	.word	0x40000400
9000bbf0:	40000800 	.word	0x40000800
9000bbf4:	40010400 	.word	0x40010400
9000bbf8:	40001800 	.word	0x40001800
9000bbfc:	00010007 	.word	0x00010007

9000bc00 <HAL_TIM_OC_DelayElapsedCallback>:
9000bc00:	4770      	bx	lr
9000bc02:	bf00      	nop

9000bc04 <HAL_TIM_IC_CaptureCallback>:
9000bc04:	4770      	bx	lr
9000bc06:	bf00      	nop

9000bc08 <HAL_TIM_PWM_PulseFinishedCallback>:
9000bc08:	4770      	bx	lr
9000bc0a:	bf00      	nop

9000bc0c <HAL_TIM_TriggerCallback>:
9000bc0c:	4770      	bx	lr
9000bc0e:	bf00      	nop

9000bc10 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000bc10:	6803      	ldr	r3, [r0, #0]
9000bc12:	691a      	ldr	r2, [r3, #16]
9000bc14:	0791      	lsls	r1, r2, #30
{
9000bc16:	b510      	push	{r4, lr}
9000bc18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000bc1a:	d502      	bpl.n	9000bc22 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000bc1c:	68da      	ldr	r2, [r3, #12]
9000bc1e:	0792      	lsls	r2, r2, #30
9000bc20:	d468      	bmi.n	9000bcf4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000bc22:	691a      	ldr	r2, [r3, #16]
9000bc24:	0752      	lsls	r2, r2, #29
9000bc26:	d502      	bpl.n	9000bc2e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000bc28:	68da      	ldr	r2, [r3, #12]
9000bc2a:	0750      	lsls	r0, r2, #29
9000bc2c:	d44f      	bmi.n	9000bcce <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000bc2e:	691a      	ldr	r2, [r3, #16]
9000bc30:	0711      	lsls	r1, r2, #28
9000bc32:	d502      	bpl.n	9000bc3a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000bc34:	68da      	ldr	r2, [r3, #12]
9000bc36:	0712      	lsls	r2, r2, #28
9000bc38:	d437      	bmi.n	9000bcaa <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000bc3a:	691a      	ldr	r2, [r3, #16]
9000bc3c:	06d0      	lsls	r0, r2, #27
9000bc3e:	d502      	bpl.n	9000bc46 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000bc40:	68da      	ldr	r2, [r3, #12]
9000bc42:	06d1      	lsls	r1, r2, #27
9000bc44:	d41e      	bmi.n	9000bc84 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000bc46:	691a      	ldr	r2, [r3, #16]
9000bc48:	07d2      	lsls	r2, r2, #31
9000bc4a:	d502      	bpl.n	9000bc52 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000bc4c:	68da      	ldr	r2, [r3, #12]
9000bc4e:	07d0      	lsls	r0, r2, #31
9000bc50:	d469      	bmi.n	9000bd26 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000bc52:	691a      	ldr	r2, [r3, #16]
9000bc54:	0611      	lsls	r1, r2, #24
9000bc56:	d502      	bpl.n	9000bc5e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000bc58:	68da      	ldr	r2, [r3, #12]
9000bc5a:	0612      	lsls	r2, r2, #24
9000bc5c:	d46b      	bmi.n	9000bd36 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000bc5e:	691a      	ldr	r2, [r3, #16]
9000bc60:	05d0      	lsls	r0, r2, #23
9000bc62:	d502      	bpl.n	9000bc6a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000bc64:	68da      	ldr	r2, [r3, #12]
9000bc66:	0611      	lsls	r1, r2, #24
9000bc68:	d46d      	bmi.n	9000bd46 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000bc6a:	691a      	ldr	r2, [r3, #16]
9000bc6c:	0652      	lsls	r2, r2, #25
9000bc6e:	d502      	bpl.n	9000bc76 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000bc70:	68da      	ldr	r2, [r3, #12]
9000bc72:	0650      	lsls	r0, r2, #25
9000bc74:	d46f      	bmi.n	9000bd56 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000bc76:	691a      	ldr	r2, [r3, #16]
9000bc78:	0691      	lsls	r1, r2, #26
9000bc7a:	d502      	bpl.n	9000bc82 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000bc7c:	68da      	ldr	r2, [r3, #12]
9000bc7e:	0692      	lsls	r2, r2, #26
9000bc80:	d449      	bmi.n	9000bd16 <HAL_TIM_IRQHandler+0x106>
}
9000bc82:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000bc84:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000bc88:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000bc8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000bc8c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000bc8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000bc90:	69db      	ldr	r3, [r3, #28]
9000bc92:	f413 7f40 	tst.w	r3, #768	; 0x300
9000bc96:	d16f      	bne.n	9000bd78 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bc98:	f7ff ffb2 	bl	9000bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bc9c:	4620      	mov	r0, r4
9000bc9e:	f7ff ffb3 	bl	9000bc08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bca2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000bca4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bca6:	7722      	strb	r2, [r4, #28]
9000bca8:	e7cd      	b.n	9000bc46 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000bcaa:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000bcae:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000bcb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000bcb2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000bcb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000bcb6:	69db      	ldr	r3, [r3, #28]
9000bcb8:	079b      	lsls	r3, r3, #30
9000bcba:	d15a      	bne.n	9000bd72 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bcbc:	f7ff ffa0 	bl	9000bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bcc0:	4620      	mov	r0, r4
9000bcc2:	f7ff ffa1 	bl	9000bc08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bcc6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000bcc8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bcca:	7722      	strb	r2, [r4, #28]
9000bccc:	e7b5      	b.n	9000bc3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000bcce:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000bcd2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000bcd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000bcd6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000bcd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000bcda:	699b      	ldr	r3, [r3, #24]
9000bcdc:	f413 7f40 	tst.w	r3, #768	; 0x300
9000bce0:	d144      	bne.n	9000bd6c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bce2:	f7ff ff8d 	bl	9000bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bce6:	4620      	mov	r0, r4
9000bce8:	f7ff ff8e 	bl	9000bc08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bcec:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000bcee:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bcf0:	7722      	strb	r2, [r4, #28]
9000bcf2:	e79c      	b.n	9000bc2e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000bcf4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000bcf8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000bcfa:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000bcfc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000bcfe:	699b      	ldr	r3, [r3, #24]
9000bd00:	0799      	lsls	r1, r3, #30
9000bd02:	d130      	bne.n	9000bd66 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000bd04:	f7ff ff7c 	bl	9000bc00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bd08:	4620      	mov	r0, r4
9000bd0a:	f7ff ff7d 	bl	9000bc08 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bd0e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000bd10:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bd12:	7722      	strb	r2, [r4, #28]
9000bd14:	e785      	b.n	9000bc22 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000bd16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000bd1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000bd1c:	611a      	str	r2, [r3, #16]
}
9000bd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000bd22:	f000 b82d 	b.w	9000bd80 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000bd26:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000bd2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000bd2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000bd2e:	f7f8 fce9 	bl	90004704 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000bd32:	6823      	ldr	r3, [r4, #0]
9000bd34:	e78d      	b.n	9000bc52 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000bd36:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000bd3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000bd3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000bd3e:	f000 f821 	bl	9000bd84 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000bd42:	6823      	ldr	r3, [r4, #0]
9000bd44:	e78b      	b.n	9000bc5e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000bd46:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000bd4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000bd4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000bd4e:	f000 f81b 	bl	9000bd88 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000bd52:	6823      	ldr	r3, [r4, #0]
9000bd54:	e789      	b.n	9000bc6a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000bd56:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000bd5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000bd5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000bd5e:	f7ff ff55 	bl	9000bc0c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000bd62:	6823      	ldr	r3, [r4, #0]
9000bd64:	e787      	b.n	9000bc76 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000bd66:	f7ff ff4d 	bl	9000bc04 <HAL_TIM_IC_CaptureCallback>
9000bd6a:	e7d0      	b.n	9000bd0e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000bd6c:	f7ff ff4a 	bl	9000bc04 <HAL_TIM_IC_CaptureCallback>
9000bd70:	e7bc      	b.n	9000bcec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000bd72:	f7ff ff47 	bl	9000bc04 <HAL_TIM_IC_CaptureCallback>
9000bd76:	e7a6      	b.n	9000bcc6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000bd78:	f7ff ff44 	bl	9000bc04 <HAL_TIM_IC_CaptureCallback>
9000bd7c:	e791      	b.n	9000bca2 <HAL_TIM_IRQHandler+0x92>
9000bd7e:	bf00      	nop

9000bd80 <HAL_TIMEx_CommutCallback>:
9000bd80:	4770      	bx	lr
9000bd82:	bf00      	nop

9000bd84 <HAL_TIMEx_BreakCallback>:
9000bd84:	4770      	bx	lr
9000bd86:	bf00      	nop

9000bd88 <HAL_TIMEx_Break2Callback>:
9000bd88:	4770      	bx	lr
9000bd8a:	bf00      	nop

9000bd8c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000bd8c:	680b      	ldr	r3, [r1, #0]
{
9000bd8e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000bd90:	b9d3      	cbnz	r3, 9000bdc8 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bd92:	6804      	ldr	r4, [r0, #0]
9000bd94:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000bd98:	684a      	ldr	r2, [r1, #4]
9000bd9a:	4023      	ands	r3, r4
9000bd9c:	4313      	orrs	r3, r2
9000bd9e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000bda2:	4323      	orrs	r3, r4
9000bda4:	4313      	orrs	r3, r2
9000bda6:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000bdaa:	4323      	orrs	r3, r4
9000bdac:	4313      	orrs	r3, r2
9000bdae:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000bdb2:	4323      	orrs	r3, r4
9000bdb4:	4313      	orrs	r3, r2
9000bdb6:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000bdba:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000bdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bdc0:	4313      	orrs	r3, r2
9000bdc2:	6003      	str	r3, [r0, #0]
}
9000bdc4:	2000      	movs	r0, #0
9000bdc6:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bdc8:	6802      	ldr	r2, [r0, #0]
9000bdca:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000bdce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000bdd2:	4322      	orrs	r2, r4
9000bdd4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000bdd6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000bdd8:	4b0a      	ldr	r3, [pc, #40]	; (9000be04 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bdda:	4322      	orrs	r2, r4
9000bddc:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000bdde:	6842      	ldr	r2, [r0, #4]
9000bde0:	4013      	ands	r3, r2
9000bde2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000bde6:	4323      	orrs	r3, r4
9000bde8:	4313      	orrs	r3, r2
9000bdea:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000bdee:	4323      	orrs	r3, r4
9000bdf0:	4313      	orrs	r3, r2
9000bdf2:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000bdf6:	4323      	orrs	r3, r4
}
9000bdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000bdfc:	4313      	orrs	r3, r2
9000bdfe:	6043      	str	r3, [r0, #4]
}
9000be00:	2000      	movs	r0, #0
9000be02:	4770      	bx	lr
9000be04:	ffff8000 	.word	0xffff8000

9000be08 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000be08:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000be0a:	bb0a      	cbnz	r2, 9000be50 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be0c:	6883      	ldr	r3, [r0, #8]
9000be0e:	e9d1 2400 	ldrd	r2, r4, [r1]
9000be12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000be16:	3c01      	subs	r4, #1
9000be18:	3a01      	subs	r2, #1
9000be1a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000be1e:	4313      	orrs	r3, r2
9000be20:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000be24:	3c01      	subs	r4, #1
9000be26:	3a01      	subs	r2, #1
9000be28:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000be2c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000be30:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000be34:	698a      	ldr	r2, [r1, #24]
9000be36:	3d01      	subs	r5, #1
9000be38:	1e61      	subs	r1, r4, #1
9000be3a:	3a01      	subs	r2, #1
9000be3c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000be40:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000be44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000be48:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be4a:	6083      	str	r3, [r0, #8]
}
9000be4c:	2000      	movs	r0, #0
9000be4e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be50:	6885      	ldr	r5, [r0, #8]
9000be52:	68ca      	ldr	r2, [r1, #12]
9000be54:	4b12      	ldr	r3, [pc, #72]	; (9000bea0 <FMC_SDRAM_Timing_Init+0x98>)
9000be56:	1e54      	subs	r4, r2, #1
9000be58:	694a      	ldr	r2, [r1, #20]
9000be5a:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be5c:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be5e:	3a01      	subs	r2, #1
9000be60:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be64:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be68:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be6c:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be70:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be72:	68c3      	ldr	r3, [r0, #12]
9000be74:	3c01      	subs	r4, #1
9000be76:	3a01      	subs	r2, #1
9000be78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000be7c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000be80:	690c      	ldr	r4, [r1, #16]
9000be82:	4313      	orrs	r3, r2
9000be84:	698a      	ldr	r2, [r1, #24]
9000be86:	1e61      	subs	r1, r4, #1
9000be88:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000be8c:	3a01      	subs	r2, #1
9000be8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000be92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000be96:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be98:	60c3      	str	r3, [r0, #12]
}
9000be9a:	2000      	movs	r0, #0
9000be9c:	4770      	bx	lr
9000be9e:	bf00      	nop
9000bea0:	ff0f0fff 	.word	0xff0f0fff

9000bea4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000bea4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000bea6:	2200      	movs	r2, #0
{
9000bea8:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000beaa:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000beae:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000beb2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000beb6:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000beba:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000bebc:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000bec0:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000bec2:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000bec4:	619a      	str	r2, [r3, #24]
}
9000bec6:	bc30      	pop	{r4, r5}
9000bec8:	4770      	bx	lr
9000beca:	bf00      	nop

9000becc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000becc:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000bece:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000bed2:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000bed4:	6900      	ldr	r0, [r0, #16]
9000bed6:	4323      	orrs	r3, r4
9000bed8:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000bedc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000bee0:	4c05      	ldr	r4, [pc, #20]	; (9000bef8 <FMC_SDRAM_SendCommand+0x2c>)
9000bee2:	3901      	subs	r1, #1
9000bee4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000bee6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000bee8:	4323      	orrs	r3, r4
}
9000beea:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000beee:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000bef2:	6113      	str	r3, [r2, #16]
}
9000bef4:	4770      	bx	lr
9000bef6:	bf00      	nop
9000bef8:	ffc00000 	.word	0xffc00000

9000befc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000befc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000befe:	4b05      	ldr	r3, [pc, #20]	; (9000bf14 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000bf00:	2000      	movs	r0, #0
{
9000bf02:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000bf04:	6954      	ldr	r4, [r2, #20]
9000bf06:	4023      	ands	r3, r4
}
9000bf08:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000bf0c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000bf10:	6151      	str	r1, [r2, #20]
}
9000bf12:	4770      	bx	lr
9000bf14:	ffffc001 	.word	0xffffc001

9000bf18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000bf18:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000bf1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000bf1e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000bf20:	f002 fcda 	bl	9000e8d8 <xTaskGetSchedulerState>
9000bf24:	2801      	cmp	r0, #1
9000bf26:	d100      	bne.n	9000bf2a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000bf28:	bd08      	pop	{r3, pc}
9000bf2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000bf2e:	f000 bcd9 	b.w	9000c8e4 <xPortSysTickHandler>
9000bf32:	bf00      	nop

9000bf34 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000bf34:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000bf38:	b92b      	cbnz	r3, 9000bf46 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000bf3a:	4b06      	ldr	r3, [pc, #24]	; (9000bf54 <osKernelInitialize+0x20>)
9000bf3c:	6818      	ldr	r0, [r3, #0]
9000bf3e:	b928      	cbnz	r0, 9000bf4c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000bf40:	2201      	movs	r2, #1
9000bf42:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000bf44:	4770      	bx	lr
    stat = osErrorISR;
9000bf46:	f06f 0005 	mvn.w	r0, #5
9000bf4a:	4770      	bx	lr
    } else {
      stat = osError;
9000bf4c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000bf50:	4770      	bx	lr
9000bf52:	bf00      	nop
9000bf54:	2400c02c 	.word	0x2400c02c

9000bf58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000bf58:	b510      	push	{r4, lr}
9000bf5a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000bf5e:	b974      	cbnz	r4, 9000bf7e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000bf60:	4b08      	ldr	r3, [pc, #32]	; (9000bf84 <osKernelStart+0x2c>)
9000bf62:	681a      	ldr	r2, [r3, #0]
9000bf64:	2a01      	cmp	r2, #1
9000bf66:	d107      	bne.n	9000bf78 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000bf68:	4907      	ldr	r1, [pc, #28]	; (9000bf88 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000bf6a:	2202      	movs	r2, #2
9000bf6c:	77cc      	strb	r4, [r1, #31]
9000bf6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000bf70:	f002 fa40 	bl	9000e3f4 <vTaskStartScheduler>
      stat = osOK;
9000bf74:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000bf76:	bd10      	pop	{r4, pc}
      stat = osError;
9000bf78:	f04f 30ff 	mov.w	r0, #4294967295
}
9000bf7c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000bf7e:	f06f 0005 	mvn.w	r0, #5
}
9000bf82:	bd10      	pop	{r4, pc}
9000bf84:	2400c02c 	.word	0x2400c02c
9000bf88:	e000ed00 	.word	0xe000ed00

9000bf8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000bf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000bf8e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000bf90:	b087      	sub	sp, #28
9000bf92:	4614      	mov	r4, r2
  hTask = NULL;
9000bf94:	9505      	str	r5, [sp, #20]
9000bf96:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000bf9a:	bb5a      	cbnz	r2, 9000bff4 <osThreadNew+0x68>
9000bf9c:	4606      	mov	r6, r0
9000bf9e:	b348      	cbz	r0, 9000bff4 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000bfa0:	b1e4      	cbz	r4, 9000bfdc <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000bfa2:	69a7      	ldr	r7, [r4, #24]
9000bfa4:	bb4f      	cbnz	r7, 9000bffa <osThreadNew+0x6e>
9000bfa6:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000bfa8:	6863      	ldr	r3, [r4, #4]
9000bfaa:	07db      	lsls	r3, r3, #31
9000bfac:	d422      	bmi.n	9000bff4 <osThreadNew+0x68>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000bfae:	6963      	ldr	r3, [r4, #20]
9000bfb0:	b33b      	cbz	r3, 9000c002 <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000bfb2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000bfb6:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000bfb8:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000bfba:	b338      	cbz	r0, 9000c00c <osThreadNew+0x80>
9000bfbc:	68e2      	ldr	r2, [r4, #12]
9000bfbe:	2a5f      	cmp	r2, #95	; 0x5f
9000bfc0:	d918      	bls.n	9000bff4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000bfc2:	6924      	ldr	r4, [r4, #16]
9000bfc4:	b1b3      	cbz	r3, 9000bff4 <osThreadNew+0x68>
9000bfc6:	b1ac      	cbz	r4, 9000bff4 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000bfc8:	460b      	mov	r3, r1
9000bfca:	4662      	mov	r2, ip
9000bfcc:	4629      	mov	r1, r5
9000bfce:	9700      	str	r7, [sp, #0]
9000bfd0:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000bfd4:	4630      	mov	r0, r6
9000bfd6:	f002 f871 	bl	9000e0bc <xTaskCreateStatic>
9000bfda:	e00c      	b.n	9000bff6 <osThreadNew+0x6a>
9000bfdc:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000bfde:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000bfe0:	460b      	mov	r3, r1
9000bfe2:	4621      	mov	r1, r4
9000bfe4:	ac05      	add	r4, sp, #20
9000bfe6:	4630      	mov	r0, r6
9000bfe8:	9700      	str	r7, [sp, #0]
9000bfea:	9401      	str	r4, [sp, #4]
9000bfec:	f002 f910 	bl	9000e210 <xTaskCreate>
9000bff0:	2801      	cmp	r0, #1
9000bff2:	d009      	beq.n	9000c008 <osThreadNew+0x7c>
        return (NULL);
9000bff4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000bff6:	b007      	add	sp, #28
9000bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000bffa:	1e7a      	subs	r2, r7, #1
9000bffc:	2a37      	cmp	r2, #55	; 0x37
9000bffe:	d9d3      	bls.n	9000bfa8 <osThreadNew+0x1c>
9000c000:	e7f8      	b.n	9000bff4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000c002:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000c006:	e7d6      	b.n	9000bfb6 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000c008:	9805      	ldr	r0, [sp, #20]
9000c00a:	e7f4      	b.n	9000bff6 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000c00c:	68e3      	ldr	r3, [r4, #12]
9000c00e:	2b00      	cmp	r3, #0
9000c010:	d1f1      	bne.n	9000bff6 <osThreadNew+0x6a>
9000c012:	6923      	ldr	r3, [r4, #16]
9000c014:	2b00      	cmp	r3, #0
9000c016:	d1ee      	bne.n	9000bff6 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000c018:	fa1f f28c 	uxth.w	r2, ip
9000c01c:	462c      	mov	r4, r5
9000c01e:	e7df      	b.n	9000bfe0 <osThreadNew+0x54>

9000c020 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000c020:	b510      	push	{r4, lr}
9000c022:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000c026:	b92c      	cbnz	r4, 9000c034 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000c028:	b900      	cbnz	r0, 9000c02c <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000c02a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000c02c:	f002 f98c 	bl	9000e348 <vTaskDelay>
    stat = osOK;
9000c030:	4620      	mov	r0, r4
}
9000c032:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000c034:	f06f 0005 	mvn.w	r0, #5
}
9000c038:	bd10      	pop	{r4, pc}
9000c03a:	bf00      	nop

9000c03c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000c03c:	b570      	push	{r4, r5, r6, lr}
9000c03e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000c042:	b9db      	cbnz	r3, 9000c07c <osMutexNew+0x40>
    if (attr != NULL) {
9000c044:	4604      	mov	r4, r0
9000c046:	b1e0      	cbz	r0, 9000c082 <osMutexNew+0x46>
      type = attr->attr_bits;
9000c048:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000c04a:	0733      	lsls	r3, r6, #28
9000c04c:	d416      	bmi.n	9000c07c <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c04e:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000c050:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c054:	68c3      	ldr	r3, [r0, #12]
9000c056:	b181      	cbz	r1, 9000c07a <osMutexNew+0x3e>
9000c058:	2b4f      	cmp	r3, #79	; 0x4f
9000c05a:	d90f      	bls.n	9000c07c <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000c05c:	b31e      	cbz	r6, 9000c0a6 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000c05e:	2004      	movs	r0, #4
9000c060:	f001 f852 	bl	9000d108 <xQueueCreateMutexStatic>
9000c064:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000c066:	b14d      	cbz	r5, 9000c07c <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000c068:	6821      	ldr	r1, [r4, #0]
9000c06a:	4628      	mov	r0, r5
9000c06c:	f001 fd82 	bl	9000db74 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000c070:	b12e      	cbz	r6, 9000c07e <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000c072:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000c076:	4628      	mov	r0, r5
9000c078:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000c07a:	b163      	cbz	r3, 9000c096 <osMutexNew+0x5a>
  hMutex = NULL;
9000c07c:	2500      	movs	r5, #0
}
9000c07e:	4628      	mov	r0, r5
9000c080:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000c082:	2001      	movs	r0, #1
9000c084:	f001 f8b0 	bl	9000d1e8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c088:	4605      	mov	r5, r0
9000c08a:	2800      	cmp	r0, #0
9000c08c:	d0f6      	beq.n	9000c07c <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000c08e:	4621      	mov	r1, r4
9000c090:	f001 fd70 	bl	9000db74 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000c094:	e7f3      	b.n	9000c07e <osMutexNew+0x42>
            if (rmtx != 0U) {
9000c096:	b15e      	cbz	r6, 9000c0b0 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000c098:	2004      	movs	r0, #4
9000c09a:	f001 f8a5 	bl	9000d1e8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c09e:	4605      	mov	r5, r0
9000c0a0:	2800      	cmp	r0, #0
9000c0a2:	d1e1      	bne.n	9000c068 <osMutexNew+0x2c>
9000c0a4:	e7ea      	b.n	9000c07c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000c0a6:	2001      	movs	r0, #1
9000c0a8:	f001 f82e 	bl	9000d108 <xQueueCreateMutexStatic>
9000c0ac:	4605      	mov	r5, r0
9000c0ae:	e7da      	b.n	9000c066 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000c0b0:	2001      	movs	r0, #1
9000c0b2:	f001 f899 	bl	9000d1e8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c0b6:	4605      	mov	r5, r0
9000c0b8:	e7d5      	b.n	9000c066 <osMutexNew+0x2a>
9000c0ba:	bf00      	nop

9000c0bc <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000c0bc:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000c0c0:	f000 0301 	and.w	r3, r0, #1
9000c0c4:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000c0c8:	b9a8      	cbnz	r0, 9000c0f6 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000c0ca:	b1ba      	cbz	r2, 9000c0fc <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000c0cc:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000c0ce:	b510      	push	{r4, lr}
9000c0d0:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000c0d2:	b953      	cbnz	r3, 9000c0ea <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000c0d4:	f001 fb00 	bl	9000d6d8 <xQueueSemaphoreTake>
9000c0d8:	2801      	cmp	r0, #1
9000c0da:	d00a      	beq.n	9000c0f2 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000c0dc:	2c00      	cmp	r4, #0
9000c0de:	bf14      	ite	ne
9000c0e0:	f06f 0001 	mvnne.w	r0, #1
9000c0e4:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000c0e8:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000c0ea:	f001 fc7d 	bl	9000d9e8 <xQueueTakeMutexRecursive>
9000c0ee:	2801      	cmp	r0, #1
9000c0f0:	d1f4      	bne.n	9000c0dc <osMutexAcquire+0x20>
  stat = osOK;
9000c0f2:	2000      	movs	r0, #0
}
9000c0f4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000c0f6:	f06f 0005 	mvn.w	r0, #5
9000c0fa:	4770      	bx	lr
    stat = osErrorParameter;
9000c0fc:	f06f 0003 	mvn.w	r0, #3
}
9000c100:	4770      	bx	lr
9000c102:	bf00      	nop

9000c104 <osMutexRelease>:
9000c104:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000c108:	b9ba      	cbnz	r2, 9000c13a <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000c10a:	b510      	push	{r4, lr}
9000c10c:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000c110:	b1b4      	cbz	r4, 9000c140 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000c112:	f000 0301 	and.w	r3, r0, #1
9000c116:	b943      	cbnz	r3, 9000c12a <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000c118:	461a      	mov	r2, r3
9000c11a:	4619      	mov	r1, r3
9000c11c:	4620      	mov	r0, r4
9000c11e:	f000 fe71 	bl	9000ce04 <xQueueGenericSend>
9000c122:	2801      	cmp	r0, #1
9000c124:	d106      	bne.n	9000c134 <osMutexRelease+0x30>
  stat = osOK;
9000c126:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c128:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000c12a:	4620      	mov	r0, r4
9000c12c:	f001 f83c 	bl	9000d1a8 <xQueueGiveMutexRecursive>
9000c130:	2801      	cmp	r0, #1
9000c132:	d0f8      	beq.n	9000c126 <osMutexRelease+0x22>
        stat = osErrorResource;
9000c134:	f06f 0002 	mvn.w	r0, #2
}
9000c138:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000c13a:	f06f 0005 	mvn.w	r0, #5
}
9000c13e:	4770      	bx	lr
    stat = osErrorParameter;
9000c140:	f06f 0003 	mvn.w	r0, #3
}
9000c144:	bd10      	pop	{r4, pc}
9000c146:	bf00      	nop

9000c148 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000c148:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c14a:	b083      	sub	sp, #12
9000c14c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000c150:	b98e      	cbnz	r6, 9000c176 <osSemaphoreNew+0x2e>
9000c152:	4605      	mov	r5, r0
9000c154:	b178      	cbz	r0, 9000c176 <osSemaphoreNew+0x2e>
9000c156:	4288      	cmp	r0, r1
9000c158:	460f      	mov	r7, r1
9000c15a:	d30c      	bcc.n	9000c176 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000c15c:	4614      	mov	r4, r2
9000c15e:	b182      	cbz	r2, 9000c182 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c160:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000c164:	b15a      	cbz	r2, 9000c17e <osSemaphoreNew+0x36>
9000c166:	2b4f      	cmp	r3, #79	; 0x4f
9000c168:	d905      	bls.n	9000c176 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000c16a:	2801      	cmp	r0, #1
9000c16c:	d032      	beq.n	9000c1d4 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000c16e:	f000 fda1 	bl	9000ccb4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000c172:	4605      	mov	r5, r0
9000c174:	b978      	cbnz	r0, 9000c196 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000c176:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000c178:	4628      	mov	r0, r5
9000c17a:	b003      	add	sp, #12
9000c17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000c17e:	2b00      	cmp	r3, #0
9000c180:	d1f9      	bne.n	9000c176 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000c182:	2d01      	cmp	r5, #1
9000c184:	d00f      	beq.n	9000c1a6 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000c186:	4628      	mov	r0, r5
9000c188:	4639      	mov	r1, r7
9000c18a:	f000 fdf5 	bl	9000cd78 <xQueueCreateCountingSemaphore>
9000c18e:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000c190:	2d00      	cmp	r5, #0
9000c192:	d0f0      	beq.n	9000c176 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000c194:	b104      	cbz	r4, 9000c198 <osSemaphoreNew+0x50>
          name = attr->name;
9000c196:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000c198:	4628      	mov	r0, r5
9000c19a:	4621      	mov	r1, r4
9000c19c:	f001 fcea 	bl	9000db74 <vQueueAddToRegistry>
}
9000c1a0:	4628      	mov	r0, r5
9000c1a2:	b003      	add	sp, #12
9000c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000c1a6:	4628      	mov	r0, r5
9000c1a8:	2203      	movs	r2, #3
9000c1aa:	2100      	movs	r1, #0
9000c1ac:	f000 fd40 	bl	9000cc30 <xQueueGenericCreate>
9000c1b0:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000c1b2:	2d00      	cmp	r5, #0
9000c1b4:	d0df      	beq.n	9000c176 <osSemaphoreNew+0x2e>
9000c1b6:	2f00      	cmp	r7, #0
9000c1b8:	d0ea      	beq.n	9000c190 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000c1ba:	2300      	movs	r3, #0
9000c1bc:	4628      	mov	r0, r5
9000c1be:	461a      	mov	r2, r3
9000c1c0:	4619      	mov	r1, r3
9000c1c2:	f000 fe1f 	bl	9000ce04 <xQueueGenericSend>
9000c1c6:	2801      	cmp	r0, #1
9000c1c8:	d0e4      	beq.n	9000c194 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000c1ca:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000c1cc:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000c1ce:	f001 fc8b 	bl	9000dae8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000c1d2:	e7d1      	b.n	9000c178 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000c1d4:	4613      	mov	r3, r2
9000c1d6:	2203      	movs	r2, #3
9000c1d8:	4631      	mov	r1, r6
9000c1da:	9200      	str	r2, [sp, #0]
9000c1dc:	4632      	mov	r2, r6
9000c1de:	f000 fcbb 	bl	9000cb58 <xQueueGenericCreateStatic>
9000c1e2:	4605      	mov	r5, r0
9000c1e4:	e7e5      	b.n	9000c1b2 <osSemaphoreNew+0x6a>
9000c1e6:	bf00      	nop

9000c1e8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000c1e8:	b370      	cbz	r0, 9000c248 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000c1ea:	b510      	push	{r4, lr}
9000c1ec:	460c      	mov	r4, r1
9000c1ee:	b082      	sub	sp, #8
9000c1f0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000c1f4:	b1c3      	cbz	r3, 9000c228 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000c1f6:	bb21      	cbnz	r1, 9000c242 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000c1f8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c1fa:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000c1fc:	f001 fc14 	bl	9000da28 <xQueueReceiveFromISR>
9000c200:	2801      	cmp	r0, #1
9000c202:	d11a      	bne.n	9000c23a <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c204:	9b01      	ldr	r3, [sp, #4]
9000c206:	b913      	cbnz	r3, 9000c20e <osSemaphoreAcquire+0x26>
  stat = osOK;
9000c208:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c20a:	b002      	add	sp, #8
9000c20c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000c20e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c216:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000c21a:	f3bf 8f4f 	dsb	sy
9000c21e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c222:	4620      	mov	r0, r4
}
9000c224:	b002      	add	sp, #8
9000c226:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000c228:	f001 fa56 	bl	9000d6d8 <xQueueSemaphoreTake>
9000c22c:	2801      	cmp	r0, #1
9000c22e:	d0eb      	beq.n	9000c208 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000c230:	b11c      	cbz	r4, 9000c23a <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000c232:	f06f 0001 	mvn.w	r0, #1
}
9000c236:	b002      	add	sp, #8
9000c238:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000c23a:	f06f 0002 	mvn.w	r0, #2
}
9000c23e:	b002      	add	sp, #8
9000c240:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000c242:	f06f 0003 	mvn.w	r0, #3
9000c246:	e7e0      	b.n	9000c20a <osSemaphoreAcquire+0x22>
9000c248:	f06f 0003 	mvn.w	r0, #3
}
9000c24c:	4770      	bx	lr
9000c24e:	bf00      	nop

9000c250 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000c250:	b330      	cbz	r0, 9000c2a0 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000c252:	b510      	push	{r4, lr}
9000c254:	b082      	sub	sp, #8
9000c256:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000c25a:	b1ab      	cbz	r3, 9000c288 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000c25c:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000c25e:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000c260:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000c262:	f001 f863 	bl	9000d32c <xQueueGiveFromISR>
9000c266:	2801      	cmp	r0, #1
9000c268:	d117      	bne.n	9000c29a <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000c26a:	9b01      	ldr	r3, [sp, #4]
9000c26c:	b193      	cbz	r3, 9000c294 <osSemaphoreRelease+0x44>
9000c26e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c276:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000c27a:	f3bf 8f4f 	dsb	sy
9000c27e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c282:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000c284:	b002      	add	sp, #8
9000c286:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000c288:	461a      	mov	r2, r3
9000c28a:	4619      	mov	r1, r3
9000c28c:	f000 fdba 	bl	9000ce04 <xQueueGenericSend>
9000c290:	2801      	cmp	r0, #1
9000c292:	d102      	bne.n	9000c29a <osSemaphoreRelease+0x4a>
  stat = osOK;
9000c294:	2000      	movs	r0, #0
}
9000c296:	b002      	add	sp, #8
9000c298:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000c29a:	f06f 0002 	mvn.w	r0, #2
9000c29e:	e7fa      	b.n	9000c296 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000c2a0:	f06f 0003 	mvn.w	r0, #3
}
9000c2a4:	4770      	bx	lr
9000c2a6:	bf00      	nop

9000c2a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c2aa:	b083      	sub	sp, #12
9000c2ac:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000c2b0:	b987      	cbnz	r7, 9000c2d4 <osMessageQueueNew+0x2c>
9000c2b2:	4605      	mov	r5, r0
9000c2b4:	b170      	cbz	r0, 9000c2d4 <osMessageQueueNew+0x2c>
9000c2b6:	b169      	cbz	r1, 9000c2d4 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000c2b8:	4614      	mov	r4, r2
9000c2ba:	b17a      	cbz	r2, 9000c2dc <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000c2bc:	6893      	ldr	r3, [r2, #8]
9000c2be:	b1cb      	cbz	r3, 9000c2f4 <osMessageQueueNew+0x4c>
9000c2c0:	68d2      	ldr	r2, [r2, #12]
9000c2c2:	2a4f      	cmp	r2, #79	; 0x4f
9000c2c4:	d906      	bls.n	9000c2d4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000c2c6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000c2c8:	b122      	cbz	r2, 9000c2d4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000c2ca:	fb01 f505 	mul.w	r5, r1, r5
9000c2ce:	6966      	ldr	r6, [r4, #20]
9000c2d0:	42ae      	cmp	r6, r5
9000c2d2:	d21f      	bcs.n	9000c314 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000c2d4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000c2d6:	4628      	mov	r0, r5
9000c2d8:	b003      	add	sp, #12
9000c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000c2dc:	f000 fca8 	bl	9000cc30 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000c2e0:	4605      	mov	r5, r0
9000c2e2:	2800      	cmp	r0, #0
9000c2e4:	d0f6      	beq.n	9000c2d4 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000c2e6:	4628      	mov	r0, r5
9000c2e8:	4621      	mov	r1, r4
9000c2ea:	f001 fc43 	bl	9000db74 <vQueueAddToRegistry>
}
9000c2ee:	4628      	mov	r0, r5
9000c2f0:	b003      	add	sp, #12
9000c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000c2f4:	68d3      	ldr	r3, [r2, #12]
9000c2f6:	2b00      	cmp	r3, #0
9000c2f8:	d1ec      	bne.n	9000c2d4 <osMessageQueueNew+0x2c>
9000c2fa:	6913      	ldr	r3, [r2, #16]
9000c2fc:	2b00      	cmp	r3, #0
9000c2fe:	d1e9      	bne.n	9000c2d4 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000c300:	6952      	ldr	r2, [r2, #20]
9000c302:	2a00      	cmp	r2, #0
9000c304:	d1e6      	bne.n	9000c2d4 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000c306:	f000 fc93 	bl	9000cc30 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000c30a:	4605      	mov	r5, r0
9000c30c:	2800      	cmp	r0, #0
9000c30e:	d0e1      	beq.n	9000c2d4 <osMessageQueueNew+0x2c>
        name = attr->name;
9000c310:	6824      	ldr	r4, [r4, #0]
9000c312:	e7e8      	b.n	9000c2e6 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000c314:	9700      	str	r7, [sp, #0]
9000c316:	f000 fc1f 	bl	9000cb58 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000c31a:	4605      	mov	r5, r0
9000c31c:	2800      	cmp	r0, #0
9000c31e:	d1f7      	bne.n	9000c310 <osMessageQueueNew+0x68>
9000c320:	e7d8      	b.n	9000c2d4 <osMessageQueueNew+0x2c>
9000c322:	bf00      	nop

9000c324 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000c324:	b530      	push	{r4, r5, lr}
9000c326:	461c      	mov	r4, r3
9000c328:	b083      	sub	sp, #12
9000c32a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000c32e:	b30b      	cbz	r3, 9000c374 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c330:	3c00      	subs	r4, #0
9000c332:	bf18      	it	ne
9000c334:	2401      	movne	r4, #1
9000c336:	2900      	cmp	r1, #0
9000c338:	bf08      	it	eq
9000c33a:	f044 0401 	orreq.w	r4, r4, #1
9000c33e:	bb7c      	cbnz	r4, 9000c3a0 <osMessageQueuePut+0x7c>
9000c340:	fab0 f480 	clz	r4, r0
9000c344:	0964      	lsrs	r4, r4, #5
9000c346:	b358      	cbz	r0, 9000c3a0 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000c348:	4623      	mov	r3, r4
9000c34a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c34c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000c34e:	f000 ff83 	bl	9000d258 <xQueueGenericSendFromISR>
9000c352:	2801      	cmp	r0, #1
9000c354:	d120      	bne.n	9000c398 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c356:	9b01      	ldr	r3, [sp, #4]
9000c358:	b1db      	cbz	r3, 9000c392 <osMessageQueuePut+0x6e>
9000c35a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c362:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000c366:	f3bf 8f4f 	dsb	sy
9000c36a:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c36e:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000c370:	b003      	add	sp, #12
9000c372:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000c374:	b1a0      	cbz	r0, 9000c3a0 <osMessageQueuePut+0x7c>
9000c376:	fab1 f381 	clz	r3, r1
9000c37a:	095b      	lsrs	r3, r3, #5
9000c37c:	b181      	cbz	r1, 9000c3a0 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000c37e:	4622      	mov	r2, r4
9000c380:	f000 fd40 	bl	9000ce04 <xQueueGenericSend>
9000c384:	2801      	cmp	r0, #1
9000c386:	d004      	beq.n	9000c392 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000c388:	b134      	cbz	r4, 9000c398 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000c38a:	f06f 0001 	mvn.w	r0, #1
}
9000c38e:	b003      	add	sp, #12
9000c390:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000c392:	2000      	movs	r0, #0
}
9000c394:	b003      	add	sp, #12
9000c396:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000c398:	f06f 0002 	mvn.w	r0, #2
}
9000c39c:	b003      	add	sp, #12
9000c39e:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000c3a0:	f06f 0003 	mvn.w	r0, #3
9000c3a4:	e7e4      	b.n	9000c370 <osMessageQueuePut+0x4c>
9000c3a6:	bf00      	nop

9000c3a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000c3a8:	b530      	push	{r4, r5, lr}
9000c3aa:	461c      	mov	r4, r3
9000c3ac:	b083      	sub	sp, #12
9000c3ae:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000c3b2:	b303      	cbz	r3, 9000c3f6 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c3b4:	3c00      	subs	r4, #0
9000c3b6:	bf18      	it	ne
9000c3b8:	2401      	movne	r4, #1
9000c3ba:	2900      	cmp	r1, #0
9000c3bc:	bf08      	it	eq
9000c3be:	f044 0401 	orreq.w	r4, r4, #1
9000c3c2:	bb5c      	cbnz	r4, 9000c41c <osMessageQueueGet+0x74>
9000c3c4:	fab0 f480 	clz	r4, r0
9000c3c8:	0964      	lsrs	r4, r4, #5
9000c3ca:	b338      	cbz	r0, 9000c41c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000c3cc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c3ce:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000c3d0:	f001 fb2a 	bl	9000da28 <xQueueReceiveFromISR>
9000c3d4:	2801      	cmp	r0, #1
9000c3d6:	d11d      	bne.n	9000c414 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c3d8:	9b01      	ldr	r3, [sp, #4]
9000c3da:	b1c3      	cbz	r3, 9000c40e <osMessageQueueGet+0x66>
9000c3dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c3e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000c3e8:	f3bf 8f4f 	dsb	sy
9000c3ec:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c3f0:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000c3f2:	b003      	add	sp, #12
9000c3f4:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000c3f6:	b188      	cbz	r0, 9000c41c <osMessageQueueGet+0x74>
9000c3f8:	b181      	cbz	r1, 9000c41c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000c3fa:	4622      	mov	r2, r4
9000c3fc:	f000 ffee 	bl	9000d3dc <xQueueReceive>
9000c400:	2801      	cmp	r0, #1
9000c402:	d004      	beq.n	9000c40e <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000c404:	b134      	cbz	r4, 9000c414 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000c406:	f06f 0001 	mvn.w	r0, #1
}
9000c40a:	b003      	add	sp, #12
9000c40c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000c40e:	2000      	movs	r0, #0
}
9000c410:	b003      	add	sp, #12
9000c412:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000c414:	f06f 0002 	mvn.w	r0, #2
}
9000c418:	b003      	add	sp, #12
9000c41a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000c41c:	f06f 0003 	mvn.w	r0, #3
9000c420:	e7e7      	b.n	9000c3f2 <osMessageQueueGet+0x4a>
9000c422:	bf00      	nop

9000c424 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000c424:	4b04      	ldr	r3, [pc, #16]	; (9000c438 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000c426:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000c428:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000c42a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000c42c:	4c03      	ldr	r4, [pc, #12]	; (9000c43c <vApplicationGetIdleTaskMemory+0x18>)
9000c42e:	600c      	str	r4, [r1, #0]
}
9000c430:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000c434:	6013      	str	r3, [r2, #0]
}
9000c436:	4770      	bx	lr
9000c438:	2400bfcc 	.word	0x2400bfcc
9000c43c:	2400bdcc 	.word	0x2400bdcc

9000c440 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000c440:	4b05      	ldr	r3, [pc, #20]	; (9000c458 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000c442:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000c444:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000c446:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000c44a:	4c04      	ldr	r4, [pc, #16]	; (9000c45c <vApplicationGetTimerTaskMemory+0x1c>)
9000c44c:	600c      	str	r4, [r1, #0]
}
9000c44e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000c452:	6013      	str	r3, [r2, #0]
}
9000c454:	4770      	bx	lr
9000c456:	bf00      	nop
9000c458:	2400c430 	.word	0x2400c430
9000c45c:	2400c030 	.word	0x2400c030

9000c460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c464:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000c466:	f002 f861 	bl	9000e52c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000c46a:	4a54      	ldr	r2, [pc, #336]	; (9000c5bc <pvPortMalloc+0x15c>)
9000c46c:	6816      	ldr	r6, [r2, #0]
9000c46e:	2e00      	cmp	r6, #0
9000c470:	d06f      	beq.n	9000c552 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000c472:	4b53      	ldr	r3, [pc, #332]	; (9000c5c0 <pvPortMalloc+0x160>)
9000c474:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000c476:	423d      	tst	r5, r7
9000c478:	d12e      	bne.n	9000c4d8 <pvPortMalloc+0x78>
9000c47a:	b36d      	cbz	r5, 9000c4d8 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000c47c:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000c480:	076d      	lsls	r5, r5, #29
9000c482:	d002      	beq.n	9000c48a <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000c484:	f024 0407 	bic.w	r4, r4, #7
9000c488:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000c48a:	b32c      	cbz	r4, 9000c4d8 <pvPortMalloc+0x78>
9000c48c:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000c5d8 <pvPortMalloc+0x178>
9000c490:	f8dc 5000 	ldr.w	r5, [ip]
9000c494:	42a5      	cmp	r5, r4
9000c496:	d31f      	bcc.n	9000c4d8 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000c498:	484a      	ldr	r0, [pc, #296]	; (9000c5c4 <pvPortMalloc+0x164>)
9000c49a:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000c49c:	e003      	b.n	9000c4a6 <pvPortMalloc+0x46>
9000c49e:	681a      	ldr	r2, [r3, #0]
9000c4a0:	b122      	cbz	r2, 9000c4ac <pvPortMalloc+0x4c>
9000c4a2:	4618      	mov	r0, r3
9000c4a4:	4613      	mov	r3, r2
9000c4a6:	6859      	ldr	r1, [r3, #4]
9000c4a8:	42a1      	cmp	r1, r4
9000c4aa:	d3f8      	bcc.n	9000c49e <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000c4ac:	42b3      	cmp	r3, r6
9000c4ae:	d013      	beq.n	9000c4d8 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000c4b0:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c4b2:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000c4b4:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c4b8:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000c4ba:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c4be:	d929      	bls.n	9000c514 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000c4c0:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000c4c2:	0748      	lsls	r0, r1, #29
9000c4c4:	d00f      	beq.n	9000c4e6 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c4ca:	f383 8811 	msr	BASEPRI, r3
9000c4ce:	f3bf 8f6f 	isb	sy
9000c4d2:	f3bf 8f4f 	dsb	sy
9000c4d6:	e7fe      	b.n	9000c4d6 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000c4d8:	f04f 0800 	mov.w	r8, #0
9000c4dc:	f002 f82e 	bl	9000e53c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000c4e0:	4640      	mov	r0, r8
9000c4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000c4e6:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c4e8:	4a36      	ldr	r2, [pc, #216]	; (9000c5c4 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000c4ea:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c4ec:	4614      	mov	r4, r2
9000c4ee:	6812      	ldr	r2, [r2, #0]
9000c4f0:	4291      	cmp	r1, r2
9000c4f2:	d8fb      	bhi.n	9000c4ec <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000c4f4:	6860      	ldr	r0, [r4, #4]
9000c4f6:	eb04 0e00 	add.w	lr, r4, r0
9000c4fa:	4571      	cmp	r1, lr
9000c4fc:	d04a      	beq.n	9000c594 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c4fe:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c502:	eb01 000e 	add.w	r0, r1, lr
9000c506:	4282      	cmp	r2, r0
9000c508:	d050      	beq.n	9000c5ac <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000c50a:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c50c:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000c50e:	bf18      	it	ne
9000c510:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c512:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c514:	4a2c      	ldr	r2, [pc, #176]	; (9000c5c8 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c516:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000c518:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c51a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c51c:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c520:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000c522:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000c526:	bf38      	it	cc
9000c528:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000c52a:	4a28      	ldr	r2, [pc, #160]	; (9000c5cc <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000c52c:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000c530:	6813      	ldr	r3, [r2, #0]
9000c532:	3301      	adds	r3, #1
9000c534:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000c536:	f002 f801 	bl	9000e53c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000c53a:	f018 0f07 	tst.w	r8, #7
9000c53e:	d0cf      	beq.n	9000c4e0 <pvPortMalloc+0x80>
9000c540:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c544:	f383 8811 	msr	BASEPRI, r3
9000c548:	f3bf 8f6f 	isb	sy
9000c54c:	f3bf 8f4f 	dsb	sy
9000c550:	e7fe      	b.n	9000c550 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000c552:	4b1f      	ldr	r3, [pc, #124]	; (9000c5d0 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000c554:	075e      	lsls	r6, r3, #29
9000c556:	d117      	bne.n	9000c588 <pvPortMalloc+0x128>
9000c558:	4e1e      	ldr	r6, [pc, #120]	; (9000c5d4 <pvPortMalloc+0x174>)
9000c55a:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000c55c:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000c55e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000c562:	4818      	ldr	r0, [pc, #96]	; (9000c5c4 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000c564:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000c568:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000c56a:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000c56c:	4a16      	ldr	r2, [pc, #88]	; (9000c5c8 <pvPortMalloc+0x168>)
9000c56e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000c570:	4a19      	ldr	r2, [pc, #100]	; (9000c5d8 <pvPortMalloc+0x178>)
9000c572:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000c574:	4a12      	ldr	r2, [pc, #72]	; (9000c5c0 <pvPortMalloc+0x160>)
9000c576:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000c578:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000c57a:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000c57e:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000c582:	e9c1 6300 	strd	r6, r3, [r1]
}
9000c586:	e776      	b.n	9000c476 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000c588:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000c58a:	4e12      	ldr	r6, [pc, #72]	; (9000c5d4 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000c58c:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000c590:	460b      	mov	r3, r1
9000c592:	e7e3      	b.n	9000c55c <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c594:	6849      	ldr	r1, [r1, #4]
9000c596:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c59a:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c59e:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c5a2:	428a      	cmp	r2, r1
9000c5a4:	d001      	beq.n	9000c5aa <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c5a6:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000c5a8:	e7b3      	b.n	9000c512 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c5aa:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000c5ac:	42b2      	cmp	r2, r6
9000c5ae:	d0ac      	beq.n	9000c50a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c5b0:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c5b2:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c5b4:	4470      	add	r0, lr
9000c5b6:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c5b8:	e7a7      	b.n	9000c50a <pvPortMalloc+0xaa>
9000c5ba:	bf00      	nop
9000c5bc:	2400c490 	.word	0x2400c490
9000c5c0:	24024b34 	.word	0x24024b34
9000c5c4:	24024b48 	.word	0x24024b48
9000c5c8:	24024b3c 	.word	0x24024b3c
9000c5cc:	24024b40 	.word	0x24024b40
9000c5d0:	2400c494 	.word	0x2400c494
9000c5d4:	24024b34 	.word	0x24024b34
9000c5d8:	24024b38 	.word	0x24024b38

9000c5dc <vPortFree>:
	if( pv != NULL )
9000c5dc:	b1d0      	cbz	r0, 9000c614 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000c5de:	4a2c      	ldr	r2, [pc, #176]	; (9000c690 <vPortFree+0xb4>)
9000c5e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000c5e4:	6812      	ldr	r2, [r2, #0]
9000c5e6:	4213      	tst	r3, r2
9000c5e8:	d00b      	beq.n	9000c602 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000c5ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000c5ee:	b191      	cbz	r1, 9000c616 <vPortFree+0x3a>
9000c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c5f4:	f383 8811 	msr	BASEPRI, r3
9000c5f8:	f3bf 8f6f 	isb	sy
9000c5fc:	f3bf 8f4f 	dsb	sy
9000c600:	e7fe      	b.n	9000c600 <vPortFree+0x24>
9000c602:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c606:	f383 8811 	msr	BASEPRI, r3
9000c60a:	f3bf 8f6f 	isb	sy
9000c60e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000c612:	e7fe      	b.n	9000c612 <vPortFree+0x36>
9000c614:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c616:	ea23 0302 	bic.w	r3, r3, r2
{
9000c61a:	b530      	push	{r4, r5, lr}
9000c61c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c61e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000c622:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c626:	4d1b      	ldr	r5, [pc, #108]	; (9000c694 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c628:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000c62a:	f001 ff7f 	bl	9000e52c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c62e:	9801      	ldr	r0, [sp, #4]
9000c630:	682a      	ldr	r2, [r5, #0]
9000c632:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c636:	4b18      	ldr	r3, [pc, #96]	; (9000c698 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c638:	440a      	add	r2, r1
9000c63a:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c63c:	461a      	mov	r2, r3
9000c63e:	681b      	ldr	r3, [r3, #0]
9000c640:	429c      	cmp	r4, r3
9000c642:	d8fb      	bhi.n	9000c63c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000c644:	6850      	ldr	r0, [r2, #4]
9000c646:	eb02 0c00 	add.w	ip, r2, r0
9000c64a:	4564      	cmp	r4, ip
9000c64c:	d00f      	beq.n	9000c66e <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c64e:	1860      	adds	r0, r4, r1
9000c650:	4283      	cmp	r3, r0
9000c652:	d014      	beq.n	9000c67e <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000c654:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c656:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000c658:	bf18      	it	ne
9000c65a:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000c65c:	4a0f      	ldr	r2, [pc, #60]	; (9000c69c <vPortFree+0xc0>)
9000c65e:	6813      	ldr	r3, [r2, #0]
9000c660:	3301      	adds	r3, #1
9000c662:	6013      	str	r3, [r2, #0]
}
9000c664:	b003      	add	sp, #12
9000c666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000c66a:	f001 bf67 	b.w	9000e53c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c66e:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c670:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c672:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c674:	4283      	cmp	r3, r0
9000c676:	d001      	beq.n	9000c67c <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c678:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000c67a:	e7ef      	b.n	9000c65c <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c67c:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000c67e:	4808      	ldr	r0, [pc, #32]	; (9000c6a0 <vPortFree+0xc4>)
9000c680:	6800      	ldr	r0, [r0, #0]
9000c682:	4283      	cmp	r3, r0
9000c684:	d0e6      	beq.n	9000c654 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c686:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c68a:	4401      	add	r1, r0
9000c68c:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c68e:	e7e1      	b.n	9000c654 <vPortFree+0x78>
9000c690:	24024b34 	.word	0x24024b34
9000c694:	24024b38 	.word	0x24024b38
9000c698:	24024b48 	.word	0x24024b48
9000c69c:	24024b44 	.word	0x24024b44
9000c6a0:	2400c490 	.word	0x2400c490

9000c6a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c6a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000c6a8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000c6ac:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000c6ae:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000c6b0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c6b2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c6b4:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000c6b8:	4770      	bx	lr
9000c6ba:	bf00      	nop

9000c6bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000c6bc:	2300      	movs	r3, #0
9000c6be:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000c6c0:	4770      	bx	lr
9000c6c2:	bf00      	nop

9000c6c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000c6c4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000c6c6:	6802      	ldr	r2, [r0, #0]
{
9000c6c8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000c6ca:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000c6cc:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000c6ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000c6d0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000c6d2:	689c      	ldr	r4, [r3, #8]
9000c6d4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000c6d6:	6099      	str	r1, [r3, #8]
}
9000c6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000c6dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000c6de:	6002      	str	r2, [r0, #0]
}
9000c6e0:	4770      	bx	lr
9000c6e2:	bf00      	nop

9000c6e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000c6e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000c6e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000c6e8:	1c6b      	adds	r3, r5, #1
9000c6ea:	d010      	beq.n	9000c70e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000c6ec:	f100 0308 	add.w	r3, r0, #8
9000c6f0:	461c      	mov	r4, r3
9000c6f2:	685b      	ldr	r3, [r3, #4]
9000c6f4:	681a      	ldr	r2, [r3, #0]
9000c6f6:	42aa      	cmp	r2, r5
9000c6f8:	d9fa      	bls.n	9000c6f0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000c6fa:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000c6fc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000c6fe:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000c700:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000c702:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000c704:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000c706:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000c708:	6002      	str	r2, [r0, #0]
}
9000c70a:	bc30      	pop	{r4, r5}
9000c70c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000c70e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000c710:	6863      	ldr	r3, [r4, #4]
9000c712:	e7f2      	b.n	9000c6fa <vListInsert+0x16>

9000c714 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000c714:	6903      	ldr	r3, [r0, #16]
{
9000c716:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000c718:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000c71a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000c71e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000c720:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000c724:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000c726:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000c728:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000c72c:	bf08      	it	eq
9000c72e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000c730:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000c732:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000c734:	3a01      	subs	r2, #1
9000c736:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000c738:	6818      	ldr	r0, [r3, #0]
}
9000c73a:	4770      	bx	lr

9000c73c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000c73c:	4808      	ldr	r0, [pc, #32]	; (9000c760 <prvPortStartFirstTask+0x24>)
9000c73e:	6800      	ldr	r0, [r0, #0]
9000c740:	6800      	ldr	r0, [r0, #0]
9000c742:	f380 8808 	msr	MSP, r0
9000c746:	f04f 0000 	mov.w	r0, #0
9000c74a:	f380 8814 	msr	CONTROL, r0
9000c74e:	b662      	cpsie	i
9000c750:	b661      	cpsie	f
9000c752:	f3bf 8f4f 	dsb	sy
9000c756:	f3bf 8f6f 	isb	sy
9000c75a:	df00      	svc	0
9000c75c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000c75e:	0000      	.short	0x0000
9000c760:	e000ed08 	.word	0xe000ed08

9000c764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000c764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000c774 <vPortEnableVFP+0x10>
9000c768:	6801      	ldr	r1, [r0, #0]
9000c76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000c76e:	6001      	str	r1, [r0, #0]
9000c770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000c772:	0000      	.short	0x0000
9000c774:	e000ed88 	.word	0xe000ed88

9000c778 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000c778:	4b0e      	ldr	r3, [pc, #56]	; (9000c7b4 <prvTaskExitError+0x3c>)
{
9000c77a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000c77c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000c77e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000c780:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000c782:	3301      	adds	r3, #1
9000c784:	d008      	beq.n	9000c798 <prvTaskExitError+0x20>
9000c786:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c78a:	f383 8811 	msr	BASEPRI, r3
9000c78e:	f3bf 8f6f 	isb	sy
9000c792:	f3bf 8f4f 	dsb	sy
9000c796:	e7fe      	b.n	9000c796 <prvTaskExitError+0x1e>
9000c798:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c79c:	f383 8811 	msr	BASEPRI, r3
9000c7a0:	f3bf 8f6f 	isb	sy
9000c7a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000c7a8:	9b01      	ldr	r3, [sp, #4]
9000c7aa:	2b00      	cmp	r3, #0
9000c7ac:	d0fc      	beq.n	9000c7a8 <prvTaskExitError+0x30>
}
9000c7ae:	b002      	add	sp, #8
9000c7b0:	4770      	bx	lr
9000c7b2:	bf00      	nop
9000c7b4:	24000064 	.word	0x24000064

9000c7b8 <pxPortInitialiseStack>:
{
9000c7b8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000c7ba:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000c7be:	4809      	ldr	r0, [pc, #36]	; (9000c7e4 <pxPortInitialiseStack+0x2c>)
{
9000c7c0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000c7c2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000c7c6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000c7ca:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000c7ce:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000c7d2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000c7d6:	f06f 0102 	mvn.w	r1, #2
}
9000c7da:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000c7de:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000c7e2:	4770      	bx	lr
9000c7e4:	9000c779 	.word	0x9000c779
	...

9000c7f0 <SVC_Handler>:
	__asm volatile (
9000c7f0:	4b07      	ldr	r3, [pc, #28]	; (9000c810 <pxCurrentTCBConst2>)
9000c7f2:	6819      	ldr	r1, [r3, #0]
9000c7f4:	6808      	ldr	r0, [r1, #0]
9000c7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c7fa:	f380 8809 	msr	PSP, r0
9000c7fe:	f3bf 8f6f 	isb	sy
9000c802:	f04f 0000 	mov.w	r0, #0
9000c806:	f380 8811 	msr	BASEPRI, r0
9000c80a:	4770      	bx	lr
9000c80c:	f3af 8000 	nop.w

9000c810 <pxCurrentTCBConst2>:
9000c810:	24024b98 	.word	0x24024b98

9000c814 <vPortEnterCritical>:
9000c814:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c818:	f383 8811 	msr	BASEPRI, r3
9000c81c:	f3bf 8f6f 	isb	sy
9000c820:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000c824:	4a0b      	ldr	r2, [pc, #44]	; (9000c854 <vPortEnterCritical+0x40>)
9000c826:	6813      	ldr	r3, [r2, #0]
9000c828:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000c82a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000c82c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000c82e:	d000      	beq.n	9000c832 <vPortEnterCritical+0x1e>
}
9000c830:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000c832:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c836:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000c83a:	b2db      	uxtb	r3, r3
9000c83c:	2b00      	cmp	r3, #0
9000c83e:	d0f7      	beq.n	9000c830 <vPortEnterCritical+0x1c>
9000c840:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c844:	f383 8811 	msr	BASEPRI, r3
9000c848:	f3bf 8f6f 	isb	sy
9000c84c:	f3bf 8f4f 	dsb	sy
9000c850:	e7fe      	b.n	9000c850 <vPortEnterCritical+0x3c>
9000c852:	bf00      	nop
9000c854:	24000064 	.word	0x24000064

9000c858 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000c858:	4a08      	ldr	r2, [pc, #32]	; (9000c87c <vPortExitCritical+0x24>)
9000c85a:	6813      	ldr	r3, [r2, #0]
9000c85c:	b943      	cbnz	r3, 9000c870 <vPortExitCritical+0x18>
9000c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c862:	f383 8811 	msr	BASEPRI, r3
9000c866:	f3bf 8f6f 	isb	sy
9000c86a:	f3bf 8f4f 	dsb	sy
9000c86e:	e7fe      	b.n	9000c86e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000c870:	3b01      	subs	r3, #1
9000c872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000c874:	b90b      	cbnz	r3, 9000c87a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000c876:	f383 8811 	msr	BASEPRI, r3
}
9000c87a:	4770      	bx	lr
9000c87c:	24000064 	.word	0x24000064

9000c880 <PendSV_Handler>:
	__asm volatile
9000c880:	f3ef 8009 	mrs	r0, PSP
9000c884:	f3bf 8f6f 	isb	sy
9000c888:	4b15      	ldr	r3, [pc, #84]	; (9000c8e0 <pxCurrentTCBConst>)
9000c88a:	681a      	ldr	r2, [r3, #0]
9000c88c:	f01e 0f10 	tst.w	lr, #16
9000c890:	bf08      	it	eq
9000c892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000c896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c89a:	6010      	str	r0, [r2, #0]
9000c89c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000c8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
9000c8a4:	f380 8811 	msr	BASEPRI, r0
9000c8a8:	f3bf 8f4f 	dsb	sy
9000c8ac:	f3bf 8f6f 	isb	sy
9000c8b0:	f001 fe80 	bl	9000e5b4 <vTaskSwitchContext>
9000c8b4:	f04f 0000 	mov.w	r0, #0
9000c8b8:	f380 8811 	msr	BASEPRI, r0
9000c8bc:	bc09      	pop	{r0, r3}
9000c8be:	6819      	ldr	r1, [r3, #0]
9000c8c0:	6808      	ldr	r0, [r1, #0]
9000c8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c8c6:	f01e 0f10 	tst.w	lr, #16
9000c8ca:	bf08      	it	eq
9000c8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000c8d0:	f380 8809 	msr	PSP, r0
9000c8d4:	f3bf 8f6f 	isb	sy
9000c8d8:	4770      	bx	lr
9000c8da:	bf00      	nop
9000c8dc:	f3af 8000 	nop.w

9000c8e0 <pxCurrentTCBConst>:
9000c8e0:	24024b98 	.word	0x24024b98

9000c8e4 <xPortSysTickHandler>:
{
9000c8e4:	b508      	push	{r3, lr}
	__asm volatile
9000c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c8ea:	f383 8811 	msr	BASEPRI, r3
9000c8ee:	f3bf 8f6f 	isb	sy
9000c8f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000c8f6:	f001 fe37 	bl	9000e568 <xTaskIncrementTick>
9000c8fa:	b128      	cbz	r0, 9000c908 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000c8fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c904:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000c908:	2300      	movs	r3, #0
9000c90a:	f383 8811 	msr	BASEPRI, r3
}
9000c90e:	bd08      	pop	{r3, pc}

9000c910 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000c910:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000c914:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c916:	4806      	ldr	r0, [pc, #24]	; (9000c930 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000c918:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c91a:	4906      	ldr	r1, [pc, #24]	; (9000c934 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000c91c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c91e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000c920:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c922:	fba1 1303 	umull	r1, r3, r1, r3
9000c926:	099b      	lsrs	r3, r3, #6
9000c928:	3b01      	subs	r3, #1
9000c92a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000c92c:	6110      	str	r0, [r2, #16]
}
9000c92e:	4770      	bx	lr
9000c930:	24000054 	.word	0x24000054
9000c934:	10624dd3 	.word	0x10624dd3

9000c938 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000c938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c93c:	4a48      	ldr	r2, [pc, #288]	; (9000ca60 <xPortStartScheduler+0x128>)
9000c93e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000c942:	4291      	cmp	r1, r2
9000c944:	d041      	beq.n	9000c9ca <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000c946:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000c94a:	4b46      	ldr	r3, [pc, #280]	; (9000ca64 <xPortStartScheduler+0x12c>)
9000c94c:	429a      	cmp	r2, r3
9000c94e:	d033      	beq.n	9000c9b8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c950:	4b45      	ldr	r3, [pc, #276]	; (9000ca68 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000c952:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c954:	4945      	ldr	r1, [pc, #276]	; (9000ca6c <xPortStartScheduler+0x134>)
{
9000c956:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c958:	781a      	ldrb	r2, [r3, #0]
{
9000c95a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c95c:	4c44      	ldr	r4, [pc, #272]	; (9000ca70 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c95e:	b2d2      	uxtb	r2, r2
9000c960:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c962:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000c964:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000c966:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c968:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000c96a:	b2db      	uxtb	r3, r3
9000c96c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c970:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c974:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c978:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c97c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c97e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c980:	d511      	bpl.n	9000c9a6 <xPortStartScheduler+0x6e>
9000c982:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000c984:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000c988:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c98a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000c98c:	005b      	lsls	r3, r3, #1
9000c98e:	b2db      	uxtb	r3, r3
9000c990:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c994:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000c998:	0609      	lsls	r1, r1, #24
9000c99a:	d4f3      	bmi.n	9000c984 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000c99c:	2803      	cmp	r0, #3
9000c99e:	6020      	str	r0, [r4, #0]
9000c9a0:	f88d 3007 	strb.w	r3, [sp, #7]
9000c9a4:	d01a      	beq.n	9000c9dc <xPortStartScheduler+0xa4>
	__asm volatile
9000c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c9aa:	f383 8811 	msr	BASEPRI, r3
9000c9ae:	f3bf 8f6f 	isb	sy
9000c9b2:	f3bf 8f4f 	dsb	sy
9000c9b6:	e7fe      	b.n	9000c9b6 <xPortStartScheduler+0x7e>
9000c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c9bc:	f383 8811 	msr	BASEPRI, r3
9000c9c0:	f3bf 8f6f 	isb	sy
9000c9c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000c9c8:	e7fe      	b.n	9000c9c8 <xPortStartScheduler+0x90>
9000c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c9ce:	f383 8811 	msr	BASEPRI, r3
9000c9d2:	f3bf 8f6f 	isb	sy
9000c9d6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000c9da:	e7fe      	b.n	9000c9da <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c9dc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000c9de:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000c9e2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c9e6:	4a20      	ldr	r2, [pc, #128]	; (9000ca68 <xPortStartScheduler+0x130>)
9000c9e8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000c9ea:	4e22      	ldr	r6, [pc, #136]	; (9000ca74 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000c9ec:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000c9ee:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c9f0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000c9f2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000c9f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000c9fa:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000c9fe:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000ca02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000ca06:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000ca0a:	f7ff ff81 	bl	9000c910 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000ca0e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000ca10:	f7ff fea8 	bl	9000c764 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000ca14:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000ca18:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000ca1c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000ca20:	f7ff fe8c 	bl	9000c73c <prvPortStartFirstTask>
	vTaskSwitchContext();
9000ca24:	f001 fdc6 	bl	9000e5b4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000ca28:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000ca2a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000ca2c:	3301      	adds	r3, #1
9000ca2e:	d008      	beq.n	9000ca42 <xPortStartScheduler+0x10a>
9000ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ca34:	f383 8811 	msr	BASEPRI, r3
9000ca38:	f3bf 8f6f 	isb	sy
9000ca3c:	f3bf 8f4f 	dsb	sy
9000ca40:	e7fe      	b.n	9000ca40 <xPortStartScheduler+0x108>
9000ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ca46:	f383 8811 	msr	BASEPRI, r3
9000ca4a:	f3bf 8f6f 	isb	sy
9000ca4e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000ca52:	9b03      	ldr	r3, [sp, #12]
9000ca54:	2b00      	cmp	r3, #0
9000ca56:	d0fc      	beq.n	9000ca52 <xPortStartScheduler+0x11a>
}
9000ca58:	2000      	movs	r0, #0
9000ca5a:	b004      	add	sp, #16
9000ca5c:	bd70      	pop	{r4, r5, r6, pc}
9000ca5e:	bf00      	nop
9000ca60:	410fc271 	.word	0x410fc271
9000ca64:	410fc270 	.word	0x410fc270
9000ca68:	e000e400 	.word	0xe000e400
9000ca6c:	24024b50 	.word	0x24024b50
9000ca70:	24024b54 	.word	0x24024b54
9000ca74:	24000064 	.word	0x24000064

9000ca78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000ca78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000ca7c:	2b0f      	cmp	r3, #15
9000ca7e:	d90e      	bls.n	9000ca9e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000ca80:	4911      	ldr	r1, [pc, #68]	; (9000cac8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000ca82:	4a12      	ldr	r2, [pc, #72]	; (9000cacc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000ca84:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000ca86:	7812      	ldrb	r2, [r2, #0]
9000ca88:	429a      	cmp	r2, r3
9000ca8a:	d908      	bls.n	9000ca9e <vPortValidateInterruptPriority+0x26>
9000ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ca90:	f383 8811 	msr	BASEPRI, r3
9000ca94:	f3bf 8f6f 	isb	sy
9000ca98:	f3bf 8f4f 	dsb	sy
9000ca9c:	e7fe      	b.n	9000ca9c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000ca9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000caa2:	4a0b      	ldr	r2, [pc, #44]	; (9000cad0 <vPortValidateInterruptPriority+0x58>)
9000caa4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000caa8:	6812      	ldr	r2, [r2, #0]
9000caaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000caae:	4293      	cmp	r3, r2
9000cab0:	d908      	bls.n	9000cac4 <vPortValidateInterruptPriority+0x4c>
9000cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cab6:	f383 8811 	msr	BASEPRI, r3
9000caba:	f3bf 8f6f 	isb	sy
9000cabe:	f3bf 8f4f 	dsb	sy
9000cac2:	e7fe      	b.n	9000cac2 <vPortValidateInterruptPriority+0x4a>
	}
9000cac4:	4770      	bx	lr
9000cac6:	bf00      	nop
9000cac8:	e000e3f0 	.word	0xe000e3f0
9000cacc:	24024b50 	.word	0x24024b50
9000cad0:	24024b54 	.word	0x24024b54

9000cad4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000cad4:	b570      	push	{r4, r5, r6, lr}
9000cad6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000cad8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000cada:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000cadc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000cade:	b92a      	cbnz	r2, 9000caec <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000cae0:	6805      	ldr	r5, [r0, #0]
9000cae2:	b365      	cbz	r5, 9000cb3e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cae4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000cae6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cae8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000caea:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000caec:	b97d      	cbnz	r5, 9000cb0e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000caee:	6840      	ldr	r0, [r0, #4]
9000caf0:	f015 fab1 	bl	90022056 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000caf4:	6863      	ldr	r3, [r4, #4]
9000caf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000caf8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000cafa:	68a2      	ldr	r2, [r4, #8]
9000cafc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000cafe:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000cb00:	d319      	bcc.n	9000cb36 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000cb02:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb04:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000cb06:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000cb08:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb0a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000cb0c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000cb0e:	68c0      	ldr	r0, [r0, #12]
9000cb10:	f015 faa1 	bl	90022056 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000cb14:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000cb16:	68e3      	ldr	r3, [r4, #12]
9000cb18:	4251      	negs	r1, r2
9000cb1a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000cb1c:	6822      	ldr	r2, [r4, #0]
9000cb1e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000cb20:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000cb22:	d202      	bcs.n	9000cb2a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000cb24:	68a3      	ldr	r3, [r4, #8]
9000cb26:	440b      	add	r3, r1
9000cb28:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000cb2a:	2d02      	cmp	r5, #2
9000cb2c:	d00d      	beq.n	9000cb4a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb2e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000cb30:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb32:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000cb34:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb36:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000cb38:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb3a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000cb3c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000cb3e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000cb40:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000cb42:	f001 ff1f 	bl	9000e984 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000cb46:	60a5      	str	r5, [r4, #8]
9000cb48:	e7ce      	b.n	9000cae8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000cb4a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000cb4c:	f04f 0000 	mov.w	r0, #0
9000cb50:	bf38      	it	cc
9000cb52:	2601      	movcc	r6, #1
9000cb54:	e7c8      	b.n	9000cae8 <prvCopyDataToQueue+0x14>
9000cb56:	bf00      	nop

9000cb58 <xQueueGenericCreateStatic>:
	{
9000cb58:	b530      	push	{r4, r5, lr}
9000cb5a:	b083      	sub	sp, #12
9000cb5c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000cb60:	b940      	cbnz	r0, 9000cb74 <xQueueGenericCreateStatic+0x1c>
9000cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cb66:	f383 8811 	msr	BASEPRI, r3
9000cb6a:	f3bf 8f6f 	isb	sy
9000cb6e:	f3bf 8f4f 	dsb	sy
9000cb72:	e7fe      	b.n	9000cb72 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000cb74:	461d      	mov	r5, r3
9000cb76:	b153      	cbz	r3, 9000cb8e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000cb78:	b30a      	cbz	r2, 9000cbbe <xQueueGenericCreateStatic+0x66>
9000cb7a:	b989      	cbnz	r1, 9000cba0 <xQueueGenericCreateStatic+0x48>
9000cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cb80:	f383 8811 	msr	BASEPRI, r3
9000cb84:	f3bf 8f6f 	isb	sy
9000cb88:	f3bf 8f4f 	dsb	sy
9000cb8c:	e7fe      	b.n	9000cb8c <xQueueGenericCreateStatic+0x34>
9000cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cb92:	f383 8811 	msr	BASEPRI, r3
9000cb96:	f3bf 8f6f 	isb	sy
9000cb9a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000cb9e:	e7fe      	b.n	9000cb9e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000cba0:	b16a      	cbz	r2, 9000cbbe <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000cba2:	2350      	movs	r3, #80	; 0x50
9000cba4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000cba6:	9b01      	ldr	r3, [sp, #4]
9000cba8:	2b50      	cmp	r3, #80	; 0x50
9000cbaa:	d013      	beq.n	9000cbd4 <xQueueGenericCreateStatic+0x7c>
9000cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cbb0:	f383 8811 	msr	BASEPRI, r3
9000cbb4:	f3bf 8f6f 	isb	sy
9000cbb8:	f3bf 8f4f 	dsb	sy
9000cbbc:	e7fe      	b.n	9000cbbc <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000cbbe:	2900      	cmp	r1, #0
9000cbc0:	d0ef      	beq.n	9000cba2 <xQueueGenericCreateStatic+0x4a>
9000cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cbc6:	f383 8811 	msr	BASEPRI, r3
9000cbca:	f3bf 8f6f 	isb	sy
9000cbce:	f3bf 8f4f 	dsb	sy
9000cbd2:	e7fe      	b.n	9000cbd2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000cbd4:	2900      	cmp	r1, #0
9000cbd6:	bf08      	it	eq
9000cbd8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000cbda:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000cbdc:	6429      	str	r1, [r5, #64]	; 0x40
9000cbde:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000cbe0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000cbe2:	2201      	movs	r2, #1
9000cbe4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000cbe8:	f7ff fe14 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cbec:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cbee:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000cbf0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cbf2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cbf4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000cbf8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cbfc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cbfe:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc00:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc02:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000cc04:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cc06:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc0a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000cc0c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000cc10:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cc14:	f7ff fd46 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000cc18:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000cc1c:	f7ff fd42 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000cc20:	f7ff fe1a 	bl	9000c858 <vPortExitCritical>
	}
9000cc24:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000cc26:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000cc2a:	b003      	add	sp, #12
9000cc2c:	bd30      	pop	{r4, r5, pc}
9000cc2e:	bf00      	nop

9000cc30 <xQueueGenericCreate>:
	{
9000cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000cc32:	b940      	cbnz	r0, 9000cc46 <xQueueGenericCreate+0x16>
9000cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cc38:	f383 8811 	msr	BASEPRI, r3
9000cc3c:	f3bf 8f6f 	isb	sy
9000cc40:	f3bf 8f4f 	dsb	sy
9000cc44:	e7fe      	b.n	9000cc44 <xQueueGenericCreate+0x14>
9000cc46:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000cc48:	fb01 f000 	mul.w	r0, r1, r0
9000cc4c:	460e      	mov	r6, r1
9000cc4e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000cc50:	3050      	adds	r0, #80	; 0x50
9000cc52:	f7ff fc05 	bl	9000c460 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000cc56:	4604      	mov	r4, r0
9000cc58:	b340      	cbz	r0, 9000ccac <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000cc5a:	2300      	movs	r3, #0
9000cc5c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000cc60:	b336      	cbz	r6, 9000ccb0 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc62:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000cc66:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000cc68:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000cc6c:	f7ff fdd2 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc70:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cc72:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000cc76:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc78:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000cc7c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc80:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc82:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc84:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc86:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cc88:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000cc8a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cc8c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cc8e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000cc90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000cc94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cc98:	f7ff fd04 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000cc9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000cca0:	f7ff fd00 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000cca4:	f7ff fdd8 	bl	9000c858 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000cca8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000ccac:	4620      	mov	r0, r4
9000ccae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000ccb0:	4603      	mov	r3, r0
9000ccb2:	e7d8      	b.n	9000cc66 <xQueueGenericCreate+0x36>

9000ccb4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000ccb4:	b940      	cbnz	r0, 9000ccc8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ccba:	f383 8811 	msr	BASEPRI, r3
9000ccbe:	f3bf 8f6f 	isb	sy
9000ccc2:	f3bf 8f4f 	dsb	sy
9000ccc6:	e7fe      	b.n	9000ccc6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000ccc8:	4288      	cmp	r0, r1
9000ccca:	d208      	bcs.n	9000ccde <xQueueCreateCountingSemaphoreStatic+0x2a>
9000cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ccd0:	f383 8811 	msr	BASEPRI, r3
9000ccd4:	f3bf 8f6f 	isb	sy
9000ccd8:	f3bf 8f4f 	dsb	sy
9000ccdc:	e7fe      	b.n	9000ccdc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000ccde:	b530      	push	{r4, r5, lr}
9000cce0:	4615      	mov	r5, r2
9000cce2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000cce4:	2a00      	cmp	r2, #0
9000cce6:	d03d      	beq.n	9000cd64 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000cce8:	2350      	movs	r3, #80	; 0x50
9000ccea:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000ccec:	9b03      	ldr	r3, [sp, #12]
9000ccee:	2b50      	cmp	r3, #80	; 0x50
9000ccf0:	d008      	beq.n	9000cd04 <xQueueCreateCountingSemaphoreStatic+0x50>
9000ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ccf6:	f383 8811 	msr	BASEPRI, r3
9000ccfa:	f3bf 8f6f 	isb	sy
9000ccfe:	f3bf 8f4f 	dsb	sy
9000cd02:	e7fe      	b.n	9000cd02 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000cd04:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000cd06:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000cd08:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000cd0a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000cd0c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000cd10:	6414      	str	r4, [r2, #64]	; 0x40
9000cd12:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000cd14:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000cd16:	f7ff fd7d 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd1a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cd1c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000cd1e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd20:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000cd24:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd28:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd2c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd2e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd30:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000cd32:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cd34:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd38:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000cd3c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000cd40:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cd44:	f7ff fcae 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000cd48:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000cd4c:	f7ff fcaa 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000cd50:	f7ff fd82 	bl	9000c858 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000cd54:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000cd56:	9901      	ldr	r1, [sp, #4]
	}
9000cd58:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000cd5a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000cd5e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000cd60:	b005      	add	sp, #20
9000cd62:	bd30      	pop	{r4, r5, pc}
9000cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cd68:	f383 8811 	msr	BASEPRI, r3
9000cd6c:	f3bf 8f6f 	isb	sy
9000cd70:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000cd74:	e7fe      	b.n	9000cd74 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000cd76:	bf00      	nop

9000cd78 <xQueueCreateCountingSemaphore>:
	{
9000cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000cd7a:	b940      	cbnz	r0, 9000cd8e <xQueueCreateCountingSemaphore+0x16>
9000cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cd80:	f383 8811 	msr	BASEPRI, r3
9000cd84:	f3bf 8f6f 	isb	sy
9000cd88:	f3bf 8f4f 	dsb	sy
9000cd8c:	e7fe      	b.n	9000cd8c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000cd8e:	4288      	cmp	r0, r1
9000cd90:	4604      	mov	r4, r0
9000cd92:	460e      	mov	r6, r1
9000cd94:	d208      	bcs.n	9000cda8 <xQueueCreateCountingSemaphore+0x30>
9000cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cd9a:	f383 8811 	msr	BASEPRI, r3
9000cd9e:	f3bf 8f6f 	isb	sy
9000cda2:	f3bf 8f4f 	dsb	sy
9000cda6:	e7fe      	b.n	9000cda6 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000cda8:	2050      	movs	r0, #80	; 0x50
9000cdaa:	f7ff fb59 	bl	9000c460 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000cdae:	4605      	mov	r5, r0
9000cdb0:	b330      	cbz	r0, 9000ce00 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000cdb2:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000cdb4:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000cdb6:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000cdb8:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000cdbc:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000cdbe:	f7ff fd29 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdc2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cdc4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cdc6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000cdca:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdcc:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000cdd0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdd4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdd6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdd8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdda:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000cddc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cdde:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000cde0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000cde4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cde8:	f7ff fc5c 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000cdec:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000cdf0:	f7ff fc58 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000cdf4:	f7ff fd30 	bl	9000c858 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000cdf8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000cdfa:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000cdfc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000ce00:	4628      	mov	r0, r5
9000ce02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000ce04 <xQueueGenericSend>:
{
9000ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ce08:	b084      	sub	sp, #16
9000ce0a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000ce0c:	2800      	cmp	r0, #0
9000ce0e:	f000 8103 	beq.w	9000d018 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ce12:	4688      	mov	r8, r1
9000ce14:	4604      	mov	r4, r0
9000ce16:	461f      	mov	r7, r3
9000ce18:	2900      	cmp	r1, #0
9000ce1a:	f000 8097 	beq.w	9000cf4c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000ce1e:	2f02      	cmp	r7, #2
9000ce20:	d10b      	bne.n	9000ce3a <xQueueGenericSend+0x36>
9000ce22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ce24:	2b01      	cmp	r3, #1
9000ce26:	d008      	beq.n	9000ce3a <xQueueGenericSend+0x36>
9000ce28:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ce2c:	f383 8811 	msr	BASEPRI, r3
9000ce30:	f3bf 8f6f 	isb	sy
9000ce34:	f3bf 8f4f 	dsb	sy
9000ce38:	e7fe      	b.n	9000ce38 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ce3a:	f001 fd4d 	bl	9000e8d8 <xTaskGetSchedulerState>
9000ce3e:	2800      	cmp	r0, #0
9000ce40:	f000 80f3 	beq.w	9000d02a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ce44:	f1a7 0902 	sub.w	r9, r7, #2
9000ce48:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ce4a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ce4e:	fab9 f989 	clz	r9, r9
9000ce52:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000ce56:	f7ff fcdd 	bl	9000c814 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ce5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ce5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ce5e:	429a      	cmp	r2, r3
9000ce60:	f0c0 80f0 	bcc.w	9000d044 <xQueueGenericSend+0x240>
9000ce64:	f1b9 0f00 	cmp.w	r9, #0
9000ce68:	f040 80ec 	bne.w	9000d044 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ce6c:	9b01      	ldr	r3, [sp, #4]
9000ce6e:	2b00      	cmp	r3, #0
9000ce70:	f000 8101 	beq.w	9000d076 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000ce74:	2d00      	cmp	r5, #0
9000ce76:	f000 80cb 	beq.w	9000d010 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000ce7a:	f7ff fced 	bl	9000c858 <vPortExitCritical>
		vTaskSuspendAll();
9000ce7e:	f001 fb55 	bl	9000e52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000ce82:	f7ff fcc7 	bl	9000c814 <vPortEnterCritical>
9000ce86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ce8a:	2bff      	cmp	r3, #255	; 0xff
9000ce8c:	d102      	bne.n	9000ce94 <xQueueGenericSend+0x90>
9000ce8e:	2300      	movs	r3, #0
9000ce90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000ce94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ce98:	2bff      	cmp	r3, #255	; 0xff
9000ce9a:	d102      	bne.n	9000cea2 <xQueueGenericSend+0x9e>
9000ce9c:	2300      	movs	r3, #0
9000ce9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000cea2:	f7ff fcd9 	bl	9000c858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000cea6:	a901      	add	r1, sp, #4
9000cea8:	a802      	add	r0, sp, #8
9000ceaa:	f001 fcc1 	bl	9000e830 <xTaskCheckForTimeOut>
9000ceae:	2800      	cmp	r0, #0
9000ceb0:	f040 80e5 	bne.w	9000d07e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000ceb4:	f7ff fcae 	bl	9000c814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000ceb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ceba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000cebc:	429a      	cmp	r2, r3
9000cebe:	d052      	beq.n	9000cf66 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000cec0:	f7ff fcca 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cec4:	f7ff fca6 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000cec8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000cecc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cece:	2d00      	cmp	r5, #0
9000ced0:	dc04      	bgt.n	9000cedc <xQueueGenericSend+0xd8>
9000ced2:	e011      	b.n	9000cef8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000ced4:	1e6a      	subs	r2, r5, #1
9000ced6:	b2d3      	uxtb	r3, r2
9000ced8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ceda:	b16b      	cbz	r3, 9000cef8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cedc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cede:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cee0:	b153      	cbz	r3, 9000cef8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cee2:	f001 fc4f 	bl	9000e784 <xTaskRemoveFromEventList>
9000cee6:	2800      	cmp	r0, #0
9000cee8:	d0f4      	beq.n	9000ced4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000ceea:	f001 fce9 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000ceee:	1e6a      	subs	r2, r5, #1
9000cef0:	b2d3      	uxtb	r3, r2
9000cef2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cef4:	2b00      	cmp	r3, #0
9000cef6:	d1f1      	bne.n	9000cedc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000cef8:	23ff      	movs	r3, #255	; 0xff
9000cefa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000cefe:	f7ff fcab 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cf02:	f7ff fc87 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000cf06:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000cf0a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cf0c:	2d00      	cmp	r5, #0
9000cf0e:	dd14      	ble.n	9000cf3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cf10:	f104 0a10 	add.w	sl, r4, #16
9000cf14:	e003      	b.n	9000cf1e <xQueueGenericSend+0x11a>
				--cRxLock;
9000cf16:	1e6a      	subs	r2, r5, #1
9000cf18:	b2d3      	uxtb	r3, r2
9000cf1a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cf1c:	b16b      	cbz	r3, 9000cf3a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cf1e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cf20:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cf22:	b153      	cbz	r3, 9000cf3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cf24:	f001 fc2e 	bl	9000e784 <xTaskRemoveFromEventList>
9000cf28:	2800      	cmp	r0, #0
9000cf2a:	d0f4      	beq.n	9000cf16 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000cf2c:	f001 fcc8 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000cf30:	1e6a      	subs	r2, r5, #1
9000cf32:	b2d3      	uxtb	r3, r2
9000cf34:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cf36:	2b00      	cmp	r3, #0
9000cf38:	d1f1      	bne.n	9000cf1e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000cf3a:	23ff      	movs	r3, #255	; 0xff
9000cf3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000cf40:	f7ff fc8a 	bl	9000c858 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000cf44:	f001 fafa 	bl	9000e53c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000cf48:	2501      	movs	r5, #1
9000cf4a:	e784      	b.n	9000ce56 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000cf4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000cf4e:	2b00      	cmp	r3, #0
9000cf50:	f43f af65 	beq.w	9000ce1e <xQueueGenericSend+0x1a>
9000cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cf58:	f383 8811 	msr	BASEPRI, r3
9000cf5c:	f3bf 8f6f 	isb	sy
9000cf60:	f3bf 8f4f 	dsb	sy
9000cf64:	e7fe      	b.n	9000cf64 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000cf66:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000cf6a:	f7ff fc75 	bl	9000c858 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000cf6e:	9901      	ldr	r1, [sp, #4]
9000cf70:	4650      	mov	r0, sl
9000cf72:	f001 fb79 	bl	9000e668 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000cf76:	f7ff fc4d 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000cf7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000cf7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cf80:	2d00      	cmp	r5, #0
9000cf82:	dc04      	bgt.n	9000cf8e <xQueueGenericSend+0x18a>
9000cf84:	e011      	b.n	9000cfaa <xQueueGenericSend+0x1a6>
			--cTxLock;
9000cf86:	1e6b      	subs	r3, r5, #1
9000cf88:	b2da      	uxtb	r2, r3
9000cf8a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cf8c:	b16a      	cbz	r2, 9000cfaa <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cf8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cf90:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cf92:	b153      	cbz	r3, 9000cfaa <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cf94:	f001 fbf6 	bl	9000e784 <xTaskRemoveFromEventList>
9000cf98:	2800      	cmp	r0, #0
9000cf9a:	d0f4      	beq.n	9000cf86 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000cf9c:	f001 fc90 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000cfa0:	1e6b      	subs	r3, r5, #1
9000cfa2:	b2da      	uxtb	r2, r3
9000cfa4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cfa6:	2a00      	cmp	r2, #0
9000cfa8:	d1f1      	bne.n	9000cf8e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000cfaa:	23ff      	movs	r3, #255	; 0xff
9000cfac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000cfb0:	f7ff fc52 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cfb4:	f7ff fc2e 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000cfb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000cfbc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cfbe:	2d00      	cmp	r5, #0
9000cfc0:	dc04      	bgt.n	9000cfcc <xQueueGenericSend+0x1c8>
9000cfc2:	e011      	b.n	9000cfe8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000cfc4:	1e6b      	subs	r3, r5, #1
9000cfc6:	b2da      	uxtb	r2, r3
9000cfc8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cfca:	b16a      	cbz	r2, 9000cfe8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cfcc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cfce:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cfd0:	b153      	cbz	r3, 9000cfe8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cfd2:	f001 fbd7 	bl	9000e784 <xTaskRemoveFromEventList>
9000cfd6:	2800      	cmp	r0, #0
9000cfd8:	d0f4      	beq.n	9000cfc4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000cfda:	f001 fc71 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000cfde:	1e6b      	subs	r3, r5, #1
9000cfe0:	b2da      	uxtb	r2, r3
9000cfe2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cfe4:	2a00      	cmp	r2, #0
9000cfe6:	d1f1      	bne.n	9000cfcc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000cfe8:	23ff      	movs	r3, #255	; 0xff
9000cfea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000cfee:	f7ff fc33 	bl	9000c858 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000cff2:	f001 faa3 	bl	9000e53c <xTaskResumeAll>
9000cff6:	2800      	cmp	r0, #0
9000cff8:	d1a6      	bne.n	9000cf48 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000cffa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d002:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d006:	f3bf 8f4f 	dsb	sy
9000d00a:	f3bf 8f6f 	isb	sy
9000d00e:	e79b      	b.n	9000cf48 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d010:	a802      	add	r0, sp, #8
9000d012:	f001 fc01 	bl	9000e818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000d016:	e730      	b.n	9000ce7a <xQueueGenericSend+0x76>
9000d018:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d01c:	f383 8811 	msr	BASEPRI, r3
9000d020:	f3bf 8f6f 	isb	sy
9000d024:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d028:	e7fe      	b.n	9000d028 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d02a:	9b01      	ldr	r3, [sp, #4]
9000d02c:	2b00      	cmp	r3, #0
9000d02e:	f43f af09 	beq.w	9000ce44 <xQueueGenericSend+0x40>
9000d032:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d036:	f383 8811 	msr	BASEPRI, r3
9000d03a:	f3bf 8f6f 	isb	sy
9000d03e:	f3bf 8f4f 	dsb	sy
9000d042:	e7fe      	b.n	9000d042 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d044:	463a      	mov	r2, r7
9000d046:	4641      	mov	r1, r8
9000d048:	4620      	mov	r0, r4
9000d04a:	f7ff fd43 	bl	9000cad4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000d050:	2b00      	cmp	r3, #0
9000d052:	d152      	bne.n	9000d0fa <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000d054:	b148      	cbz	r0, 9000d06a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000d056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d05e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d062:	f3bf 8f4f 	dsb	sy
9000d066:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000d06a:	f7ff fbf5 	bl	9000c858 <vPortExitCritical>
				return pdPASS;
9000d06e:	2001      	movs	r0, #1
}
9000d070:	b004      	add	sp, #16
9000d072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000d076:	f7ff fbef 	bl	9000c858 <vPortExitCritical>
					return errQUEUE_FULL;
9000d07a:	4648      	mov	r0, r9
9000d07c:	e7f8      	b.n	9000d070 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000d07e:	f7ff fbc9 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d082:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d086:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d088:	2d00      	cmp	r5, #0
9000d08a:	dd10      	ble.n	9000d0ae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d08c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000d090:	e003      	b.n	9000d09a <xQueueGenericSend+0x296>
			--cTxLock;
9000d092:	1e6b      	subs	r3, r5, #1
9000d094:	b2da      	uxtb	r2, r3
9000d096:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d098:	b14a      	cbz	r2, 9000d0ae <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d09a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d09c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d09e:	b133      	cbz	r3, 9000d0ae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d0a0:	f001 fb70 	bl	9000e784 <xTaskRemoveFromEventList>
9000d0a4:	2800      	cmp	r0, #0
9000d0a6:	d0f4      	beq.n	9000d092 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000d0a8:	f001 fc0a 	bl	9000e8c0 <vTaskMissedYield>
9000d0ac:	e7f1      	b.n	9000d092 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d0ae:	23ff      	movs	r3, #255	; 0xff
9000d0b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d0b4:	f7ff fbd0 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d0b8:	f7ff fbac 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d0bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d0c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d0c2:	2d00      	cmp	r5, #0
9000d0c4:	dd10      	ble.n	9000d0e8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d0c6:	f104 0610 	add.w	r6, r4, #16
9000d0ca:	e003      	b.n	9000d0d4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000d0cc:	1e6b      	subs	r3, r5, #1
9000d0ce:	b2da      	uxtb	r2, r3
9000d0d0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d0d2:	b14a      	cbz	r2, 9000d0e8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d0d4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d0d6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d0d8:	b133      	cbz	r3, 9000d0e8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d0da:	f001 fb53 	bl	9000e784 <xTaskRemoveFromEventList>
9000d0de:	2800      	cmp	r0, #0
9000d0e0:	d0f4      	beq.n	9000d0cc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000d0e2:	f001 fbed 	bl	9000e8c0 <vTaskMissedYield>
9000d0e6:	e7f1      	b.n	9000d0cc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000d0e8:	23ff      	movs	r3, #255	; 0xff
9000d0ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d0ee:	f7ff fbb3 	bl	9000c858 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d0f2:	f001 fa23 	bl	9000e53c <xTaskResumeAll>
			return errQUEUE_FULL;
9000d0f6:	2000      	movs	r0, #0
9000d0f8:	e7ba      	b.n	9000d070 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d0fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d0fe:	f001 fb41 	bl	9000e784 <xTaskRemoveFromEventList>
9000d102:	2800      	cmp	r0, #0
9000d104:	d0b1      	beq.n	9000d06a <xQueueGenericSend+0x266>
9000d106:	e7a6      	b.n	9000d056 <xQueueGenericSend+0x252>

9000d108 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000d108:	b179      	cbz	r1, 9000d12a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d10a:	2350      	movs	r3, #80	; 0x50
	{
9000d10c:	b570      	push	{r4, r5, r6, lr}
9000d10e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d110:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d112:	9b01      	ldr	r3, [sp, #4]
9000d114:	2b50      	cmp	r3, #80	; 0x50
9000d116:	d011      	beq.n	9000d13c <xQueueCreateMutexStatic+0x34>
9000d118:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d11c:	f383 8811 	msr	BASEPRI, r3
9000d120:	f3bf 8f6f 	isb	sy
9000d124:	f3bf 8f4f 	dsb	sy
9000d128:	e7fe      	b.n	9000d128 <xQueueCreateMutexStatic+0x20>
9000d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d12e:	f383 8811 	msr	BASEPRI, r3
9000d132:	f3bf 8f6f 	isb	sy
9000d136:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d13a:	e7fe      	b.n	9000d13a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000d13c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d13e:	2301      	movs	r3, #1
9000d140:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d142:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d144:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000d148:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d14a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000d14c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000d150:	f7ff fb60 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d154:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000d156:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d158:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d15a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000d15c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d164:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000d168:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d16c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d16e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d170:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d172:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d176:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d17a:	f7ff fa93 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d17e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d182:	f7ff fa8f 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d186:	f7ff fb67 	bl	9000c858 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d18a:	4633      	mov	r3, r6
9000d18c:	4632      	mov	r2, r6
9000d18e:	4631      	mov	r1, r6
9000d190:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d192:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000d196:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000d198:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000d19a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d19c:	f7ff fe32 	bl	9000ce04 <xQueueGenericSend>
	}
9000d1a0:	4620      	mov	r0, r4
9000d1a2:	b002      	add	sp, #8
9000d1a4:	bd70      	pop	{r4, r5, r6, pc}
9000d1a6:	bf00      	nop

9000d1a8 <xQueueGiveMutexRecursive>:
	{
9000d1a8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000d1aa:	b138      	cbz	r0, 9000d1bc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000d1ac:	6885      	ldr	r5, [r0, #8]
9000d1ae:	4604      	mov	r4, r0
9000d1b0:	f001 fb8c 	bl	9000e8cc <xTaskGetCurrentTaskHandle>
9000d1b4:	4285      	cmp	r5, r0
9000d1b6:	d00a      	beq.n	9000d1ce <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000d1b8:	2000      	movs	r0, #0
	}
9000d1ba:	bd38      	pop	{r3, r4, r5, pc}
9000d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d1c0:	f383 8811 	msr	BASEPRI, r3
9000d1c4:	f3bf 8f6f 	isb	sy
9000d1c8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000d1cc:	e7fe      	b.n	9000d1cc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000d1ce:	68e3      	ldr	r3, [r4, #12]
9000d1d0:	3b01      	subs	r3, #1
9000d1d2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000d1d4:	b10b      	cbz	r3, 9000d1da <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000d1d6:	2001      	movs	r0, #1
	}
9000d1d8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000d1da:	461a      	mov	r2, r3
9000d1dc:	4619      	mov	r1, r3
9000d1de:	4620      	mov	r0, r4
9000d1e0:	f7ff fe10 	bl	9000ce04 <xQueueGenericSend>
			xReturn = pdPASS;
9000d1e4:	2001      	movs	r0, #1
	}
9000d1e6:	bd38      	pop	{r3, r4, r5, pc}

9000d1e8 <xQueueCreateMutex>:
	{
9000d1e8:	b570      	push	{r4, r5, r6, lr}
9000d1ea:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d1ec:	2050      	movs	r0, #80	; 0x50
9000d1ee:	f7ff f937 	bl	9000c460 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d1f2:	4604      	mov	r4, r0
9000d1f4:	b370      	cbz	r0, 9000d254 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d1f6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000d1f8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d1fa:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d1fc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000d200:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000d204:	f7ff fb06 	bl	9000c814 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d208:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d20a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d20c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d210:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d212:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000d216:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d21a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d21c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d21e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000d220:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d222:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d226:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d22a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d22e:	f7ff fa39 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d232:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d236:	f7ff fa35 	bl	9000c6a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d23a:	f7ff fb0d 	bl	9000c858 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d23e:	4633      	mov	r3, r6
9000d240:	4632      	mov	r2, r6
9000d242:	4631      	mov	r1, r6
9000d244:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d246:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000d24a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000d24c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000d24e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d250:	f7ff fdd8 	bl	9000ce04 <xQueueGenericSend>
	}
9000d254:	4620      	mov	r0, r4
9000d256:	bd70      	pop	{r4, r5, r6, pc}

9000d258 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000d258:	2800      	cmp	r0, #0
9000d25a:	d04e      	beq.n	9000d2fa <xQueueGenericSendFromISR+0xa2>
{
9000d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d260:	460e      	mov	r6, r1
9000d262:	4604      	mov	r4, r0
9000d264:	4617      	mov	r7, r2
9000d266:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d268:	b339      	cbz	r1, 9000d2ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000d26a:	2d02      	cmp	r5, #2
9000d26c:	d10b      	bne.n	9000d286 <xQueueGenericSendFromISR+0x2e>
9000d26e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d270:	2b01      	cmp	r3, #1
9000d272:	d008      	beq.n	9000d286 <xQueueGenericSendFromISR+0x2e>
9000d274:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d278:	f383 8811 	msr	BASEPRI, r3
9000d27c:	f3bf 8f6f 	isb	sy
9000d280:	f3bf 8f4f 	dsb	sy
9000d284:	e7fe      	b.n	9000d284 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000d286:	f7ff fbf7 	bl	9000ca78 <vPortValidateInterruptPriority>
	__asm volatile
9000d28a:	f3ef 8811 	mrs	r8, BASEPRI
9000d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d292:	f383 8811 	msr	BASEPRI, r3
9000d296:	f3bf 8f6f 	isb	sy
9000d29a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d29e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000d2a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d2a2:	429a      	cmp	r2, r3
9000d2a4:	d315      	bcc.n	9000d2d2 <xQueueGenericSendFromISR+0x7a>
9000d2a6:	f1a5 0002 	sub.w	r0, r5, #2
9000d2aa:	fab0 f080 	clz	r0, r0
9000d2ae:	0940      	lsrs	r0, r0, #5
9000d2b0:	b978      	cbnz	r0, 9000d2d2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000d2b2:	f388 8811 	msr	BASEPRI, r8
}
9000d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d2ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000d2bc:	2b00      	cmp	r3, #0
9000d2be:	d0d4      	beq.n	9000d26a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d2c4:	f383 8811 	msr	BASEPRI, r3
9000d2c8:	f3bf 8f6f 	isb	sy
9000d2cc:	f3bf 8f4f 	dsb	sy
9000d2d0:	e7fe      	b.n	9000d2d0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d2d2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000d2d4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d2d8:	4631      	mov	r1, r6
9000d2da:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000d2dc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d2de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d2e0:	f7ff fbf8 	bl	9000cad4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000d2e4:	1c6b      	adds	r3, r5, #1
9000d2e6:	d011      	beq.n	9000d30c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d2e8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000d2ea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d2ec:	b25b      	sxtb	r3, r3
9000d2ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000d2f2:	f388 8811 	msr	BASEPRI, r8
}
9000d2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d2fe:	f383 8811 	msr	BASEPRI, r3
9000d302:	f3bf 8f6f 	isb	sy
9000d306:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d30a:	e7fe      	b.n	9000d30a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d30c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000d30e:	b90b      	cbnz	r3, 9000d314 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000d310:	2001      	movs	r0, #1
9000d312:	e7ce      	b.n	9000d2b2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d314:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d318:	f001 fa34 	bl	9000e784 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000d31c:	2800      	cmp	r0, #0
9000d31e:	d0f7      	beq.n	9000d310 <xQueueGenericSendFromISR+0xb8>
9000d320:	2f00      	cmp	r7, #0
9000d322:	d0f5      	beq.n	9000d310 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d324:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000d326:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d328:	603b      	str	r3, [r7, #0]
9000d32a:	e7c2      	b.n	9000d2b2 <xQueueGenericSendFromISR+0x5a>

9000d32c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000d32c:	b360      	cbz	r0, 9000d388 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000d32e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000d330:	b570      	push	{r4, r5, r6, lr}
9000d332:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000d334:	b143      	cbz	r3, 9000d348 <xQueueGiveFromISR+0x1c>
9000d336:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d33a:	f383 8811 	msr	BASEPRI, r3
9000d33e:	f3bf 8f6f 	isb	sy
9000d342:	f3bf 8f4f 	dsb	sy
9000d346:	e7fe      	b.n	9000d346 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000d348:	6803      	ldr	r3, [r0, #0]
9000d34a:	460d      	mov	r5, r1
9000d34c:	b32b      	cbz	r3, 9000d39a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000d34e:	f7ff fb93 	bl	9000ca78 <vPortValidateInterruptPriority>
	__asm volatile
9000d352:	f3ef 8611 	mrs	r6, BASEPRI
9000d356:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d35a:	f383 8811 	msr	BASEPRI, r3
9000d35e:	f3bf 8f6f 	isb	sy
9000d362:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000d368:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000d36a:	429a      	cmp	r2, r3
9000d36c:	d921      	bls.n	9000d3b2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000d36e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d372:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000d374:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d376:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000d378:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000d37a:	d01e      	beq.n	9000d3ba <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d37c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000d37e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d380:	b25b      	sxtb	r3, r3
9000d382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000d386:	e015      	b.n	9000d3b4 <xQueueGiveFromISR+0x88>
	__asm volatile
9000d388:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d38c:	f383 8811 	msr	BASEPRI, r3
9000d390:	f3bf 8f6f 	isb	sy
9000d394:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d398:	e7fe      	b.n	9000d398 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000d39a:	6883      	ldr	r3, [r0, #8]
9000d39c:	2b00      	cmp	r3, #0
9000d39e:	d0d6      	beq.n	9000d34e <xQueueGiveFromISR+0x22>
9000d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d3a4:	f383 8811 	msr	BASEPRI, r3
9000d3a8:	f3bf 8f6f 	isb	sy
9000d3ac:	f3bf 8f4f 	dsb	sy
9000d3b0:	e7fe      	b.n	9000d3b0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000d3b2:	2000      	movs	r0, #0
	__asm volatile
9000d3b4:	f386 8811 	msr	BASEPRI, r6
}
9000d3b8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000d3bc:	b90b      	cbnz	r3, 9000d3c2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000d3be:	2001      	movs	r0, #1
9000d3c0:	e7f8      	b.n	9000d3b4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d3c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d3c6:	f001 f9dd 	bl	9000e784 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000d3ca:	2d00      	cmp	r5, #0
9000d3cc:	d0f7      	beq.n	9000d3be <xQueueGiveFromISR+0x92>
9000d3ce:	2800      	cmp	r0, #0
9000d3d0:	d0f5      	beq.n	9000d3be <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d3d2:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000d3d4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d3d6:	602b      	str	r3, [r5, #0]
9000d3d8:	e7ec      	b.n	9000d3b4 <xQueueGiveFromISR+0x88>
9000d3da:	bf00      	nop

9000d3dc <xQueueReceive>:
{
9000d3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000d3e0:	b085      	sub	sp, #20
9000d3e2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000d3e4:	2800      	cmp	r0, #0
9000d3e6:	f000 815c 	beq.w	9000d6a2 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d3ea:	460f      	mov	r7, r1
9000d3ec:	4604      	mov	r4, r0
9000d3ee:	2900      	cmp	r1, #0
9000d3f0:	d079      	beq.n	9000d4e6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d3f2:	f001 fa71 	bl	9000e8d8 <xTaskGetSchedulerState>
9000d3f6:	2800      	cmp	r0, #0
9000d3f8:	f000 8081 	beq.w	9000d4fe <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000d3fc:	f7ff fa0a 	bl	9000c814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d400:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d402:	2d00      	cmp	r5, #0
9000d404:	f040 8138 	bne.w	9000d678 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d408:	9b01      	ldr	r3, [sp, #4]
9000d40a:	2b00      	cmp	r3, #0
9000d40c:	f000 80d5 	beq.w	9000d5ba <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000d410:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d412:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d416:	a802      	add	r0, sp, #8
9000d418:	f001 f9fe 	bl	9000e818 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000d41c:	f7ff fa1c 	bl	9000c858 <vPortExitCritical>
		vTaskSuspendAll();
9000d420:	f001 f884 	bl	9000e52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d424:	f7ff f9f6 	bl	9000c814 <vPortEnterCritical>
9000d428:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d42c:	2bff      	cmp	r3, #255	; 0xff
9000d42e:	d101      	bne.n	9000d434 <xQueueReceive+0x58>
9000d430:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000d434:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d438:	2bff      	cmp	r3, #255	; 0xff
9000d43a:	d101      	bne.n	9000d440 <xQueueReceive+0x64>
9000d43c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000d440:	f7ff fa0a 	bl	9000c858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d444:	a901      	add	r1, sp, #4
9000d446:	a802      	add	r0, sp, #8
9000d448:	f001 f9f2 	bl	9000e830 <xTaskCheckForTimeOut>
9000d44c:	2800      	cmp	r0, #0
9000d44e:	d163      	bne.n	9000d518 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000d450:	f7ff f9e0 	bl	9000c814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d456:	2b00      	cmp	r3, #0
9000d458:	f000 80b5 	beq.w	9000d5c6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000d45c:	f7ff f9fc 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d460:	f7ff f9d8 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d464:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d468:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d46a:	2d00      	cmp	r5, #0
9000d46c:	dc04      	bgt.n	9000d478 <xQueueReceive+0x9c>
9000d46e:	e011      	b.n	9000d494 <xQueueReceive+0xb8>
			--cTxLock;
9000d470:	1e6b      	subs	r3, r5, #1
9000d472:	b2da      	uxtb	r2, r3
9000d474:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d476:	b16a      	cbz	r2, 9000d494 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d478:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d47a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d47c:	b153      	cbz	r3, 9000d494 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d47e:	f001 f981 	bl	9000e784 <xTaskRemoveFromEventList>
9000d482:	2800      	cmp	r0, #0
9000d484:	d0f4      	beq.n	9000d470 <xQueueReceive+0x94>
						vTaskMissedYield();
9000d486:	f001 fa1b 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000d48a:	1e6b      	subs	r3, r5, #1
9000d48c:	b2da      	uxtb	r2, r3
9000d48e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d490:	2a00      	cmp	r2, #0
9000d492:	d1f1      	bne.n	9000d478 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000d494:	23ff      	movs	r3, #255	; 0xff
9000d496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d49a:	f7ff f9dd 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d49e:	f7ff f9b9 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d4a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d4a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d4a8:	2d00      	cmp	r5, #0
9000d4aa:	dd14      	ble.n	9000d4d6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d4ac:	f104 0910 	add.w	r9, r4, #16
9000d4b0:	e003      	b.n	9000d4ba <xQueueReceive+0xde>
				--cRxLock;
9000d4b2:	1e6b      	subs	r3, r5, #1
9000d4b4:	b2da      	uxtb	r2, r3
9000d4b6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d4b8:	b16a      	cbz	r2, 9000d4d6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d4ba:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d4bc:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d4be:	b153      	cbz	r3, 9000d4d6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d4c0:	f001 f960 	bl	9000e784 <xTaskRemoveFromEventList>
9000d4c4:	2800      	cmp	r0, #0
9000d4c6:	d0f4      	beq.n	9000d4b2 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000d4c8:	f001 f9fa 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000d4cc:	1e6b      	subs	r3, r5, #1
9000d4ce:	b2da      	uxtb	r2, r3
9000d4d0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d4d2:	2a00      	cmp	r2, #0
9000d4d4:	d1f1      	bne.n	9000d4ba <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000d4d6:	23ff      	movs	r3, #255	; 0xff
9000d4d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d4dc:	f7ff f9bc 	bl	9000c858 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d4e0:	f001 f82c 	bl	9000e53c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000d4e4:	e060      	b.n	9000d5a8 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d4e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000d4e8:	2b00      	cmp	r3, #0
9000d4ea:	d082      	beq.n	9000d3f2 <xQueueReceive+0x16>
	__asm volatile
9000d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d4f0:	f383 8811 	msr	BASEPRI, r3
9000d4f4:	f3bf 8f6f 	isb	sy
9000d4f8:	f3bf 8f4f 	dsb	sy
9000d4fc:	e7fe      	b.n	9000d4fc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d4fe:	9b01      	ldr	r3, [sp, #4]
9000d500:	2b00      	cmp	r3, #0
9000d502:	f43f af7b 	beq.w	9000d3fc <xQueueReceive+0x20>
9000d506:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d50a:	f383 8811 	msr	BASEPRI, r3
9000d50e:	f3bf 8f6f 	isb	sy
9000d512:	f3bf 8f4f 	dsb	sy
9000d516:	e7fe      	b.n	9000d516 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000d518:	f7ff f97c 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d51c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d520:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d522:	2d00      	cmp	r5, #0
9000d524:	dc04      	bgt.n	9000d530 <xQueueReceive+0x154>
9000d526:	e011      	b.n	9000d54c <xQueueReceive+0x170>
			--cTxLock;
9000d528:	1e6b      	subs	r3, r5, #1
9000d52a:	b2da      	uxtb	r2, r3
9000d52c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d52e:	b16a      	cbz	r2, 9000d54c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d530:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d532:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d534:	b153      	cbz	r3, 9000d54c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d536:	f001 f925 	bl	9000e784 <xTaskRemoveFromEventList>
9000d53a:	2800      	cmp	r0, #0
9000d53c:	d0f4      	beq.n	9000d528 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000d53e:	f001 f9bf 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000d542:	1e6b      	subs	r3, r5, #1
9000d544:	b2da      	uxtb	r2, r3
9000d546:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d548:	2a00      	cmp	r2, #0
9000d54a:	d1f1      	bne.n	9000d530 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000d54c:	23ff      	movs	r3, #255	; 0xff
9000d54e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d552:	f7ff f981 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d556:	f7ff f95d 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d55a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d55e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d560:	2d00      	cmp	r5, #0
9000d562:	dd14      	ble.n	9000d58e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d564:	f104 0910 	add.w	r9, r4, #16
9000d568:	e003      	b.n	9000d572 <xQueueReceive+0x196>
				--cRxLock;
9000d56a:	1e6b      	subs	r3, r5, #1
9000d56c:	b2da      	uxtb	r2, r3
9000d56e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d570:	b16a      	cbz	r2, 9000d58e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d572:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d574:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d576:	b153      	cbz	r3, 9000d58e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d578:	f001 f904 	bl	9000e784 <xTaskRemoveFromEventList>
9000d57c:	2800      	cmp	r0, #0
9000d57e:	d0f4      	beq.n	9000d56a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000d580:	f001 f99e 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000d584:	1e6b      	subs	r3, r5, #1
9000d586:	b2da      	uxtb	r2, r3
9000d588:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d58a:	2a00      	cmp	r2, #0
9000d58c:	d1f1      	bne.n	9000d572 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000d58e:	23ff      	movs	r3, #255	; 0xff
9000d590:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d594:	f7ff f960 	bl	9000c858 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d598:	f000 ffd0 	bl	9000e53c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000d59c:	f7ff f93a 	bl	9000c814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d5a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d5a2:	b153      	cbz	r3, 9000d5ba <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000d5a4:	f7ff f958 	bl	9000c858 <vPortExitCritical>
		taskENTER_CRITICAL();
9000d5a8:	f7ff f934 	bl	9000c814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d5ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d5ae:	2d00      	cmp	r5, #0
9000d5b0:	d162      	bne.n	9000d678 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d5b2:	9b01      	ldr	r3, [sp, #4]
9000d5b4:	2b00      	cmp	r3, #0
9000d5b6:	f47f af31 	bne.w	9000d41c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000d5ba:	f7ff f94d 	bl	9000c858 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000d5be:	2000      	movs	r0, #0
}
9000d5c0:	b005      	add	sp, #20
9000d5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000d5c6:	f7ff f947 	bl	9000c858 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000d5ca:	9901      	ldr	r1, [sp, #4]
9000d5cc:	4630      	mov	r0, r6
9000d5ce:	f001 f84b 	bl	9000e668 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d5d2:	f7ff f91f 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d5d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d5da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d5dc:	2d00      	cmp	r5, #0
9000d5de:	dc04      	bgt.n	9000d5ea <xQueueReceive+0x20e>
9000d5e0:	e011      	b.n	9000d606 <xQueueReceive+0x22a>
			--cTxLock;
9000d5e2:	1e6b      	subs	r3, r5, #1
9000d5e4:	b2da      	uxtb	r2, r3
9000d5e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d5e8:	b16a      	cbz	r2, 9000d606 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d5ec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d5ee:	b153      	cbz	r3, 9000d606 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d5f0:	f001 f8c8 	bl	9000e784 <xTaskRemoveFromEventList>
9000d5f4:	2800      	cmp	r0, #0
9000d5f6:	d0f4      	beq.n	9000d5e2 <xQueueReceive+0x206>
						vTaskMissedYield();
9000d5f8:	f001 f962 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000d5fc:	1e6b      	subs	r3, r5, #1
9000d5fe:	b2da      	uxtb	r2, r3
9000d600:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d602:	2a00      	cmp	r2, #0
9000d604:	d1f1      	bne.n	9000d5ea <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d606:	23ff      	movs	r3, #255	; 0xff
9000d608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d60c:	f7ff f924 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d610:	f7ff f900 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d614:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d618:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d61a:	2d00      	cmp	r5, #0
9000d61c:	dd14      	ble.n	9000d648 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d61e:	f104 0910 	add.w	r9, r4, #16
9000d622:	e003      	b.n	9000d62c <xQueueReceive+0x250>
				--cRxLock;
9000d624:	1e6b      	subs	r3, r5, #1
9000d626:	b2da      	uxtb	r2, r3
9000d628:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d62a:	b16a      	cbz	r2, 9000d648 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d62c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d62e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d630:	b153      	cbz	r3, 9000d648 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d632:	f001 f8a7 	bl	9000e784 <xTaskRemoveFromEventList>
9000d636:	2800      	cmp	r0, #0
9000d638:	d0f4      	beq.n	9000d624 <xQueueReceive+0x248>
					vTaskMissedYield();
9000d63a:	f001 f941 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000d63e:	1e6b      	subs	r3, r5, #1
9000d640:	b2da      	uxtb	r2, r3
9000d642:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d644:	2a00      	cmp	r2, #0
9000d646:	d1f1      	bne.n	9000d62c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000d648:	23ff      	movs	r3, #255	; 0xff
9000d64a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d64e:	f7ff f903 	bl	9000c858 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d652:	f000 ff73 	bl	9000e53c <xTaskResumeAll>
9000d656:	2800      	cmp	r0, #0
9000d658:	d1a6      	bne.n	9000d5a8 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000d65a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d662:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d666:	f3bf 8f4f 	dsb	sy
9000d66a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000d66e:	f7ff f8d1 	bl	9000c814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d672:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d674:	2d00      	cmp	r5, #0
9000d676:	d09c      	beq.n	9000d5b2 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000d678:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d67a:	b152      	cbz	r2, 9000d692 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d67c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d67e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d680:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d682:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d684:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d686:	d301      	bcc.n	9000d68c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000d688:	6821      	ldr	r1, [r4, #0]
9000d68a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000d68c:	4638      	mov	r0, r7
9000d68e:	f014 fce2 	bl	90022056 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000d692:	3d01      	subs	r5, #1
9000d694:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d696:	6923      	ldr	r3, [r4, #16]
9000d698:	b963      	cbnz	r3, 9000d6b4 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000d69a:	f7ff f8dd 	bl	9000c858 <vPortExitCritical>
				return pdPASS;
9000d69e:	2001      	movs	r0, #1
9000d6a0:	e78e      	b.n	9000d5c0 <xQueueReceive+0x1e4>
9000d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d6a6:	f383 8811 	msr	BASEPRI, r3
9000d6aa:	f3bf 8f6f 	isb	sy
9000d6ae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000d6b2:	e7fe      	b.n	9000d6b2 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d6b4:	f104 0010 	add.w	r0, r4, #16
9000d6b8:	f001 f864 	bl	9000e784 <xTaskRemoveFromEventList>
9000d6bc:	2800      	cmp	r0, #0
9000d6be:	d0ec      	beq.n	9000d69a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000d6c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d6c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d6c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d6cc:	f3bf 8f4f 	dsb	sy
9000d6d0:	f3bf 8f6f 	isb	sy
9000d6d4:	e7e1      	b.n	9000d69a <xQueueReceive+0x2be>
9000d6d6:	bf00      	nop

9000d6d8 <xQueueSemaphoreTake>:
{
9000d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d6dc:	b084      	sub	sp, #16
9000d6de:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000d6e0:	2800      	cmp	r0, #0
9000d6e2:	d05c      	beq.n	9000d79e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000d6e4:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000d6e6:	4604      	mov	r4, r0
9000d6e8:	b147      	cbz	r7, 9000d6fc <xQueueSemaphoreTake+0x24>
9000d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d6ee:	f383 8811 	msr	BASEPRI, r3
9000d6f2:	f3bf 8f6f 	isb	sy
9000d6f6:	f3bf 8f4f 	dsb	sy
9000d6fa:	e7fe      	b.n	9000d6fa <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d6fc:	f001 f8ec 	bl	9000e8d8 <xTaskGetSchedulerState>
9000d700:	4605      	mov	r5, r0
9000d702:	2800      	cmp	r0, #0
9000d704:	d054      	beq.n	9000d7b0 <xQueueSemaphoreTake+0xd8>
9000d706:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d708:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000d70c:	f7ff f882 	bl	9000c814 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000d710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000d712:	2b00      	cmp	r3, #0
9000d714:	f040 8149 	bne.w	9000d9aa <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d718:	9b01      	ldr	r3, [sp, #4]
9000d71a:	2b00      	cmp	r3, #0
9000d71c:	f000 813a 	beq.w	9000d994 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000d720:	2d00      	cmp	r5, #0
9000d722:	f000 809d 	beq.w	9000d860 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000d726:	f7ff f897 	bl	9000c858 <vPortExitCritical>
		vTaskSuspendAll();
9000d72a:	f000 feff 	bl	9000e52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d72e:	f7ff f871 	bl	9000c814 <vPortEnterCritical>
9000d732:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d736:	2bff      	cmp	r3, #255	; 0xff
9000d738:	d102      	bne.n	9000d740 <xQueueSemaphoreTake+0x68>
9000d73a:	2300      	movs	r3, #0
9000d73c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000d740:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d744:	2bff      	cmp	r3, #255	; 0xff
9000d746:	d102      	bne.n	9000d74e <xQueueSemaphoreTake+0x76>
9000d748:	2300      	movs	r3, #0
9000d74a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000d74e:	f7ff f883 	bl	9000c858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d752:	a901      	add	r1, sp, #4
9000d754:	a802      	add	r0, sp, #8
9000d756:	f001 f86b 	bl	9000e830 <xTaskCheckForTimeOut>
9000d75a:	2800      	cmp	r0, #0
9000d75c:	d135      	bne.n	9000d7ca <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000d75e:	f7ff f859 	bl	9000c814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d764:	2b00      	cmp	r3, #0
9000d766:	f000 80a4 	beq.w	9000d8b2 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000d76a:	f7ff f875 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d76e:	f7ff f851 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d772:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d776:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d778:	2d00      	cmp	r5, #0
9000d77a:	dc05      	bgt.n	9000d788 <xQueueSemaphoreTake+0xb0>
9000d77c:	e074      	b.n	9000d868 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000d77e:	1e6b      	subs	r3, r5, #1
9000d780:	b2da      	uxtb	r2, r3
9000d782:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d784:	2a00      	cmp	r2, #0
9000d786:	d06f      	beq.n	9000d868 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d788:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d78a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d78c:	2b00      	cmp	r3, #0
9000d78e:	d06b      	beq.n	9000d868 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d790:	f000 fff8 	bl	9000e784 <xTaskRemoveFromEventList>
9000d794:	2800      	cmp	r0, #0
9000d796:	d0f2      	beq.n	9000d77e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000d798:	f001 f892 	bl	9000e8c0 <vTaskMissedYield>
9000d79c:	e7ef      	b.n	9000d77e <xQueueSemaphoreTake+0xa6>
9000d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d7a2:	f383 8811 	msr	BASEPRI, r3
9000d7a6:	f3bf 8f6f 	isb	sy
9000d7aa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000d7ae:	e7fe      	b.n	9000d7ae <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d7b0:	9b01      	ldr	r3, [sp, #4]
9000d7b2:	2b00      	cmp	r3, #0
9000d7b4:	f000 80d4 	beq.w	9000d960 <xQueueSemaphoreTake+0x288>
9000d7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d7bc:	f383 8811 	msr	BASEPRI, r3
9000d7c0:	f3bf 8f6f 	isb	sy
9000d7c4:	f3bf 8f4f 	dsb	sy
9000d7c8:	e7fe      	b.n	9000d7c8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000d7ca:	f7ff f823 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d7ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d7d2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d7d4:	2d00      	cmp	r5, #0
9000d7d6:	dc04      	bgt.n	9000d7e2 <xQueueSemaphoreTake+0x10a>
9000d7d8:	e011      	b.n	9000d7fe <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000d7da:	1e6b      	subs	r3, r5, #1
9000d7dc:	b2da      	uxtb	r2, r3
9000d7de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d7e0:	b16a      	cbz	r2, 9000d7fe <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d7e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d7e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d7e6:	b153      	cbz	r3, 9000d7fe <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d7e8:	f000 ffcc 	bl	9000e784 <xTaskRemoveFromEventList>
9000d7ec:	2800      	cmp	r0, #0
9000d7ee:	d0f4      	beq.n	9000d7da <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000d7f0:	f001 f866 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000d7f4:	1e6b      	subs	r3, r5, #1
9000d7f6:	b2da      	uxtb	r2, r3
9000d7f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d7fa:	2a00      	cmp	r2, #0
9000d7fc:	d1f1      	bne.n	9000d7e2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000d7fe:	23ff      	movs	r3, #255	; 0xff
9000d800:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d804:	f7ff f828 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d808:	f7ff f804 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d80c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d810:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d812:	2d00      	cmp	r5, #0
9000d814:	dd14      	ble.n	9000d840 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d816:	f104 0810 	add.w	r8, r4, #16
9000d81a:	e003      	b.n	9000d824 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000d81c:	1e6b      	subs	r3, r5, #1
9000d81e:	b2da      	uxtb	r2, r3
9000d820:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d822:	b16a      	cbz	r2, 9000d840 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d824:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d826:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d828:	b153      	cbz	r3, 9000d840 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d82a:	f000 ffab 	bl	9000e784 <xTaskRemoveFromEventList>
9000d82e:	2800      	cmp	r0, #0
9000d830:	d0f4      	beq.n	9000d81c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000d832:	f001 f845 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000d836:	1e6b      	subs	r3, r5, #1
9000d838:	b2da      	uxtb	r2, r3
9000d83a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d83c:	2a00      	cmp	r2, #0
9000d83e:	d1f1      	bne.n	9000d824 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000d840:	23ff      	movs	r3, #255	; 0xff
9000d842:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d846:	f7ff f807 	bl	9000c858 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d84a:	f000 fe77 	bl	9000e53c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000d84e:	f7fe ffe1 	bl	9000c814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d854:	2b00      	cmp	r3, #0
9000d856:	d07c      	beq.n	9000d952 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000d858:	f7fe fffe 	bl	9000c858 <vPortExitCritical>
	return xReturn;
9000d85c:	2501      	movs	r5, #1
9000d85e:	e755      	b.n	9000d70c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d860:	a802      	add	r0, sp, #8
9000d862:	f000 ffd9 	bl	9000e818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000d866:	e75e      	b.n	9000d726 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d868:	23ff      	movs	r3, #255	; 0xff
9000d86a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d86e:	f7fe fff3 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d872:	f7fe ffcf 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d876:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d87a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d87c:	2d00      	cmp	r5, #0
9000d87e:	dd10      	ble.n	9000d8a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d880:	f104 0810 	add.w	r8, r4, #16
9000d884:	e003      	b.n	9000d88e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000d886:	1e6b      	subs	r3, r5, #1
9000d888:	b2da      	uxtb	r2, r3
9000d88a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d88c:	b14a      	cbz	r2, 9000d8a2 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d88e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d890:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d892:	b133      	cbz	r3, 9000d8a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d894:	f000 ff76 	bl	9000e784 <xTaskRemoveFromEventList>
9000d898:	2800      	cmp	r0, #0
9000d89a:	d0f4      	beq.n	9000d886 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000d89c:	f001 f810 	bl	9000e8c0 <vTaskMissedYield>
9000d8a0:	e7f1      	b.n	9000d886 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000d8a2:	23ff      	movs	r3, #255	; 0xff
9000d8a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d8a8:	f7fe ffd6 	bl	9000c858 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d8ac:	f000 fe46 	bl	9000e53c <xTaskResumeAll>
9000d8b0:	e7d4      	b.n	9000d85c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000d8b2:	f7fe ffd1 	bl	9000c858 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d8b6:	6823      	ldr	r3, [r4, #0]
9000d8b8:	2b00      	cmp	r3, #0
9000d8ba:	d062      	beq.n	9000d982 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000d8bc:	9901      	ldr	r1, [sp, #4]
9000d8be:	4630      	mov	r0, r6
9000d8c0:	f000 fed2 	bl	9000e668 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d8c4:	f7fe ffa6 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d8c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d8cc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d8ce:	2d00      	cmp	r5, #0
9000d8d0:	dc04      	bgt.n	9000d8dc <xQueueSemaphoreTake+0x204>
9000d8d2:	e00d      	b.n	9000d8f0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000d8d4:	1e6b      	subs	r3, r5, #1
9000d8d6:	b2da      	uxtb	r2, r3
9000d8d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d8da:	b14a      	cbz	r2, 9000d8f0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d8de:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d8e0:	b133      	cbz	r3, 9000d8f0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d8e2:	f000 ff4f 	bl	9000e784 <xTaskRemoveFromEventList>
9000d8e6:	2800      	cmp	r0, #0
9000d8e8:	d0f4      	beq.n	9000d8d4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000d8ea:	f000 ffe9 	bl	9000e8c0 <vTaskMissedYield>
9000d8ee:	e7f1      	b.n	9000d8d4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000d8f0:	23ff      	movs	r3, #255	; 0xff
9000d8f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d8f6:	f7fe ffaf 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d8fa:	f7fe ff8b 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d8fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d902:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d904:	2d00      	cmp	r5, #0
9000d906:	dd10      	ble.n	9000d92a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d908:	f104 0810 	add.w	r8, r4, #16
9000d90c:	e003      	b.n	9000d916 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000d90e:	1e6b      	subs	r3, r5, #1
9000d910:	b2da      	uxtb	r2, r3
9000d912:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d914:	b14a      	cbz	r2, 9000d92a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d916:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d918:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d91a:	b133      	cbz	r3, 9000d92a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d91c:	f000 ff32 	bl	9000e784 <xTaskRemoveFromEventList>
9000d920:	2800      	cmp	r0, #0
9000d922:	d0f4      	beq.n	9000d90e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000d924:	f000 ffcc 	bl	9000e8c0 <vTaskMissedYield>
9000d928:	e7f1      	b.n	9000d90e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000d92a:	23ff      	movs	r3, #255	; 0xff
9000d92c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d930:	f7fe ff92 	bl	9000c858 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d934:	f000 fe02 	bl	9000e53c <xTaskResumeAll>
9000d938:	2800      	cmp	r0, #0
9000d93a:	d18f      	bne.n	9000d85c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000d93c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d948:	f3bf 8f4f 	dsb	sy
9000d94c:	f3bf 8f6f 	isb	sy
9000d950:	e784      	b.n	9000d85c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000d952:	f7fe ff81 	bl	9000c858 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000d956:	b92f      	cbnz	r7, 9000d964 <xQueueSemaphoreTake+0x28c>
}
9000d958:	4638      	mov	r0, r7
9000d95a:	b004      	add	sp, #16
9000d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d960:	4607      	mov	r7, r0
9000d962:	e6d1      	b.n	9000d708 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000d964:	f7fe ff56 	bl	9000c814 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000d968:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000d96a:	b119      	cbz	r1, 9000d974 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000d96c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d96e:	6819      	ldr	r1, [r3, #0]
9000d970:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000d974:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000d976:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000d978:	f001 f84a 	bl	9000ea10 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000d97c:	f7fe ff6c 	bl	9000c858 <vPortExitCritical>
9000d980:	e7ea      	b.n	9000d958 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000d982:	f7fe ff47 	bl	9000c814 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000d986:	68a0      	ldr	r0, [r4, #8]
9000d988:	f000 ffb6 	bl	9000e8f8 <xTaskPriorityInherit>
9000d98c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000d98e:	f7fe ff63 	bl	9000c858 <vPortExitCritical>
9000d992:	e793      	b.n	9000d8bc <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000d994:	2f00      	cmp	r7, #0
9000d996:	d0f1      	beq.n	9000d97c <xQueueSemaphoreTake+0x2a4>
9000d998:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d99c:	f383 8811 	msr	BASEPRI, r3
9000d9a0:	f3bf 8f6f 	isb	sy
9000d9a4:	f3bf 8f4f 	dsb	sy
9000d9a8:	e7fe      	b.n	9000d9a8 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000d9aa:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d9ac:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000d9ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d9b0:	b12a      	cbz	r2, 9000d9be <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d9b2:	6923      	ldr	r3, [r4, #16]
9000d9b4:	b93b      	cbnz	r3, 9000d9c6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000d9b6:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000d9b8:	f7fe ff4e 	bl	9000c858 <vPortExitCritical>
				return pdPASS;
9000d9bc:	e7cc      	b.n	9000d958 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000d9be:	f001 f87b 	bl	9000eab8 <pvTaskIncrementMutexHeldCount>
9000d9c2:	60a0      	str	r0, [r4, #8]
9000d9c4:	e7f5      	b.n	9000d9b2 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d9c6:	f104 0010 	add.w	r0, r4, #16
9000d9ca:	f000 fedb 	bl	9000e784 <xTaskRemoveFromEventList>
9000d9ce:	2800      	cmp	r0, #0
9000d9d0:	d0f1      	beq.n	9000d9b6 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000d9d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d9da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d9de:	f3bf 8f4f 	dsb	sy
9000d9e2:	f3bf 8f6f 	isb	sy
9000d9e6:	e7e6      	b.n	9000d9b6 <xQueueSemaphoreTake+0x2de>

9000d9e8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000d9e8:	b1a8      	cbz	r0, 9000da16 <xQueueTakeMutexRecursive+0x2e>
	{
9000d9ea:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000d9ec:	6886      	ldr	r6, [r0, #8]
9000d9ee:	4604      	mov	r4, r0
9000d9f0:	460d      	mov	r5, r1
9000d9f2:	f000 ff6b 	bl	9000e8cc <xTaskGetCurrentTaskHandle>
9000d9f6:	4286      	cmp	r6, r0
9000d9f8:	d008      	beq.n	9000da0c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000d9fa:	4629      	mov	r1, r5
9000d9fc:	4620      	mov	r0, r4
9000d9fe:	f7ff fe6b 	bl	9000d6d8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000da02:	b110      	cbz	r0, 9000da0a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000da04:	68e3      	ldr	r3, [r4, #12]
9000da06:	3301      	adds	r3, #1
9000da08:	60e3      	str	r3, [r4, #12]
	}
9000da0a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000da0c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000da0e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000da10:	4403      	add	r3, r0
9000da12:	60e3      	str	r3, [r4, #12]
	}
9000da14:	bd70      	pop	{r4, r5, r6, pc}
9000da16:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da1a:	f383 8811 	msr	BASEPRI, r3
9000da1e:	f3bf 8f6f 	isb	sy
9000da22:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000da26:	e7fe      	b.n	9000da26 <xQueueTakeMutexRecursive+0x3e>

9000da28 <xQueueReceiveFromISR>:
{
9000da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000da2c:	b310      	cbz	r0, 9000da74 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000da2e:	460e      	mov	r6, r1
9000da30:	4604      	mov	r4, r0
9000da32:	4617      	mov	r7, r2
9000da34:	b191      	cbz	r1, 9000da5c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000da36:	f7ff f81f 	bl	9000ca78 <vPortValidateInterruptPriority>
	__asm volatile
9000da3a:	f3ef 8911 	mrs	r9, BASEPRI
9000da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da42:	f383 8811 	msr	BASEPRI, r3
9000da46:	f3bf 8f6f 	isb	sy
9000da4a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000da4e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000da50:	b9cd      	cbnz	r5, 9000da86 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000da52:	4628      	mov	r0, r5
	__asm volatile
9000da54:	f389 8811 	msr	BASEPRI, r9
}
9000da58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000da5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000da5e:	2b00      	cmp	r3, #0
9000da60:	d0e9      	beq.n	9000da36 <xQueueReceiveFromISR+0xe>
	__asm volatile
9000da62:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da66:	f383 8811 	msr	BASEPRI, r3
9000da6a:	f3bf 8f6f 	isb	sy
9000da6e:	f3bf 8f4f 	dsb	sy
9000da72:	e7fe      	b.n	9000da72 <xQueueReceiveFromISR+0x4a>
9000da74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da78:	f383 8811 	msr	BASEPRI, r3
9000da7c:	f3bf 8f6f 	isb	sy
9000da80:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000da84:	e7fe      	b.n	9000da84 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000da86:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000da8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000da8c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000da90:	b142      	cbz	r2, 9000daa4 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da92:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da94:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da96:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da98:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da9a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da9c:	d215      	bcs.n	9000daca <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000da9e:	4630      	mov	r0, r6
9000daa0:	f014 fad9 	bl	90022056 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000daa4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000daa6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000daaa:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000daac:	d009      	beq.n	9000dac2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000daae:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000dab2:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000dab4:	b25b      	sxtb	r3, r3
9000dab6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000daba:	f389 8811 	msr	BASEPRI, r9
}
9000dabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dac2:	6923      	ldr	r3, [r4, #16]
9000dac4:	b923      	cbnz	r3, 9000dad0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000dac6:	2001      	movs	r0, #1
9000dac8:	e7c4      	b.n	9000da54 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000daca:	6821      	ldr	r1, [r4, #0]
9000dacc:	60e1      	str	r1, [r4, #12]
9000dace:	e7e6      	b.n	9000da9e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dad0:	f104 0010 	add.w	r0, r4, #16
9000dad4:	f000 fe56 	bl	9000e784 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000dad8:	2f00      	cmp	r7, #0
9000dada:	d0f4      	beq.n	9000dac6 <xQueueReceiveFromISR+0x9e>
9000dadc:	2800      	cmp	r0, #0
9000dade:	d0f2      	beq.n	9000dac6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000dae0:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000dae2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000dae4:	603b      	str	r3, [r7, #0]
9000dae6:	e7b5      	b.n	9000da54 <xQueueReceiveFromISR+0x2c>

9000dae8 <vQueueDelete>:
	configASSERT( pxQueue );
9000dae8:	b1e0      	cbz	r0, 9000db24 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000daea:	4b21      	ldr	r3, [pc, #132]	; (9000db70 <vQueueDelete+0x88>)
9000daec:	685a      	ldr	r2, [r3, #4]
9000daee:	4290      	cmp	r0, r2
9000daf0:	d02b      	beq.n	9000db4a <vQueueDelete+0x62>
9000daf2:	68da      	ldr	r2, [r3, #12]
9000daf4:	4290      	cmp	r0, r2
9000daf6:	d02a      	beq.n	9000db4e <vQueueDelete+0x66>
9000daf8:	695a      	ldr	r2, [r3, #20]
9000dafa:	4290      	cmp	r0, r2
9000dafc:	d029      	beq.n	9000db52 <vQueueDelete+0x6a>
9000dafe:	69da      	ldr	r2, [r3, #28]
9000db00:	4290      	cmp	r0, r2
9000db02:	d028      	beq.n	9000db56 <vQueueDelete+0x6e>
9000db04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000db06:	4290      	cmp	r0, r2
9000db08:	d027      	beq.n	9000db5a <vQueueDelete+0x72>
9000db0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000db0c:	4290      	cmp	r0, r2
9000db0e:	d014      	beq.n	9000db3a <vQueueDelete+0x52>
9000db10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000db12:	4290      	cmp	r0, r2
9000db14:	d023      	beq.n	9000db5e <vQueueDelete+0x76>
9000db16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000db18:	4290      	cmp	r0, r2
9000db1a:	d022      	beq.n	9000db62 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000db1c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000db20:	b14b      	cbz	r3, 9000db36 <vQueueDelete+0x4e>
}
9000db22:	4770      	bx	lr
	__asm volatile
9000db24:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db28:	f383 8811 	msr	BASEPRI, r3
9000db2c:	f3bf 8f6f 	isb	sy
9000db30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000db34:	e7fe      	b.n	9000db34 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000db36:	f7fe bd51 	b.w	9000c5dc <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000db3a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000db3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000db40:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000db68 <vQueueDelete+0x80>
9000db44:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000db48:	e7e8      	b.n	9000db1c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000db4a:	2200      	movs	r2, #0
9000db4c:	e7f6      	b.n	9000db3c <vQueueDelete+0x54>
9000db4e:	2201      	movs	r2, #1
9000db50:	e7f4      	b.n	9000db3c <vQueueDelete+0x54>
9000db52:	2202      	movs	r2, #2
9000db54:	e7f2      	b.n	9000db3c <vQueueDelete+0x54>
9000db56:	2203      	movs	r2, #3
9000db58:	e7f0      	b.n	9000db3c <vQueueDelete+0x54>
9000db5a:	2204      	movs	r2, #4
9000db5c:	e7ee      	b.n	9000db3c <vQueueDelete+0x54>
9000db5e:	2206      	movs	r2, #6
9000db60:	e7ec      	b.n	9000db3c <vQueueDelete+0x54>
9000db62:	2207      	movs	r2, #7
9000db64:	e7ea      	b.n	9000db3c <vQueueDelete+0x54>
9000db66:	bf00      	nop
	...
9000db70:	24024b58 	.word	0x24024b58

9000db74 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000db74:	4b12      	ldr	r3, [pc, #72]	; (9000dbc0 <vQueueAddToRegistry+0x4c>)
9000db76:	681a      	ldr	r2, [r3, #0]
9000db78:	b17a      	cbz	r2, 9000db9a <vQueueAddToRegistry+0x26>
9000db7a:	689a      	ldr	r2, [r3, #8]
9000db7c:	b162      	cbz	r2, 9000db98 <vQueueAddToRegistry+0x24>
9000db7e:	691a      	ldr	r2, [r3, #16]
9000db80:	b192      	cbz	r2, 9000dba8 <vQueueAddToRegistry+0x34>
9000db82:	699a      	ldr	r2, [r3, #24]
9000db84:	b192      	cbz	r2, 9000dbac <vQueueAddToRegistry+0x38>
9000db86:	6a1a      	ldr	r2, [r3, #32]
9000db88:	b192      	cbz	r2, 9000dbb0 <vQueueAddToRegistry+0x3c>
9000db8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000db8c:	b192      	cbz	r2, 9000dbb4 <vQueueAddToRegistry+0x40>
9000db8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000db90:	b192      	cbz	r2, 9000dbb8 <vQueueAddToRegistry+0x44>
9000db92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000db94:	b192      	cbz	r2, 9000dbbc <vQueueAddToRegistry+0x48>
	}
9000db96:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000db98:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000db9a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000db9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000dba2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000dba6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000dba8:	2202      	movs	r2, #2
9000dbaa:	e7f6      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbac:	2203      	movs	r2, #3
9000dbae:	e7f4      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbb0:	2204      	movs	r2, #4
9000dbb2:	e7f2      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbb4:	2205      	movs	r2, #5
9000dbb6:	e7f0      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbb8:	2206      	movs	r2, #6
9000dbba:	e7ee      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbbc:	2207      	movs	r2, #7
9000dbbe:	e7ec      	b.n	9000db9a <vQueueAddToRegistry+0x26>
9000dbc0:	24024b58 	.word	0x24024b58

9000dbc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000dbc4:	b570      	push	{r4, r5, r6, lr}
9000dbc6:	4605      	mov	r5, r0
9000dbc8:	460e      	mov	r6, r1
9000dbca:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000dbcc:	f7fe fe22 	bl	9000c814 <vPortEnterCritical>
9000dbd0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000dbd4:	2bff      	cmp	r3, #255	; 0xff
9000dbd6:	d102      	bne.n	9000dbde <vQueueWaitForMessageRestricted+0x1a>
9000dbd8:	2300      	movs	r3, #0
9000dbda:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000dbde:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000dbe2:	2bff      	cmp	r3, #255	; 0xff
9000dbe4:	d102      	bne.n	9000dbec <vQueueWaitForMessageRestricted+0x28>
9000dbe6:	2300      	movs	r3, #0
9000dbe8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000dbec:	f7fe fe34 	bl	9000c858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000dbf0:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000dbf2:	2b00      	cmp	r3, #0
9000dbf4:	d043      	beq.n	9000dc7e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000dbf6:	f7fe fe0d 	bl	9000c814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000dbfa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000dbfe:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dc00:	2c00      	cmp	r4, #0
9000dc02:	dd14      	ble.n	9000dc2e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dc04:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000dc08:	e003      	b.n	9000dc12 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000dc0a:	1e63      	subs	r3, r4, #1
9000dc0c:	b2da      	uxtb	r2, r3
9000dc0e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dc10:	b16a      	cbz	r2, 9000dc2e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dc12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dc14:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dc16:	b153      	cbz	r3, 9000dc2e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dc18:	f000 fdb4 	bl	9000e784 <xTaskRemoveFromEventList>
9000dc1c:	2800      	cmp	r0, #0
9000dc1e:	d0f4      	beq.n	9000dc0a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000dc20:	f000 fe4e 	bl	9000e8c0 <vTaskMissedYield>
			--cTxLock;
9000dc24:	1e63      	subs	r3, r4, #1
9000dc26:	b2da      	uxtb	r2, r3
9000dc28:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dc2a:	2a00      	cmp	r2, #0
9000dc2c:	d1f1      	bne.n	9000dc12 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000dc2e:	23ff      	movs	r3, #255	; 0xff
9000dc30:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000dc34:	f7fe fe10 	bl	9000c858 <vPortExitCritical>
	taskENTER_CRITICAL();
9000dc38:	f7fe fdec 	bl	9000c814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000dc3c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000dc40:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dc42:	2c00      	cmp	r4, #0
9000dc44:	dd14      	ble.n	9000dc70 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dc46:	f105 0610 	add.w	r6, r5, #16
9000dc4a:	e003      	b.n	9000dc54 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000dc4c:	1e63      	subs	r3, r4, #1
9000dc4e:	b2da      	uxtb	r2, r3
9000dc50:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dc52:	b16a      	cbz	r2, 9000dc70 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dc54:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dc56:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dc58:	b153      	cbz	r3, 9000dc70 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dc5a:	f000 fd93 	bl	9000e784 <xTaskRemoveFromEventList>
9000dc5e:	2800      	cmp	r0, #0
9000dc60:	d0f4      	beq.n	9000dc4c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000dc62:	f000 fe2d 	bl	9000e8c0 <vTaskMissedYield>
				--cRxLock;
9000dc66:	1e63      	subs	r3, r4, #1
9000dc68:	b2da      	uxtb	r2, r3
9000dc6a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dc6c:	2a00      	cmp	r2, #0
9000dc6e:	d1f1      	bne.n	9000dc54 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000dc70:	23ff      	movs	r3, #255	; 0xff
9000dc72:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000dc7a:	f7fe bded 	b.w	9000c858 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000dc7e:	4622      	mov	r2, r4
9000dc80:	4631      	mov	r1, r6
9000dc82:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000dc86:	f000 fd33 	bl	9000e6f0 <vTaskPlaceOnEventListRestricted>
9000dc8a:	e7b4      	b.n	9000dbf6 <vQueueWaitForMessageRestricted+0x32>

9000dc8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000dc90:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000dc92:	f7fe fdbf 	bl	9000c814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000dc96:	4a34      	ldr	r2, [pc, #208]	; (9000dd68 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000dc98:	4e34      	ldr	r6, [pc, #208]	; (9000dd6c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000dc9a:	6813      	ldr	r3, [r2, #0]
9000dc9c:	3301      	adds	r3, #1
9000dc9e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000dca0:	6833      	ldr	r3, [r6, #0]
9000dca2:	2b00      	cmp	r3, #0
9000dca4:	d032      	beq.n	9000dd0c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000dca6:	4c32      	ldr	r4, [pc, #200]	; (9000dd70 <prvAddNewTaskToReadyList+0xe4>)
9000dca8:	6823      	ldr	r3, [r4, #0]
9000dcaa:	b33b      	cbz	r3, 9000dcfc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000dcac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000dcae:	4f31      	ldr	r7, [pc, #196]	; (9000dd74 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000dcb0:	4a31      	ldr	r2, [pc, #196]	; (9000dd78 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000dcb2:	4932      	ldr	r1, [pc, #200]	; (9000dd7c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000dcb4:	6813      	ldr	r3, [r2, #0]
9000dcb6:	3301      	adds	r3, #1
9000dcb8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000dcba:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000dcbc:	680b      	ldr	r3, [r1, #0]
9000dcbe:	4283      	cmp	r3, r0
9000dcc0:	d200      	bcs.n	9000dcc4 <prvAddNewTaskToReadyList+0x38>
9000dcc2:	6008      	str	r0, [r1, #0]
9000dcc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000dcc8:	1d29      	adds	r1, r5, #4
9000dcca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000dcce:	f7fe fcf9 	bl	9000c6c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000dcd2:	f7fe fdc1 	bl	9000c858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000dcd6:	6823      	ldr	r3, [r4, #0]
9000dcd8:	b173      	cbz	r3, 9000dcf8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000dcda:	6832      	ldr	r2, [r6, #0]
9000dcdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000dcde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000dce0:	429a      	cmp	r2, r3
9000dce2:	d209      	bcs.n	9000dcf8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000dce4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dcec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000dcf0:	f3bf 8f4f 	dsb	sy
9000dcf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000dcf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000dcfc:	6833      	ldr	r3, [r6, #0]
9000dcfe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000dd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000dd02:	4f1c      	ldr	r7, [pc, #112]	; (9000dd74 <prvAddNewTaskToReadyList+0xe8>)
9000dd04:	4283      	cmp	r3, r0
9000dd06:	d8d3      	bhi.n	9000dcb0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000dd08:	6035      	str	r5, [r6, #0]
9000dd0a:	e7d1      	b.n	9000dcb0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000dd0c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000dd0e:	6813      	ldr	r3, [r2, #0]
9000dd10:	2b01      	cmp	r3, #1
9000dd12:	d003      	beq.n	9000dd1c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000dd14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000dd16:	4f17      	ldr	r7, [pc, #92]	; (9000dd74 <prvAddNewTaskToReadyList+0xe8>)
9000dd18:	4c15      	ldr	r4, [pc, #84]	; (9000dd70 <prvAddNewTaskToReadyList+0xe4>)
9000dd1a:	e7c9      	b.n	9000dcb0 <prvAddNewTaskToReadyList+0x24>
9000dd1c:	4f15      	ldr	r7, [pc, #84]	; (9000dd74 <prvAddNewTaskToReadyList+0xe8>)
9000dd1e:	463c      	mov	r4, r7
9000dd20:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000dd24:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000dd26:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000dd28:	f7fe fcbc 	bl	9000c6a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000dd2c:	45a0      	cmp	r8, r4
9000dd2e:	d1f9      	bne.n	9000dd24 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000dd30:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000dd94 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000dd34:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000dd98 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000dd38:	4648      	mov	r0, r9
9000dd3a:	4c0d      	ldr	r4, [pc, #52]	; (9000dd70 <prvAddNewTaskToReadyList+0xe4>)
9000dd3c:	f7fe fcb2 	bl	9000c6a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000dd40:	4640      	mov	r0, r8
9000dd42:	f7fe fcaf 	bl	9000c6a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000dd46:	480e      	ldr	r0, [pc, #56]	; (9000dd80 <prvAddNewTaskToReadyList+0xf4>)
9000dd48:	f7fe fcac 	bl	9000c6a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000dd4c:	480d      	ldr	r0, [pc, #52]	; (9000dd84 <prvAddNewTaskToReadyList+0xf8>)
9000dd4e:	f7fe fca9 	bl	9000c6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000dd52:	480d      	ldr	r0, [pc, #52]	; (9000dd88 <prvAddNewTaskToReadyList+0xfc>)
9000dd54:	f7fe fca6 	bl	9000c6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000dd58:	4b0c      	ldr	r3, [pc, #48]	; (9000dd8c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000dd5a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000dd5c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000dd60:	4b0b      	ldr	r3, [pc, #44]	; (9000dd90 <prvAddNewTaskToReadyList+0x104>)
9000dd62:	f8c3 8000 	str.w	r8, [r3]
}
9000dd66:	e7a3      	b.n	9000dcb0 <prvAddNewTaskToReadyList+0x24>
9000dd68:	24025004 	.word	0x24025004
9000dd6c:	24024b98 	.word	0x24024b98
9000dd70:	24025060 	.word	0x24025060
9000dd74:	24024ba4 	.word	0x24024ba4
9000dd78:	24025010 	.word	0x24025010
9000dd7c:	24025014 	.word	0x24025014
9000dd80:	2402504c 	.word	0x2402504c
9000dd84:	24025078 	.word	0x24025078
9000dd88:	24025064 	.word	0x24025064
9000dd8c:	24024b9c 	.word	0x24024b9c
9000dd90:	24024ba0 	.word	0x24024ba0
9000dd94:	24025018 	.word	0x24025018
9000dd98:	2402502c 	.word	0x2402502c

9000dd9c <prvIdleTask>:
{
9000dd9c:	b580      	push	{r7, lr}
9000dd9e:	4c22      	ldr	r4, [pc, #136]	; (9000de28 <prvIdleTask+0x8c>)
				taskYIELD();
9000dda0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000dda4:	4e21      	ldr	r6, [pc, #132]	; (9000de2c <prvIdleTask+0x90>)
9000dda6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000ddaa:	4d21      	ldr	r5, [pc, #132]	; (9000de30 <prvIdleTask+0x94>)
9000ddac:	4f21      	ldr	r7, [pc, #132]	; (9000de34 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000ddae:	6823      	ldr	r3, [r4, #0]
9000ddb0:	b353      	cbz	r3, 9000de08 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000ddb2:	f7fe fd2f 	bl	9000c814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ddb6:	68f3      	ldr	r3, [r6, #12]
9000ddb8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000ddbc:	f10a 0004 	add.w	r0, sl, #4
9000ddc0:	f7fe fca8 	bl	9000c714 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000ddc4:	682b      	ldr	r3, [r5, #0]
9000ddc6:	3b01      	subs	r3, #1
9000ddc8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000ddca:	6823      	ldr	r3, [r4, #0]
9000ddcc:	3b01      	subs	r3, #1
9000ddce:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000ddd0:	f7fe fd42 	bl	9000c858 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000ddd4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000ddd8:	b163      	cbz	r3, 9000ddf4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000ddda:	2b01      	cmp	r3, #1
9000dddc:	d020      	beq.n	9000de20 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000ddde:	2b02      	cmp	r3, #2
9000dde0:	d0e5      	beq.n	9000ddae <prvIdleTask+0x12>
9000dde2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dde6:	f383 8811 	msr	BASEPRI, r3
9000ddea:	f3bf 8f6f 	isb	sy
9000ddee:	f3bf 8f4f 	dsb	sy
9000ddf2:	e7fe      	b.n	9000ddf2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000ddf4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000ddf8:	f7fe fbf0 	bl	9000c5dc <vPortFree>
				vPortFree( pxTCB );
9000ddfc:	4650      	mov	r0, sl
9000ddfe:	f7fe fbed 	bl	9000c5dc <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000de02:	6823      	ldr	r3, [r4, #0]
9000de04:	2b00      	cmp	r3, #0
9000de06:	d1d4      	bne.n	9000ddb2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000de08:	683b      	ldr	r3, [r7, #0]
9000de0a:	2b01      	cmp	r3, #1
9000de0c:	d905      	bls.n	9000de1a <prvIdleTask+0x7e>
				taskYIELD();
9000de0e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000de12:	f3bf 8f4f 	dsb	sy
9000de16:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000de1a:	f7f6 f8c5 	bl	90003fa8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000de1e:	e7c6      	b.n	9000ddae <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000de20:	4650      	mov	r0, sl
9000de22:	f7fe fbdb 	bl	9000c5dc <vPortFree>
9000de26:	e7c2      	b.n	9000ddae <prvIdleTask+0x12>
9000de28:	24025008 	.word	0x24025008
9000de2c:	24025078 	.word	0x24025078
9000de30:	24025004 	.word	0x24025004
9000de34:	24024ba4 	.word	0x24024ba4

9000de38 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000de38:	4b4a      	ldr	r3, [pc, #296]	; (9000df64 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000de3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000de3e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000de40:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000de42:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000de44:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000de46:	2e00      	cmp	r6, #0
9000de48:	d040      	beq.n	9000decc <xTaskIncrementTick.part.0+0x94>
9000de4a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000df78 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000de4e:	f8db 3000 	ldr.w	r3, [fp]
9000de52:	429e      	cmp	r6, r3
9000de54:	d347      	bcc.n	9000dee6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000de56:	4f44      	ldr	r7, [pc, #272]	; (9000df68 <xTaskIncrementTick.part.0+0x130>)
9000de58:	683b      	ldr	r3, [r7, #0]
9000de5a:	681d      	ldr	r5, [r3, #0]
9000de5c:	2d00      	cmp	r5, #0
9000de5e:	d077      	beq.n	9000df50 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000de60:	2500      	movs	r5, #0
9000de62:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000df7c <xTaskIncrementTick.part.0+0x144>
9000de66:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000df80 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000de6a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000df84 <xTaskIncrementTick.part.0+0x14c>
9000de6e:	e022      	b.n	9000deb6 <xTaskIncrementTick.part.0+0x7e>
9000de70:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000de72:	f7fe fc4f 	bl	9000c714 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000de76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000de78:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000de7c:	9901      	ldr	r1, [sp, #4]
9000de7e:	b113      	cbz	r3, 9000de86 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000de80:	f7fe fc48 	bl	9000c714 <uxListRemove>
9000de84:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000de86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000de88:	f8d8 2000 	ldr.w	r2, [r8]
9000de8c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000de90:	4293      	cmp	r3, r2
9000de92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000de96:	d901      	bls.n	9000de9c <xTaskIncrementTick.part.0+0x64>
9000de98:	f8c8 3000 	str.w	r3, [r8]
9000de9c:	f7fe fc12 	bl	9000c6c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000dea0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000dea4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000dea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000dea8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000deaa:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000deac:	4291      	cmp	r1, r2
9000deae:	bf28      	it	cs
9000deb0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000deb2:	2b00      	cmp	r3, #0
9000deb4:	d050      	beq.n	9000df58 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000deb6:	683b      	ldr	r3, [r7, #0]
9000deb8:	68db      	ldr	r3, [r3, #12]
9000deba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000debc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000debe:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000dec0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000dec2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000dec4:	d2d4      	bcs.n	9000de70 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000dec6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000deca:	e011      	b.n	9000def0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000decc:	4b26      	ldr	r3, [pc, #152]	; (9000df68 <xTaskIncrementTick.part.0+0x130>)
9000dece:	681a      	ldr	r2, [r3, #0]
9000ded0:	6812      	ldr	r2, [r2, #0]
9000ded2:	b30a      	cbz	r2, 9000df18 <xTaskIncrementTick.part.0+0xe0>
9000ded4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ded8:	f383 8811 	msr	BASEPRI, r3
9000dedc:	f3bf 8f6f 	isb	sy
9000dee0:	f3bf 8f4f 	dsb	sy
9000dee4:	e7fe      	b.n	9000dee4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000dee6:	2500      	movs	r5, #0
9000dee8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000df7c <xTaskIncrementTick.part.0+0x144>
9000deec:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000df80 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000def0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000def4:	491d      	ldr	r1, [pc, #116]	; (9000df6c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000def6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000def8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000defc:	009b      	lsls	r3, r3, #2
9000defe:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000df02:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000df04:	2a02      	cmp	r2, #2
9000df06:	bf28      	it	cs
9000df08:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000df0a:	2b00      	cmp	r3, #0
}
9000df0c:	bf0c      	ite	eq
9000df0e:	4628      	moveq	r0, r5
9000df10:	2001      	movne	r0, #1
9000df12:	b003      	add	sp, #12
9000df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000df18:	4a15      	ldr	r2, [pc, #84]	; (9000df70 <xTaskIncrementTick.part.0+0x138>)
9000df1a:	6818      	ldr	r0, [r3, #0]
9000df1c:	6811      	ldr	r1, [r2, #0]
9000df1e:	6019      	str	r1, [r3, #0]
9000df20:	4914      	ldr	r1, [pc, #80]	; (9000df74 <xTaskIncrementTick.part.0+0x13c>)
9000df22:	6010      	str	r0, [r2, #0]
9000df24:	680a      	ldr	r2, [r1, #0]
9000df26:	3201      	adds	r2, #1
9000df28:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000df2a:	681a      	ldr	r2, [r3, #0]
9000df2c:	6812      	ldr	r2, [r2, #0]
9000df2e:	b932      	cbnz	r2, 9000df3e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000df30:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000df78 <xTaskIncrementTick.part.0+0x140>
9000df34:	f04f 33ff 	mov.w	r3, #4294967295
9000df38:	f8cb 3000 	str.w	r3, [fp]
9000df3c:	e787      	b.n	9000de4e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000df3e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000df40:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000df78 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000df44:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000df46:	68db      	ldr	r3, [r3, #12]
9000df48:	685b      	ldr	r3, [r3, #4]
9000df4a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000df4e:	e77e      	b.n	9000de4e <xTaskIncrementTick.part.0+0x16>
9000df50:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000df7c <xTaskIncrementTick.part.0+0x144>
9000df54:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000df80 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000df58:	f04f 33ff 	mov.w	r3, #4294967295
9000df5c:	f8cb 3000 	str.w	r3, [fp]
					break;
9000df60:	e7c6      	b.n	9000def0 <xTaskIncrementTick.part.0+0xb8>
9000df62:	bf00      	nop
9000df64:	2402508c 	.word	0x2402508c
9000df68:	24024b9c 	.word	0x24024b9c
9000df6c:	24025090 	.word	0x24025090
9000df70:	24024ba0 	.word	0x24024ba0
9000df74:	24025044 	.word	0x24025044
9000df78:	24025040 	.word	0x24025040
9000df7c:	24024ba4 	.word	0x24024ba4
9000df80:	24024b98 	.word	0x24024b98
9000df84:	24025014 	.word	0x24025014

9000df88 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000df88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000df8c:	4d41      	ldr	r5, [pc, #260]	; (9000e094 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000df8e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000df90:	f7fe fc40 	bl	9000c814 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000df94:	682b      	ldr	r3, [r5, #0]
9000df96:	3b01      	subs	r3, #1
9000df98:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000df9a:	682b      	ldr	r3, [r5, #0]
9000df9c:	2b00      	cmp	r3, #0
9000df9e:	d161      	bne.n	9000e064 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000dfa0:	4b3d      	ldr	r3, [pc, #244]	; (9000e098 <xTaskResumeAll.part.0+0x110>)
9000dfa2:	681b      	ldr	r3, [r3, #0]
9000dfa4:	2b00      	cmp	r3, #0
9000dfa6:	d05d      	beq.n	9000e064 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000dfa8:	4e3c      	ldr	r6, [pc, #240]	; (9000e09c <xTaskResumeAll.part.0+0x114>)
9000dfaa:	6833      	ldr	r3, [r6, #0]
9000dfac:	2b00      	cmp	r3, #0
9000dfae:	d06e      	beq.n	9000e08e <xTaskResumeAll.part.0+0x106>
9000dfb0:	4f3b      	ldr	r7, [pc, #236]	; (9000e0a0 <xTaskResumeAll.part.0+0x118>)
9000dfb2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000e0b0 <xTaskResumeAll.part.0+0x128>
9000dfb6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000e0b4 <xTaskResumeAll.part.0+0x12c>
9000dfba:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000e0b8 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dfbe:	68f3      	ldr	r3, [r6, #12]
9000dfc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000dfc2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000dfc6:	f104 0018 	add.w	r0, r4, #24
9000dfca:	f7fe fba3 	bl	9000c714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000dfce:	4658      	mov	r0, fp
9000dfd0:	f7fe fba0 	bl	9000c714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000dfd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000dfd6:	683a      	ldr	r2, [r7, #0]
9000dfd8:	4659      	mov	r1, fp
9000dfda:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000dfde:	4293      	cmp	r3, r2
9000dfe0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000dfe4:	d900      	bls.n	9000dfe8 <xTaskResumeAll.part.0+0x60>
9000dfe6:	603b      	str	r3, [r7, #0]
9000dfe8:	f7fe fb6c 	bl	9000c6c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000dfec:	f8d8 3000 	ldr.w	r3, [r8]
9000dff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000dff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000dff4:	429a      	cmp	r2, r3
9000dff6:	d33d      	bcc.n	9000e074 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000dff8:	2301      	movs	r3, #1
9000dffa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000dffe:	6833      	ldr	r3, [r6, #0]
9000e000:	2b00      	cmp	r3, #0
9000e002:	d1dc      	bne.n	9000dfbe <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e004:	4b27      	ldr	r3, [pc, #156]	; (9000e0a4 <xTaskResumeAll.part.0+0x11c>)
9000e006:	681a      	ldr	r2, [r3, #0]
9000e008:	6812      	ldr	r2, [r2, #0]
9000e00a:	2a00      	cmp	r2, #0
9000e00c:	d03a      	beq.n	9000e084 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e00e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e010:	4b25      	ldr	r3, [pc, #148]	; (9000e0a8 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e012:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e014:	68d2      	ldr	r2, [r2, #12]
9000e016:	6852      	ldr	r2, [r2, #4]
9000e018:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000e01a:	4e24      	ldr	r6, [pc, #144]	; (9000e0ac <xTaskResumeAll.part.0+0x124>)
9000e01c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000e01e:	b194      	cbz	r4, 9000e046 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000e020:	2701      	movs	r7, #1
9000e022:	e006      	b.n	9000e032 <xTaskResumeAll.part.0+0xaa>
9000e024:	f7ff ff08 	bl	9000de38 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000e028:	b108      	cbz	r0, 9000e02e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000e02a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e02e:	3c01      	subs	r4, #1
9000e030:	d008      	beq.n	9000e044 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e032:	682b      	ldr	r3, [r5, #0]
9000e034:	2b00      	cmp	r3, #0
9000e036:	d0f5      	beq.n	9000e024 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000e038:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e03a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000e03c:	f103 0301 	add.w	r3, r3, #1
9000e040:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e042:	d1f6      	bne.n	9000e032 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000e044:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000e046:	f8da 3000 	ldr.w	r3, [sl]
9000e04a:	b15b      	cbz	r3, 9000e064 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000e04c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e054:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e058:	f3bf 8f4f 	dsb	sy
9000e05c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000e060:	2001      	movs	r0, #1
9000e062:	e000      	b.n	9000e066 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000e064:	2000      	movs	r0, #0
9000e066:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000e068:	f7fe fbf6 	bl	9000c858 <vPortExitCritical>
}
9000e06c:	9801      	ldr	r0, [sp, #4]
9000e06e:	b003      	add	sp, #12
9000e070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e074:	6833      	ldr	r3, [r6, #0]
9000e076:	2b00      	cmp	r3, #0
9000e078:	d1a1      	bne.n	9000dfbe <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e07a:	4b0a      	ldr	r3, [pc, #40]	; (9000e0a4 <xTaskResumeAll.part.0+0x11c>)
9000e07c:	681a      	ldr	r2, [r3, #0]
9000e07e:	6812      	ldr	r2, [r2, #0]
9000e080:	2a00      	cmp	r2, #0
9000e082:	d1c4      	bne.n	9000e00e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000e084:	4b08      	ldr	r3, [pc, #32]	; (9000e0a8 <xTaskResumeAll.part.0+0x120>)
9000e086:	f04f 32ff 	mov.w	r2, #4294967295
9000e08a:	601a      	str	r2, [r3, #0]
9000e08c:	e7c5      	b.n	9000e01a <xTaskResumeAll.part.0+0x92>
9000e08e:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000e0b8 <xTaskResumeAll.part.0+0x130>
9000e092:	e7c2      	b.n	9000e01a <xTaskResumeAll.part.0+0x92>
9000e094:	2402500c 	.word	0x2402500c
9000e098:	24025004 	.word	0x24025004
9000e09c:	2402504c 	.word	0x2402504c
9000e0a0:	24025014 	.word	0x24025014
9000e0a4:	24024b9c 	.word	0x24024b9c
9000e0a8:	24025040 	.word	0x24025040
9000e0ac:	24025048 	.word	0x24025048
9000e0b0:	24024ba4 	.word	0x24024ba4
9000e0b4:	24024b98 	.word	0x24024b98
9000e0b8:	24025090 	.word	0x24025090

9000e0bc <xTaskCreateStatic>:
	{
9000e0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e0c0:	b083      	sub	sp, #12
9000e0c2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000e0c4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
9000e0c8:	b1bb      	cbz	r3, 9000e0fa <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000e0ca:	b16c      	cbz	r4, 9000e0e8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000e0cc:	2360      	movs	r3, #96	; 0x60
9000e0ce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000e0d0:	9b01      	ldr	r3, [sp, #4]
9000e0d2:	2b60      	cmp	r3, #96	; 0x60
9000e0d4:	d01a      	beq.n	9000e10c <xTaskCreateStatic+0x50>
9000e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0da:	f383 8811 	msr	BASEPRI, r3
9000e0de:	f3bf 8f6f 	isb	sy
9000e0e2:	f3bf 8f4f 	dsb	sy
9000e0e6:	e7fe      	b.n	9000e0e6 <xTaskCreateStatic+0x2a>
9000e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0ec:	f383 8811 	msr	BASEPRI, r3
9000e0f0:	f3bf 8f6f 	isb	sy
9000e0f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000e0f8:	e7fe      	b.n	9000e0f8 <xTaskCreateStatic+0x3c>
9000e0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0fe:	f383 8811 	msr	BASEPRI, r3
9000e102:	f3bf 8f6f 	isb	sy
9000e106:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000e10a:	e7fe      	b.n	9000e10a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e10e:	0096      	lsls	r6, r2, #2
9000e110:	4607      	mov	r7, r0
9000e112:	460d      	mov	r5, r1
9000e114:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e116:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000e118:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e11a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e11c:	4632      	mov	r2, r6
9000e11e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e120:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e124:	f013 feb6 	bl	90021e94 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e128:	1f32      	subs	r2, r6, #4
9000e12a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000e12c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000e12e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
9000e132:	2d00      	cmp	r5, #0
9000e134:	d069      	beq.n	9000e20a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e136:	782b      	ldrb	r3, [r5, #0]
9000e138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000e13c:	2b00      	cmp	r3, #0
9000e13e:	d03b      	beq.n	9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e140:	786b      	ldrb	r3, [r5, #1]
9000e142:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000e146:	2b00      	cmp	r3, #0
9000e148:	d036      	beq.n	9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e14a:	78ab      	ldrb	r3, [r5, #2]
9000e14c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000e150:	b393      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e152:	78eb      	ldrb	r3, [r5, #3]
9000e154:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000e158:	b373      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e15a:	792b      	ldrb	r3, [r5, #4]
9000e15c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000e160:	b353      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e162:	796b      	ldrb	r3, [r5, #5]
9000e164:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000e168:	b333      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e16a:	79ab      	ldrb	r3, [r5, #6]
9000e16c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000e170:	b313      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e172:	79eb      	ldrb	r3, [r5, #7]
9000e174:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000e178:	b1f3      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e17a:	7a2b      	ldrb	r3, [r5, #8]
9000e17c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000e180:	b1d3      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e182:	7a6b      	ldrb	r3, [r5, #9]
9000e184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000e188:	b1b3      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e18a:	7aab      	ldrb	r3, [r5, #10]
9000e18c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000e190:	b193      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e192:	7aeb      	ldrb	r3, [r5, #11]
9000e194:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000e198:	b173      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e19a:	7b2b      	ldrb	r3, [r5, #12]
9000e19c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000e1a0:	b153      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e1a2:	7b6b      	ldrb	r3, [r5, #13]
9000e1a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000e1a8:	b133      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e1aa:	7bab      	ldrb	r3, [r5, #14]
9000e1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000e1b0:	b113      	cbz	r3, 9000e1b8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e1b2:	7beb      	ldrb	r3, [r5, #15]
9000e1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e1b8:	2300      	movs	r3, #0
9000e1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e1be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000e1c0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e1c2:	1d20      	adds	r0, r4, #4
9000e1c4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000e1c6:	6526      	str	r6, [r4, #80]	; 0x50
9000e1c8:	bf28      	it	cs
9000e1ca:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000e1cc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000e1ce:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e1d0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e1d4:	f7fe fa72 	bl	9000c6bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e1d8:	f104 0018 	add.w	r0, r4, #24
9000e1dc:	f7fe fa6e 	bl	9000c6bc <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e1e0:	4642      	mov	r2, r8
9000e1e2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000e1e4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e1e6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e1e8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e1ea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e1ec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e1ee:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e1f0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e1f4:	f7fe fae0 	bl	9000c7b8 <pxPortInitialiseStack>
9000e1f8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000e1fa:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e1fc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e1fe:	f7ff fd45 	bl	9000dc8c <prvAddNewTaskToReadyList>
	}
9000e202:	4620      	mov	r0, r4
9000e204:	b003      	add	sp, #12
9000e206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000e20a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000e20e:	e7d6      	b.n	9000e1be <xTaskCreateStatic+0x102>

9000e210 <xTaskCreate>:
	{
9000e210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000e214:	0096      	lsls	r6, r2, #2
	{
9000e216:	4680      	mov	r8, r0
9000e218:	460d      	mov	r5, r1
9000e21a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000e21c:	4630      	mov	r0, r6
9000e21e:	f7fe f91f 	bl	9000c460 <pvPortMalloc>
			if( pxStack != NULL )
9000e222:	2800      	cmp	r0, #0
9000e224:	f000 8083 	beq.w	9000e32e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000e228:	4607      	mov	r7, r0
9000e22a:	2060      	movs	r0, #96	; 0x60
9000e22c:	f7fe f918 	bl	9000c460 <pvPortMalloc>
				if( pxNewTCB != NULL )
9000e230:	4604      	mov	r4, r0
9000e232:	2800      	cmp	r0, #0
9000e234:	d07f      	beq.n	9000e336 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000e236:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
9000e238:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e23a:	4632      	mov	r2, r6
9000e23c:	4638      	mov	r0, r7
9000e23e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000e240:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e244:	f013 fe26 	bl	90021e94 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e248:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9000e24c:	2d00      	cmp	r5, #0
9000e24e:	d078      	beq.n	9000e342 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e250:	782b      	ldrb	r3, [r5, #0]
9000e252:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000e256:	2b00      	cmp	r3, #0
9000e258:	d03b      	beq.n	9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e25a:	786b      	ldrb	r3, [r5, #1]
9000e25c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000e260:	2b00      	cmp	r3, #0
9000e262:	d036      	beq.n	9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e264:	78ab      	ldrb	r3, [r5, #2]
9000e266:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000e26a:	b393      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e26c:	78eb      	ldrb	r3, [r5, #3]
9000e26e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000e272:	b373      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e274:	792b      	ldrb	r3, [r5, #4]
9000e276:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000e27a:	b353      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e27c:	796b      	ldrb	r3, [r5, #5]
9000e27e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000e282:	b333      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e284:	79ab      	ldrb	r3, [r5, #6]
9000e286:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000e28a:	b313      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e28c:	79eb      	ldrb	r3, [r5, #7]
9000e28e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000e292:	b1f3      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e294:	7a2b      	ldrb	r3, [r5, #8]
9000e296:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000e29a:	b1d3      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e29c:	7a6b      	ldrb	r3, [r5, #9]
9000e29e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000e2a2:	b1b3      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2a4:	7aab      	ldrb	r3, [r5, #10]
9000e2a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000e2aa:	b193      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2ac:	7aeb      	ldrb	r3, [r5, #11]
9000e2ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000e2b2:	b173      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2b4:	7b2b      	ldrb	r3, [r5, #12]
9000e2b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000e2ba:	b153      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2bc:	7b6b      	ldrb	r3, [r5, #13]
9000e2be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000e2c2:	b133      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2c4:	7bab      	ldrb	r3, [r5, #14]
9000e2c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000e2ca:	b113      	cbz	r3, 9000e2d2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e2cc:	7beb      	ldrb	r3, [r5, #15]
9000e2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e2d2:	2300      	movs	r3, #0
9000e2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e2d8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000e2da:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e2dc:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e2de:	3e04      	subs	r6, #4
9000e2e0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000e2e2:	6527      	str	r7, [r4, #80]	; 0x50
9000e2e4:	bf28      	it	cs
9000e2e6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000e2e8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000e2ea:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e2ec:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e2f0:	f7fe f9e4 	bl	9000c6bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e2f4:	f104 0018 	add.w	r0, r4, #24
9000e2f8:	f7fe f9e0 	bl	9000c6bc <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e2fc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
9000e300:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e302:	464a      	mov	r2, r9
9000e304:	4641      	mov	r1, r8
9000e306:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e30a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e30c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e30e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e310:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e312:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e316:	f7fe fa4f 	bl	9000c7b8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9000e31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e31c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000e31e:	b103      	cbz	r3, 9000e322 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000e320:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e322:	4620      	mov	r0, r4
9000e324:	f7ff fcb2 	bl	9000dc8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000e328:	2001      	movs	r0, #1
	}
9000e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000e32e:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000e332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
9000e336:	4638      	mov	r0, r7
9000e338:	f7fe f950 	bl	9000c5dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000e33c:	f04f 30ff 	mov.w	r0, #4294967295
9000e340:	e7f3      	b.n	9000e32a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000e342:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000e346:	e7c7      	b.n	9000e2d8 <xTaskCreate+0xc8>

9000e348 <vTaskDelay>:
	{
9000e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000e34a:	b950      	cbnz	r0, 9000e362 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000e34c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e354:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e358:	f3bf 8f4f 	dsb	sy
9000e35c:	f3bf 8f6f 	isb	sy
	}
9000e360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000e362:	4d1e      	ldr	r5, [pc, #120]	; (9000e3dc <vTaskDelay+0x94>)
9000e364:	682b      	ldr	r3, [r5, #0]
9000e366:	b143      	cbz	r3, 9000e37a <vTaskDelay+0x32>
9000e368:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e36c:	f383 8811 	msr	BASEPRI, r3
9000e370:	f3bf 8f6f 	isb	sy
9000e374:	f3bf 8f4f 	dsb	sy
9000e378:	e7fe      	b.n	9000e378 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000e37a:	682b      	ldr	r3, [r5, #0]
9000e37c:	4604      	mov	r4, r0
9000e37e:	3301      	adds	r3, #1
9000e380:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000e382:	4b17      	ldr	r3, [pc, #92]	; (9000e3e0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e384:	4e17      	ldr	r6, [pc, #92]	; (9000e3e4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000e386:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e388:	6830      	ldr	r0, [r6, #0]
9000e38a:	3004      	adds	r0, #4
9000e38c:	f7fe f9c2 	bl	9000c714 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e390:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e392:	6833      	ldr	r3, [r6, #0]
9000e394:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000e396:	d315      	bcc.n	9000e3c4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e398:	4b13      	ldr	r3, [pc, #76]	; (9000e3e8 <vTaskDelay+0xa0>)
9000e39a:	6818      	ldr	r0, [r3, #0]
9000e39c:	6831      	ldr	r1, [r6, #0]
9000e39e:	3104      	adds	r1, #4
9000e3a0:	f7fe f9a0 	bl	9000c6e4 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000e3a4:	682b      	ldr	r3, [r5, #0]
9000e3a6:	b943      	cbnz	r3, 9000e3ba <vTaskDelay+0x72>
9000e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e3ac:	f383 8811 	msr	BASEPRI, r3
9000e3b0:	f3bf 8f6f 	isb	sy
9000e3b4:	f3bf 8f4f 	dsb	sy
9000e3b8:	e7fe      	b.n	9000e3b8 <vTaskDelay+0x70>
9000e3ba:	f7ff fde5 	bl	9000df88 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000e3be:	2800      	cmp	r0, #0
9000e3c0:	d0c4      	beq.n	9000e34c <vTaskDelay+0x4>
	}
9000e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e3c4:	4b09      	ldr	r3, [pc, #36]	; (9000e3ec <vTaskDelay+0xa4>)
9000e3c6:	6818      	ldr	r0, [r3, #0]
9000e3c8:	6831      	ldr	r1, [r6, #0]
9000e3ca:	3104      	adds	r1, #4
9000e3cc:	f7fe f98a 	bl	9000c6e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000e3d0:	4b07      	ldr	r3, [pc, #28]	; (9000e3f0 <vTaskDelay+0xa8>)
9000e3d2:	681a      	ldr	r2, [r3, #0]
9000e3d4:	4294      	cmp	r4, r2
9000e3d6:	d2e5      	bcs.n	9000e3a4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000e3d8:	601c      	str	r4, [r3, #0]
9000e3da:	e7e3      	b.n	9000e3a4 <vTaskDelay+0x5c>
9000e3dc:	2402500c 	.word	0x2402500c
9000e3e0:	2402508c 	.word	0x2402508c
9000e3e4:	24024b98 	.word	0x24024b98
9000e3e8:	24024ba0 	.word	0x24024ba0
9000e3ec:	24024b9c 	.word	0x24024b9c
9000e3f0:	24025040 	.word	0x24025040

9000e3f4 <vTaskStartScheduler>:
{
9000e3f4:	b570      	push	{r4, r5, r6, lr}
9000e3f6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000e3f8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000e3fa:	4668      	mov	r0, sp
9000e3fc:	aa02      	add	r2, sp, #8
9000e3fe:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000e400:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000e404:	f7fe f80e 	bl	9000c424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000e408:	9d00      	ldr	r5, [sp, #0]
9000e40a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000e40e:	b1b8      	cbz	r0, 9000e440 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
9000e410:	b16d      	cbz	r5, 9000e42e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000e412:	2260      	movs	r2, #96	; 0x60
9000e414:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000e416:	9a03      	ldr	r2, [sp, #12]
9000e418:	2a60      	cmp	r2, #96	; 0x60
9000e41a:	d01a      	beq.n	9000e452 <vTaskStartScheduler+0x5e>
9000e41c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e420:	f383 8811 	msr	BASEPRI, r3
9000e424:	f3bf 8f6f 	isb	sy
9000e428:	f3bf 8f4f 	dsb	sy
9000e42c:	e7fe      	b.n	9000e42c <vTaskStartScheduler+0x38>
9000e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e432:	f383 8811 	msr	BASEPRI, r3
9000e436:	f3bf 8f6f 	isb	sy
9000e43a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000e43e:	e7fe      	b.n	9000e43e <vTaskStartScheduler+0x4a>
9000e440:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e444:	f383 8811 	msr	BASEPRI, r3
9000e448:	f3bf 8f6f 	isb	sy
9000e44c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000e450:	e7fe      	b.n	9000e450 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e452:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e454:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e456:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e458:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e45a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e45c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000e460:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e462:	f013 fd17 	bl	90021e94 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e466:	1f33      	subs	r3, r6, #4
9000e468:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e46a:	492a      	ldr	r1, [pc, #168]	; (9000e514 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e46c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e46e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e470:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000e474:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e476:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000e47a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9000e47e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000e480:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e484:	f7fe f91a 	bl	9000c6bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e488:	f105 0018 	add.w	r0, r5, #24
9000e48c:	f7fe f916 	bl	9000c6bc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e490:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e492:	4622      	mov	r2, r4
9000e494:	4920      	ldr	r1, [pc, #128]	; (9000e518 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000e496:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e498:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e49a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e49c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e49e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e4a0:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e4a2:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e4a6:	f7fe f987 	bl	9000c7b8 <pxPortInitialiseStack>
9000e4aa:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000e4ac:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e4ae:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e4b0:	f7ff fbec 	bl	9000dc8c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000e4b4:	f000 fca4 	bl	9000ee00 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000e4b8:	2801      	cmp	r0, #1
9000e4ba:	d00c      	beq.n	9000e4d6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000e4bc:	3001      	adds	r0, #1
9000e4be:	d001      	beq.n	9000e4c4 <vTaskStartScheduler+0xd0>
}
9000e4c0:	b004      	add	sp, #16
9000e4c2:	bd70      	pop	{r4, r5, r6, pc}
9000e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e4c8:	f383 8811 	msr	BASEPRI, r3
9000e4cc:	f3bf 8f6f 	isb	sy
9000e4d0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000e4d4:	e7fe      	b.n	9000e4d4 <vTaskStartScheduler+0xe0>
9000e4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e4da:	f383 8811 	msr	BASEPRI, r3
9000e4de:	f3bf 8f6f 	isb	sy
9000e4e2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000e4e6:	4b0d      	ldr	r3, [pc, #52]	; (9000e51c <vTaskStartScheduler+0x128>)
9000e4e8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000e4ec:	490c      	ldr	r1, [pc, #48]	; (9000e520 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000e4ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000e4f0:	4b0c      	ldr	r3, [pc, #48]	; (9000e524 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000e4f2:	4a0d      	ldr	r2, [pc, #52]	; (9000e528 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000e4f4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000e4f6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000e4f8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000e4fa:	b143      	cbz	r3, 9000e50e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000e4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e4fe:	b10b      	cbz	r3, 9000e504 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e500:	2000      	movs	r0, #0
9000e502:	4798      	blx	r3
}
9000e504:	b004      	add	sp, #16
9000e506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000e50a:	f7fe ba15 	b.w	9000c938 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000e50e:	6813      	ldr	r3, [r2, #0]
9000e510:	e7f4      	b.n	9000e4fc <vTaskStartScheduler+0x108>
9000e512:	bf00      	nop
9000e514:	454c4449 	.word	0x454c4449
9000e518:	9000dd9d 	.word	0x9000dd9d
9000e51c:	24025040 	.word	0x24025040
9000e520:	24025060 	.word	0x24025060
9000e524:	2402508c 	.word	0x2402508c
9000e528:	24024b98 	.word	0x24024b98

9000e52c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000e52c:	4a02      	ldr	r2, [pc, #8]	; (9000e538 <vTaskSuspendAll+0xc>)
9000e52e:	6813      	ldr	r3, [r2, #0]
9000e530:	3301      	adds	r3, #1
9000e532:	6013      	str	r3, [r2, #0]
}
9000e534:	4770      	bx	lr
9000e536:	bf00      	nop
9000e538:	2402500c 	.word	0x2402500c

9000e53c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000e53c:	4b06      	ldr	r3, [pc, #24]	; (9000e558 <xTaskResumeAll+0x1c>)
9000e53e:	681b      	ldr	r3, [r3, #0]
9000e540:	b943      	cbnz	r3, 9000e554 <xTaskResumeAll+0x18>
9000e542:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e546:	f383 8811 	msr	BASEPRI, r3
9000e54a:	f3bf 8f6f 	isb	sy
9000e54e:	f3bf 8f4f 	dsb	sy
9000e552:	e7fe      	b.n	9000e552 <xTaskResumeAll+0x16>
9000e554:	f7ff bd18 	b.w	9000df88 <xTaskResumeAll.part.0>
9000e558:	2402500c 	.word	0x2402500c

9000e55c <xTaskGetTickCount>:
		xTicks = xTickCount;
9000e55c:	4b01      	ldr	r3, [pc, #4]	; (9000e564 <xTaskGetTickCount+0x8>)
9000e55e:	6818      	ldr	r0, [r3, #0]
}
9000e560:	4770      	bx	lr
9000e562:	bf00      	nop
9000e564:	2402508c 	.word	0x2402508c

9000e568 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e568:	4b05      	ldr	r3, [pc, #20]	; (9000e580 <xTaskIncrementTick+0x18>)
9000e56a:	681b      	ldr	r3, [r3, #0]
9000e56c:	b90b      	cbnz	r3, 9000e572 <xTaskIncrementTick+0xa>
9000e56e:	f7ff bc63 	b.w	9000de38 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000e572:	4a04      	ldr	r2, [pc, #16]	; (9000e584 <xTaskIncrementTick+0x1c>)
}
9000e574:	2000      	movs	r0, #0
		++xPendedTicks;
9000e576:	6813      	ldr	r3, [r2, #0]
9000e578:	3301      	adds	r3, #1
9000e57a:	6013      	str	r3, [r2, #0]
}
9000e57c:	4770      	bx	lr
9000e57e:	bf00      	nop
9000e580:	2402500c 	.word	0x2402500c
9000e584:	24025048 	.word	0x24025048

9000e588 <vTaskSetApplicationTaskTag>:
	{
9000e588:	b538      	push	{r3, r4, r5, lr}
9000e58a:	460d      	mov	r5, r1
		if( xTask == NULL )
9000e58c:	b138      	cbz	r0, 9000e59e <vTaskSetApplicationTaskTag+0x16>
9000e58e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000e590:	f7fe f940 	bl	9000c814 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000e594:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000e596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000e59a:	f7fe b95d 	b.w	9000c858 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000e59e:	4b04      	ldr	r3, [pc, #16]	; (9000e5b0 <vTaskSetApplicationTaskTag+0x28>)
9000e5a0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000e5a2:	f7fe f937 	bl	9000c814 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000e5a6:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000e5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000e5ac:	f7fe b954 	b.w	9000c858 <vPortExitCritical>
9000e5b0:	24024b98 	.word	0x24024b98

9000e5b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000e5b4:	4b27      	ldr	r3, [pc, #156]	; (9000e654 <vTaskSwitchContext+0xa0>)
9000e5b6:	681b      	ldr	r3, [r3, #0]
9000e5b8:	b11b      	cbz	r3, 9000e5c2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000e5ba:	4b27      	ldr	r3, [pc, #156]	; (9000e658 <vTaskSwitchContext+0xa4>)
9000e5bc:	2201      	movs	r2, #1
9000e5be:	601a      	str	r2, [r3, #0]
9000e5c0:	4770      	bx	lr
{
9000e5c2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000e5c4:	4a24      	ldr	r2, [pc, #144]	; (9000e658 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
9000e5c6:	4c25      	ldr	r4, [pc, #148]	; (9000e65c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
9000e5c8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000e5ca:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000e5cc:	2b00      	cmp	r3, #0
9000e5ce:	d036      	beq.n	9000e63e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
9000e5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e5d2:	b10b      	cbz	r3, 9000e5d8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e5d4:	2001      	movs	r0, #1
9000e5d6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e5d8:	4d21      	ldr	r5, [pc, #132]	; (9000e660 <vTaskSwitchContext+0xac>)
9000e5da:	4922      	ldr	r1, [pc, #136]	; (9000e664 <vTaskSwitchContext+0xb0>)
9000e5dc:	682b      	ldr	r3, [r5, #0]
9000e5de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000e5e2:	0098      	lsls	r0, r3, #2
9000e5e4:	0092      	lsls	r2, r2, #2
9000e5e6:	588a      	ldr	r2, [r1, r2]
9000e5e8:	b942      	cbnz	r2, 9000e5fc <vTaskSwitchContext+0x48>
9000e5ea:	b1fb      	cbz	r3, 9000e62c <vTaskSwitchContext+0x78>
9000e5ec:	3b01      	subs	r3, #1
9000e5ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000e5f2:	0098      	lsls	r0, r3, #2
9000e5f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000e5f8:	2a00      	cmp	r2, #0
9000e5fa:	d0f6      	beq.n	9000e5ea <vTaskSwitchContext+0x36>
9000e5fc:	4418      	add	r0, r3
9000e5fe:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
9000e602:	f8dc 1004 	ldr.w	r1, [ip, #4]
9000e606:	4662      	mov	r2, ip
9000e608:	6849      	ldr	r1, [r1, #4]
9000e60a:	3208      	adds	r2, #8
9000e60c:	4291      	cmp	r1, r2
9000e60e:	f8cc 1004 	str.w	r1, [ip, #4]
9000e612:	d01b      	beq.n	9000e64c <vTaskSwitchContext+0x98>
9000e614:	68ca      	ldr	r2, [r1, #12]
9000e616:	6022      	str	r2, [r4, #0]
9000e618:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000e61a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000e61c:	b1a3      	cbz	r3, 9000e648 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9000e61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e620:	b11b      	cbz	r3, 9000e62a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e622:	2000      	movs	r0, #0
}
9000e624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e628:	4718      	bx	r3
}
9000e62a:	bd70      	pop	{r4, r5, r6, pc}
9000e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e630:	f383 8811 	msr	BASEPRI, r3
9000e634:	f3bf 8f6f 	isb	sy
9000e638:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e63c:	e7fe      	b.n	9000e63c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9000e63e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000e640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e642:	2b00      	cmp	r3, #0
9000e644:	d1c6      	bne.n	9000e5d4 <vTaskSwitchContext+0x20>
9000e646:	e7c7      	b.n	9000e5d8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000e648:	6823      	ldr	r3, [r4, #0]
9000e64a:	e7e8      	b.n	9000e61e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e64c:	6849      	ldr	r1, [r1, #4]
9000e64e:	f8cc 1004 	str.w	r1, [ip, #4]
9000e652:	e7df      	b.n	9000e614 <vTaskSwitchContext+0x60>
9000e654:	2402500c 	.word	0x2402500c
9000e658:	24025090 	.word	0x24025090
9000e65c:	24024b98 	.word	0x24024b98
9000e660:	24025014 	.word	0x24025014
9000e664:	24024ba4 	.word	0x24024ba4

9000e668 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000e668:	b1f0      	cbz	r0, 9000e6a8 <vTaskPlaceOnEventList+0x40>
{
9000e66a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000e66c:	4d1a      	ldr	r5, [pc, #104]	; (9000e6d8 <vTaskPlaceOnEventList+0x70>)
9000e66e:	460c      	mov	r4, r1
9000e670:	6829      	ldr	r1, [r5, #0]
9000e672:	3118      	adds	r1, #24
9000e674:	f7fe f836 	bl	9000c6e4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000e678:	4b18      	ldr	r3, [pc, #96]	; (9000e6dc <vTaskPlaceOnEventList+0x74>)
9000e67a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e67c:	6828      	ldr	r0, [r5, #0]
9000e67e:	3004      	adds	r0, #4
9000e680:	f7fe f848 	bl	9000c714 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000e684:	1c63      	adds	r3, r4, #1
9000e686:	d020      	beq.n	9000e6ca <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e688:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e68a:	682b      	ldr	r3, [r5, #0]
9000e68c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000e68e:	d214      	bcs.n	9000e6ba <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e690:	4b13      	ldr	r3, [pc, #76]	; (9000e6e0 <vTaskPlaceOnEventList+0x78>)
9000e692:	6818      	ldr	r0, [r3, #0]
9000e694:	6829      	ldr	r1, [r5, #0]
9000e696:	3104      	adds	r1, #4
9000e698:	f7fe f824 	bl	9000c6e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000e69c:	4b11      	ldr	r3, [pc, #68]	; (9000e6e4 <vTaskPlaceOnEventList+0x7c>)
9000e69e:	681a      	ldr	r2, [r3, #0]
9000e6a0:	4294      	cmp	r4, r2
9000e6a2:	d200      	bcs.n	9000e6a6 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000e6a4:	601c      	str	r4, [r3, #0]
}
9000e6a6:	bd70      	pop	{r4, r5, r6, pc}
9000e6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6ac:	f383 8811 	msr	BASEPRI, r3
9000e6b0:	f3bf 8f6f 	isb	sy
9000e6b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000e6b8:	e7fe      	b.n	9000e6b8 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e6ba:	4b0b      	ldr	r3, [pc, #44]	; (9000e6e8 <vTaskPlaceOnEventList+0x80>)
9000e6bc:	6818      	ldr	r0, [r3, #0]
9000e6be:	6829      	ldr	r1, [r5, #0]
}
9000e6c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e6c4:	3104      	adds	r1, #4
9000e6c6:	f7fe b80d 	b.w	9000c6e4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e6ca:	6829      	ldr	r1, [r5, #0]
9000e6cc:	4807      	ldr	r0, [pc, #28]	; (9000e6ec <vTaskPlaceOnEventList+0x84>)
9000e6ce:	3104      	adds	r1, #4
}
9000e6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e6d4:	f7fd bff6 	b.w	9000c6c4 <vListInsertEnd>
9000e6d8:	24024b98 	.word	0x24024b98
9000e6dc:	2402508c 	.word	0x2402508c
9000e6e0:	24024b9c 	.word	0x24024b9c
9000e6e4:	24025040 	.word	0x24025040
9000e6e8:	24024ba0 	.word	0x24024ba0
9000e6ec:	24025064 	.word	0x24025064

9000e6f0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000e6f0:	b358      	cbz	r0, 9000e74a <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000e6f2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000e6f4:	4e1d      	ldr	r6, [pc, #116]	; (9000e76c <vTaskPlaceOnEventListRestricted+0x7c>)
9000e6f6:	460c      	mov	r4, r1
9000e6f8:	4615      	mov	r5, r2
9000e6fa:	6831      	ldr	r1, [r6, #0]
9000e6fc:	3118      	adds	r1, #24
9000e6fe:	f7fd ffe1 	bl	9000c6c4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000e702:	b165      	cbz	r5, 9000e71e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000e704:	4b1a      	ldr	r3, [pc, #104]	; (9000e770 <vTaskPlaceOnEventListRestricted+0x80>)
9000e706:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e708:	6830      	ldr	r0, [r6, #0]
9000e70a:	3004      	adds	r0, #4
9000e70c:	f7fe f802 	bl	9000c714 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e710:	6831      	ldr	r1, [r6, #0]
9000e712:	4818      	ldr	r0, [pc, #96]	; (9000e774 <vTaskPlaceOnEventListRestricted+0x84>)
9000e714:	3104      	adds	r1, #4
	}
9000e716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e71a:	f7fd bfd3 	b.w	9000c6c4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000e71e:	4b14      	ldr	r3, [pc, #80]	; (9000e770 <vTaskPlaceOnEventListRestricted+0x80>)
9000e720:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e722:	6830      	ldr	r0, [r6, #0]
9000e724:	3004      	adds	r0, #4
9000e726:	f7fd fff5 	bl	9000c714 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e72a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e72c:	6833      	ldr	r3, [r6, #0]
9000e72e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000e730:	d214      	bcs.n	9000e75c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e732:	4b11      	ldr	r3, [pc, #68]	; (9000e778 <vTaskPlaceOnEventListRestricted+0x88>)
9000e734:	6818      	ldr	r0, [r3, #0]
9000e736:	6831      	ldr	r1, [r6, #0]
9000e738:	3104      	adds	r1, #4
9000e73a:	f7fd ffd3 	bl	9000c6e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000e73e:	4b0f      	ldr	r3, [pc, #60]	; (9000e77c <vTaskPlaceOnEventListRestricted+0x8c>)
9000e740:	681a      	ldr	r2, [r3, #0]
9000e742:	4294      	cmp	r4, r2
9000e744:	d200      	bcs.n	9000e748 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000e746:	601c      	str	r4, [r3, #0]
	}
9000e748:	bd70      	pop	{r4, r5, r6, pc}
9000e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e74e:	f383 8811 	msr	BASEPRI, r3
9000e752:	f3bf 8f6f 	isb	sy
9000e756:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000e75a:	e7fe      	b.n	9000e75a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e75c:	4b08      	ldr	r3, [pc, #32]	; (9000e780 <vTaskPlaceOnEventListRestricted+0x90>)
9000e75e:	6818      	ldr	r0, [r3, #0]
9000e760:	6831      	ldr	r1, [r6, #0]
	}
9000e762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e766:	3104      	adds	r1, #4
9000e768:	f7fd bfbc 	b.w	9000c6e4 <vListInsert>
9000e76c:	24024b98 	.word	0x24024b98
9000e770:	2402508c 	.word	0x2402508c
9000e774:	24025064 	.word	0x24025064
9000e778:	24024b9c 	.word	0x24024b9c
9000e77c:	24025040 	.word	0x24025040
9000e780:	24024ba0 	.word	0x24024ba0

9000e784 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e784:	68c3      	ldr	r3, [r0, #12]
{
9000e786:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e788:	68dc      	ldr	r4, [r3, #12]
{
9000e78a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000e78c:	b35c      	cbz	r4, 9000e7e6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000e78e:	f104 0518 	add.w	r5, r4, #24
9000e792:	4628      	mov	r0, r5
9000e794:	f7fd ffbe 	bl	9000c714 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e798:	4b19      	ldr	r3, [pc, #100]	; (9000e800 <xTaskRemoveFromEventList+0x7c>)
9000e79a:	681b      	ldr	r3, [r3, #0]
9000e79c:	b17b      	cbz	r3, 9000e7be <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000e79e:	4629      	mov	r1, r5
9000e7a0:	4818      	ldr	r0, [pc, #96]	; (9000e804 <xTaskRemoveFromEventList+0x80>)
9000e7a2:	f7fd ff8f 	bl	9000c6c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000e7a6:	4b18      	ldr	r3, [pc, #96]	; (9000e808 <xTaskRemoveFromEventList+0x84>)
9000e7a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000e7aa:	681b      	ldr	r3, [r3, #0]
9000e7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e7ae:	429a      	cmp	r2, r3
9000e7b0:	d922      	bls.n	9000e7f8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000e7b2:	2301      	movs	r3, #1
9000e7b4:	4a15      	ldr	r2, [pc, #84]	; (9000e80c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000e7b6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000e7b8:	6013      	str	r3, [r2, #0]
}
9000e7ba:	b003      	add	sp, #12
9000e7bc:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000e7be:	1d21      	adds	r1, r4, #4
9000e7c0:	4608      	mov	r0, r1
9000e7c2:	9101      	str	r1, [sp, #4]
9000e7c4:	f7fd ffa6 	bl	9000c714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000e7c8:	4a11      	ldr	r2, [pc, #68]	; (9000e810 <xTaskRemoveFromEventList+0x8c>)
9000e7ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000e7cc:	6810      	ldr	r0, [r2, #0]
9000e7ce:	9901      	ldr	r1, [sp, #4]
9000e7d0:	4283      	cmp	r3, r0
9000e7d2:	d900      	bls.n	9000e7d6 <xTaskRemoveFromEventList+0x52>
9000e7d4:	6013      	str	r3, [r2, #0]
9000e7d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e7da:	480e      	ldr	r0, [pc, #56]	; (9000e814 <xTaskRemoveFromEventList+0x90>)
9000e7dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000e7e0:	f7fd ff70 	bl	9000c6c4 <vListInsertEnd>
9000e7e4:	e7df      	b.n	9000e7a6 <xTaskRemoveFromEventList+0x22>
9000e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7ea:	f383 8811 	msr	BASEPRI, r3
9000e7ee:	f3bf 8f6f 	isb	sy
9000e7f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000e7f6:	e7fe      	b.n	9000e7f6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000e7f8:	2000      	movs	r0, #0
}
9000e7fa:	b003      	add	sp, #12
9000e7fc:	bd30      	pop	{r4, r5, pc}
9000e7fe:	bf00      	nop
9000e800:	2402500c 	.word	0x2402500c
9000e804:	2402504c 	.word	0x2402504c
9000e808:	24024b98 	.word	0x24024b98
9000e80c:	24025090 	.word	0x24025090
9000e810:	24025014 	.word	0x24025014
9000e814:	24024ba4 	.word	0x24024ba4

9000e818 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e818:	4a03      	ldr	r2, [pc, #12]	; (9000e828 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e81a:	4b04      	ldr	r3, [pc, #16]	; (9000e82c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e81c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e81e:	681b      	ldr	r3, [r3, #0]
9000e820:	e9c0 2300 	strd	r2, r3, [r0]
}
9000e824:	4770      	bx	lr
9000e826:	bf00      	nop
9000e828:	24025044 	.word	0x24025044
9000e82c:	2402508c 	.word	0x2402508c

9000e830 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000e830:	b328      	cbz	r0, 9000e87e <xTaskCheckForTimeOut+0x4e>
{
9000e832:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e834:	460d      	mov	r5, r1
9000e836:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000e838:	b1c1      	cbz	r1, 9000e86c <xTaskCheckForTimeOut+0x3c>
9000e83a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000e83c:	f7fd ffea 	bl	9000c814 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000e840:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000e842:	4a1d      	ldr	r2, [pc, #116]	; (9000e8b8 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000e844:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000e846:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000e848:	d030      	beq.n	9000e8ac <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000e84a:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000e8bc <xTaskCheckForTimeOut+0x8c>
9000e84e:	6826      	ldr	r6, [r4, #0]
9000e850:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000e854:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000e856:	42be      	cmp	r6, r7
9000e858:	d01a      	beq.n	9000e890 <xTaskCheckForTimeOut+0x60>
9000e85a:	4288      	cmp	r0, r1
9000e85c:	d818      	bhi.n	9000e890 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000e85e:	2001      	movs	r0, #1
9000e860:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000e862:	f7fd fff9 	bl	9000c858 <vPortExitCritical>
}
9000e866:	9801      	ldr	r0, [sp, #4]
9000e868:	b003      	add	sp, #12
9000e86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e870:	f383 8811 	msr	BASEPRI, r3
9000e874:	f3bf 8f6f 	isb	sy
9000e878:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000e87c:	e7fe      	b.n	9000e87c <xTaskCheckForTimeOut+0x4c>
9000e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e882:	f383 8811 	msr	BASEPRI, r3
9000e886:	f3bf 8f6f 	isb	sy
9000e88a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000e88e:	e7fe      	b.n	9000e88e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000e890:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000e894:	4573      	cmp	r3, lr
9000e896:	d90b      	bls.n	9000e8b0 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000e898:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e89a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e89e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000e8a0:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000e8a2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000e8a4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e8a6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000e8aa:	e7d9      	b.n	9000e860 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000e8ac:	2000      	movs	r0, #0
9000e8ae:	e7d7      	b.n	9000e860 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000e8b0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000e8b2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000e8b4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000e8b6:	e7d3      	b.n	9000e860 <xTaskCheckForTimeOut+0x30>
9000e8b8:	2402508c 	.word	0x2402508c
9000e8bc:	24025044 	.word	0x24025044

9000e8c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000e8c0:	4b01      	ldr	r3, [pc, #4]	; (9000e8c8 <vTaskMissedYield+0x8>)
9000e8c2:	2201      	movs	r2, #1
9000e8c4:	601a      	str	r2, [r3, #0]
}
9000e8c6:	4770      	bx	lr
9000e8c8:	24025090 	.word	0x24025090

9000e8cc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000e8cc:	4b01      	ldr	r3, [pc, #4]	; (9000e8d4 <xTaskGetCurrentTaskHandle+0x8>)
9000e8ce:	6818      	ldr	r0, [r3, #0]
	}
9000e8d0:	4770      	bx	lr
9000e8d2:	bf00      	nop
9000e8d4:	24024b98 	.word	0x24024b98

9000e8d8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000e8d8:	4b05      	ldr	r3, [pc, #20]	; (9000e8f0 <xTaskGetSchedulerState+0x18>)
9000e8da:	681b      	ldr	r3, [r3, #0]
9000e8dc:	b133      	cbz	r3, 9000e8ec <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e8de:	4b05      	ldr	r3, [pc, #20]	; (9000e8f4 <xTaskGetSchedulerState+0x1c>)
9000e8e0:	6818      	ldr	r0, [r3, #0]
9000e8e2:	fab0 f080 	clz	r0, r0
9000e8e6:	0940      	lsrs	r0, r0, #5
9000e8e8:	0040      	lsls	r0, r0, #1
9000e8ea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000e8ec:	2001      	movs	r0, #1
	}
9000e8ee:	4770      	bx	lr
9000e8f0:	24025060 	.word	0x24025060
9000e8f4:	2402500c 	.word	0x2402500c

9000e8f8 <xTaskPriorityInherit>:
	{
9000e8f8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000e8fa:	4604      	mov	r4, r0
	{
9000e8fc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000e8fe:	b1c8      	cbz	r0, 9000e934 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000e900:	4d1d      	ldr	r5, [pc, #116]	; (9000e978 <xTaskPriorityInherit+0x80>)
9000e902:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000e904:	682a      	ldr	r2, [r5, #0]
9000e906:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000e908:	4293      	cmp	r3, r2
9000e90a:	d215      	bcs.n	9000e938 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000e90c:	6982      	ldr	r2, [r0, #24]
9000e90e:	2a00      	cmp	r2, #0
9000e910:	db04      	blt.n	9000e91c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e912:	682a      	ldr	r2, [r5, #0]
9000e914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000e916:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000e91a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000e91c:	4e17      	ldr	r6, [pc, #92]	; (9000e97c <xTaskPriorityInherit+0x84>)
9000e91e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e922:	6962      	ldr	r2, [r4, #20]
9000e924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000e928:	429a      	cmp	r2, r3
9000e92a:	d00e      	beq.n	9000e94a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e92c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000e92e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e932:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000e934:	b002      	add	sp, #8
9000e936:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000e938:	682b      	ldr	r3, [r5, #0]
9000e93a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000e93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e93e:	4298      	cmp	r0, r3
9000e940:	bf2c      	ite	cs
9000e942:	2000      	movcs	r0, #0
9000e944:	2001      	movcc	r0, #1
	}
9000e946:	b002      	add	sp, #8
9000e948:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e94a:	1d21      	adds	r1, r4, #4
9000e94c:	4608      	mov	r0, r1
9000e94e:	9101      	str	r1, [sp, #4]
9000e950:	f7fd fee0 	bl	9000c714 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e954:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e956:	4b0a      	ldr	r3, [pc, #40]	; (9000e980 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e958:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e95a:	681a      	ldr	r2, [r3, #0]
9000e95c:	9901      	ldr	r1, [sp, #4]
9000e95e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e960:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e962:	d900      	bls.n	9000e966 <xTaskPriorityInherit+0x6e>
9000e964:	6018      	str	r0, [r3, #0]
9000e966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e96a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000e96e:	f7fd fea9 	bl	9000c6c4 <vListInsertEnd>
				xReturn = pdTRUE;
9000e972:	2001      	movs	r0, #1
9000e974:	e7de      	b.n	9000e934 <xTaskPriorityInherit+0x3c>
9000e976:	bf00      	nop
9000e978:	24024b98 	.word	0x24024b98
9000e97c:	24024ba4 	.word	0x24024ba4
9000e980:	24025014 	.word	0x24025014

9000e984 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000e984:	b318      	cbz	r0, 9000e9ce <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000e986:	4b1f      	ldr	r3, [pc, #124]	; (9000ea04 <xTaskPriorityDisinherit+0x80>)
	{
9000e988:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000e98a:	681c      	ldr	r4, [r3, #0]
	{
9000e98c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000e98e:	4284      	cmp	r4, r0
9000e990:	d008      	beq.n	9000e9a4 <xTaskPriorityDisinherit+0x20>
9000e992:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e996:	f383 8811 	msr	BASEPRI, r3
9000e99a:	f3bf 8f6f 	isb	sy
9000e99e:	f3bf 8f4f 	dsb	sy
9000e9a2:	e7fe      	b.n	9000e9a2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000e9a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000e9a6:	b14b      	cbz	r3, 9000e9bc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000e9a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000e9aa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000e9ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000e9ae:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000e9b0:	4291      	cmp	r1, r2
9000e9b2:	d000      	beq.n	9000e9b6 <xTaskPriorityDisinherit+0x32>
9000e9b4:	b16b      	cbz	r3, 9000e9d2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000e9b6:	2000      	movs	r0, #0
	}
9000e9b8:	b002      	add	sp, #8
9000e9ba:	bd10      	pop	{r4, pc}
9000e9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e9c0:	f383 8811 	msr	BASEPRI, r3
9000e9c4:	f3bf 8f6f 	isb	sy
9000e9c8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000e9cc:	e7fe      	b.n	9000e9cc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000e9ce:	2000      	movs	r0, #0
	}
9000e9d0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e9d2:	1d21      	adds	r1, r4, #4
9000e9d4:	4608      	mov	r0, r1
9000e9d6:	9101      	str	r1, [sp, #4]
9000e9d8:	f7fd fe9c 	bl	9000c714 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000e9dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000e9de:	4b0a      	ldr	r3, [pc, #40]	; (9000ea08 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e9e0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000e9e4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000e9e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e9e8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000e9ea:	681a      	ldr	r2, [r3, #0]
9000e9ec:	4290      	cmp	r0, r2
9000e9ee:	d900      	bls.n	9000e9f2 <xTaskPriorityDisinherit+0x6e>
9000e9f0:	6018      	str	r0, [r3, #0]
9000e9f2:	4b06      	ldr	r3, [pc, #24]	; (9000ea0c <xTaskPriorityDisinherit+0x88>)
9000e9f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e9f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000e9fc:	f7fd fe62 	bl	9000c6c4 <vListInsertEnd>
					xReturn = pdTRUE;
9000ea00:	2001      	movs	r0, #1
		return xReturn;
9000ea02:	e7d9      	b.n	9000e9b8 <xTaskPriorityDisinherit+0x34>
9000ea04:	24024b98 	.word	0x24024b98
9000ea08:	24025014 	.word	0x24025014
9000ea0c:	24024ba4 	.word	0x24024ba4

9000ea10 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000ea10:	2800      	cmp	r0, #0
9000ea12:	d040      	beq.n	9000ea96 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000ea14:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000ea16:	b530      	push	{r4, r5, lr}
9000ea18:	4604      	mov	r4, r0
9000ea1a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000ea1c:	b153      	cbz	r3, 9000ea34 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000ea1e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000ea20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ea22:	4281      	cmp	r1, r0
9000ea24:	bf38      	it	cc
9000ea26:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000ea28:	2b01      	cmp	r3, #1
9000ea2a:	d101      	bne.n	9000ea30 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000ea2c:	428a      	cmp	r2, r1
9000ea2e:	d10a      	bne.n	9000ea46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000ea30:	b003      	add	sp, #12
9000ea32:	bd30      	pop	{r4, r5, pc}
9000ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea38:	f383 8811 	msr	BASEPRI, r3
9000ea3c:	f3bf 8f6f 	isb	sy
9000ea40:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000ea44:	e7fe      	b.n	9000ea44 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000ea46:	4b19      	ldr	r3, [pc, #100]	; (9000eaac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000ea48:	681b      	ldr	r3, [r3, #0]
9000ea4a:	42a3      	cmp	r3, r4
9000ea4c:	d024      	beq.n	9000ea98 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ea4e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000ea50:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ea52:	2b00      	cmp	r3, #0
9000ea54:	db02      	blt.n	9000ea5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ea56:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000ea5a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000ea5c:	4d14      	ldr	r5, [pc, #80]	; (9000eab0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000ea5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000ea62:	6961      	ldr	r1, [r4, #20]
9000ea64:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000ea68:	4299      	cmp	r1, r3
9000ea6a:	d1e1      	bne.n	9000ea30 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ea6c:	1d21      	adds	r1, r4, #4
9000ea6e:	4608      	mov	r0, r1
9000ea70:	9101      	str	r1, [sp, #4]
9000ea72:	f7fd fe4f 	bl	9000c714 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000ea76:	4b0f      	ldr	r3, [pc, #60]	; (9000eab4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000ea78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000ea7a:	681a      	ldr	r2, [r3, #0]
9000ea7c:	9901      	ldr	r1, [sp, #4]
9000ea7e:	4290      	cmp	r0, r2
9000ea80:	d900      	bls.n	9000ea84 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000ea82:	6018      	str	r0, [r3, #0]
9000ea84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ea88:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000ea8c:	b003      	add	sp, #12
9000ea8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000ea92:	f7fd be17 	b.w	9000c6c4 <vListInsertEnd>
9000ea96:	4770      	bx	lr
9000ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea9c:	f383 8811 	msr	BASEPRI, r3
9000eaa0:	f3bf 8f6f 	isb	sy
9000eaa4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000eaa8:	e7fe      	b.n	9000eaa8 <vTaskPriorityDisinheritAfterTimeout+0x98>
9000eaaa:	bf00      	nop
9000eaac:	24024b98 	.word	0x24024b98
9000eab0:	24024ba4 	.word	0x24024ba4
9000eab4:	24025014 	.word	0x24025014

9000eab8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000eab8:	4b04      	ldr	r3, [pc, #16]	; (9000eacc <pvTaskIncrementMutexHeldCount+0x14>)
9000eaba:	681a      	ldr	r2, [r3, #0]
9000eabc:	b11a      	cbz	r2, 9000eac6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000eabe:	6819      	ldr	r1, [r3, #0]
9000eac0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000eac2:	3201      	adds	r2, #1
9000eac4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000eac6:	6818      	ldr	r0, [r3, #0]
	}
9000eac8:	4770      	bx	lr
9000eaca:	bf00      	nop
9000eacc:	24024b98 	.word	0x24024b98

9000ead0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000ead0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ead4:	4e22      	ldr	r6, [pc, #136]	; (9000eb60 <prvSwitchTimerLists+0x90>)
9000ead6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
9000ead8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9000eb68 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9000eadc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000eae0:	e00d      	b.n	9000eafe <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000eae2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eae4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000eae6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000eae8:	1d25      	adds	r5, r4, #4
9000eaea:	4628      	mov	r0, r5
9000eaec:	f7fd fe12 	bl	9000c714 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000eaf0:	6a23      	ldr	r3, [r4, #32]
9000eaf2:	4620      	mov	r0, r4
9000eaf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000eaf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9000eafa:	075b      	lsls	r3, r3, #29
9000eafc:	d40a      	bmi.n	9000eb14 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000eafe:	6833      	ldr	r3, [r6, #0]
9000eb00:	681a      	ldr	r2, [r3, #0]
9000eb02:	2a00      	cmp	r2, #0
9000eb04:	d1ed      	bne.n	9000eae2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000eb06:	4a17      	ldr	r2, [pc, #92]	; (9000eb64 <prvSwitchTimerLists+0x94>)
9000eb08:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000eb0a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000eb0c:	6031      	str	r1, [r6, #0]
}
9000eb0e:	b005      	add	sp, #20
9000eb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000eb14:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000eb16:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000eb18:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000eb1a:	429f      	cmp	r7, r3
9000eb1c:	d205      	bcs.n	9000eb2a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000eb1e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000eb20:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000eb22:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000eb24:	f7fd fdde 	bl	9000c6e4 <vListInsert>
9000eb28:	e7e9      	b.n	9000eafe <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9000eb2a:	f8d9 3000 	ldr.w	r3, [r9]
9000eb2e:	b16b      	cbz	r3, 9000eb4c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000eb30:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000eb32:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000eb36:	f7ff fecf 	bl	9000e8d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000eb3a:	2300      	movs	r3, #0
9000eb3c:	4669      	mov	r1, sp
9000eb3e:	f8d9 0000 	ldr.w	r0, [r9]
9000eb42:	461a      	mov	r2, r3
9000eb44:	f7fe f95e 	bl	9000ce04 <xQueueGenericSend>
				configASSERT( xResult );
9000eb48:	2800      	cmp	r0, #0
9000eb4a:	d1d8      	bne.n	9000eafe <prvSwitchTimerLists+0x2e>
9000eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb50:	f383 8811 	msr	BASEPRI, r3
9000eb54:	f3bf 8f6f 	isb	sy
9000eb58:	f3bf 8f4f 	dsb	sy
9000eb5c:	e7fe      	b.n	9000eb5c <prvSwitchTimerLists+0x8c>
9000eb5e:	bf00      	nop
9000eb60:	24025094 	.word	0x24025094
9000eb64:	24025098 	.word	0x24025098
9000eb68:	240251b8 	.word	0x240251b8

9000eb6c <prvTimerTask>:
{
9000eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000eb70:	4e9f      	ldr	r6, [pc, #636]	; (9000edf0 <prvTimerTask+0x284>)
9000eb72:	b089      	sub	sp, #36	; 0x24
9000eb74:	4d9f      	ldr	r5, [pc, #636]	; (9000edf4 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
9000eb76:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000eb7a:	4c9f      	ldr	r4, [pc, #636]	; (9000edf8 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000eb7c:	6833      	ldr	r3, [r6, #0]
9000eb7e:	681f      	ldr	r7, [r3, #0]
9000eb80:	2f00      	cmp	r7, #0
9000eb82:	f000 80b2 	beq.w	9000ecea <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000eb86:	68db      	ldr	r3, [r3, #12]
9000eb88:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9000eb8a:	f7ff fccf 	bl	9000e52c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000eb8e:	f7ff fce5 	bl	9000e55c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000eb92:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000eb94:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000eb96:	4290      	cmp	r0, r2
9000eb98:	f0c0 80af 	bcc.w	9000ecfa <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000eb9c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9000eb9e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000eba0:	f200 80d0 	bhi.w	9000ed44 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
9000eba4:	f7ff fcca 	bl	9000e53c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eba8:	6832      	ldr	r2, [r6, #0]
9000ebaa:	68d2      	ldr	r2, [r2, #12]
9000ebac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000ebb0:	f10b 0804 	add.w	r8, fp, #4
9000ebb4:	4640      	mov	r0, r8
9000ebb6:	f7fd fdad 	bl	9000c714 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000ebba:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9000ebbe:	0741      	lsls	r1, r0, #29
9000ebc0:	f100 80d0 	bmi.w	9000ed64 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000ebc4:	f020 0001 	bic.w	r0, r0, #1
9000ebc8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000ebcc:	f8db 3020 	ldr.w	r3, [fp, #32]
9000ebd0:	4658      	mov	r0, fp
9000ebd2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000ebd4:	2200      	movs	r2, #0
9000ebd6:	4669      	mov	r1, sp
9000ebd8:	6820      	ldr	r0, [r4, #0]
9000ebda:	f7fe fbff 	bl	9000d3dc <xQueueReceive>
9000ebde:	2800      	cmp	r0, #0
9000ebe0:	d0cc      	beq.n	9000eb7c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000ebe2:	9b00      	ldr	r3, [sp, #0]
9000ebe4:	2b00      	cmp	r3, #0
9000ebe6:	db77      	blt.n	9000ecd8 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000ebe8:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000ebea:	697b      	ldr	r3, [r7, #20]
9000ebec:	b113      	cbz	r3, 9000ebf4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000ebee:	1d38      	adds	r0, r7, #4
9000ebf0:	f7fd fd90 	bl	9000c714 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
9000ebf4:	f7ff fcb2 	bl	9000e55c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000ebf8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000ebfa:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9000ebfc:	4298      	cmp	r0, r3
9000ebfe:	f0c0 8083 	bcc.w	9000ed08 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
9000ec02:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
9000ec04:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
9000ec08:	2b09      	cmp	r3, #9
9000ec0a:	d8e3      	bhi.n	9000ebd4 <prvTimerTask+0x68>
9000ec0c:	e8df f003 	tbb	[pc, r3]
9000ec10:	54050505 	.word	0x54050505
9000ec14:	05055b3e 	.word	0x05055b3e
9000ec18:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000ec1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000ec1e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000ec20:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000ec24:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000ec26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000ec2a:	9b01      	ldr	r3, [sp, #4]
9000ec2c:	1899      	adds	r1, r3, r2
9000ec2e:	bf2c      	ite	cs
9000ec30:	2001      	movcs	r0, #1
9000ec32:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
9000ec34:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000ec36:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000ec38:	f200 8086 	bhi.w	9000ed48 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ec3c:	eba8 0303 	sub.w	r3, r8, r3
9000ec40:	429a      	cmp	r2, r3
9000ec42:	f200 80c0 	bhi.w	9000edc6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000ec46:	6a3b      	ldr	r3, [r7, #32]
9000ec48:	4638      	mov	r0, r7
9000ec4a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000ec4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000ec50:	075b      	lsls	r3, r3, #29
9000ec52:	d5bf      	bpl.n	9000ebd4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
9000ec54:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000ec56:	9901      	ldr	r1, [sp, #4]
9000ec58:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9000ec5a:	b172      	cbz	r2, 9000ec7a <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000ec5c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000ec5e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
9000ec62:	2300      	movs	r3, #0
9000ec64:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000ec66:	f7ff fe37 	bl	9000e8d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000ec6a:	2300      	movs	r3, #0
9000ec6c:	a904      	add	r1, sp, #16
9000ec6e:	6820      	ldr	r0, [r4, #0]
9000ec70:	461a      	mov	r2, r3
9000ec72:	f7fe f8c7 	bl	9000ce04 <xQueueGenericSend>
							configASSERT( xResult );
9000ec76:	2800      	cmp	r0, #0
9000ec78:	d1ac      	bne.n	9000ebd4 <prvTimerTask+0x68>
9000ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec7e:	f383 8811 	msr	BASEPRI, r3
9000ec82:	f3bf 8f6f 	isb	sy
9000ec86:	f3bf 8f4f 	dsb	sy
9000ec8a:	e7fe      	b.n	9000ec8a <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000ec8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000ec90:	f043 0301 	orr.w	r3, r3, #1
9000ec94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000ec98:	9b01      	ldr	r3, [sp, #4]
9000ec9a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000ec9c:	2b00      	cmp	r3, #0
9000ec9e:	f000 809e 	beq.w	9000edde <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000eca2:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000eca4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000eca6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
9000eca8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000ecaa:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000ecac:	d856      	bhi.n	9000ed5c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000ecae:	4b53      	ldr	r3, [pc, #332]	; (9000edfc <prvTimerTask+0x290>)
9000ecb0:	6818      	ldr	r0, [r3, #0]
9000ecb2:	f7fd fd17 	bl	9000c6e4 <vListInsert>
	return xProcessTimerNow;
9000ecb6:	e78d      	b.n	9000ebd4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000ecb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000ecbc:	f023 0301 	bic.w	r3, r3, #1
9000ecc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
9000ecc4:	e786      	b.n	9000ebd4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000ecc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000ecca:	079a      	lsls	r2, r3, #30
9000eccc:	d572      	bpl.n	9000edb4 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000ecce:	f023 0301 	bic.w	r3, r3, #1
9000ecd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
9000ecd6:	e77d      	b.n	9000ebd4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000ecd8:	9b01      	ldr	r3, [sp, #4]
9000ecda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9000ecde:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000ece0:	9b00      	ldr	r3, [sp, #0]
9000ece2:	2b00      	cmp	r3, #0
9000ece4:	f6ff af76 	blt.w	9000ebd4 <prvTimerTask+0x68>
9000ece8:	e77e      	b.n	9000ebe8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
9000ecea:	f7ff fc1f 	bl	9000e52c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000ecee:	f7ff fc35 	bl	9000e55c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000ecf2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000ecf4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000ecf6:	4282      	cmp	r2, r0
9000ecf8:	d909      	bls.n	9000ed0e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9000ecfa:	f7ff fee9 	bl	9000ead0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9000ecfe:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
9000ed02:	f7ff fc1b 	bl	9000e53c <xTaskResumeAll>
9000ed06:	e765      	b.n	9000ebd4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
9000ed08:	f7ff fee2 	bl	9000ead0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000ed0c:	e779      	b.n	9000ec02 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000ed0e:	4b3b      	ldr	r3, [pc, #236]	; (9000edfc <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
9000ed10:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000ed14:	681a      	ldr	r2, [r3, #0]
9000ed16:	6812      	ldr	r2, [r2, #0]
9000ed18:	fab2 f282 	clz	r2, r2
9000ed1c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000ed1e:	eba7 010a 	sub.w	r1, r7, sl
9000ed22:	6820      	ldr	r0, [r4, #0]
9000ed24:	f7fe ff4e 	bl	9000dbc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000ed28:	f7ff fc08 	bl	9000e53c <xTaskResumeAll>
9000ed2c:	2800      	cmp	r0, #0
9000ed2e:	f47f af51 	bne.w	9000ebd4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
9000ed32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
9000ed36:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9000ed3a:	f3bf 8f4f 	dsb	sy
9000ed3e:	f3bf 8f6f 	isb	sy
9000ed42:	e747      	b.n	9000ebd4 <prvTimerTask+0x68>
9000ed44:	2200      	movs	r2, #0
9000ed46:	e7ea      	b.n	9000ed1e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000ed48:	4543      	cmp	r3, r8
9000ed4a:	d902      	bls.n	9000ed52 <prvTimerTask+0x1e6>
9000ed4c:	2800      	cmp	r0, #0
9000ed4e:	f43f af7a 	beq.w	9000ec46 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000ed52:	1d39      	adds	r1, r7, #4
9000ed54:	6830      	ldr	r0, [r6, #0]
9000ed56:	f7fd fcc5 	bl	9000c6e4 <vListInsert>
	return xProcessTimerNow;
9000ed5a:	e73b      	b.n	9000ebd4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000ed5c:	6830      	ldr	r0, [r6, #0]
9000ed5e:	f7fd fcc1 	bl	9000c6e4 <vListInsert>
9000ed62:	e737      	b.n	9000ebd4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000ed64:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000ed68:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000ed6c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9000ed6e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000ed70:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
9000ed74:	d322      	bcc.n	9000edbc <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ed76:	ebaa 0307 	sub.w	r3, sl, r7
9000ed7a:	429a      	cmp	r2, r3
9000ed7c:	d829      	bhi.n	9000edd2 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9000ed7e:	6823      	ldr	r3, [r4, #0]
9000ed80:	b17b      	cbz	r3, 9000eda2 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
9000ed82:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000ed84:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000ed86:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9000ed8a:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000ed8c:	f7ff fda4 	bl	9000e8d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000ed90:	2300      	movs	r3, #0
9000ed92:	a904      	add	r1, sp, #16
9000ed94:	6820      	ldr	r0, [r4, #0]
9000ed96:	461a      	mov	r2, r3
9000ed98:	f7fe f834 	bl	9000ce04 <xQueueGenericSend>
			configASSERT( xResult );
9000ed9c:	2800      	cmp	r0, #0
9000ed9e:	f47f af15 	bne.w	9000ebcc <prvTimerTask+0x60>
9000eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eda6:	f383 8811 	msr	BASEPRI, r3
9000edaa:	f3bf 8f6f 	isb	sy
9000edae:	f3bf 8f4f 	dsb	sy
9000edb2:	e7fe      	b.n	9000edb2 <prvTimerTask+0x246>
							vPortFree( pxTimer );
9000edb4:	4638      	mov	r0, r7
9000edb6:	f7fd fc11 	bl	9000c5dc <vPortFree>
9000edba:	e70b      	b.n	9000ebd4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000edbc:	4641      	mov	r1, r8
9000edbe:	6830      	ldr	r0, [r6, #0]
9000edc0:	f7fd fc90 	bl	9000c6e4 <vListInsert>
	return xProcessTimerNow;
9000edc4:	e702      	b.n	9000ebcc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000edc6:	4b0d      	ldr	r3, [pc, #52]	; (9000edfc <prvTimerTask+0x290>)
9000edc8:	1d39      	adds	r1, r7, #4
9000edca:	6818      	ldr	r0, [r3, #0]
9000edcc:	f7fd fc8a 	bl	9000c6e4 <vListInsert>
	return xProcessTimerNow;
9000edd0:	e700      	b.n	9000ebd4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000edd2:	4b0a      	ldr	r3, [pc, #40]	; (9000edfc <prvTimerTask+0x290>)
9000edd4:	4641      	mov	r1, r8
9000edd6:	6818      	ldr	r0, [r3, #0]
9000edd8:	f7fd fc84 	bl	9000c6e4 <vListInsert>
	return xProcessTimerNow;
9000eddc:	e6f6      	b.n	9000ebcc <prvTimerTask+0x60>
9000edde:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ede2:	f383 8811 	msr	BASEPRI, r3
9000ede6:	f3bf 8f6f 	isb	sy
9000edea:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000edee:	e7fe      	b.n	9000edee <prvTimerTask+0x282>
9000edf0:	24025094 	.word	0x24025094
9000edf4:	24025164 	.word	0x24025164
9000edf8:	240251b8 	.word	0x240251b8
9000edfc:	24025098 	.word	0x24025098

9000ee00 <xTimerCreateTimerTask>:
{
9000ee00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
9000ee02:	4c23      	ldr	r4, [pc, #140]	; (9000ee90 <xTimerCreateTimerTask+0x90>)
{
9000ee04:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
9000ee06:	f7fd fd05 	bl	9000c814 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9000ee0a:	6825      	ldr	r5, [r4, #0]
9000ee0c:	b335      	cbz	r5, 9000ee5c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000ee0e:	f7fd fd23 	bl	9000c858 <vPortExitCritical>
	if( xTimerQueue != NULL )
9000ee12:	6823      	ldr	r3, [r4, #0]
9000ee14:	b1cb      	cbz	r3, 9000ee4a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000ee16:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000ee18:	aa07      	add	r2, sp, #28
9000ee1a:	a906      	add	r1, sp, #24
9000ee1c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000ee1e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000ee20:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000ee24:	f7fd fb0c 	bl	9000c440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000ee28:	4623      	mov	r3, r4
9000ee2a:	9a07      	ldr	r2, [sp, #28]
9000ee2c:	9500      	str	r5, [sp, #0]
9000ee2e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
9000ee32:	e9cd 1001 	strd	r1, r0, [sp, #4]
9000ee36:	4917      	ldr	r1, [pc, #92]	; (9000ee94 <xTimerCreateTimerTask+0x94>)
9000ee38:	4817      	ldr	r0, [pc, #92]	; (9000ee98 <xTimerCreateTimerTask+0x98>)
9000ee3a:	f7ff f93f 	bl	9000e0bc <xTaskCreateStatic>
9000ee3e:	4b17      	ldr	r3, [pc, #92]	; (9000ee9c <xTimerCreateTimerTask+0x9c>)
9000ee40:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9000ee42:	b110      	cbz	r0, 9000ee4a <xTimerCreateTimerTask+0x4a>
}
9000ee44:	2001      	movs	r0, #1
9000ee46:	b009      	add	sp, #36	; 0x24
9000ee48:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee4e:	f383 8811 	msr	BASEPRI, r3
9000ee52:	f3bf 8f6f 	isb	sy
9000ee56:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9000ee5a:	e7fe      	b.n	9000ee5a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9000ee5c:	4f10      	ldr	r7, [pc, #64]	; (9000eea0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9000ee5e:	4e11      	ldr	r6, [pc, #68]	; (9000eea4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
9000ee60:	4638      	mov	r0, r7
9000ee62:	f7fd fc1f 	bl	9000c6a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000ee66:	4630      	mov	r0, r6
9000ee68:	f7fd fc1c 	bl	9000c6a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000ee6c:	4a0e      	ldr	r2, [pc, #56]	; (9000eea8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000ee6e:	9500      	str	r5, [sp, #0]
9000ee70:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
9000ee72:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000ee74:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
9000ee76:	4a0d      	ldr	r2, [pc, #52]	; (9000eeac <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000ee78:	4b0d      	ldr	r3, [pc, #52]	; (9000eeb0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9000ee7a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000ee7c:	4a0d      	ldr	r2, [pc, #52]	; (9000eeb4 <xTimerCreateTimerTask+0xb4>)
9000ee7e:	f7fd fe6b 	bl	9000cb58 <xQueueGenericCreateStatic>
9000ee82:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
9000ee84:	2800      	cmp	r0, #0
9000ee86:	d0c2      	beq.n	9000ee0e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000ee88:	490b      	ldr	r1, [pc, #44]	; (9000eeb8 <xTimerCreateTimerTask+0xb8>)
9000ee8a:	f7fe fe73 	bl	9000db74 <vQueueAddToRegistry>
9000ee8e:	e7be      	b.n	9000ee0e <xTimerCreateTimerTask+0xe>
9000ee90:	240251b8 	.word	0x240251b8
9000ee94:	9002534c 	.word	0x9002534c
9000ee98:	9000eb6d 	.word	0x9000eb6d
9000ee9c:	240251bc 	.word	0x240251bc
9000eea0:	2402513c 	.word	0x2402513c
9000eea4:	24025150 	.word	0x24025150
9000eea8:	24025094 	.word	0x24025094
9000eeac:	24025098 	.word	0x24025098
9000eeb0:	24025168 	.word	0x24025168
9000eeb4:	2402509c 	.word	0x2402509c
9000eeb8:	90025344 	.word	0x90025344

9000eebc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000eec0:	4c82      	ldr	r4, [pc, #520]	; (9000f0cc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
9000eec2:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000eec4:	fba4 4303 	umull	r4, r3, r4, r3
{  
9000eec8:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000eeca:	0a19      	lsrs	r1, r3, #8
{  
9000eecc:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000eece:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
9000eed2:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000eed4:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000eed8:	4293      	cmp	r3, r2
9000eeda:	930f      	str	r3, [sp, #60]	; 0x3c
9000eedc:	f240 80f1 	bls.w	9000f0c2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000eee0:	4b7b      	ldr	r3, [pc, #492]	; (9000f0d0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
9000eee2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 9000f0e0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000eee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000eee8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000eeea:	691b      	ldr	r3, [r3, #16]
9000eeec:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 9000f0e4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
9000eef0:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000eef2:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000eef4:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000eef6:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000eef8:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000eefa:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
9000eefc:	f04f 0e02 	mov.w	lr, #2
9000ef00:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000ef02:	f502 7080 	add.w	r0, r2, #256	; 0x100
9000ef06:	9204      	str	r2, [sp, #16]
9000ef08:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000ef0a:	3101      	adds	r1, #1
9000ef0c:	9006      	str	r0, [sp, #24]
9000ef0e:	980e      	ldr	r0, [sp, #56]	; 0x38
9000ef10:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ef12:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000ef14:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000ef18:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ef1c:	fb01 f202 	mul.w	r2, r1, r2
9000ef20:	005b      	lsls	r3, r3, #1
9000ef22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
9000ef26:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000ef28:	e009      	b.n	9000ef3e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ef2a:	9b05      	ldr	r3, [sp, #20]
9000ef2c:	9a01      	ldr	r2, [sp, #4]
9000ef2e:	4293      	cmp	r3, r2
9000ef30:	d80f      	bhi.n	9000ef52 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
9000ef32:	f1be 0f10 	cmp.w	lr, #16
9000ef36:	f000 80bb 	beq.w	9000f0b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9000ef3a:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
9000ef3e:	f1be 0f0a 	cmp.w	lr, #10
9000ef42:	d1f2      	bne.n	9000ef2a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
9000ef44:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ef46:	9a01      	ldr	r2, [sp, #4]
9000ef48:	3380      	adds	r3, #128	; 0x80
9000ef4a:	9304      	str	r3, [sp, #16]
9000ef4c:	9b05      	ldr	r3, [sp, #20]
9000ef4e:	4293      	cmp	r3, r2
9000ef50:	d9f3      	bls.n	9000ef3a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
9000ef52:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ef54:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9000ef56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ef58:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9000ef5a:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ef5c:	990a      	ldr	r1, [sp, #40]	; 0x28
9000ef5e:	9a04      	ldr	r2, [sp, #16]
9000ef60:	1859      	adds	r1, r3, r1
9000ef62:	f103 0c10 	add.w	ip, r3, #16
9000ef66:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9000ef6a:	3330      	adds	r3, #48	; 0x30
9000ef6c:	4696      	mov	lr, r2
9000ef6e:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
9000ef70:	9307      	str	r3, [sp, #28]
9000ef72:	9b03      	ldr	r3, [sp, #12]
9000ef74:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
9000ef78:	4674      	mov	r4, lr
    currentMCU++;
9000ef7a:	9e02      	ldr	r6, [sp, #8]
9000ef7c:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ef7e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
9000ef82:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef84:	4953      	ldr	r1, [pc, #332]	; (9000f0d4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9000ef86:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ef88:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000ef8c:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef8e:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
9000ef92:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ef94:	4950      	ldr	r1, [pc, #320]	; (9000f0d8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
9000ef96:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ef9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef9e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000efa2:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000efa4:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000efa6:	4b4d      	ldr	r3, [pc, #308]	; (9000f0dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
9000efa8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efac:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000efb0:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efb4:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efb6:	eb03 0b02 	add.w	fp, r3, r2
9000efba:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efbe:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efc0:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efc4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efc8:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efcc:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efd0:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
9000efd4:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
9000efd8:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
9000efdc:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000efe0:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efe4:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efe8:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000efec:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efee:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eff2:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eff6:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000effa:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000effe:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f002:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000f006:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000f00a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f00e:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
9000f012:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f016:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f01a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f01e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f020:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f024:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f028:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000f02c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f030:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f034:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000f038:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000f03c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
9000f040:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
9000f044:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f046:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f048:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f04a:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f04c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f050:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f054:	ea4f 0393 	mov.w	r3, r3, lsr #2
9000f058:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f05c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f060:	ea4f 1343 	mov.w	r3, r3, lsl #5
9000f064:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
9000f068:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9000f06c:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
9000f070:	d185      	bne.n	9000ef7e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000f072:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
9000f074:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
9000f078:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000f07c:	3310      	adds	r3, #16
9000f07e:	9302      	str	r3, [sp, #8]
            pChrom++;
9000f080:	9b03      	ldr	r3, [sp, #12]
9000f082:	3304      	adds	r3, #4
9000f084:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
9000f086:	9b07      	ldr	r3, [sp, #28]
9000f088:	4563      	cmp	r3, ip
9000f08a:	f47f af72 	bne.w	9000ef72 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
9000f08e:	9b06      	ldr	r3, [sp, #24]
9000f090:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9000f094:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
9000f098:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
9000f09c:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
9000f09e:	9b04      	ldr	r3, [sp, #16]
9000f0a0:	f103 0310 	add.w	r3, r3, #16
9000f0a4:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f0a6:	9b01      	ldr	r3, [sp, #4]
9000f0a8:	4413      	add	r3, r2
9000f0aa:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000f0ac:	f47f af45 	bne.w	9000ef3a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000f0b0:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000f0b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000f0b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
9000f0b8:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000f0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9000f0bc:	4293      	cmp	r3, r2
9000f0be:	f47f af1c 	bne.w	9000eefa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
9000f0c2:	ee17 0a90 	vmov	r0, s15
9000f0c6:	b011      	add	sp, #68	; 0x44
9000f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f0cc:	aaaaaaab 	.word	0xaaaaaaab
9000f0d0:	240261c0 	.word	0x240261c0
9000f0d4:	240255c0 	.word	0x240255c0
9000f0d8:	240251c0 	.word	0x240251c0
9000f0dc:	24025dc0 	.word	0x24025dc0
9000f0e0:	240259c0 	.word	0x240259c0
9000f0e4:	90025354 	.word	0x90025354

9000f0e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000f0ec:	0a1c      	lsrs	r4, r3, #8
{  
9000f0ee:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f0f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000f0f4:	ee07 4a90 	vmov	s15, r4
{  
9000f0f8:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000f0fa:	429a      	cmp	r2, r3
{  
9000f0fc:	9007      	str	r0, [sp, #28]
9000f0fe:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
9000f100:	930b      	str	r3, [sp, #44]	; 0x2c
9000f102:	f080 814a 	bcs.w	9000f39a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f106:	4ba7      	ldr	r3, [pc, #668]	; (9000f3a4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
9000f108:	4da7      	ldr	r5, [pc, #668]	; (9000f3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
9000f10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f10c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9000f3ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
9000f110:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f114:	691b      	ldr	r3, [r3, #16]
9000f116:	f8df a298 	ldr.w	sl, [pc, #664]	; 9000f3b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
9000f11a:	f8df b298 	ldr.w	fp, [pc, #664]	; 9000f3b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
9000f11e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9000f3b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f122:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f124:	9301      	str	r3, [sp, #4]
9000f126:	e008      	b.n	9000f13a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f128:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000f12a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f12c:	f503 7380 	add.w	r3, r3, #256	; 0x100
9000f130:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000f132:	9b08      	ldr	r3, [sp, #32]
9000f134:	4293      	cmp	r3, r2
9000f136:	f000 8130 	beq.w	9000f39a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f13a:	9a07      	ldr	r2, [sp, #28]
9000f13c:	9908      	ldr	r1, [sp, #32]
9000f13e:	f102 0080 	add.w	r0, r2, #128	; 0x80
9000f142:	010b      	lsls	r3, r1, #4
9000f144:	3101      	adds	r1, #1
    currentMCU++;
9000f146:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f14a:	980a      	ldr	r0, [sp, #40]	; 0x28
9000f14c:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f14e:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f150:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000f154:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f158:	fb01 f202 	mul.w	r2, r1, r2
9000f15c:	005b      	lsls	r3, r3, #1
9000f15e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000f162:	9300      	str	r3, [sp, #0]
    currentMCU++;
9000f164:	2308      	movs	r3, #8
9000f166:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f168:	e9dd 2300 	ldrd	r2, r3, [sp]
9000f16c:	4293      	cmp	r3, r2
9000f16e:	d9db      	bls.n	9000f128 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
9000f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000f172:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
9000f174:	9a03      	ldr	r2, [sp, #12]
9000f176:	f102 0140 	add.w	r1, r2, #64	; 0x40
9000f17a:	9a02      	ldr	r2, [sp, #8]
9000f17c:	f103 0020 	add.w	r0, r3, #32
9000f180:	3204      	adds	r2, #4
9000f182:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f184:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
9000f188:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f18a:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
9000f18e:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f190:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
9000f194:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9000f196:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f19a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f19e:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f1a0:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000f1a4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f1a8:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f1aa:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1ac:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1b0:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1b4:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f1b8:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1bc:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1be:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1c2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000f1c6:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000f1ca:	08e4      	lsrs	r4, r4, #3
9000f1cc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f1d0:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000f1d4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f1d8:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
9000f1dc:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f1e0:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1e2:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1e4:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1e6:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1ea:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000f1ee:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f1f2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f1f4:	08c0      	lsrs	r0, r0, #3
9000f1f6:	08a4      	lsrs	r4, r4, #2
9000f1f8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000f1fc:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f200:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f204:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f208:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f20c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000f210:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f214:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f218:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f21a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000f21e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f222:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f224:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f226:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f22a:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f22e:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f232:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f236:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f238:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f23c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000f240:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000f244:	08e4      	lsrs	r4, r4, #3
9000f246:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f24a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000f24e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f252:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9000f256:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f25a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f25c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f25e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f260:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f264:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000f268:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f26c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f26e:	08c0      	lsrs	r0, r0, #3
9000f270:	08a4      	lsrs	r4, r4, #2
9000f272:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000f276:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f27a:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f27e:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f282:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000f286:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f28a:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f28e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f292:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f296:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f298:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f29c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f29e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2a0:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2a4:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2a8:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f2ac:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2b0:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2b2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2b6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000f2ba:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000f2be:	08e4      	lsrs	r4, r4, #3
9000f2c0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f2c4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000f2c8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f2cc:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
9000f2d0:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f2d4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2d6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2d8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2da:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2de:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000f2e2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f2e6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f2e8:	08c0      	lsrs	r0, r0, #3
9000f2ea:	08a4      	lsrs	r4, r4, #2
9000f2ec:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000f2f0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f2f4:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f2f8:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f2fc:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f300:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000f304:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f308:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f30c:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f30e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000f312:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f316:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f318:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f31a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f31e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f322:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f326:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f32a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f32c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f330:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000f334:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000f338:	08e4      	lsrs	r4, r4, #3
9000f33a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f33e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000f342:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f346:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000f34a:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f34e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f350:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f352:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f354:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f358:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000f35c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f360:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f362:	08c0      	lsrs	r0, r0, #3
9000f364:	08a4      	lsrs	r4, r4, #2
9000f366:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000f36a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f36e:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
9000f372:	9804      	ldr	r0, [sp, #16]
9000f374:	4283      	cmp	r3, r0
9000f376:	f47f af05 	bne.w	9000f184 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9000f37a:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f37c:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
9000f37e:	3308      	adds	r3, #8
9000f380:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
9000f382:	9b03      	ldr	r3, [sp, #12]
9000f384:	3308      	adds	r3, #8
9000f386:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f388:	9b00      	ldr	r3, [sp, #0]
9000f38a:	4413      	add	r3, r2
9000f38c:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
9000f38e:	9b05      	ldr	r3, [sp, #20]
9000f390:	3b01      	subs	r3, #1
9000f392:	9305      	str	r3, [sp, #20]
9000f394:	f47f aee8 	bne.w	9000f168 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
9000f398:	e6c6      	b.n	9000f128 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9000f39a:	ee17 0a90 	vmov	r0, s15
9000f39e:	b00d      	add	sp, #52	; 0x34
9000f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f3a4:	240261c0 	.word	0x240261c0
9000f3a8:	240251c0 	.word	0x240251c0
9000f3ac:	24025dc0 	.word	0x24025dc0
9000f3b0:	240259c0 	.word	0x240259c0
9000f3b4:	240255c0 	.word	0x240255c0
9000f3b8:	90025354 	.word	0x90025354

9000f3bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f3c0:	4cb6      	ldr	r4, [pc, #728]	; (9000f69c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
9000f3c2:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f3c4:	fba4 4303 	umull	r4, r3, r4, r3
{  
9000f3c8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f3ca:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f3cc:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f3d0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000f3d4:	429a      	cmp	r2, r3
9000f3d6:	9306      	str	r3, [sp, #24]
{  
9000f3d8:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000f3dc:	f080 8158 	bcs.w	9000f690 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f3e0:	4baf      	ldr	r3, [pc, #700]	; (9000f6a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f3e2:	4cb0      	ldr	r4, [pc, #704]	; (9000f6a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f3e6:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 9000f6ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f3ea:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f3ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f3ee:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f3f0:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000f6b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f3f4:	48ac      	ldr	r0, [pc, #688]	; (9000f6a8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
9000f3f6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 9000f6b4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f3fa:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f3fc:	9300      	str	r3, [sp, #0]
9000f3fe:	e007      	b.n	9000f410 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
9000f400:	9b04      	ldr	r3, [sp, #16]
9000f402:	33c0      	adds	r3, #192	; 0xc0
9000f404:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000f406:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
9000f40a:	4293      	cmp	r3, r2
9000f40c:	f000 8140 	beq.w	9000f690 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f410:	9e05      	ldr	r6, [sp, #20]
9000f412:	9f07      	ldr	r7, [sp, #28]
9000f414:	00f2      	lsls	r2, r6, #3
9000f416:	3601      	adds	r6, #1
9000f418:	9904      	ldr	r1, [sp, #16]
9000f41a:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f41c:	9e03      	ldr	r6, [sp, #12]
9000f41e:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f422:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f426:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f42a:	fb06 f505 	mul.w	r5, r6, r5
9000f42e:	0052      	lsls	r2, r2, #1
9000f430:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
9000f434:	2508      	movs	r5, #8
9000f436:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f438:	9d00      	ldr	r5, [sp, #0]
9000f43a:	4295      	cmp	r5, r2
9000f43c:	d9e0      	bls.n	9000f400 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f43e:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
9000f442:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f444:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
9000f448:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9000f44a:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f44e:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f452:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9000f456:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f458:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f45c:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f460:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f462:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f464:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f466:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f46a:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000f46e:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f472:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f474:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000f478:	08ed      	lsrs	r5, r5, #3
9000f47a:	08bf      	lsrs	r7, r7, #2
9000f47c:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
9000f480:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f482:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f486:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f488:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f48c:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
9000f490:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f494:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f498:	4425      	add	r5, r4
9000f49a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f49e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4a2:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4a6:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f4a8:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4aa:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4ac:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4b0:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000f4b4:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4b8:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4ba:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000f4be:	08ed      	lsrs	r5, r5, #3
9000f4c0:	08bf      	lsrs	r7, r7, #2
9000f4c2:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000f4c6:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4c8:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
9000f4cc:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
9000f4ce:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f4d0:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000f4d4:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f4d8:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4da:	4427      	add	r7, r4
9000f4dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f4e0:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f4e2:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4e6:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4e8:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f4ec:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4f0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4f4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f4f8:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4fa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4fe:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f500:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f504:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000f508:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f50c:	08fe      	lsrs	r6, r7, #3
9000f50e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f512:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f516:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f51a:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f51c:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f520:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
9000f524:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f528:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f52c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f530:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f532:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f536:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f53a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f53c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f53e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f540:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f544:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f548:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f54c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f550:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f554:	08fe      	lsrs	r6, r7, #3
9000f556:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f55a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f55e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f562:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f564:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f568:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
9000f56c:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f570:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f574:	4427      	add	r7, r4
9000f576:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f57a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f57e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f582:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f584:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f586:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f588:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f58c:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f590:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f594:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f598:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f59c:	08fe      	lsrs	r6, r7, #3
9000f59e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f5a2:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f5a6:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f5aa:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f5ac:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000f5b0:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f5b4:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f5b8:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f5ba:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f5be:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f5c2:	44b9      	add	r9, r7
9000f5c4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f5c8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f5cc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f5d0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f5d4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f5d6:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f5d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f5dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000f5e0:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f5e4:	08fe      	lsrs	r6, r7, #3
9000f5e6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f5ea:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f5ee:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f5f2:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f5f4:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f5f8:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
9000f5fc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f600:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f604:	4427      	add	r7, r4
9000f606:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f60a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f60e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f612:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f614:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f616:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f618:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f61c:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f620:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f624:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f628:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f62c:	08fe      	lsrs	r6, r7, #3
9000f62e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f632:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f636:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f63a:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f63c:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f640:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
9000f644:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f648:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f64c:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f64e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f652:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f656:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f65a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f65c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f65e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f660:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f664:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f668:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f66c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f670:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000f674:	08fe      	lsrs	r6, r7, #3
9000f676:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000f67a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000f67e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f682:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
9000f684:	9d01      	ldr	r5, [sp, #4]
9000f686:	3d01      	subs	r5, #1
9000f688:	9501      	str	r5, [sp, #4]
9000f68a:	f47f aed5 	bne.w	9000f438 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000f68e:	e6b7      	b.n	9000f400 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000f690:	ee17 0a90 	vmov	r0, s15
9000f694:	b009      	add	sp, #36	; 0x24
9000f696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f69a:	bf00      	nop
9000f69c:	aaaaaaab 	.word	0xaaaaaaab
9000f6a0:	240261c0 	.word	0x240261c0
9000f6a4:	90025354 	.word	0x90025354
9000f6a8:	240259c0 	.word	0x240259c0
9000f6ac:	24025dc0 	.word	0x24025dc0
9000f6b0:	240251c0 	.word	0x240251c0
9000f6b4:	240255c0 	.word	0x240255c0

9000f6b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
9000f6bc:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000f6c0:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000f6c2:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000f6c4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000f6c8:	f080 8088 	bcs.w	9000f7dc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f6cc:	4b45      	ldr	r3, [pc, #276]	; (9000f7e4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f6ce:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f6d2:	691e      	ldr	r6, [r3, #16]
9000f6d4:	e003      	b.n	9000f6de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000f6d6:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9000f6d8:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
9000f6dc:	d07e      	beq.n	9000f7dc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f6de:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9000f6e0:	4604      	mov	r4, r0
9000f6e2:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f6e6:	3201      	adds	r2, #1
9000f6e8:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f6ec:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f6f0:	fb08 f505 	mul.w	r5, r8, r5
9000f6f4:	005b      	lsls	r3, r3, #1
9000f6f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f6fa:	429e      	cmp	r6, r3
9000f6fc:	d9eb      	bls.n	9000f6d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
9000f6fe:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
9000f702:	18cd      	adds	r5, r1, r3
          pLum++;
9000f704:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000f706:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f70a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f70e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f712:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f716:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f71a:	ea47 070c 	orr.w	r7, r7, ip
9000f71e:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
9000f720:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
9000f722:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f726:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f72a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f72e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f732:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f736:	ea47 070c 	orr.w	r7, r7, ip
9000f73a:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
9000f73c:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f740:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f744:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f748:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f74c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f750:	ea47 070c 	orr.w	r7, r7, ip
9000f754:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9000f756:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f75a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f75e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f762:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f766:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f76a:	ea47 070c 	orr.w	r7, r7, ip
9000f76e:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000f770:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f774:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f778:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f77c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f780:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f784:	ea47 070c 	orr.w	r7, r7, ip
9000f788:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000f78a:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f78e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f792:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f796:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f79a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f79e:	ea47 070c 	orr.w	r7, r7, ip
9000f7a2:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
9000f7a4:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f7a8:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f7ac:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f7b0:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f7b4:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f7b8:	ea47 070c 	orr.w	r7, r7, ip
9000f7bc:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000f7be:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f7c2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f7c6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f7ca:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f7ce:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f7d2:	ea47 070c 	orr.w	r7, r7, ip
9000f7d6:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000f7d8:	d18f      	bne.n	9000f6fa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000f7da:	e77c      	b.n	9000f6d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
9000f7dc:	ee17 0a90 	vmov	r0, s15
9000f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f7e4:	240261c0 	.word	0x240261c0

9000f7e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000f7ec:	0a1c      	lsrs	r4, r3, #8
{  
9000f7ee:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f7f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000f7f4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000f7f8:	429a      	cmp	r2, r3
9000f7fa:	9300      	str	r3, [sp, #0]
9000f7fc:	f080 8129 	bcs.w	9000fa52 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f800:	4b96      	ldr	r3, [pc, #600]	; (9000fa5c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f802:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000fa60 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f806:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f808:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f80c:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f80e:	9401      	str	r4, [sp, #4]
9000f810:	e005      	b.n	9000f81e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
9000f812:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
9000f814:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000f818:	429a      	cmp	r2, r3
9000f81a:	f000 811a 	beq.w	9000fa52 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f81e:	00d3      	lsls	r3, r2, #3
9000f820:	9c01      	ldr	r4, [sp, #4]
9000f822:	3201      	adds	r2, #1
    currentMCU++;
9000f824:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f828:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f82c:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
9000f830:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f832:	fb08 f505 	mul.w	r5, r8, r5
9000f836:	0064      	lsls	r4, r4, #1
9000f838:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f83c:	42a6      	cmp	r6, r4
9000f83e:	d9e8      	bls.n	9000f812 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
9000f840:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
9000f844:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f846:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9000f84a:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
9000f84e:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f852:	fb19 f90a 	smulbb	r9, r9, sl
9000f856:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f85a:	f813 5c08 	ldrb.w	r5, [r3, #-8]
9000f85e:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f862:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f866:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f86a:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f86e:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f872:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f876:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000f87a:	fb19 f90a 	smulbb	r9, r9, sl
9000f87e:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f882:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f886:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f888:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f88a:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
9000f88c:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f890:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
9000f894:	fb19 f90a 	smulbb	r9, r9, sl
9000f898:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f89c:	f813 5c07 	ldrb.w	r5, [r3, #-7]
9000f8a0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f8a4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f8a8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f8ac:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f8b0:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f8b4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f8b8:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
9000f8bc:	fb19 f90a 	smulbb	r9, r9, sl
9000f8c0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f8c4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f8c8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f8ca:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
9000f8cc:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f8d0:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
9000f8d4:	fb19 f90a 	smulbb	r9, r9, sl
9000f8d8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f8dc:	f813 5c06 	ldrb.w	r5, [r3, #-6]
9000f8e0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f8e4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f8e8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f8ec:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f8f0:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f8f4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f8f8:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
9000f8fc:	fb19 f90a 	smulbb	r9, r9, sl
9000f900:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f904:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f908:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f90a:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
9000f90c:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f910:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
9000f914:	fb19 f90a 	smulbb	r9, r9, sl
9000f918:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f91c:	f813 5c05 	ldrb.w	r5, [r3, #-5]
9000f920:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f924:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f928:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f92c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f930:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f934:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f938:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
9000f93c:	fb19 f90a 	smulbb	r9, r9, sl
9000f940:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f944:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f948:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f94a:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
9000f94c:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f950:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
9000f954:	fb19 f90a 	smulbb	r9, r9, sl
9000f958:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f95c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
9000f960:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f964:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f968:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f96c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f970:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f974:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f978:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
9000f97c:	fb19 f90a 	smulbb	r9, r9, sl
9000f980:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f984:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f988:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f98a:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
9000f98c:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f990:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
9000f994:	fb19 f90a 	smulbb	r9, r9, sl
9000f998:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f99c:	f813 5c03 	ldrb.w	r5, [r3, #-3]
9000f9a0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f9a4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f9a8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f9ac:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f9b0:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000f9b4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f9b8:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
9000f9bc:	fb19 f90a 	smulbb	r9, r9, sl
9000f9c0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f9c4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000f9c8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000f9ca:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
9000f9cc:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f9d0:	f813 9c02 	ldrb.w	r9, [r3, #-2]
9000f9d4:	fb19 f90a 	smulbb	r9, r9, sl
9000f9d8:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f9dc:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
9000f9e0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f9e4:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f9e8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f9ec:	ea4f 2555 	mov.w	r5, r5, lsr #9
9000f9f0:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f9f4:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f9f8:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
9000f9fc:	fb19 f90a 	smulbb	r9, r9, sl
9000fa00:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fa04:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000fa08:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000fa0a:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
9000fa0c:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fa10:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
9000fa14:	fb19 f90a 	smulbb	r9, r9, sl
9000fa18:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fa1c:	f813 5c01 	ldrb.w	r5, [r3, #-1]
9000fa20:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fa24:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fa28:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fa2c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fa30:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000fa34:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fa38:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
9000fa3c:	fb19 f90a 	smulbb	r9, r9, sl
9000fa40:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fa44:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000fa48:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9000fa4a:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
9000fa4c:	f47f aef6 	bne.w	9000f83c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
9000fa50:	e6df      	b.n	9000f812 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
9000fa52:	ee17 0a90 	vmov	r0, s15
9000fa56:	b003      	add	sp, #12
9000fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000fa5c:	240261c0 	.word	0x240261c0
9000fa60:	80808081 	.word	0x80808081

9000fa64 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
9000fa64:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000fa66:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000fa68:	6805      	ldr	r5, [r0, #0]
9000fa6a:	4c3e      	ldr	r4, [pc, #248]	; (9000fb64 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000fa6c:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000fa6e:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000fa70:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000fa72:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000fa76:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000fa7a:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000fa7c:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000fa80:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000fa82:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000fa84:	d027      	beq.n	9000fad6 <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000fa86:	b9ed      	cbnz	r5, 9000fac4 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000fa88:	4837      	ldr	r0, [pc, #220]	; (9000fb68 <JPEG_GetDecodeColorConvertFunc+0x104>)
9000fa8a:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
9000fa8c:	f013 0107 	ands.w	r1, r3, #7
9000fa90:	d02b      	beq.n	9000faea <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9000fa92:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000fa96:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9000fa98:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000fa9a:	4419      	add	r1, r3
9000fa9c:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fa9e:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000faa0:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000faa2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000faa4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
9000faa8:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000faaa:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000faae:	fb05 6611 	mls	r6, r5, r1, r6
9000fab2:	b106      	cbz	r6, 9000fab6 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
9000fab4:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000fab6:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000faba:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000fabc:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000fabe:	6013      	str	r3, [r2, #0]
}
9000fac0:	bcf0      	pop	{r4, r5, r6, r7}
9000fac2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
9000fac4:	2d30      	cmp	r5, #48	; 0x30
9000fac6:	d119      	bne.n	9000fafc <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000fac8:	4828      	ldr	r0, [pc, #160]	; (9000fb6c <JPEG_GetDecodeColorConvertFunc+0x108>)
9000faca:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
9000facc:	f013 0107 	ands.w	r1, r3, #7
9000fad0:	d1df      	bne.n	9000fa92 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000fad2:	6161      	str	r1, [r4, #20]
9000fad4:	e00a      	b.n	9000faec <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000fad6:	2f01      	cmp	r7, #1
9000fad8:	d024      	beq.n	9000fb24 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000fada:	2f02      	cmp	r7, #2
9000fadc:	d011      	beq.n	9000fb02 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9000fade:	4824      	ldr	r0, [pc, #144]	; (9000fb70 <JPEG_GetDecodeColorConvertFunc+0x10c>)
9000fae0:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000fae2:	f013 0107 	ands.w	r1, r3, #7
9000fae6:	d1d4      	bne.n	9000fa92 <JPEG_GetDecodeColorConvertFunc+0x2e>
9000fae8:	e7f3      	b.n	9000fad2 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000faea:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000faec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
9000faee:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000faf0:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000faf2:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000faf4:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000faf6:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000fafa:	e7d6      	b.n	9000faaa <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
9000fafc:	2001      	movs	r0, #1
}
9000fafe:	bcf0      	pop	{r4, r5, r6, r7}
9000fb00:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000fb02:	481c      	ldr	r0, [pc, #112]	; (9000fb74 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
9000fb04:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000fb06:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000fb08:	f013 010f 	ands.w	r1, r3, #15
9000fb0c:	d022      	beq.n	9000fb54 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9000fb0e:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
9000fb12:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9000fb14:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000fb16:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
9000fb18:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000fb1a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb1c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000fb1e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb20:	62a1      	str	r1, [r4, #40]	; 0x28
9000fb22:	e7c1      	b.n	9000faa8 <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
9000fb24:	4814      	ldr	r0, [pc, #80]	; (9000fb78 <JPEG_GetDecodeColorConvertFunc+0x114>)
9000fb26:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000fb28:	f013 010f 	ands.w	r1, r3, #15
9000fb2c:	d107      	bne.n	9000fb3e <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000fb2e:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb30:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000fb32:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000fb34:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb36:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000fb38:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000fb3c:	e7b5      	b.n	9000faaa <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9000fb3e:	f1c1 0110 	rsb	r1, r1, #16
9000fb42:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000fb44:	4419      	add	r1, r3
9000fb46:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb48:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000fb4a:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb4c:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000fb4e:	e9c4 5507 	strd	r5, r5, [r4, #28]
9000fb52:	e7a9      	b.n	9000faa8 <JPEG_GetDecodeColorConvertFunc+0x44>
9000fb54:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000fb56:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb58:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9000fb5a:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000fb5e:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000fb60:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000fb62:	e7a2      	b.n	9000faaa <JPEG_GetDecodeColorConvertFunc+0x46>
9000fb64:	240261c0 	.word	0x240261c0
9000fb68:	9000f6b9 	.word	0x9000f6b9
9000fb6c:	9000f7e9 	.word	0x9000f7e9
9000fb70:	9000f3bd 	.word	0x9000f3bd
9000fb74:	9000f0e9 	.word	0x9000f0e9
9000fb78:	9000eebd 	.word	0x9000eebd

9000fb7c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
9000fb7c:	8880      	ldrh	r0, [r0, #4]
9000fb7e:	4770      	bx	lr

9000fb80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
9000fb80:	b570      	push	{r4, r5, r6, lr}
9000fb82:	6803      	ldr	r3, [r0, #0]
9000fb84:	460c      	mov	r4, r1
9000fb86:	2100      	movs	r1, #0
9000fb88:	4605      	mov	r5, r0
9000fb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fb8c:	4798      	blx	r3
9000fb8e:	4606      	mov	r6, r0
9000fb90:	682b      	ldr	r3, [r5, #0]
9000fb92:	4628      	mov	r0, r5
9000fb94:	1ba4      	subs	r4, r4, r6
9000fb96:	6a1b      	ldr	r3, [r3, #32]
9000fb98:	b2a4      	uxth	r4, r4
9000fb9a:	4798      	blx	r3
9000fb9c:	fbb4 f0f0 	udiv	r0, r4, r0
9000fba0:	bd70      	pop	{r4, r5, r6, pc}

9000fba2 <_ZN8touchgfx17AbstractPartition5clearEv>:
9000fba2:	2300      	movs	r3, #0
9000fba4:	8083      	strh	r3, [r0, #4]
9000fba6:	4770      	bx	lr

9000fba8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
9000fba8:	b510      	push	{r4, lr}
9000fbaa:	6803      	ldr	r3, [r0, #0]
9000fbac:	4604      	mov	r4, r0
9000fbae:	8881      	ldrh	r1, [r0, #4]
9000fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fbb2:	4798      	blx	r3
9000fbb4:	88a3      	ldrh	r3, [r4, #4]
9000fbb6:	3301      	adds	r3, #1
9000fbb8:	80a3      	strh	r3, [r4, #4]
9000fbba:	bd10      	pop	{r4, pc}

9000fbbc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
9000fbbc:	6803      	ldr	r3, [r0, #0]
9000fbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fbc0:	4718      	bx	r3

9000fbc2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
9000fbc2:	4770      	bx	lr

9000fbc4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
9000fbc4:	4a02      	ldr	r2, [pc, #8]	; (9000fbd0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
9000fbc6:	6002      	str	r2, [r0, #0]
9000fbc8:	2200      	movs	r2, #0
9000fbca:	8082      	strh	r2, [r0, #4]
9000fbcc:	4770      	bx	lr
9000fbce:	bf00      	nop
9000fbd0:	9002565c 	.word	0x9002565c

9000fbd4 <_ZN8touchgfx9Container13getFirstChildEv>:
9000fbd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
9000fbd6:	4770      	bx	lr

9000fbd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
9000fbd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000fbda:	2000      	movs	r0, #0
9000fbdc:	b12b      	cbz	r3, 9000fbea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9000fbde:	b920      	cbnz	r0, 9000fbea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9000fbe0:	1a5a      	subs	r2, r3, r1
9000fbe2:	699b      	ldr	r3, [r3, #24]
9000fbe4:	4250      	negs	r0, r2
9000fbe6:	4150      	adcs	r0, r2
9000fbe8:	e7f8      	b.n	9000fbdc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
9000fbea:	4770      	bx	lr

9000fbec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
9000fbec:	2300      	movs	r3, #0
9000fbee:	6148      	str	r0, [r1, #20]
9000fbf0:	618b      	str	r3, [r1, #24]
9000fbf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000fbf4:	b913      	cbnz	r3, 9000fbfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
9000fbf6:	6281      	str	r1, [r0, #40]	; 0x28
9000fbf8:	4770      	bx	lr
9000fbfa:	4613      	mov	r3, r2
9000fbfc:	699a      	ldr	r2, [r3, #24]
9000fbfe:	2a00      	cmp	r2, #0
9000fc00:	d1fb      	bne.n	9000fbfa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
9000fc02:	6199      	str	r1, [r3, #24]
9000fc04:	4770      	bx	lr

9000fc06 <_ZN8touchgfx9Container9removeAllEv>:
9000fc06:	2200      	movs	r2, #0
9000fc08:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000fc0a:	b123      	cbz	r3, 9000fc16 <_ZN8touchgfx9Container9removeAllEv+0x10>
9000fc0c:	6999      	ldr	r1, [r3, #24]
9000fc0e:	6281      	str	r1, [r0, #40]	; 0x28
9000fc10:	e9c3 2205 	strd	r2, r2, [r3, #20]
9000fc14:	e7f8      	b.n	9000fc08 <_ZN8touchgfx9Container9removeAllEv+0x2>
9000fc16:	4770      	bx	lr

9000fc18 <_ZN8touchgfx9Container6unlinkEv>:
9000fc18:	2300      	movs	r3, #0
9000fc1a:	6283      	str	r3, [r0, #40]	; 0x28
9000fc1c:	4770      	bx	lr

9000fc1e <_ZNK8touchgfx9Container12getSolidRectEv>:
9000fc1e:	2200      	movs	r2, #0
9000fc20:	8002      	strh	r2, [r0, #0]
9000fc22:	8042      	strh	r2, [r0, #2]
9000fc24:	8082      	strh	r2, [r0, #4]
9000fc26:	80c2      	strh	r2, [r0, #6]
9000fc28:	4770      	bx	lr

9000fc2a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9000fc2a:	b570      	push	{r4, r5, r6, lr}
9000fc2c:	460d      	mov	r5, r1
9000fc2e:	4616      	mov	r6, r2
9000fc30:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000fc32:	b13c      	cbz	r4, 9000fc44 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
9000fc34:	6823      	ldr	r3, [r4, #0]
9000fc36:	4620      	mov	r0, r4
9000fc38:	4632      	mov	r2, r6
9000fc3a:	4629      	mov	r1, r5
9000fc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fc3e:	4798      	blx	r3
9000fc40:	69a4      	ldr	r4, [r4, #24]
9000fc42:	e7f6      	b.n	9000fc32 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
9000fc44:	bd70      	pop	{r4, r5, r6, pc}

9000fc46 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
9000fc46:	b538      	push	{r3, r4, r5, lr}
9000fc48:	460d      	mov	r5, r1
9000fc4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000fc4c:	b134      	cbz	r4, 9000fc5c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9000fc4e:	682b      	ldr	r3, [r5, #0]
9000fc50:	4621      	mov	r1, r4
9000fc52:	4628      	mov	r0, r5
9000fc54:	689b      	ldr	r3, [r3, #8]
9000fc56:	4798      	blx	r3
9000fc58:	69a4      	ldr	r4, [r4, #24]
9000fc5a:	e7f7      	b.n	9000fc4c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9000fc5c:	bd38      	pop	{r3, r4, r5, pc}

9000fc5e <_ZN8touchgfx9ContainerD1Ev>:
9000fc5e:	4770      	bx	lr

9000fc60 <_ZN8touchgfx9ContainerD0Ev>:
9000fc60:	b510      	push	{r4, lr}
9000fc62:	4604      	mov	r4, r0
9000fc64:	212c      	movs	r1, #44	; 0x2c
9000fc66:	f011 fe4c 	bl	90021902 <_ZdlPvj>
9000fc6a:	4620      	mov	r0, r4
9000fc6c:	bd10      	pop	{r4, pc}

9000fc6e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9000fc6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000fc70:	b19b      	cbz	r3, 9000fc9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9000fc72:	428b      	cmp	r3, r1
9000fc74:	d109      	bne.n	9000fc8a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
9000fc76:	699a      	ldr	r2, [r3, #24]
9000fc78:	2100      	movs	r1, #0
9000fc7a:	6159      	str	r1, [r3, #20]
9000fc7c:	6282      	str	r2, [r0, #40]	; 0x28
9000fc7e:	b902      	cbnz	r2, 9000fc82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
9000fc80:	4770      	bx	lr
9000fc82:	6199      	str	r1, [r3, #24]
9000fc84:	4770      	bx	lr
9000fc86:	4613      	mov	r3, r2
9000fc88:	b13a      	cbz	r2, 9000fc9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9000fc8a:	699a      	ldr	r2, [r3, #24]
9000fc8c:	428a      	cmp	r2, r1
9000fc8e:	d1fa      	bne.n	9000fc86 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
9000fc90:	698a      	ldr	r2, [r1, #24]
9000fc92:	619a      	str	r2, [r3, #24]
9000fc94:	2300      	movs	r3, #0
9000fc96:	e9c1 3305 	strd	r3, r3, [r1, #20]
9000fc9a:	4770      	bx	lr

9000fc9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
9000fc9c:	b410      	push	{r4}
9000fc9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000fca0:	4604      	mov	r4, r0
9000fca2:	b92b      	cbnz	r3, 9000fcb0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
9000fca4:	6803      	ldr	r3, [r0, #0]
9000fca6:	4611      	mov	r1, r2
9000fca8:	f85d 4b04 	ldr.w	r4, [sp], #4
9000fcac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000fcae:	4718      	bx	r3
9000fcb0:	b941      	cbnz	r1, 9000fcc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
9000fcb2:	6193      	str	r3, [r2, #24]
9000fcb4:	6282      	str	r2, [r0, #40]	; 0x28
9000fcb6:	6154      	str	r4, [r2, #20]
9000fcb8:	f85d 4b04 	ldr.w	r4, [sp], #4
9000fcbc:	4770      	bx	lr
9000fcbe:	4603      	mov	r3, r0
9000fcc0:	2800      	cmp	r0, #0
9000fcc2:	d0f9      	beq.n	9000fcb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
9000fcc4:	4299      	cmp	r1, r3
9000fcc6:	6998      	ldr	r0, [r3, #24]
9000fcc8:	d1f9      	bne.n	9000fcbe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
9000fcca:	6190      	str	r0, [r2, #24]
9000fccc:	618a      	str	r2, [r1, #24]
9000fcce:	e7f2      	b.n	9000fcb6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

9000fcd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
9000fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000fcd4:	461f      	mov	r7, r3
9000fcd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9000fcda:	460d      	mov	r5, r1
9000fcdc:	4616      	mov	r6, r2
9000fcde:	b103      	cbz	r3, 9000fce2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
9000fce0:	6038      	str	r0, [r7, #0]
9000fce2:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000fce4:	b314      	cbz	r4, 9000fd2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
9000fce6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9000fcea:	b1eb      	cbz	r3, 9000fd28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000fcec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9000fcf0:	428d      	cmp	r5, r1
9000fcf2:	db19      	blt.n	9000fd28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000fcf4:	b289      	uxth	r1, r1
9000fcf6:	8923      	ldrh	r3, [r4, #8]
9000fcf8:	440b      	add	r3, r1
9000fcfa:	b21b      	sxth	r3, r3
9000fcfc:	429d      	cmp	r5, r3
9000fcfe:	da13      	bge.n	9000fd28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000fd00:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9000fd04:	4296      	cmp	r6, r2
9000fd06:	db0f      	blt.n	9000fd28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000fd08:	b292      	uxth	r2, r2
9000fd0a:	8963      	ldrh	r3, [r4, #10]
9000fd0c:	4413      	add	r3, r2
9000fd0e:	b21b      	sxth	r3, r3
9000fd10:	429e      	cmp	r6, r3
9000fd12:	da09      	bge.n	9000fd28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000fd14:	6823      	ldr	r3, [r4, #0]
9000fd16:	1ab2      	subs	r2, r6, r2
9000fd18:	1a69      	subs	r1, r5, r1
9000fd1a:	4620      	mov	r0, r4
9000fd1c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
9000fd20:	b212      	sxth	r2, r2
9000fd22:	463b      	mov	r3, r7
9000fd24:	b209      	sxth	r1, r1
9000fd26:	47c0      	blx	r8
9000fd28:	69a4      	ldr	r4, [r4, #24]
9000fd2a:	e7db      	b.n	9000fce4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9000fd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000fd30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
9000fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000fd34:	4c6d      	ldr	r4, [pc, #436]	; (9000feec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
9000fd36:	b0a1      	sub	sp, #132	; 0x84
9000fd38:	4606      	mov	r6, r0
9000fd3a:	6824      	ldr	r4, [r4, #0]
9000fd3c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9000fd3e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
9000fd42:	2400      	movs	r4, #0
9000fd44:	9303      	str	r3, [sp, #12]
9000fd46:	802c      	strh	r4, [r5, #0]
9000fd48:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9000fd4a:	802c      	strh	r4, [r5, #0]
9000fd4c:	601c      	str	r4, [r3, #0]
9000fd4e:	e9cd 1201 	strd	r1, r2, [sp, #4]
9000fd52:	f7ff ffbd 	bl	9000fcd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9000fd56:	f1b9 0f03 	cmp.w	r9, #3
9000fd5a:	f340 80c1 	ble.w	9000fee0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9000fd5e:	4631      	mov	r1, r6
9000fd60:	a80c      	add	r0, sp, #48	; 0x30
9000fd62:	f004 f8b3 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000fd66:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9000fd6a:	9306      	str	r3, [sp, #24]
9000fd6c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9000fd70:	9307      	str	r3, [sp, #28]
9000fd72:	9b03      	ldr	r3, [sp, #12]
9000fd74:	f8d3 a000 	ldr.w	sl, [r3]
9000fd78:	f1ba 0f00 	cmp.w	sl, #0
9000fd7c:	f000 80b3 	beq.w	9000fee6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
9000fd80:	4651      	mov	r1, sl
9000fd82:	a810      	add	r0, sp, #64	; 0x40
9000fd84:	f004 f8a2 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000fd88:	2002      	movs	r0, #2
9000fd8a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9000fd8e:	9b01      	ldr	r3, [sp, #4]
9000fd90:	9a06      	ldr	r2, [sp, #24]
9000fd92:	fb91 f1f0 	sdiv	r1, r1, r0
9000fd96:	189d      	adds	r5, r3, r2
9000fd98:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
9000fd9c:	9a07      	ldr	r2, [sp, #28]
9000fd9e:	4419      	add	r1, r3
9000fda0:	9b02      	ldr	r3, [sp, #8]
9000fda2:	4413      	add	r3, r2
9000fda4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
9000fda8:	1a6d      	subs	r5, r5, r1
9000fdaa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9000fdae:	fb92 f2f0 	sdiv	r2, r2, r0
9000fdb2:	440a      	add	r2, r1
9000fdb4:	1a9b      	subs	r3, r3, r2
9000fdb6:	435b      	muls	r3, r3
9000fdb8:	fb05 3505 	mla	r5, r5, r5, r3
9000fdbc:	4f4c      	ldr	r7, [pc, #304]	; (9000fef0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9000fdbe:	ac10      	add	r4, sp, #64	; 0x40
9000fdc0:	f1b9 0f0c 	cmp.w	r9, #12
9000fdc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000fdc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000fdc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000fdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000fdcc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000fdce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000fdd0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
9000fdd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
9000fdd8:	f04f 0303 	mov.w	r3, #3
9000fddc:	bfd8      	it	le
9000fdde:	f109 32ff 	addle.w	r2, r9, #4294967295
9000fde2:	f04f 0400 	mov.w	r4, #0
9000fde6:	f8cd 9000 	str.w	r9, [sp]
9000fdea:	bfcc      	ite	gt
9000fdec:	4698      	movgt	r8, r3
9000fdee:	fb92 f8f3 	sdivle	r8, r2, r3
9000fdf2:	1c63      	adds	r3, r4, #1
9000fdf4:	aa10      	add	r2, sp, #64	; 0x40
9000fdf6:	f004 0401 	and.w	r4, r4, #1
9000fdfa:	f04f 0b00 	mov.w	fp, #0
9000fdfe:	9308      	str	r3, [sp, #32]
9000fe00:	9b00      	ldr	r3, [sp, #0]
9000fe02:	eb02 1444 	add.w	r4, r2, r4, lsl #5
9000fe06:	fb93 f3f8 	sdiv	r3, r3, r8
9000fe0a:	3404      	adds	r4, #4
9000fe0c:	b29b      	uxth	r3, r3
9000fe0e:	9304      	str	r3, [sp, #16]
9000fe10:	9a04      	ldr	r2, [sp, #16]
9000fe12:	f854 3c04 	ldr.w	r3, [r4, #-4]
9000fe16:	fb13 f302 	smulbb	r3, r3, r2
9000fe1a:	9a01      	ldr	r2, [sp, #4]
9000fe1c:	b29b      	uxth	r3, r3
9000fe1e:	1899      	adds	r1, r3, r2
9000fe20:	9305      	str	r3, [sp, #20]
9000fe22:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
9000fe26:	b209      	sxth	r1, r1
9000fe28:	4299      	cmp	r1, r3
9000fe2a:	db4d      	blt.n	9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe2c:	8932      	ldrh	r2, [r6, #8]
9000fe2e:	4413      	add	r3, r2
9000fe30:	b21b      	sxth	r3, r3
9000fe32:	4299      	cmp	r1, r3
9000fe34:	da48      	bge.n	9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe36:	9b04      	ldr	r3, [sp, #16]
9000fe38:	6827      	ldr	r7, [r4, #0]
9000fe3a:	fb17 f703 	smulbb	r7, r7, r3
9000fe3e:	9b02      	ldr	r3, [sp, #8]
9000fe40:	b2bf      	uxth	r7, r7
9000fe42:	18fa      	adds	r2, r7, r3
9000fe44:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
9000fe48:	b212      	sxth	r2, r2
9000fe4a:	429a      	cmp	r2, r3
9000fe4c:	db3c      	blt.n	9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe4e:	8970      	ldrh	r0, [r6, #10]
9000fe50:	4403      	add	r3, r0
9000fe52:	b21b      	sxth	r3, r3
9000fe54:	429a      	cmp	r2, r3
9000fe56:	da37      	bge.n	9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe58:	2300      	movs	r3, #0
9000fe5a:	4630      	mov	r0, r6
9000fe5c:	930b      	str	r3, [sp, #44]	; 0x2c
9000fe5e:	ab0b      	add	r3, sp, #44	; 0x2c
9000fe60:	f7ff ff36 	bl	9000fcd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9000fe64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9000fe66:	b37a      	cbz	r2, 9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe68:	4552      	cmp	r2, sl
9000fe6a:	d02d      	beq.n	9000fec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000fe6c:	4611      	mov	r1, r2
9000fe6e:	a80e      	add	r0, sp, #56	; 0x38
9000fe70:	9209      	str	r2, [sp, #36]	; 0x24
9000fe72:	f004 f82b 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000fe76:	f04f 0e02 	mov.w	lr, #2
9000fe7a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9000fe7e:	9a06      	ldr	r2, [sp, #24]
9000fe80:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
9000fe84:	9b01      	ldr	r3, [sp, #4]
9000fe86:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
9000fe8a:	4413      	add	r3, r2
9000fe8c:	9a07      	ldr	r2, [sp, #28]
9000fe8e:	fb91 f1fe 	sdiv	r1, r1, lr
9000fe92:	fb9c fcfe 	sdiv	ip, ip, lr
9000fe96:	4401      	add	r1, r0
9000fe98:	1a58      	subs	r0, r3, r1
9000fe9a:	9b02      	ldr	r3, [sp, #8]
9000fe9c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
9000fea0:	4413      	add	r3, r2
9000fea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000fea4:	448c      	add	ip, r1
9000fea6:	eba3 030c 	sub.w	r3, r3, ip
9000feaa:	435b      	muls	r3, r3
9000feac:	fb00 3300 	mla	r3, r0, r0, r3
9000feb0:	42ab      	cmp	r3, r5
9000feb2:	d208      	bcs.n	9000fec6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
9000feb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000feb6:	461d      	mov	r5, r3
9000feb8:	9803      	ldr	r0, [sp, #12]
9000feba:	6001      	str	r1, [r0, #0]
9000febc:	992a      	ldr	r1, [sp, #168]	; 0xa8
9000febe:	9805      	ldr	r0, [sp, #20]
9000fec0:	8008      	strh	r0, [r1, #0]
9000fec2:	992b      	ldr	r1, [sp, #172]	; 0xac
9000fec4:	800f      	strh	r7, [r1, #0]
9000fec6:	4692      	mov	sl, r2
9000fec8:	f10b 0b01 	add.w	fp, fp, #1
9000fecc:	3408      	adds	r4, #8
9000fece:	f1bb 0f04 	cmp.w	fp, #4
9000fed2:	d19d      	bne.n	9000fe10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
9000fed4:	9b00      	ldr	r3, [sp, #0]
9000fed6:	9c08      	ldr	r4, [sp, #32]
9000fed8:	444b      	add	r3, r9
9000feda:	4544      	cmp	r4, r8
9000fedc:	9300      	str	r3, [sp, #0]
9000fede:	d188      	bne.n	9000fdf2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
9000fee0:	b021      	add	sp, #132	; 0x84
9000fee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000fee6:	f04f 35ff 	mov.w	r5, #4294967295
9000feea:	e767      	b.n	9000fdbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
9000feec:	2402620c 	.word	0x2402620c
9000fef0:	900229ec 	.word	0x900229ec

9000fef4 <_ZN8touchgfx4RectaNERKS0_>:
9000fef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000fef8:	f9b1 7000 	ldrsh.w	r7, [r1]
9000fefc:	888c      	ldrh	r4, [r1, #4]
9000fefe:	f9b0 9000 	ldrsh.w	r9, [r0]
9000ff02:	443c      	add	r4, r7
9000ff04:	b2a4      	uxth	r4, r4
9000ff06:	fa0f f884 	sxth.w	r8, r4
9000ff0a:	45c1      	cmp	r9, r8
9000ff0c:	da2f      	bge.n	9000ff6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000ff0e:	8882      	ldrh	r2, [r0, #4]
9000ff10:	444a      	add	r2, r9
9000ff12:	b292      	uxth	r2, r2
9000ff14:	fa0f fe82 	sxth.w	lr, r2
9000ff18:	4577      	cmp	r7, lr
9000ff1a:	da28      	bge.n	9000ff6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000ff1c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
9000ff20:	88cb      	ldrh	r3, [r1, #6]
9000ff22:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
9000ff26:	442b      	add	r3, r5
9000ff28:	b21b      	sxth	r3, r3
9000ff2a:	429e      	cmp	r6, r3
9000ff2c:	da1f      	bge.n	9000ff6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000ff2e:	88c3      	ldrh	r3, [r0, #6]
9000ff30:	4433      	add	r3, r6
9000ff32:	b29b      	uxth	r3, r3
9000ff34:	fa0f fc83 	sxth.w	ip, r3
9000ff38:	4565      	cmp	r5, ip
9000ff3a:	da18      	bge.n	9000ff6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000ff3c:	454f      	cmp	r7, r9
9000ff3e:	bfb8      	it	lt
9000ff40:	464f      	movlt	r7, r9
9000ff42:	42b5      	cmp	r5, r6
9000ff44:	bfb8      	it	lt
9000ff46:	4635      	movlt	r5, r6
9000ff48:	45f0      	cmp	r8, lr
9000ff4a:	bfd8      	it	le
9000ff4c:	4622      	movle	r2, r4
9000ff4e:	1bd2      	subs	r2, r2, r7
9000ff50:	8082      	strh	r2, [r0, #4]
9000ff52:	884a      	ldrh	r2, [r1, #2]
9000ff54:	88c9      	ldrh	r1, [r1, #6]
9000ff56:	8007      	strh	r7, [r0, #0]
9000ff58:	440a      	add	r2, r1
9000ff5a:	8045      	strh	r5, [r0, #2]
9000ff5c:	b292      	uxth	r2, r2
9000ff5e:	b211      	sxth	r1, r2
9000ff60:	458c      	cmp	ip, r1
9000ff62:	bfa8      	it	ge
9000ff64:	4613      	movge	r3, r2
9000ff66:	1b5b      	subs	r3, r3, r5
9000ff68:	80c3      	strh	r3, [r0, #6]
9000ff6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ff6e:	2300      	movs	r3, #0
9000ff70:	8003      	strh	r3, [r0, #0]
9000ff72:	8043      	strh	r3, [r0, #2]
9000ff74:	8083      	strh	r3, [r0, #4]
9000ff76:	80c3      	strh	r3, [r0, #6]
9000ff78:	e7f7      	b.n	9000ff6a <_ZN8touchgfx4RectaNERKS0_+0x76>

9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>:
9000ff7a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9000ff7e:	2b00      	cmp	r3, #0
9000ff80:	dd06      	ble.n	9000ff90 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
9000ff82:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
9000ff86:	2800      	cmp	r0, #0
9000ff88:	bfcc      	ite	gt
9000ff8a:	2000      	movgt	r0, #0
9000ff8c:	2001      	movle	r0, #1
9000ff8e:	4770      	bx	lr
9000ff90:	2001      	movs	r0, #1
9000ff92:	4770      	bx	lr

9000ff94 <_ZNK8touchgfx9Container16getContainedAreaEv>:
9000ff94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ff98:	2300      	movs	r3, #0
9000ff9a:	4604      	mov	r4, r0
9000ff9c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9000ff9e:	8003      	strh	r3, [r0, #0]
9000ffa0:	8043      	strh	r3, [r0, #2]
9000ffa2:	8083      	strh	r3, [r0, #4]
9000ffa4:	80c3      	strh	r3, [r0, #6]
9000ffa6:	2d00      	cmp	r5, #0
9000ffa8:	d040      	beq.n	9001002c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
9000ffaa:	1d28      	adds	r0, r5, #4
9000ffac:	f7ff ffe5 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
9000ffb0:	b988      	cbnz	r0, 9000ffd6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9000ffb2:	4620      	mov	r0, r4
9000ffb4:	f7ff ffe1 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
9000ffb8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
9000ffbc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9000ffc0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
9000ffc4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
9000ffc8:	b138      	cbz	r0, 9000ffda <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
9000ffca:	8022      	strh	r2, [r4, #0]
9000ffcc:	8063      	strh	r3, [r4, #2]
9000ffce:	f8a4 e004 	strh.w	lr, [r4, #4]
9000ffd2:	f8a4 c006 	strh.w	ip, [r4, #6]
9000ffd6:	69ad      	ldr	r5, [r5, #24]
9000ffd8:	e7e5      	b.n	9000ffa6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9000ffda:	f9b4 0000 	ldrsh.w	r0, [r4]
9000ffde:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9000ffe2:	4290      	cmp	r0, r2
9000ffe4:	4607      	mov	r7, r0
9000ffe6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
9000ffea:	460e      	mov	r6, r1
9000ffec:	bfa8      	it	ge
9000ffee:	4617      	movge	r7, r2
9000fff0:	4299      	cmp	r1, r3
9000fff2:	4472      	add	r2, lr
9000fff4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
9000fff8:	bfa8      	it	ge
9000fffa:	461e      	movge	r6, r3
9000fffc:	4440      	add	r0, r8
9000fffe:	4471      	add	r1, lr
90010000:	4463      	add	r3, ip
90010002:	b200      	sxth	r0, r0
90010004:	8027      	strh	r7, [r4, #0]
90010006:	b212      	sxth	r2, r2
90010008:	8066      	strh	r6, [r4, #2]
9001000a:	b209      	sxth	r1, r1
9001000c:	b21b      	sxth	r3, r3
9001000e:	4290      	cmp	r0, r2
90010010:	bfac      	ite	ge
90010012:	ebc7 0200 	rsbge	r2, r7, r0
90010016:	ebc7 0202 	rsblt	r2, r7, r2
9001001a:	4299      	cmp	r1, r3
9001001c:	bfac      	ite	ge
9001001e:	ebc6 0301 	rsbge	r3, r6, r1
90010022:	ebc6 0303 	rsblt	r3, r6, r3
90010026:	80a2      	strh	r2, [r4, #4]
90010028:	80e3      	strh	r3, [r4, #6]
9001002a:	e7d4      	b.n	9000ffd6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001002c:	4620      	mov	r0, r4
9001002e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010032 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90010032:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90010036:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001003a:	b383      	cbz	r3, 9001009e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001003c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001003e:	b374      	cbz	r4, 9001009e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90010040:	f9b1 5000 	ldrsh.w	r5, [r1]
90010044:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90010048:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
9001004c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90010050:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90010054:	b303      	cbz	r3, 90010098 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90010056:	4668      	mov	r0, sp
90010058:	1d21      	adds	r1, r4, #4
9001005a:	f8ad 5000 	strh.w	r5, [sp]
9001005e:	f8ad 6002 	strh.w	r6, [sp, #2]
90010062:	f8ad 7004 	strh.w	r7, [sp, #4]
90010066:	f8ad 8006 	strh.w	r8, [sp, #6]
9001006a:	f7ff ff43 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
9001006e:	4668      	mov	r0, sp
90010070:	f7ff ff83 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90010074:	b980      	cbnz	r0, 90010098 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90010076:	f8bd 3000 	ldrh.w	r3, [sp]
9001007a:	4669      	mov	r1, sp
9001007c:	88a2      	ldrh	r2, [r4, #4]
9001007e:	4620      	mov	r0, r4
90010080:	1a9b      	subs	r3, r3, r2
90010082:	88e2      	ldrh	r2, [r4, #6]
90010084:	f8ad 3000 	strh.w	r3, [sp]
90010088:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001008c:	1a9b      	subs	r3, r3, r2
9001008e:	f8ad 3002 	strh.w	r3, [sp, #2]
90010092:	6823      	ldr	r3, [r4, #0]
90010094:	689b      	ldr	r3, [r3, #8]
90010096:	4798      	blx	r3
90010098:	69a4      	ldr	r4, [r4, #24]
9001009a:	2c00      	cmp	r4, #0
9001009c:	d1d8      	bne.n	90010050 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
9001009e:	b002      	add	sp, #8
900100a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900100a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
900100a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
900100a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900100aa:	460d      	mov	r5, r1
900100ac:	4616      	mov	r6, r2
900100ae:	b323      	cbz	r3, 900100fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900100b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
900100b2:	b314      	cbz	r4, 900100fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900100b4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900100b8:	b1eb      	cbz	r3, 900100f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
900100ba:	6828      	ldr	r0, [r5, #0]
900100bc:	466b      	mov	r3, sp
900100be:	6869      	ldr	r1, [r5, #4]
900100c0:	c303      	stmia	r3!, {r0, r1}
900100c2:	4668      	mov	r0, sp
900100c4:	1d21      	adds	r1, r4, #4
900100c6:	f7ff ff15 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
900100ca:	4668      	mov	r0, sp
900100cc:	f7ff ff55 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
900100d0:	b988      	cbnz	r0, 900100f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
900100d2:	f8bd 3000 	ldrh.w	r3, [sp]
900100d6:	4669      	mov	r1, sp
900100d8:	88a2      	ldrh	r2, [r4, #4]
900100da:	4620      	mov	r0, r4
900100dc:	1a9b      	subs	r3, r3, r2
900100de:	88e2      	ldrh	r2, [r4, #6]
900100e0:	f8ad 3000 	strh.w	r3, [sp]
900100e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900100e8:	1a9b      	subs	r3, r3, r2
900100ea:	4632      	mov	r2, r6
900100ec:	f8ad 3002 	strh.w	r3, [sp, #2]
900100f0:	6823      	ldr	r3, [r4, #0]
900100f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900100f4:	4798      	blx	r3
900100f6:	69a4      	ldr	r4, [r4, #24]
900100f8:	e7db      	b.n	900100b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
900100fa:	b002      	add	sp, #8
900100fc:	bd70      	pop	{r4, r5, r6, pc}

900100fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
900100fe:	6803      	ldr	r3, [r0, #0]
90010100:	b513      	push	{r0, r1, r4, lr}
90010102:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90010106:	2300      	movs	r3, #0
90010108:	e9cd 3300 	strd	r3, r3, [sp]
9001010c:	466b      	mov	r3, sp
9001010e:	47a0      	blx	r4
90010110:	b002      	add	sp, #8
90010112:	bd10      	pop	{r4, pc}

90010114 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90010114:	2301      	movs	r3, #1
90010116:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9001011a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001011e:	4770      	bx	lr

90010120 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90010120:	2301      	movs	r3, #1
90010122:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90010126:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001012a:	4770      	bx	lr

9001012c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9001012c:	6843      	ldr	r3, [r0, #4]
9001012e:	2201      	movs	r2, #1
90010130:	725a      	strb	r2, [r3, #9]
90010132:	6840      	ldr	r0, [r0, #4]
90010134:	6803      	ldr	r3, [r0, #0]
90010136:	691b      	ldr	r3, [r3, #16]
90010138:	4718      	bx	r3

9001013a <_ZN8touchgfx3HAL8flushDMAEv>:
9001013a:	6840      	ldr	r0, [r0, #4]
9001013c:	6803      	ldr	r3, [r0, #0]
9001013e:	689b      	ldr	r3, [r3, #8]
90010140:	4718      	bx	r3

90010142 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90010142:	b530      	push	{r4, r5, lr}
90010144:	b08b      	sub	sp, #44	; 0x2c
90010146:	6804      	ldr	r4, [r0, #0]
90010148:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001014c:	9509      	str	r5, [sp, #36]	; 0x24
9001014e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90010152:	9508      	str	r5, [sp, #32]
90010154:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90010158:	9507      	str	r5, [sp, #28]
9001015a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
9001015e:	9506      	str	r5, [sp, #24]
90010160:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90010164:	9505      	str	r5, [sp, #20]
90010166:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
9001016a:	9504      	str	r5, [sp, #16]
9001016c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90010170:	9503      	str	r5, [sp, #12]
90010172:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90010176:	9502      	str	r5, [sp, #8]
90010178:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
9001017c:	e9cd 3500 	strd	r3, r5, [sp]
90010180:	4613      	mov	r3, r2
90010182:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90010184:	2200      	movs	r2, #0
90010186:	47a0      	blx	r4
90010188:	b00b      	add	sp, #44	; 0x2c
9001018a:	bd30      	pop	{r4, r5, pc}

9001018c <_ZN8touchgfx3HAL10beginFrameEv>:
9001018c:	4b04      	ldr	r3, [pc, #16]	; (900101a0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
9001018e:	781b      	ldrb	r3, [r3, #0]
90010190:	b123      	cbz	r3, 9001019c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90010192:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90010196:	f080 0001 	eor.w	r0, r0, #1
9001019a:	4770      	bx	lr
9001019c:	2001      	movs	r0, #1
9001019e:	4770      	bx	lr
900101a0:	2402620a 	.word	0x2402620a

900101a4 <_ZN8touchgfx3HAL8endFrameEv>:
900101a4:	b510      	push	{r4, lr}
900101a6:	4604      	mov	r4, r0
900101a8:	6840      	ldr	r0, [r0, #4]
900101aa:	6803      	ldr	r3, [r0, #0]
900101ac:	689b      	ldr	r3, [r3, #8]
900101ae:	4798      	blx	r3
900101b0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
900101b4:	b113      	cbz	r3, 900101bc <_ZN8touchgfx3HAL8endFrameEv+0x18>
900101b6:	2301      	movs	r3, #1
900101b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
900101bc:	bd10      	pop	{r4, pc}

900101be <_ZN8touchgfx3HAL10initializeEv>:
900101be:	b510      	push	{r4, lr}
900101c0:	4604      	mov	r4, r0
900101c2:	f7f1 fbb7 	bl	90001934 <_ZN8touchgfx10OSWrappers10initializeEv>
900101c6:	f7f0 f99b 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
900101ca:	6860      	ldr	r0, [r4, #4]
900101cc:	6803      	ldr	r3, [r0, #0]
900101ce:	68db      	ldr	r3, [r3, #12]
900101d0:	4798      	blx	r3
900101d2:	68e0      	ldr	r0, [r4, #12]
900101d4:	6803      	ldr	r3, [r0, #0]
900101d6:	689b      	ldr	r3, [r3, #8]
900101d8:	4798      	blx	r3
900101da:	6823      	ldr	r3, [r4, #0]
900101dc:	4620      	mov	r0, r4
900101de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900101e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900101e4:	4718      	bx	r3
	...

900101e8 <_ZN8touchgfx3HAL4tickEv>:
900101e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900101ea:	6803      	ldr	r3, [r0, #0]
900101ec:	4604      	mov	r4, r0
900101ee:	4d5b      	ldr	r5, [pc, #364]	; (9001035c <_ZN8touchgfx3HAL4tickEv+0x174>)
900101f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900101f4:	4798      	blx	r3
900101f6:	2800      	cmp	r0, #0
900101f8:	f000 8095 	beq.w	90010326 <_ZN8touchgfx3HAL4tickEv+0x13e>
900101fc:	2001      	movs	r0, #1
900101fe:	2600      	movs	r6, #0
90010200:	f7f0 f9a8 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90010204:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90010208:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
9001020c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90010210:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90010214:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90010218:	b133      	cbz	r3, 90010228 <_ZN8touchgfx3HAL4tickEv+0x40>
9001021a:	6823      	ldr	r3, [r4, #0]
9001021c:	4620      	mov	r0, r4
9001021e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90010222:	4798      	blx	r3
90010224:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90010228:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9001022c:	2601      	movs	r6, #1
9001022e:	6862      	ldr	r2, [r4, #4]
90010230:	f083 0301 	eor.w	r3, r3, #1
90010234:	702e      	strb	r6, [r5, #0]
90010236:	7253      	strb	r3, [r2, #9]
90010238:	f002 fd68 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
9001023c:	6803      	ldr	r3, [r0, #0]
9001023e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90010240:	4798      	blx	r3
90010242:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90010246:	b90b      	cbnz	r3, 9001024c <_ZN8touchgfx3HAL4tickEv+0x64>
90010248:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
9001024c:	f002 fd5e 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
90010250:	6803      	ldr	r3, [r0, #0]
90010252:	695b      	ldr	r3, [r3, #20]
90010254:	4798      	blx	r3
90010256:	6da0      	ldr	r0, [r4, #88]	; 0x58
90010258:	6803      	ldr	r3, [r0, #0]
9001025a:	691b      	ldr	r3, [r3, #16]
9001025c:	4798      	blx	r3
9001025e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90010262:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90010266:	3b01      	subs	r3, #1
90010268:	b2db      	uxtb	r3, r3
9001026a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9001026e:	b10a      	cbz	r2, 90010274 <_ZN8touchgfx3HAL4tickEv+0x8c>
90010270:	2b00      	cmp	r3, #0
90010272:	d1eb      	bne.n	9001024c <_ZN8touchgfx3HAL4tickEv+0x64>
90010274:	4a3a      	ldr	r2, [pc, #232]	; (90010360 <_ZN8touchgfx3HAL4tickEv+0x178>)
90010276:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
9001027a:	7813      	ldrb	r3, [r2, #0]
9001027c:	3301      	adds	r3, #1
9001027e:	b25b      	sxtb	r3, r3
90010280:	4299      	cmp	r1, r3
90010282:	7013      	strb	r3, [r2, #0]
90010284:	dc10      	bgt.n	900102a8 <_ZN8touchgfx3HAL4tickEv+0xc0>
90010286:	2300      	movs	r3, #0
90010288:	68e0      	ldr	r0, [r4, #12]
9001028a:	a902      	add	r1, sp, #8
9001028c:	7013      	strb	r3, [r2, #0]
9001028e:	aa03      	add	r2, sp, #12
90010290:	6803      	ldr	r3, [r0, #0]
90010292:	68db      	ldr	r3, [r3, #12]
90010294:	4798      	blx	r3
90010296:	6823      	ldr	r3, [r4, #0]
90010298:	2800      	cmp	r0, #0
9001029a:	d050      	beq.n	9001033e <_ZN8touchgfx3HAL4tickEv+0x156>
9001029c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900102a0:	4620      	mov	r0, r4
900102a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
900102a6:	4798      	blx	r3
900102a8:	2300      	movs	r3, #0
900102aa:	6960      	ldr	r0, [r4, #20]
900102ac:	f88d 3007 	strb.w	r3, [sp, #7]
900102b0:	b158      	cbz	r0, 900102ca <_ZN8touchgfx3HAL4tickEv+0xe2>
900102b2:	6803      	ldr	r3, [r0, #0]
900102b4:	f10d 0107 	add.w	r1, sp, #7
900102b8:	68db      	ldr	r3, [r3, #12]
900102ba:	4798      	blx	r3
900102bc:	b128      	cbz	r0, 900102ca <_ZN8touchgfx3HAL4tickEv+0xe2>
900102be:	6da0      	ldr	r0, [r4, #88]	; 0x58
900102c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
900102c4:	6803      	ldr	r3, [r0, #0]
900102c6:	68db      	ldr	r3, [r3, #12]
900102c8:	4798      	blx	r3
900102ca:	f104 001c 	add.w	r0, r4, #28
900102ce:	f011 fa63 	bl	90021798 <_ZN8touchgfx8Gestures4tickEv>
900102d2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
900102d6:	b30b      	cbz	r3, 9001031c <_ZN8touchgfx3HAL4tickEv+0x134>
900102d8:	6920      	ldr	r0, [r4, #16]
900102da:	6803      	ldr	r3, [r0, #0]
900102dc:	691b      	ldr	r3, [r3, #16]
900102de:	4798      	blx	r3
900102e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
900102e2:	4606      	mov	r6, r0
900102e4:	b903      	cbnz	r3, 900102e8 <_ZN8touchgfx3HAL4tickEv+0x100>
900102e6:	6720      	str	r0, [r4, #112]	; 0x70
900102e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
900102ea:	4a1e      	ldr	r2, [pc, #120]	; (90010364 <_ZN8touchgfx3HAL4tickEv+0x17c>)
900102ec:	1af3      	subs	r3, r6, r3
900102ee:	4293      	cmp	r3, r2
900102f0:	d914      	bls.n	9001031c <_ZN8touchgfx3HAL4tickEv+0x134>
900102f2:	6920      	ldr	r0, [r4, #16]
900102f4:	6803      	ldr	r3, [r0, #0]
900102f6:	699b      	ldr	r3, [r3, #24]
900102f8:	4798      	blx	r3
900102fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
900102fc:	2264      	movs	r2, #100	; 0x64
900102fe:	1af3      	subs	r3, r6, r3
90010300:	fbb3 f3f2 	udiv	r3, r3, r2
90010304:	fbb0 f0f3 	udiv	r0, r0, r3
90010308:	2800      	cmp	r0, #0
9001030a:	dc1d      	bgt.n	90010348 <_ZN8touchgfx3HAL4tickEv+0x160>
9001030c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90010310:	6920      	ldr	r0, [r4, #16]
90010312:	2100      	movs	r1, #0
90010314:	6803      	ldr	r3, [r0, #0]
90010316:	69db      	ldr	r3, [r3, #28]
90010318:	4798      	blx	r3
9001031a:	6726      	str	r6, [r4, #112]	; 0x70
9001031c:	f002 fcf6 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
90010320:	6803      	ldr	r3, [r0, #0]
90010322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010324:	4798      	blx	r3
90010326:	6823      	ldr	r3, [r4, #0]
90010328:	4620      	mov	r0, r4
9001032a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9001032e:	4798      	blx	r3
90010330:	2001      	movs	r0, #1
90010332:	f7f0 f943 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90010336:	2300      	movs	r3, #0
90010338:	702b      	strb	r3, [r5, #0]
9001033a:	b004      	add	sp, #16
9001033c:	bd70      	pop	{r4, r5, r6, pc}
9001033e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90010342:	4620      	mov	r0, r4
90010344:	4798      	blx	r3
90010346:	e7af      	b.n	900102a8 <_ZN8touchgfx3HAL4tickEv+0xc0>
90010348:	2863      	cmp	r0, #99	; 0x63
9001034a:	bfcb      	itete	gt
9001034c:	2300      	movgt	r3, #0
9001034e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90010352:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90010356:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
9001035a:	e7d9      	b.n	90010310 <_ZN8touchgfx3HAL4tickEv+0x128>
9001035c:	24026210 	.word	0x24026210
90010360:	24026211 	.word	0x24026211
90010364:	05f5e100 	.word	0x05f5e100

90010368 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90010368:	f7f1 bb16 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001036c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
9001036c:	6581      	str	r1, [r0, #88]	; 0x58
9001036e:	301c      	adds	r0, #28
90010370:	f011 ba10 	b.w	90021794 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90010374 <_ZN8touchgfx3HAL5touchEll>:
90010374:	b530      	push	{r4, r5, lr}
90010376:	b087      	sub	sp, #28
90010378:	4604      	mov	r4, r0
9001037a:	a804      	add	r0, sp, #16
9001037c:	e9cd 1204 	strd	r1, r2, [sp, #16]
90010380:	f002 fac2 	bl	90012908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90010384:	9b04      	ldr	r3, [sp, #16]
90010386:	a906      	add	r1, sp, #24
90010388:	a803      	add	r0, sp, #12
9001038a:	f8ad 300c 	strh.w	r3, [sp, #12]
9001038e:	9b05      	ldr	r3, [sp, #20]
90010390:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90010394:	f002 fb0a 	bl	900129ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90010398:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
9001039c:	f104 001c 	add.w	r0, r4, #28
900103a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
900103a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
900103a8:	b189      	cbz	r1, 900103ce <_ZN8touchgfx3HAL5touchEll+0x5a>
900103aa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
900103ae:	9300      	str	r3, [sp, #0]
900103b0:	4613      	mov	r3, r2
900103b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900103b6:	462a      	mov	r2, r5
900103b8:	f011 f9fc 	bl	900217b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
900103bc:	b128      	cbz	r0, 900103ca <_ZN8touchgfx3HAL5touchEll+0x56>
900103be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
900103c2:	65e3      	str	r3, [r4, #92]	; 0x5c
900103c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900103c8:	6623      	str	r3, [r4, #96]	; 0x60
900103ca:	b007      	add	sp, #28
900103cc:	bd30      	pop	{r4, r5, pc}
900103ce:	f011 fa31 	bl	90021834 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900103d2:	2301      	movs	r3, #1
900103d4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900103d8:	e7f1      	b.n	900103be <_ZN8touchgfx3HAL5touchEll+0x4a>

900103da <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
900103da:	b510      	push	{r4, lr}
900103dc:	2b00      	cmp	r3, #0
900103de:	d046      	beq.n	9001046e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900103e0:	ea81 0002 	eor.w	r0, r1, r2
900103e4:	07c4      	lsls	r4, r0, #31
900103e6:	d508      	bpl.n	900103fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
900103e8:	440b      	add	r3, r1
900103ea:	3a01      	subs	r2, #1
900103ec:	428b      	cmp	r3, r1
900103ee:	d93e      	bls.n	9001046e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900103f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900103f4:	f801 0b01 	strb.w	r0, [r1], #1
900103f8:	e7f8      	b.n	900103ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
900103fa:	07d0      	lsls	r0, r2, #31
900103fc:	bf42      	ittt	mi
900103fe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90010402:	f103 33ff 	addmi.w	r3, r3, #4294967295
90010406:	f801 0b01 	strbmi.w	r0, [r1], #1
9001040a:	2b01      	cmp	r3, #1
9001040c:	d911      	bls.n	90010432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001040e:	ea81 0402 	eor.w	r4, r1, r2
90010412:	4610      	mov	r0, r2
90010414:	07a4      	lsls	r4, r4, #30
90010416:	d022      	beq.n	9001045e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90010418:	f023 0401 	bic.w	r4, r3, #1
9001041c:	440c      	add	r4, r1
9001041e:	428c      	cmp	r4, r1
90010420:	4602      	mov	r2, r0
90010422:	d904      	bls.n	9001042e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90010424:	8812      	ldrh	r2, [r2, #0]
90010426:	3002      	adds	r0, #2
90010428:	f821 2b02 	strh.w	r2, [r1], #2
9001042c:	e7f7      	b.n	9001041e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001042e:	f003 0301 	and.w	r3, r3, #1
90010432:	f023 0003 	bic.w	r0, r3, #3
90010436:	4408      	add	r0, r1
90010438:	4288      	cmp	r0, r1
9001043a:	4614      	mov	r4, r2
9001043c:	d904      	bls.n	90010448 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9001043e:	6824      	ldr	r4, [r4, #0]
90010440:	3204      	adds	r2, #4
90010442:	f841 4b04 	str.w	r4, [r1], #4
90010446:	e7f7      	b.n	90010438 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90010448:	f003 0303 	and.w	r3, r3, #3
9001044c:	3a01      	subs	r2, #1
9001044e:	440b      	add	r3, r1
90010450:	428b      	cmp	r3, r1
90010452:	d90c      	bls.n	9001046e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90010454:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90010458:	f801 0b01 	strb.w	r0, [r1], #1
9001045c:	e7f8      	b.n	90010450 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9001045e:	0790      	lsls	r0, r2, #30
90010460:	d0e7      	beq.n	90010432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90010462:	f832 0b02 	ldrh.w	r0, [r2], #2
90010466:	3b02      	subs	r3, #2
90010468:	f821 0b02 	strh.w	r0, [r1], #2
9001046c:	e7e1      	b.n	90010432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001046e:	2001      	movs	r0, #1
90010470:	bd10      	pop	{r4, pc}

90010472 <_ZN8touchgfx3HAL7noTouchEv>:
90010472:	b510      	push	{r4, lr}
90010474:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90010478:	4604      	mov	r4, r0
9001047a:	b153      	cbz	r3, 90010492 <_ZN8touchgfx3HAL7noTouchEv+0x20>
9001047c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90010480:	2101      	movs	r1, #1
90010482:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90010486:	301c      	adds	r0, #28
90010488:	f011 f9d4 	bl	90021834 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001048c:	2300      	movs	r3, #0
9001048e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90010492:	bd10      	pop	{r4, pc}

90010494 <_ZN8touchgfx8Drawable5setXYEss>:
90010494:	b570      	push	{r4, r5, r6, lr}
90010496:	6803      	ldr	r3, [r0, #0]
90010498:	4604      	mov	r4, r0
9001049a:	4615      	mov	r5, r2
9001049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001049e:	4798      	blx	r3
900104a0:	6823      	ldr	r3, [r4, #0]
900104a2:	4629      	mov	r1, r5
900104a4:	4620      	mov	r0, r4
900104a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900104a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900104ac:	4718      	bx	r3
	...

900104b0 <_ZN8touchgfx3HAL3lcdEv>:
900104b0:	4b04      	ldr	r3, [pc, #16]	; (900104c4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
900104b2:	681b      	ldr	r3, [r3, #0]
900104b4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900104b8:	b10a      	cbz	r2, 900104be <_ZN8touchgfx3HAL3lcdEv+0xe>
900104ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900104bc:	b900      	cbnz	r0, 900104c0 <_ZN8touchgfx3HAL3lcdEv+0x10>
900104be:	6898      	ldr	r0, [r3, #8]
900104c0:	4770      	bx	lr
900104c2:	bf00      	nop
900104c4:	2402620c 	.word	0x2402620c

900104c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
900104c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900104cc:	b085      	sub	sp, #20
900104ce:	4604      	mov	r4, r0
900104d0:	2000      	movs	r0, #0
900104d2:	4699      	mov	r9, r3
900104d4:	ad04      	add	r5, sp, #16
900104d6:	460f      	mov	r7, r1
900104d8:	4690      	mov	r8, r2
900104da:	f845 0d04 	str.w	r0, [r5, #-4]!
900104de:	69a0      	ldr	r0, [r4, #24]
900104e0:	6806      	ldr	r6, [r0, #0]
900104e2:	9501      	str	r5, [sp, #4]
900104e4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
900104e8:	9500      	str	r5, [sp, #0]
900104ea:	6835      	ldr	r5, [r6, #0]
900104ec:	47a8      	blx	r5
900104ee:	4d10      	ldr	r5, [pc, #64]	; (90010530 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
900104f0:	4606      	mov	r6, r0
900104f2:	f8a5 9000 	strh.w	r9, [r5]
900104f6:	f7ff ffdb 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
900104fa:	6803      	ldr	r3, [r0, #0]
900104fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900104fe:	4798      	blx	r3
90010500:	b128      	cbz	r0, 9001050e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90010502:	2801      	cmp	r0, #1
90010504:	d00b      	beq.n	9001051e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90010506:	4630      	mov	r0, r6
90010508:	b005      	add	sp, #20
9001050a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001050e:	882b      	ldrh	r3, [r5, #0]
90010510:	fb08 7203 	mla	r2, r8, r3, r7
90010514:	9b03      	ldr	r3, [sp, #12]
90010516:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
9001051a:	63e3      	str	r3, [r4, #60]	; 0x3c
9001051c:	e7f3      	b.n	90010506 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
9001051e:	882a      	ldrh	r2, [r5, #0]
90010520:	9b03      	ldr	r3, [sp, #12]
90010522:	fb08 7202 	mla	r2, r8, r2, r7
90010526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001052a:	1a9a      	subs	r2, r3, r2
9001052c:	63e2      	str	r2, [r4, #60]	; 0x3c
9001052e:	e7ea      	b.n	90010506 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90010530:	24026206 	.word	0x24026206

90010534 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90010534:	b5f0      	push	{r4, r5, r6, r7, lr}
90010536:	b08b      	sub	sp, #44	; 0x2c
90010538:	4617      	mov	r7, r2
9001053a:	4604      	mov	r4, r0
9001053c:	460e      	mov	r6, r1
9001053e:	461d      	mov	r5, r3
90010540:	f7ff ffb6 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010544:	6803      	ldr	r3, [r0, #0]
90010546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010548:	4798      	blx	r3
9001054a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001054e:	9007      	str	r0, [sp, #28]
90010550:	4631      	mov	r1, r6
90010552:	6822      	ldr	r2, [r4, #0]
90010554:	e9cd 0308 	strd	r0, r3, [sp, #32]
90010558:	4b0c      	ldr	r3, [pc, #48]	; (9001058c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
9001055a:	4620      	mov	r0, r4
9001055c:	881b      	ldrh	r3, [r3, #0]
9001055e:	9306      	str	r3, [sp, #24]
90010560:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90010564:	9305      	str	r3, [sp, #20]
90010566:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
9001056a:	9304      	str	r3, [sp, #16]
9001056c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010570:	9303      	str	r3, [sp, #12]
90010572:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90010576:	9302      	str	r3, [sp, #8]
90010578:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001057c:	e9cd 5300 	strd	r5, r3, [sp]
90010580:	463b      	mov	r3, r7
90010582:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90010584:	2200      	movs	r2, #0
90010586:	47a8      	blx	r5
90010588:	b00b      	add	sp, #44	; 0x2c
9001058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001058c:	24026206 	.word	0x24026206

90010590 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90010590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010594:	4698      	mov	r8, r3
90010596:	6803      	ldr	r3, [r0, #0]
90010598:	b08b      	sub	sp, #44	; 0x2c
9001059a:	4617      	mov	r7, r2
9001059c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
9001059e:	460e      	mov	r6, r1
900105a0:	4b13      	ldr	r3, [pc, #76]	; (900105f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
900105a2:	4604      	mov	r4, r0
900105a4:	f8b3 9000 	ldrh.w	r9, [r3]
900105a8:	f7ff ff82 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
900105ac:	6803      	ldr	r3, [r0, #0]
900105ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900105b0:	4798      	blx	r3
900105b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
900105b6:	2200      	movs	r2, #0
900105b8:	4631      	mov	r1, r6
900105ba:	e9cd 0308 	strd	r0, r3, [sp, #32]
900105be:	2302      	movs	r3, #2
900105c0:	4620      	mov	r0, r4
900105c2:	e9cd 9306 	strd	r9, r3, [sp, #24]
900105c6:	2301      	movs	r3, #1
900105c8:	9305      	str	r3, [sp, #20]
900105ca:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900105ce:	9304      	str	r3, [sp, #16]
900105d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900105d4:	9303      	str	r3, [sp, #12]
900105d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900105da:	9302      	str	r3, [sp, #8]
900105dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900105e0:	e9cd 8300 	strd	r8, r3, [sp]
900105e4:	463b      	mov	r3, r7
900105e6:	47a8      	blx	r5
900105e8:	b00b      	add	sp, #44	; 0x2c
900105ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900105ee:	bf00      	nop
900105f0:	24026206 	.word	0x24026206

900105f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
900105f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900105f8:	4698      	mov	r8, r3
900105fa:	6803      	ldr	r3, [r0, #0]
900105fc:	b087      	sub	sp, #28
900105fe:	460e      	mov	r6, r1
90010600:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90010602:	4617      	mov	r7, r2
90010604:	4b0f      	ldr	r3, [pc, #60]	; (90010644 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90010606:	4604      	mov	r4, r0
90010608:	f8b3 9000 	ldrh.w	r9, [r3]
9001060c:	f7ff ff50 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010610:	6803      	ldr	r3, [r0, #0]
90010612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010614:	4798      	blx	r3
90010616:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
9001061a:	463a      	mov	r2, r7
9001061c:	4631      	mov	r1, r6
9001061e:	f8cd 900c 	str.w	r9, [sp, #12]
90010622:	e9cd 0304 	strd	r0, r3, [sp, #16]
90010626:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9001062a:	4620      	mov	r0, r4
9001062c:	9302      	str	r3, [sp, #8]
9001062e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90010632:	9301      	str	r3, [sp, #4]
90010634:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90010638:	9300      	str	r3, [sp, #0]
9001063a:	4643      	mov	r3, r8
9001063c:	47a8      	blx	r5
9001063e:	b007      	add	sp, #28
90010640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010644:	24026206 	.word	0x24026206

90010648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90010648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001064c:	4604      	mov	r4, r0
9001064e:	b08f      	sub	sp, #60	; 0x3c
90010650:	4610      	mov	r0, r2
90010652:	460d      	mov	r5, r1
90010654:	4691      	mov	r9, r2
90010656:	461e      	mov	r6, r3
90010658:	f005 fade 	bl	90015c18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001065c:	2800      	cmp	r0, #0
9001065e:	f000 809d 	beq.w	9001079c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90010662:	6823      	ldr	r3, [r4, #0]
90010664:	4620      	mov	r0, r4
90010666:	f8df b198 	ldr.w	fp, [pc, #408]	; 90010800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
9001066a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
9001066e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90010670:	4798      	blx	r3
90010672:	6823      	ldr	r3, [r4, #0]
90010674:	4620      	mov	r0, r4
90010676:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90010804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
9001067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001067c:	4798      	blx	r3
9001067e:	f8bb 3000 	ldrh.w	r3, [fp]
90010682:	4f5c      	ldr	r7, [pc, #368]	; (900107f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010684:	9301      	str	r3, [sp, #4]
90010686:	f8ba 3000 	ldrh.w	r3, [sl]
9001068a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
9001068e:	4640      	mov	r0, r8
90010690:	9302      	str	r3, [sp, #8]
90010692:	883b      	ldrh	r3, [r7, #0]
90010694:	9303      	str	r3, [sp, #12]
90010696:	4b58      	ldr	r3, [pc, #352]	; (900107f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90010698:	881a      	ldrh	r2, [r3, #0]
9001069a:	9305      	str	r3, [sp, #20]
9001069c:	9204      	str	r2, [sp, #16]
9001069e:	f005 fb4f 	bl	90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>
900106a2:	8038      	strh	r0, [r7, #0]
900106a4:	4640      	mov	r0, r8
900106a6:	f005 fb7f 	bl	90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>
900106aa:	9b05      	ldr	r3, [sp, #20]
900106ac:	b280      	uxth	r0, r0
900106ae:	8018      	strh	r0, [r3, #0]
900106b0:	4b52      	ldr	r3, [pc, #328]	; (900107fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
900106b2:	781b      	ldrb	r3, [r3, #0]
900106b4:	2b00      	cmp	r3, #0
900106b6:	d174      	bne.n	900107a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
900106b8:	883b      	ldrh	r3, [r7, #0]
900106ba:	f8aa 0000 	strh.w	r0, [sl]
900106be:	f8ab 3000 	strh.w	r3, [fp]
900106c2:	4648      	mov	r0, r9
900106c4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
900106c8:	f005 faa6 	bl	90015c18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
900106cc:	2200      	movs	r2, #0
900106ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
900106d2:	4611      	mov	r1, r2
900106d4:	4628      	mov	r0, r5
900106d6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
900106da:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
900106de:	f7ff fed9 	bl	90010494 <_ZN8touchgfx8Drawable5setXYEss>
900106e2:	2301      	movs	r3, #1
900106e4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
900106e8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
900106ec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900106f0:	2b00      	cmp	r3, #0
900106f2:	dd5c      	ble.n	900107ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900106f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900106f8:	2b00      	cmp	r3, #0
900106fa:	dd58      	ble.n	900107ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900106fc:	462a      	mov	r2, r5
900106fe:	ab0a      	add	r3, sp, #40	; 0x28
90010700:	f852 0f04 	ldr.w	r0, [r2, #4]!
90010704:	6851      	ldr	r1, [r2, #4]
90010706:	c303      	stmia	r3!, {r0, r1}
90010708:	4631      	mov	r1, r6
9001070a:	a80a      	add	r0, sp, #40	; 0x28
9001070c:	f7ff fbf2 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90010710:	4b38      	ldr	r3, [pc, #224]	; (900107f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010712:	2100      	movs	r1, #0
90010714:	f9b3 2000 	ldrsh.w	r2, [r3]
90010718:	4b37      	ldr	r3, [pc, #220]	; (900107f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
9001071a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001071e:	aa0a      	add	r2, sp, #40	; 0x28
90010720:	f9b3 3000 	ldrsh.w	r3, [r3]
90010724:	910c      	str	r1, [sp, #48]	; 0x30
90010726:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001072a:	ab08      	add	r3, sp, #32
9001072c:	e892 0003 	ldmia.w	r2, {r0, r1}
90010730:	e883 0003 	stmia.w	r3, {r0, r1}
90010734:	4618      	mov	r0, r3
90010736:	a90c      	add	r1, sp, #48	; 0x30
90010738:	f7ff fbdc 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
9001073c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
9001073e:	2b00      	cmp	r3, #0
90010740:	d13c      	bne.n	900107bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90010742:	2000      	movs	r0, #0
90010744:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90010748:	2600      	movs	r6, #0
9001074a:	696b      	ldr	r3, [r5, #20]
9001074c:	a908      	add	r1, sp, #32
9001074e:	682a      	ldr	r2, [r5, #0]
90010750:	4628      	mov	r0, r5
90010752:	9305      	str	r3, [sp, #20]
90010754:	616e      	str	r6, [r5, #20]
90010756:	6892      	ldr	r2, [r2, #8]
90010758:	4790      	blx	r2
9001075a:	9b05      	ldr	r3, [sp, #20]
9001075c:	4652      	mov	r2, sl
9001075e:	4649      	mov	r1, r9
90010760:	616b      	str	r3, [r5, #20]
90010762:	4628      	mov	r0, r5
90010764:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90010768:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
9001076c:	f7ff fe92 	bl	90010494 <_ZN8touchgfx8Drawable5setXYEss>
90010770:	9a01      	ldr	r2, [sp, #4]
90010772:	4b23      	ldr	r3, [pc, #140]	; (90010800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90010774:	4620      	mov	r0, r4
90010776:	801a      	strh	r2, [r3, #0]
90010778:	9a02      	ldr	r2, [sp, #8]
9001077a:	4b22      	ldr	r3, [pc, #136]	; (90010804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
9001077c:	801a      	strh	r2, [r3, #0]
9001077e:	9a03      	ldr	r2, [sp, #12]
90010780:	4b1c      	ldr	r3, [pc, #112]	; (900107f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010782:	801a      	strh	r2, [r3, #0]
90010784:	4b1c      	ldr	r3, [pc, #112]	; (900107f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90010786:	9a04      	ldr	r2, [sp, #16]
90010788:	801a      	strh	r2, [r3, #0]
9001078a:	6823      	ldr	r3, [r4, #0]
9001078c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90010790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90010792:	4798      	blx	r3
90010794:	6823      	ldr	r3, [r4, #0]
90010796:	4620      	mov	r0, r4
90010798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001079a:	4798      	blx	r3
9001079c:	b00f      	add	sp, #60	; 0x3c
9001079e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900107a2:	883b      	ldrh	r3, [r7, #0]
900107a4:	f8ab 0000 	strh.w	r0, [fp]
900107a8:	f8aa 3000 	strh.w	r3, [sl]
900107ac:	e789      	b.n	900106c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
900107ae:	462a      	mov	r2, r5
900107b0:	ab0a      	add	r3, sp, #40	; 0x28
900107b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
900107b6:	6851      	ldr	r1, [r2, #4]
900107b8:	c303      	stmia	r3!, {r0, r1}
900107ba:	e7a9      	b.n	90010710 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
900107bc:	a807      	add	r0, sp, #28
900107be:	f005 fc2f 	bl	90016020 <_ZNK8touchgfx6Bitmap9getFormatEv>
900107c2:	4606      	mov	r6, r0
900107c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
900107c6:	6803      	ldr	r3, [r0, #0]
900107c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900107ca:	4798      	blx	r3
900107cc:	4286      	cmp	r6, r0
900107ce:	d1b8      	bne.n	90010742 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
900107d0:	f7ff fe6e 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
900107d4:	6803      	ldr	r3, [r0, #0]
900107d6:	4606      	mov	r6, r0
900107d8:	a807      	add	r0, sp, #28
900107da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900107dc:	9305      	str	r3, [sp, #20]
900107de:	f005 fc1f 	bl	90016020 <_ZNK8touchgfx6Bitmap9getFormatEv>
900107e2:	9b05      	ldr	r3, [sp, #20]
900107e4:	4601      	mov	r1, r0
900107e6:	4630      	mov	r0, r6
900107e8:	4798      	blx	r3
900107ea:	f080 0001 	eor.w	r0, r0, #1
900107ee:	b2c0      	uxtb	r0, r0
900107f0:	e7a8      	b.n	90010744 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
900107f2:	bf00      	nop
900107f4:	24026200 	.word	0x24026200
900107f8:	24026202 	.word	0x24026202
900107fc:	24026204 	.word	0x24026204
90010800:	24026206 	.word	0x24026206
90010804:	24026208 	.word	0x24026208

90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90010808:	4b07      	ldr	r3, [pc, #28]	; (90010828 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
9001080a:	b510      	push	{r4, lr}
9001080c:	781b      	ldrb	r3, [r3, #0]
9001080e:	4604      	mov	r4, r0
90010810:	b13b      	cbz	r3, 90010822 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90010812:	6803      	ldr	r3, [r0, #0]
90010814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010816:	4798      	blx	r3
90010818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9001081a:	4283      	cmp	r3, r0
9001081c:	d101      	bne.n	90010822 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
9001081e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90010820:	bd10      	pop	{r4, pc}
90010822:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90010824:	e7fc      	b.n	90010820 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90010826:	bf00      	nop
90010828:	2402620a 	.word	0x2402620a

9001082c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
9001082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010830:	461d      	mov	r5, r3
90010832:	b08a      	sub	sp, #40	; 0x28
90010834:	f44f 6380 	mov.w	r3, #1024	; 0x400
90010838:	4690      	mov	r8, r2
9001083a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
9001083e:	2400      	movs	r4, #0
90010840:	4607      	mov	r7, r0
90010842:	fb06 8505 	mla	r5, r6, r5, r8
90010846:	9404      	str	r4, [sp, #16]
90010848:	f88d 4020 	strb.w	r4, [sp, #32]
9001084c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010850:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90010854:	f8ad 3018 	strh.w	r3, [sp, #24]
90010858:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001085c:	f8ad 301a 	strh.w	r3, [sp, #26]
90010860:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010864:	f8ad 301c 	strh.w	r3, [sp, #28]
90010868:	f7ff ffce 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001086c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90010870:	6878      	ldr	r0, [r7, #4]
90010872:	f8ad 601e 	strh.w	r6, [sp, #30]
90010876:	a901      	add	r1, sp, #4
90010878:	9505      	str	r5, [sp, #20]
9001087a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001087e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90010882:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90010886:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
9001088a:	6803      	ldr	r3, [r0, #0]
9001088c:	685b      	ldr	r3, [r3, #4]
9001088e:	4798      	blx	r3
90010890:	b00a      	add	sp, #40	; 0x28
90010892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010896 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90010896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001089a:	b08b      	sub	sp, #44	; 0x2c
9001089c:	2400      	movs	r4, #0
9001089e:	4691      	mov	r9, r2
900108a0:	461d      	mov	r5, r3
900108a2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
900108a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
900108aa:	4688      	mov	r8, r1
900108ac:	4607      	mov	r7, r0
900108ae:	9404      	str	r4, [sp, #16]
900108b0:	fb06 9505 	mla	r5, r6, r5, r9
900108b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
900108b8:	f7ff ffa6 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900108bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900108c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
900108c4:	6878      	ldr	r0, [r7, #4]
900108c6:	f8ad 3018 	strh.w	r3, [sp, #24]
900108ca:	a901      	add	r1, sp, #4
900108cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900108d0:	9505      	str	r5, [sp, #20]
900108d2:	f8ad 301a 	strh.w	r3, [sp, #26]
900108d6:	f8ad 401c 	strh.w	r4, [sp, #28]
900108da:	f8ad 601e 	strh.w	r6, [sp, #30]
900108de:	f8cd 8010 	str.w	r8, [sp, #16]
900108e2:	f8ad 4020 	strh.w	r4, [sp, #32]
900108e6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900108ea:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900108ee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900108f2:	6803      	ldr	r3, [r0, #0]
900108f4:	685b      	ldr	r3, [r3, #4]
900108f6:	4798      	blx	r3
900108f8:	b00b      	add	sp, #44	; 0x2c
900108fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90010900 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90010900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010904:	b08a      	sub	sp, #40	; 0x28
90010906:	4698      	mov	r8, r3
90010908:	2300      	movs	r3, #0
9001090a:	4606      	mov	r6, r0
9001090c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90010910:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90010914:	2d0b      	cmp	r5, #11
90010916:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
9001091a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
9001091e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90010922:	9304      	str	r3, [sp, #16]
90010924:	d137      	bne.n	90010996 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90010926:	2380      	movs	r3, #128	; 0x80
90010928:	f88d 0020 	strb.w	r0, [sp, #32]
9001092c:	4630      	mov	r0, r6
9001092e:	9203      	str	r2, [sp, #12]
90010930:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010934:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90010938:	f8ad 3018 	strh.w	r3, [sp, #24]
9001093c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010940:	f8ad 301a 	strh.w	r3, [sp, #26]
90010944:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90010948:	f8ad 301c 	strh.w	r3, [sp, #28]
9001094c:	f7ff ff5c 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010950:	2c0b      	cmp	r4, #11
90010952:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90010956:	f8ad 701e 	strh.w	r7, [sp, #30]
9001095a:	bf94      	ite	ls
9001095c:	4b19      	ldrls	r3, [pc, #100]	; (900109c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
9001095e:	2100      	movhi	r1, #0
90010960:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90010964:	bf98      	it	ls
90010966:	5d19      	ldrbls	r1, [r3, r4]
90010968:	fb02 8307 	mla	r3, r2, r7, r8
9001096c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90010970:	10c9      	asrs	r1, r1, #3
90010972:	fb01 0003 	mla	r0, r1, r3, r0
90010976:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
9001097a:	a901      	add	r1, sp, #4
9001097c:	9005      	str	r0, [sp, #20]
9001097e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90010982:	2300      	movs	r3, #0
90010984:	6870      	ldr	r0, [r6, #4]
90010986:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001098a:	6803      	ldr	r3, [r0, #0]
9001098c:	685b      	ldr	r3, [r3, #4]
9001098e:	4798      	blx	r3
90010990:	b00a      	add	sp, #40	; 0x28
90010992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010996:	2d02      	cmp	r5, #2
90010998:	d109      	bne.n	900109ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
9001099a:	28ff      	cmp	r0, #255	; 0xff
9001099c:	d105      	bne.n	900109aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
9001099e:	f1bc 0f00 	cmp.w	ip, #0
900109a2:	bf14      	ite	ne
900109a4:	2340      	movne	r3, #64	; 0x40
900109a6:	2320      	moveq	r3, #32
900109a8:	e7be      	b.n	90010928 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900109aa:	2340      	movs	r3, #64	; 0x40
900109ac:	e7bc      	b.n	90010928 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900109ae:	28ff      	cmp	r0, #255	; 0xff
900109b0:	d105      	bne.n	900109be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
900109b2:	f1bc 0f00 	cmp.w	ip, #0
900109b6:	bf14      	ite	ne
900109b8:	2304      	movne	r3, #4
900109ba:	2301      	moveq	r3, #1
900109bc:	e7b4      	b.n	90010928 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900109be:	2304      	movs	r3, #4
900109c0:	e7b2      	b.n	90010928 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900109c2:	bf00      	nop
900109c4:	90025718 	.word	0x90025718

900109c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
900109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900109cc:	b08b      	sub	sp, #44	; 0x2c
900109ce:	461d      	mov	r5, r3
900109d0:	2400      	movs	r4, #0
900109d2:	4688      	mov	r8, r1
900109d4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
900109d8:	4693      	mov	fp, r2
900109da:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
900109de:	4607      	mov	r7, r0
900109e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900109e4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
900109e8:	9404      	str	r4, [sp, #16]
900109ea:	bf14      	ite	ne
900109ec:	2308      	movne	r3, #8
900109ee:	2302      	moveq	r3, #2
900109f0:	fb05 b50a 	mla	r5, r5, sl, fp
900109f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
900109f8:	f7ff ff06 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900109fc:	2e0b      	cmp	r6, #11
900109fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90010a02:	a901      	add	r1, sp, #4
90010a04:	bf98      	it	ls
90010a06:	4b13      	ldrls	r3, [pc, #76]	; (90010a54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90010a08:	f8ad a01e 	strh.w	sl, [sp, #30]
90010a0c:	bf98      	it	ls
90010a0e:	5d9c      	ldrbls	r4, [r3, r6]
90010a10:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90010a14:	10e4      	asrs	r4, r4, #3
90010a16:	f8cd 8010 	str.w	r8, [sp, #16]
90010a1a:	f8ad 3018 	strh.w	r3, [sp, #24]
90010a1e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90010a22:	fb04 0405 	mla	r4, r4, r5, r0
90010a26:	6878      	ldr	r0, [r7, #4]
90010a28:	f8ad 301a 	strh.w	r3, [sp, #26]
90010a2c:	2300      	movs	r3, #0
90010a2e:	9405      	str	r4, [sp, #20]
90010a30:	f8ad 301c 	strh.w	r3, [sp, #28]
90010a34:	f88d 9020 	strb.w	r9, [sp, #32]
90010a38:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90010a3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90010a40:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90010a44:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90010a48:	6803      	ldr	r3, [r0, #0]
90010a4a:	685b      	ldr	r3, [r3, #4]
90010a4c:	4798      	blx	r3
90010a4e:	b00b      	add	sp, #44	; 0x2c
90010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010a54:	90025718 	.word	0x90025718

90010a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90010a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010a5c:	461e      	mov	r6, r3
90010a5e:	4b0a      	ldr	r3, [pc, #40]	; (90010a88 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90010a60:	460f      	mov	r7, r1
90010a62:	4690      	mov	r8, r2
90010a64:	881d      	ldrh	r5, [r3, #0]
90010a66:	f7ff fd23 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010a6a:	6803      	ldr	r3, [r0, #0]
90010a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010a6e:	4798      	blx	r3
90010a70:	280b      	cmp	r0, #11
90010a72:	bf96      	itet	ls
90010a74:	4b05      	ldrls	r3, [pc, #20]	; (90010a8c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90010a76:	2400      	movhi	r4, #0
90010a78:	5c1c      	ldrbls	r4, [r3, r0]
90010a7a:	fb08 7005 	mla	r0, r8, r5, r7
90010a7e:	10e4      	asrs	r4, r4, #3
90010a80:	fb04 6000 	mla	r0, r4, r0, r6
90010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010a88:	24026206 	.word	0x24026206
90010a8c:	90025718 	.word	0x90025718

90010a90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90010a90:	b5f0      	push	{r4, r5, r6, r7, lr}
90010a92:	b08b      	sub	sp, #44	; 0x2c
90010a94:	461f      	mov	r7, r3
90010a96:	4604      	mov	r4, r0
90010a98:	4616      	mov	r6, r2
90010a9a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90010a9e:	2500      	movs	r5, #0
90010aa0:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010aa4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90010aa8:	9504      	str	r5, [sp, #16]
90010aaa:	f8ad 3018 	strh.w	r3, [sp, #24]
90010aae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90010ab2:	f8ad 301a 	strh.w	r3, [sp, #26]
90010ab6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010aba:	f8ad 301c 	strh.w	r3, [sp, #28]
90010abe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90010ac2:	f88d 3020 	strb.w	r3, [sp, #32]
90010ac6:	f7ff fe9f 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010aca:	463a      	mov	r2, r7
90010acc:	4631      	mov	r1, r6
90010ace:	4603      	mov	r3, r0
90010ad0:	4620      	mov	r0, r4
90010ad2:	f7ff ffc1 	bl	90010a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90010ad6:	4b0e      	ldr	r3, [pc, #56]	; (90010b10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90010ad8:	9005      	str	r0, [sp, #20]
90010ada:	881b      	ldrh	r3, [r3, #0]
90010adc:	f8ad 301e 	strh.w	r3, [sp, #30]
90010ae0:	f7ff fce6 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010ae4:	6803      	ldr	r3, [r0, #0]
90010ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010ae8:	4798      	blx	r3
90010aea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90010aec:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90010af0:	a901      	add	r1, sp, #4
90010af2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90010af6:	9304      	str	r3, [sp, #16]
90010af8:	6860      	ldr	r0, [r4, #4]
90010afa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90010afe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90010b02:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90010b06:	6803      	ldr	r3, [r0, #0]
90010b08:	685b      	ldr	r3, [r3, #4]
90010b0a:	4798      	blx	r3
90010b0c:	b00b      	add	sp, #44	; 0x2c
90010b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010b10:	24026206 	.word	0x24026206

90010b14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90010b14:	b5f0      	push	{r4, r5, r6, r7, lr}
90010b16:	b08d      	sub	sp, #52	; 0x34
90010b18:	2501      	movs	r5, #1
90010b1a:	4604      	mov	r4, r0
90010b1c:	466b      	mov	r3, sp
90010b1e:	9503      	str	r5, [sp, #12]
90010b20:	e883 0006 	stmia.w	r3, {r1, r2}
90010b24:	2300      	movs	r3, #0
90010b26:	f8bd 6000 	ldrh.w	r6, [sp]
90010b2a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90010b2e:	9306      	str	r3, [sp, #24]
90010b30:	6803      	ldr	r3, [r0, #0]
90010b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010b34:	4798      	blx	r3
90010b36:	463a      	mov	r2, r7
90010b38:	4631      	mov	r1, r6
90010b3a:	4603      	mov	r3, r0
90010b3c:	4620      	mov	r0, r4
90010b3e:	f7ff ff8b 	bl	90010a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90010b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
90010b44:	9004      	str	r0, [sp, #16]
90010b46:	9307      	str	r3, [sp, #28]
90010b48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90010b4c:	f8ad 3020 	strh.w	r3, [sp, #32]
90010b50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90010b54:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90010b58:	4b0e      	ldr	r3, [pc, #56]	; (90010b94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90010b5a:	881b      	ldrh	r3, [r3, #0]
90010b5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90010b60:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90010b64:	f7ff fca4 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010b68:	6803      	ldr	r3, [r0, #0]
90010b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010b6c:	4798      	blx	r3
90010b6e:	23ff      	movs	r3, #255	; 0xff
90010b70:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90010b74:	a903      	add	r1, sp, #12
90010b76:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90010b7a:	6860      	ldr	r0, [r4, #4]
90010b7c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90010b80:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90010b84:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90010b88:	6803      	ldr	r3, [r0, #0]
90010b8a:	685b      	ldr	r3, [r3, #4]
90010b8c:	4798      	blx	r3
90010b8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90010b90:	b00d      	add	sp, #52	; 0x34
90010b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010b94:	24026206 	.word	0x24026206

90010b98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90010b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010b9c:	b08c      	sub	sp, #48	; 0x30
90010b9e:	461e      	mov	r6, r3
90010ba0:	2300      	movs	r3, #0
90010ba2:	4604      	mov	r4, r0
90010ba4:	466d      	mov	r5, sp
90010ba6:	9306      	str	r3, [sp, #24]
90010ba8:	6803      	ldr	r3, [r0, #0]
90010baa:	e885 0006 	stmia.w	r5, {r1, r2}
90010bae:	2501      	movs	r5, #1
90010bb0:	f8bd 7000 	ldrh.w	r7, [sp]
90010bb4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90010bb8:	9503      	str	r5, [sp, #12]
90010bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010bbc:	4798      	blx	r3
90010bbe:	4642      	mov	r2, r8
90010bc0:	4639      	mov	r1, r7
90010bc2:	4603      	mov	r3, r0
90010bc4:	4620      	mov	r0, r4
90010bc6:	f7ff ff47 	bl	90010a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90010bca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90010bce:	9004      	str	r0, [sp, #16]
90010bd0:	f8ad 3020 	strh.w	r3, [sp, #32]
90010bd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90010bd8:	9607      	str	r6, [sp, #28]
90010bda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90010bde:	4b10      	ldr	r3, [pc, #64]	; (90010c20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90010be0:	881b      	ldrh	r3, [r3, #0]
90010be2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90010be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
90010be8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90010bec:	f7ff fc60 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90010bf0:	6803      	ldr	r3, [r0, #0]
90010bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010bf4:	4798      	blx	r3
90010bf6:	23ff      	movs	r3, #255	; 0xff
90010bf8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90010bfc:	a903      	add	r1, sp, #12
90010bfe:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90010c02:	6860      	ldr	r0, [r4, #4]
90010c04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90010c08:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90010c0c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90010c10:	6803      	ldr	r3, [r0, #0]
90010c12:	685b      	ldr	r3, [r3, #4]
90010c14:	4798      	blx	r3
90010c16:	4630      	mov	r0, r6
90010c18:	b00c      	add	sp, #48	; 0x30
90010c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010c1e:	bf00      	nop
90010c20:	24026206 	.word	0x24026206

90010c24 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90010c24:	b5f0      	push	{r4, r5, r6, r7, lr}
90010c26:	b085      	sub	sp, #20
90010c28:	4605      	mov	r5, r0
90010c2a:	ac02      	add	r4, sp, #8
90010c2c:	e884 0006 	stmia.w	r4, {r1, r2}
90010c30:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90010c34:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90010c38:	f7ff fde6 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010c3c:	4631      	mov	r1, r6
90010c3e:	4603      	mov	r3, r0
90010c40:	463a      	mov	r2, r7
90010c42:	4628      	mov	r0, r5
90010c44:	f7ff ff08 	bl	90010a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90010c48:	4a05      	ldr	r2, [pc, #20]	; (90010c60 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90010c4a:	682b      	ldr	r3, [r5, #0]
90010c4c:	8812      	ldrh	r2, [r2, #0]
90010c4e:	9200      	str	r2, [sp, #0]
90010c50:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90010c52:	4603      	mov	r3, r0
90010c54:	4628      	mov	r0, r5
90010c56:	e894 0006 	ldmia.w	r4, {r1, r2}
90010c5a:	47b0      	blx	r6
90010c5c:	b005      	add	sp, #20
90010c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010c60:	24026206 	.word	0x24026206

90010c64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90010c64:	b570      	push	{r4, r5, r6, lr}
90010c66:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90010c6a:	4604      	mov	r4, r0
90010c6c:	b19b      	cbz	r3, 90010c96 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90010c6e:	2002      	movs	r0, #2
90010c70:	f7ef fcd8 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90010c74:	2300      	movs	r3, #0
90010c76:	4620      	mov	r0, r4
90010c78:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90010c7c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90010c80:	6823      	ldr	r3, [r4, #0]
90010c82:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90010c86:	f7ff fdbf 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010c8a:	4601      	mov	r1, r0
90010c8c:	4620      	mov	r0, r4
90010c8e:	462b      	mov	r3, r5
90010c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010c94:	4718      	bx	r3
90010c96:	bd70      	pop	{r4, r5, r6, pc}

90010c98 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90010c98:	b570      	push	{r4, r5, r6, lr}
90010c9a:	4605      	mov	r5, r0
90010c9c:	460c      	mov	r4, r1
90010c9e:	2003      	movs	r0, #3
90010ca0:	b149      	cbz	r1, 90010cb6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90010ca2:	f7ef fc57 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90010ca6:	6928      	ldr	r0, [r5, #16]
90010ca8:	b168      	cbz	r0, 90010cc6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90010caa:	6803      	ldr	r3, [r0, #0]
90010cac:	2101      	movs	r1, #1
90010cae:	695b      	ldr	r3, [r3, #20]
90010cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010cb4:	4718      	bx	r3
90010cb6:	f7ef fc81 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90010cba:	6928      	ldr	r0, [r5, #16]
90010cbc:	b118      	cbz	r0, 90010cc6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90010cbe:	6803      	ldr	r3, [r0, #0]
90010cc0:	4621      	mov	r1, r4
90010cc2:	695b      	ldr	r3, [r3, #20]
90010cc4:	e7f4      	b.n	90010cb0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90010cc6:	bd70      	pop	{r4, r5, r6, pc}

90010cc8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90010cc8:	b538      	push	{r3, r4, r5, lr}
90010cca:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
90010cce:	4604      	mov	r4, r0
90010cd0:	460d      	mov	r5, r1
90010cd2:	428b      	cmp	r3, r1
90010cd4:	d006      	beq.n	90010ce4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90010cd6:	6803      	ldr	r3, [r0, #0]
90010cd8:	b929      	cbnz	r1, 90010ce6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90010cda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90010cde:	4798      	blx	r3
90010ce0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90010ce4:	bd38      	pop	{r3, r4, r5, pc}
90010ce6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
90010cea:	e7f8      	b.n	90010cde <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90010cec <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90010cec:	4b0d      	ldr	r3, [pc, #52]	; (90010d24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
90010cee:	b510      	push	{r4, lr}
90010cf0:	781b      	ldrb	r3, [r3, #0]
90010cf2:	4604      	mov	r4, r0
90010cf4:	b95b      	cbnz	r3, 90010d0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90010cf6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90010cfa:	2b02      	cmp	r3, #2
90010cfc:	d007      	beq.n	90010d0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90010cfe:	6840      	ldr	r0, [r0, #4]
90010d00:	f000 f900 	bl	90010f04 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90010d04:	b118      	cbz	r0, 90010d0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90010d06:	6862      	ldr	r2, [r4, #4]
90010d08:	7a53      	ldrb	r3, [r2, #9]
90010d0a:	2b00      	cmp	r3, #0
90010d0c:	d0fc      	beq.n	90010d08 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
90010d0e:	f7f0 fe3b 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90010d12:	4620      	mov	r0, r4
90010d14:	2100      	movs	r1, #0
90010d16:	f7ff ffd7 	bl	90010cc8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90010d1a:	4620      	mov	r0, r4
90010d1c:	f7ff fd74 	bl	90010808 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010d20:	bd10      	pop	{r4, pc}
90010d22:	bf00      	nop
90010d24:	2402620a 	.word	0x2402620a

90010d28 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90010d28:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90010d2c:	1a13      	subs	r3, r2, r0
90010d2e:	4258      	negs	r0, r3
90010d30:	4158      	adcs	r0, r3
90010d32:	4770      	bx	lr

90010d34 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90010d34:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90010d38:	1a9b      	subs	r3, r3, r2
90010d3a:	2b00      	cmp	r3, #0
90010d3c:	bfdc      	itt	le
90010d3e:	6882      	ldrle	r2, [r0, #8]
90010d40:	189b      	addle	r3, r3, r2
90010d42:	2b01      	cmp	r3, #1
90010d44:	bfcc      	ite	gt
90010d46:	2000      	movgt	r0, #0
90010d48:	2001      	movle	r0, #1
90010d4a:	4770      	bx	lr

90010d4c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90010d4c:	6902      	ldr	r2, [r0, #16]
90010d4e:	6843      	ldr	r3, [r0, #4]
90010d50:	2024      	movs	r0, #36	; 0x24
90010d52:	fb00 3002 	mla	r0, r0, r2, r3
90010d56:	4770      	bx	lr

90010d58 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90010d58:	6803      	ldr	r3, [r0, #0]
90010d5a:	691b      	ldr	r3, [r3, #16]
90010d5c:	4718      	bx	r3

90010d5e <_ZN8touchgfx13DMA_Interface7executeEv>:
90010d5e:	2301      	movs	r3, #1
90010d60:	b570      	push	{r4, r5, r6, lr}
90010d62:	7203      	strb	r3, [r0, #8]
90010d64:	4604      	mov	r4, r0
90010d66:	6840      	ldr	r0, [r0, #4]
90010d68:	6803      	ldr	r3, [r0, #0]
90010d6a:	699b      	ldr	r3, [r3, #24]
90010d6c:	4798      	blx	r3
90010d6e:	6803      	ldr	r3, [r0, #0]
90010d70:	4605      	mov	r5, r0
90010d72:	2b40      	cmp	r3, #64	; 0x40
90010d74:	d00c      	beq.n	90010d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010d76:	d810      	bhi.n	90010d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90010d78:	2b04      	cmp	r3, #4
90010d7a:	d01d      	beq.n	90010db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90010d7c:	d804      	bhi.n	90010d88 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90010d7e:	2b01      	cmp	r3, #1
90010d80:	d006      	beq.n	90010d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010d82:	2b02      	cmp	r3, #2
90010d84:	d02c      	beq.n	90010de0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90010d86:	bd70      	pop	{r4, r5, r6, pc}
90010d88:	2b08      	cmp	r3, #8
90010d8a:	d01d      	beq.n	90010dc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90010d8c:	2b20      	cmp	r3, #32
90010d8e:	d1fa      	bne.n	90010d86 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90010d90:	6823      	ldr	r3, [r4, #0]
90010d92:	4620      	mov	r0, r4
90010d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90010d96:	4798      	blx	r3
90010d98:	e013      	b.n	90010dc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90010d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90010d9e:	d0f7      	beq.n	90010d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010da0:	d804      	bhi.n	90010dac <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90010da2:	2b80      	cmp	r3, #128	; 0x80
90010da4:	d0f4      	beq.n	90010d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90010daa:	e7f0      	b.n	90010d8e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90010dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90010db0:	d0ee      	beq.n	90010d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90010db6:	e7e5      	b.n	90010d84 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90010db8:	6823      	ldr	r3, [r4, #0]
90010dba:	7f01      	ldrb	r1, [r0, #28]
90010dbc:	4620      	mov	r0, r4
90010dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010dc0:	4798      	blx	r3
90010dc2:	6823      	ldr	r3, [r4, #0]
90010dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010dc6:	e006      	b.n	90010dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90010dc8:	6823      	ldr	r3, [r4, #0]
90010dca:	7f01      	ldrb	r1, [r0, #28]
90010dcc:	4620      	mov	r0, r4
90010dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010dd0:	4798      	blx	r3
90010dd2:	6823      	ldr	r3, [r4, #0]
90010dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90010dd6:	4629      	mov	r1, r5
90010dd8:	4620      	mov	r0, r4
90010dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010dde:	4718      	bx	r3
90010de0:	6823      	ldr	r3, [r4, #0]
90010de2:	4620      	mov	r0, r4
90010de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90010de6:	4798      	blx	r3
90010de8:	e7f3      	b.n	90010dd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90010dea <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90010dea:	4770      	bx	lr

90010dec <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90010dec:	4770      	bx	lr

90010dee <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
90010dee:	4770      	bx	lr

90010df0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90010df0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90010df4:	b510      	push	{r4, lr}
90010df6:	1ad2      	subs	r2, r2, r3
90010df8:	2a00      	cmp	r2, #0
90010dfa:	bfdc      	itt	le
90010dfc:	6884      	ldrle	r4, [r0, #8]
90010dfe:	1912      	addle	r2, r2, r4
90010e00:	2a01      	cmp	r2, #1
90010e02:	dd16      	ble.n	90010e32 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90010e04:	6842      	ldr	r2, [r0, #4]
90010e06:	2424      	movs	r4, #36	; 0x24
90010e08:	fb04 2303 	mla	r3, r4, r3, r2
90010e0c:	f101 0220 	add.w	r2, r1, #32
90010e10:	f851 4b04 	ldr.w	r4, [r1], #4
90010e14:	4291      	cmp	r1, r2
90010e16:	f843 4b04 	str.w	r4, [r3], #4
90010e1a:	d1f9      	bne.n	90010e10 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90010e1c:	780a      	ldrb	r2, [r1, #0]
90010e1e:	701a      	strb	r2, [r3, #0]
90010e20:	68c3      	ldr	r3, [r0, #12]
90010e22:	6882      	ldr	r2, [r0, #8]
90010e24:	f3bf 8f5b 	dmb	ish
90010e28:	3301      	adds	r3, #1
90010e2a:	429a      	cmp	r2, r3
90010e2c:	bfd8      	it	le
90010e2e:	1a9b      	suble	r3, r3, r2
90010e30:	60c3      	str	r3, [r0, #12]
90010e32:	bd10      	pop	{r4, pc}

90010e34 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90010e34:	6903      	ldr	r3, [r0, #16]
90010e36:	6882      	ldr	r2, [r0, #8]
90010e38:	f3bf 8f5b 	dmb	ish
90010e3c:	3301      	adds	r3, #1
90010e3e:	429a      	cmp	r2, r3
90010e40:	bfd8      	it	le
90010e42:	1a9b      	suble	r3, r3, r2
90010e44:	6103      	str	r3, [r0, #16]
90010e46:	4770      	bx	lr

90010e48 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90010e48:	b570      	push	{r4, r5, r6, lr}
90010e4a:	4604      	mov	r4, r0
90010e4c:	460e      	mov	r6, r1
90010e4e:	6860      	ldr	r0, [r4, #4]
90010e50:	6803      	ldr	r3, [r0, #0]
90010e52:	685b      	ldr	r3, [r3, #4]
90010e54:	4798      	blx	r3
90010e56:	2800      	cmp	r0, #0
90010e58:	d1f9      	bne.n	90010e4e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90010e5a:	4d0d      	ldr	r5, [pc, #52]	; (90010e90 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90010e5c:	6828      	ldr	r0, [r5, #0]
90010e5e:	6803      	ldr	r3, [r0, #0]
90010e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010e62:	4798      	blx	r3
90010e64:	f7f0 fd9e 	bl	900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90010e68:	6828      	ldr	r0, [r5, #0]
90010e6a:	2101      	movs	r1, #1
90010e6c:	f7ff ff2c 	bl	90010cc8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90010e70:	6860      	ldr	r0, [r4, #4]
90010e72:	4631      	mov	r1, r6
90010e74:	6803      	ldr	r3, [r0, #0]
90010e76:	689b      	ldr	r3, [r3, #8]
90010e78:	4798      	blx	r3
90010e7a:	6823      	ldr	r3, [r4, #0]
90010e7c:	4620      	mov	r0, r4
90010e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010e80:	4798      	blx	r3
90010e82:	6828      	ldr	r0, [r5, #0]
90010e84:	6803      	ldr	r3, [r0, #0]
90010e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90010e8c:	4718      	bx	r3
90010e8e:	bf00      	nop
90010e90:	2402620c 	.word	0x2402620c

90010e94 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90010e94:	b508      	push	{r3, lr}
90010e96:	f7f0 fd77 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90010e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90010e9e:	f7f0 bd7b 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90010ea2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90010ea2:	b510      	push	{r4, lr}
90010ea4:	4604      	mov	r4, r0
90010ea6:	2114      	movs	r1, #20
90010ea8:	f010 fd2b 	bl	90021902 <_ZdlPvj>
90010eac:	4620      	mov	r0, r4
90010eae:	bd10      	pop	{r4, pc}

90010eb0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90010eb0:	b570      	push	{r4, r5, r6, lr}
90010eb2:	4604      	mov	r4, r0
90010eb4:	6840      	ldr	r0, [r0, #4]
90010eb6:	6803      	ldr	r3, [r0, #0]
90010eb8:	681b      	ldr	r3, [r3, #0]
90010eba:	4798      	blx	r3
90010ebc:	4605      	mov	r5, r0
90010ebe:	b930      	cbnz	r0, 90010ece <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90010ec0:	7a23      	ldrb	r3, [r4, #8]
90010ec2:	b123      	cbz	r3, 90010ece <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90010ec4:	6860      	ldr	r0, [r4, #4]
90010ec6:	6803      	ldr	r3, [r0, #0]
90010ec8:	695b      	ldr	r3, [r3, #20]
90010eca:	4798      	blx	r3
90010ecc:	7225      	strb	r5, [r4, #8]
90010ece:	6860      	ldr	r0, [r4, #4]
90010ed0:	6803      	ldr	r3, [r0, #0]
90010ed2:	681b      	ldr	r3, [r3, #0]
90010ed4:	4798      	blx	r3
90010ed6:	b928      	cbnz	r0, 90010ee4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90010ed8:	6823      	ldr	r3, [r4, #0]
90010eda:	4620      	mov	r0, r4
90010edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010ee2:	4718      	bx	r3
90010ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010ee8:	f7f0 bd64 	b.w	900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90010eec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90010eec:	b510      	push	{r4, lr}
90010eee:	6082      	str	r2, [r0, #8]
90010ef0:	2200      	movs	r2, #0
90010ef2:	4c03      	ldr	r4, [pc, #12]	; (90010f00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90010ef4:	e9c0 2203 	strd	r2, r2, [r0, #12]
90010ef8:	e9c0 4100 	strd	r4, r1, [r0]
90010efc:	bd10      	pop	{r4, pc}
90010efe:	bf00      	nop
90010f00:	9002572c 	.word	0x9002572c

90010f04 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90010f04:	6840      	ldr	r0, [r0, #4]
90010f06:	6803      	ldr	r3, [r0, #0]
90010f08:	681b      	ldr	r3, [r3, #0]
90010f0a:	4718      	bx	r3

90010f0c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90010f0c:	4b07      	ldr	r3, [pc, #28]	; (90010f2c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90010f0e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90010f10:	881b      	ldrh	r3, [r3, #0]
90010f12:	4293      	cmp	r3, r2
90010f14:	bf81      	itttt	hi
90010f16:	4b06      	ldrhi	r3, [pc, #24]	; (90010f30 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90010f18:	681b      	ldrhi	r3, [r3, #0]
90010f1a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90010f1e:	7858      	ldrbhi	r0, [r3, #1]
90010f20:	bf8c      	ite	hi
90010f22:	f000 0003 	andhi.w	r0, r0, #3
90010f26:	2000      	movls	r0, #0
90010f28:	4770      	bx	lr
90010f2a:	bf00      	nop
90010f2c:	24026260 	.word	0x24026260
90010f30:	2402625c 	.word	0x2402625c

90010f34 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90010f34:	4b11      	ldr	r3, [pc, #68]	; (90010f7c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90010f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010f3a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90010f3c:	4604      	mov	r4, r0
90010f3e:	881b      	ldrh	r3, [r3, #0]
90010f40:	428b      	cmp	r3, r1
90010f42:	d918      	bls.n	90010f76 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90010f44:	6803      	ldr	r3, [r0, #0]
90010f46:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90010f48:	4b0d      	ldr	r3, [pc, #52]	; (90010f80 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90010f4a:	6818      	ldr	r0, [r3, #0]
90010f4c:	f7f4 fcf6 	bl	9000593c <_ZNK8touchgfx5Texts7getTextEt>
90010f50:	6823      	ldr	r3, [r4, #0]
90010f52:	4606      	mov	r6, r0
90010f54:	4620      	mov	r0, r4
90010f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010f58:	4798      	blx	r3
90010f5a:	6823      	ldr	r3, [r4, #0]
90010f5c:	4607      	mov	r7, r0
90010f5e:	4620      	mov	r0, r4
90010f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90010f64:	4798      	blx	r3
90010f66:	463a      	mov	r2, r7
90010f68:	4603      	mov	r3, r0
90010f6a:	4631      	mov	r1, r6
90010f6c:	4620      	mov	r0, r4
90010f6e:	46ac      	mov	ip, r5
90010f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90010f74:	4760      	bx	ip
90010f76:	2000      	movs	r0, #0
90010f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010f7c:	24026260 	.word	0x24026260
90010f80:	24026268 	.word	0x24026268

90010f84 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90010f84:	4b18      	ldr	r3, [pc, #96]	; (90010fe8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90010f86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90010f8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90010f8c:	4604      	mov	r4, r0
90010f8e:	881b      	ldrh	r3, [r3, #0]
90010f90:	428b      	cmp	r3, r1
90010f92:	d926      	bls.n	90010fe2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90010f94:	4b15      	ldr	r3, [pc, #84]	; (90010fec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90010f96:	681b      	ldr	r3, [r3, #0]
90010f98:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90010f9c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90010fa0:	4b13      	ldr	r3, [pc, #76]	; (90010ff0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90010fa2:	7855      	ldrb	r5, [r2, #1]
90010fa4:	681b      	ldr	r3, [r3, #0]
90010fa6:	f3c5 0581 	ubfx	r5, r5, #2, #2
90010faa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90010fae:	6833      	ldr	r3, [r6, #0]
90010fb0:	69df      	ldr	r7, [r3, #28]
90010fb2:	4b10      	ldr	r3, [pc, #64]	; (90010ff4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90010fb4:	6818      	ldr	r0, [r3, #0]
90010fb6:	f7f4 fcc1 	bl	9000593c <_ZNK8touchgfx5Texts7getTextEt>
90010fba:	6823      	ldr	r3, [r4, #0]
90010fbc:	4680      	mov	r8, r0
90010fbe:	4620      	mov	r0, r4
90010fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010fc2:	4798      	blx	r3
90010fc4:	6823      	ldr	r3, [r4, #0]
90010fc6:	4681      	mov	r9, r0
90010fc8:	4620      	mov	r0, r4
90010fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90010fce:	4798      	blx	r3
90010fd0:	464b      	mov	r3, r9
90010fd2:	9000      	str	r0, [sp, #0]
90010fd4:	4642      	mov	r2, r8
90010fd6:	4629      	mov	r1, r5
90010fd8:	4630      	mov	r0, r6
90010fda:	47b8      	blx	r7
90010fdc:	b003      	add	sp, #12
90010fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010fe2:	2000      	movs	r0, #0
90010fe4:	e7fa      	b.n	90010fdc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90010fe6:	bf00      	nop
90010fe8:	24026260 	.word	0x24026260
90010fec:	2402625c 	.word	0x2402625c
90010ff0:	24026264 	.word	0x24026264
90010ff4:	24026268 	.word	0x24026268

90010ff8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90010ff8:	b40e      	push	{r1, r2, r3}
90010ffa:	4b30      	ldr	r3, [pc, #192]	; (900110bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
90010ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90011000:	881a      	ldrh	r2, [r3, #0]
90011002:	b09d      	sub	sp, #116	; 0x74
90011004:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90011006:	4604      	mov	r4, r0
90011008:	429a      	cmp	r2, r3
9001100a:	d954      	bls.n	900110b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
9001100c:	aa26      	add	r2, sp, #152	; 0x98
9001100e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 900110c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90011012:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900110c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90011016:	9202      	str	r2, [sp, #8]
90011018:	f8d9 2000 	ldr.w	r2, [r9]
9001101c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90011020:	f8d8 3000 	ldr.w	r3, [r8]
90011024:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90011028:	682b      	ldr	r3, [r5, #0]
9001102a:	4628      	mov	r0, r5
9001102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001102e:	4798      	blx	r3
90011030:	4606      	mov	r6, r0
90011032:	b207      	sxth	r7, r0
90011034:	a803      	add	r0, sp, #12
90011036:	f003 fb09 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
9001103a:	682b      	ldr	r3, [r5, #0]
9001103c:	4628      	mov	r0, r5
9001103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90011040:	4798      	blx	r3
90011042:	682b      	ldr	r3, [r5, #0]
90011044:	4682      	mov	sl, r0
90011046:	4628      	mov	r0, r5
90011048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001104a:	4798      	blx	r3
9001104c:	4653      	mov	r3, sl
9001104e:	9000      	str	r0, [sp, #0]
90011050:	a803      	add	r0, sp, #12
90011052:	9a02      	ldr	r2, [sp, #8]
90011054:	9925      	ldr	r1, [sp, #148]	; 0x94
90011056:	f003 fb4c 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001105a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001105c:	f8d9 3000 	ldr.w	r3, [r9]
90011060:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90011064:	8925      	ldrh	r5, [r4, #8]
90011066:	eb03 0142 	add.w	r1, r3, r2, lsl #1
9001106a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
9001106e:	eba5 050c 	sub.w	r5, r5, ip
90011072:	784a      	ldrb	r2, [r1, #1]
90011074:	f8d8 3000 	ldr.w	r3, [r8]
90011078:	b22d      	sxth	r5, r5
9001107a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
9001107e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90011082:	9500      	str	r5, [sp, #0]
90011084:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90011088:	a803      	add	r0, sp, #12
9001108a:	f001 f9cb 	bl	90012424 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
9001108e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90011092:	b203      	sxth	r3, r0
90011094:	18b9      	adds	r1, r7, r2
90011096:	2900      	cmp	r1, #0
90011098:	dd0b      	ble.n	900110b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
9001109a:	3b01      	subs	r3, #1
9001109c:	fb13 f302 	smulbb	r3, r3, r2
900110a0:	fb16 3300 	smlabb	r3, r6, r0, r3
900110a4:	b21f      	sxth	r7, r3
900110a6:	4638      	mov	r0, r7
900110a8:	b01d      	add	sp, #116	; 0x74
900110aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900110ae:	b003      	add	sp, #12
900110b0:	4770      	bx	lr
900110b2:	2b00      	cmp	r3, #0
900110b4:	dcf7      	bgt.n	900110a6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900110b6:	2700      	movs	r7, #0
900110b8:	e7f5      	b.n	900110a6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900110ba:	bf00      	nop
900110bc:	24026260 	.word	0x24026260
900110c0:	2402625c 	.word	0x2402625c
900110c4:	24026264 	.word	0x24026264

900110c8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
900110c8:	b570      	push	{r4, r5, r6, lr}
900110ca:	6803      	ldr	r3, [r0, #0]
900110cc:	4604      	mov	r4, r0
900110ce:	4615      	mov	r5, r2
900110d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900110d2:	4798      	blx	r3
900110d4:	6823      	ldr	r3, [r4, #0]
900110d6:	4629      	mov	r1, r5
900110d8:	4620      	mov	r0, r4
900110da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900110dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900110e0:	4718      	bx	r3
	...

900110e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
900110e4:	b538      	push	{r3, r4, r5, lr}
900110e6:	4b0e      	ldr	r3, [pc, #56]	; (90011120 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900110e8:	4604      	mov	r4, r0
900110ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900110ec:	881b      	ldrh	r3, [r3, #0]
900110ee:	429a      	cmp	r2, r3
900110f0:	d214      	bcs.n	9001111c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900110f2:	6803      	ldr	r3, [r0, #0]
900110f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900110f6:	4798      	blx	r3
900110f8:	6823      	ldr	r3, [r4, #0]
900110fa:	4605      	mov	r5, r0
900110fc:	4620      	mov	r0, r4
900110fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011100:	4798      	blx	r3
90011102:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90011106:	b22d      	sxth	r5, r5
90011108:	4601      	mov	r1, r0
9001110a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
9001110e:	bf06      	itte	eq
90011110:	4602      	moveq	r2, r0
90011112:	4629      	moveq	r1, r5
90011114:	462a      	movne	r2, r5
90011116:	4620      	mov	r0, r4
90011118:	f7ff ffd6 	bl	900110c8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
9001111c:	bd38      	pop	{r3, r4, r5, pc}
9001111e:	bf00      	nop
90011120:	24026260 	.word	0x24026260

90011124 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90011124:	b530      	push	{r4, r5, lr}
90011126:	888b      	ldrh	r3, [r1, #4]
90011128:	b085      	sub	sp, #20
9001112a:	4604      	mov	r4, r0
9001112c:	8583      	strh	r3, [r0, #44]	; 0x2c
9001112e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90011132:	b923      	cbnz	r3, 9001113e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90011134:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90011138:	b90b      	cbnz	r3, 9001113e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001113a:	f7ff ffd3 	bl	900110e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
9001113e:	6823      	ldr	r3, [r4, #0]
90011140:	466d      	mov	r5, sp
90011142:	4621      	mov	r1, r4
90011144:	343c      	adds	r4, #60	; 0x3c
90011146:	4628      	mov	r0, r5
90011148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001114c:	4798      	blx	r3
9001114e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90011152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90011156:	b005      	add	sp, #20
90011158:	bd30      	pop	{r4, r5, pc}

9001115a <_ZNK8touchgfx3Box12getSolidRectEv>:
9001115a:	2300      	movs	r3, #0
9001115c:	8083      	strh	r3, [r0, #4]
9001115e:	80c3      	strh	r3, [r0, #6]
90011160:	8003      	strh	r3, [r0, #0]
90011162:	8043      	strh	r3, [r0, #2]
90011164:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90011168:	2bff      	cmp	r3, #255	; 0xff
9001116a:	bf01      	itttt	eq
9001116c:	890b      	ldrheq	r3, [r1, #8]
9001116e:	8083      	strheq	r3, [r0, #4]
90011170:	894b      	ldrheq	r3, [r1, #10]
90011172:	80c3      	strheq	r3, [r0, #6]
90011174:	4770      	bx	lr
	...

90011178 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90011178:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001117a:	4604      	mov	r4, r0
9001117c:	466b      	mov	r3, sp
9001117e:	6808      	ldr	r0, [r1, #0]
90011180:	6849      	ldr	r1, [r1, #4]
90011182:	c303      	stmia	r3!, {r0, r1}
90011184:	6823      	ldr	r3, [r4, #0]
90011186:	4669      	mov	r1, sp
90011188:	4620      	mov	r0, r4
9001118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001118c:	4798      	blx	r3
9001118e:	4b08      	ldr	r3, [pc, #32]	; (900111b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90011190:	681b      	ldr	r3, [r3, #0]
90011192:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90011196:	b10a      	cbz	r2, 9001119c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90011198:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001119a:	b900      	cbnz	r0, 9001119e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
9001119c:	6898      	ldr	r0, [r3, #8]
9001119e:	6803      	ldr	r3, [r0, #0]
900111a0:	4669      	mov	r1, sp
900111a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900111a4:	6a1d      	ldr	r5, [r3, #32]
900111a6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900111aa:	47a8      	blx	r5
900111ac:	b003      	add	sp, #12
900111ae:	bd30      	pop	{r4, r5, pc}
900111b0:	2402620c 	.word	0x2402620c

900111b4 <_ZN8touchgfx3BoxD1Ev>:
900111b4:	4770      	bx	lr

900111b6 <_ZN8touchgfx3BoxD0Ev>:
900111b6:	b510      	push	{r4, lr}
900111b8:	4604      	mov	r4, r0
900111ba:	212c      	movs	r1, #44	; 0x2c
900111bc:	f010 fba1 	bl	90021902 <_ZdlPvj>
900111c0:	4620      	mov	r0, r4
900111c2:	bd10      	pop	{r4, pc}

900111c4 <_ZNK8touchgfx3Box17invalidateContentEv>:
900111c4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900111c8:	b12a      	cbz	r2, 900111d6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900111ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900111ce:	b112      	cbz	r2, 900111d6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900111d0:	6803      	ldr	r3, [r0, #0]
900111d2:	695b      	ldr	r3, [r3, #20]
900111d4:	4718      	bx	r3
900111d6:	4770      	bx	lr

900111d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
900111d8:	4b30      	ldr	r3, [pc, #192]	; (9001129c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
900111da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900111de:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900111e0:	b08d      	sub	sp, #52	; 0x34
900111e2:	881b      	ldrh	r3, [r3, #0]
900111e4:	4604      	mov	r4, r0
900111e6:	460f      	mov	r7, r1
900111e8:	4293      	cmp	r3, r2
900111ea:	d954      	bls.n	90011296 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900111ec:	4b2c      	ldr	r3, [pc, #176]	; (900112a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
900111ee:	6819      	ldr	r1, [r3, #0]
900111f0:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900111f4:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900111f8:	4a2a      	ldr	r2, [pc, #168]	; (900112a4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900111fa:	6812      	ldr	r2, [r2, #0]
900111fc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
90011200:	2900      	cmp	r1, #0
90011202:	d048      	beq.n	90011296 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90011204:	785a      	ldrb	r2, [r3, #1]
90011206:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
9001120a:	f3c2 0801 	ubfx	r8, r2, #0, #2
9001120e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90011212:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90011216:	4b24      	ldr	r3, [pc, #144]	; (900112a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
90011218:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
9001121c:	681a      	ldr	r2, [r3, #0]
9001121e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90011222:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90011226:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001122a:	6b26      	ldr	r6, [r4, #48]	; 0x30
9001122c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90011230:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90011234:	9107      	str	r1, [sp, #28]
90011236:	f88d 8020 	strb.w	r8, [sp, #32]
9001123a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
9001123e:	9609      	str	r6, [sp, #36]	; 0x24
90011240:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90011244:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90011248:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
9001124c:	b10b      	cbz	r3, 90011252 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
9001124e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90011250:	b905      	cbnz	r5, 90011254 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90011252:	6895      	ldr	r5, [r2, #8]
90011254:	ae05      	add	r6, sp, #20
90011256:	4621      	mov	r1, r4
90011258:	4630      	mov	r0, r6
9001125a:	f002 fe37 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001125e:	4b13      	ldr	r3, [pc, #76]	; (900112ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90011260:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90011262:	6818      	ldr	r0, [r3, #0]
90011264:	f7f4 fb6a 	bl	9000593c <_ZNK8touchgfx5Texts7getTextEt>
90011268:	6823      	ldr	r3, [r4, #0]
9001126a:	4680      	mov	r8, r0
9001126c:	4620      	mov	r0, r4
9001126e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90011270:	4798      	blx	r3
90011272:	6823      	ldr	r3, [r4, #0]
90011274:	4681      	mov	r9, r0
90011276:	4620      	mov	r0, r4
90011278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9001127c:	4798      	blx	r3
9001127e:	ab07      	add	r3, sp, #28
90011280:	f8cd 8004 	str.w	r8, [sp, #4]
90011284:	9300      	str	r3, [sp, #0]
90011286:	463b      	mov	r3, r7
90011288:	e9cd 9002 	strd	r9, r0, [sp, #8]
9001128c:	4628      	mov	r0, r5
9001128e:	e896 0006 	ldmia.w	r6, {r1, r2}
90011292:	f7f4 fb03 	bl	9000589c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90011296:	b00d      	add	sp, #52	; 0x34
90011298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001129c:	24026260 	.word	0x24026260
900112a0:	2402625c 	.word	0x2402625c
900112a4:	24026264 	.word	0x24026264
900112a8:	2402620c 	.word	0x2402620c
900112ac:	24026268 	.word	0x24026268

900112b0 <_ZN8touchgfx5ImageD1Ev>:
900112b0:	4770      	bx	lr

900112b2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
900112b2:	b570      	push	{r4, r5, r6, lr}
900112b4:	880b      	ldrh	r3, [r1, #0]
900112b6:	460d      	mov	r5, r1
900112b8:	4604      	mov	r4, r0
900112ba:	84c3      	strh	r3, [r0, #38]	; 0x26
900112bc:	4608      	mov	r0, r1
900112be:	f004 fd3f 	bl	90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>
900112c2:	4606      	mov	r6, r0
900112c4:	4628      	mov	r0, r5
900112c6:	f004 fd6f 	bl	90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>
900112ca:	6823      	ldr	r3, [r4, #0]
900112cc:	4605      	mov	r5, r0
900112ce:	4631      	mov	r1, r6
900112d0:	4620      	mov	r0, r4
900112d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900112d4:	4798      	blx	r3
900112d6:	6823      	ldr	r3, [r4, #0]
900112d8:	4629      	mov	r1, r5
900112da:	4620      	mov	r0, r4
900112dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900112de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900112e2:	4718      	bx	r3

900112e4 <_ZN8touchgfx5ImageD0Ev>:
900112e4:	b510      	push	{r4, lr}
900112e6:	4604      	mov	r4, r0
900112e8:	212c      	movs	r1, #44	; 0x2c
900112ea:	f010 fb0a 	bl	90021902 <_ZdlPvj>
900112ee:	4620      	mov	r0, r4
900112f0:	bd10      	pop	{r4, pc}

900112f2 <_ZNK8touchgfx5Image12getSolidRectEv>:
900112f2:	b510      	push	{r4, lr}
900112f4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900112f8:	4604      	mov	r4, r0
900112fa:	2bff      	cmp	r3, #255	; 0xff
900112fc:	d006      	beq.n	9001130c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900112fe:	2300      	movs	r3, #0
90011300:	8003      	strh	r3, [r0, #0]
90011302:	8043      	strh	r3, [r0, #2]
90011304:	8083      	strh	r3, [r0, #4]
90011306:	80c3      	strh	r3, [r0, #6]
90011308:	4620      	mov	r0, r4
9001130a:	bd10      	pop	{r4, pc}
9001130c:	3126      	adds	r1, #38	; 0x26
9001130e:	f004 fd7f 	bl	90015e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90011312:	e7f9      	b.n	90011308 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90011314 <_ZNK8touchgfx5Image17invalidateContentEv>:
90011314:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
90011318:	b12a      	cbz	r2, 90011326 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
9001131a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
9001131e:	b112      	cbz	r2, 90011326 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90011320:	6803      	ldr	r3, [r0, #0]
90011322:	695b      	ldr	r3, [r3, #20]
90011324:	4718      	bx	r3
90011326:	4770      	bx	lr

90011328 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90011328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001132c:	4604      	mov	r4, r0
9001132e:	b088      	sub	sp, #32
90011330:	2500      	movs	r5, #0
90011332:	460f      	mov	r7, r1
90011334:	f854 3b26 	ldr.w	r3, [r4], #38
90011338:	a904      	add	r1, sp, #16
9001133a:	4606      	mov	r6, r0
9001133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001133e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90011342:	4798      	blx	r3
90011344:	4620      	mov	r0, r4
90011346:	f004 fcfb 	bl	90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001134a:	4680      	mov	r8, r0
9001134c:	4620      	mov	r0, r4
9001134e:	f004 fd2b 	bl	90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011352:	9506      	str	r5, [sp, #24]
90011354:	ad06      	add	r5, sp, #24
90011356:	f8ad 001e 	strh.w	r0, [sp, #30]
9001135a:	4639      	mov	r1, r7
9001135c:	f8ad 801c 	strh.w	r8, [sp, #28]
90011360:	4628      	mov	r0, r5
90011362:	f7fe fdc7 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90011366:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001136a:	2b00      	cmp	r3, #0
9001136c:	dd19      	ble.n	900113a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001136e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90011372:	2b00      	cmp	r3, #0
90011374:	dd15      	ble.n	900113a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90011376:	4b0c      	ldr	r3, [pc, #48]	; (900113a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90011378:	681b      	ldr	r3, [r3, #0]
9001137a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001137e:	b10a      	cbz	r2, 90011384 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90011380:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90011382:	b900      	cbnz	r0, 90011386 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90011384:	6898      	ldr	r0, [r3, #8]
90011386:	2701      	movs	r7, #1
90011388:	6801      	ldr	r1, [r0, #0]
9001138a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001138e:	9702      	str	r7, [sp, #8]
90011390:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90011394:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90011398:	e9cd 5600 	strd	r5, r6, [sp]
9001139c:	688d      	ldr	r5, [r1, #8]
9001139e:	4621      	mov	r1, r4
900113a0:	47a8      	blx	r5
900113a2:	b008      	add	sp, #32
900113a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900113a8:	2402620c 	.word	0x2402620c

900113ac <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900113ac:	b510      	push	{r4, lr}
900113ae:	6803      	ldr	r3, [r0, #0]
900113b0:	460c      	mov	r4, r1
900113b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900113b4:	4798      	blx	r3
900113b6:	1b03      	subs	r3, r0, r4
900113b8:	4258      	negs	r0, r3
900113ba:	4158      	adcs	r0, r3
900113bc:	bd10      	pop	{r4, pc}
	...

900113c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900113c0:	4b01      	ldr	r3, [pc, #4]	; (900113c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900113c2:	6019      	str	r1, [r3, #0]
900113c4:	4770      	bx	lr
900113c6:	bf00      	nop
900113c8:	24026214 	.word	0x24026214

900113cc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900113d0:	4696      	mov	lr, r2
900113d2:	b097      	sub	sp, #92	; 0x5c
900113d4:	4605      	mov	r5, r0
900113d6:	4614      	mov	r4, r2
900113d8:	460e      	mov	r6, r1
900113da:	461f      	mov	r7, r3
900113dc:	f10d 0c1c 	add.w	ip, sp, #28
900113e0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
900113e4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
900113e8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
900113ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900113f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900113f4:	f8de 3000 	ldr.w	r3, [lr]
900113f8:	f104 0e14 	add.w	lr, r4, #20
900113fc:	f8cc 3000 	str.w	r3, [ip]
90011400:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90011404:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001140c:	f8de 3000 	ldr.w	r3, [lr]
90011410:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90011414:	f8cc 3000 	str.w	r3, [ip]
90011418:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
9001141c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011424:	f8de 3000 	ldr.w	r3, [lr]
90011428:	4631      	mov	r1, r6
9001142a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001142c:	4628      	mov	r0, r5
9001142e:	f8cc 3000 	str.w	r3, [ip]
90011432:	682b      	ldr	r3, [r5, #0]
90011434:	9201      	str	r2, [sp, #4]
90011436:	9a20      	ldr	r2, [sp, #128]	; 0x80
90011438:	f8cd 8008 	str.w	r8, [sp, #8]
9001143c:	9200      	str	r2, [sp, #0]
9001143e:	aa07      	add	r2, sp, #28
90011440:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90011444:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90011448:	463b      	mov	r3, r7
9001144a:	47d8      	blx	fp
9001144c:	46a6      	mov	lr, r4
9001144e:	f10d 0c1c 	add.w	ip, sp, #28
90011452:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001145a:	f8de 3000 	ldr.w	r3, [lr]
9001145e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90011462:	343c      	adds	r4, #60	; 0x3c
90011464:	f8cc 3000 	str.w	r3, [ip]
90011468:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
9001146c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011474:	f8de 3000 	ldr.w	r3, [lr]
90011478:	f8cc 3000 	str.w	r3, [ip]
9001147c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90011480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90011482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011486:	6823      	ldr	r3, [r4, #0]
90011488:	4631      	mov	r1, r6
9001148a:	4628      	mov	r0, r5
9001148c:	f8cc 3000 	str.w	r3, [ip]
90011490:	682b      	ldr	r3, [r5, #0]
90011492:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90011496:	9a21      	ldr	r2, [sp, #132]	; 0x84
90011498:	f8cd 8008 	str.w	r8, [sp, #8]
9001149c:	9201      	str	r2, [sp, #4]
9001149e:	9a20      	ldr	r2, [sp, #128]	; 0x80
900114a0:	9200      	str	r2, [sp, #0]
900114a2:	aa07      	add	r2, sp, #28
900114a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900114a6:	463b      	mov	r3, r7
900114a8:	47a0      	blx	r4
900114aa:	b017      	add	sp, #92	; 0x5c
900114ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900114b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900114b4:	b08d      	sub	sp, #52	; 0x34
900114b6:	4688      	mov	r8, r1
900114b8:	f8d3 c000 	ldr.w	ip, [r3]
900114bc:	9916      	ldr	r1, [sp, #88]	; 0x58
900114be:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900114c2:	680f      	ldr	r7, [r1, #0]
900114c4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900114c8:	eba7 070c 	sub.w	r7, r7, ip
900114cc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
900114d0:	edd3 6a07 	vldr	s13, [r3, #28]
900114d4:	42bc      	cmp	r4, r7
900114d6:	9918      	ldr	r1, [sp, #96]	; 0x60
900114d8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
900114dc:	bfa8      	it	ge
900114de:	463c      	movge	r4, r7
900114e0:	f9b1 9000 	ldrsh.w	r9, [r1]
900114e4:	f9ba 1000 	ldrsh.w	r1, [sl]
900114e8:	ee07 4a90 	vmov	s15, r4
900114ec:	eb09 0e0c 	add.w	lr, r9, ip
900114f0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
900114f4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
900114f8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
900114fc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90011500:	4571      	cmp	r1, lr
90011502:	ee25 4a04 	vmul.f32	s8, s10, s8
90011506:	ee65 4a24 	vmul.f32	s9, s10, s9
9001150a:	ee25 5a27 	vmul.f32	s10, s10, s15
9001150e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
90011512:	ee71 0aa4 	vadd.f32	s1, s3, s9
90011516:	ee32 1a05 	vadd.f32	s2, s4, s10
9001151a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9001151e:	ee36 0a84 	vadd.f32	s0, s13, s8
90011522:	ee61 1a87 	vmul.f32	s3, s3, s14
90011526:	ee22 2a07 	vmul.f32	s4, s4, s14
9001152a:	f340 808c 	ble.w	90011646 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
9001152e:	eba1 060e 	sub.w	r6, r1, lr
90011532:	fb96 f5f4 	sdiv	r5, r6, r4
90011536:	ee07 5a10 	vmov	s14, r5
9001153a:	2d00      	cmp	r5, #0
9001153c:	fb04 6615 	mls	r6, r4, r5, r6
90011540:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90011544:	eea7 0a04 	vfma.f32	s0, s14, s8
90011548:	eee7 0a24 	vfma.f32	s1, s14, s9
9001154c:	eea7 1a05 	vfma.f32	s2, s14, s10
90011550:	dd12      	ble.n	90011578 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90011552:	ee70 6a44 	vsub.f32	s13, s0, s8
90011556:	ee70 1ae4 	vsub.f32	s3, s1, s9
9001155a:	ee31 2a45 	vsub.f32	s4, s2, s10
9001155e:	eef5 6a40 	vcmp.f32	s13, #0.0
90011562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011566:	bf14      	ite	ne
90011568:	ee87 7aa6 	vdivne.f32	s14, s15, s13
9001156c:	eeb0 7a67 	vmoveq.f32	s14, s15
90011570:	ee61 1a87 	vmul.f32	s3, s3, s14
90011574:	ee22 2a07 	vmul.f32	s4, s4, s14
90011578:	fb05 f204 	mul.w	r2, r5, r4
9001157c:	1abf      	subs	r7, r7, r2
9001157e:	4494      	add	ip, r2
90011580:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90011584:	4411      	add	r1, r2
90011586:	eb09 020c 	add.w	r2, r9, ip
9001158a:	b209      	sxth	r1, r1
9001158c:	443a      	add	r2, r7
9001158e:	428a      	cmp	r2, r1
90011590:	bfc4      	itt	gt
90011592:	eba1 0209 	subgt.w	r2, r1, r9
90011596:	eba2 070c 	subgt.w	r7, r2, ip
9001159a:	2f00      	cmp	r7, #0
9001159c:	dd50      	ble.n	90011640 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
9001159e:	fb97 f1f4 	sdiv	r1, r7, r4
900115a2:	fb04 7211 	mls	r2, r4, r1, r7
900115a6:	b90a      	cbnz	r2, 900115ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
900115a8:	3901      	subs	r1, #1
900115aa:	4622      	mov	r2, r4
900115ac:	eec7 3a80 	vdiv.f32	s7, s15, s0
900115b0:	6840      	ldr	r0, [r0, #4]
900115b2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
900115b6:	44b6      	add	lr, r6
900115b8:	f8d0 a000 	ldr.w	sl, [r0]
900115bc:	2900      	cmp	r1, #0
900115be:	bfcc      	ite	gt
900115c0:	46a1      	movgt	r9, r4
900115c2:	4691      	movle	r9, r2
900115c4:	900b      	str	r0, [sp, #44]	; 0x2c
900115c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
900115c8:	fb04 e505 	mla	r5, r4, r5, lr
900115cc:	eef0 6a42 	vmov.f32	s13, s4
900115d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
900115d4:	9008      	str	r0, [sp, #32]
900115d6:	eeb0 7a61 	vmov.f32	s14, s3
900115da:	9818      	ldr	r0, [sp, #96]	; 0x60
900115dc:	695b      	ldr	r3, [r3, #20]
900115de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900115e2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
900115e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
900115ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
900115ec:	445b      	add	r3, fp
900115ee:	9307      	str	r3, [sp, #28]
900115f0:	ee16 3a90 	vmov	r3, s13
900115f4:	e9cd 8505 	strd	r8, r5, [sp, #20]
900115f8:	ee60 2aa3 	vmul.f32	s5, s1, s7
900115fc:	ee21 3a23 	vmul.f32	s6, s2, s7
90011600:	ee72 7ae1 	vsub.f32	s15, s5, s3
90011604:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90011608:	ee17 7a90 	vmov	r7, s15
9001160c:	ee73 7a42 	vsub.f32	s15, s6, s4
90011610:	fb97 f7f4 	sdiv	r7, r7, r4
90011614:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90011618:	ee17 ca90 	vmov	ip, s15
9001161c:	fb9c fcf4 	sdiv	ip, ip, r4
90011620:	fb0c 3306 	mla	r3, ip, r6, r3
90011624:	9302      	str	r3, [sp, #8]
90011626:	ee17 3a10 	vmov	r3, s14
9001162a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
9001162e:	fb07 3706 	mla	r7, r7, r6, r3
90011632:	eba9 0306 	sub.w	r3, r9, r6
90011636:	e9cd 4700 	strd	r4, r7, [sp]
9001163a:	f8da 4008 	ldr.w	r4, [sl, #8]
9001163e:	47a0      	blx	r4
90011640:	b00d      	add	sp, #52	; 0x34
90011642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011646:	2500      	movs	r5, #0
90011648:	462e      	mov	r6, r5
9001164a:	e799      	b.n	90011580 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

9001164c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
9001164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011650:	b0db      	sub	sp, #364	; 0x16c
90011652:	461d      	mov	r5, r3
90011654:	4614      	mov	r4, r2
90011656:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
9001165a:	910f      	str	r1, [sp, #60]	; 0x3c
9001165c:	4629      	mov	r1, r5
9001165e:	930a      	str	r3, [sp, #40]	; 0x28
90011660:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90011664:	9009      	str	r0, [sp, #36]	; 0x24
90011666:	930b      	str	r3, [sp, #44]	; 0x2c
90011668:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
9001166c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90011670:	9310      	str	r3, [sp, #64]	; 0x40
90011672:	6803      	ldr	r3, [r0, #0]
90011674:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90011676:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
9001167a:	47b8      	blx	r7
9001167c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001167e:	6058      	str	r0, [r3, #4]
90011680:	2800      	cmp	r0, #0
90011682:	f000 83a1 	beq.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011686:	682b      	ldr	r3, [r5, #0]
90011688:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
9001168c:	ed94 7a02 	vldr	s14, [r4, #8]
90011690:	9314      	str	r3, [sp, #80]	; 0x50
90011692:	686b      	ldr	r3, [r5, #4]
90011694:	eeb4 7ae7 	vcmpe.f32	s14, s15
90011698:	9315      	str	r3, [sp, #84]	; 0x54
9001169a:	4bc1      	ldr	r3, [pc, #772]	; (900119a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
9001169c:	7819      	ldrb	r1, [r3, #0]
9001169e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
900116a2:	2900      	cmp	r1, #0
900116a4:	bf16      	itet	ne
900116a6:	4619      	movne	r1, r3
900116a8:	4611      	moveq	r1, r2
900116aa:	4613      	movne	r3, r2
900116ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900116b0:	9116      	str	r1, [sp, #88]	; 0x58
900116b2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
900116b6:	f240 8387 	bls.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116ba:	ed94 7a07 	vldr	s14, [r4, #28]
900116be:	eeb4 7ae7 	vcmpe.f32	s14, s15
900116c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900116c6:	f240 837f 	bls.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116ca:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
900116ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
900116d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900116d6:	f240 8377 	bls.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116da:	6822      	ldr	r2, [r4, #0]
900116dc:	4bb1      	ldr	r3, [pc, #708]	; (900119a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
900116de:	429a      	cmp	r2, r3
900116e0:	f2c0 8372 	blt.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116e4:	49b0      	ldr	r1, [pc, #704]	; (900119a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
900116e6:	6963      	ldr	r3, [r4, #20]
900116e8:	428a      	cmp	r2, r1
900116ea:	f300 836d 	bgt.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116ee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
900116f2:	48ae      	ldr	r0, [pc, #696]	; (900119ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
900116f4:	33ff      	adds	r3, #255	; 0xff
900116f6:	4283      	cmp	r3, r0
900116f8:	f200 8366 	bhi.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900116fe:	4dac      	ldr	r5, [pc, #688]	; (900119b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90011700:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90011704:	33ff      	adds	r3, #255	; 0xff
90011706:	42ab      	cmp	r3, r5
90011708:	f200 835e 	bhi.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001170c:	6862      	ldr	r2, [r4, #4]
9001170e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90011712:	33ff      	adds	r3, #255	; 0xff
90011714:	4283      	cmp	r3, r0
90011716:	f200 8357 	bhi.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001171a:	69a1      	ldr	r1, [r4, #24]
9001171c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90011720:	33ff      	adds	r3, #255	; 0xff
90011722:	4283      	cmp	r3, r0
90011724:	f200 8350 	bhi.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9001172a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
9001172e:	30ff      	adds	r0, #255	; 0xff
90011730:	42a8      	cmp	r0, r5
90011732:	f200 8349 	bhi.w	90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011736:	428a      	cmp	r2, r1
90011738:	f280 8110 	bge.w	9001195c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
9001173c:	429a      	cmp	r2, r3
9001173e:	f300 8119 	bgt.w	90011974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90011742:	4299      	cmp	r1, r3
90011744:	f280 811d 	bge.w	90011982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90011748:	2502      	movs	r5, #2
9001174a:	2701      	movs	r7, #1
9001174c:	46a9      	mov	r9, r5
9001174e:	46b8      	mov	r8, r7
90011750:	f04f 0a00 	mov.w	sl, #0
90011754:	4621      	mov	r1, r4
90011756:	a849      	add	r0, sp, #292	; 0x124
90011758:	f003 fcaa 	bl	900150b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
9001175c:	4622      	mov	r2, r4
9001175e:	4653      	mov	r3, sl
90011760:	a949      	add	r1, sp, #292	; 0x124
90011762:	f8cd 9000 	str.w	r9, [sp]
90011766:	a819      	add	r0, sp, #100	; 0x64
90011768:	f003 fdd2 	bl	90015310 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
9001176c:	4622      	mov	r2, r4
9001176e:	4653      	mov	r3, sl
90011770:	a949      	add	r1, sp, #292	; 0x124
90011772:	f8cd 8000 	str.w	r8, [sp]
90011776:	a829      	add	r0, sp, #164	; 0xa4
90011778:	f003 fdca 	bl	90015310 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
9001177c:	4643      	mov	r3, r8
9001177e:	4622      	mov	r2, r4
90011780:	a949      	add	r1, sp, #292	; 0x124
90011782:	f8cd 9000 	str.w	r9, [sp]
90011786:	a839      	add	r0, sp, #228	; 0xe4
90011788:	f003 fdc2 	bl	90015310 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
9001178c:	42af      	cmp	r7, r5
9001178e:	af12      	add	r7, sp, #72	; 0x48
90011790:	bfb7      	itett	lt
90011792:	2300      	movlt	r3, #0
90011794:	2301      	movge	r3, #1
90011796:	ad29      	addlt	r5, sp, #164	; 0xa4
90011798:	ac19      	addlt	r4, sp, #100	; 0x64
9001179a:	bfb1      	iteee	lt
9001179c:	930e      	strlt	r3, [sp, #56]	; 0x38
9001179e:	ad19      	addge	r5, sp, #100	; 0x64
900117a0:	930e      	strge	r3, [sp, #56]	; 0x38
900117a2:	ac29      	addge	r4, sp, #164	; 0xa4
900117a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900117a6:	e893 0003 	ldmia.w	r3, {r0, r1}
900117aa:	e887 0003 	stmia.w	r7, {r0, r1}
900117ae:	b928      	cbnz	r0, 900117bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
900117b0:	4b80      	ldr	r3, [pc, #512]	; (900119b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
900117b2:	6818      	ldr	r0, [r3, #0]
900117b4:	6803      	ldr	r3, [r0, #0]
900117b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900117b8:	4798      	blx	r3
900117ba:	6038      	str	r0, [r7, #0]
900117bc:	9b64      	ldr	r3, [sp, #400]	; 0x190
900117be:	f8bb 0006 	ldrh.w	r0, [fp, #6]
900117c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
900117c6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
900117c8:	930c      	str	r3, [sp, #48]	; 0x30
900117ca:	990c      	ldr	r1, [sp, #48]	; 0x30
900117cc:	6963      	ldr	r3, [r4, #20]
900117ce:	440b      	add	r3, r1
900117d0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
900117d4:	4408      	add	r0, r1
900117d6:	b200      	sxth	r0, r0
900117d8:	4283      	cmp	r3, r0
900117da:	900d      	str	r0, [sp, #52]	; 0x34
900117dc:	f280 80dd 	bge.w	9001199a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
900117e0:	428b      	cmp	r3, r1
900117e2:	da08      	bge.n	900117f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900117e4:	2a00      	cmp	r2, #0
900117e6:	dd06      	ble.n	900117f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900117e8:	1acb      	subs	r3, r1, r3
900117ea:	429a      	cmp	r2, r3
900117ec:	f2c0 80e4 	blt.w	900119b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
900117f0:	2b00      	cmp	r3, #0
900117f2:	f300 80e2 	bgt.w	900119ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
900117f6:	6967      	ldr	r7, [r4, #20]
900117f8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
900117fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900117fe:	443b      	add	r3, r7
90011800:	461f      	mov	r7, r3
90011802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011804:	1bdf      	subs	r7, r3, r7
90011806:	4297      	cmp	r7, r2
90011808:	bfa8      	it	ge
9001180a:	4617      	movge	r7, r2
9001180c:	2f00      	cmp	r7, #0
9001180e:	f340 8166 	ble.w	90011ade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90011812:	9b64      	ldr	r3, [sp, #400]	; 0x190
90011814:	6829      	ldr	r1, [r5, #0]
90011816:	f9b3 2000 	ldrsh.w	r2, [r3]
9001181a:	f9bb 3000 	ldrsh.w	r3, [fp]
9001181e:	4411      	add	r1, r2
90011820:	6820      	ldr	r0, [r4, #0]
90011822:	4299      	cmp	r1, r3
90011824:	dd1a      	ble.n	9001185c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90011826:	f8bb 1004 	ldrh.w	r1, [fp, #4]
9001182a:	4402      	add	r2, r0
9001182c:	440b      	add	r3, r1
9001182e:	b21b      	sxth	r3, r3
90011830:	429a      	cmp	r2, r3
90011832:	dc13      	bgt.n	9001185c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90011834:	9a10      	ldr	r2, [sp, #64]	; 0x40
90011836:	a912      	add	r1, sp, #72	; 0x48
90011838:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001183a:	9809      	ldr	r0, [sp, #36]	; 0x24
9001183c:	681b      	ldr	r3, [r3, #0]
9001183e:	9206      	str	r2, [sp, #24]
90011840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90011842:	9500      	str	r5, [sp, #0]
90011844:	9205      	str	r2, [sp, #20]
90011846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90011848:	e9cd b203 	strd	fp, r2, [sp, #12]
9001184c:	9a64      	ldr	r2, [sp, #400]	; 0x190
9001184e:	e9cd 8201 	strd	r8, r2, [sp, #4]
90011852:	aa49      	add	r2, sp, #292	; 0x124
90011854:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90011858:	4623      	mov	r3, r4
9001185a:	47c8      	blx	r9
9001185c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90011860:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90011864:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90011868:	ee37 7a27 	vadd.f32	s14, s14, s15
9001186c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90011870:	68a1      	ldr	r1, [r4, #8]
90011872:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011876:	ed94 6a08 	vldr	s12, [r4, #32]
9001187a:	edd4 6a07 	vldr	s13, [r4, #28]
9001187e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011882:	ee76 6a86 	vadd.f32	s13, s13, s12
90011886:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
9001188a:	e9d4 2300 	ldrd	r2, r3, [r4]
9001188e:	edc4 6a07 	vstr	s13, [r4, #28]
90011892:	441a      	add	r2, r3
90011894:	6963      	ldr	r3, [r4, #20]
90011896:	3301      	adds	r3, #1
90011898:	6022      	str	r2, [r4, #0]
9001189a:	6163      	str	r3, [r4, #20]
9001189c:	69a3      	ldr	r3, [r4, #24]
9001189e:	3b01      	subs	r3, #1
900118a0:	61a3      	str	r3, [r4, #24]
900118a2:	6923      	ldr	r3, [r4, #16]
900118a4:	440b      	add	r3, r1
900118a6:	68e1      	ldr	r1, [r4, #12]
900118a8:	428b      	cmp	r3, r1
900118aa:	6123      	str	r3, [r4, #16]
900118ac:	db15      	blt.n	900118da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
900118ae:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
900118b2:	3201      	adds	r2, #1
900118b4:	1a5b      	subs	r3, r3, r1
900118b6:	ee76 6a26 	vadd.f32	s13, s12, s13
900118ba:	6022      	str	r2, [r4, #0]
900118bc:	6123      	str	r3, [r4, #16]
900118be:	edc4 6a07 	vstr	s13, [r4, #28]
900118c2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
900118c6:	ee36 7a87 	vadd.f32	s14, s13, s14
900118ca:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900118ce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
900118d2:	ee77 7a27 	vadd.f32	s15, s14, s15
900118d6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900118da:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
900118de:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
900118e2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
900118e6:	ee37 7a27 	vadd.f32	s14, s14, s15
900118ea:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
900118ee:	68a9      	ldr	r1, [r5, #8]
900118f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900118f4:	ed95 6a08 	vldr	s12, [r5, #32]
900118f8:	edd5 6a07 	vldr	s13, [r5, #28]
900118fc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011900:	ee76 6a86 	vadd.f32	s13, s13, s12
90011904:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011908:	e9d5 2300 	ldrd	r2, r3, [r5]
9001190c:	edc5 6a07 	vstr	s13, [r5, #28]
90011910:	441a      	add	r2, r3
90011912:	696b      	ldr	r3, [r5, #20]
90011914:	3301      	adds	r3, #1
90011916:	602a      	str	r2, [r5, #0]
90011918:	616b      	str	r3, [r5, #20]
9001191a:	69ab      	ldr	r3, [r5, #24]
9001191c:	3b01      	subs	r3, #1
9001191e:	61ab      	str	r3, [r5, #24]
90011920:	692b      	ldr	r3, [r5, #16]
90011922:	440b      	add	r3, r1
90011924:	68e9      	ldr	r1, [r5, #12]
90011926:	428b      	cmp	r3, r1
90011928:	612b      	str	r3, [r5, #16]
9001192a:	db15      	blt.n	90011958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
9001192c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90011930:	3201      	adds	r2, #1
90011932:	1a5b      	subs	r3, r3, r1
90011934:	ee76 6a26 	vadd.f32	s13, s12, s13
90011938:	602a      	str	r2, [r5, #0]
9001193a:	612b      	str	r3, [r5, #16]
9001193c:	edc5 6a07 	vstr	s13, [r5, #28]
90011940:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90011944:	ee36 7a87 	vadd.f32	s14, s13, s14
90011948:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001194c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90011950:	ee77 7a27 	vadd.f32	s15, s14, s15
90011954:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011958:	3f01      	subs	r7, #1
9001195a:	e757      	b.n	9001180c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
9001195c:	4299      	cmp	r1, r3
9001195e:	dc13      	bgt.n	90011988 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90011960:	429a      	cmp	r2, r3
90011962:	da14      	bge.n	9001198e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90011964:	2502      	movs	r5, #2
90011966:	2703      	movs	r7, #3
90011968:	f04f 0800 	mov.w	r8, #0
9001196c:	46a9      	mov	r9, r5
9001196e:	f04f 0a01 	mov.w	sl, #1
90011972:	e6ef      	b.n	90011754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90011974:	2501      	movs	r5, #1
90011976:	2700      	movs	r7, #0
90011978:	46a9      	mov	r9, r5
9001197a:	46b8      	mov	r8, r7
9001197c:	f04f 0a02 	mov.w	sl, #2
90011980:	e6e8      	b.n	90011754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90011982:	2501      	movs	r5, #1
90011984:	2702      	movs	r7, #2
90011986:	e6e1      	b.n	9001174c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90011988:	2500      	movs	r5, #0
9001198a:	2701      	movs	r7, #1
9001198c:	e7f4      	b.n	90011978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
9001198e:	2702      	movs	r7, #2
90011990:	2503      	movs	r5, #3
90011992:	f04f 0900 	mov.w	r9, #0
90011996:	46b8      	mov	r8, r7
90011998:	e7e9      	b.n	9001196e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
9001199a:	4613      	mov	r3, r2
9001199c:	e728      	b.n	900117f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
9001199e:	bf00      	nop
900119a0:	24026204 	.word	0x24026204
900119a4:	fffd8f01 	.word	0xfffd8f01
900119a8:	00027100 	.word	0x00027100
900119ac:	0004e1ff 	.word	0x0004e1ff
900119b0:	0004e1fe 	.word	0x0004e1fe
900119b4:	2402620c 	.word	0x2402620c
900119b8:	4613      	mov	r3, r2
900119ba:	992b      	ldr	r1, [sp, #172]	; 0xac
900119bc:	469e      	mov	lr, r3
900119be:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
900119c0:	469c      	mov	ip, r3
900119c2:	9111      	str	r1, [sp, #68]	; 0x44
900119c4:	f04f 0900 	mov.w	r9, #0
900119c8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
900119cc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
900119d0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
900119d4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
900119d8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
900119dc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
900119e0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
900119e4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
900119e8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
900119ec:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
900119f0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
900119f4:	f1bc 0f00 	cmp.w	ip, #0
900119f8:	d147      	bne.n	90011a8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
900119fa:	eb03 0c07 	add.w	ip, r3, r7
900119fe:	1ad7      	subs	r7, r2, r3
90011a00:	f1b9 0f00 	cmp.w	r9, #0
90011a04:	d009      	beq.n	90011a1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90011a06:	9029      	str	r0, [sp, #164]	; 0xa4
90011a08:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90011a0c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90011a10:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90011a14:	912d      	str	r1, [sp, #180]	; 0xb4
90011a16:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90011a1a:	991b      	ldr	r1, [sp, #108]	; 0x6c
90011a1c:	f04f 0800 	mov.w	r8, #0
90011a20:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90011a24:	9111      	str	r1, [sp, #68]	; 0x44
90011a26:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90011a2a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90011a2e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90011a32:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90011a36:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90011a3a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90011a3e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90011a42:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90011a46:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90011a4a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90011a4e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90011a52:	f1be 0f00 	cmp.w	lr, #0
90011a56:	d031      	beq.n	90011abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90011a58:	9e11      	ldr	r6, [sp, #68]	; 0x44
90011a5a:	4450      	add	r0, sl
90011a5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
90011a60:	4431      	add	r1, r6
90011a62:	ee37 7a04 	vadd.f32	s14, s14, s8
90011a66:	ee77 7aa3 	vadd.f32	s15, s15, s7
90011a6a:	4549      	cmp	r1, r9
90011a6c:	db08      	blt.n	90011a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90011a6e:	ee77 7a85 	vadd.f32	s15, s15, s10
90011a72:	3001      	adds	r0, #1
90011a74:	ee76 6aa5 	vadd.f32	s13, s13, s11
90011a78:	eba1 0109 	sub.w	r1, r1, r9
90011a7c:	ee37 7a06 	vadd.f32	s14, s14, s12
90011a80:	f10e 3eff 	add.w	lr, lr, #4294967295
90011a84:	f04f 0801 	mov.w	r8, #1
90011a88:	e7e3      	b.n	90011a52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90011a8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
90011a8c:	4450      	add	r0, sl
90011a8e:	ee37 7a24 	vadd.f32	s14, s14, s9
90011a92:	4431      	add	r1, r6
90011a94:	ee77 7a84 	vadd.f32	s15, s15, s8
90011a98:	ee76 6aa3 	vadd.f32	s13, s13, s7
90011a9c:	4541      	cmp	r1, r8
90011a9e:	db08      	blt.n	90011ab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90011aa0:	ee76 6a85 	vadd.f32	s13, s13, s10
90011aa4:	3001      	adds	r0, #1
90011aa6:	ee37 7a25 	vadd.f32	s14, s14, s11
90011aaa:	eba1 0108 	sub.w	r1, r1, r8
90011aae:	ee77 7a86 	vadd.f32	s15, s15, s12
90011ab2:	f10c 3cff 	add.w	ip, ip, #4294967295
90011ab6:	f04f 0901 	mov.w	r9, #1
90011aba:	e79b      	b.n	900119f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90011abc:	449c      	add	ip, r3
90011abe:	1aff      	subs	r7, r7, r3
90011ac0:	f1b8 0f00 	cmp.w	r8, #0
90011ac4:	d009      	beq.n	90011ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90011ac6:	9019      	str	r0, [sp, #100]	; 0x64
90011ac8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90011acc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90011ad0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90011ad4:	911d      	str	r1, [sp, #116]	; 0x74
90011ad6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90011ada:	1ad2      	subs	r2, r2, r3
90011adc:	e68b      	b.n	900117f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90011ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90011ae0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90011ae2:	2b00      	cmp	r3, #0
90011ae4:	f000 80d1 	beq.w	90011c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90011ae8:	ad19      	add	r5, sp, #100	; 0x64
90011aea:	ac39      	add	r4, sp, #228	; 0xe4
90011aec:	9b64      	ldr	r3, [sp, #400]	; 0x190
90011aee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90011af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90011af6:	930c      	str	r3, [sp, #48]	; 0x30
90011af8:	990c      	ldr	r1, [sp, #48]	; 0x30
90011afa:	6963      	ldr	r3, [r4, #20]
90011afc:	440b      	add	r3, r1
90011afe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90011b02:	4408      	add	r0, r1
90011b04:	b200      	sxth	r0, r0
90011b06:	4283      	cmp	r3, r0
90011b08:	900d      	str	r0, [sp, #52]	; 0x34
90011b0a:	f280 80c1 	bge.w	90011c90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90011b0e:	428b      	cmp	r3, r1
90011b10:	da08      	bge.n	90011b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011b12:	2a00      	cmp	r2, #0
90011b14:	dd06      	ble.n	90011b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011b16:	1acb      	subs	r3, r1, r3
90011b18:	429a      	cmp	r2, r3
90011b1a:	f2c0 80bb 	blt.w	90011c94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90011b1e:	2b00      	cmp	r3, #0
90011b20:	f300 80b9 	bgt.w	90011c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90011b24:	6967      	ldr	r7, [r4, #20]
90011b26:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90011b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90011b2c:	443b      	add	r3, r7
90011b2e:	461f      	mov	r7, r3
90011b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011b32:	1bdf      	subs	r7, r3, r7
90011b34:	4297      	cmp	r7, r2
90011b36:	bfa8      	it	ge
90011b38:	4617      	movge	r7, r2
90011b3a:	2f00      	cmp	r7, #0
90011b3c:	f340 813c 	ble.w	90011db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90011b40:	9b64      	ldr	r3, [sp, #400]	; 0x190
90011b42:	6829      	ldr	r1, [r5, #0]
90011b44:	f9b3 2000 	ldrsh.w	r2, [r3]
90011b48:	f9bb 3000 	ldrsh.w	r3, [fp]
90011b4c:	4411      	add	r1, r2
90011b4e:	6820      	ldr	r0, [r4, #0]
90011b50:	4299      	cmp	r1, r3
90011b52:	dd1a      	ble.n	90011b8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90011b54:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90011b58:	4402      	add	r2, r0
90011b5a:	440b      	add	r3, r1
90011b5c:	b21b      	sxth	r3, r3
90011b5e:	429a      	cmp	r2, r3
90011b60:	dc13      	bgt.n	90011b8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90011b62:	9a10      	ldr	r2, [sp, #64]	; 0x40
90011b64:	a912      	add	r1, sp, #72	; 0x48
90011b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
90011b68:	9809      	ldr	r0, [sp, #36]	; 0x24
90011b6a:	681b      	ldr	r3, [r3, #0]
90011b6c:	9206      	str	r2, [sp, #24]
90011b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90011b70:	9500      	str	r5, [sp, #0]
90011b72:	9205      	str	r2, [sp, #20]
90011b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90011b76:	e9cd b203 	strd	fp, r2, [sp, #12]
90011b7a:	9a64      	ldr	r2, [sp, #400]	; 0x190
90011b7c:	e9cd 8201 	strd	r8, r2, [sp, #4]
90011b80:	aa49      	add	r2, sp, #292	; 0x124
90011b82:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90011b86:	4623      	mov	r3, r4
90011b88:	47c8      	blx	r9
90011b8a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90011b8e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90011b92:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90011b96:	ee37 7a27 	vadd.f32	s14, s14, s15
90011b9a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90011b9e:	68a1      	ldr	r1, [r4, #8]
90011ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011ba4:	ed94 6a08 	vldr	s12, [r4, #32]
90011ba8:	edd4 6a07 	vldr	s13, [r4, #28]
90011bac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011bb0:	ee76 6a86 	vadd.f32	s13, s13, s12
90011bb4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90011bb8:	e9d4 2300 	ldrd	r2, r3, [r4]
90011bbc:	edc4 6a07 	vstr	s13, [r4, #28]
90011bc0:	441a      	add	r2, r3
90011bc2:	6963      	ldr	r3, [r4, #20]
90011bc4:	3301      	adds	r3, #1
90011bc6:	6022      	str	r2, [r4, #0]
90011bc8:	6163      	str	r3, [r4, #20]
90011bca:	69a3      	ldr	r3, [r4, #24]
90011bcc:	3b01      	subs	r3, #1
90011bce:	61a3      	str	r3, [r4, #24]
90011bd0:	6923      	ldr	r3, [r4, #16]
90011bd2:	440b      	add	r3, r1
90011bd4:	68e1      	ldr	r1, [r4, #12]
90011bd6:	428b      	cmp	r3, r1
90011bd8:	6123      	str	r3, [r4, #16]
90011bda:	db15      	blt.n	90011c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90011bdc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90011be0:	3201      	adds	r2, #1
90011be2:	1a5b      	subs	r3, r3, r1
90011be4:	ee76 6a26 	vadd.f32	s13, s12, s13
90011be8:	6022      	str	r2, [r4, #0]
90011bea:	6123      	str	r3, [r4, #16]
90011bec:	edc4 6a07 	vstr	s13, [r4, #28]
90011bf0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90011bf4:	ee36 7a87 	vadd.f32	s14, s13, s14
90011bf8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011bfc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90011c00:	ee77 7a27 	vadd.f32	s15, s14, s15
90011c04:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90011c08:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90011c0c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90011c10:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90011c14:	ee37 7a27 	vadd.f32	s14, s14, s15
90011c18:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90011c1c:	68a9      	ldr	r1, [r5, #8]
90011c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011c22:	ed95 6a08 	vldr	s12, [r5, #32]
90011c26:	edd5 6a07 	vldr	s13, [r5, #28]
90011c2a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011c2e:	ee76 6a86 	vadd.f32	s13, s13, s12
90011c32:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011c36:	e9d5 2300 	ldrd	r2, r3, [r5]
90011c3a:	edc5 6a07 	vstr	s13, [r5, #28]
90011c3e:	441a      	add	r2, r3
90011c40:	696b      	ldr	r3, [r5, #20]
90011c42:	3301      	adds	r3, #1
90011c44:	602a      	str	r2, [r5, #0]
90011c46:	616b      	str	r3, [r5, #20]
90011c48:	69ab      	ldr	r3, [r5, #24]
90011c4a:	3b01      	subs	r3, #1
90011c4c:	61ab      	str	r3, [r5, #24]
90011c4e:	692b      	ldr	r3, [r5, #16]
90011c50:	440b      	add	r3, r1
90011c52:	68e9      	ldr	r1, [r5, #12]
90011c54:	428b      	cmp	r3, r1
90011c56:	612b      	str	r3, [r5, #16]
90011c58:	db15      	blt.n	90011c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90011c5a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90011c5e:	3201      	adds	r2, #1
90011c60:	1a5b      	subs	r3, r3, r1
90011c62:	ee76 6a26 	vadd.f32	s13, s12, s13
90011c66:	602a      	str	r2, [r5, #0]
90011c68:	612b      	str	r3, [r5, #16]
90011c6a:	edc5 6a07 	vstr	s13, [r5, #28]
90011c6e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90011c72:	ee36 7a87 	vadd.f32	s14, s13, s14
90011c76:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011c7a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90011c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
90011c82:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011c86:	3f01      	subs	r7, #1
90011c88:	e757      	b.n	90011b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90011c8a:	ad39      	add	r5, sp, #228	; 0xe4
90011c8c:	ac19      	add	r4, sp, #100	; 0x64
90011c8e:	e72d      	b.n	90011aec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90011c90:	4613      	mov	r3, r2
90011c92:	e744      	b.n	90011b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90011c94:	4613      	mov	r3, r2
90011c96:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90011c98:	469e      	mov	lr, r3
90011c9a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90011c9e:	461f      	mov	r7, r3
90011ca0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90011ca4:	f04f 0900 	mov.w	r9, #0
90011ca8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90011cac:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90011cb0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90011cb4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90011cb8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90011cbc:	993d      	ldr	r1, [sp, #244]	; 0xf4
90011cbe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90011cc2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90011cc6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90011cca:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90011cce:	960e      	str	r6, [sp, #56]	; 0x38
90011cd0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90011cd4:	2f00      	cmp	r7, #0
90011cd6:	d146      	bne.n	90011d66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90011cd8:	449c      	add	ip, r3
90011cda:	1ad7      	subs	r7, r2, r3
90011cdc:	f1b9 0f00 	cmp.w	r9, #0
90011ce0:	d009      	beq.n	90011cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90011ce2:	9039      	str	r0, [sp, #228]	; 0xe4
90011ce4:	913d      	str	r1, [sp, #244]	; 0xf4
90011ce6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90011cea:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90011cee:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90011cf2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90011cf6:	991b      	ldr	r1, [sp, #108]	; 0x6c
90011cf8:	f04f 0800 	mov.w	r8, #0
90011cfc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90011d00:	910e      	str	r1, [sp, #56]	; 0x38
90011d02:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90011d06:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90011d0a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90011d0e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90011d12:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90011d16:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90011d1a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90011d1e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90011d22:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90011d26:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90011d2a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90011d2e:	f1be 0f00 	cmp.w	lr, #0
90011d32:	d030      	beq.n	90011d96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90011d34:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90011d36:	4450      	add	r0, sl
90011d38:	ee76 6aa4 	vadd.f32	s13, s13, s9
90011d3c:	4431      	add	r1, r6
90011d3e:	ee37 7a04 	vadd.f32	s14, s14, s8
90011d42:	ee77 7aa3 	vadd.f32	s15, s15, s7
90011d46:	4549      	cmp	r1, r9
90011d48:	db08      	blt.n	90011d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90011d4a:	ee77 7a85 	vadd.f32	s15, s15, s10
90011d4e:	3001      	adds	r0, #1
90011d50:	ee76 6aa5 	vadd.f32	s13, s13, s11
90011d54:	eba1 0109 	sub.w	r1, r1, r9
90011d58:	ee37 7a06 	vadd.f32	s14, s14, s12
90011d5c:	f10e 3eff 	add.w	lr, lr, #4294967295
90011d60:	f04f 0801 	mov.w	r8, #1
90011d64:	e7e3      	b.n	90011d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90011d66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90011d68:	4450      	add	r0, sl
90011d6a:	ee37 7a24 	vadd.f32	s14, s14, s9
90011d6e:	4431      	add	r1, r6
90011d70:	ee77 7a84 	vadd.f32	s15, s15, s8
90011d74:	ee76 6aa3 	vadd.f32	s13, s13, s7
90011d78:	4541      	cmp	r1, r8
90011d7a:	db08      	blt.n	90011d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90011d7c:	ee76 6a85 	vadd.f32	s13, s13, s10
90011d80:	3001      	adds	r0, #1
90011d82:	ee37 7a25 	vadd.f32	s14, s14, s11
90011d86:	eba1 0108 	sub.w	r1, r1, r8
90011d8a:	ee77 7a86 	vadd.f32	s15, s15, s12
90011d8e:	3f01      	subs	r7, #1
90011d90:	f04f 0901 	mov.w	r9, #1
90011d94:	e79e      	b.n	90011cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90011d96:	449c      	add	ip, r3
90011d98:	1aff      	subs	r7, r7, r3
90011d9a:	f1b8 0f00 	cmp.w	r8, #0
90011d9e:	d009      	beq.n	90011db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90011da0:	9019      	str	r0, [sp, #100]	; 0x64
90011da2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90011da6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90011daa:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90011dae:	911d      	str	r1, [sp, #116]	; 0x74
90011db0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90011db4:	1ad2      	subs	r2, r2, r3
90011db6:	e6b5      	b.n	90011b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011dba:	681b      	ldr	r3, [r3, #0]
90011dbc:	b923      	cbnz	r3, 90011dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011dbe:	4b04      	ldr	r3, [pc, #16]	; (90011dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90011dc0:	6818      	ldr	r0, [r3, #0]
90011dc2:	6803      	ldr	r3, [r0, #0]
90011dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011dc6:	4798      	blx	r3
90011dc8:	b05b      	add	sp, #364	; 0x16c
90011dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011dce:	bf00      	nop
90011dd0:	2402620c 	.word	0x2402620c

90011dd4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90011dd4:	b570      	push	{r4, r5, r6, lr}
90011dd6:	4604      	mov	r4, r0
90011dd8:	2500      	movs	r5, #0
90011dda:	9805      	ldr	r0, [sp, #20]
90011ddc:	f89d 601c 	ldrb.w	r6, [sp, #28]
90011de0:	6061      	str	r1, [r4, #4]
90011de2:	8263      	strh	r3, [r4, #18]
90011de4:	f89d 1010 	ldrb.w	r1, [sp, #16]
90011de8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90011dec:	8025      	strh	r5, [r4, #0]
90011dee:	7221      	strb	r1, [r4, #8]
90011df0:	7266      	strb	r6, [r4, #9]
90011df2:	60e0      	str	r0, [r4, #12]
90011df4:	8222      	strh	r2, [r4, #16]
90011df6:	82a3      	strh	r3, [r4, #20]
90011df8:	82e5      	strh	r5, [r4, #22]
90011dfa:	8325      	strh	r5, [r4, #24]
90011dfc:	8365      	strh	r5, [r4, #26]
90011dfe:	83a5      	strh	r5, [r4, #28]
90011e00:	83e5      	strh	r5, [r4, #30]
90011e02:	8425      	strh	r5, [r4, #32]
90011e04:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90011e08:	b32e      	cbz	r6, 90011e56 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011e0a:	6803      	ldr	r3, [r0, #0]
90011e0c:	695b      	ldr	r3, [r3, #20]
90011e0e:	4798      	blx	r3
90011e10:	4606      	mov	r6, r0
90011e12:	b300      	cbz	r0, 90011e56 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011e14:	68e0      	ldr	r0, [r4, #12]
90011e16:	4631      	mov	r1, r6
90011e18:	6803      	ldr	r3, [r0, #0]
90011e1a:	68db      	ldr	r3, [r3, #12]
90011e1c:	4798      	blx	r3
90011e1e:	4605      	mov	r5, r0
90011e20:	b1c8      	cbz	r0, 90011e56 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011e22:	7b43      	ldrb	r3, [r0, #13]
90011e24:	7a82      	ldrb	r2, [r0, #10]
90011e26:	005b      	lsls	r3, r3, #1
90011e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
90011e2c:	4313      	orrs	r3, r2
90011e2e:	8423      	strh	r3, [r4, #32]
90011e30:	7a63      	ldrb	r3, [r4, #9]
90011e32:	2b06      	cmp	r3, #6
90011e34:	d10f      	bne.n	90011e56 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011e36:	68e0      	ldr	r0, [r4, #12]
90011e38:	462a      	mov	r2, r5
90011e3a:	4631      	mov	r1, r6
90011e3c:	6803      	ldr	r3, [r0, #0]
90011e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011e40:	4798      	blx	r3
90011e42:	7b6b      	ldrb	r3, [r5, #13]
90011e44:	005b      	lsls	r3, r3, #1
90011e46:	f403 7280 	and.w	r2, r3, #256	; 0x100
90011e4a:	7aab      	ldrb	r3, [r5, #10]
90011e4c:	4313      	orrs	r3, r2
90011e4e:	4418      	add	r0, r3
90011e50:	8c23      	ldrh	r3, [r4, #32]
90011e52:	4418      	add	r0, r3
90011e54:	8420      	strh	r0, [r4, #32]
90011e56:	4620      	mov	r0, r4
90011e58:	bd70      	pop	{r4, r5, r6, pc}

90011e5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90011e5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011e5e:	2400      	movs	r4, #0
90011e60:	b085      	sub	sp, #20
90011e62:	4681      	mov	r9, r0
90011e64:	4688      	mov	r8, r1
90011e66:	4692      	mov	sl, r2
90011e68:	469b      	mov	fp, r3
90011e6a:	4627      	mov	r7, r4
90011e6c:	4625      	mov	r5, r4
90011e6e:	4626      	mov	r6, r4
90011e70:	4554      	cmp	r4, sl
90011e72:	da2a      	bge.n	90011eca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e74:	2300      	movs	r3, #0
90011e76:	9303      	str	r3, [sp, #12]
90011e78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011e7c:	429d      	cmp	r5, r3
90011e7e:	d004      	beq.n	90011e8a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90011e80:	f242 030b 	movw	r3, #8203	; 0x200b
90011e84:	429d      	cmp	r5, r3
90011e86:	bf18      	it	ne
90011e88:	462f      	movne	r7, r5
90011e8a:	ab03      	add	r3, sp, #12
90011e8c:	4642      	mov	r2, r8
90011e8e:	4659      	mov	r1, fp
90011e90:	4648      	mov	r0, r9
90011e92:	f002 ff23 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90011e96:	4605      	mov	r5, r0
90011e98:	b1b8      	cbz	r0, 90011eca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e9a:	280a      	cmp	r0, #10
90011e9c:	d015      	beq.n	90011eca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e9e:	9a03      	ldr	r2, [sp, #12]
90011ea0:	b18a      	cbz	r2, 90011ec6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90011ea2:	7b50      	ldrb	r0, [r2, #13]
90011ea4:	4639      	mov	r1, r7
90011ea6:	7a93      	ldrb	r3, [r2, #10]
90011ea8:	0040      	lsls	r0, r0, #1
90011eaa:	8895      	ldrh	r5, [r2, #4]
90011eac:	f400 7080 	and.w	r0, r0, #256	; 0x100
90011eb0:	4303      	orrs	r3, r0
90011eb2:	4640      	mov	r0, r8
90011eb4:	9301      	str	r3, [sp, #4]
90011eb6:	f8d8 3000 	ldr.w	r3, [r8]
90011eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011ebc:	4798      	blx	r3
90011ebe:	9b01      	ldr	r3, [sp, #4]
90011ec0:	4418      	add	r0, r3
90011ec2:	4406      	add	r6, r0
90011ec4:	b2b6      	uxth	r6, r6
90011ec6:	3401      	adds	r4, #1
90011ec8:	e7d2      	b.n	90011e70 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90011eca:	4630      	mov	r0, r6
90011ecc:	b005      	add	sp, #20
90011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90011ed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90011ed2:	2a02      	cmp	r2, #2
90011ed4:	b530      	push	{r4, r5, lr}
90011ed6:	d011      	beq.n	90011efc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90011ed8:	2a03      	cmp	r2, #3
90011eda:	d01c      	beq.n	90011f16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90011edc:	2a01      	cmp	r2, #1
90011ede:	d10c      	bne.n	90011efa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90011ee0:	888b      	ldrh	r3, [r1, #4]
90011ee2:	8801      	ldrh	r1, [r0, #0]
90011ee4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90011ee8:	1a5b      	subs	r3, r3, r1
90011eea:	8844      	ldrh	r4, [r0, #2]
90011eec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90011ef0:	1a9b      	subs	r3, r3, r2
90011ef2:	8004      	strh	r4, [r0, #0]
90011ef4:	8081      	strh	r1, [r0, #4]
90011ef6:	8043      	strh	r3, [r0, #2]
90011ef8:	80c2      	strh	r2, [r0, #6]
90011efa:	bd30      	pop	{r4, r5, pc}
90011efc:	88cb      	ldrh	r3, [r1, #6]
90011efe:	8842      	ldrh	r2, [r0, #2]
90011f00:	1a9b      	subs	r3, r3, r2
90011f02:	88c2      	ldrh	r2, [r0, #6]
90011f04:	1a9b      	subs	r3, r3, r2
90011f06:	888a      	ldrh	r2, [r1, #4]
90011f08:	8801      	ldrh	r1, [r0, #0]
90011f0a:	8043      	strh	r3, [r0, #2]
90011f0c:	1a52      	subs	r2, r2, r1
90011f0e:	8881      	ldrh	r1, [r0, #4]
90011f10:	1a52      	subs	r2, r2, r1
90011f12:	8002      	strh	r2, [r0, #0]
90011f14:	e7f1      	b.n	90011efa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90011f16:	88cb      	ldrh	r3, [r1, #6]
90011f18:	8841      	ldrh	r1, [r0, #2]
90011f1a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90011f1e:	1a5b      	subs	r3, r3, r1
90011f20:	f9b0 5000 	ldrsh.w	r5, [r0]
90011f24:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90011f28:	1a9b      	subs	r3, r3, r2
90011f2a:	8045      	strh	r5, [r0, #2]
90011f2c:	8082      	strh	r2, [r0, #4]
90011f2e:	8003      	strh	r3, [r0, #0]
90011f30:	80c4      	strh	r4, [r0, #6]
90011f32:	e7e2      	b.n	90011efa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90011f34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90011f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011f38:	b09f      	sub	sp, #124	; 0x7c
90011f3a:	9116      	str	r1, [sp, #88]	; 0x58
90011f3c:	9317      	str	r3, [sp, #92]	; 0x5c
90011f3e:	9929      	ldr	r1, [sp, #164]	; 0xa4
90011f40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90011f42:	8809      	ldrh	r1, [r1, #0]
90011f44:	889b      	ldrh	r3, [r3, #4]
90011f46:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90011f4a:	440b      	add	r3, r1
90011f4c:	9212      	str	r2, [sp, #72]	; 0x48
90011f4e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90011f52:	b21b      	sxth	r3, r3
90011f54:	9011      	str	r0, [sp, #68]	; 0x44
90011f56:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90011f5a:	9310      	str	r3, [sp, #64]	; 0x40
90011f5c:	f8d8 3000 	ldr.w	r3, [r8]
90011f60:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90011f64:	7b19      	ldrb	r1, [r3, #12]
90011f66:	7adb      	ldrb	r3, [r3, #11]
90011f68:	9114      	str	r1, [sp, #80]	; 0x50
90011f6a:	9315      	str	r3, [sp, #84]	; 0x54
90011f6c:	2a00      	cmp	r2, #0
90011f6e:	d06a      	beq.n	90012046 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90011f70:	f898 3010 	ldrb.w	r3, [r8, #16]
90011f74:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90011f76:	2b06      	cmp	r3, #6
90011f78:	bf14      	ite	ne
90011f7a:	2301      	movne	r3, #1
90011f7c:	2302      	moveq	r3, #2
90011f7e:	4413      	add	r3, r2
90011f80:	f04f 0900 	mov.w	r9, #0
90011f84:	930f      	str	r3, [sp, #60]	; 0x3c
90011f86:	464c      	mov	r4, r9
90011f88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90011f8c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90011f90:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90011f94:	4293      	cmp	r3, r2
90011f96:	f280 808f 	bge.w	900120b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90011f9a:	2300      	movs	r3, #0
90011f9c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90011fa0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90011fa4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011fa8:	429c      	cmp	r4, r3
90011faa:	d006      	beq.n	90011fba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90011fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011fae:	f242 020b 	movw	r2, #8203	; 0x200b
90011fb2:	4294      	cmp	r4, r2
90011fb4:	bf18      	it	ne
90011fb6:	4623      	movne	r3, r4
90011fb8:	930d      	str	r3, [sp, #52]	; 0x34
90011fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90011fbc:	992d      	ldr	r1, [sp, #180]	; 0xb4
90011fbe:	f8d8 2000 	ldr.w	r2, [r8]
90011fc2:	428b      	cmp	r3, r1
90011fc4:	db41      	blt.n	9001204a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90011fc6:	6813      	ldr	r3, [r2, #0]
90011fc8:	4610      	mov	r0, r2
90011fca:	695b      	ldr	r3, [r3, #20]
90011fcc:	4798      	blx	r3
90011fce:	4604      	mov	r4, r0
90011fd0:	f8d8 0000 	ldr.w	r0, [r8]
90011fd4:	aa1d      	add	r2, sp, #116	; 0x74
90011fd6:	4621      	mov	r1, r4
90011fd8:	6803      	ldr	r3, [r0, #0]
90011fda:	689d      	ldr	r5, [r3, #8]
90011fdc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90011fe0:	47a8      	blx	r5
90011fe2:	901c      	str	r0, [sp, #112]	; 0x70
90011fe4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011fe8:	429c      	cmp	r4, r3
90011fea:	f000 80ec 	beq.w	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90011fee:	f242 030b 	movw	r3, #8203	; 0x200b
90011ff2:	429c      	cmp	r4, r3
90011ff4:	f000 80e7 	beq.w	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90011ff8:	2c00      	cmp	r4, #0
90011ffa:	f000 80f9 	beq.w	900121f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90011ffe:	2c0a      	cmp	r4, #10
90012000:	d060      	beq.n	900120c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90012002:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90012004:	b36a      	cbz	r2, 90012062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90012006:	8894      	ldrh	r4, [r2, #4]
90012008:	f1bb 0f00 	cmp.w	fp, #0
9001200c:	d03b      	beq.n	90012086 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
9001200e:	f892 900d 	ldrb.w	r9, [r2, #13]
90012012:	f1bb 0f01 	cmp.w	fp, #1
90012016:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001201a:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001201e:	f892 900a 	ldrb.w	r9, [r2, #10]
90012022:	ea49 0903 	orr.w	r9, r9, r3
90012026:	d134      	bne.n	90012092 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90012028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001202a:	eba6 0609 	sub.w	r6, r6, r9
9001202e:	2b00      	cmp	r3, #0
90012030:	d14f      	bne.n	900120d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90012032:	9a14      	ldr	r2, [sp, #80]	; 0x50
90012034:	eb09 0306 	add.w	r3, r9, r6
90012038:	4413      	add	r3, r2
9001203a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001203c:	f9b2 2000 	ldrsh.w	r2, [r2]
90012040:	4293      	cmp	r3, r2
90012042:	da51      	bge.n	900120e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90012044:	e038      	b.n	900120b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90012046:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90012048:	e79a      	b.n	90011f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
9001204a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001204e:	4659      	mov	r1, fp
90012050:	982c      	ldr	r0, [sp, #176]	; 0xb0
90012052:	9301      	str	r3, [sp, #4]
90012054:	ab1d      	add	r3, sp, #116	; 0x74
90012056:	9300      	str	r3, [sp, #0]
90012058:	ab1c      	add	r3, sp, #112	; 0x70
9001205a:	f002 fe88 	bl	90014d6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
9001205e:	4604      	mov	r4, r0
90012060:	e7c0      	b.n	90011fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90012062:	f8d8 0000 	ldr.w	r0, [r8]
90012066:	6803      	ldr	r3, [r0, #0]
90012068:	691b      	ldr	r3, [r3, #16]
9001206a:	4798      	blx	r3
9001206c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90012070:	4298      	cmp	r0, r3
90012072:	f000 80a8 	beq.w	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012076:	f242 030b 	movw	r3, #8203	; 0x200b
9001207a:	4298      	cmp	r0, r3
9001207c:	f000 80a3 	beq.w	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012080:	f1bb 0f00 	cmp.w	fp, #0
90012084:	d100      	bne.n	90012088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90012086:	444e      	add	r6, r9
90012088:	9a1c      	ldr	r2, [sp, #112]	; 0x70
9001208a:	2a00      	cmp	r2, #0
9001208c:	d1bf      	bne.n	9001200e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
9001208e:	4691      	mov	r9, r2
90012090:	e099      	b.n	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012094:	2b00      	cmp	r3, #0
90012096:	f000 80ad 	beq.w	900121f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
9001209a:	f1bb 0f00 	cmp.w	fp, #0
9001209e:	d118      	bne.n	900120d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900120a0:	f8d8 0000 	ldr.w	r0, [r8]
900120a4:	990d      	ldr	r1, [sp, #52]	; 0x34
900120a6:	6803      	ldr	r3, [r0, #0]
900120a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900120aa:	4798      	blx	r3
900120ac:	4406      	add	r6, r0
900120ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
900120b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
900120b2:	1af3      	subs	r3, r6, r3
900120b4:	4293      	cmp	r3, r2
900120b6:	dd17      	ble.n	900120e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900120b8:	2c00      	cmp	r4, #0
900120ba:	f000 8099 	beq.w	900121f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900120be:	2c0a      	cmp	r4, #10
900120c0:	f040 8087 	bne.w	900121d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
900120c4:	240a      	movs	r4, #10
900120c6:	fab4 f084 	clz	r0, r4
900120ca:	0940      	lsrs	r0, r0, #5
900120cc:	b01f      	add	sp, #124	; 0x7c
900120ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900120d2:	f8d8 0000 	ldr.w	r0, [r8]
900120d6:	990d      	ldr	r1, [sp, #52]	; 0x34
900120d8:	6803      	ldr	r3, [r0, #0]
900120da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900120dc:	4798      	blx	r3
900120de:	f1bb 0f01 	cmp.w	fp, #1
900120e2:	eba6 0600 	sub.w	r6, r6, r0
900120e6:	d0a4      	beq.n	90012032 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
900120e8:	981c      	ldr	r0, [sp, #112]	; 0x70
900120ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900120ec:	f990 1009 	ldrsb.w	r1, [r0, #9]
900120f0:	f9b3 7000 	ldrsh.w	r7, [r3]
900120f4:	7b43      	ldrb	r3, [r0, #13]
900120f6:	4431      	add	r1, r6
900120f8:	015b      	lsls	r3, r3, #5
900120fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
900120fe:	7983      	ldrb	r3, [r0, #6]
90012100:	4313      	orrs	r3, r2
90012102:	440b      	add	r3, r1
90012104:	42bb      	cmp	r3, r7
90012106:	db5e      	blt.n	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012108:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001210a:	4299      	cmp	r1, r3
9001210c:	da5b      	bge.n	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001210e:	f8d8 0000 	ldr.w	r0, [r8]
90012112:	42b7      	cmp	r7, r6
90012114:	6803      	ldr	r3, [r0, #0]
90012116:	bfcc      	ite	gt
90012118:	1bbf      	subgt	r7, r7, r6
9001211a:	2700      	movle	r7, #0
9001211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001211e:	bfc8      	it	gt
90012120:	b2bf      	uxthgt	r7, r7
90012122:	4798      	blx	r3
90012124:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90012126:	7b5a      	ldrb	r2, [r3, #13]
90012128:	00d1      	lsls	r1, r2, #3
9001212a:	f401 7580 	and.w	r5, r1, #256	; 0x100
9001212e:	7a19      	ldrb	r1, [r3, #8]
90012130:	4329      	orrs	r1, r5
90012132:	0655      	lsls	r5, r2, #25
90012134:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90012136:	bf48      	it	mi
90012138:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
9001213c:	4405      	add	r5, r0
9001213e:	bf48      	it	mi
90012140:	b209      	sxthmi	r1, r1
90012142:	1a6d      	subs	r5, r5, r1
90012144:	9929      	ldr	r1, [sp, #164]	; 0xa4
90012146:	b2ad      	uxth	r5, r5
90012148:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
9001214c:	fa0f fa85 	sxth.w	sl, r5
90012150:	4551      	cmp	r1, sl
90012152:	dd3c      	ble.n	900121ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90012154:	0112      	lsls	r2, r2, #4
90012156:	79d8      	ldrb	r0, [r3, #7]
90012158:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001215c:	4302      	orrs	r2, r0
9001215e:	4492      	add	sl, r2
90012160:	4551      	cmp	r1, sl
90012162:	dc30      	bgt.n	900121c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012164:	1b4d      	subs	r5, r1, r5
90012166:	468a      	mov	sl, r1
90012168:	b22d      	sxth	r5, r5
9001216a:	9319      	str	r3, [sp, #100]	; 0x64
9001216c:	b2ad      	uxth	r5, r5
9001216e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90012170:	f8d8 0000 	ldr.w	r0, [r8]
90012174:	681a      	ldr	r2, [r3, #0]
90012176:	6801      	ldr	r1, [r0, #0]
90012178:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
9001217a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001217c:	9313      	str	r3, [sp, #76]	; 0x4c
9001217e:	9218      	str	r2, [sp, #96]	; 0x60
90012180:	6c09      	ldr	r1, [r1, #64]	; 0x40
90012182:	4788      	blx	r1
90012184:	f898 1006 	ldrb.w	r1, [r8, #6]
90012188:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001218a:	910b      	str	r1, [sp, #44]	; 0x2c
9001218c:	f898 100e 	ldrb.w	r1, [r8, #14]
90012190:	9a18      	ldr	r2, [sp, #96]	; 0x60
90012192:	910a      	str	r1, [sp, #40]	; 0x28
90012194:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90012198:	9109      	str	r1, [sp, #36]	; 0x24
9001219a:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001219e:	9305      	str	r3, [sp, #20]
900121a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900121a2:	9206      	str	r2, [sp, #24]
900121a4:	9304      	str	r3, [sp, #16]
900121a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900121a8:	f8cd a004 	str.w	sl, [sp, #4]
900121ac:	e9cd 7502 	strd	r7, r5, [sp, #8]
900121b0:	4437      	add	r7, r6
900121b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900121b4:	b23f      	sxth	r7, r7
900121b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
900121ba:	9700      	str	r7, [sp, #0]
900121bc:	9916      	ldr	r1, [sp, #88]	; 0x58
900121be:	681a      	ldr	r2, [r3, #0]
900121c0:	9811      	ldr	r0, [sp, #68]	; 0x44
900121c2:	685b      	ldr	r3, [r3, #4]
900121c4:	47a8      	blx	r5
900121c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900121c8:	3301      	adds	r3, #1
900121ca:	930e      	str	r3, [sp, #56]	; 0x38
900121cc:	e6e0      	b.n	90011f90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
900121ce:	2500      	movs	r5, #0
900121d0:	e7cb      	b.n	9001216a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
900121d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900121d4:	3501      	adds	r5, #1
900121d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900121d8:	429d      	cmp	r5, r3
900121da:	f6bf af74 	bge.w	900120c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900121de:	4659      	mov	r1, fp
900121e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
900121e2:	f7f3 fb09 	bl	900057f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900121e6:	4604      	mov	r4, r0
900121e8:	b110      	cbz	r0, 900121f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900121ea:	280a      	cmp	r0, #10
900121ec:	d1f2      	bne.n	900121d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
900121ee:	e769      	b.n	900120c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900121f0:	2400      	movs	r4, #0
900121f2:	e768      	b.n	900120c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900121f4:	f1bb 0f00 	cmp.w	fp, #0
900121f8:	f43f af59 	beq.w	900120ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
900121fc:	e774      	b.n	900120e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

900121fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
900121fe:	b530      	push	{r4, r5, lr}
90012200:	8ac4      	ldrh	r4, [r0, #22]
90012202:	8b45      	ldrh	r5, [r0, #26]
90012204:	8343      	strh	r3, [r0, #26]
90012206:	442c      	add	r4, r5
90012208:	1ae4      	subs	r4, r4, r3
9001220a:	8b83      	ldrh	r3, [r0, #28]
9001220c:	82c4      	strh	r4, [r0, #22]
9001220e:	8b04      	ldrh	r4, [r0, #24]
90012210:	4422      	add	r2, r4
90012212:	440c      	add	r4, r1
90012214:	1a59      	subs	r1, r3, r1
90012216:	83c2      	strh	r2, [r0, #30]
90012218:	8304      	strh	r4, [r0, #24]
9001221a:	8381      	strh	r1, [r0, #28]
9001221c:	bd30      	pop	{r4, r5, pc}

9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001221e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012222:	4604      	mov	r4, r0
90012224:	8a47      	ldrh	r7, [r0, #18]
90012226:	68c0      	ldr	r0, [r0, #12]
90012228:	b085      	sub	sp, #20
9001222a:	6803      	ldr	r3, [r0, #0]
9001222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001222e:	4798      	blx	r3
90012230:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90012234:	7a63      	ldrb	r3, [r4, #9]
90012236:	eb06 0640 	add.w	r6, r6, r0, lsl #1
9001223a:	3b01      	subs	r3, #1
9001223c:	42b7      	cmp	r7, r6
9001223e:	bfac      	ite	ge
90012240:	f04f 0900 	movge.w	r9, #0
90012244:	f04f 0901 	movlt.w	r9, #1
90012248:	2b05      	cmp	r3, #5
9001224a:	d804      	bhi.n	90012256 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
9001224c:	e8df f003 	tbb	[pc, r3]
90012250:	470f0854 	.word	0x470f0854
90012254:	4c4c      	.short	0x4c4c
90012256:	2500      	movs	r5, #0
90012258:	46a9      	mov	r9, r5
9001225a:	462e      	mov	r6, r5
9001225c:	462f      	mov	r7, r5
9001225e:	e00e      	b.n	9001227e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90012260:	42b7      	cmp	r7, r6
90012262:	f04f 0500 	mov.w	r5, #0
90012266:	bfb4      	ite	lt
90012268:	2600      	movlt	r6, #0
9001226a:	2601      	movge	r6, #1
9001226c:	e7f6      	b.n	9001225c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001226e:	42b7      	cmp	r7, r6
90012270:	464d      	mov	r5, r9
90012272:	f04f 0900 	mov.w	r9, #0
90012276:	bfb4      	ite	lt
90012278:	2600      	movlt	r6, #0
9001227a:	2601      	movge	r6, #1
9001227c:	464f      	mov	r7, r9
9001227e:	f04f 0800 	mov.w	r8, #0
90012282:	f8a4 8016 	strh.w	r8, [r4, #22]
90012286:	f8a4 8018 	strh.w	r8, [r4, #24]
9001228a:	f8cd 8004 	str.w	r8, [sp, #4]
9001228e:	2300      	movs	r3, #0
90012290:	9303      	str	r3, [sp, #12]
90012292:	8823      	ldrh	r3, [r4, #0]
90012294:	2b20      	cmp	r3, #32
90012296:	d033      	beq.n	90012300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90012298:	f242 010b 	movw	r1, #8203	; 0x200b
9001229c:	1a5a      	subs	r2, r3, r1
9001229e:	f1d2 0a00 	rsbs	sl, r2, #0
900122a2:	eb4a 0a02 	adc.w	sl, sl, r2
900122a6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900122aa:	4293      	cmp	r3, r2
900122ac:	d008      	beq.n	900122c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900122ae:	428b      	cmp	r3, r1
900122b0:	9a01      	ldr	r2, [sp, #4]
900122b2:	bf0e      	itee	eq
900122b4:	f04f 0a01 	moveq.w	sl, #1
900122b8:	461a      	movne	r2, r3
900122ba:	f04f 0a00 	movne.w	sl, #0
900122be:	9201      	str	r2, [sp, #4]
900122c0:	ab03      	add	r3, sp, #12
900122c2:	68e2      	ldr	r2, [r4, #12]
900122c4:	7a21      	ldrb	r1, [r4, #8]
900122c6:	6860      	ldr	r0, [r4, #4]
900122c8:	f002 fd08 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900122cc:	8020      	strh	r0, [r4, #0]
900122ce:	b9d8      	cbnz	r0, 90012308 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
900122d0:	8ba2      	ldrh	r2, [r4, #28]
900122d2:	2300      	movs	r3, #0
900122d4:	4611      	mov	r1, r2
900122d6:	4620      	mov	r0, r4
900122d8:	f7ff ff91 	bl	900121fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900122dc:	e06e      	b.n	900123bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900122de:	2500      	movs	r5, #0
900122e0:	2701      	movs	r7, #1
900122e2:	46a9      	mov	r9, r5
900122e4:	462e      	mov	r6, r5
900122e6:	e7ca      	b.n	9001227e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900122e8:	42b7      	cmp	r7, r6
900122ea:	f04f 0500 	mov.w	r5, #0
900122ee:	bfb4      	ite	lt
900122f0:	2700      	movlt	r7, #0
900122f2:	2701      	movge	r7, #1
900122f4:	462e      	mov	r6, r5
900122f6:	e7c2      	b.n	9001227e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900122f8:	2500      	movs	r5, #0
900122fa:	2601      	movs	r6, #1
900122fc:	46a9      	mov	r9, r5
900122fe:	e7ad      	b.n	9001225c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90012300:	9301      	str	r3, [sp, #4]
90012302:	f04f 0a01 	mov.w	sl, #1
90012306:	e7db      	b.n	900122c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90012308:	8b63      	ldrh	r3, [r4, #26]
9001230a:	280a      	cmp	r0, #10
9001230c:	f103 0301 	add.w	r3, r3, #1
90012310:	8363      	strh	r3, [r4, #26]
90012312:	d0dd      	beq.n	900122d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90012314:	9a03      	ldr	r2, [sp, #12]
90012316:	bb62      	cbnz	r2, 90012372 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90012318:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001231c:	4298      	cmp	r0, r3
9001231e:	d003      	beq.n	90012328 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90012320:	f242 030b 	movw	r3, #8203	; 0x200b
90012324:	4298      	cmp	r0, r3
90012326:	d1b2      	bne.n	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012328:	8823      	ldrh	r3, [r4, #0]
9001232a:	8ba1      	ldrh	r1, [r4, #28]
9001232c:	2b20      	cmp	r3, #32
9001232e:	d003      	beq.n	90012338 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
90012330:	f242 000b 	movw	r0, #8203	; 0x200b
90012334:	4283      	cmp	r3, r0
90012336:	d131      	bne.n	9001239c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90012338:	f1ba 0f00 	cmp.w	sl, #0
9001233c:	bf0a      	itet	eq
9001233e:	4688      	moveq	r8, r1
90012340:	4650      	movne	r0, sl
90012342:	2001      	moveq	r0, #1
90012344:	440a      	add	r2, r1
90012346:	8b23      	ldrh	r3, [r4, #24]
90012348:	f8b4 c010 	ldrh.w	ip, [r4, #16]
9001234c:	b292      	uxth	r2, r2
9001234e:	83a2      	strh	r2, [r4, #28]
90012350:	4413      	add	r3, r2
90012352:	f1b9 0f00 	cmp.w	r9, #0
90012356:	d102      	bne.n	9001235e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90012358:	2d00      	cmp	r5, #0
9001235a:	d042      	beq.n	900123e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
9001235c:	b300      	cbz	r0, 900123a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
9001235e:	8c21      	ldrh	r1, [r4, #32]
90012360:	4419      	add	r1, r3
90012362:	458c      	cmp	ip, r1
90012364:	da37      	bge.n	900123d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90012366:	8ae1      	ldrh	r1, [r4, #22]
90012368:	2900      	cmp	r1, #0
9001236a:	d034      	beq.n	900123d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
9001236c:	4563      	cmp	r3, ip
9001236e:	dd8e      	ble.n	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012370:	e01d      	b.n	900123ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
90012372:	8893      	ldrh	r3, [r2, #4]
90012374:	9901      	ldr	r1, [sp, #4]
90012376:	8023      	strh	r3, [r4, #0]
90012378:	f892 b00d 	ldrb.w	fp, [r2, #13]
9001237c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90012380:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90012384:	f892 b00a 	ldrb.w	fp, [r2, #10]
90012388:	ea4b 0b00 	orr.w	fp, fp, r0
9001238c:	68e0      	ldr	r0, [r4, #12]
9001238e:	6803      	ldr	r3, [r0, #0]
90012390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90012392:	4798      	blx	r3
90012394:	eb0b 0200 	add.w	r2, fp, r0
90012398:	b292      	uxth	r2, r2
9001239a:	e7c5      	b.n	90012328 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001239c:	2000      	movs	r0, #0
9001239e:	e7d1      	b.n	90012344 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
900123a0:	4563      	cmp	r3, ip
900123a2:	f77f af74 	ble.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123a6:	8ae3      	ldrh	r3, [r4, #22]
900123a8:	2b00      	cmp	r3, #0
900123aa:	f43f af70 	beq.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123ae:	2301      	movs	r3, #1
900123b0:	8c22      	ldrh	r2, [r4, #32]
900123b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
900123b6:	8be3      	ldrh	r3, [r4, #30]
900123b8:	4413      	add	r3, r2
900123ba:	83e3      	strh	r3, [r4, #30]
900123bc:	68e0      	ldr	r0, [r4, #12]
900123be:	6803      	ldr	r3, [r0, #0]
900123c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900123c2:	4798      	blx	r3
900123c4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
900123c8:	4418      	add	r0, r3
900123ca:	8a63      	ldrh	r3, [r4, #18]
900123cc:	1a18      	subs	r0, r3, r0
900123ce:	8260      	strh	r0, [r4, #18]
900123d0:	b005      	add	sp, #20
900123d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900123d6:	2300      	movs	r3, #0
900123d8:	4611      	mov	r1, r2
900123da:	4620      	mov	r0, r4
900123dc:	f7ff ff0f 	bl	900121fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900123e0:	e755      	b.n	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123e2:	4563      	cmp	r3, ip
900123e4:	dd14      	ble.n	90012410 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
900123e6:	b117      	cbz	r7, 900123ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
900123e8:	2301      	movs	r3, #1
900123ea:	460a      	mov	r2, r1
900123ec:	e772      	b.n	900122d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
900123ee:	2e00      	cmp	r6, #0
900123f0:	f43f af4d 	beq.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123f4:	2800      	cmp	r0, #0
900123f6:	f47f af4a 	bne.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123fa:	f1ba 0f00 	cmp.w	sl, #0
900123fe:	d002      	beq.n	90012406 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
90012400:	2301      	movs	r3, #1
90012402:	4642      	mov	r2, r8
90012404:	e767      	b.n	900122d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90012406:	8ae3      	ldrh	r3, [r4, #22]
90012408:	2b00      	cmp	r3, #0
9001240a:	f43f af40 	beq.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001240e:	e7d5      	b.n	900123bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90012410:	2800      	cmp	r0, #0
90012412:	f47f af3c 	bne.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012416:	f1ba 0f00 	cmp.w	sl, #0
9001241a:	f43f af38 	beq.w	9001228e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001241e:	2301      	movs	r3, #1
90012420:	4642      	mov	r2, r8
90012422:	e7da      	b.n	900123da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90012424 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90012424:	b5f0      	push	{r4, r5, r6, r7, lr}
90012426:	4605      	mov	r5, r0
90012428:	b08f      	sub	sp, #60	; 0x3c
9001242a:	4617      	mov	r7, r2
9001242c:	461c      	mov	r4, r3
9001242e:	460e      	mov	r6, r1
90012430:	b1d1      	cbz	r1, 90012468 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
90012432:	681b      	ldr	r3, [r3, #0]
90012434:	4620      	mov	r0, r4
90012436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012438:	4798      	blx	r3
9001243a:	4240      	negs	r0, r0
9001243c:	9603      	str	r6, [sp, #12]
9001243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90012442:	b200      	sxth	r0, r0
90012444:	9700      	str	r7, [sp, #0]
90012446:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001244a:	4629      	mov	r1, r5
9001244c:	e9cd 4001 	strd	r4, r0, [sp, #4]
90012450:	2401      	movs	r4, #1
90012452:	a805      	add	r0, sp, #20
90012454:	f7ff fcbe 	bl	90011dd4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90012458:	a805      	add	r0, sp, #20
9001245a:	f7ff fee0 	bl	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001245e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
90012462:	b163      	cbz	r3, 9001247e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
90012464:	3401      	adds	r4, #1
90012466:	e7f7      	b.n	90012458 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90012468:	2401      	movs	r4, #1
9001246a:	f002 fd03 	bl	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001246e:	280a      	cmp	r0, #10
90012470:	4628      	mov	r0, r5
90012472:	bf08      	it	eq
90012474:	3401      	addeq	r4, #1
90012476:	f002 fcfd 	bl	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001247a:	2800      	cmp	r0, #0
9001247c:	d1f7      	bne.n	9001246e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
9001247e:	b2a0      	uxth	r0, r4
90012480:	b00f      	add	sp, #60	; 0x3c
90012482:	bdf0      	pop	{r4, r5, r6, r7, pc}

90012484 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90012484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012488:	b0e3      	sub	sp, #396	; 0x18c
9001248a:	461c      	mov	r4, r3
9001248c:	4683      	mov	fp, r0
9001248e:	4688      	mov	r8, r1
90012490:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
90012492:	2b00      	cmp	r3, #0
90012494:	f000 810f 	beq.w	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012498:	6823      	ldr	r3, [r4, #0]
9001249a:	2b00      	cmp	r3, #0
9001249c:	f000 810b 	beq.w	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900124a0:	7ba3      	ldrb	r3, [r4, #14]
900124a2:	2b00      	cmp	r3, #0
900124a4:	f000 8107 	beq.w	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900124a8:	ad0a      	add	r5, sp, #40	; 0x28
900124aa:	6810      	ldr	r0, [r2, #0]
900124ac:	6851      	ldr	r1, [r2, #4]
900124ae:	462b      	mov	r3, r5
900124b0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
900124b4:	c303      	stmia	r3!, {r0, r1}
900124b6:	2100      	movs	r1, #0
900124b8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
900124bc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900124c0:	4628      	mov	r0, r5
900124c2:	910c      	str	r1, [sp, #48]	; 0x30
900124c4:	a90c      	add	r1, sp, #48	; 0x30
900124c6:	79a2      	ldrb	r2, [r4, #6]
900124c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900124cc:	f7ff fd01 	bl	90011ed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900124d0:	a90c      	add	r1, sp, #48	; 0x30
900124d2:	79a2      	ldrb	r2, [r4, #6]
900124d4:	4608      	mov	r0, r1
900124d6:	f7ff fcfc 	bl	90011ed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900124da:	a817      	add	r0, sp, #92	; 0x5c
900124dc:	f002 f8b6 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
900124e0:	6820      	ldr	r0, [r4, #0]
900124e2:	6803      	ldr	r3, [r0, #0]
900124e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900124e6:	4798      	blx	r3
900124e8:	4606      	mov	r6, r0
900124ea:	6820      	ldr	r0, [r4, #0]
900124ec:	6803      	ldr	r3, [r0, #0]
900124ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900124f0:	4798      	blx	r3
900124f2:	4633      	mov	r3, r6
900124f4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900124f6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900124f8:	9000      	str	r0, [sp, #0]
900124fa:	a817      	add	r0, sp, #92	; 0x5c
900124fc:	f002 f8f9 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90012500:	6820      	ldr	r0, [r4, #0]
90012502:	f894 a004 	ldrb.w	sl, [r4, #4]
90012506:	6803      	ldr	r3, [r0, #0]
90012508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001250a:	4798      	blx	r3
9001250c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
90012510:	6823      	ldr	r3, [r4, #0]
90012512:	4607      	mov	r7, r0
90012514:	4406      	add	r6, r0
90012516:	a830      	add	r0, sp, #192	; 0xc0
90012518:	f893 9009 	ldrb.w	r9, [r3, #9]
9001251c:	f002 f896 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
90012520:	7c23      	ldrb	r3, [r4, #16]
90012522:	b17b      	cbz	r3, 90012544 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90012524:	6820      	ldr	r0, [r4, #0]
90012526:	6803      	ldr	r3, [r0, #0]
90012528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001252a:	4798      	blx	r3
9001252c:	9009      	str	r0, [sp, #36]	; 0x24
9001252e:	6820      	ldr	r0, [r4, #0]
90012530:	6802      	ldr	r2, [r0, #0]
90012532:	6d12      	ldr	r2, [r2, #80]	; 0x50
90012534:	4790      	blx	r2
90012536:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012538:	9000      	str	r0, [sp, #0]
9001253a:	a830      	add	r0, sp, #192	; 0xc0
9001253c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
9001253e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90012540:	f002 f8d7 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90012544:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90012548:	a80e      	add	r0, sp, #56	; 0x38
9001254a:	7be2      	ldrb	r2, [r4, #15]
9001254c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90012550:	1a8a      	subs	r2, r1, r2
90012552:	7c21      	ldrb	r1, [r4, #16]
90012554:	9103      	str	r1, [sp, #12]
90012556:	b292      	uxth	r2, r2
90012558:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
9001255c:	9102      	str	r1, [sp, #8]
9001255e:	6821      	ldr	r1, [r4, #0]
90012560:	9101      	str	r1, [sp, #4]
90012562:	7961      	ldrb	r1, [r4, #5]
90012564:	9100      	str	r1, [sp, #0]
90012566:	a930      	add	r1, sp, #192	; 0xc0
90012568:	f7ff fc34 	bl	90011dd4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
9001256c:	2e00      	cmp	r6, #0
9001256e:	dc5b      	bgt.n	90012628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90012570:	af17      	add	r7, sp, #92	; 0x5c
90012572:	f04f 0900 	mov.w	r9, #0
90012576:	7c23      	ldrb	r3, [r4, #16]
90012578:	2b00      	cmp	r3, #0
9001257a:	f000 80ae 	beq.w	900126da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
9001257e:	a80e      	add	r0, sp, #56	; 0x38
90012580:	f7ff fe4d 	bl	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90012584:	f1ba 0f00 	cmp.w	sl, #0
90012588:	f000 80a2 	beq.w	900126d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
9001258c:	7c23      	ldrb	r3, [r4, #16]
9001258e:	2264      	movs	r2, #100	; 0x64
90012590:	4639      	mov	r1, r7
90012592:	a849      	add	r0, sp, #292	; 0x124
90012594:	9309      	str	r3, [sp, #36]	; 0x24
90012596:	f00f fd5e 	bl	90022056 <memcpy>
9001259a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001259c:	2b00      	cmp	r3, #0
9001259e:	f000 80a4 	beq.w	900126ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
900125a2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
900125a6:	7922      	ldrb	r2, [r4, #4]
900125a8:	2a01      	cmp	r2, #1
900125aa:	f040 8087 	bne.w	900126bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
900125ae:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
900125b2:	1ac0      	subs	r0, r0, r3
900125b4:	2302      	movs	r3, #2
900125b6:	fb90 f0f3 	sdiv	r0, r0, r3
900125ba:	b200      	sxth	r0, r0
900125bc:	7c23      	ldrb	r3, [r4, #16]
900125be:	2b00      	cmp	r3, #0
900125c0:	f000 8088 	beq.w	900126d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
900125c4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
900125c8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
900125cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900125d0:	e9cd 2105 	strd	r2, r1, [sp, #20]
900125d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
900125d8:	2100      	movs	r1, #0
900125da:	4410      	add	r0, r2
900125dc:	4642      	mov	r2, r8
900125de:	b200      	sxth	r0, r0
900125e0:	e9cd 9703 	strd	r9, r7, [sp, #12]
900125e4:	9000      	str	r0, [sp, #0]
900125e6:	4658      	mov	r0, fp
900125e8:	e9cd 5401 	strd	r5, r4, [sp, #4]
900125ec:	f7ff fca2 	bl	90011f34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
900125f0:	2800      	cmp	r0, #0
900125f2:	d160      	bne.n	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900125f4:	b2b2      	uxth	r2, r6
900125f6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
900125fa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900125fe:	4413      	add	r3, r2
90012600:	1a8a      	subs	r2, r1, r2
90012602:	b21b      	sxth	r3, r3
90012604:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90012608:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
9001260c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90012610:	2a00      	cmp	r2, #0
90012612:	d150      	bne.n	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012614:	6822      	ldr	r2, [r4, #0]
90012616:	8869      	ldrh	r1, [r5, #2]
90012618:	7a12      	ldrb	r2, [r2, #8]
9001261a:	1a9b      	subs	r3, r3, r2
9001261c:	88ea      	ldrh	r2, [r5, #6]
9001261e:	440a      	add	r2, r1
90012620:	b212      	sxth	r2, r2
90012622:	4293      	cmp	r3, r2
90012624:	dda7      	ble.n	90012576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90012626:	e046      	b.n	900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012628:	7c23      	ldrb	r3, [r4, #16]
9001262a:	444f      	add	r7, r9
9001262c:	b1c3      	cbz	r3, 90012660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
9001262e:	f64f 79ff 	movw	r9, #65535	; 0xffff
90012632:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012636:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
9001263a:	443b      	add	r3, r7
9001263c:	4293      	cmp	r3, r2
9001263e:	da97      	bge.n	90012570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90012640:	a80e      	add	r0, sp, #56	; 0x38
90012642:	f7ff fdec 	bl	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90012646:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
9001264a:	3b01      	subs	r3, #1
9001264c:	b29b      	uxth	r3, r3
9001264e:	454b      	cmp	r3, r9
90012650:	9309      	str	r3, [sp, #36]	; 0x24
90012652:	d021      	beq.n	90012698 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90012654:	7961      	ldrb	r1, [r4, #5]
90012656:	a817      	add	r0, sp, #92	; 0x5c
90012658:	f7f3 f8ce 	bl	900057f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001265c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001265e:	e7f4      	b.n	9001264a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90012660:	fa1f f986 	uxth.w	r9, r6
90012664:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012668:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
9001266c:	443b      	add	r3, r7
9001266e:	4293      	cmp	r3, r2
90012670:	f6bf af7e 	bge.w	90012570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90012674:	a817      	add	r0, sp, #92	; 0x5c
90012676:	f002 fbfd 	bl	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001267a:	b1e0      	cbz	r0, 900126b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001267c:	280a      	cmp	r0, #10
9001267e:	d1f1      	bne.n	90012664 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90012680:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90012684:	444b      	add	r3, r9
90012686:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001268a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001268e:	eba3 0309 	sub.w	r3, r3, r9
90012692:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90012696:	e7e5      	b.n	90012664 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90012698:	b2b3      	uxth	r3, r6
9001269a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001269e:	441a      	add	r2, r3
900126a0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
900126a4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
900126a8:	1ad3      	subs	r3, r2, r3
900126aa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900126ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900126b2:	2b00      	cmp	r3, #0
900126b4:	d1bd      	bne.n	90012632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
900126b6:	b063      	add	sp, #396	; 0x18c
900126b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900126bc:	2a02      	cmp	r2, #2
900126be:	d105      	bne.n	900126cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
900126c0:	7be2      	ldrb	r2, [r4, #15]
900126c2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900126c6:	1a80      	subs	r0, r0, r2
900126c8:	1ac0      	subs	r0, r0, r3
900126ca:	e776      	b.n	900125ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
900126cc:	2000      	movs	r0, #0
900126ce:	e775      	b.n	900125bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
900126d0:	7be0      	ldrb	r0, [r4, #15]
900126d2:	e773      	b.n	900125bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
900126d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
900126d8:	e776      	b.n	900125c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
900126da:	f1ba 0f00 	cmp.w	sl, #0
900126de:	d0f7      	beq.n	900126d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
900126e0:	2264      	movs	r2, #100	; 0x64
900126e2:	4639      	mov	r1, r7
900126e4:	a849      	add	r0, sp, #292	; 0x124
900126e6:	f00f fcb6 	bl	90022056 <memcpy>
900126ea:	2300      	movs	r3, #0
900126ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
900126f0:	6821      	ldr	r1, [r4, #0]
900126f2:	a849      	add	r0, sp, #292	; 0x124
900126f4:	f7ff fbb1 	bl	90011e5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
900126f8:	b203      	sxth	r3, r0
900126fa:	e754      	b.n	900125a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

900126fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
900126fc:	2b03      	cmp	r3, #3
900126fe:	d818      	bhi.n	90012732 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90012700:	e8df f003 	tbb	[pc, r3]
90012704:	130d0602 	.word	0x130d0602
90012708:	f9b0 2000 	ldrsh.w	r2, [r0]
9001270c:	1850      	adds	r0, r2, r1
9001270e:	4770      	bx	lr
90012710:	8803      	ldrh	r3, [r0, #0]
90012712:	8880      	ldrh	r0, [r0, #4]
90012714:	4418      	add	r0, r3
90012716:	b200      	sxth	r0, r0
90012718:	1a80      	subs	r0, r0, r2
9001271a:	3801      	subs	r0, #1
9001271c:	4770      	bx	lr
9001271e:	8803      	ldrh	r3, [r0, #0]
90012720:	8880      	ldrh	r0, [r0, #4]
90012722:	4418      	add	r0, r3
90012724:	b200      	sxth	r0, r0
90012726:	1a40      	subs	r0, r0, r1
90012728:	e7f7      	b.n	9001271a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
9001272a:	f9b0 0000 	ldrsh.w	r0, [r0]
9001272e:	4410      	add	r0, r2
90012730:	4770      	bx	lr
90012732:	2000      	movs	r0, #0
90012734:	4770      	bx	lr

90012736 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90012736:	2b03      	cmp	r3, #3
90012738:	d817      	bhi.n	9001276a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
9001273a:	e8df f003 	tbb	[pc, r3]
9001273e:	0602      	.short	0x0602
90012740:	1009      	.short	0x1009
90012742:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90012746:	1850      	adds	r0, r2, r1
90012748:	4770      	bx	lr
9001274a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
9001274e:	e7fa      	b.n	90012746 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90012750:	8843      	ldrh	r3, [r0, #2]
90012752:	88c0      	ldrh	r0, [r0, #6]
90012754:	4418      	add	r0, r3
90012756:	b200      	sxth	r0, r0
90012758:	1a80      	subs	r0, r0, r2
9001275a:	3801      	subs	r0, #1
9001275c:	4770      	bx	lr
9001275e:	8843      	ldrh	r3, [r0, #2]
90012760:	88c0      	ldrh	r0, [r0, #6]
90012762:	4418      	add	r0, r3
90012764:	b200      	sxth	r0, r0
90012766:	1a40      	subs	r0, r0, r1
90012768:	e7f7      	b.n	9001275a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
9001276a:	2000      	movs	r0, #0
9001276c:	4770      	bx	lr
	...

90012770 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90012770:	4b01      	ldr	r3, [pc, #4]	; (90012778 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90012772:	2200      	movs	r2, #0
90012774:	601a      	str	r2, [r3, #0]
90012776:	4770      	bx	lr
90012778:	24026214 	.word	0x24026214

9001277c <_ZN8touchgfx16TouchCalibration4clzuEm>:
9001277c:	4603      	mov	r3, r0
9001277e:	b1c8      	cbz	r0, 900127b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90012780:	0c02      	lsrs	r2, r0, #16
90012782:	0412      	lsls	r2, r2, #16
90012784:	b9a2      	cbnz	r2, 900127b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90012786:	0403      	lsls	r3, r0, #16
90012788:	2010      	movs	r0, #16
9001278a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
9001278e:	bf04      	itt	eq
90012790:	021b      	lsleq	r3, r3, #8
90012792:	3008      	addeq	r0, #8
90012794:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90012798:	bf04      	itt	eq
9001279a:	011b      	lsleq	r3, r3, #4
9001279c:	3004      	addeq	r0, #4
9001279e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
900127a2:	bf04      	itt	eq
900127a4:	009b      	lsleq	r3, r3, #2
900127a6:	3002      	addeq	r0, #2
900127a8:	2b00      	cmp	r3, #0
900127aa:	db04      	blt.n	900127b6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
900127ac:	3001      	adds	r0, #1
900127ae:	4770      	bx	lr
900127b0:	2000      	movs	r0, #0
900127b2:	e7ea      	b.n	9001278a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
900127b4:	2020      	movs	r0, #32
900127b6:	4770      	bx	lr

900127b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
900127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900127bc:	b087      	sub	sp, #28
900127be:	4681      	mov	r9, r0
900127c0:	4698      	mov	r8, r3
900127c2:	4610      	mov	r0, r2
900127c4:	460d      	mov	r5, r1
900127c6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
900127ca:	b981      	cbnz	r1, 900127ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
900127cc:	b14b      	cbz	r3, 900127e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
900127ce:	460b      	mov	r3, r1
900127d0:	464a      	mov	r2, r9
900127d2:	4641      	mov	r1, r8
900127d4:	e9cd 4700 	strd	r4, r7, [sp]
900127d8:	f7ff ffee 	bl	900127b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900127dc:	b007      	add	sp, #28
900127de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900127e2:	f04f 33ff 	mov.w	r3, #4294967295
900127e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
900127ea:	603b      	str	r3, [r7, #0]
900127ec:	e7f6      	b.n	900127dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
900127ee:	fa32 fa01 	lsrs.w	sl, r2, r1
900127f2:	d107      	bne.n	90012804 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
900127f4:	fb09 f602 	mul.w	r6, r9, r2
900127f8:	fbb6 f0f4 	udiv	r0, r6, r4
900127fc:	fb04 6610 	mls	r6, r4, r0, r6
90012800:	603e      	str	r6, [r7, #0]
90012802:	e7eb      	b.n	900127dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90012804:	2601      	movs	r6, #1
90012806:	fa09 fb01 	lsl.w	fp, r9, r1
9001280a:	408e      	lsls	r6, r1
9001280c:	fbbb f3f4 	udiv	r3, fp, r4
90012810:	3e01      	subs	r6, #1
90012812:	9302      	str	r3, [sp, #8]
90012814:	fb0a f303 	mul.w	r3, sl, r3
90012818:	4016      	ands	r6, r2
9001281a:	9303      	str	r3, [sp, #12]
9001281c:	4630      	mov	r0, r6
9001281e:	f7ff ffad 	bl	9001277c <_ZN8touchgfx16TouchCalibration4clzuEm>
90012822:	464a      	mov	r2, r9
90012824:	460b      	mov	r3, r1
90012826:	4601      	mov	r1, r0
90012828:	4630      	mov	r0, r6
9001282a:	e9cd 4700 	strd	r4, r7, [sp]
9001282e:	f7ff ffc3 	bl	900127b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90012832:	9b02      	ldr	r3, [sp, #8]
90012834:	4606      	mov	r6, r0
90012836:	eb05 0108 	add.w	r1, r5, r8
9001283a:	fb04 bb13 	mls	fp, r4, r3, fp
9001283e:	4658      	mov	r0, fp
90012840:	f7ff ff9c 	bl	9001277c <_ZN8touchgfx16TouchCalibration4clzuEm>
90012844:	ab05      	add	r3, sp, #20
90012846:	465a      	mov	r2, fp
90012848:	e9cd 4300 	strd	r4, r3, [sp]
9001284c:	4603      	mov	r3, r0
9001284e:	4650      	mov	r0, sl
90012850:	f7ff ffb2 	bl	900127b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90012854:	6839      	ldr	r1, [r7, #0]
90012856:	9a05      	ldr	r2, [sp, #20]
90012858:	9b03      	ldr	r3, [sp, #12]
9001285a:	4411      	add	r1, r2
9001285c:	fbb1 f2f4 	udiv	r2, r1, r4
90012860:	18d3      	adds	r3, r2, r3
90012862:	fb04 1412 	mls	r4, r4, r2, r1
90012866:	441e      	add	r6, r3
90012868:	603c      	str	r4, [r7, #0]
9001286a:	4430      	add	r0, r6
9001286c:	e7b6      	b.n	900127dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

9001286e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
9001286e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012872:	b085      	sub	sp, #20
90012874:	f1b0 0900 	subs.w	r9, r0, #0
90012878:	461d      	mov	r5, r3
9001287a:	4617      	mov	r7, r2
9001287c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001287e:	bfbb      	ittet	lt
90012880:	f1c9 0900 	rsblt	r9, r9, #0
90012884:	f04f 36ff 	movlt.w	r6, #4294967295
90012888:	2601      	movge	r6, #1
9001288a:	6823      	ldrlt	r3, [r4, #0]
9001288c:	bfbc      	itt	lt
9001288e:	425b      	neglt	r3, r3
90012890:	6023      	strlt	r3, [r4, #0]
90012892:	2a00      	cmp	r2, #0
90012894:	da04      	bge.n	900128a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90012896:	6823      	ldr	r3, [r4, #0]
90012898:	4257      	negs	r7, r2
9001289a:	4276      	negs	r6, r6
9001289c:	425b      	negs	r3, r3
9001289e:	6023      	str	r3, [r4, #0]
900128a0:	2d00      	cmp	r5, #0
900128a2:	4638      	mov	r0, r7
900128a4:	bfba      	itte	lt
900128a6:	426d      	neglt	r5, r5
900128a8:	f04f 38ff 	movlt.w	r8, #4294967295
900128ac:	f04f 0801 	movge.w	r8, #1
900128b0:	f7ff ff64 	bl	9001277c <_ZN8touchgfx16TouchCalibration4clzuEm>
900128b4:	ab03      	add	r3, sp, #12
900128b6:	463a      	mov	r2, r7
900128b8:	e9cd 5300 	strd	r5, r3, [sp]
900128bc:	4603      	mov	r3, r0
900128be:	4648      	mov	r0, r9
900128c0:	f7ff ff7a 	bl	900127b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900128c4:	6823      	ldr	r3, [r4, #0]
900128c6:	9a03      	ldr	r2, [sp, #12]
900128c8:	4546      	cmp	r6, r8
900128ca:	441a      	add	r2, r3
900128cc:	fb92 f3f5 	sdiv	r3, r2, r5
900128d0:	4418      	add	r0, r3
900128d2:	fb05 2313 	mls	r3, r5, r3, r2
900128d6:	bf18      	it	ne
900128d8:	4240      	negne	r0, r0
900128da:	1c72      	adds	r2, r6, #1
900128dc:	6023      	str	r3, [r4, #0]
900128de:	d105      	bne.n	900128ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
900128e0:	2b00      	cmp	r3, #0
900128e2:	f1c3 0200 	rsb	r2, r3, #0
900128e6:	db0b      	blt.n	90012900 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
900128e8:	6022      	str	r2, [r4, #0]
900128ea:	e006      	b.n	900128fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900128ec:	2e01      	cmp	r6, #1
900128ee:	d104      	bne.n	900128fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900128f0:	2b00      	cmp	r3, #0
900128f2:	da02      	bge.n	900128fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900128f4:	442b      	add	r3, r5
900128f6:	3801      	subs	r0, #1
900128f8:	6023      	str	r3, [r4, #0]
900128fa:	b005      	add	sp, #20
900128fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012900:	3801      	subs	r0, #1
90012902:	1b52      	subs	r2, r2, r5
90012904:	e7f0      	b.n	900128e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90012908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90012908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
9001290c:	4c1c      	ldr	r4, [pc, #112]	; (90012980 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
9001290e:	4605      	mov	r5, r0
90012910:	6807      	ldr	r7, [r0, #0]
90012912:	69a3      	ldr	r3, [r4, #24]
90012914:	b92b      	cbnz	r3, 90012922 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90012916:	6840      	ldr	r0, [r0, #4]
90012918:	e9c5 7000 	strd	r7, r0, [r5]
9001291c:	b004      	add	sp, #16
9001291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012922:	f04f 0802 	mov.w	r8, #2
90012926:	68a2      	ldr	r2, [r4, #8]
90012928:	ae04      	add	r6, sp, #16
9001292a:	6820      	ldr	r0, [r4, #0]
9001292c:	fb93 f1f8 	sdiv	r1, r3, r8
90012930:	440a      	add	r2, r1
90012932:	69e1      	ldr	r1, [r4, #28]
90012934:	f846 2d04 	str.w	r2, [r6, #-4]!
90012938:	463a      	mov	r2, r7
9001293a:	9600      	str	r6, [sp, #0]
9001293c:	f7ff ff97 	bl	9001286e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90012940:	69a3      	ldr	r3, [r4, #24]
90012942:	4607      	mov	r7, r0
90012944:	686a      	ldr	r2, [r5, #4]
90012946:	6a21      	ldr	r1, [r4, #32]
90012948:	9600      	str	r6, [sp, #0]
9001294a:	6860      	ldr	r0, [r4, #4]
9001294c:	f7ff ff8f 	bl	9001286e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90012950:	69a3      	ldr	r3, [r4, #24]
90012952:	6962      	ldr	r2, [r4, #20]
90012954:	4407      	add	r7, r0
90012956:	6a61      	ldr	r1, [r4, #36]	; 0x24
90012958:	9600      	str	r6, [sp, #0]
9001295a:	68e0      	ldr	r0, [r4, #12]
9001295c:	fb93 f8f8 	sdiv	r8, r3, r8
90012960:	4442      	add	r2, r8
90012962:	9203      	str	r2, [sp, #12]
90012964:	682a      	ldr	r2, [r5, #0]
90012966:	f7ff ff82 	bl	9001286e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001296a:	4680      	mov	r8, r0
9001296c:	9600      	str	r6, [sp, #0]
9001296e:	69a3      	ldr	r3, [r4, #24]
90012970:	686a      	ldr	r2, [r5, #4]
90012972:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90012974:	6920      	ldr	r0, [r4, #16]
90012976:	f7ff ff7a 	bl	9001286e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001297a:	4440      	add	r0, r8
9001297c:	e7cc      	b.n	90012918 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
9001297e:	bf00      	nop
90012980:	24026218 	.word	0x24026218

90012984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90012984:	4b07      	ldr	r3, [pc, #28]	; (900129a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90012986:	781b      	ldrb	r3, [r3, #0]
90012988:	2b01      	cmp	r3, #1
9001298a:	d109      	bne.n	900129a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
9001298c:	f9b1 3000 	ldrsh.w	r3, [r1]
90012990:	f9b0 2000 	ldrsh.w	r2, [r0]
90012994:	8003      	strh	r3, [r0, #0]
90012996:	4b04      	ldr	r3, [pc, #16]	; (900129a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90012998:	881b      	ldrh	r3, [r3, #0]
9001299a:	3b01      	subs	r3, #1
9001299c:	1a9b      	subs	r3, r3, r2
9001299e:	800b      	strh	r3, [r1, #0]
900129a0:	4770      	bx	lr
900129a2:	bf00      	nop
900129a4:	24026204 	.word	0x24026204
900129a8:	24026200 	.word	0x24026200

900129ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
900129ac:	4b07      	ldr	r3, [pc, #28]	; (900129cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
900129ae:	b510      	push	{r4, lr}
900129b0:	781b      	ldrb	r3, [r3, #0]
900129b2:	2b01      	cmp	r3, #1
900129b4:	d108      	bne.n	900129c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
900129b6:	4b06      	ldr	r3, [pc, #24]	; (900129d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
900129b8:	880c      	ldrh	r4, [r1, #0]
900129ba:	881b      	ldrh	r3, [r3, #0]
900129bc:	f9b0 2000 	ldrsh.w	r2, [r0]
900129c0:	3b01      	subs	r3, #1
900129c2:	1b1b      	subs	r3, r3, r4
900129c4:	8003      	strh	r3, [r0, #0]
900129c6:	800a      	strh	r2, [r1, #0]
900129c8:	bd10      	pop	{r4, pc}
900129ca:	bf00      	nop
900129cc:	24026204 	.word	0x24026204
900129d0:	24026200 	.word	0x24026200

900129d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
900129d4:	4b0a      	ldr	r3, [pc, #40]	; (90012a00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
900129d6:	b510      	push	{r4, lr}
900129d8:	781b      	ldrb	r3, [r3, #0]
900129da:	2b01      	cmp	r3, #1
900129dc:	d10e      	bne.n	900129fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
900129de:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
900129e2:	8843      	ldrh	r3, [r0, #2]
900129e4:	f9b0 4000 	ldrsh.w	r4, [r0]
900129e8:	18ca      	adds	r2, r1, r3
900129ea:	4b06      	ldr	r3, [pc, #24]	; (90012a04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
900129ec:	8044      	strh	r4, [r0, #2]
900129ee:	881b      	ldrh	r3, [r3, #0]
900129f0:	1a9b      	subs	r3, r3, r2
900129f2:	8003      	strh	r3, [r0, #0]
900129f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900129f8:	8081      	strh	r1, [r0, #4]
900129fa:	80c3      	strh	r3, [r0, #6]
900129fc:	bd10      	pop	{r4, pc}
900129fe:	bf00      	nop
90012a00:	24026204 	.word	0x24026204
90012a04:	24026200 	.word	0x24026200

90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90012a08:	4b08      	ldr	r3, [pc, #32]	; (90012a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90012a0a:	781b      	ldrb	r3, [r3, #0]
90012a0c:	2b01      	cmp	r3, #1
90012a0e:	d10c      	bne.n	90012a2a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90012a10:	8803      	ldrh	r3, [r0, #0]
90012a12:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90012a16:	8842      	ldrh	r2, [r0, #2]
90012a18:	8002      	strh	r2, [r0, #0]
90012a1a:	185a      	adds	r2, r3, r1
90012a1c:	4b04      	ldr	r3, [pc, #16]	; (90012a30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90012a1e:	881b      	ldrh	r3, [r3, #0]
90012a20:	1a9b      	subs	r3, r3, r2
90012a22:	8043      	strh	r3, [r0, #2]
90012a24:	88c3      	ldrh	r3, [r0, #6]
90012a26:	80c1      	strh	r1, [r0, #6]
90012a28:	8083      	strh	r3, [r0, #4]
90012a2a:	4770      	bx	lr
90012a2c:	24026204 	.word	0x24026204
90012a30:	24026200 	.word	0x24026200

90012a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90012a34:	4b07      	ldr	r3, [pc, #28]	; (90012a54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90012a36:	b510      	push	{r4, lr}
90012a38:	781b      	ldrb	r3, [r3, #0]
90012a3a:	2b01      	cmp	r3, #1
90012a3c:	d108      	bne.n	90012a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90012a3e:	f9b1 3000 	ldrsh.w	r3, [r1]
90012a42:	f9b0 4000 	ldrsh.w	r4, [r0]
90012a46:	8003      	strh	r3, [r0, #0]
90012a48:	8893      	ldrh	r3, [r2, #4]
90012a4a:	3b01      	subs	r3, #1
90012a4c:	1b1b      	subs	r3, r3, r4
90012a4e:	800b      	strh	r3, [r1, #0]
90012a50:	bd10      	pop	{r4, pc}
90012a52:	bf00      	nop
90012a54:	24026204 	.word	0x24026204

90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90012a58:	4b0a      	ldr	r3, [pc, #40]	; (90012a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90012a5a:	460a      	mov	r2, r1
90012a5c:	b510      	push	{r4, lr}
90012a5e:	781b      	ldrb	r3, [r3, #0]
90012a60:	2b01      	cmp	r3, #1
90012a62:	d10d      	bne.n	90012a80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90012a64:	8881      	ldrh	r1, [r0, #4]
90012a66:	8803      	ldrh	r3, [r0, #0]
90012a68:	440b      	add	r3, r1
90012a6a:	4601      	mov	r1, r0
90012a6c:	3b01      	subs	r3, #1
90012a6e:	f821 3b02 	strh.w	r3, [r1], #2
90012a72:	f7ff ffdf 	bl	90012a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90012a76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012a7a:	88c2      	ldrh	r2, [r0, #6]
90012a7c:	80c3      	strh	r3, [r0, #6]
90012a7e:	8082      	strh	r2, [r0, #4]
90012a80:	bd10      	pop	{r4, pc}
90012a82:	bf00      	nop
90012a84:	24026204 	.word	0x24026204

90012a88 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90012a88:	4770      	bx	lr
	...

90012a8c <_ZN8touchgfx11Application13requestRedrawEv>:
90012a8c:	4b06      	ldr	r3, [pc, #24]	; (90012aa8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90012a8e:	2100      	movs	r1, #0
90012a90:	f9b3 2000 	ldrsh.w	r2, [r3]
90012a94:	4b05      	ldr	r3, [pc, #20]	; (90012aac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90012a96:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90012a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
90012a9e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90012aa2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90012aa6:	4770      	bx	lr
90012aa8:	24026200 	.word	0x24026200
90012aac:	24026202 	.word	0x24026202

90012ab0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90012ab0:	4b03      	ldr	r3, [pc, #12]	; (90012ac0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90012ab2:	6818      	ldr	r0, [r3, #0]
90012ab4:	b110      	cbz	r0, 90012abc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90012ab6:	6803      	ldr	r3, [r0, #0]
90012ab8:	699b      	ldr	r3, [r3, #24]
90012aba:	4718      	bx	r3
90012abc:	4770      	bx	lr
90012abe:	bf00      	nop
90012ac0:	24026248 	.word	0x24026248

90012ac4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90012ac4:	4770      	bx	lr
	...

90012ac8 <_ZN8touchgfx11Application4drawEv>:
90012ac8:	4b09      	ldr	r3, [pc, #36]	; (90012af0 <_ZN8touchgfx11Application4drawEv+0x28>)
90012aca:	b507      	push	{r0, r1, r2, lr}
90012acc:	f9b3 2000 	ldrsh.w	r2, [r3]
90012ad0:	2100      	movs	r1, #0
90012ad2:	4b08      	ldr	r3, [pc, #32]	; (90012af4 <_ZN8touchgfx11Application4drawEv+0x2c>)
90012ad4:	9100      	str	r1, [sp, #0]
90012ad6:	4669      	mov	r1, sp
90012ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
90012adc:	f8ad 2004 	strh.w	r2, [sp, #4]
90012ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
90012ae4:	6803      	ldr	r3, [r0, #0]
90012ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90012ae8:	4798      	blx	r3
90012aea:	b003      	add	sp, #12
90012aec:	f85d fb04 	ldr.w	pc, [sp], #4
90012af0:	24026200 	.word	0x24026200
90012af4:	24026202 	.word	0x24026202

90012af8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90012af8:	4b03      	ldr	r3, [pc, #12]	; (90012b08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90012afa:	6818      	ldr	r0, [r3, #0]
90012afc:	b110      	cbz	r0, 90012b04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90012afe:	6803      	ldr	r3, [r0, #0]
90012b00:	69db      	ldr	r3, [r3, #28]
90012b02:	4718      	bx	r3
90012b04:	4770      	bx	lr
90012b06:	bf00      	nop
90012b08:	24026248 	.word	0x24026248

90012b0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90012b0c:	4b03      	ldr	r3, [pc, #12]	; (90012b1c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90012b0e:	6818      	ldr	r0, [r3, #0]
90012b10:	b110      	cbz	r0, 90012b18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90012b12:	6803      	ldr	r3, [r0, #0]
90012b14:	6a1b      	ldr	r3, [r3, #32]
90012b16:	4718      	bx	r3
90012b18:	4770      	bx	lr
90012b1a:	bf00      	nop
90012b1c:	24026248 	.word	0x24026248

90012b20 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90012b20:	2300      	movs	r3, #0
90012b22:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90012b26:	4770      	bx	lr

90012b28 <_ZN8touchgfx11Application14handleKeyEventEh>:
90012b28:	4b03      	ldr	r3, [pc, #12]	; (90012b38 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90012b2a:	6818      	ldr	r0, [r3, #0]
90012b2c:	b110      	cbz	r0, 90012b34 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90012b2e:	6803      	ldr	r3, [r0, #0]
90012b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012b32:	4718      	bx	r3
90012b34:	4770      	bx	lr
90012b36:	bf00      	nop
90012b38:	24026248 	.word	0x24026248

90012b3c <_ZN8touchgfx11ApplicationD1Ev>:
90012b3c:	4770      	bx	lr

90012b3e <_ZN8touchgfx11ApplicationD0Ev>:
90012b3e:	b510      	push	{r4, lr}
90012b40:	4604      	mov	r4, r0
90012b42:	f44f 719e 	mov.w	r1, #316	; 0x13c
90012b46:	f00e fedc 	bl	90021902 <_ZdlPvj>
90012b4a:	4620      	mov	r0, r4
90012b4c:	bd10      	pop	{r4, pc}

90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>:
90012b4e:	b510      	push	{r4, lr}
90012b50:	f9b1 4000 	ldrsh.w	r4, [r1]
90012b54:	888a      	ldrh	r2, [r1, #4]
90012b56:	f9b0 3000 	ldrsh.w	r3, [r0]
90012b5a:	4422      	add	r2, r4
90012b5c:	b212      	sxth	r2, r2
90012b5e:	4293      	cmp	r3, r2
90012b60:	da15      	bge.n	90012b8e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012b62:	8882      	ldrh	r2, [r0, #4]
90012b64:	4413      	add	r3, r2
90012b66:	b21b      	sxth	r3, r3
90012b68:	429c      	cmp	r4, r3
90012b6a:	da10      	bge.n	90012b8e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012b6c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90012b70:	88c9      	ldrh	r1, [r1, #6]
90012b72:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90012b76:	4419      	add	r1, r3
90012b78:	b209      	sxth	r1, r1
90012b7a:	428a      	cmp	r2, r1
90012b7c:	da07      	bge.n	90012b8e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012b7e:	88c0      	ldrh	r0, [r0, #6]
90012b80:	4410      	add	r0, r2
90012b82:	b200      	sxth	r0, r0
90012b84:	4283      	cmp	r3, r0
90012b86:	bfac      	ite	ge
90012b88:	2000      	movge	r0, #0
90012b8a:	2001      	movlt	r0, #1
90012b8c:	bd10      	pop	{r4, pc}
90012b8e:	2000      	movs	r0, #0
90012b90:	e7fc      	b.n	90012b8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90012b92 <_ZN8touchgfx4Rect10restrictToEss>:
90012b92:	f9b0 3000 	ldrsh.w	r3, [r0]
90012b96:	2b00      	cmp	r3, #0
90012b98:	b510      	push	{r4, lr}
90012b9a:	da04      	bge.n	90012ba6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90012b9c:	8884      	ldrh	r4, [r0, #4]
90012b9e:	4423      	add	r3, r4
90012ba0:	8083      	strh	r3, [r0, #4]
90012ba2:	2300      	movs	r3, #0
90012ba4:	8003      	strh	r3, [r0, #0]
90012ba6:	f9b0 4000 	ldrsh.w	r4, [r0]
90012baa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012bae:	1b09      	subs	r1, r1, r4
90012bb0:	428b      	cmp	r3, r1
90012bb2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90012bb6:	bfc8      	it	gt
90012bb8:	8081      	strhgt	r1, [r0, #4]
90012bba:	2b00      	cmp	r3, #0
90012bbc:	da04      	bge.n	90012bc8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90012bbe:	88c1      	ldrh	r1, [r0, #6]
90012bc0:	440b      	add	r3, r1
90012bc2:	80c3      	strh	r3, [r0, #6]
90012bc4:	2300      	movs	r3, #0
90012bc6:	8043      	strh	r3, [r0, #2]
90012bc8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90012bcc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90012bd0:	1a52      	subs	r2, r2, r1
90012bd2:	4293      	cmp	r3, r2
90012bd4:	bfc8      	it	gt
90012bd6:	80c2      	strhgt	r2, [r0, #6]
90012bd8:	bd10      	pop	{r4, pc}
	...

90012bdc <_ZN8touchgfx11Application4drawERNS_4RectE>:
90012bdc:	4b10      	ldr	r3, [pc, #64]	; (90012c20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90012bde:	b510      	push	{r4, lr}
90012be0:	460c      	mov	r4, r1
90012be2:	f9b3 2000 	ldrsh.w	r2, [r3]
90012be6:	4b0f      	ldr	r3, [pc, #60]	; (90012c24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90012be8:	4620      	mov	r0, r4
90012bea:	f9b3 1000 	ldrsh.w	r1, [r3]
90012bee:	f7ff ffd0 	bl	90012b92 <_ZN8touchgfx4Rect10restrictToEss>
90012bf2:	4b0d      	ldr	r3, [pc, #52]	; (90012c28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90012bf4:	6818      	ldr	r0, [r3, #0]
90012bf6:	b190      	cbz	r0, 90012c1e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90012bf8:	6803      	ldr	r3, [r0, #0]
90012bfa:	4621      	mov	r1, r4
90012bfc:	689b      	ldr	r3, [r3, #8]
90012bfe:	4798      	blx	r3
90012c00:	4b0a      	ldr	r3, [pc, #40]	; (90012c2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90012c02:	6818      	ldr	r0, [r3, #0]
90012c04:	b118      	cbz	r0, 90012c0e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90012c06:	6803      	ldr	r3, [r0, #0]
90012c08:	4621      	mov	r1, r4
90012c0a:	689b      	ldr	r3, [r3, #8]
90012c0c:	4798      	blx	r3
90012c0e:	4b08      	ldr	r3, [pc, #32]	; (90012c30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90012c10:	4621      	mov	r1, r4
90012c12:	6818      	ldr	r0, [r3, #0]
90012c14:	6803      	ldr	r3, [r0, #0]
90012c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012c1a:	69db      	ldr	r3, [r3, #28]
90012c1c:	4718      	bx	r3
90012c1e:	bd10      	pop	{r4, pc}
90012c20:	24026202 	.word	0x24026202
90012c24:	24026200 	.word	0x24026200
90012c28:	24026248 	.word	0x24026248
90012c2c:	24026244 	.word	0x24026244
90012c30:	2402620c 	.word	0x2402620c

90012c34 <_ZNK8touchgfx4Rect8includesERKS0_>:
90012c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012c36:	4606      	mov	r6, r0
90012c38:	4608      	mov	r0, r1
90012c3a:	460f      	mov	r7, r1
90012c3c:	f7fd f99d 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90012c40:	b9e8      	cbnz	r0, 90012c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012c42:	f9b7 5000 	ldrsh.w	r5, [r7]
90012c46:	f9b6 4000 	ldrsh.w	r4, [r6]
90012c4a:	42a5      	cmp	r5, r4
90012c4c:	db17      	blt.n	90012c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012c4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90012c52:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90012c56:	429a      	cmp	r2, r3
90012c58:	db11      	blt.n	90012c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012c5a:	88b9      	ldrh	r1, [r7, #4]
90012c5c:	440d      	add	r5, r1
90012c5e:	88b1      	ldrh	r1, [r6, #4]
90012c60:	440c      	add	r4, r1
90012c62:	b22d      	sxth	r5, r5
90012c64:	b224      	sxth	r4, r4
90012c66:	42a5      	cmp	r5, r4
90012c68:	dc09      	bgt.n	90012c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012c6a:	88f8      	ldrh	r0, [r7, #6]
90012c6c:	4410      	add	r0, r2
90012c6e:	88f2      	ldrh	r2, [r6, #6]
90012c70:	4413      	add	r3, r2
90012c72:	b200      	sxth	r0, r0
90012c74:	b21b      	sxth	r3, r3
90012c76:	4298      	cmp	r0, r3
90012c78:	bfcc      	ite	gt
90012c7a:	2000      	movgt	r0, #0
90012c7c:	2001      	movle	r0, #1
90012c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90012c80 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90012c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012c82:	4604      	mov	r4, r0
90012c84:	4608      	mov	r0, r1
90012c86:	460d      	mov	r5, r1
90012c88:	f7fd f977 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90012c8c:	b978      	cbnz	r0, 90012cae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90012c8e:	4620      	mov	r0, r4
90012c90:	f7fd f973 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90012c94:	f9b5 6000 	ldrsh.w	r6, [r5]
90012c98:	b150      	cbz	r0, 90012cb0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90012c9a:	8026      	strh	r6, [r4, #0]
90012c9c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90012ca0:	8063      	strh	r3, [r4, #2]
90012ca2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90012ca6:	80a3      	strh	r3, [r4, #4]
90012ca8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012cac:	80e3      	strh	r3, [r4, #6]
90012cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90012cb0:	f9b4 1000 	ldrsh.w	r1, [r4]
90012cb4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90012cb8:	42b1      	cmp	r1, r6
90012cba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90012cbe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90012cc2:	460f      	mov	r7, r1
90012cc4:	88ed      	ldrh	r5, [r5, #6]
90012cc6:	bfa8      	it	ge
90012cc8:	4637      	movge	r7, r6
90012cca:	4293      	cmp	r3, r2
90012ccc:	4618      	mov	r0, r3
90012cce:	4466      	add	r6, ip
90012cd0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90012cd4:	bfa8      	it	ge
90012cd6:	4610      	movge	r0, r2
90012cd8:	442a      	add	r2, r5
90012cda:	88e5      	ldrh	r5, [r4, #6]
90012cdc:	4461      	add	r1, ip
90012cde:	b236      	sxth	r6, r6
90012ce0:	8027      	strh	r7, [r4, #0]
90012ce2:	442b      	add	r3, r5
90012ce4:	b209      	sxth	r1, r1
90012ce6:	b212      	sxth	r2, r2
90012ce8:	8060      	strh	r0, [r4, #2]
90012cea:	b21b      	sxth	r3, r3
90012cec:	428e      	cmp	r6, r1
90012cee:	bfac      	ite	ge
90012cf0:	ebc7 0106 	rsbge	r1, r7, r6
90012cf4:	ebc7 0101 	rsblt	r1, r7, r1
90012cf8:	429a      	cmp	r2, r3
90012cfa:	bfac      	ite	ge
90012cfc:	ebc0 0202 	rsbge	r2, r0, r2
90012d00:	ebc0 0203 	rsblt	r2, r0, r3
90012d04:	80a1      	strh	r1, [r4, #4]
90012d06:	80e2      	strh	r2, [r4, #6]
90012d08:	e7d1      	b.n	90012cae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90012d0c <_ZN8touchgfx11Application11getInstanceEv>:
90012d0c:	4b01      	ldr	r3, [pc, #4]	; (90012d14 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90012d0e:	6818      	ldr	r0, [r3, #0]
90012d10:	4770      	bx	lr
90012d12:	bf00      	nop
90012d14:	24026258 	.word	0x24026258

90012d18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90012d18:	2300      	movs	r3, #0
90012d1a:	b510      	push	{r4, lr}
90012d1c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90012d20:	4604      	mov	r4, r0
90012d22:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90012d26:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90012d2a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90012d2e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90012d32:	429a      	cmp	r2, r3
90012d34:	d90e      	bls.n	90012d54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90012d36:	18e2      	adds	r2, r4, r3
90012d38:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
90012d3c:	b122      	cbz	r2, 90012d48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90012d3e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90012d42:	6803      	ldr	r3, [r0, #0]
90012d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012d46:	4798      	blx	r3
90012d48:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90012d4c:	3301      	adds	r3, #1
90012d4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90012d52:	e7ea      	b.n	90012d2a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90012d54:	bd10      	pop	{r4, pc}

90012d56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90012d56:	2300      	movs	r3, #0
90012d58:	f100 0284 	add.w	r2, r0, #132	; 0x84
90012d5c:	30a4      	adds	r0, #164	; 0xa4
90012d5e:	f820 3c24 	strh.w	r3, [r0, #-36]
90012d62:	f802 3b01 	strb.w	r3, [r2], #1
90012d66:	4282      	cmp	r2, r0
90012d68:	d1fb      	bne.n	90012d62 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90012d6a:	4770      	bx	lr

90012d6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90012d6c:	b570      	push	{r4, r5, r6, lr}
90012d6e:	4c0b      	ldr	r4, [pc, #44]	; (90012d9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90012d70:	4605      	mov	r5, r0
90012d72:	460e      	mov	r6, r1
90012d74:	6820      	ldr	r0, [r4, #0]
90012d76:	b110      	cbz	r0, 90012d7e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90012d78:	6803      	ldr	r3, [r0, #0]
90012d7a:	695b      	ldr	r3, [r3, #20]
90012d7c:	4798      	blx	r3
90012d7e:	1d28      	adds	r0, r5, #4
90012d80:	f7ff ffe9 	bl	90012d56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90012d84:	6026      	str	r6, [r4, #0]
90012d86:	6833      	ldr	r3, [r6, #0]
90012d88:	4630      	mov	r0, r6
90012d8a:	68db      	ldr	r3, [r3, #12]
90012d8c:	4798      	blx	r3
90012d8e:	682b      	ldr	r3, [r5, #0]
90012d90:	4628      	mov	r0, r5
90012d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012d98:	4718      	bx	r3
90012d9a:	bf00      	nop
90012d9c:	24026248 	.word	0x24026248

90012da0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90012da0:	2300      	movs	r3, #0
90012da2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90012da6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90012daa:	461a      	mov	r2, r3
90012dac:	b5f0      	push	{r4, r5, r6, r7, lr}
90012dae:	461c      	mov	r4, r3
90012db0:	461d      	mov	r5, r3
90012db2:	459c      	cmp	ip, r3
90012db4:	dd1a      	ble.n	90012dec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90012db6:	18c6      	adds	r6, r0, r3
90012db8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90012dbc:	b16e      	cbz	r6, 90012dda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90012dbe:	429a      	cmp	r2, r3
90012dc0:	d008      	beq.n	90012dd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90012dc2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90012dc6:	fa1f fe82 	uxth.w	lr, r2
90012dca:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90012dce:	1887      	adds	r7, r0, r2
90012dd0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90012dd4:	3201      	adds	r2, #1
90012dd6:	3301      	adds	r3, #1
90012dd8:	e7eb      	b.n	90012db2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90012dda:	4299      	cmp	r1, r3
90012ddc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90012de0:	bfa8      	it	ge
90012de2:	3501      	addge	r5, #1
90012de4:	429e      	cmp	r6, r3
90012de6:	bfc8      	it	gt
90012de8:	3401      	addgt	r4, #1
90012dea:	e7f4      	b.n	90012dd6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90012dec:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90012df0:	1b49      	subs	r1, r1, r5
90012df2:	1b1b      	subs	r3, r3, r4
90012df4:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90012df8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90012dfc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90012e00:	4293      	cmp	r3, r2
90012e02:	dd03      	ble.n	90012e0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90012e04:	3b01      	subs	r3, #1
90012e06:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90012e0a:	e7f7      	b.n	90012dfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90012e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90012e10 <_ZN8touchgfx11Application15handleTickEventEv>:
90012e10:	b570      	push	{r4, r5, r6, lr}
90012e12:	4d16      	ldr	r5, [pc, #88]	; (90012e6c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90012e14:	4604      	mov	r4, r0
90012e16:	6828      	ldr	r0, [r5, #0]
90012e18:	b140      	cbz	r0, 90012e2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90012e1a:	7a03      	ldrb	r3, [r0, #8]
90012e1c:	b933      	cbnz	r3, 90012e2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90012e1e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90012e22:	6803      	ldr	r3, [r0, #0]
90012e24:	689b      	ldr	r3, [r3, #8]
90012e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012e2a:	4718      	bx	r3
90012e2c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90012e30:	4e0f      	ldr	r6, [pc, #60]	; (90012e70 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90012e32:	b973      	cbnz	r3, 90012e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012e34:	b168      	cbz	r0, 90012e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012e36:	7a03      	ldrb	r3, [r0, #8]
90012e38:	b15b      	cbz	r3, 90012e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012e3a:	6830      	ldr	r0, [r6, #0]
90012e3c:	b110      	cbz	r0, 90012e44 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90012e3e:	6803      	ldr	r3, [r0, #0]
90012e40:	691b      	ldr	r3, [r3, #16]
90012e42:	4798      	blx	r3
90012e44:	6828      	ldr	r0, [r5, #0]
90012e46:	6803      	ldr	r3, [r0, #0]
90012e48:	68db      	ldr	r3, [r3, #12]
90012e4a:	4798      	blx	r3
90012e4c:	2301      	movs	r3, #1
90012e4e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90012e52:	3404      	adds	r4, #4
90012e54:	4620      	mov	r0, r4
90012e56:	f7ff ff5f 	bl	90012d18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90012e5a:	4620      	mov	r0, r4
90012e5c:	f7ff ffa0 	bl	90012da0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90012e60:	6830      	ldr	r0, [r6, #0]
90012e62:	b110      	cbz	r0, 90012e6a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90012e64:	6803      	ldr	r3, [r0, #0]
90012e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012e68:	e7dd      	b.n	90012e26 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90012e6a:	bd70      	pop	{r4, r5, r6, pc}
90012e6c:	2402624c 	.word	0x2402624c
90012e70:	24026248 	.word	0x24026248

90012e74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90012e74:	4603      	mov	r3, r0
90012e76:	f100 0140 	add.w	r1, r0, #64	; 0x40
90012e7a:	2200      	movs	r2, #0
90012e7c:	801a      	strh	r2, [r3, #0]
90012e7e:	3308      	adds	r3, #8
90012e80:	f823 2c06 	strh.w	r2, [r3, #-6]
90012e84:	f823 2c04 	strh.w	r2, [r3, #-4]
90012e88:	f823 2c02 	strh.w	r2, [r3, #-2]
90012e8c:	428b      	cmp	r3, r1
90012e8e:	d1f5      	bne.n	90012e7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90012e90:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90012e94:	4770      	bx	lr
	...

90012e98 <_ZN8touchgfx11ApplicationC1Ev>:
90012e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012e9a:	4b1d      	ldr	r3, [pc, #116]	; (90012f10 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90012e9c:	4606      	mov	r6, r0
90012e9e:	4604      	mov	r4, r0
90012ea0:	2500      	movs	r5, #0
90012ea2:	f846 3b04 	str.w	r3, [r6], #4
90012ea6:	22a8      	movs	r2, #168	; 0xa8
90012ea8:	2100      	movs	r1, #0
90012eaa:	4630      	mov	r0, r6
90012eac:	f00e fff2 	bl	90021e94 <memset>
90012eb0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90012eb4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90012eb8:	4f16      	ldr	r7, [pc, #88]	; (90012f14 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90012eba:	f7ff ffdb 	bl	90012e74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90012ebe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90012ec2:	f7ff ffd7 	bl	90012e74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90012ec6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90012eca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90012ece:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90012ed2:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90012ed6:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90012eda:	490f      	ldr	r1, [pc, #60]	; (90012f18 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90012edc:	480f      	ldr	r0, [pc, #60]	; (90012f1c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90012ede:	f00e fc07 	bl	900216f0 <CRC_Lock>
90012ee2:	4b0f      	ldr	r3, [pc, #60]	; (90012f20 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90012ee4:	b158      	cbz	r0, 90012efe <_ZN8touchgfx11ApplicationC1Ev+0x66>
90012ee6:	801d      	strh	r5, [r3, #0]
90012ee8:	2300      	movs	r3, #0
90012eea:	4a0e      	ldr	r2, [pc, #56]	; (90012f24 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90012eec:	4630      	mov	r0, r6
90012eee:	6013      	str	r3, [r2, #0]
90012ef0:	4a0d      	ldr	r2, [pc, #52]	; (90012f28 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90012ef2:	603b      	str	r3, [r7, #0]
90012ef4:	6013      	str	r3, [r2, #0]
90012ef6:	f7ff ff2e 	bl	90012d56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90012efa:	4620      	mov	r0, r4
90012efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90012efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
90012f02:	2002      	movs	r0, #2
90012f04:	801a      	strh	r2, [r3, #0]
90012f06:	6038      	str	r0, [r7, #0]
90012f08:	f001 fa26 	bl	90014358 <_ZN8touchgfx6Screen4drawEv>
90012f0c:	e7ec      	b.n	90012ee8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
90012f0e:	bf00      	nop
90012f10:	90025824 	.word	0x90025824
90012f14:	24026248 	.word	0x24026248
90012f18:	b5e8b5cd 	.word	0xb5e8b5cd
90012f1c:	f407a5c2 	.word	0xf407a5c2
90012f20:	24000068 	.word	0x24000068
90012f24:	24026258 	.word	0x24026258
90012f28:	2402624c 	.word	0x2402624c

90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90012f2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90012f30:	3b01      	subs	r3, #1
90012f32:	b29b      	uxth	r3, r3
90012f34:	428b      	cmp	r3, r1
90012f36:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90012f3a:	b510      	push	{r4, lr}
90012f3c:	d908      	bls.n	90012f50 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90012f3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90012f42:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90012f46:	681a      	ldr	r2, [r3, #0]
90012f48:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90012f4c:	685a      	ldr	r2, [r3, #4]
90012f4e:	6062      	str	r2, [r4, #4]
90012f50:	bd10      	pop	{r4, pc}
	...

90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90012f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012f58:	b08f      	sub	sp, #60	; 0x3c
90012f5a:	4b8f      	ldr	r3, [pc, #572]	; (90013198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90012f5c:	4683      	mov	fp, r0
90012f5e:	ac0a      	add	r4, sp, #40	; 0x28
90012f60:	e884 0006 	stmia.w	r4, {r1, r2}
90012f64:	f9b3 2000 	ldrsh.w	r2, [r3]
90012f68:	4620      	mov	r0, r4
90012f6a:	4b8c      	ldr	r3, [pc, #560]	; (9001319c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90012f6c:	f9b3 1000 	ldrsh.w	r1, [r3]
90012f70:	f7ff fe0f 	bl	90012b92 <_ZN8touchgfx4Rect10restrictToEss>
90012f74:	4620      	mov	r0, r4
90012f76:	f7fd f800 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90012f7a:	2800      	cmp	r0, #0
90012f7c:	d16a      	bne.n	90013054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90012f7e:	9403      	str	r4, [sp, #12]
90012f80:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90012f84:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90012f88:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90012f8c:	9301      	str	r3, [sp, #4]
90012f8e:	35a4      	adds	r5, #164	; 0xa4
90012f90:	b15c      	cbz	r4, 90012faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90012f92:	4629      	mov	r1, r5
90012f94:	9803      	ldr	r0, [sp, #12]
90012f96:	f7ff fe4d 	bl	90012c34 <_ZNK8touchgfx4Rect8includesERKS0_>
90012f9a:	3c01      	subs	r4, #1
90012f9c:	b118      	cbz	r0, 90012fa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90012f9e:	b2a1      	uxth	r1, r4
90012fa0:	9801      	ldr	r0, [sp, #4]
90012fa2:	f7ff ffc3 	bl	90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90012fa6:	3d08      	subs	r5, #8
90012fa8:	e7f2      	b.n	90012f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90012faa:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90012fae:	f108 33ff 	add.w	r3, r8, #4294967295
90012fb2:	f8cd 8010 	str.w	r8, [sp, #16]
90012fb6:	9302      	str	r3, [sp, #8]
90012fb8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90012fbc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90012fc0:	9306      	str	r3, [sp, #24]
90012fc2:	445c      	add	r4, fp
90012fc4:	2500      	movs	r5, #0
90012fc6:	4626      	mov	r6, r4
90012fc8:	f8cd 8014 	str.w	r8, [sp, #20]
90012fcc:	462f      	mov	r7, r5
90012fce:	9b05      	ldr	r3, [sp, #20]
90012fd0:	2b00      	cmp	r3, #0
90012fd2:	d073      	beq.n	900130bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90012fd4:	9903      	ldr	r1, [sp, #12]
90012fd6:	4630      	mov	r0, r6
90012fd8:	f7ff fdb9 	bl	90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>
90012fdc:	b350      	cbz	r0, 90013034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90012fde:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90012fe2:	f9b6 c000 	ldrsh.w	ip, [r6]
90012fe6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90012fea:	45e6      	cmp	lr, ip
90012fec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90012ff0:	db33      	blt.n	9001305a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90012ff2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90012ff6:	88b3      	ldrh	r3, [r6, #4]
90012ff8:	4472      	add	r2, lr
90012ffa:	4463      	add	r3, ip
90012ffc:	b212      	sxth	r2, r2
90012ffe:	b21b      	sxth	r3, r3
90013000:	429a      	cmp	r2, r3
90013002:	dc2a      	bgt.n	9001305a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90013004:	fa1f f289 	uxth.w	r2, r9
90013008:	88f3      	ldrh	r3, [r6, #6]
9001300a:	45ca      	cmp	sl, r9
9001300c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90013010:	4413      	add	r3, r2
90013012:	fa1f fc8a 	uxth.w	ip, sl
90013016:	b29b      	uxth	r3, r3
90013018:	fa0f fe83 	sxth.w	lr, r3
9001301c:	db0f      	blt.n	9001303e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
9001301e:	eba3 030c 	sub.w	r3, r3, ip
90013022:	1ac9      	subs	r1, r1, r3
90013024:	b209      	sxth	r1, r1
90013026:	2900      	cmp	r1, #0
90013028:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001302c:	dd12      	ble.n	90013054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001302e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90013032:	4605      	mov	r5, r0
90013034:	9b05      	ldr	r3, [sp, #20]
90013036:	3e08      	subs	r6, #8
90013038:	3b01      	subs	r3, #1
9001303a:	9305      	str	r3, [sp, #20]
9001303c:	e7c7      	b.n	90012fce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
9001303e:	4461      	add	r1, ip
90013040:	b209      	sxth	r1, r1
90013042:	4571      	cmp	r1, lr
90013044:	dc38      	bgt.n	900130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013046:	eba2 020c 	sub.w	r2, r2, ip
9001304a:	b212      	sxth	r2, r2
9001304c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90013050:	2a00      	cmp	r2, #0
90013052:	dcee      	bgt.n	90013032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90013054:	b00f      	add	sp, #60	; 0x3c
90013056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001305a:	45ca      	cmp	sl, r9
9001305c:	db2c      	blt.n	900130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001305e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90013062:	449a      	add	sl, r3
90013064:	88f3      	ldrh	r3, [r6, #6]
90013066:	4499      	add	r9, r3
90013068:	fa0f fa8a 	sxth.w	sl, sl
9001306c:	fa0f f989 	sxth.w	r9, r9
90013070:	45ca      	cmp	sl, r9
90013072:	dc21      	bgt.n	900130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013074:	fa1f f28c 	uxth.w	r2, ip
90013078:	88b3      	ldrh	r3, [r6, #4]
9001307a:	45e6      	cmp	lr, ip
9001307c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90013080:	4413      	add	r3, r2
90013082:	fa1f f98e 	uxth.w	r9, lr
90013086:	b29b      	uxth	r3, r3
90013088:	fa0f fa83 	sxth.w	sl, r3
9001308c:	db0a      	blt.n	900130a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
9001308e:	eba3 0309 	sub.w	r3, r3, r9
90013092:	1ac9      	subs	r1, r1, r3
90013094:	b209      	sxth	r1, r1
90013096:	2900      	cmp	r1, #0
90013098:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
9001309c:	ddda      	ble.n	90013054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001309e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
900130a2:	e7c6      	b.n	90013032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900130a4:	4449      	add	r1, r9
900130a6:	b209      	sxth	r1, r1
900130a8:	4551      	cmp	r1, sl
900130aa:	dc05      	bgt.n	900130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900130ac:	eba2 0209 	sub.w	r2, r2, r9
900130b0:	b212      	sxth	r2, r2
900130b2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
900130b6:	e7cb      	b.n	90013050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
900130b8:	4607      	mov	r7, r0
900130ba:	e7bb      	b.n	90013034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900130bc:	2d00      	cmp	r5, #0
900130be:	d181      	bne.n	90012fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
900130c0:	2f00      	cmp	r7, #0
900130c2:	f000 81dd 	beq.w	90013480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900130c6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
900130ca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
900130ce:	b2b3      	uxth	r3, r6
900130d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900130d4:	b2b9      	uxth	r1, r7
900130d6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
900130da:	441a      	add	r2, r3
900130dc:	448a      	add	sl, r1
900130de:	9105      	str	r1, [sp, #20]
900130e0:	b292      	uxth	r2, r2
900130e2:	fa1f fa8a 	uxth.w	sl, sl
900130e6:	fa0f f882 	sxth.w	r8, r2
900130ea:	fa0f f98a 	sxth.w	r9, sl
900130ee:	e9cd 2307 	strd	r2, r3, [sp, #28]
900130f2:	9b04      	ldr	r3, [sp, #16]
900130f4:	2b00      	cmp	r3, #0
900130f6:	d053      	beq.n	900131a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
900130f8:	9903      	ldr	r1, [sp, #12]
900130fa:	4620      	mov	r0, r4
900130fc:	f7ff fd27 	bl	90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>
90013100:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90013104:	b1c0      	cbz	r0, 90013138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013106:	f9b4 e000 	ldrsh.w	lr, [r4]
9001310a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001310e:	4576      	cmp	r6, lr
90013110:	dc23      	bgt.n	9001315a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90013112:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90013116:	44f4      	add	ip, lr
90013118:	fa0f fc8c 	sxth.w	ip, ip
9001311c:	45e0      	cmp	r8, ip
9001311e:	db1c      	blt.n	9001315a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90013120:	428f      	cmp	r7, r1
90013122:	fa1f fc81 	uxth.w	ip, r1
90013126:	88e1      	ldrh	r1, [r4, #6]
90013128:	dc0d      	bgt.n	90013146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
9001312a:	ebaa 0c0c 	sub.w	ip, sl, ip
9001312e:	f8a4 9002 	strh.w	r9, [r4, #2]
90013132:	eba1 010c 	sub.w	r1, r1, ip
90013136:	80e1      	strh	r1, [r4, #6]
90013138:	4628      	mov	r0, r5
9001313a:	9904      	ldr	r1, [sp, #16]
9001313c:	3c08      	subs	r4, #8
9001313e:	4605      	mov	r5, r0
90013140:	3901      	subs	r1, #1
90013142:	9104      	str	r1, [sp, #16]
90013144:	e7d3      	b.n	900130ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
90013146:	4461      	add	r1, ip
90013148:	b209      	sxth	r1, r1
9001314a:	4549      	cmp	r1, r9
9001314c:	dcf5      	bgt.n	9001313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001314e:	9905      	ldr	r1, [sp, #20]
90013150:	eba1 0c0c 	sub.w	ip, r1, ip
90013154:	f8a4 c006 	strh.w	ip, [r4, #6]
90013158:	e7ee      	b.n	90013138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001315a:	428f      	cmp	r7, r1
9001315c:	dced      	bgt.n	9001313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001315e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90013162:	4461      	add	r1, ip
90013164:	b209      	sxth	r1, r1
90013166:	4589      	cmp	r9, r1
90013168:	dbe7      	blt.n	9001313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001316a:	4576      	cmp	r6, lr
9001316c:	fa1f fc8e 	uxth.w	ip, lr
90013170:	88a1      	ldrh	r1, [r4, #4]
90013172:	dc07      	bgt.n	90013184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90013174:	eba2 0c0c 	sub.w	ip, r2, ip
90013178:	f8a4 8000 	strh.w	r8, [r4]
9001317c:	eba1 010c 	sub.w	r1, r1, ip
90013180:	80a1      	strh	r1, [r4, #4]
90013182:	e7d9      	b.n	90013138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013184:	4461      	add	r1, ip
90013186:	b209      	sxth	r1, r1
90013188:	4588      	cmp	r8, r1
9001318a:	dbd6      	blt.n	9001313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001318c:	eba3 0c0c 	sub.w	ip, r3, ip
90013190:	f8a4 c004 	strh.w	ip, [r4, #4]
90013194:	e7d0      	b.n	90013138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013196:	bf00      	nop
90013198:	24026202 	.word	0x24026202
9001319c:	24026200 	.word	0x24026200
900131a0:	2d00      	cmp	r5, #0
900131a2:	f000 816d 	beq.w	90013480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900131a6:	9b06      	ldr	r3, [sp, #24]
900131a8:	445b      	add	r3, fp
900131aa:	461c      	mov	r4, r3
900131ac:	9b02      	ldr	r3, [sp, #8]
900131ae:	3301      	adds	r3, #1
900131b0:	f000 8166 	beq.w	90013480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900131b4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
900131b8:	9803      	ldr	r0, [sp, #12]
900131ba:	4629      	mov	r1, r5
900131bc:	f7ff fd3a 	bl	90012c34 <_ZNK8touchgfx4Rect8includesERKS0_>
900131c0:	b120      	cbz	r0, 900131cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900131c2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900131c6:	9801      	ldr	r0, [sp, #4]
900131c8:	f7ff feb0 	bl	90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900131cc:	9903      	ldr	r1, [sp, #12]
900131ce:	4628      	mov	r0, r5
900131d0:	f7ff fcbd 	bl	90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>
900131d4:	2800      	cmp	r0, #0
900131d6:	f000 809c 	beq.w	90013312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900131da:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
900131de:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900131e2:	fa1f f189 	uxth.w	r1, r9
900131e6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900131ea:	9309      	str	r3, [sp, #36]	; 0x24
900131ec:	eb01 0c03 	add.w	ip, r1, r3
900131f0:	b283      	uxth	r3, r0
900131f2:	4548      	cmp	r0, r9
900131f4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
900131f8:	fa1f fa8c 	uxth.w	sl, ip
900131fc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90013200:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90013204:	eb03 050c 	add.w	r5, r3, ip
90013208:	b2ad      	uxth	r5, r5
9001320a:	9505      	str	r5, [sp, #20]
9001320c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90013210:	9504      	str	r5, [sp, #16]
90013212:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
90013216:	f340 8099 	ble.w	9001334c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001321a:	1a5b      	subs	r3, r3, r1
9001321c:	4596      	cmp	lr, r2
9001321e:	fa0f f08a 	sxth.w	r0, sl
90013222:	b29b      	uxth	r3, r3
90013224:	b21e      	sxth	r6, r3
90013226:	dd2e      	ble.n	90013286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
90013228:	9f02      	ldr	r7, [sp, #8]
9001322a:	fa1f fe8e 	uxth.w	lr, lr
9001322e:	b292      	uxth	r2, r2
90013230:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90013234:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90013238:	9f04      	ldr	r7, [sp, #16]
9001323a:	ebae 0102 	sub.w	r1, lr, r2
9001323e:	44a6      	add	lr, r4
90013240:	1a3f      	subs	r7, r7, r0
90013242:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
90013246:	b289      	uxth	r1, r1
90013248:	4402      	add	r2, r0
9001324a:	fa0f fe8e 	sxth.w	lr, lr
9001324e:	b20d      	sxth	r5, r1
90013250:	b212      	sxth	r2, r2
90013252:	436f      	muls	r7, r5
90013254:	ebae 0202 	sub.w	r2, lr, r2
90013258:	4372      	muls	r2, r6
9001325a:	4297      	cmp	r7, r2
9001325c:	db09      	blt.n	90013272 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
9001325e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90013262:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
90013266:	449c      	add	ip, r3
90013268:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001326c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90013270:	e686      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013272:	4421      	add	r1, r4
90013274:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90013278:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
9001327c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013280:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90013284:	e67c      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013286:	9f04      	ldr	r7, [sp, #16]
90013288:	42b8      	cmp	r0, r7
9001328a:	da27      	bge.n	900132dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
9001328c:	9902      	ldr	r1, [sp, #8]
9001328e:	1a3f      	subs	r7, r7, r0
90013290:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90013294:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90013298:	eb05 010e 	add.w	r1, r5, lr
9001329c:	fa1f f881 	uxth.w	r8, r1
900132a0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
900132a4:	4411      	add	r1, r2
900132a6:	fa0f f988 	sxth.w	r9, r8
900132aa:	eba2 020e 	sub.w	r2, r2, lr
900132ae:	eba1 0108 	sub.w	r1, r1, r8
900132b2:	4372      	muls	r2, r6
900132b4:	b289      	uxth	r1, r1
900132b6:	fa0f f881 	sxth.w	r8, r1
900132ba:	fb08 f707 	mul.w	r7, r8, r7
900132be:	42ba      	cmp	r2, r7
900132c0:	dc06      	bgt.n	900132d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
900132c2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
900132c6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
900132ca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
900132ce:	e7ca      	b.n	90013266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
900132d0:	4429      	add	r1, r5
900132d2:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
900132d6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900132da:	e651      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900132dc:	9805      	ldr	r0, [sp, #20]
900132de:	2d06      	cmp	r5, #6
900132e0:	ebaa 0000 	sub.w	r0, sl, r0
900132e4:	b280      	uxth	r0, r0
900132e6:	fa0f fe80 	sxth.w	lr, r0
900132ea:	d817      	bhi.n	9001331c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
900132ec:	9b04      	ldr	r3, [sp, #16]
900132ee:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
900132f2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900132f6:	1c6b      	adds	r3, r5, #1
900132f8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
900132fc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90013300:	9b01      	ldr	r3, [sp, #4]
90013302:	9801      	ldr	r0, [sp, #4]
90013304:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90013308:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
9001330c:	805a      	strh	r2, [r3, #2]
9001330e:	809e      	strh	r6, [r3, #4]
90013310:	80d9      	strh	r1, [r3, #6]
90013312:	9b02      	ldr	r3, [sp, #8]
90013314:	3c08      	subs	r4, #8
90013316:	3b01      	subs	r3, #1
90013318:	9302      	str	r3, [sp, #8]
9001331a:	e747      	b.n	900131ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
9001331c:	9a02      	ldr	r2, [sp, #8]
9001331e:	45b6      	cmp	lr, r6
90013320:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90013324:	db0d      	blt.n	90013342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90013326:	449c      	add	ip, r3
90013328:	445a      	add	r2, fp
9001332a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
9001332e:	fa1f fc8c 	uxth.w	ip, ip
90013332:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
90013336:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
9001333a:	448c      	add	ip, r1
9001333c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90013340:	e61e      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013342:	445a      	add	r2, fp
90013344:	4484      	add	ip, r0
90013346:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
9001334a:	e78f      	b.n	9001326c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001334c:	fa1f f18e 	uxth.w	r1, lr
90013350:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90013354:	b293      	uxth	r3, r2
90013356:	4596      	cmp	lr, r2
90013358:	eb01 0806 	add.w	r8, r1, r6
9001335c:	9306      	str	r3, [sp, #24]
9001335e:	fa1f f888 	uxth.w	r8, r8
90013362:	9f06      	ldr	r7, [sp, #24]
90013364:	fa0f f388 	sxth.w	r3, r8
90013368:	9307      	str	r3, [sp, #28]
9001336a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
9001336e:	443b      	add	r3, r7
90013370:	b29b      	uxth	r3, r3
90013372:	9308      	str	r3, [sp, #32]
90013374:	da24      	bge.n	900133c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
90013376:	9905      	ldr	r1, [sp, #20]
90013378:	eba3 0308 	sub.w	r3, r3, r8
9001337c:	eba2 020e 	sub.w	r2, r2, lr
90013380:	eba9 0000 	sub.w	r0, r9, r0
90013384:	ebaa 0401 	sub.w	r4, sl, r1
90013388:	b29b      	uxth	r3, r3
9001338a:	b2a4      	uxth	r4, r4
9001338c:	b219      	sxth	r1, r3
9001338e:	b225      	sxth	r5, r4
90013390:	4348      	muls	r0, r1
90013392:	436a      	muls	r2, r5
90013394:	4282      	cmp	r2, r0
90013396:	9a02      	ldr	r2, [sp, #8]
90013398:	ea4f 02c2 	mov.w	r2, r2, lsl #3
9001339c:	445a      	add	r2, fp
9001339e:	dc06      	bgt.n	900133ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
900133a0:	9b07      	ldr	r3, [sp, #28]
900133a2:	44a4      	add	ip, r4
900133a4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
900133a8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
900133ac:	e75e      	b.n	9001326c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900133ae:	9904      	ldr	r1, [sp, #16]
900133b0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
900133b4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
900133b8:	4433      	add	r3, r6
900133ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
900133be:	e5df      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900133c0:	9f06      	ldr	r7, [sp, #24]
900133c2:	9b04      	ldr	r3, [sp, #16]
900133c4:	1bc9      	subs	r1, r1, r7
900133c6:	fa0f f78a 	sxth.w	r7, sl
900133ca:	b289      	uxth	r1, r1
900133cc:	429f      	cmp	r7, r3
900133ce:	fa0f fe81 	sxth.w	lr, r1
900133d2:	dd23      	ble.n	9001341c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
900133d4:	9a05      	ldr	r2, [sp, #20]
900133d6:	eba9 0000 	sub.w	r0, r9, r0
900133da:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900133de:	ebaa 0202 	sub.w	r2, sl, r2
900133e2:	9d07      	ldr	r5, [sp, #28]
900133e4:	fb0e f000 	mul.w	r0, lr, r0
900133e8:	b292      	uxth	r2, r2
900133ea:	eba5 0a03 	sub.w	sl, r5, r3
900133ee:	9b02      	ldr	r3, [sp, #8]
900133f0:	b214      	sxth	r4, r2
900133f2:	00db      	lsls	r3, r3, #3
900133f4:	fb04 fa0a 	mul.w	sl, r4, sl
900133f8:	445b      	add	r3, fp
900133fa:	4550      	cmp	r0, sl
900133fc:	db03      	blt.n	90013406 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
900133fe:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90013402:	4494      	add	ip, r2
90013404:	e732      	b.n	9001326c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90013406:	9a04      	ldr	r2, [sp, #16]
90013408:	4431      	add	r1, r6
9001340a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
9001340e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90013412:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
90013416:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001341a:	e75c      	b.n	900132d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
9001341c:	9b08      	ldr	r3, [sp, #32]
9001341e:	2d06      	cmp	r5, #6
90013420:	eba3 0308 	sub.w	r3, r3, r8
90013424:	b29b      	uxth	r3, r3
90013426:	b218      	sxth	r0, r3
90013428:	d813      	bhi.n	90013452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
9001342a:	9b07      	ldr	r3, [sp, #28]
9001342c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90013430:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90013434:	1c6b      	adds	r3, r5, #1
90013436:	9901      	ldr	r1, [sp, #4]
90013438:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
9001343c:	9b01      	ldr	r3, [sp, #4]
9001343e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90013442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90013446:	805a      	strh	r2, [r3, #2]
90013448:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001344a:	f8a3 e006 	strh.w	lr, [r3, #6]
9001344e:	809a      	strh	r2, [r3, #4]
90013450:	e75f      	b.n	90013312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90013452:	9c02      	ldr	r4, [sp, #8]
90013454:	4570      	cmp	r0, lr
90013456:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001345a:	db0d      	blt.n	90013478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
9001345c:	4431      	add	r1, r6
9001345e:	9b06      	ldr	r3, [sp, #24]
90013460:	445c      	add	r4, fp
90013462:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90013466:	b289      	uxth	r1, r1
90013468:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
9001346c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013470:	4419      	add	r1, r3
90013472:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
90013476:	e583      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013478:	445c      	add	r4, fp
9001347a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
9001347e:	e79b      	b.n	900133b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90013480:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90013484:	2e07      	cmp	r6, #7
90013486:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001348a:	d812      	bhi.n	900134b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
9001348c:	1c75      	adds	r5, r6, #1
9001348e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90013492:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90013496:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001349a:	9d01      	ldr	r5, [sp, #4]
9001349c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
900134a0:	442c      	add	r4, r5
900134a2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
900134a6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
900134aa:	8061      	strh	r1, [r4, #2]
900134ac:	80a2      	strh	r2, [r4, #4]
900134ae:	80e3      	strh	r3, [r4, #6]
900134b0:	e5d0      	b.n	90013054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900134b2:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900134b6:	3e01      	subs	r6, #1
900134b8:	445c      	add	r4, fp
900134ba:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
900134be:	f04f 37ff 	mov.w	r7, #4294967295
900134c2:	2500      	movs	r5, #0
900134c4:	9305      	str	r3, [sp, #20]
900134c6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900134ca:	1e72      	subs	r2, r6, #1
900134cc:	9302      	str	r3, [sp, #8]
900134ce:	4691      	mov	r9, r2
900134d0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
900134d4:	9304      	str	r3, [sp, #16]
900134d6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
900134da:	f1b9 3fff 	cmp.w	r9, #4294967295
900134de:	6818      	ldr	r0, [r3, #0]
900134e0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900134e4:	9207      	str	r2, [sp, #28]
900134e6:	bf16      	itet	ne
900134e8:	9905      	ldrne	r1, [sp, #20]
900134ea:	f8dd e00c 	ldreq.w	lr, [sp, #12]
900134ee:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
900134f2:	9306      	str	r3, [sp, #24]
900134f4:	f8be 1006 	ldrh.w	r1, [lr, #6]
900134f8:	f8be 8004 	ldrh.w	r8, [lr, #4]
900134fc:	fb18 f801 	smulbb	r8, r8, r1
90013500:	6859      	ldr	r1, [r3, #4]
90013502:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90013506:	4671      	mov	r1, lr
90013508:	a80c      	add	r0, sp, #48	; 0x30
9001350a:	f7ff fbb9 	bl	90012c80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001350e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90013512:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90013516:	f04f 0c08 	mov.w	ip, #8
9001351a:	9b04      	ldr	r3, [sp, #16]
9001351c:	9a02      	ldr	r2, [sp, #8]
9001351e:	fb10 f001 	smulbb	r0, r0, r1
90013522:	fb02 8803 	mla	r8, r2, r3, r8
90013526:	eba0 0108 	sub.w	r1, r0, r8
9001352a:	fb90 f0fc 	sdiv	r0, r0, ip
9001352e:	4288      	cmp	r0, r1
90013530:	dc20      	bgt.n	90013574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90013532:	4551      	cmp	r1, sl
90013534:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90013538:	da03      	bge.n	90013542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
9001353a:	b1d9      	cbz	r1, 90013574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
9001353c:	468a      	mov	sl, r1
9001353e:	464f      	mov	r7, r9
90013540:	4635      	mov	r5, r6
90013542:	f109 39ff 	add.w	r9, r9, #4294967295
90013546:	f119 0f02 	cmn.w	r9, #2
9001354a:	d1c6      	bne.n	900134da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
9001354c:	4616      	mov	r6, r2
9001354e:	3201      	adds	r2, #1
90013550:	f1a4 0408 	sub.w	r4, r4, #8
90013554:	d1b7      	bne.n	900134c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90013556:	9b01      	ldr	r3, [sp, #4]
90013558:	b2ac      	uxth	r4, r5
9001355a:	00ed      	lsls	r5, r5, #3
9001355c:	1958      	adds	r0, r3, r5
9001355e:	1c7b      	adds	r3, r7, #1
90013560:	d10b      	bne.n	9001357a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90013562:	4601      	mov	r1, r0
90013564:	9803      	ldr	r0, [sp, #12]
90013566:	f7ff fb8b 	bl	90012c80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001356a:	4621      	mov	r1, r4
9001356c:	9801      	ldr	r0, [sp, #4]
9001356e:	f7ff fcdd 	bl	90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013572:	e505      	b.n	90012f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013574:	464f      	mov	r7, r9
90013576:	4635      	mov	r5, r6
90013578:	e7ed      	b.n	90013556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
9001357a:	9b01      	ldr	r3, [sp, #4]
9001357c:	00ff      	lsls	r7, r7, #3
9001357e:	445d      	add	r5, fp
90013580:	19d9      	adds	r1, r3, r7
90013582:	445f      	add	r7, fp
90013584:	f7ff fb7c 	bl	90012c80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90013588:	9b03      	ldr	r3, [sp, #12]
9001358a:	cb03      	ldmia	r3!, {r0, r1}
9001358c:	9b03      	ldr	r3, [sp, #12]
9001358e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90013592:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90013596:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001359a:	6869      	ldr	r1, [r5, #4]
9001359c:	c303      	stmia	r3!, {r0, r1}
9001359e:	e7e4      	b.n	9001356a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

900135a0 <_ZN8touchgfx11Application10invalidateEv>:
900135a0:	4b09      	ldr	r3, [pc, #36]	; (900135c8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
900135a2:	b082      	sub	sp, #8
900135a4:	2100      	movs	r1, #0
900135a6:	f9b3 2000 	ldrsh.w	r2, [r3]
900135aa:	4b08      	ldr	r3, [pc, #32]	; (900135cc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
900135ac:	9100      	str	r1, [sp, #0]
900135ae:	f9b3 3000 	ldrsh.w	r3, [r3]
900135b2:	f8ad 2004 	strh.w	r2, [sp, #4]
900135b6:	f8ad 3006 	strh.w	r3, [sp, #6]
900135ba:	ab02      	add	r3, sp, #8
900135bc:	e913 0006 	ldmdb	r3, {r1, r2}
900135c0:	b002      	add	sp, #8
900135c2:	f7ff bcc7 	b.w	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900135c6:	bf00      	nop
900135c8:	24026200 	.word	0x24026200
900135cc:	24026202 	.word	0x24026202

900135d0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
900135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900135d4:	f500 7698 	add.w	r6, r0, #304	; 0x130
900135d8:	b09b      	sub	sp, #108	; 0x6c
900135da:	4604      	mov	r4, r0
900135dc:	4630      	mov	r0, r6
900135de:	f7fc fccc 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
900135e2:	4605      	mov	r5, r0
900135e4:	b940      	cbnz	r0, 900135f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
900135e6:	4620      	mov	r0, r4
900135e8:	e896 0006 	ldmia.w	r6, {r1, r2}
900135ec:	f7ff fcb2 	bl	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900135f0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
900135f4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
900135f8:	4bc8      	ldr	r3, [pc, #800]	; (9001391c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
900135fa:	681b      	ldr	r3, [r3, #0]
900135fc:	2b00      	cmp	r3, #0
900135fe:	d03e      	beq.n	9001367e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90013600:	4dc7      	ldr	r5, [pc, #796]	; (90013920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90013602:	4628      	mov	r0, r5
90013604:	f7fc fcb9 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90013608:	4606      	mov	r6, r0
9001360a:	2800      	cmp	r0, #0
9001360c:	d137      	bne.n	9001367e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
9001360e:	4628      	mov	r0, r5
90013610:	f7ff f9e0 	bl	900129d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90013614:	6829      	ldr	r1, [r5, #0]
90013616:	686a      	ldr	r2, [r5, #4]
90013618:	4620      	mov	r0, r4
9001361a:	f7ff fc9b 	bl	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001361e:	802e      	strh	r6, [r5, #0]
90013620:	806e      	strh	r6, [r5, #2]
90013622:	80ae      	strh	r6, [r5, #4]
90013624:	80ee      	strh	r6, [r5, #6]
90013626:	ae09      	add	r6, sp, #36	; 0x24
90013628:	4630      	mov	r0, r6
9001362a:	f7ff fc23 	bl	90012e74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001362e:	4abd      	ldr	r2, [pc, #756]	; (90013924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90013630:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90013634:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90013638:	8815      	ldrh	r5, [r2, #0]
9001363a:	9202      	str	r2, [sp, #8]
9001363c:	462b      	mov	r3, r5
9001363e:	429f      	cmp	r7, r3
90013640:	d924      	bls.n	9001368c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90013642:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90013646:	2907      	cmp	r1, #7
90013648:	d816      	bhi.n	90013678 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
9001364a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
9001364e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90013652:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90013656:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
9001365a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
9001365e:	1c4a      	adds	r2, r1, #1
90013660:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90013664:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90013668:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
9001366c:	f8a2 9002 	strh.w	r9, [r2, #2]
90013670:	f8a2 e004 	strh.w	lr, [r2, #4]
90013674:	f8a2 c006 	strh.w	ip, [r2, #6]
90013678:	3301      	adds	r3, #1
9001367a:	b29b      	uxth	r3, r3
9001367c:	e7df      	b.n	9001363e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
9001367e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013682:	2b00      	cmp	r3, #0
90013684:	d1cf      	bne.n	90013626 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90013686:	b01b      	add	sp, #108	; 0x6c
90013688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001368c:	462f      	mov	r7, r5
9001368e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90013692:	42bb      	cmp	r3, r7
90013694:	d90b      	bls.n	900136ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90013696:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001369a:	3701      	adds	r7, #1
9001369c:	4620      	mov	r0, r4
9001369e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
900136a2:	b2bf      	uxth	r7, r7
900136a4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
900136a8:	f7ff fc54 	bl	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900136ac:	e7ef      	b.n	9001368e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
900136ae:	4a9e      	ldr	r2, [pc, #632]	; (90013928 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
900136b0:	6813      	ldr	r3, [r2, #0]
900136b2:	4690      	mov	r8, r2
900136b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
900136b8:	2b01      	cmp	r3, #1
900136ba:	f040 80e4 	bne.w	90013886 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
900136be:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
900136c2:	4629      	mov	r1, r5
900136c4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900136c8:	2500      	movs	r5, #0
900136ca:	33ae      	adds	r3, #174	; 0xae
900136cc:	428f      	cmp	r7, r1
900136ce:	f103 0308 	add.w	r3, r3, #8
900136d2:	dd0a      	ble.n	900136ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
900136d4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
900136d8:	3101      	adds	r1, #1
900136da:	f833 0c04 	ldrh.w	r0, [r3, #-4]
900136de:	4402      	add	r2, r0
900136e0:	b212      	sxth	r2, r2
900136e2:	4295      	cmp	r5, r2
900136e4:	bfb8      	it	lt
900136e6:	4615      	movlt	r5, r2
900136e8:	e7f0      	b.n	900136cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
900136ea:	4b90      	ldr	r3, [pc, #576]	; (9001392c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
900136ec:	f8df b238 	ldr.w	fp, [pc, #568]	; 90013928 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
900136f0:	881b      	ldrh	r3, [r3, #0]
900136f2:	46d8      	mov	r8, fp
900136f4:	2b0f      	cmp	r3, #15
900136f6:	bf8c      	ite	hi
900136f8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
900136fc:	f04f 0a01 	movls.w	sl, #1
90013700:	2300      	movs	r3, #0
90013702:	e9cd 3305 	strd	r3, r3, [sp, #20]
90013706:	f8bd 701a 	ldrh.w	r7, [sp, #26]
9001370a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9001370e:	4438      	add	r0, r7
90013710:	b207      	sxth	r7, r0
90013712:	f8db 0000 	ldr.w	r0, [fp]
90013716:	42bd      	cmp	r5, r7
90013718:	6803      	ldr	r3, [r0, #0]
9001371a:	f340 8084 	ble.w	90013826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
9001371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90013722:	4798      	blx	r3
90013724:	eb07 030a 	add.w	r3, r7, sl
90013728:	4298      	cmp	r0, r3
9001372a:	da07      	bge.n	9001373c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
9001372c:	4285      	cmp	r5, r0
9001372e:	dd05      	ble.n	9001373c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90013730:	4287      	cmp	r7, r0
90013732:	dd6d      	ble.n	90013810 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90013734:	2f00      	cmp	r7, #0
90013736:	dd6b      	ble.n	90013810 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90013738:	4628      	mov	r0, r5
9001373a:	e004      	b.n	90013746 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
9001373c:	4287      	cmp	r7, r0
9001373e:	dcfb      	bgt.n	90013738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90013740:	42a8      	cmp	r0, r5
90013742:	bfa8      	it	ge
90013744:	4628      	movge	r0, r5
90013746:	4b7a      	ldr	r3, [pc, #488]	; (90013930 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90013748:	1bc0      	subs	r0, r0, r7
9001374a:	2200      	movs	r2, #0
9001374c:	f8ad 7016 	strh.w	r7, [sp, #22]
90013750:	f9b3 3000 	ldrsh.w	r3, [r3]
90013754:	f8ad 2014 	strh.w	r2, [sp, #20]
90013758:	f8ad 3018 	strh.w	r3, [sp, #24]
9001375c:	9b02      	ldr	r3, [sp, #8]
9001375e:	f8ad 001a 	strh.w	r0, [sp, #26]
90013762:	881f      	ldrh	r7, [r3, #0]
90013764:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013768:	42bb      	cmp	r3, r7
9001376a:	d9cc      	bls.n	90013706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
9001376c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90013770:	ab07      	add	r3, sp, #28
90013772:	f852 0fac 	ldr.w	r0, [r2, #172]!
90013776:	6851      	ldr	r1, [r2, #4]
90013778:	c303      	stmia	r3!, {r0, r1}
9001377a:	a905      	add	r1, sp, #20
9001377c:	a807      	add	r0, sp, #28
9001377e:	f7ff f9e6 	bl	90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>
90013782:	2800      	cmp	r0, #0
90013784:	d04c      	beq.n	90013820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90013786:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001378a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
9001378e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90013792:	4686      	mov	lr, r0
90013794:	4290      	cmp	r0, r2
90013796:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001379a:	4448      	add	r0, r9
9001379c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
900137a0:	bfb8      	it	lt
900137a2:	4696      	movlt	lr, r2
900137a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
900137a8:	444a      	add	r2, r9
900137aa:	b280      	uxth	r0, r0
900137ac:	4299      	cmp	r1, r3
900137ae:	468c      	mov	ip, r1
900137b0:	b292      	uxth	r2, r2
900137b2:	9303      	str	r3, [sp, #12]
900137b4:	bfb8      	it	lt
900137b6:	469c      	movlt	ip, r3
900137b8:	b203      	sxth	r3, r0
900137ba:	fa0f f982 	sxth.w	r9, r2
900137be:	f8ad e01c 	strh.w	lr, [sp, #28]
900137c2:	f8ad c01e 	strh.w	ip, [sp, #30]
900137c6:	454b      	cmp	r3, r9
900137c8:	bfb8      	it	lt
900137ca:	4602      	movlt	r2, r0
900137cc:	9b03      	ldr	r3, [sp, #12]
900137ce:	eba2 020e 	sub.w	r2, r2, lr
900137d2:	f8ad 2020 	strh.w	r2, [sp, #32]
900137d6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
900137da:	4411      	add	r1, r2
900137dc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900137e0:	4413      	add	r3, r2
900137e2:	b289      	uxth	r1, r1
900137e4:	b29b      	uxth	r3, r3
900137e6:	b208      	sxth	r0, r1
900137e8:	b21a      	sxth	r2, r3
900137ea:	4290      	cmp	r0, r2
900137ec:	bfb8      	it	lt
900137ee:	460b      	movlt	r3, r1
900137f0:	eba3 030c 	sub.w	r3, r3, ip
900137f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900137f8:	a807      	add	r0, sp, #28
900137fa:	f7fc fbbe 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
900137fe:	b920      	cbnz	r0, 9001380a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90013800:	6823      	ldr	r3, [r4, #0]
90013802:	a907      	add	r1, sp, #28
90013804:	4620      	mov	r0, r4
90013806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013808:	4798      	blx	r3
9001380a:	3701      	adds	r7, #1
9001380c:	b2bf      	uxth	r7, r7
9001380e:	e7a9      	b.n	90013764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90013810:	f8d8 0000 	ldr.w	r0, [r8]
90013814:	2101      	movs	r1, #1
90013816:	6803      	ldr	r3, [r0, #0]
90013818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
9001381c:	4798      	blx	r3
9001381e:	e772      	b.n	90013706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90013820:	e9cd 0007 	strd	r0, r0, [sp, #28]
90013824:	e7e8      	b.n	900137f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90013826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013828:	4798      	blx	r3
9001382a:	4b42      	ldr	r3, [pc, #264]	; (90013934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
9001382c:	781b      	ldrb	r3, [r3, #0]
9001382e:	2b00      	cmp	r3, #0
90013830:	f43f af29 	beq.w	90013686 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90013834:	2300      	movs	r3, #0
90013836:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
9001383a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
9001383e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90013842:	9b02      	ldr	r3, [sp, #8]
90013844:	881b      	ldrh	r3, [r3, #0]
90013846:	429d      	cmp	r5, r3
90013848:	f67f af1d 	bls.w	90013686 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
9001384c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90013850:	2907      	cmp	r1, #7
90013852:	d815      	bhi.n	90013880 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90013854:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90013858:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
9001385c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90013860:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90013864:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90013868:	1c4a      	adds	r2, r1, #1
9001386a:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
9001386e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90013872:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90013876:	f8a2 e002 	strh.w	lr, [r2, #2]
9001387a:	f8a2 c004 	strh.w	ip, [r2, #4]
9001387e:	80d7      	strh	r7, [r2, #6]
90013880:	3301      	adds	r3, #1
90013882:	b29b      	uxth	r3, r3
90013884:	e7df      	b.n	90013846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90013886:	2b02      	cmp	r3, #2
90013888:	f040 8135 	bne.w	90013af6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
9001388c:	4b2a      	ldr	r3, [pc, #168]	; (90013938 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
9001388e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90013892:	781b      	ldrb	r3, [r3, #0]
90013894:	2b01      	cmp	r3, #1
90013896:	f000 809c 	beq.w	900139d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001389a:	9b02      	ldr	r3, [sp, #8]
9001389c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
900138a0:	f8b3 b000 	ldrh.w	fp, [r3]
900138a4:	f10b 0b01 	add.w	fp, fp, #1
900138a8:	fa1f fb8b 	uxth.w	fp, fp
900138ac:	2a00      	cmp	r2, #0
900138ae:	d0bc      	beq.n	9001382a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900138b0:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
900138b4:	4659      	mov	r1, fp
900138b6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
900138ba:	f04f 0800 	mov.w	r8, #0
900138be:	441d      	add	r5, r3
900138c0:	b22d      	sxth	r5, r5
900138c2:	b28b      	uxth	r3, r1
900138c4:	ea4f 07c8 	mov.w	r7, r8, lsl #3
900138c8:	429a      	cmp	r2, r3
900138ca:	f240 80c0 	bls.w	90013a4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
900138ce:	4427      	add	r7, r4
900138d0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
900138d4:	4608      	mov	r0, r1
900138d6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
900138da:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
900138de:	4563      	cmp	r3, ip
900138e0:	f340 80a2 	ble.w	90013a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
900138e4:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
900138e8:	4465      	add	r5, ip
900138ea:	b22d      	sxth	r5, r5
900138ec:	429d      	cmp	r5, r3
900138ee:	bfa8      	it	ge
900138f0:	461d      	movge	r5, r3
900138f2:	3101      	adds	r1, #1
900138f4:	4680      	mov	r8, r0
900138f6:	e7e4      	b.n	900138c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
900138f8:	d10b      	bne.n	90013912 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
900138fa:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
900138fe:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90013902:	458c      	cmp	ip, r1
90013904:	bfb4      	ite	lt
90013906:	469c      	movlt	ip, r3
90013908:	46bc      	movge	ip, r7
9001390a:	4572      	cmp	r2, lr
9001390c:	bfb8      	it	lt
9001390e:	4672      	movlt	r2, lr
90013910:	e087      	b.n	90013a22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90013912:	428a      	cmp	r2, r1
90013914:	46bc      	mov	ip, r7
90013916:	bfb8      	it	lt
90013918:	460a      	movlt	r2, r1
9001391a:	e082      	b.n	90013a22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
9001391c:	24026244 	.word	0x24026244
90013920:	24026250 	.word	0x24026250
90013924:	24000068 	.word	0x24000068
90013928:	2402620c 	.word	0x2402620c
9001392c:	24026202 	.word	0x24026202
90013930:	24026200 	.word	0x24026200
90013934:	2402620a 	.word	0x2402620a
90013938:	24026204 	.word	0x24026204
9001393c:	1961      	adds	r1, r4, r5
9001393e:	ab07      	add	r3, sp, #28
90013940:	f851 0fac 	ldr.w	r0, [r1, #172]!
90013944:	6849      	ldr	r1, [r1, #4]
90013946:	c303      	stmia	r3!, {r0, r1}
90013948:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
9001394c:	a807      	add	r0, sp, #28
9001394e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90013952:	2b13      	cmp	r3, #19
90013954:	440b      	add	r3, r1
90013956:	bfd8      	it	le
90013958:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
9001395c:	1a9b      	subs	r3, r3, r2
9001395e:	f8ad 201c 	strh.w	r2, [sp, #28]
90013962:	f8ad 3020 	strh.w	r3, [sp, #32]
90013966:	f7ff f84f 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001396a:	a807      	add	r0, sp, #28
9001396c:	f7fc fb05 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90013970:	bb78      	cbnz	r0, 900139d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90013972:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90013976:	4425      	add	r5, r4
90013978:	f8d8 0000 	ldr.w	r0, [r8]
9001397c:	f1bc 0f14 	cmp.w	ip, #20
90013980:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90013984:	f8d0 e000 	ldr.w	lr, [r0]
90013988:	bfa8      	it	ge
9001398a:	f04f 0c14 	movge.w	ip, #20
9001398e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90013992:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90013996:	fa1f fc8c 	uxth.w	ip, ip
9001399a:	f8cd c000 	str.w	ip, [sp]
9001399e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
900139a2:	47d0      	blx	sl
900139a4:	4682      	mov	sl, r0
900139a6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
900139aa:	a807      	add	r0, sp, #28
900139ac:	f7ff f812 	bl	900129d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900139b0:	6823      	ldr	r3, [r4, #0]
900139b2:	4620      	mov	r0, r4
900139b4:	a907      	add	r1, sp, #28
900139b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900139b8:	4798      	blx	r3
900139ba:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
900139be:	eba0 000a 	sub.w	r0, r0, sl
900139c2:	b200      	sxth	r0, r0
900139c4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
900139c8:	b918      	cbnz	r0, 900139d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
900139ca:	b2b9      	uxth	r1, r7
900139cc:	4648      	mov	r0, r9
900139ce:	f7ff faad 	bl	90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900139d2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
900139d6:	f1bb 0f00 	cmp.w	fp, #0
900139da:	f43f af26 	beq.w	9001382a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900139de:	9b02      	ldr	r3, [sp, #8]
900139e0:	2700      	movs	r7, #0
900139e2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
900139e6:	881b      	ldrh	r3, [r3, #0]
900139e8:	3301      	adds	r3, #1
900139ea:	b29b      	uxth	r3, r3
900139ec:	b299      	uxth	r1, r3
900139ee:	00fd      	lsls	r5, r7, #3
900139f0:	458b      	cmp	fp, r1
900139f2:	d9a3      	bls.n	9001393c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
900139f4:	4425      	add	r5, r4
900139f6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
900139fa:	469c      	mov	ip, r3
900139fc:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90013a00:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90013a04:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90013a08:	4408      	add	r0, r1
90013a0a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90013a0e:	4471      	add	r1, lr
90013a10:	b200      	sxth	r0, r0
90013a12:	b209      	sxth	r1, r1
90013a14:	4288      	cmp	r0, r1
90013a16:	f6bf af6f 	bge.w	900138f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90013a1a:	4586      	cmp	lr, r0
90013a1c:	4672      	mov	r2, lr
90013a1e:	bfb8      	it	lt
90013a20:	4602      	movlt	r2, r0
90013a22:	3301      	adds	r3, #1
90013a24:	4667      	mov	r7, ip
90013a26:	e7e1      	b.n	900139ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90013a28:	d10c      	bne.n	90013a44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90013a2a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90013a2e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90013a32:	4287      	cmp	r7, r0
90013a34:	bfb4      	ite	lt
90013a36:	4608      	movlt	r0, r1
90013a38:	4640      	movge	r0, r8
90013a3a:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90013a3e:	443b      	add	r3, r7
90013a40:	b21b      	sxth	r3, r3
90013a42:	e753      	b.n	900138ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90013a44:	4565      	cmp	r5, ip
90013a46:	4640      	mov	r0, r8
90013a48:	bfa8      	it	ge
90013a4a:	4665      	movge	r5, ip
90013a4c:	e751      	b.n	900138f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90013a4e:	eb09 0007 	add.w	r0, r9, r7
90013a52:	4427      	add	r7, r4
90013a54:	9203      	str	r2, [sp, #12]
90013a56:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90013a5a:	f1ba 0f13 	cmp.w	sl, #19
90013a5e:	bfde      	ittt	le
90013a60:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90013a64:	4455      	addle	r5, sl
90013a66:	b22d      	sxthle	r5, r5
90013a68:	f7fc fa87 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90013a6c:	9a03      	ldr	r2, [sp, #12]
90013a6e:	2800      	cmp	r0, #0
90013a70:	f47f af1c 	bne.w	900138ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90013a74:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90013a78:	fa1f fa8a 	uxth.w	sl, sl
90013a7c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90013a80:	1aad      	subs	r5, r5, r2
90013a82:	4829      	ldr	r0, [pc, #164]	; (90013b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90013a84:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90013a88:	2d14      	cmp	r5, #20
90013a8a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90013a8e:	6800      	ldr	r0, [r0, #0]
90013a90:	bfa8      	it	ge
90013a92:	2514      	movge	r5, #20
90013a94:	f8ad 101c 	strh.w	r1, [sp, #28]
90013a98:	f8ad 201e 	strh.w	r2, [sp, #30]
90013a9c:	b289      	uxth	r1, r1
90013a9e:	f8ad 3020 	strh.w	r3, [sp, #32]
90013aa2:	b2ad      	uxth	r5, r5
90013aa4:	f8d0 c000 	ldr.w	ip, [r0]
90013aa8:	b292      	uxth	r2, r2
90013aaa:	4555      	cmp	r5, sl
90013aac:	bf94      	ite	ls
90013aae:	9500      	strls	r5, [sp, #0]
90013ab0:	f8cd a000 	strhi.w	sl, [sp]
90013ab4:	b29b      	uxth	r3, r3
90013ab6:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90013aba:	47a8      	blx	r5
90013abc:	6823      	ldr	r3, [r4, #0]
90013abe:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90013ac2:	a907      	add	r1, sp, #28
90013ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013ac6:	4620      	mov	r0, r4
90013ac8:	4798      	blx	r3
90013aca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90013ace:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90013ad2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90013ad6:	1a5b      	subs	r3, r3, r1
90013ad8:	440a      	add	r2, r1
90013ada:	b21b      	sxth	r3, r3
90013adc:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90013ae0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90013ae4:	2b00      	cmp	r3, #0
90013ae6:	f47f aed8 	bne.w	9001389a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90013aea:	fa1f f188 	uxth.w	r1, r8
90013aee:	4648      	mov	r0, r9
90013af0:	f7ff fa1c 	bl	90012f2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013af4:	e6d1      	b.n	9001389a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90013af6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013afa:	42ab      	cmp	r3, r5
90013afc:	f67f ae95 	bls.w	9001382a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90013b00:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90013b04:	ab07      	add	r3, sp, #28
90013b06:	f852 0fac 	ldr.w	r0, [r2, #172]!
90013b0a:	6851      	ldr	r1, [r2, #4]
90013b0c:	c303      	stmia	r3!, {r0, r1}
90013b0e:	a807      	add	r0, sp, #28
90013b10:	f7fc fa33 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90013b14:	b920      	cbnz	r0, 90013b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90013b16:	6823      	ldr	r3, [r4, #0]
90013b18:	a907      	add	r1, sp, #28
90013b1a:	4620      	mov	r0, r4
90013b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013b1e:	4798      	blx	r3
90013b20:	3501      	adds	r5, #1
90013b22:	b2ad      	uxth	r5, r5
90013b24:	e7e7      	b.n	90013af6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90013b26:	bf00      	nop
90013b28:	2402620c 	.word	0x2402620c

90013b2c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90013b2c:	4b03      	ldr	r3, [pc, #12]	; (90013b3c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90013b2e:	2200      	movs	r2, #0
90013b30:	801a      	strh	r2, [r3, #0]
90013b32:	805a      	strh	r2, [r3, #2]
90013b34:	809a      	strh	r2, [r3, #4]
90013b36:	80da      	strh	r2, [r3, #6]
90013b38:	4770      	bx	lr
90013b3a:	bf00      	nop
90013b3c:	24026250 	.word	0x24026250

90013b40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90013b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013b44:	b09d      	sub	sp, #116	; 0x74
90013b46:	4606      	mov	r6, r0
90013b48:	4614      	mov	r4, r2
90013b4a:	468a      	mov	sl, r1
90013b4c:	a803      	add	r0, sp, #12
90013b4e:	461d      	mov	r5, r3
90013b50:	f000 fd7c 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
90013b54:	6833      	ldr	r3, [r6, #0]
90013b56:	4630      	mov	r0, r6
90013b58:	f242 0b0b 	movw	fp, #8203	; 0x200b
90013b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013b5e:	4798      	blx	r3
90013b60:	6833      	ldr	r3, [r6, #0]
90013b62:	4607      	mov	r7, r0
90013b64:	4630      	mov	r0, r6
90013b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013b68:	4798      	blx	r3
90013b6a:	462a      	mov	r2, r5
90013b6c:	2500      	movs	r5, #0
90013b6e:	4621      	mov	r1, r4
90013b70:	9000      	str	r0, [sp, #0]
90013b72:	463b      	mov	r3, r7
90013b74:	462c      	mov	r4, r5
90013b76:	46a9      	mov	r9, r5
90013b78:	46a8      	mov	r8, r5
90013b7a:	a803      	add	r0, sp, #12
90013b7c:	f000 fdb9 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013b80:	2300      	movs	r3, #0
90013b82:	9302      	str	r3, [sp, #8]
90013b84:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013b88:	429c      	cmp	r4, r3
90013b8a:	d002      	beq.n	90013b92 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90013b8c:	455c      	cmp	r4, fp
90013b8e:	bf18      	it	ne
90013b90:	4625      	movne	r5, r4
90013b92:	ab02      	add	r3, sp, #8
90013b94:	4632      	mov	r2, r6
90013b96:	4651      	mov	r1, sl
90013b98:	a803      	add	r0, sp, #12
90013b9a:	f001 f89f 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013b9e:	4604      	mov	r4, r0
90013ba0:	b108      	cbz	r0, 90013ba6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90013ba2:	280a      	cmp	r0, #10
90013ba4:	d10a      	bne.n	90013bbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90013ba6:	45c1      	cmp	r9, r8
90013ba8:	bf38      	it	cc
90013baa:	46c1      	movcc	r9, r8
90013bac:	f04f 0800 	mov.w	r8, #0
90013bb0:	2c00      	cmp	r4, #0
90013bb2:	d1e5      	bne.n	90013b80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90013bb4:	4648      	mov	r0, r9
90013bb6:	b01d      	add	sp, #116	; 0x74
90013bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013bbc:	9a02      	ldr	r2, [sp, #8]
90013bbe:	2a00      	cmp	r2, #0
90013bc0:	d0de      	beq.n	90013b80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90013bc2:	7b57      	ldrb	r7, [r2, #13]
90013bc4:	4629      	mov	r1, r5
90013bc6:	6833      	ldr	r3, [r6, #0]
90013bc8:	007f      	lsls	r7, r7, #1
90013bca:	8894      	ldrh	r4, [r2, #4]
90013bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013bce:	f407 7080 	and.w	r0, r7, #256	; 0x100
90013bd2:	7a97      	ldrb	r7, [r2, #10]
90013bd4:	4307      	orrs	r7, r0
90013bd6:	4630      	mov	r0, r6
90013bd8:	4798      	blx	r3
90013bda:	4438      	add	r0, r7
90013bdc:	4480      	add	r8, r0
90013bde:	fa1f f888 	uxth.w	r8, r8
90013be2:	e7e5      	b.n	90013bb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90013be4 <_ZNK8touchgfx4Font12getCharWidthEt>:
90013be4:	b508      	push	{r3, lr}
90013be6:	6803      	ldr	r3, [r0, #0]
90013be8:	68db      	ldr	r3, [r3, #12]
90013bea:	4798      	blx	r3
90013bec:	b128      	cbz	r0, 90013bfa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90013bee:	7b43      	ldrb	r3, [r0, #13]
90013bf0:	7a80      	ldrb	r0, [r0, #10]
90013bf2:	005b      	lsls	r3, r3, #1
90013bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
90013bf8:	4318      	orrs	r0, r3
90013bfa:	bd08      	pop	{r3, pc}

90013bfc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90013bfc:	b40e      	push	{r1, r2, r3}
90013bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
90013c00:	b09e      	sub	sp, #120	; 0x78
90013c02:	4605      	mov	r5, r0
90013c04:	ab23      	add	r3, sp, #140	; 0x8c
90013c06:	a805      	add	r0, sp, #20
90013c08:	f853 4b04 	ldr.w	r4, [r3], #4
90013c0c:	9303      	str	r3, [sp, #12]
90013c0e:	f000 fd1d 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
90013c12:	682b      	ldr	r3, [r5, #0]
90013c14:	4628      	mov	r0, r5
90013c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013c18:	4798      	blx	r3
90013c1a:	682b      	ldr	r3, [r5, #0]
90013c1c:	4606      	mov	r6, r0
90013c1e:	4628      	mov	r0, r5
90013c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013c22:	4798      	blx	r3
90013c24:	4633      	mov	r3, r6
90013c26:	4621      	mov	r1, r4
90013c28:	ae1e      	add	r6, sp, #120	; 0x78
90013c2a:	2400      	movs	r4, #0
90013c2c:	9000      	str	r0, [sp, #0]
90013c2e:	9a03      	ldr	r2, [sp, #12]
90013c30:	a805      	add	r0, sp, #20
90013c32:	f000 fd5e 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013c36:	f846 4d68 	str.w	r4, [r6, #-104]!
90013c3a:	462a      	mov	r2, r5
90013c3c:	4633      	mov	r3, r6
90013c3e:	4621      	mov	r1, r4
90013c40:	a805      	add	r0, sp, #20
90013c42:	f001 f84b 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013c46:	b300      	cbz	r0, 90013c8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90013c48:	280a      	cmp	r0, #10
90013c4a:	d01a      	beq.n	90013c82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90013c4c:	9f04      	ldr	r7, [sp, #16]
90013c4e:	b1c7      	cbz	r7, 90013c82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90013c50:	7b78      	ldrb	r0, [r7, #13]
90013c52:	7a3b      	ldrb	r3, [r7, #8]
90013c54:	00c1      	lsls	r1, r0, #3
90013c56:	88ea      	ldrh	r2, [r5, #6]
90013c58:	f401 7180 	and.w	r1, r1, #256	; 0x100
90013c5c:	4319      	orrs	r1, r3
90013c5e:	0643      	lsls	r3, r0, #25
90013c60:	ea4f 1000 	mov.w	r0, r0, lsl #4
90013c64:	bf48      	it	mi
90013c66:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90013c6a:	f400 7080 	and.w	r0, r0, #256	; 0x100
90013c6e:	bf48      	it	mi
90013c70:	b219      	sxthmi	r1, r3
90013c72:	79fb      	ldrb	r3, [r7, #7]
90013c74:	4303      	orrs	r3, r0
90013c76:	4413      	add	r3, r2
90013c78:	1a5b      	subs	r3, r3, r1
90013c7a:	b21b      	sxth	r3, r3
90013c7c:	429c      	cmp	r4, r3
90013c7e:	bfb8      	it	lt
90013c80:	461c      	movlt	r4, r3
90013c82:	4633      	mov	r3, r6
90013c84:	462a      	mov	r2, r5
90013c86:	2100      	movs	r1, #0
90013c88:	e7da      	b.n	90013c40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90013c8a:	b2a0      	uxth	r0, r4
90013c8c:	b01e      	add	sp, #120	; 0x78
90013c8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90013c92:	b003      	add	sp, #12
90013c94:	4770      	bx	lr

90013c96 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90013c96:	7a43      	ldrb	r3, [r0, #9]
90013c98:	8880      	ldrh	r0, [r0, #4]
90013c9a:	4418      	add	r0, r3
90013c9c:	b280      	uxth	r0, r0
90013c9e:	4770      	bx	lr

90013ca0 <_ZNK8touchgfx4Font13getFontHeightEv>:
90013ca0:	6803      	ldr	r3, [r0, #0]
90013ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013ca4:	4718      	bx	r3

90013ca6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90013ca6:	b40e      	push	{r1, r2, r3}
90013ca8:	b570      	push	{r4, r5, r6, lr}
90013caa:	b09d      	sub	sp, #116	; 0x74
90013cac:	4604      	mov	r4, r0
90013cae:	ab21      	add	r3, sp, #132	; 0x84
90013cb0:	a803      	add	r0, sp, #12
90013cb2:	f853 5b04 	ldr.w	r5, [r3], #4
90013cb6:	9302      	str	r3, [sp, #8]
90013cb8:	f000 fcc8 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
90013cbc:	6823      	ldr	r3, [r4, #0]
90013cbe:	4620      	mov	r0, r4
90013cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013cc2:	4798      	blx	r3
90013cc4:	6823      	ldr	r3, [r4, #0]
90013cc6:	4606      	mov	r6, r0
90013cc8:	4620      	mov	r0, r4
90013cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013ccc:	2401      	movs	r4, #1
90013cce:	4798      	blx	r3
90013cd0:	4633      	mov	r3, r6
90013cd2:	9000      	str	r0, [sp, #0]
90013cd4:	4629      	mov	r1, r5
90013cd6:	9a02      	ldr	r2, [sp, #8]
90013cd8:	a803      	add	r0, sp, #12
90013cda:	f000 fd0a 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013cde:	a803      	add	r0, sp, #12
90013ce0:	f001 f8c8 	bl	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013ce4:	b2a3      	uxth	r3, r4
90013ce6:	b138      	cbz	r0, 90013cf8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90013ce8:	280a      	cmp	r0, #10
90013cea:	a803      	add	r0, sp, #12
90013cec:	bf04      	itt	eq
90013cee:	3301      	addeq	r3, #1
90013cf0:	b21c      	sxtheq	r4, r3
90013cf2:	f001 f8bf 	bl	90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013cf6:	e7f5      	b.n	90013ce4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90013cf8:	4618      	mov	r0, r3
90013cfa:	b01d      	add	sp, #116	; 0x74
90013cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013d00:	b003      	add	sp, #12
90013d02:	4770      	bx	lr

90013d04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90013d04:	b40e      	push	{r1, r2, r3}
90013d06:	b5f0      	push	{r4, r5, r6, r7, lr}
90013d08:	b09e      	sub	sp, #120	; 0x78
90013d0a:	4604      	mov	r4, r0
90013d0c:	ab23      	add	r3, sp, #140	; 0x8c
90013d0e:	a805      	add	r0, sp, #20
90013d10:	f853 5b04 	ldr.w	r5, [r3], #4
90013d14:	9303      	str	r3, [sp, #12]
90013d16:	f000 fc99 	bl	9001464c <_ZN8touchgfx12TextProviderC1Ev>
90013d1a:	6823      	ldr	r3, [r4, #0]
90013d1c:	4620      	mov	r0, r4
90013d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013d20:	4798      	blx	r3
90013d22:	6823      	ldr	r3, [r4, #0]
90013d24:	4606      	mov	r6, r0
90013d26:	4620      	mov	r0, r4
90013d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013d2a:	4798      	blx	r3
90013d2c:	4633      	mov	r3, r6
90013d2e:	4629      	mov	r1, r5
90013d30:	9000      	str	r0, [sp, #0]
90013d32:	9a03      	ldr	r2, [sp, #12]
90013d34:	a805      	add	r0, sp, #20
90013d36:	f000 fcdc 	bl	900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013d3a:	ad1e      	add	r5, sp, #120	; 0x78
90013d3c:	2100      	movs	r1, #0
90013d3e:	f647 76ff 	movw	r6, #32767	; 0x7fff
90013d42:	4622      	mov	r2, r4
90013d44:	a805      	add	r0, sp, #20
90013d46:	f845 1d68 	str.w	r1, [r5, #-104]!
90013d4a:	462b      	mov	r3, r5
90013d4c:	f000 ffc6 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013d50:	b1d8      	cbz	r0, 90013d8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90013d52:	280a      	cmp	r0, #10
90013d54:	d012      	beq.n	90013d7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90013d56:	9804      	ldr	r0, [sp, #16]
90013d58:	b180      	cbz	r0, 90013d7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90013d5a:	7b47      	ldrb	r7, [r0, #13]
90013d5c:	88e2      	ldrh	r2, [r4, #6]
90013d5e:	00fb      	lsls	r3, r7, #3
90013d60:	f403 7180 	and.w	r1, r3, #256	; 0x100
90013d64:	7a03      	ldrb	r3, [r0, #8]
90013d66:	430b      	orrs	r3, r1
90013d68:	0679      	lsls	r1, r7, #25
90013d6a:	bf44      	itt	mi
90013d6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90013d70:	b21b      	sxthmi	r3, r3
90013d72:	1ad3      	subs	r3, r2, r3
90013d74:	b21b      	sxth	r3, r3
90013d76:	429e      	cmp	r6, r3
90013d78:	bfa8      	it	ge
90013d7a:	461e      	movge	r6, r3
90013d7c:	462b      	mov	r3, r5
90013d7e:	4622      	mov	r2, r4
90013d80:	2100      	movs	r1, #0
90013d82:	a805      	add	r0, sp, #20
90013d84:	f000 ffaa 	bl	90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013d88:	e7e2      	b.n	90013d50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90013d8a:	4630      	mov	r0, r6
90013d8c:	b01e      	add	sp, #120	; 0x78
90013d8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90013d92:	b003      	add	sp, #12
90013d94:	4770      	bx	lr

90013d96 <_ZNK8touchgfx8Drawable10invalidateEv>:
90013d96:	b513      	push	{r0, r1, r4, lr}
90013d98:	6803      	ldr	r3, [r0, #0]
90013d9a:	2400      	movs	r4, #0
90013d9c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90013da0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90013da4:	f8ad 1004 	strh.w	r1, [sp, #4]
90013da8:	4669      	mov	r1, sp
90013daa:	691b      	ldr	r3, [r3, #16]
90013dac:	9400      	str	r4, [sp, #0]
90013dae:	f8ad 2006 	strh.w	r2, [sp, #6]
90013db2:	4798      	blx	r3
90013db4:	b002      	add	sp, #8
90013db6:	bd10      	pop	{r4, pc}

90013db8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90013db8:	b538      	push	{r3, r4, r5, lr}
90013dba:	680b      	ldr	r3, [r1, #0]
90013dbc:	460c      	mov	r4, r1
90013dbe:	4605      	mov	r5, r0
90013dc0:	68db      	ldr	r3, [r3, #12]
90013dc2:	4798      	blx	r3
90013dc4:	6823      	ldr	r3, [r4, #0]
90013dc6:	4620      	mov	r0, r4
90013dc8:	4629      	mov	r1, r5
90013dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013dcc:	4798      	blx	r3
90013dce:	4628      	mov	r0, r5
90013dd0:	bd38      	pop	{r3, r4, r5, pc}

90013dd2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90013dd2:	b410      	push	{r4}
90013dd4:	880a      	ldrh	r2, [r1, #0]
90013dd6:	8884      	ldrh	r4, [r0, #4]
90013dd8:	4422      	add	r2, r4
90013dda:	800a      	strh	r2, [r1, #0]
90013ddc:	884a      	ldrh	r2, [r1, #2]
90013dde:	88c4      	ldrh	r4, [r0, #6]
90013de0:	4422      	add	r2, r4
90013de2:	804a      	strh	r2, [r1, #2]
90013de4:	6940      	ldr	r0, [r0, #20]
90013de6:	b120      	cbz	r0, 90013df2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90013de8:	6803      	ldr	r3, [r0, #0]
90013dea:	f85d 4b04 	ldr.w	r4, [sp], #4
90013dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013df0:	4718      	bx	r3
90013df2:	f85d 4b04 	ldr.w	r4, [sp], #4
90013df6:	4770      	bx	lr

90013df8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90013df8:	b570      	push	{r4, r5, r6, lr}
90013dfa:	8882      	ldrh	r2, [r0, #4]
90013dfc:	460c      	mov	r4, r1
90013dfe:	880b      	ldrh	r3, [r1, #0]
90013e00:	4605      	mov	r5, r0
90013e02:	4413      	add	r3, r2
90013e04:	800b      	strh	r3, [r1, #0]
90013e06:	884b      	ldrh	r3, [r1, #2]
90013e08:	88c2      	ldrh	r2, [r0, #6]
90013e0a:	4413      	add	r3, r2
90013e0c:	804b      	strh	r3, [r1, #2]
90013e0e:	1d01      	adds	r1, r0, #4
90013e10:	4620      	mov	r0, r4
90013e12:	f7fc f86f 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90013e16:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90013e1a:	2b00      	cmp	r3, #0
90013e1c:	dd0b      	ble.n	90013e36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013e1e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90013e22:	2b00      	cmp	r3, #0
90013e24:	dd07      	ble.n	90013e36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013e26:	6968      	ldr	r0, [r5, #20]
90013e28:	b128      	cbz	r0, 90013e36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013e2a:	6803      	ldr	r3, [r0, #0]
90013e2c:	4621      	mov	r1, r4
90013e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e34:	4718      	bx	r3
90013e36:	bd70      	pop	{r4, r5, r6, pc}

90013e38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90013e38:	b570      	push	{r4, r5, r6, lr}
90013e3a:	8882      	ldrh	r2, [r0, #4]
90013e3c:	460c      	mov	r4, r1
90013e3e:	880b      	ldrh	r3, [r1, #0]
90013e40:	4605      	mov	r5, r0
90013e42:	4413      	add	r3, r2
90013e44:	800b      	strh	r3, [r1, #0]
90013e46:	884b      	ldrh	r3, [r1, #2]
90013e48:	88c2      	ldrh	r2, [r0, #6]
90013e4a:	4413      	add	r3, r2
90013e4c:	804b      	strh	r3, [r1, #2]
90013e4e:	1d01      	adds	r1, r0, #4
90013e50:	4620      	mov	r0, r4
90013e52:	f7fc f84f 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90013e56:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90013e5a:	2b00      	cmp	r3, #0
90013e5c:	dd18      	ble.n	90013e90 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013e5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90013e62:	2b00      	cmp	r3, #0
90013e64:	dd14      	ble.n	90013e90 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013e66:	6968      	ldr	r0, [r5, #20]
90013e68:	b128      	cbz	r0, 90013e76 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90013e6a:	6803      	ldr	r3, [r0, #0]
90013e6c:	4621      	mov	r1, r4
90013e6e:	691b      	ldr	r3, [r3, #16]
90013e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e74:	4718      	bx	r3
90013e76:	4b07      	ldr	r3, [pc, #28]	; (90013e94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90013e78:	681b      	ldr	r3, [r3, #0]
90013e7a:	3304      	adds	r3, #4
90013e7c:	429d      	cmp	r5, r3
90013e7e:	d107      	bne.n	90013e90 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013e80:	f7fe ff44 	bl	90012d0c <_ZN8touchgfx11Application11getInstanceEv>
90013e84:	6821      	ldr	r1, [r4, #0]
90013e86:	6862      	ldr	r2, [r4, #4]
90013e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e8c:	f7ff b862 	b.w	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90013e90:	bd70      	pop	{r4, r5, r6, pc}
90013e92:	bf00      	nop
90013e94:	24026248 	.word	0x24026248

90013e98 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90013e98:	b570      	push	{r4, r5, r6, lr}
90013e9a:	4604      	mov	r4, r0
90013e9c:	4616      	mov	r6, r2
90013e9e:	460d      	mov	r5, r1
90013ea0:	b901      	cbnz	r1, 90013ea4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90013ea2:	b192      	cbz	r2, 90013eca <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90013ea4:	6823      	ldr	r3, [r4, #0]
90013ea6:	4620      	mov	r0, r4
90013ea8:	699b      	ldr	r3, [r3, #24]
90013eaa:	4798      	blx	r3
90013eac:	88e2      	ldrh	r2, [r4, #6]
90013eae:	88a1      	ldrh	r1, [r4, #4]
90013eb0:	4620      	mov	r0, r4
90013eb2:	4432      	add	r2, r6
90013eb4:	4429      	add	r1, r5
90013eb6:	b212      	sxth	r2, r2
90013eb8:	b209      	sxth	r1, r1
90013eba:	f7fc faeb 	bl	90010494 <_ZN8touchgfx8Drawable5setXYEss>
90013ebe:	6823      	ldr	r3, [r4, #0]
90013ec0:	4620      	mov	r0, r4
90013ec2:	699b      	ldr	r3, [r3, #24]
90013ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013ec8:	4718      	bx	r3
90013eca:	bd70      	pop	{r4, r5, r6, pc}

90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90013ecc:	b510      	push	{r4, lr}
90013ece:	2300      	movs	r3, #0
90013ed0:	4604      	mov	r4, r0
90013ed2:	4608      	mov	r0, r1
90013ed4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90013ed8:	8023      	strh	r3, [r4, #0]
90013eda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90013ede:	8063      	strh	r3, [r4, #2]
90013ee0:	6803      	ldr	r3, [r0, #0]
90013ee2:	80a1      	strh	r1, [r4, #4]
90013ee4:	4621      	mov	r1, r4
90013ee6:	80e2      	strh	r2, [r4, #6]
90013ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013eea:	4798      	blx	r3
90013eec:	4620      	mov	r0, r4
90013eee:	bd10      	pop	{r4, pc}

90013ef0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90013ef0:	b530      	push	{r4, r5, lr}
90013ef2:	8083      	strh	r3, [r0, #4]
90013ef4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90013ef8:	f89d 5018 	ldrb.w	r5, [sp, #24]
90013efc:	80c3      	strh	r3, [r0, #6]
90013efe:	f89d 3010 	ldrb.w	r3, [sp, #16]
90013f02:	6141      	str	r1, [r0, #20]
90013f04:	7203      	strb	r3, [r0, #8]
90013f06:	f89d 3014 	ldrb.w	r3, [sp, #20]
90013f0a:	8302      	strh	r2, [r0, #24]
90013f0c:	7243      	strb	r3, [r0, #9]
90013f0e:	7a83      	ldrb	r3, [r0, #10]
90013f10:	f365 0306 	bfi	r3, r5, #0, #7
90013f14:	f89d 501c 	ldrb.w	r5, [sp, #28]
90013f18:	f365 13c7 	bfi	r3, r5, #7, #1
90013f1c:	7283      	strb	r3, [r0, #10]
90013f1e:	f89d 3020 	ldrb.w	r3, [sp, #32]
90013f22:	72c3      	strb	r3, [r0, #11]
90013f24:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90013f28:	7303      	strb	r3, [r0, #12]
90013f2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90013f2e:	81c3      	strh	r3, [r0, #14]
90013f30:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90013f34:	8203      	strh	r3, [r0, #16]
90013f36:	4b01      	ldr	r3, [pc, #4]	; (90013f3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90013f38:	6003      	str	r3, [r0, #0]
90013f3a:	bd30      	pop	{r4, r5, pc}
90013f3c:	90025870 	.word	0x90025870

90013f40 <_ZNK8touchgfx9ConstFont4findEt>:
90013f40:	b5f0      	push	{r4, r5, r6, r7, lr}
90013f42:	6944      	ldr	r4, [r0, #20]
90013f44:	b3bc      	cbz	r4, 90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f46:	88a3      	ldrh	r3, [r4, #4]
90013f48:	8b02      	ldrh	r2, [r0, #24]
90013f4a:	1acb      	subs	r3, r1, r3
90013f4c:	f102 32ff 	add.w	r2, r2, #4294967295
90013f50:	d431      	bmi.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f52:	4293      	cmp	r3, r2
90013f54:	dd0c      	ble.n	90013f70 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90013f56:	230e      	movs	r3, #14
90013f58:	fb03 4302 	mla	r3, r3, r2, r4
90013f5c:	889b      	ldrh	r3, [r3, #4]
90013f5e:	1a5b      	subs	r3, r3, r1
90013f60:	1ad3      	subs	r3, r2, r3
90013f62:	429a      	cmp	r2, r3
90013f64:	db27      	blt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f66:	2b00      	cmp	r3, #0
90013f68:	bfbc      	itt	lt
90013f6a:	2302      	movlt	r3, #2
90013f6c:	fb92 f3f3 	sdivlt	r3, r2, r3
90013f70:	2500      	movs	r5, #0
90013f72:	260e      	movs	r6, #14
90013f74:	4295      	cmp	r5, r2
90013f76:	dc1e      	bgt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f78:	fb06 4003 	mla	r0, r6, r3, r4
90013f7c:	8887      	ldrh	r7, [r0, #4]
90013f7e:	42b9      	cmp	r1, r7
90013f80:	d01a      	beq.n	90013fb8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
90013f82:	d20d      	bcs.n	90013fa0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90013f84:	1e5a      	subs	r2, r3, #1
90013f86:	4295      	cmp	r5, r2
90013f88:	dc15      	bgt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f8a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90013f8e:	1a5b      	subs	r3, r3, r1
90013f90:	1ad3      	subs	r3, r2, r3
90013f92:	429a      	cmp	r2, r3
90013f94:	db0f      	blt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f96:	429d      	cmp	r5, r3
90013f98:	ddec      	ble.n	90013f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013f9a:	1953      	adds	r3, r2, r5
90013f9c:	105b      	asrs	r3, r3, #1
90013f9e:	e7e9      	b.n	90013f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013fa0:	1c5d      	adds	r5, r3, #1
90013fa2:	42aa      	cmp	r2, r5
90013fa4:	db07      	blt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013fa6:	8a43      	ldrh	r3, [r0, #18]
90013fa8:	1acb      	subs	r3, r1, r3
90013faa:	442b      	add	r3, r5
90013fac:	429d      	cmp	r5, r3
90013fae:	dc02      	bgt.n	90013fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013fb0:	429a      	cmp	r2, r3
90013fb2:	dadf      	bge.n	90013f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013fb4:	e7f1      	b.n	90013f9a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90013fb6:	2000      	movs	r0, #0
90013fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

90013fba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90013fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013fbc:	4604      	mov	r4, r0
90013fbe:	4617      	mov	r7, r2
90013fc0:	461e      	mov	r6, r3
90013fc2:	b911      	cbnz	r1, 90013fca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90013fc4:	2500      	movs	r5, #0
90013fc6:	4628      	mov	r0, r5
90013fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013fca:	290a      	cmp	r1, #10
90013fcc:	d0fa      	beq.n	90013fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013fce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90013fd2:	4291      	cmp	r1, r2
90013fd4:	d0f6      	beq.n	90013fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013fd6:	f242 020b 	movw	r2, #8203	; 0x200b
90013fda:	4291      	cmp	r1, r2
90013fdc:	d0f2      	beq.n	90013fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013fde:	f7ff ffaf 	bl	90013f40 <_ZNK8touchgfx9ConstFont4findEt>
90013fe2:	4605      	mov	r5, r0
90013fe4:	b950      	cbnz	r0, 90013ffc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90013fe6:	6823      	ldr	r3, [r4, #0]
90013fe8:	4620      	mov	r0, r4
90013fea:	691b      	ldr	r3, [r3, #16]
90013fec:	4798      	blx	r3
90013fee:	4601      	mov	r1, r0
90013ff0:	4620      	mov	r0, r4
90013ff2:	f7ff ffa5 	bl	90013f40 <_ZNK8touchgfx9ConstFont4findEt>
90013ff6:	4605      	mov	r5, r0
90013ff8:	2800      	cmp	r0, #0
90013ffa:	d0e3      	beq.n	90013fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013ffc:	6823      	ldr	r3, [r4, #0]
90013ffe:	4629      	mov	r1, r5
90014000:	4620      	mov	r0, r4
90014002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90014004:	4798      	blx	r3
90014006:	6038      	str	r0, [r7, #0]
90014008:	6823      	ldr	r3, [r4, #0]
9001400a:	4620      	mov	r0, r4
9001400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001400e:	4798      	blx	r3
90014010:	7030      	strb	r0, [r6, #0]
90014012:	e7d8      	b.n	90013fc6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90014014 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90014014:	2000      	movs	r0, #0
90014016:	4770      	bx	lr

90014018 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90014018:	2001      	movs	r0, #1
9001401a:	4770      	bx	lr

9001401c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
9001401c:	2002      	movs	r0, #2
9001401e:	4770      	bx	lr

90014020 <_ZN8touchgfx6ScreenD1Ev>:
90014020:	4770      	bx	lr

90014022 <_ZN8touchgfx6Screen11setupScreenEv>:
90014022:	4770      	bx	lr

90014024 <_ZN8touchgfx12GestureEventD1Ev>:
90014024:	4770      	bx	lr

90014026 <_ZN8touchgfx9DragEventD1Ev>:
90014026:	4770      	bx	lr

90014028 <_ZN8touchgfx10ClickEventD1Ev>:
90014028:	4770      	bx	lr

9001402a <_ZN8touchgfx10ClickEventD0Ev>:
9001402a:	b510      	push	{r4, lr}
9001402c:	4604      	mov	r4, r0
9001402e:	210c      	movs	r1, #12
90014030:	f00d fc67 	bl	90021902 <_ZdlPvj>
90014034:	4620      	mov	r0, r4
90014036:	bd10      	pop	{r4, pc}

90014038 <_ZN8touchgfx9DragEventD0Ev>:
90014038:	b510      	push	{r4, lr}
9001403a:	4604      	mov	r4, r0
9001403c:	2110      	movs	r1, #16
9001403e:	f00d fc60 	bl	90021902 <_ZdlPvj>
90014042:	4620      	mov	r0, r4
90014044:	bd10      	pop	{r4, pc}

90014046 <_ZN8touchgfx12GestureEventD0Ev>:
90014046:	b510      	push	{r4, lr}
90014048:	4604      	mov	r4, r0
9001404a:	210c      	movs	r1, #12
9001404c:	f00d fc59 	bl	90021902 <_ZdlPvj>
90014050:	4620      	mov	r0, r4
90014052:	bd10      	pop	{r4, pc}

90014054 <_ZN8touchgfx6ScreenD0Ev>:
90014054:	b510      	push	{r4, lr}
90014056:	4604      	mov	r4, r0
90014058:	213c      	movs	r1, #60	; 0x3c
9001405a:	f00d fc52 	bl	90021902 <_ZdlPvj>
9001405e:	4620      	mov	r0, r4
90014060:	bd10      	pop	{r4, pc}
	...

90014064 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90014064:	b530      	push	{r4, r5, lr}
90014066:	460d      	mov	r5, r1
90014068:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001406a:	b087      	sub	sp, #28
9001406c:	4604      	mov	r4, r0
9001406e:	b301      	cbz	r1, 900140b2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90014070:	a801      	add	r0, sp, #4
90014072:	f7ff ff2b 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014076:	892a      	ldrh	r2, [r5, #8]
90014078:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001407c:	7928      	ldrb	r0, [r5, #4]
9001407e:	1ad2      	subs	r2, r2, r3
90014080:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014082:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90014086:	441a      	add	r2, r3
90014088:	896b      	ldrh	r3, [r5, #10]
9001408a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001408e:	f88d 0010 	strb.w	r0, [sp, #16]
90014092:	1b5b      	subs	r3, r3, r5
90014094:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90014096:	6b20      	ldr	r0, [r4, #48]	; 0x30
90014098:	442b      	add	r3, r5
9001409a:	4d07      	ldr	r5, [pc, #28]	; (900140b8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001409c:	f8ad 1012 	strh.w	r1, [sp, #18]
900140a0:	a903      	add	r1, sp, #12
900140a2:	9503      	str	r5, [sp, #12]
900140a4:	f8ad 2014 	strh.w	r2, [sp, #20]
900140a8:	f8ad 3016 	strh.w	r3, [sp, #22]
900140ac:	6803      	ldr	r3, [r0, #0]
900140ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900140b0:	4798      	blx	r3
900140b2:	b007      	add	sp, #28
900140b4:	bd30      	pop	{r4, r5, pc}
900140b6:	bf00      	nop
900140b8:	900258f8 	.word	0x900258f8

900140bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
900140bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900140c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
900140c2:	b08a      	sub	sp, #40	; 0x28
900140c4:	4604      	mov	r4, r0
900140c6:	460d      	mov	r5, r1
900140c8:	b113      	cbz	r3, 900140d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
900140ca:	790b      	ldrb	r3, [r1, #4]
900140cc:	2b00      	cmp	r3, #0
900140ce:	d044      	beq.n	9001415a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900140d0:	f104 0804 	add.w	r8, r4, #4
900140d4:	a803      	add	r0, sp, #12
900140d6:	4641      	mov	r1, r8
900140d8:	f7ff fef8 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900140dc:	792b      	ldrb	r3, [r5, #4]
900140de:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
900140e2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900140e6:	b983      	cbnz	r3, 9001410a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
900140e8:	f104 0336 	add.w	r3, r4, #54	; 0x36
900140ec:	892a      	ldrh	r2, [r5, #8]
900140ee:	88e9      	ldrh	r1, [r5, #6]
900140f0:	4640      	mov	r0, r8
900140f2:	1b92      	subs	r2, r2, r6
900140f4:	9301      	str	r3, [sp, #4]
900140f6:	1bc9      	subs	r1, r1, r7
900140f8:	f104 0334 	add.w	r3, r4, #52	; 0x34
900140fc:	b212      	sxth	r2, r2
900140fe:	9300      	str	r3, [sp, #0]
90014100:	b209      	sxth	r1, r1
90014102:	f104 0330 	add.w	r3, r4, #48	; 0x30
90014106:	f7fb fe13 	bl	9000fd30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
9001410a:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001410c:	b329      	cbz	r1, 9001415a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001410e:	a805      	add	r0, sp, #20
90014110:	f7ff fedc 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014114:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90014118:	792b      	ldrb	r3, [r5, #4]
9001411a:	a907      	add	r1, sp, #28
9001411c:	1abf      	subs	r7, r7, r2
9001411e:	88ea      	ldrh	r2, [r5, #6]
90014120:	6b20      	ldr	r0, [r4, #48]	; 0x30
90014122:	4417      	add	r7, r2
90014124:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
90014126:	f88d 3020 	strb.w	r3, [sp, #32]
9001412a:	4417      	add	r7, r2
9001412c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90014130:	1ab6      	subs	r6, r6, r2
90014132:	892a      	ldrh	r2, [r5, #8]
90014134:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90014138:	4416      	add	r6, r2
9001413a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001413c:	4416      	add	r6, r2
9001413e:	4a08      	ldr	r2, [pc, #32]	; (90014160 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90014140:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
90014144:	2600      	movs	r6, #0
90014146:	9207      	str	r2, [sp, #28]
90014148:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
9001414c:	6803      	ldr	r3, [r0, #0]
9001414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90014150:	4798      	blx	r3
90014152:	792b      	ldrb	r3, [r5, #4]
90014154:	b10b      	cbz	r3, 9001415a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90014156:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
9001415a:	b00a      	add	sp, #40	; 0x28
9001415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014160:	900258d0 	.word	0x900258d0

90014164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90014164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014168:	460c      	mov	r4, r1
9001416a:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001416c:	b088      	sub	sp, #32
9001416e:	4605      	mov	r5, r0
90014170:	2900      	cmp	r1, #0
90014172:	d06d      	beq.n	90014250 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90014174:	4668      	mov	r0, sp
90014176:	f7ff fea9 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001417a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
9001417c:	88e3      	ldrh	r3, [r4, #6]
9001417e:	f9bd 8000 	ldrsh.w	r8, [sp]
90014182:	440b      	add	r3, r1
90014184:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90014188:	b21b      	sxth	r3, r3
9001418a:	4543      	cmp	r3, r8
9001418c:	db31      	blt.n	900141f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001418e:	f8bd c004 	ldrh.w	ip, [sp, #4]
90014192:	44c4      	add	ip, r8
90014194:	fa0f fc8c 	sxth.w	ip, ip
90014198:	4563      	cmp	r3, ip
9001419a:	da2a      	bge.n	900141f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001419c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
9001419e:	8926      	ldrh	r6, [r4, #8]
900141a0:	4416      	add	r6, r2
900141a2:	b236      	sxth	r6, r6
900141a4:	42be      	cmp	r6, r7
900141a6:	db24      	blt.n	900141f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900141a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
900141ac:	4438      	add	r0, r7
900141ae:	b200      	sxth	r0, r0
900141b0:	4286      	cmp	r6, r0
900141b2:	da1e      	bge.n	900141f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900141b4:	8963      	ldrh	r3, [r4, #10]
900141b6:	4419      	add	r1, r3
900141b8:	b209      	sxth	r1, r1
900141ba:	4541      	cmp	r1, r8
900141bc:	db08      	blt.n	900141d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900141be:	4561      	cmp	r1, ip
900141c0:	da06      	bge.n	900141d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900141c2:	89a3      	ldrh	r3, [r4, #12]
900141c4:	441a      	add	r2, r3
900141c6:	b212      	sxth	r2, r2
900141c8:	42ba      	cmp	r2, r7
900141ca:	db01      	blt.n	900141d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900141cc:	4282      	cmp	r2, r0
900141ce:	db10      	blt.n	900141f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900141d0:	4b21      	ldr	r3, [pc, #132]	; (90014258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
900141d2:	a904      	add	r1, sp, #16
900141d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
900141d6:	9304      	str	r3, [sp, #16]
900141d8:	2302      	movs	r3, #2
900141da:	f88d 3014 	strb.w	r3, [sp, #20]
900141de:	2300      	movs	r3, #0
900141e0:	f8ad 3016 	strh.w	r3, [sp, #22]
900141e4:	f8ad 3018 	strh.w	r3, [sp, #24]
900141e8:	f8ad 301a 	strh.w	r3, [sp, #26]
900141ec:	6803      	ldr	r3, [r0, #0]
900141ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900141f0:	4798      	blx	r3
900141f2:	1d29      	adds	r1, r5, #4
900141f4:	a802      	add	r0, sp, #8
900141f6:	f7ff fe69 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900141fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900141fe:	88e0      	ldrh	r0, [r4, #6]
90014200:	eba3 0808 	sub.w	r8, r3, r8
90014204:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90014208:	7921      	ldrb	r1, [r4, #4]
9001420a:	fa1f f888 	uxth.w	r8, r8
9001420e:	1bdf      	subs	r7, r3, r7
90014210:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
90014214:	b2bb      	uxth	r3, r7
90014216:	4440      	add	r0, r8
90014218:	8922      	ldrh	r2, [r4, #8]
9001421a:	8967      	ldrh	r7, [r4, #10]
9001421c:	4460      	add	r0, ip
9001421e:	89a4      	ldrh	r4, [r4, #12]
90014220:	441a      	add	r2, r3
90014222:	8eee      	ldrh	r6, [r5, #54]	; 0x36
90014224:	44b8      	add	r8, r7
90014226:	4423      	add	r3, r4
90014228:	f8ad 0016 	strh.w	r0, [sp, #22]
9001422c:	4432      	add	r2, r6
9001422e:	44e0      	add	r8, ip
90014230:	4433      	add	r3, r6
90014232:	4c0a      	ldr	r4, [pc, #40]	; (9001425c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90014234:	6b28      	ldr	r0, [r5, #48]	; 0x30
90014236:	f88d 1014 	strb.w	r1, [sp, #20]
9001423a:	a904      	add	r1, sp, #16
9001423c:	9404      	str	r4, [sp, #16]
9001423e:	f8ad 2018 	strh.w	r2, [sp, #24]
90014242:	f8ad 801a 	strh.w	r8, [sp, #26]
90014246:	f8ad 301c 	strh.w	r3, [sp, #28]
9001424a:	6803      	ldr	r3, [r0, #0]
9001424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001424e:	4798      	blx	r3
90014250:	b008      	add	sp, #32
90014252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014256:	bf00      	nop
90014258:	900258d0 	.word	0x900258d0
9001425c:	900258e4 	.word	0x900258e4

90014260 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90014260:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014262:	4604      	mov	r4, r0
90014264:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90014268:	3201      	adds	r2, #1
9001426a:	d112      	bne.n	90014292 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
9001426c:	2500      	movs	r5, #0
9001426e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90014272:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014276:	6803      	ldr	r3, [r0, #0]
90014278:	9500      	str	r5, [sp, #0]
9001427a:	466d      	mov	r5, sp
9001427c:	f8ad 1004 	strh.w	r1, [sp, #4]
90014280:	f8ad 2006 	strh.w	r2, [sp, #6]
90014284:	4629      	mov	r1, r5
90014286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014288:	4798      	blx	r3
9001428a:	e895 0003 	ldmia.w	r5, {r0, r1}
9001428e:	e884 0003 	stmia.w	r4, {r0, r1}
90014292:	4620      	mov	r0, r4
90014294:	b003      	add	sp, #12
90014296:	bd30      	pop	{r4, r5, pc}

90014298 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90014298:	b513      	push	{r0, r1, r4, lr}
9001429a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
9001429e:	4604      	mov	r4, r0
900142a0:	3301      	adds	r3, #1
900142a2:	d109      	bne.n	900142b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
900142a4:	4601      	mov	r1, r0
900142a6:	4668      	mov	r0, sp
900142a8:	f7ff fe10 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900142ac:	f8bd 3000 	ldrh.w	r3, [sp]
900142b0:	8423      	strh	r3, [r4, #32]
900142b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900142b6:	8463      	strh	r3, [r4, #34]	; 0x22
900142b8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
900142bc:	b002      	add	sp, #8
900142be:	bd10      	pop	{r4, pc}

900142c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900142c0:	b513      	push	{r0, r1, r4, lr}
900142c2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
900142c6:	4604      	mov	r4, r0
900142c8:	3301      	adds	r3, #1
900142ca:	d109      	bne.n	900142e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900142cc:	4601      	mov	r1, r0
900142ce:	4668      	mov	r0, sp
900142d0:	f7ff fdfc 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900142d4:	f8bd 3000 	ldrh.w	r3, [sp]
900142d8:	8423      	strh	r3, [r4, #32]
900142da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900142de:	8463      	strh	r3, [r4, #34]	; 0x22
900142e0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
900142e4:	b002      	add	sp, #8
900142e6:	bd10      	pop	{r4, pc}

900142e8 <_ZN8touchgfx6ScreenC1Ev>:
900142e8:	b570      	push	{r4, r5, r6, lr}
900142ea:	4b17      	ldr	r3, [pc, #92]	; (90014348 <_ZN8touchgfx6ScreenC1Ev+0x60>)
900142ec:	4605      	mov	r5, r0
900142ee:	4a17      	ldr	r2, [pc, #92]	; (9001434c <_ZN8touchgfx6ScreenC1Ev+0x64>)
900142f0:	2101      	movs	r1, #1
900142f2:	f845 3b04 	str.w	r3, [r5], #4
900142f6:	2300      	movs	r3, #0
900142f8:	6042      	str	r2, [r0, #4]
900142fa:	4604      	mov	r4, r0
900142fc:	8103      	strh	r3, [r0, #8]
900142fe:	8143      	strh	r3, [r0, #10]
90014300:	8183      	strh	r3, [r0, #12]
90014302:	81c3      	strh	r3, [r0, #14]
90014304:	8203      	strh	r3, [r0, #16]
90014306:	8243      	strh	r3, [r0, #18]
90014308:	8283      	strh	r3, [r0, #20]
9001430a:	82c3      	strh	r3, [r0, #22]
9001430c:	6203      	str	r3, [r0, #32]
9001430e:	8483      	strh	r3, [r0, #36]	; 0x24
90014310:	84c3      	strh	r3, [r0, #38]	; 0x26
90014312:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90014316:	6343      	str	r3, [r0, #52]	; 0x34
90014318:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
9001431c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90014320:	e9c0 3306 	strd	r3, r3, [r0, #24]
90014324:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90014328:	4b09      	ldr	r3, [pc, #36]	; (90014350 <_ZN8touchgfx6ScreenC1Ev+0x68>)
9001432a:	4628      	mov	r0, r5
9001432c:	f9b3 6000 	ldrsh.w	r6, [r3]
90014330:	6b93      	ldr	r3, [r2, #56]	; 0x38
90014332:	4a08      	ldr	r2, [pc, #32]	; (90014354 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
90014334:	f9b2 1000 	ldrsh.w	r1, [r2]
90014338:	4798      	blx	r3
9001433a:	6863      	ldr	r3, [r4, #4]
9001433c:	4628      	mov	r0, r5
9001433e:	4631      	mov	r1, r6
90014340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014342:	4798      	blx	r3
90014344:	4620      	mov	r0, r4
90014346:	bd70      	pop	{r4, r5, r6, pc}
90014348:	9002590c 	.word	0x9002590c
9001434c:	90025690 	.word	0x90025690
90014350:	24026202 	.word	0x24026202
90014354:	24026200 	.word	0x24026200

90014358 <_ZN8touchgfx6Screen4drawEv>:
90014358:	4b09      	ldr	r3, [pc, #36]	; (90014380 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001435a:	b507      	push	{r0, r1, r2, lr}
9001435c:	f9b3 2000 	ldrsh.w	r2, [r3]
90014360:	2100      	movs	r1, #0
90014362:	4b08      	ldr	r3, [pc, #32]	; (90014384 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90014364:	9100      	str	r1, [sp, #0]
90014366:	4669      	mov	r1, sp
90014368:	f9b3 3000 	ldrsh.w	r3, [r3]
9001436c:	f8ad 2004 	strh.w	r2, [sp, #4]
90014370:	f8ad 3006 	strh.w	r3, [sp, #6]
90014374:	6803      	ldr	r3, [r0, #0]
90014376:	689b      	ldr	r3, [r3, #8]
90014378:	4798      	blx	r3
9001437a:	b003      	add	sp, #12
9001437c:	f85d fb04 	ldr.w	pc, [sp], #4
90014380:	24026200 	.word	0x24026200
90014384:	24026202 	.word	0x24026202

90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001438c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90014390:	b089      	sub	sp, #36	; 0x24
90014392:	4680      	mov	r8, r0
90014394:	460c      	mov	r4, r1
90014396:	2b00      	cmp	r3, #0
90014398:	4615      	mov	r5, r2
9001439a:	dd0e      	ble.n	900143ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001439c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
900143a0:	2b00      	cmp	r3, #0
900143a2:	dd0a      	ble.n	900143ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900143a4:	4628      	mov	r0, r5
900143a6:	f7ff ff5b 	bl	90014260 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900143aa:	4621      	mov	r1, r4
900143ac:	f7fe fbcf 	bl	90012b4e <_ZNK8touchgfx4Rect9intersectERKS0_>
900143b0:	69eb      	ldr	r3, [r5, #28]
900143b2:	b928      	cbnz	r0, 900143c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
900143b4:	461d      	mov	r5, r3
900143b6:	2b00      	cmp	r3, #0
900143b8:	d1f4      	bne.n	900143a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
900143ba:	b009      	add	sp, #36	; 0x24
900143bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900143c0:	ae04      	add	r6, sp, #16
900143c2:	2b00      	cmp	r3, #0
900143c4:	f000 80b5 	beq.w	90014532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900143c8:	682b      	ldr	r3, [r5, #0]
900143ca:	4629      	mov	r1, r5
900143cc:	a802      	add	r0, sp, #8
900143ce:	68db      	ldr	r3, [r3, #12]
900143d0:	4798      	blx	r3
900143d2:	4628      	mov	r0, r5
900143d4:	f7ff ff60 	bl	90014298 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900143d8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900143dc:	4407      	add	r7, r0
900143de:	4628      	mov	r0, r5
900143e0:	f7ff ff6e 	bl	900142c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900143e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900143e8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900143ec:	b23f      	sxth	r7, r7
900143ee:	4418      	add	r0, r3
900143f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900143f4:	4621      	mov	r1, r4
900143f6:	f8ad 2014 	strh.w	r2, [sp, #20]
900143fa:	f8ad 0012 	strh.w	r0, [sp, #18]
900143fe:	4630      	mov	r0, r6
90014400:	f8ad 3016 	strh.w	r3, [sp, #22]
90014404:	f8ad 7010 	strh.w	r7, [sp, #16]
90014408:	f7fb fd74 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
9001440c:	4628      	mov	r0, r5
9001440e:	f7ff ff27 	bl	90014260 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90014412:	ab06      	add	r3, sp, #24
90014414:	4602      	mov	r2, r0
90014416:	e896 0003 	ldmia.w	r6, {r0, r1}
9001441a:	e883 0003 	stmia.w	r3, {r0, r1}
9001441e:	4611      	mov	r1, r2
90014420:	4618      	mov	r0, r3
90014422:	f7fb fd67 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90014426:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001442a:	f9b4 1000 	ldrsh.w	r1, [r4]
9001442e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90014432:	4299      	cmp	r1, r3
90014434:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90014438:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
9001443c:	d10b      	bne.n	90014456 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001443e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90014442:	4552      	cmp	r2, sl
90014444:	d107      	bne.n	90014456 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90014446:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
9001444a:	455a      	cmp	r2, fp
9001444c:	d103      	bne.n	90014456 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001444e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90014452:	454a      	cmp	r2, r9
90014454:	d06d      	beq.n	90014532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014456:	f1bb 0f00 	cmp.w	fp, #0
9001445a:	dd65      	ble.n	90014528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001445c:	f1b9 0f00 	cmp.w	r9, #0
90014460:	dd62      	ble.n	90014528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90014462:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90014466:	fa1f f08a 	uxth.w	r0, sl
9001446a:	4552      	cmp	r2, sl
9001446c:	9000      	str	r0, [sp, #0]
9001446e:	da12      	bge.n	90014496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90014470:	9301      	str	r3, [sp, #4]
90014472:	9b00      	ldr	r3, [sp, #0]
90014474:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90014478:	f8ad 2012 	strh.w	r2, [sp, #18]
9001447c:	1a9a      	subs	r2, r3, r2
9001447e:	f8ad 1010 	strh.w	r1, [sp, #16]
90014482:	4631      	mov	r1, r6
90014484:	f8ad 0014 	strh.w	r0, [sp, #20]
90014488:	4640      	mov	r0, r8
9001448a:	f8ad 2016 	strh.w	r2, [sp, #22]
9001448e:	69ea      	ldr	r2, [r5, #28]
90014490:	f7ff ff7a 	bl	90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014494:	9b01      	ldr	r3, [sp, #4]
90014496:	f9b4 2000 	ldrsh.w	r2, [r4]
9001449a:	b29f      	uxth	r7, r3
9001449c:	429a      	cmp	r2, r3
9001449e:	da0d      	bge.n	900144bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
900144a0:	f8ad 2010 	strh.w	r2, [sp, #16]
900144a4:	1aba      	subs	r2, r7, r2
900144a6:	f8ad a012 	strh.w	sl, [sp, #18]
900144aa:	4631      	mov	r1, r6
900144ac:	f8ad 2014 	strh.w	r2, [sp, #20]
900144b0:	4640      	mov	r0, r8
900144b2:	f8ad 9016 	strh.w	r9, [sp, #22]
900144b6:	69ea      	ldr	r2, [r5, #28]
900144b8:	f7ff ff66 	bl	90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900144bc:	8822      	ldrh	r2, [r4, #0]
900144be:	445f      	add	r7, fp
900144c0:	88a3      	ldrh	r3, [r4, #4]
900144c2:	b2bf      	uxth	r7, r7
900144c4:	4413      	add	r3, r2
900144c6:	b23a      	sxth	r2, r7
900144c8:	b29b      	uxth	r3, r3
900144ca:	b219      	sxth	r1, r3
900144cc:	4291      	cmp	r1, r2
900144ce:	dd0d      	ble.n	900144ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
900144d0:	1bdb      	subs	r3, r3, r7
900144d2:	f8ad 2010 	strh.w	r2, [sp, #16]
900144d6:	f8ad a012 	strh.w	sl, [sp, #18]
900144da:	4631      	mov	r1, r6
900144dc:	f8ad 3014 	strh.w	r3, [sp, #20]
900144e0:	4640      	mov	r0, r8
900144e2:	f8ad 9016 	strh.w	r9, [sp, #22]
900144e6:	69ea      	ldr	r2, [r5, #28]
900144e8:	f7ff ff4e 	bl	90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900144ec:	88e2      	ldrh	r2, [r4, #6]
900144ee:	8863      	ldrh	r3, [r4, #2]
900144f0:	4413      	add	r3, r2
900144f2:	9a00      	ldr	r2, [sp, #0]
900144f4:	444a      	add	r2, r9
900144f6:	b29b      	uxth	r3, r3
900144f8:	fa1f f982 	uxth.w	r9, r2
900144fc:	b219      	sxth	r1, r3
900144fe:	fa0f f289 	sxth.w	r2, r9
90014502:	428a      	cmp	r2, r1
90014504:	da15      	bge.n	90014532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014506:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001450a:	eba3 0309 	sub.w	r3, r3, r9
9001450e:	f9b4 0000 	ldrsh.w	r0, [r4]
90014512:	f8ad 1014 	strh.w	r1, [sp, #20]
90014516:	4631      	mov	r1, r6
90014518:	f8ad 0010 	strh.w	r0, [sp, #16]
9001451c:	f8ad 2012 	strh.w	r2, [sp, #18]
90014520:	f8ad 3016 	strh.w	r3, [sp, #22]
90014524:	69ea      	ldr	r2, [r5, #28]
90014526:	e001      	b.n	9001452c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90014528:	69ea      	ldr	r2, [r5, #28]
9001452a:	4621      	mov	r1, r4
9001452c:	4640      	mov	r0, r8
9001452e:	f7ff ff2b 	bl	90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014532:	4628      	mov	r0, r5
90014534:	f7ff fe94 	bl	90014260 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90014538:	6861      	ldr	r1, [r4, #4]
9001453a:	4602      	mov	r2, r0
9001453c:	4633      	mov	r3, r6
9001453e:	6820      	ldr	r0, [r4, #0]
90014540:	c303      	stmia	r3!, {r0, r1}
90014542:	4611      	mov	r1, r2
90014544:	4630      	mov	r0, r6
90014546:	f7fb fcd5 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
9001454a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
9001454e:	2b00      	cmp	r3, #0
90014550:	f77f af33 	ble.w	900143ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014554:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014558:	2b00      	cmp	r3, #0
9001455a:	f77f af2e 	ble.w	900143ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001455e:	4628      	mov	r0, r5
90014560:	f7ff fe9a 	bl	90014298 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90014564:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90014568:	1a18      	subs	r0, r3, r0
9001456a:	f8ad 0010 	strh.w	r0, [sp, #16]
9001456e:	4628      	mov	r0, r5
90014570:	f7ff fea6 	bl	900142c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90014574:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90014578:	4631      	mov	r1, r6
9001457a:	1a18      	subs	r0, r3, r0
9001457c:	f8ad 0012 	strh.w	r0, [sp, #18]
90014580:	4628      	mov	r0, r5
90014582:	682b      	ldr	r3, [r5, #0]
90014584:	689b      	ldr	r3, [r3, #8]
90014586:	4798      	blx	r3
90014588:	e717      	b.n	900143ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

9001458a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
9001458a:	b570      	push	{r4, r5, r6, lr}
9001458c:	1d06      	adds	r6, r0, #4
9001458e:	b086      	sub	sp, #24
90014590:	460c      	mov	r4, r1
90014592:	2300      	movs	r3, #0
90014594:	4631      	mov	r1, r6
90014596:	4605      	mov	r5, r0
90014598:	a802      	add	r0, sp, #8
9001459a:	9301      	str	r3, [sp, #4]
9001459c:	f7ff fc96 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900145a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900145a4:	8822      	ldrh	r2, [r4, #0]
900145a6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
900145aa:	1ad2      	subs	r2, r2, r3
900145ac:	8863      	ldrh	r3, [r4, #2]
900145ae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900145b2:	1a5b      	subs	r3, r3, r1
900145b4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
900145b8:	f8ad 2010 	strh.w	r2, [sp, #16]
900145bc:	aa01      	add	r2, sp, #4
900145be:	f8ad 0014 	strh.w	r0, [sp, #20]
900145c2:	4630      	mov	r0, r6
900145c4:	f8ad 1016 	strh.w	r1, [sp, #22]
900145c8:	a904      	add	r1, sp, #16
900145ca:	f8ad 3012 	strh.w	r3, [sp, #18]
900145ce:	f7fb fd69 	bl	900100a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
900145d2:	9a01      	ldr	r2, [sp, #4]
900145d4:	b11a      	cbz	r2, 900145de <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
900145d6:	4621      	mov	r1, r4
900145d8:	4628      	mov	r0, r5
900145da:	f7ff fed5 	bl	90014388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900145de:	b006      	add	sp, #24
900145e0:	bd70      	pop	{r4, r5, r6, pc}

900145e2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
900145e2:	4602      	mov	r2, r0
900145e4:	b530      	push	{r4, r5, lr}
900145e6:	4604      	mov	r4, r0
900145e8:	b085      	sub	sp, #20
900145ea:	f852 0f08 	ldr.w	r0, [r2, #8]!
900145ee:	460d      	mov	r5, r1
900145f0:	466b      	mov	r3, sp
900145f2:	6851      	ldr	r1, [r2, #4]
900145f4:	c303      	stmia	r3!, {r0, r1}
900145f6:	4629      	mov	r1, r5
900145f8:	4668      	mov	r0, sp
900145fa:	f7fb fc7b 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
900145fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014602:	b12b      	cbz	r3, 90014610 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90014604:	4669      	mov	r1, sp
90014606:	4620      	mov	r0, r4
90014608:	f7ff ffbf 	bl	9001458a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
9001460c:	b005      	add	sp, #20
9001460e:	bd30      	pop	{r4, r5, pc}
90014610:	3404      	adds	r4, #4
90014612:	a802      	add	r0, sp, #8
90014614:	4621      	mov	r1, r4
90014616:	f7ff fc59 	bl	90013ecc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001461a:	f8bd 3000 	ldrh.w	r3, [sp]
9001461e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90014622:	4669      	mov	r1, sp
90014624:	4620      	mov	r0, r4
90014626:	1a9b      	subs	r3, r3, r2
90014628:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001462c:	f8ad 3000 	strh.w	r3, [sp]
90014630:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014634:	1a9b      	subs	r3, r3, r2
90014636:	f8ad 3002 	strh.w	r3, [sp, #2]
9001463a:	f7fb fcfa 	bl	90010032 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
9001463e:	e7e5      	b.n	9001460c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90014640 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90014640:	460b      	mov	r3, r1
90014642:	680a      	ldr	r2, [r1, #0]
90014644:	1d01      	adds	r1, r0, #4
90014646:	6992      	ldr	r2, [r2, #24]
90014648:	4618      	mov	r0, r3
9001464a:	4710      	bx	r2

9001464c <_ZN8touchgfx12TextProviderC1Ev>:
9001464c:	b538      	push	{r3, r4, r5, lr}
9001464e:	2500      	movs	r5, #0
90014650:	2302      	movs	r3, #2
90014652:	4604      	mov	r4, r0
90014654:	220e      	movs	r2, #14
90014656:	7403      	strb	r3, [r0, #16]
90014658:	4629      	mov	r1, r5
9001465a:	6145      	str	r5, [r0, #20]
9001465c:	7605      	strb	r5, [r0, #24]
9001465e:	83c5      	strh	r5, [r0, #30]
90014660:	8405      	strh	r5, [r0, #32]
90014662:	86c5      	strh	r5, [r0, #54]	; 0x36
90014664:	8705      	strh	r5, [r0, #56]	; 0x38
90014666:	87c5      	strh	r5, [r0, #62]	; 0x3e
90014668:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
9001466c:	e9c0 5500 	strd	r5, r5, [r0]
90014670:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90014674:	304c      	adds	r0, #76	; 0x4c
90014676:	f00d fc0d 	bl	90021e94 <memset>
9001467a:	2301      	movs	r3, #1
9001467c:	4620      	mov	r0, r4
9001467e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90014682:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014686:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
9001468a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
9001468e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90014692:	f7f1 f901 	bl	90005898 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90014696:	4620      	mov	r0, r4
90014698:	bd38      	pop	{r3, r4, r5, pc}

9001469a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
9001469a:	b530      	push	{r4, r5, lr}
9001469c:	2500      	movs	r5, #0
9001469e:	2401      	movs	r4, #1
900146a0:	6843      	ldr	r3, [r0, #4]
900146a2:	b913      	cbnz	r3, 900146aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
900146a4:	6803      	ldr	r3, [r0, #0]
900146a6:	b313      	cbz	r3, 900146ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900146a8:	6043      	str	r3, [r0, #4]
900146aa:	7e03      	ldrb	r3, [r0, #24]
900146ac:	b143      	cbz	r3, 900146c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
900146ae:	6943      	ldr	r3, [r0, #20]
900146b0:	b12b      	cbz	r3, 900146be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900146b2:	881a      	ldrh	r2, [r3, #0]
900146b4:	b11a      	cbz	r2, 900146be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900146b6:	1c9a      	adds	r2, r3, #2
900146b8:	6142      	str	r2, [r0, #20]
900146ba:	8818      	ldrh	r0, [r3, #0]
900146bc:	bd30      	pop	{r4, r5, pc}
900146be:	7605      	strb	r5, [r0, #24]
900146c0:	6843      	ldr	r3, [r0, #4]
900146c2:	8819      	ldrh	r1, [r3, #0]
900146c4:	b199      	cbz	r1, 900146ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900146c6:	1c9a      	adds	r2, r3, #2
900146c8:	2902      	cmp	r1, #2
900146ca:	6042      	str	r2, [r0, #4]
900146cc:	d1f5      	bne.n	900146ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
900146ce:	7c03      	ldrb	r3, [r0, #16]
900146d0:	2b01      	cmp	r3, #1
900146d2:	d8e5      	bhi.n	900146a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900146d4:	1c5a      	adds	r2, r3, #1
900146d6:	3302      	adds	r3, #2
900146d8:	7402      	strb	r2, [r0, #16]
900146da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
900146de:	6143      	str	r3, [r0, #20]
900146e0:	2b00      	cmp	r3, #0
900146e2:	d0dd      	beq.n	900146a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900146e4:	881b      	ldrh	r3, [r3, #0]
900146e6:	2b00      	cmp	r3, #0
900146e8:	d0da      	beq.n	900146a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900146ea:	7604      	strb	r4, [r0, #24]
900146ec:	e7d8      	b.n	900146a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900146ee:	2000      	movs	r0, #0
900146f0:	e7e4      	b.n	900146bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

900146f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
900146f2:	6001      	str	r1, [r0, #0]
900146f4:	2100      	movs	r1, #0
900146f6:	b430      	push	{r4, r5}
900146f8:	6041      	str	r1, [r0, #4]
900146fa:	6815      	ldr	r5, [r2, #0]
900146fc:	6085      	str	r5, [r0, #8]
900146fe:	6852      	ldr	r2, [r2, #4]
90014700:	6443      	str	r3, [r0, #68]	; 0x44
90014702:	9b02      	ldr	r3, [sp, #8]
90014704:	60c2      	str	r2, [r0, #12]
90014706:	7401      	strb	r1, [r0, #16]
90014708:	6141      	str	r1, [r0, #20]
9001470a:	7601      	strb	r1, [r0, #24]
9001470c:	8701      	strh	r1, [r0, #56]	; 0x38
9001470e:	8401      	strh	r1, [r0, #32]
90014710:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90014714:	6483      	str	r3, [r0, #72]	; 0x48
90014716:	bc30      	pop	{r4, r5}
90014718:	f7f1 b8be 	b.w	90005898 <_ZN8touchgfx12TextProvider18initializeInternalEv>

9001471c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
9001471c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001471e:	4605      	mov	r5, r0
90014720:	4608      	mov	r0, r1
90014722:	b1f1      	cbz	r1, 90014762 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90014724:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90014728:	460b      	mov	r3, r1
9001472a:	f101 0708 	add.w	r7, r1, #8
9001472e:	4622      	mov	r2, r4
90014730:	6818      	ldr	r0, [r3, #0]
90014732:	3308      	adds	r3, #8
90014734:	f853 1c04 	ldr.w	r1, [r3, #-4]
90014738:	4626      	mov	r6, r4
9001473a:	42bb      	cmp	r3, r7
9001473c:	c603      	stmia	r6!, {r0, r1}
9001473e:	4634      	mov	r4, r6
90014740:	d1f6      	bne.n	90014730 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90014742:	6818      	ldr	r0, [r3, #0]
90014744:	6030      	str	r0, [r6, #0]
90014746:	4610      	mov	r0, r2
90014748:	889b      	ldrh	r3, [r3, #4]
9001474a:	80b3      	strh	r3, [r6, #4]
9001474c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90014750:	015b      	lsls	r3, r3, #5
90014752:	f403 7180 	and.w	r1, r3, #256	; 0x100
90014756:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
9001475a:	430b      	orrs	r3, r1
9001475c:	425b      	negs	r3, r3
9001475e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90014762:	bdf0      	pop	{r4, r5, r6, r7, pc}

90014764 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90014764:	b538      	push	{r3, r4, r5, lr}
90014766:	460c      	mov	r4, r1
90014768:	6811      	ldr	r1, [r2, #0]
9001476a:	4610      	mov	r0, r2
9001476c:	68cd      	ldr	r5, [r1, #12]
9001476e:	4619      	mov	r1, r3
90014770:	47a8      	blx	r5
90014772:	2800      	cmp	r0, #0
90014774:	bf08      	it	eq
90014776:	4620      	moveq	r0, r4
90014778:	bd38      	pop	{r3, r4, r5, pc}
	...

9001477c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
9001477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001477e:	4604      	mov	r4, r0
90014780:	4615      	mov	r5, r2
90014782:	4608      	mov	r0, r1
90014784:	b93a      	cbnz	r2, 90014796 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90014786:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001478a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
9001478e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90014792:	4628      	mov	r0, r5
90014794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014796:	f892 c00d 	ldrb.w	ip, [r2, #13]
9001479a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
9001479e:	8893      	ldrh	r3, [r2, #4]
900147a0:	ea4f 160c 	mov.w	r6, ip, lsl #4
900147a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
900147a8:	79ee      	ldrb	r6, [r5, #7]
900147aa:	4316      	orrs	r6, r2
900147ac:	19da      	adds	r2, r3, r7
900147ae:	b291      	uxth	r1, r2
900147b0:	b2b7      	uxth	r7, r6
900147b2:	291d      	cmp	r1, #29
900147b4:	d87b      	bhi.n	900148ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900147b6:	2201      	movs	r2, #1
900147b8:	10f6      	asrs	r6, r6, #3
900147ba:	408a      	lsls	r2, r1
900147bc:	4974      	ldr	r1, [pc, #464]	; (90014990 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
900147be:	420a      	tst	r2, r1
900147c0:	d12e      	bne.n	90014820 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
900147c2:	f412 7f60 	tst.w	r2, #896	; 0x380
900147c6:	d072      	beq.n	900148ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900147c8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
900147cc:	462b      	mov	r3, r5
900147ce:	f105 0e08 	add.w	lr, r5, #8
900147d2:	4615      	mov	r5, r2
900147d4:	6818      	ldr	r0, [r3, #0]
900147d6:	3308      	adds	r3, #8
900147d8:	f853 1c04 	ldr.w	r1, [r3, #-4]
900147dc:	4694      	mov	ip, r2
900147de:	4573      	cmp	r3, lr
900147e0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900147e4:	4662      	mov	r2, ip
900147e6:	d1f5      	bne.n	900147d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
900147e8:	6818      	ldr	r0, [r3, #0]
900147ea:	f8cc 0000 	str.w	r0, [ip]
900147ee:	889b      	ldrh	r3, [r3, #4]
900147f0:	f8ac 3004 	strh.w	r3, [ip, #4]
900147f4:	b2b3      	uxth	r3, r6
900147f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900147fa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
900147fe:	1aca      	subs	r2, r1, r3
90014800:	1bcf      	subs	r7, r1, r7
90014802:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90014806:	b292      	uxth	r2, r2
90014808:	1afb      	subs	r3, r7, r3
9001480a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
9001480e:	10d2      	asrs	r2, r2, #3
90014810:	f002 0260 	and.w	r2, r2, #96	; 0x60
90014814:	4302      	orrs	r2, r0
90014816:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
9001481a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001481e:	e7b8      	b.n	90014792 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90014820:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90014822:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90014826:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90014828:	f640 6333 	movw	r3, #3635	; 0xe33
9001482c:	4299      	cmp	r1, r3
9001482e:	d110      	bne.n	90014852 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90014830:	6803      	ldr	r3, [r0, #0]
90014832:	68db      	ldr	r3, [r3, #12]
90014834:	4798      	blx	r3
90014836:	7b41      	ldrb	r1, [r0, #13]
90014838:	00cb      	lsls	r3, r1, #3
9001483a:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001483e:	7a03      	ldrb	r3, [r0, #8]
90014840:	0648      	lsls	r0, r1, #25
90014842:	ea43 0302 	orr.w	r3, r3, r2
90014846:	bf44      	itt	mi
90014848:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001484c:	b21b      	sxthmi	r3, r3
9001484e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014852:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90014856:	462a      	mov	r2, r5
90014858:	f105 0c08 	add.w	ip, r5, #8
9001485c:	443b      	add	r3, r7
9001485e:	4433      	add	r3, r6
90014860:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90014864:	b29b      	uxth	r3, r3
90014866:	4635      	mov	r5, r6
90014868:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001486c:	6810      	ldr	r0, [r2, #0]
9001486e:	3208      	adds	r2, #8
90014870:	f852 1c04 	ldr.w	r1, [r2, #-4]
90014874:	4637      	mov	r7, r6
90014876:	4562      	cmp	r2, ip
90014878:	c703      	stmia	r7!, {r0, r1}
9001487a:	463e      	mov	r6, r7
9001487c:	d1f6      	bne.n	9001486c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
9001487e:	6810      	ldr	r0, [r2, #0]
90014880:	6038      	str	r0, [r7, #0]
90014882:	8892      	ldrh	r2, [r2, #4]
90014884:	80ba      	strh	r2, [r7, #4]
90014886:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001488a:	10db      	asrs	r3, r3, #3
9001488c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014890:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014894:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014898:	4313      	orrs	r3, r2
9001489a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
9001489e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900148a2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
900148a6:	1a9b      	subs	r3, r3, r2
900148a8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
900148ac:	e771      	b.n	90014792 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900148ae:	f023 0204 	bic.w	r2, r3, #4
900148b2:	f640 611b 	movw	r1, #3611	; 0xe1b
900148b6:	428a      	cmp	r2, r1
900148b8:	d003      	beq.n	900148c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
900148ba:	f640 621d 	movw	r2, #3613	; 0xe1d
900148be:	4293      	cmp	r3, r2
900148c0:	d120      	bne.n	90014904 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
900148c2:	3b01      	subs	r3, #1
900148c4:	4602      	mov	r2, r0
900148c6:	4629      	mov	r1, r5
900148c8:	4620      	mov	r0, r4
900148ca:	b29b      	uxth	r3, r3
900148cc:	f7ff ff4a 	bl	90014764 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
900148d0:	7b41      	ldrb	r1, [r0, #13]
900148d2:	00cb      	lsls	r3, r1, #3
900148d4:	0649      	lsls	r1, r1, #25
900148d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
900148da:	7a03      	ldrb	r3, [r0, #8]
900148dc:	ea43 0302 	orr.w	r3, r3, r2
900148e0:	bf44      	itt	mi
900148e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900148e6:	b21b      	sxthmi	r3, r3
900148e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900148ec:	7b6b      	ldrb	r3, [r5, #13]
900148ee:	7aaa      	ldrb	r2, [r5, #10]
900148f0:	005b      	lsls	r3, r3, #1
900148f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900148f6:	4313      	orrs	r3, r2
900148f8:	115a      	asrs	r2, r3, #5
900148fa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
900148fe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90014902:	e035      	b.n	90014970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90014904:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90014908:	f01c 0f40 	tst.w	ip, #64	; 0x40
9001490c:	f402 7180 	and.w	r1, r2, #256	; 0x100
90014910:	7a2a      	ldrb	r2, [r5, #8]
90014912:	ea42 0201 	orr.w	r2, r2, r1
90014916:	f640 6109 	movw	r1, #3593	; 0xe09
9001491a:	bf1c      	itt	ne
9001491c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90014920:	b212      	sxthne	r2, r2
90014922:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90014926:	f023 0210 	bic.w	r2, r3, #16
9001492a:	428a      	cmp	r2, r1
9001492c:	d003      	beq.n	90014936 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
9001492e:	f640 6213 	movw	r2, #3603	; 0xe13
90014932:	4293      	cmp	r3, r2
90014934:	d129      	bne.n	9001498a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90014936:	7b6e      	ldrb	r6, [r5, #13]
90014938:	4629      	mov	r1, r5
9001493a:	0076      	lsls	r6, r6, #1
9001493c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90014940:	7aae      	ldrb	r6, [r5, #10]
90014942:	4316      	orrs	r6, r2
90014944:	f640 6213 	movw	r2, #3603	; 0xe13
90014948:	4293      	cmp	r3, r2
9001494a:	4602      	mov	r2, r0
9001494c:	4620      	mov	r0, r4
9001494e:	bf16      	itet	ne
90014950:	f103 33ff 	addne.w	r3, r3, #4294967295
90014954:	f640 630c 	movweq	r3, #3596	; 0xe0c
90014958:	b29b      	uxthne	r3, r3
9001495a:	f7ff ff03 	bl	90014764 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001495e:	7b43      	ldrb	r3, [r0, #13]
90014960:	7a82      	ldrb	r2, [r0, #10]
90014962:	005b      	lsls	r3, r3, #1
90014964:	f403 7380 	and.w	r3, r3, #256	; 0x100
90014968:	4313      	orrs	r3, r2
9001496a:	1af6      	subs	r6, r6, r3
9001496c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90014970:	7b69      	ldrb	r1, [r5, #13]
90014972:	00cb      	lsls	r3, r1, #3
90014974:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014978:	7a2b      	ldrb	r3, [r5, #8]
9001497a:	4313      	orrs	r3, r2
9001497c:	064a      	lsls	r2, r1, #25
9001497e:	bf44      	itt	mi
90014980:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014984:	b21b      	sxthmi	r3, r3
90014986:	1bdb      	subs	r3, r3, r7
90014988:	e747      	b.n	9001481a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
9001498a:	2300      	movs	r3, #0
9001498c:	e7b7      	b.n	900148fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
9001498e:	bf00      	nop
90014990:	3fc00079 	.word	0x3fc00079

90014994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90014994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014998:	4604      	mov	r4, r0
9001499a:	b942      	cbnz	r2, 900149ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001499c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900149a0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
900149a4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
900149a8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
900149ac:	e047      	b.n	90014a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
900149ae:	7b51      	ldrb	r1, [r2, #13]
900149b0:	8893      	ldrh	r3, [r2, #4]
900149b2:	010d      	lsls	r5, r1, #4
900149b4:	f405 7080 	and.w	r0, r5, #256	; 0x100
900149b8:	79d5      	ldrb	r5, [r2, #7]
900149ba:	4305      	orrs	r5, r0
900149bc:	2d04      	cmp	r5, #4
900149be:	bfcc      	ite	gt
900149c0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
900149c4:	f04f 0e01 	movle.w	lr, #1
900149c8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
900149cc:	f200 80ab 	bhi.w	90014b26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
900149d0:	f240 60e7 	movw	r0, #1767	; 0x6e7
900149d4:	4283      	cmp	r3, r0
900149d6:	d216      	bcs.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900149d8:	f240 605b 	movw	r0, #1627	; 0x65b
900149dc:	4283      	cmp	r3, r0
900149de:	d859      	bhi.n	90014a94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
900149e0:	f240 6057 	movw	r0, #1623	; 0x657
900149e4:	4283      	cmp	r3, r0
900149e6:	d20e      	bcs.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900149e8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
900149ec:	d24a      	bcs.n	90014a84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
900149ee:	f240 604e 	movw	r0, #1614	; 0x64e
900149f2:	4283      	cmp	r3, r0
900149f4:	d207      	bcs.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900149f6:	f240 601a 	movw	r0, #1562	; 0x61a
900149fa:	4283      	cmp	r3, r0
900149fc:	d02a      	beq.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900149fe:	d821      	bhi.n	90014a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90014a00:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90014a04:	d35b      	bcc.n	90014abe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014a06:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90014a0a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014a0e:	f040 80d0 	bne.w	90014bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90014a12:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90014a16:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014a1a:	f040 80ca 	bne.w	90014bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90014a1e:	00cb      	lsls	r3, r1, #3
90014a20:	0649      	lsls	r1, r1, #25
90014a22:	f403 7080 	and.w	r0, r3, #256	; 0x100
90014a26:	7a13      	ldrb	r3, [r2, #8]
90014a28:	ea43 0300 	orr.w	r3, r3, r0
90014a2c:	bf44      	itt	mi
90014a2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014a32:	b21b      	sxthmi	r3, r3
90014a34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014a38:	1b5d      	subs	r5, r3, r5
90014a3a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014a3e:	4610      	mov	r0, r2
90014a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014a44:	f240 604b 	movw	r0, #1611	; 0x64b
90014a48:	4283      	cmp	r3, r0
90014a4a:	d338      	bcc.n	90014abe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014a4c:	f240 604c 	movw	r0, #1612	; 0x64c
90014a50:	4283      	cmp	r3, r0
90014a52:	d9d8      	bls.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a54:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90014a58:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90014a5c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014a60:	f040 80f3 	bne.w	90014c4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90014a64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014a68:	f040 80ef 	bne.w	90014c4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90014a6c:	00cb      	lsls	r3, r1, #3
90014a6e:	064e      	lsls	r6, r1, #25
90014a70:	f403 7080 	and.w	r0, r3, #256	; 0x100
90014a74:	7a13      	ldrb	r3, [r2, #8]
90014a76:	ea43 0300 	orr.w	r3, r3, r0
90014a7a:	bf44      	itt	mi
90014a7c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014a80:	b21b      	sxthmi	r3, r3
90014a82:	e7d9      	b.n	90014a38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90014a84:	f240 6054 	movw	r0, #1620	; 0x654
90014a88:	4283      	cmp	r3, r0
90014a8a:	d8e3      	bhi.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a8c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90014a90:	d9e0      	bls.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a92:	e7b8      	b.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a94:	f240 6074 	movw	r0, #1652	; 0x674
90014a98:	4283      	cmp	r3, r0
90014a9a:	d0b4      	beq.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a9c:	d82d      	bhi.n	90014afa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90014a9e:	f240 605e 	movw	r0, #1630	; 0x65e
90014aa2:	4283      	cmp	r3, r0
90014aa4:	d804      	bhi.n	90014ab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90014aa6:	f240 605d 	movw	r0, #1629	; 0x65d
90014aaa:	4283      	cmp	r3, r0
90014aac:	d3d2      	bcc.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014aae:	e7aa      	b.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014ab0:	f240 605f 	movw	r0, #1631	; 0x65f
90014ab4:	4283      	cmp	r3, r0
90014ab6:	d0cd      	beq.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014ab8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90014abc:	d0a3      	beq.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014abe:	00cb      	lsls	r3, r1, #3
90014ac0:	0649      	lsls	r1, r1, #25
90014ac2:	f403 7080 	and.w	r0, r3, #256	; 0x100
90014ac6:	7a13      	ldrb	r3, [r2, #8]
90014ac8:	ea43 0300 	orr.w	r3, r3, r0
90014acc:	bf44      	itt	mi
90014ace:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014ad2:	b21b      	sxthmi	r3, r3
90014ad4:	1b5d      	subs	r5, r3, r5
90014ad6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014ada:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014ade:	7b53      	ldrb	r3, [r2, #13]
90014ae0:	015b      	lsls	r3, r3, #5
90014ae2:	f403 7180 	and.w	r1, r3, #256	; 0x100
90014ae6:	7993      	ldrb	r3, [r2, #6]
90014ae8:	430b      	orrs	r3, r1
90014aea:	2105      	movs	r1, #5
90014aec:	005b      	lsls	r3, r3, #1
90014aee:	fb93 f3f1 	sdiv	r3, r3, r1
90014af2:	f992 1009 	ldrsb.w	r1, [r2, #9]
90014af6:	440b      	add	r3, r1
90014af8:	e756      	b.n	900149a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90014afa:	f240 60e2 	movw	r0, #1762	; 0x6e2
90014afe:	4283      	cmp	r3, r0
90014b00:	d809      	bhi.n	90014b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90014b02:	f240 60df 	movw	r0, #1759	; 0x6df
90014b06:	4283      	cmp	r3, r0
90014b08:	f4bf af7d 	bcs.w	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b0c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90014b10:	2b05      	cmp	r3, #5
90014b12:	d8d4      	bhi.n	90014abe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014b14:	e777      	b.n	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b16:	f240 60e3 	movw	r0, #1763	; 0x6e3
90014b1a:	4283      	cmp	r3, r0
90014b1c:	d09a      	beq.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b1e:	f240 60e4 	movw	r0, #1764	; 0x6e4
90014b22:	4283      	cmp	r3, r0
90014b24:	e7ca      	b.n	90014abc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90014b26:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90014b2a:	d22b      	bcs.n	90014b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90014b2c:	f640 00ed 	movw	r0, #2285	; 0x8ed
90014b30:	4283      	cmp	r3, r0
90014b32:	d28f      	bcs.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b34:	f640 00e5 	movw	r0, #2277	; 0x8e5
90014b38:	4283      	cmp	r3, r0
90014b3a:	d816      	bhi.n	90014b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90014b3c:	f640 00e4 	movw	r0, #2276	; 0x8e4
90014b40:	4283      	cmp	r3, r0
90014b42:	f4bf af60 	bcs.w	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b46:	f240 60ec 	movw	r0, #1772	; 0x6ec
90014b4a:	4283      	cmp	r3, r0
90014b4c:	d80a      	bhi.n	90014b64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90014b4e:	f240 60eb 	movw	r0, #1771	; 0x6eb
90014b52:	4283      	cmp	r3, r0
90014b54:	f4bf af57 	bcs.w	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b58:	f240 60ea 	movw	r0, #1770	; 0x6ea
90014b5c:	4283      	cmp	r3, r0
90014b5e:	f43f af79 	beq.w	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b62:	e7ac      	b.n	90014abe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014b64:	f240 60ed 	movw	r0, #1773	; 0x6ed
90014b68:	e7f8      	b.n	90014b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90014b6a:	f640 00e8 	movw	r0, #2280	; 0x8e8
90014b6e:	4283      	cmp	r3, r0
90014b70:	d802      	bhi.n	90014b78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90014b72:	f640 00e7 	movw	r0, #2279	; 0x8e7
90014b76:	e798      	b.n	90014aaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90014b78:	f640 00e9 	movw	r0, #2281	; 0x8e9
90014b7c:	4283      	cmp	r3, r0
90014b7e:	f47f af42 	bne.w	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b82:	e767      	b.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b84:	f640 00f6 	movw	r0, #2294	; 0x8f6
90014b88:	4283      	cmp	r3, r0
90014b8a:	f43f af63 	beq.w	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b8e:	d802      	bhi.n	90014b96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90014b90:	f640 00f2 	movw	r0, #2290	; 0x8f2
90014b94:	e7f2      	b.n	90014b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90014b96:	f640 00fa 	movw	r0, #2298	; 0x8fa
90014b9a:	4283      	cmp	r3, r0
90014b9c:	d805      	bhi.n	90014baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90014b9e:	f640 00f9 	movw	r0, #2297	; 0x8f9
90014ba2:	4283      	cmp	r3, r0
90014ba4:	f4ff af2f 	bcc.w	90014a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014ba8:	e754      	b.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014baa:	f640 00fe 	movw	r0, #2302	; 0x8fe
90014bae:	4283      	cmp	r3, r0
90014bb0:	e7af      	b.n	90014b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90014bb2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90014bb6:	4617      	mov	r7, r2
90014bb8:	f102 0808 	add.w	r8, r2, #8
90014bbc:	4666      	mov	r6, ip
90014bbe:	6838      	ldr	r0, [r7, #0]
90014bc0:	3708      	adds	r7, #8
90014bc2:	f857 1c04 	ldr.w	r1, [r7, #-4]
90014bc6:	46e6      	mov	lr, ip
90014bc8:	4547      	cmp	r7, r8
90014bca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90014bce:	46f4      	mov	ip, lr
90014bd0:	d1f5      	bne.n	90014bbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90014bd2:	6838      	ldr	r0, [r7, #0]
90014bd4:	f8ce 0000 	str.w	r0, [lr]
90014bd8:	88b9      	ldrh	r1, [r7, #4]
90014bda:	f8ae 1004 	strh.w	r1, [lr, #4]
90014bde:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90014be2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014be6:	d009      	beq.n	90014bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90014be8:	7b51      	ldrb	r1, [r2, #13]
90014bea:	7992      	ldrb	r2, [r2, #6]
90014bec:	0149      	lsls	r1, r1, #5
90014bee:	f401 7180 	and.w	r1, r1, #256	; 0x100
90014bf2:	4311      	orrs	r1, r2
90014bf4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90014bf8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90014bfc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014c00:	b2ad      	uxth	r5, r5
90014c02:	d00d      	beq.n	90014c20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90014c04:	442b      	add	r3, r5
90014c06:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014c0a:	b29b      	uxth	r3, r3
90014c0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014c10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90014c14:	10db      	asrs	r3, r3, #3
90014c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014c1a:	4313      	orrs	r3, r2
90014c1c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90014c20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90014c24:	00cb      	lsls	r3, r1, #3
90014c26:	064f      	lsls	r7, r1, #25
90014c28:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014c2c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90014c30:	ea43 0302 	orr.w	r3, r3, r2
90014c34:	bf44      	itt	mi
90014c36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014c3a:	b21b      	sxthmi	r3, r3
90014c3c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014c40:	1b5b      	subs	r3, r3, r5
90014c42:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90014c46:	4632      	mov	r2, r6
90014c48:	e6f9      	b.n	90014a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90014c4a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90014c4e:	4617      	mov	r7, r2
90014c50:	f102 0908 	add.w	r9, r2, #8
90014c54:	4666      	mov	r6, ip
90014c56:	6838      	ldr	r0, [r7, #0]
90014c58:	3708      	adds	r7, #8
90014c5a:	f857 1c04 	ldr.w	r1, [r7, #-4]
90014c5e:	46e0      	mov	r8, ip
90014c60:	454f      	cmp	r7, r9
90014c62:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90014c66:	46c4      	mov	ip, r8
90014c68:	d1f5      	bne.n	90014c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90014c6a:	6838      	ldr	r0, [r7, #0]
90014c6c:	f8c8 0000 	str.w	r0, [r8]
90014c70:	88b9      	ldrh	r1, [r7, #4]
90014c72:	f8a8 1004 	strh.w	r1, [r8, #4]
90014c76:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90014c7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014c7e:	d009      	beq.n	90014c94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90014c80:	7b51      	ldrb	r1, [r2, #13]
90014c82:	7992      	ldrb	r2, [r2, #6]
90014c84:	0149      	lsls	r1, r1, #5
90014c86:	f401 7180 	and.w	r1, r1, #256	; 0x100
90014c8a:	4311      	orrs	r1, r2
90014c8c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90014c90:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90014c94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014c98:	d00e      	beq.n	90014cb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90014c9a:	eba3 030e 	sub.w	r3, r3, lr
90014c9e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014ca2:	b29b      	uxth	r3, r3
90014ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014ca8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90014cac:	10db      	asrs	r3, r3, #3
90014cae:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014cb2:	4313      	orrs	r3, r2
90014cb4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90014cb8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90014cbc:	00cb      	lsls	r3, r1, #3
90014cbe:	0648      	lsls	r0, r1, #25
90014cc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014cc4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90014cc8:	ea43 0302 	orr.w	r3, r3, r2
90014ccc:	bf44      	itt	mi
90014cce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014cd2:	b21b      	sxthmi	r3, r3
90014cd4:	1b5d      	subs	r5, r3, r5
90014cd6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014cda:	e7b4      	b.n	90014c46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90014cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014ce0:	461e      	mov	r6, r3
90014ce2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014ce4:	4604      	mov	r4, r0
90014ce6:	4617      	mov	r7, r2
90014ce8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90014cec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90014cf0:	f7f0 fd82 	bl	900057f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90014cf4:	4605      	mov	r5, r0
90014cf6:	b918      	cbnz	r0, 90014d00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90014cf8:	6030      	str	r0, [r6, #0]
90014cfa:	4628      	mov	r0, r5
90014cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014d00:	683b      	ldr	r3, [r7, #0]
90014d02:	4601      	mov	r1, r0
90014d04:	4638      	mov	r0, r7
90014d06:	68db      	ldr	r3, [r3, #12]
90014d08:	4798      	blx	r3
90014d0a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90014d0e:	4602      	mov	r2, r0
90014d10:	6030      	str	r0, [r6, #0]
90014d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90014d16:	d213      	bcs.n	90014d40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90014d18:	4643      	mov	r3, r8
90014d1a:	4639      	mov	r1, r7
90014d1c:	4620      	mov	r0, r4
90014d1e:	f7ff fe39 	bl	90014994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90014d22:	6030      	str	r0, [r6, #0]
90014d24:	6833      	ldr	r3, [r6, #0]
90014d26:	b143      	cbz	r3, 90014d3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90014d28:	7b5a      	ldrb	r2, [r3, #13]
90014d2a:	7a9b      	ldrb	r3, [r3, #10]
90014d2c:	0052      	lsls	r2, r2, #1
90014d2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90014d32:	4313      	orrs	r3, r2
90014d34:	bf0c      	ite	eq
90014d36:	2301      	moveq	r3, #1
90014d38:	2300      	movne	r3, #0
90014d3a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90014d3e:	e7dc      	b.n	90014cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90014d40:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90014d44:	b29b      	uxth	r3, r3
90014d46:	2b7f      	cmp	r3, #127	; 0x7f
90014d48:	d804      	bhi.n	90014d54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90014d4a:	4639      	mov	r1, r7
90014d4c:	4620      	mov	r0, r4
90014d4e:	f7ff fd15 	bl	9001477c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90014d52:	e7e6      	b.n	90014d22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90014d54:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90014d58:	2b00      	cmp	r3, #0
90014d5a:	d0e3      	beq.n	90014d24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90014d5c:	f640 1302 	movw	r3, #2306	; 0x902
90014d60:	429d      	cmp	r5, r3
90014d62:	d1df      	bne.n	90014d24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90014d64:	4601      	mov	r1, r0
90014d66:	4620      	mov	r0, r4
90014d68:	f7ff fcd8 	bl	9001471c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90014d6c:	e7d9      	b.n	90014d22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90014d6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90014d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90014d72:	461e      	mov	r6, r3
90014d74:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014d76:	4604      	mov	r4, r0
90014d78:	4617      	mov	r7, r2
90014d7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90014d7e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90014d82:	f7f0 fd39 	bl	900057f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90014d86:	4605      	mov	r5, r0
90014d88:	b918      	cbnz	r0, 90014d92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90014d8a:	6030      	str	r0, [r6, #0]
90014d8c:	4628      	mov	r0, r5
90014d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90014d92:	683b      	ldr	r3, [r7, #0]
90014d94:	4601      	mov	r1, r0
90014d96:	4638      	mov	r0, r7
90014d98:	f8d3 9008 	ldr.w	r9, [r3, #8]
90014d9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90014da0:	47c8      	blx	r9
90014da2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90014da6:	4602      	mov	r2, r0
90014da8:	6030      	str	r0, [r6, #0]
90014daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90014dae:	d213      	bcs.n	90014dd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90014db0:	4643      	mov	r3, r8
90014db2:	4639      	mov	r1, r7
90014db4:	4620      	mov	r0, r4
90014db6:	f7ff fded 	bl	90014994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90014dba:	6030      	str	r0, [r6, #0]
90014dbc:	6833      	ldr	r3, [r6, #0]
90014dbe:	b143      	cbz	r3, 90014dd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90014dc0:	7b5a      	ldrb	r2, [r3, #13]
90014dc2:	7a9b      	ldrb	r3, [r3, #10]
90014dc4:	0052      	lsls	r2, r2, #1
90014dc6:	f402 7280 	and.w	r2, r2, #256	; 0x100
90014dca:	4313      	orrs	r3, r2
90014dcc:	bf0c      	ite	eq
90014dce:	2301      	moveq	r3, #1
90014dd0:	2300      	movne	r3, #0
90014dd2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90014dd6:	e7d9      	b.n	90014d8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90014dd8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90014ddc:	b29b      	uxth	r3, r3
90014dde:	2b7f      	cmp	r3, #127	; 0x7f
90014de0:	d804      	bhi.n	90014dec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90014de2:	4639      	mov	r1, r7
90014de4:	4620      	mov	r0, r4
90014de6:	f7ff fcc9 	bl	9001477c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90014dea:	e7e6      	b.n	90014dba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90014dec:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90014df0:	2b00      	cmp	r3, #0
90014df2:	d0e3      	beq.n	90014dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90014df4:	f640 1302 	movw	r3, #2306	; 0x902
90014df8:	429d      	cmp	r5, r3
90014dfa:	d1df      	bne.n	90014dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90014dfc:	4601      	mov	r1, r0
90014dfe:	4620      	mov	r0, r4
90014e00:	f7ff fc8c 	bl	9001471c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90014e04:	e7d9      	b.n	90014dba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90014e06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90014e06:	b510      	push	{r4, lr}
90014e08:	4604      	mov	r4, r0
90014e0a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
90014e0e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014e10:	b1e1      	cbz	r1, 90014e4c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90014e12:	2b0a      	cmp	r3, #10
90014e14:	d02d      	beq.n	90014e72 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90014e16:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90014e18:	3901      	subs	r1, #1
90014e1a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90014e1e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90014e20:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90014e24:	1c51      	adds	r1, r2, #1
90014e26:	b289      	uxth	r1, r1
90014e28:	2901      	cmp	r1, #1
90014e2a:	bf8a      	itet	hi
90014e2c:	f102 32ff 	addhi.w	r2, r2, #4294967295
90014e30:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90014e32:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90014e34:	1c5a      	adds	r2, r3, #1
90014e36:	8722      	strh	r2, [r4, #56]	; 0x38
90014e38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90014e3a:	4413      	add	r3, r2
90014e3c:	b29b      	uxth	r3, r3
90014e3e:	2b09      	cmp	r3, #9
90014e40:	bf88      	it	hi
90014e42:	3b0a      	subhi	r3, #10
90014e44:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90014e48:	8458      	strh	r0, [r3, #34]	; 0x22
90014e4a:	e7de      	b.n	90014e0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90014e4c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014e4e:	2b0a      	cmp	r3, #10
90014e50:	d00f      	beq.n	90014e72 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90014e52:	4620      	mov	r0, r4
90014e54:	f7ff fc21 	bl	9001469a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90014e58:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014e5a:	1c5a      	adds	r2, r3, #1
90014e5c:	8722      	strh	r2, [r4, #56]	; 0x38
90014e5e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90014e60:	4413      	add	r3, r2
90014e62:	b29b      	uxth	r3, r3
90014e64:	2b09      	cmp	r3, #9
90014e66:	bf88      	it	hi
90014e68:	3b0a      	subhi	r3, #10
90014e6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90014e6e:	8458      	strh	r0, [r3, #34]	; 0x22
90014e70:	e7ec      	b.n	90014e4c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90014e72:	bd10      	pop	{r4, pc}

90014e74 <_ZN8touchgfx12TextProvider11getNextCharEv>:
90014e74:	b538      	push	{r3, r4, r5, lr}
90014e76:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014e78:	4604      	mov	r4, r0
90014e7a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90014e7e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90014e80:	8f02      	ldrh	r2, [r0, #56]	; 0x38
90014e82:	3a01      	subs	r2, #1
90014e84:	8702      	strh	r2, [r0, #56]	; 0x38
90014e86:	1c5a      	adds	r2, r3, #1
90014e88:	b292      	uxth	r2, r2
90014e8a:	2a09      	cmp	r2, #9
90014e8c:	bf8a      	itet	hi
90014e8e:	3b09      	subhi	r3, #9
90014e90:	86c2      	strhls	r2, [r0, #54]	; 0x36
90014e92:	86c3      	strhhi	r3, [r0, #54]	; 0x36
90014e94:	f7ff ffb7 	bl	90014e06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90014e98:	8c23      	ldrh	r3, [r4, #32]
90014e9a:	2b01      	cmp	r3, #1
90014e9c:	bf9c      	itt	ls
90014e9e:	3301      	addls	r3, #1
90014ea0:	8423      	strhls	r3, [r4, #32]
90014ea2:	8be3      	ldrh	r3, [r4, #30]
90014ea4:	b90b      	cbnz	r3, 90014eaa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90014ea6:	2302      	movs	r3, #2
90014ea8:	83e3      	strh	r3, [r4, #30]
90014eaa:	8be3      	ldrh	r3, [r4, #30]
90014eac:	4628      	mov	r0, r5
90014eae:	3b01      	subs	r3, #1
90014eb0:	b29b      	uxth	r3, r3
90014eb2:	83e3      	strh	r3, [r4, #30]
90014eb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90014eb8:	8365      	strh	r5, [r4, #26]
90014eba:	bd38      	pop	{r3, r4, r5, pc}

90014ebc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90014ebc:	428a      	cmp	r2, r1
90014ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014ec2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
90014ec4:	d932      	bls.n	90014f2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
90014ec6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
90014ec8:	1a54      	subs	r4, r2, r1
90014eca:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
90014ece:	19ee      	adds	r6, r5, r7
90014ed0:	fa1f fe84 	uxth.w	lr, r4
90014ed4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
90014ed8:	3e01      	subs	r6, #1
90014eda:	b2b4      	uxth	r4, r6
90014edc:	eba4 090e 	sub.w	r9, r4, lr
90014ee0:	fa1f f989 	uxth.w	r9, r9
90014ee4:	2c09      	cmp	r4, #9
90014ee6:	4626      	mov	r6, r4
90014ee8:	bf88      	it	hi
90014eea:	f1a4 060a 	subhi.w	r6, r4, #10
90014eee:	f1bc 0f00 	cmp.w	ip, #0
90014ef2:	f104 34ff 	add.w	r4, r4, #4294967295
90014ef6:	bf08      	it	eq
90014ef8:	f04f 0c02 	moveq.w	ip, #2
90014efc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90014f00:	b2a4      	uxth	r4, r4
90014f02:	f10c 3cff 	add.w	ip, ip, #4294967295
90014f06:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
90014f0a:	454c      	cmp	r4, r9
90014f0c:	fa1f fc8c 	uxth.w	ip, ip
90014f10:	eb00 064c 	add.w	r6, r0, ip, lsl #1
90014f14:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
90014f18:	d1e4      	bne.n	90014ee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
90014f1a:	eba5 050e 	sub.w	r5, r5, lr
90014f1e:	eb0e 0408 	add.w	r4, lr, r8
90014f22:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
90014f26:	8705      	strh	r5, [r0, #56]	; 0x38
90014f28:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
90014f2c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
90014f2e:	250a      	movs	r5, #10
90014f30:	1a64      	subs	r4, r4, r1
90014f32:	4439      	add	r1, r7
90014f34:	b289      	uxth	r1, r1
90014f36:	8704      	strh	r4, [r0, #56]	; 0x38
90014f38:	2909      	cmp	r1, #9
90014f3a:	bf88      	it	hi
90014f3c:	390a      	subhi	r1, #10
90014f3e:	86c1      	strh	r1, [r0, #54]	; 0x36
90014f40:	b18a      	cbz	r2, 90014f66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90014f42:	8f01      	ldrh	r1, [r0, #56]	; 0x38
90014f44:	3a01      	subs	r2, #1
90014f46:	3101      	adds	r1, #1
90014f48:	b292      	uxth	r2, r2
90014f4a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90014f4e:	8701      	strh	r1, [r0, #56]	; 0x38
90014f50:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90014f52:	b901      	cbnz	r1, 90014f56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90014f54:	86c5      	strh	r5, [r0, #54]	; 0x36
90014f56:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90014f58:	3901      	subs	r1, #1
90014f5a:	b289      	uxth	r1, r1
90014f5c:	86c1      	strh	r1, [r0, #54]	; 0x36
90014f5e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90014f62:	844c      	strh	r4, [r1, #34]	; 0x22
90014f64:	e7ec      	b.n	90014f40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90014f66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014f6a:	f7ff bf4c 	b.w	90014e06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90014f6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90014f6e:	b570      	push	{r4, r5, r6, lr}
90014f70:	2500      	movs	r5, #0
90014f72:	4295      	cmp	r5, r2
90014f74:	d011      	beq.n	90014f9a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
90014f76:	8bc4      	ldrh	r4, [r0, #30]
90014f78:	f831 6b02 	ldrh.w	r6, [r1], #2
90014f7c:	4414      	add	r4, r2
90014f7e:	3c01      	subs	r4, #1
90014f80:	1b64      	subs	r4, r4, r5
90014f82:	b2a4      	uxth	r4, r4
90014f84:	2c01      	cmp	r4, #1
90014f86:	bf88      	it	hi
90014f88:	3c02      	subhi	r4, #2
90014f8a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90014f8e:	8b64      	ldrh	r4, [r4, #26]
90014f90:	42b4      	cmp	r4, r6
90014f92:	d117      	bne.n	90014fc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
90014f94:	3501      	adds	r5, #1
90014f96:	b2ad      	uxth	r5, r5
90014f98:	e7eb      	b.n	90014f72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90014f9a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90014f9e:	2400      	movs	r4, #0
90014fa0:	4413      	add	r3, r2
90014fa2:	b2a2      	uxth	r2, r4
90014fa4:	429a      	cmp	r2, r3
90014fa6:	da0f      	bge.n	90014fc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90014fa8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
90014faa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90014fae:	3401      	adds	r4, #1
90014fb0:	4432      	add	r2, r6
90014fb2:	b292      	uxth	r2, r2
90014fb4:	2a09      	cmp	r2, #9
90014fb6:	bf88      	it	hi
90014fb8:	3a0a      	subhi	r2, #10
90014fba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90014fbe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
90014fc0:	42aa      	cmp	r2, r5
90014fc2:	d0ee      	beq.n	90014fa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
90014fc4:	2000      	movs	r0, #0
90014fc6:	bd70      	pop	{r4, r5, r6, pc}
90014fc8:	2001      	movs	r0, #1
90014fca:	e7fc      	b.n	90014fc6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

90014fcc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
90014fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014fd0:	4605      	mov	r5, r0
90014fd2:	4616      	mov	r6, r2
90014fd4:	1c8c      	adds	r4, r1, #2
90014fd6:	8809      	ldrh	r1, [r1, #0]
90014fd8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
90014fdc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90014fe0:	42b3      	cmp	r3, r6
90014fe2:	d124      	bne.n	9001502e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
90014fe4:	f3c1 2903 	ubfx	r9, r1, #8, #4
90014fe8:	f3c1 1803 	ubfx	r8, r1, #4, #4
90014fec:	f001 070f 	and.w	r7, r1, #15
90014ff0:	4652      	mov	r2, sl
90014ff2:	f8cd 8000 	str.w	r8, [sp]
90014ff6:	464b      	mov	r3, r9
90014ff8:	4621      	mov	r1, r4
90014ffa:	4628      	mov	r0, r5
90014ffc:	f7ff ffb7 	bl	90014f6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
90015000:	4683      	mov	fp, r0
90015002:	b168      	cbz	r0, 90015020 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
90015004:	eb0a 0109 	add.w	r1, sl, r9
90015008:	463a      	mov	r2, r7
9001500a:	4628      	mov	r0, r5
9001500c:	4441      	add	r1, r8
9001500e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
90015012:	4649      	mov	r1, r9
90015014:	f7ff ff52 	bl	90014ebc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90015018:	4658      	mov	r0, fp
9001501a:	b003      	add	sp, #12
9001501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015020:	eb07 010a 	add.w	r1, r7, sl
90015024:	4449      	add	r1, r9
90015026:	4441      	add	r1, r8
90015028:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001502c:	e7d2      	b.n	90014fd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001502e:	f04f 0b00 	mov.w	fp, #0
90015032:	e7f1      	b.n	90015018 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90015034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90015034:	b570      	push	{r4, r5, r6, lr}
90015036:	8810      	ldrh	r0, [r2, #0]
90015038:	4298      	cmp	r0, r3
9001503a:	d817      	bhi.n	9001506c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001503c:	1e48      	subs	r0, r1, #1
9001503e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90015042:	4298      	cmp	r0, r3
90015044:	d312      	bcc.n	9001506c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015046:	2400      	movs	r4, #0
90015048:	428c      	cmp	r4, r1
9001504a:	d20f      	bcs.n	9001506c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001504c:	1860      	adds	r0, r4, r1
9001504e:	1040      	asrs	r0, r0, #1
90015050:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90015054:	0085      	lsls	r5, r0, #2
90015056:	42b3      	cmp	r3, r6
90015058:	d902      	bls.n	90015060 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001505a:	3001      	adds	r0, #1
9001505c:	b284      	uxth	r4, r0
9001505e:	e7f3      	b.n	90015048 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015060:	d201      	bcs.n	90015066 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90015062:	b281      	uxth	r1, r0
90015064:	e7f0      	b.n	90015048 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015066:	442a      	add	r2, r5
90015068:	8850      	ldrh	r0, [r2, #2]
9001506a:	bd70      	pop	{r4, r5, r6, pc}
9001506c:	2000      	movs	r0, #0
9001506e:	e7fc      	b.n	9001506a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90015070 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90015070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015074:	6c45      	ldr	r5, [r0, #68]	; 0x44
90015076:	4604      	mov	r4, r0
90015078:	260b      	movs	r6, #11
9001507a:	886f      	ldrh	r7, [r5, #2]
9001507c:	087f      	lsrs	r7, r7, #1
9001507e:	3e01      	subs	r6, #1
90015080:	d013      	beq.n	900150aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90015082:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90015084:	462a      	mov	r2, r5
90015086:	4639      	mov	r1, r7
90015088:	4620      	mov	r0, r4
9001508a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001508e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90015092:	4643      	mov	r3, r8
90015094:	f7ff ffce 	bl	90015034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90015098:	b138      	cbz	r0, 900150aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001509a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001509e:	4642      	mov	r2, r8
900150a0:	4620      	mov	r0, r4
900150a2:	f7ff ff93 	bl	90014fcc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
900150a6:	2800      	cmp	r0, #0
900150a8:	d1e9      	bne.n	9001507e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
900150aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

900150b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
900150b0:	b570      	push	{r4, r5, r6, lr}
900150b2:	694a      	ldr	r2, [r1, #20]
900150b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
900150b6:	684b      	ldr	r3, [r1, #4]
900150b8:	1b54      	subs	r4, r2, r5
900150ba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
900150bc:	f000 8106 	beq.w	900152cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
900150c0:	1b9b      	subs	r3, r3, r6
900150c2:	d003      	beq.n	900150cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900150c4:	4363      	muls	r3, r4
900150c6:	2210      	movs	r2, #16
900150c8:	fb93 f3f2 	sdiv	r3, r3, r2
900150cc:	680c      	ldr	r4, [r1, #0]
900150ce:	698a      	ldr	r2, [r1, #24]
900150d0:	1b65      	subs	r5, r4, r5
900150d2:	f000 80fd 	beq.w	900152d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
900150d6:	1b92      	subs	r2, r2, r6
900150d8:	d003      	beq.n	900150e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
900150da:	436a      	muls	r2, r5
900150dc:	2410      	movs	r4, #16
900150de:	fb92 f2f4 	sdiv	r2, r2, r4
900150e2:	1a9b      	subs	r3, r3, r2
900150e4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001530c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
900150e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900150ec:	460a      	mov	r2, r1
900150ee:	ee07 3a90 	vmov	s15, r3
900150f2:	f100 040c 	add.w	r4, r0, #12
900150f6:	4603      	mov	r3, r0
900150f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900150fc:	ee67 7a84 	vmul.f32	s15, s15, s8
90015100:	ee87 3a27 	vdiv.f32	s6, s14, s15
90015104:	eeb1 6a43 	vneg.f32	s12, s6
90015108:	edd2 7a02 	vldr	s15, [r2, #8]
9001510c:	3214      	adds	r2, #20
9001510e:	eec7 6a27 	vdiv.f32	s13, s14, s15
90015112:	ece3 6a01 	vstmia	r3!, {s13}
90015116:	429c      	cmp	r4, r3
90015118:	ed52 7a02 	vldr	s15, [r2, #-8]
9001511c:	ee67 7aa6 	vmul.f32	s15, s15, s13
90015120:	edc3 7a02 	vstr	s15, [r3, #8]
90015124:	ed52 7a01 	vldr	s15, [r2, #-4]
90015128:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001512c:	edc3 7a05 	vstr	s15, [r3, #20]
90015130:	d1ea      	bne.n	90015108 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
90015132:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015134:	698b      	ldr	r3, [r1, #24]
90015136:	edd0 4a02 	vldr	s9, [r0, #8]
9001513a:	1a9b      	subs	r3, r3, r2
9001513c:	edd0 3a00 	vldr	s7, [r0]
90015140:	edd0 6a01 	vldr	s13, [r0, #4]
90015144:	ee07 3a90 	vmov	s15, r3
90015148:	684b      	ldr	r3, [r1, #4]
9001514a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001514e:	ed90 5a05 	vldr	s10, [r0, #20]
90015152:	1a9b      	subs	r3, r3, r2
90015154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015158:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001515c:	ed90 2a03 	vldr	s4, [r0, #12]
90015160:	ee07 3a10 	vmov	s14, r3
90015164:	edd0 5a04 	vldr	s11, [r0, #16]
90015168:	ee67 7a84 	vmul.f32	s15, s15, s8
9001516c:	ed90 1a07 	vldr	s2, [r0, #28]
90015170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015174:	edd0 2a06 	vldr	s5, [r0, #24]
90015178:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001517c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90015180:	ee27 7a04 	vmul.f32	s14, s14, s8
90015184:	ee32 5a45 	vsub.f32	s10, s4, s10
90015188:	eee6 7a87 	vfma.f32	s15, s13, s14
9001518c:	ee67 7a83 	vmul.f32	s15, s15, s6
90015190:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
90015194:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90015196:	694a      	ldr	r2, [r1, #20]
90015198:	1b13      	subs	r3, r2, r4
9001519a:	ee07 3a10 	vmov	s14, r3
9001519e:	680b      	ldr	r3, [r1, #0]
900151a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151a4:	1b1b      	subs	r3, r3, r4
900151a6:	ee27 7a04 	vmul.f32	s14, s14, s8
900151aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
900151ae:	ee07 3a10 	vmov	s14, r3
900151b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151b6:	ee27 7a04 	vmul.f32	s14, s14, s8
900151ba:	eee6 4a87 	vfma.f32	s9, s13, s14
900151be:	ee64 4a86 	vmul.f32	s9, s9, s12
900151c2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
900151c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900151c8:	698b      	ldr	r3, [r1, #24]
900151ca:	1a9b      	subs	r3, r3, r2
900151cc:	ee06 3a90 	vmov	s13, r3
900151d0:	684b      	ldr	r3, [r1, #4]
900151d2:	1a9b      	subs	r3, r3, r2
900151d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900151d8:	ee07 3a10 	vmov	s14, r3
900151dc:	ee66 6a84 	vmul.f32	s13, s13, s8
900151e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151e4:	ee65 6a66 	vnmul.f32	s13, s10, s13
900151e8:	ee27 7a04 	vmul.f32	s14, s14, s8
900151ec:	eee5 6a87 	vfma.f32	s13, s11, s14
900151f0:	ee66 6a83 	vmul.f32	s13, s13, s6
900151f4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
900151f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900151fa:	694a      	ldr	r2, [r1, #20]
900151fc:	1b13      	subs	r3, r2, r4
900151fe:	ee07 3a10 	vmov	s14, r3
90015202:	680b      	ldr	r3, [r1, #0]
90015204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015208:	1b1b      	subs	r3, r3, r4
9001520a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001520e:	ee25 5a47 	vnmul.f32	s10, s10, s14
90015212:	ee07 3a10 	vmov	s14, r3
90015216:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001521a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001521e:	eea5 5a87 	vfma.f32	s10, s11, s14
90015222:	edd0 5a08 	vldr	s11, [r0, #32]
90015226:	ee31 1a65 	vsub.f32	s2, s2, s11
9001522a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001522e:	ee25 5a06 	vmul.f32	s10, s10, s12
90015232:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
90015236:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015238:	698b      	ldr	r3, [r1, #24]
9001523a:	1a9b      	subs	r3, r3, r2
9001523c:	ee07 3a10 	vmov	s14, r3
90015240:	684b      	ldr	r3, [r1, #4]
90015242:	1a9b      	subs	r3, r3, r2
90015244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015248:	ee01 3a90 	vmov	s3, r3
9001524c:	ee27 7a04 	vmul.f32	s14, s14, s8
90015250:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90015254:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90015258:	ee61 1a84 	vmul.f32	s3, s3, s8
9001525c:	eea1 7a21 	vfma.f32	s14, s2, s3
90015260:	ee27 7a03 	vmul.f32	s14, s14, s6
90015264:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015268:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001526a:	694a      	ldr	r2, [r1, #20]
9001526c:	1b13      	subs	r3, r2, r4
9001526e:	ee03 3a10 	vmov	s6, r3
90015272:	680b      	ldr	r3, [r1, #0]
90015274:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90015278:	1b1b      	subs	r3, r3, r4
9001527a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001527e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
90015282:	ee03 3a10 	vmov	s6, r3
90015286:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001528a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001528e:	eee1 5a04 	vfma.f32	s11, s2, s8
90015292:	ee25 6a86 	vmul.f32	s12, s11, s12
90015296:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001529a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001529e:	eee3 5aa6 	vfma.f32	s11, s7, s13
900152a2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
900152a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900152aa:	dd13      	ble.n	900152d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
900152ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900152b0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
900152b4:	63c3      	str	r3, [r0, #60]	; 0x3c
900152b6:	eee3 7a87 	vfma.f32	s15, s7, s14
900152ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900152be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900152c2:	dd15      	ble.n	900152f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
900152c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900152c8:	6403      	str	r3, [r0, #64]	; 0x40
900152ca:	bd70      	pop	{r4, r5, r6, pc}
900152cc:	4623      	mov	r3, r4
900152ce:	e6fd      	b.n	900150cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900152d0:	462a      	mov	r2, r5
900152d2:	e706      	b.n	900150e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
900152d4:	d502      	bpl.n	900152dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
900152d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
900152da:	e7e9      	b.n	900152b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
900152dc:	ee22 2a64 	vnmul.f32	s4, s4, s9
900152e0:	eea3 2a85 	vfma.f32	s4, s7, s10
900152e4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
900152e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900152ec:	dade      	bge.n	900152ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
900152ee:	e7f2      	b.n	900152d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
900152f0:	d502      	bpl.n	900152f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
900152f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
900152f6:	e7e7      	b.n	900152c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
900152f8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
900152fc:	eee3 4a86 	vfma.f32	s9, s7, s12
90015300:	eef5 4ac0 	vcmpe.f32	s9, #0.0
90015304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015308:	dadc      	bge.n	900152c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001530a:	e7f2      	b.n	900152f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001530c:	3d800000 	.word	0x3d800000

90015310 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
90015310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015314:	2714      	movs	r7, #20
90015316:	435f      	muls	r7, r3
90015318:	eb02 0c07 	add.w	ip, r2, r7
9001531c:	f8dc 5004 	ldr.w	r5, [ip, #4]
90015320:	f115 0e0f 	adds.w	lr, r5, #15
90015324:	f100 80a2 	bmi.w	9001546c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
90015328:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001532c:	9c08      	ldr	r4, [sp, #32]
9001532e:	2614      	movs	r6, #20
90015330:	f8c0 e014 	str.w	lr, [r0, #20]
90015334:	4366      	muls	r6, r4
90015336:	eb02 0806 	add.w	r8, r2, r6
9001533a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001533e:	f115 040f 	adds.w	r4, r5, #15
90015342:	f100 809f 	bmi.w	90015484 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
90015346:	1124      	asrs	r4, r4, #4
90015348:	eba4 040e 	sub.w	r4, r4, lr
9001534c:	6184      	str	r4, [r0, #24]
9001534e:	2c00      	cmp	r4, #0
90015350:	f000 808a 	beq.w	90015468 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90015354:	f8dc 9004 	ldr.w	r9, [ip, #4]
90015358:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001535c:	5995      	ldr	r5, [r2, r6]
9001535e:	eba4 0809 	sub.w	r8, r4, r9
90015362:	59d4      	ldr	r4, [r2, r7]
90015364:	eba5 0a04 	sub.w	sl, r5, r4
90015368:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001536c:	ea4f 150a 	mov.w	r5, sl, lsl #4
90015370:	fb0e fe05 	mul.w	lr, lr, r5
90015374:	fb0a ee19 	mls	lr, sl, r9, lr
90015378:	fb08 e404 	mla	r4, r8, r4, lr
9001537c:	3c01      	subs	r4, #1
9001537e:	19a4      	adds	r4, r4, r6
90015380:	f100 808c 	bmi.w	9001549c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
90015384:	fb94 fef6 	sdiv	lr, r4, r6
90015388:	fb06 441e 	mls	r4, r6, lr, r4
9001538c:	f8c0 e000 	str.w	lr, [r0]
90015390:	6104      	str	r4, [r0, #16]
90015392:	2d00      	cmp	r5, #0
90015394:	f2c0 8095 	blt.w	900154c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
90015398:	fb95 f4f6 	sdiv	r4, r5, r6
9001539c:	fb06 5514 	mls	r5, r6, r4, r5
900153a0:	6044      	str	r4, [r0, #4]
900153a2:	6085      	str	r5, [r0, #8]
900153a4:	60c6      	str	r6, [r0, #12]
900153a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
900153aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
900153ae:	6945      	ldr	r5, [r0, #20]
900153b0:	59d2      	ldr	r2, [r2, r7]
900153b2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
900153b6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 900154e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
900153ba:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900153be:	ee07 4a10 	vmov	s14, r4
900153c2:	6804      	ldr	r4, [r0, #0]
900153c4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
900153c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900153cc:	ee07 2a90 	vmov	s15, r2
900153d0:	ee27 7a26 	vmul.f32	s14, s14, s13
900153d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900153d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
900153dc:	edd3 6a00 	vldr	s13, [r3]
900153e0:	eee6 6a07 	vfma.f32	s13, s12, s14
900153e4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
900153e8:	eee6 6a27 	vfma.f32	s13, s12, s15
900153ec:	edc0 6a07 	vstr	s13, [r0, #28]
900153f0:	edd0 6a01 	vldr	s13, [r0, #4]
900153f4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
900153f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900153fc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90015400:	eea6 6aa5 	vfma.f32	s12, s13, s11
90015404:	ed80 6a08 	vstr	s12, [r0, #32]
90015408:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001540a:	6242      	str	r2, [r0, #36]	; 0x24
9001540c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
90015410:	ed93 6a03 	vldr	s12, [r3, #12]
90015414:	eea5 6a87 	vfma.f32	s12, s11, s14
90015418:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001541c:	eea5 6aa7 	vfma.f32	s12, s11, s15
90015420:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
90015424:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90015428:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001542c:	eea6 6aa5 	vfma.f32	s12, s13, s11
90015430:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
90015434:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015436:	6302      	str	r2, [r0, #48]	; 0x30
90015438:	ed93 6a06 	vldr	s12, [r3, #24]
9001543c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90015440:	eea5 6a87 	vfma.f32	s12, s11, s14
90015444:	eeb0 7a46 	vmov.f32	s14, s12
90015448:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001544c:	eea6 7a27 	vfma.f32	s14, s12, s15
90015450:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015454:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90015458:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001545c:	eee6 7a87 	vfma.f32	s15, s13, s14
90015460:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
90015464:	6b4b      	ldr	r3, [r1, #52]	; 0x34
90015466:	63c3      	str	r3, [r0, #60]	; 0x3c
90015468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001546c:	2410      	movs	r4, #16
9001546e:	f1c5 0501 	rsb	r5, r5, #1
90015472:	fb9e fef4 	sdiv	lr, lr, r4
90015476:	f015 050f 	ands.w	r5, r5, #15
9001547a:	bf18      	it	ne
9001547c:	2501      	movne	r5, #1
9001547e:	ebae 0e05 	sub.w	lr, lr, r5
90015482:	e753      	b.n	9001532c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
90015484:	f04f 0910 	mov.w	r9, #16
90015488:	f1c5 0501 	rsb	r5, r5, #1
9001548c:	fb94 f4f9 	sdiv	r4, r4, r9
90015490:	f015 050f 	ands.w	r5, r5, #15
90015494:	bf18      	it	ne
90015496:	2501      	movne	r5, #1
90015498:	1b64      	subs	r4, r4, r5
9001549a:	e755      	b.n	90015348 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001549c:	4264      	negs	r4, r4
9001549e:	fb94 fef6 	sdiv	lr, r4, r6
900154a2:	f1ce 0800 	rsb	r8, lr, #0
900154a6:	fb06 441e 	mls	r4, r6, lr, r4
900154aa:	f8c0 8000 	str.w	r8, [r0]
900154ae:	6104      	str	r4, [r0, #16]
900154b0:	2c00      	cmp	r4, #0
900154b2:	f43f af6e 	beq.w	90015392 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
900154b6:	ea6f 0e0e 	mvn.w	lr, lr
900154ba:	1b34      	subs	r4, r6, r4
900154bc:	f8c0 e000 	str.w	lr, [r0]
900154c0:	e766      	b.n	90015390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
900154c2:	426d      	negs	r5, r5
900154c4:	fb95 f4f6 	sdiv	r4, r5, r6
900154c8:	f1c4 0e00 	rsb	lr, r4, #0
900154cc:	fb06 5514 	mls	r5, r6, r4, r5
900154d0:	f8c0 e004 	str.w	lr, [r0, #4]
900154d4:	6085      	str	r5, [r0, #8]
900154d6:	2d00      	cmp	r5, #0
900154d8:	f43f af64 	beq.w	900153a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
900154dc:	43e4      	mvns	r4, r4
900154de:	1b75      	subs	r5, r6, r5
900154e0:	6044      	str	r4, [r0, #4]
900154e2:	e75e      	b.n	900153a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
900154e4:	3d800000 	.word	0x3d800000

900154e8 <_ZN8touchgfx7Unicode6strlenEPKt>:
900154e8:	4602      	mov	r2, r0
900154ea:	b148      	cbz	r0, 90015500 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
900154ec:	2300      	movs	r3, #0
900154ee:	b298      	uxth	r0, r3
900154f0:	3301      	adds	r3, #1
900154f2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
900154f6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
900154fa:	2900      	cmp	r1, #0
900154fc:	d1f7      	bne.n	900154ee <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
900154fe:	4770      	bx	lr
90015500:	4770      	bx	lr

90015502 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
90015502:	b530      	push	{r4, r5, lr}
90015504:	4604      	mov	r4, r0
90015506:	b159      	cbz	r1, 90015520 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
90015508:	b148      	cbz	r0, 9001551e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001550a:	2300      	movs	r3, #0
9001550c:	b298      	uxth	r0, r3
9001550e:	4282      	cmp	r2, r0
90015510:	d905      	bls.n	9001551e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
90015512:	5ccd      	ldrb	r5, [r1, r3]
90015514:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
90015518:	3301      	adds	r3, #1
9001551a:	2d00      	cmp	r5, #0
9001551c:	d1f6      	bne.n	9001550c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001551e:	bd30      	pop	{r4, r5, pc}
90015520:	4608      	mov	r0, r1
90015522:	e7fc      	b.n	9001551e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

90015524 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
90015524:	b5f0      	push	{r4, r5, r6, r7, lr}
90015526:	468c      	mov	ip, r1
90015528:	b08b      	sub	sp, #44	; 0x2c
9001552a:	2100      	movs	r1, #0
9001552c:	ae01      	add	r6, sp, #4
9001552e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90015532:	211f      	movs	r1, #31
90015534:	fbb0 f7f3 	udiv	r7, r0, r3
90015538:	fb03 0517 	mls	r5, r3, r7, r0
9001553c:	4638      	mov	r0, r7
9001553e:	b2ec      	uxtb	r4, r5
90015540:	2d09      	cmp	r5, #9
90015542:	bfd4      	ite	le
90015544:	3430      	addle	r4, #48	; 0x30
90015546:	3457      	addgt	r4, #87	; 0x57
90015548:	b2e4      	uxtb	r4, r4
9001554a:	558c      	strb	r4, [r1, r6]
9001554c:	1e4c      	subs	r4, r1, #1
9001554e:	b92f      	cbnz	r7, 9001555c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90015550:	4431      	add	r1, r6
90015552:	4660      	mov	r0, ip
90015554:	f7ff ffd5 	bl	90015502 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90015558:	b00b      	add	sp, #44	; 0x2c
9001555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001555c:	4621      	mov	r1, r4
9001555e:	e7e9      	b.n	90015534 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

90015560 <_ZN8touchgfx7Unicode4itoaElPtti>:
90015560:	b5f0      	push	{r4, r5, r6, r7, lr}
90015562:	4607      	mov	r7, r0
90015564:	b08b      	sub	sp, #44	; 0x2c
90015566:	4608      	mov	r0, r1
90015568:	b341      	cbz	r1, 900155bc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001556a:	1e99      	subs	r1, r3, #2
9001556c:	2922      	cmp	r1, #34	; 0x22
9001556e:	d825      	bhi.n	900155bc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90015570:	2100      	movs	r1, #0
90015572:	463c      	mov	r4, r7
90015574:	261f      	movs	r6, #31
90015576:	f10d 0c04 	add.w	ip, sp, #4
9001557a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001557e:	1e71      	subs	r1, r6, #1
90015580:	fb94 fef3 	sdiv	lr, r4, r3
90015584:	fb03 441e 	mls	r4, r3, lr, r4
90015588:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001558c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
90015590:	b2ec      	uxtb	r4, r5
90015592:	2d09      	cmp	r5, #9
90015594:	bfd4      	ite	le
90015596:	3430      	addle	r4, #48	; 0x30
90015598:	3457      	addgt	r4, #87	; 0x57
9001559a:	b2e4      	uxtb	r4, r4
9001559c:	f80c 4006 	strb.w	r4, [ip, r6]
900155a0:	4674      	mov	r4, lr
900155a2:	b96c      	cbnz	r4, 900155c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
900155a4:	2f00      	cmp	r7, #0
900155a6:	da05      	bge.n	900155b4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
900155a8:	ab0a      	add	r3, sp, #40	; 0x28
900155aa:	4419      	add	r1, r3
900155ac:	232d      	movs	r3, #45	; 0x2d
900155ae:	f801 3c24 	strb.w	r3, [r1, #-36]
900155b2:	1eb1      	subs	r1, r6, #2
900155b4:	3101      	adds	r1, #1
900155b6:	4461      	add	r1, ip
900155b8:	f7ff ffa3 	bl	90015502 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
900155bc:	b00b      	add	sp, #44	; 0x2c
900155be:	bdf0      	pop	{r4, r5, r6, r7, pc}
900155c0:	460e      	mov	r6, r1
900155c2:	e7dc      	b.n	9001557e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

900155c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
900155c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900155c8:	b085      	sub	sp, #20
900155ca:	4691      	mov	r9, r2
900155cc:	6802      	ldr	r2, [r0, #0]
900155ce:	4688      	mov	r8, r1
900155d0:	461c      	mov	r4, r3
900155d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
900155d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
900155da:	4683      	mov	fp, r0
900155dc:	4610      	mov	r0, r2
900155de:	9103      	str	r1, [sp, #12]
900155e0:	9302      	str	r3, [sp, #8]
900155e2:	9201      	str	r2, [sp, #4]
900155e4:	f7ff ff80 	bl	900154e8 <_ZN8touchgfx7Unicode6strlenEPKt>
900155e8:	f1b8 0f00 	cmp.w	r8, #0
900155ec:	bf0c      	ite	eq
900155ee:	4684      	moveq	ip, r0
900155f0:	f100 0c01 	addne.w	ip, r0, #1
900155f4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
900155f8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
900155fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
900155fe:	fa1f fc8c 	uxth.w	ip, ip
90015602:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90015604:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
90015608:	9903      	ldr	r1, [sp, #12]
9001560a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001560e:	d041      	beq.n	90015694 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90015610:	d834      	bhi.n	9001567c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
90015612:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
90015616:	d059      	beq.n	900156cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
90015618:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001561c:	d03a      	beq.n	90015694 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001561e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
90015622:	d034      	beq.n	9001568e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90015624:	2400      	movs	r4, #0
90015626:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001562a:	3a01      	subs	r2, #1
9001562c:	b169      	cbz	r1, 9001564a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001562e:	9911      	ldr	r1, [sp, #68]	; 0x44
90015630:	458c      	cmp	ip, r1
90015632:	da09      	bge.n	90015648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90015634:	eba1 010c 	sub.w	r1, r1, ip
90015638:	b289      	uxth	r1, r1
9001563a:	b933      	cbnz	r3, 9001564a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001563c:	2e00      	cmp	r6, #0
9001563e:	d051      	beq.n	900156e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90015640:	2800      	cmp	r0, #0
90015642:	d04f      	beq.n	900156e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90015644:	440c      	add	r4, r1
90015646:	b2a4      	uxth	r4, r4
90015648:	2100      	movs	r1, #0
9001564a:	682b      	ldr	r3, [r5, #0]
9001564c:	4293      	cmp	r3, r2
9001564e:	da07      	bge.n	90015660 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90015650:	f1b8 0f00 	cmp.w	r8, #0
90015654:	d004      	beq.n	90015660 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90015656:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001565a:	682b      	ldr	r3, [r5, #0]
9001565c:	3301      	adds	r3, #1
9001565e:	602b      	str	r3, [r5, #0]
90015660:	2730      	movs	r7, #48	; 0x30
90015662:	2c00      	cmp	r4, #0
90015664:	d04e      	beq.n	90015704 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90015666:	682e      	ldr	r6, [r5, #0]
90015668:	3c01      	subs	r4, #1
9001566a:	42b2      	cmp	r2, r6
9001566c:	b2a4      	uxth	r4, r4
9001566e:	dd49      	ble.n	90015704 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90015670:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90015674:	682b      	ldr	r3, [r5, #0]
90015676:	3301      	adds	r3, #1
90015678:	602b      	str	r3, [r5, #0]
9001567a:	e7f2      	b.n	90015662 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001567c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
90015680:	d01d      	beq.n	900156be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
90015682:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
90015686:	d002      	beq.n	9001568e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90015688:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001568c:	e7c9      	b.n	90015622 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001568e:	4684      	mov	ip, r0
90015690:	f04f 0800 	mov.w	r8, #0
90015694:	2c00      	cmp	r4, #0
90015696:	d0c6      	beq.n	90015626 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90015698:	b947      	cbnz	r7, 900156ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001569a:	2801      	cmp	r0, #1
9001569c:	d106      	bne.n	900156ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001569e:	8814      	ldrh	r4, [r2, #0]
900156a0:	2c30      	cmp	r4, #48	; 0x30
900156a2:	bf02      	ittt	eq
900156a4:	3202      	addeq	r2, #2
900156a6:	4638      	moveq	r0, r7
900156a8:	f8cb 2000 	streq.w	r2, [fp]
900156ac:	45bc      	cmp	ip, r7
900156ae:	da14      	bge.n	900156da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
900156b0:	b2bf      	uxth	r7, r7
900156b2:	eba7 040c 	sub.w	r4, r7, ip
900156b6:	46bc      	mov	ip, r7
900156b8:	b2a4      	uxth	r4, r4
900156ba:	2600      	movs	r6, #0
900156bc:	e7b3      	b.n	90015626 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900156be:	4684      	mov	ip, r0
900156c0:	b16c      	cbz	r4, 900156de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
900156c2:	42b8      	cmp	r0, r7
900156c4:	dd00      	ble.n	900156c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
900156c6:	b2b8      	uxth	r0, r7
900156c8:	2400      	movs	r4, #0
900156ca:	e003      	b.n	900156d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
900156cc:	f04f 0c01 	mov.w	ip, #1
900156d0:	2400      	movs	r4, #0
900156d2:	4660      	mov	r0, ip
900156d4:	4626      	mov	r6, r4
900156d6:	46a0      	mov	r8, r4
900156d8:	e7a5      	b.n	90015626 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900156da:	2400      	movs	r4, #0
900156dc:	e7ed      	b.n	900156ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
900156de:	4626      	mov	r6, r4
900156e0:	46a0      	mov	r8, r4
900156e2:	e7a0      	b.n	90015626 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900156e4:	2900      	cmp	r1, #0
900156e6:	d0b0      	beq.n	9001564a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900156e8:	2720      	movs	r7, #32
900156ea:	682e      	ldr	r6, [r5, #0]
900156ec:	2900      	cmp	r1, #0
900156ee:	d0ac      	beq.n	9001564a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900156f0:	3901      	subs	r1, #1
900156f2:	4296      	cmp	r6, r2
900156f4:	b289      	uxth	r1, r1
900156f6:	daa7      	bge.n	90015648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
900156f8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
900156fc:	682b      	ldr	r3, [r5, #0]
900156fe:	3301      	adds	r3, #1
90015700:	602b      	str	r3, [r5, #0]
90015702:	e7f2      	b.n	900156ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
90015704:	b188      	cbz	r0, 9001572a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90015706:	682b      	ldr	r3, [r5, #0]
90015708:	3801      	subs	r0, #1
9001570a:	429a      	cmp	r2, r3
9001570c:	b280      	uxth	r0, r0
9001570e:	dd0c      	ble.n	9001572a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90015710:	f8db 3000 	ldr.w	r3, [fp]
90015714:	1c9c      	adds	r4, r3, #2
90015716:	f8cb 4000 	str.w	r4, [fp]
9001571a:	881c      	ldrh	r4, [r3, #0]
9001571c:	682b      	ldr	r3, [r5, #0]
9001571e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
90015722:	682b      	ldr	r3, [r5, #0]
90015724:	3301      	adds	r3, #1
90015726:	602b      	str	r3, [r5, #0]
90015728:	e7ec      	b.n	90015704 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001572a:	2620      	movs	r6, #32
9001572c:	b151      	cbz	r1, 90015744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001572e:	6828      	ldr	r0, [r5, #0]
90015730:	3901      	subs	r1, #1
90015732:	4282      	cmp	r2, r0
90015734:	b289      	uxth	r1, r1
90015736:	dd05      	ble.n	90015744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90015738:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001573c:	682b      	ldr	r3, [r5, #0]
9001573e:	3301      	adds	r3, #1
90015740:	602b      	str	r3, [r5, #0]
90015742:	e7f3      	b.n	9001572c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
90015744:	b005      	add	sp, #20
90015746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001574a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001574a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001574e:	2400      	movs	r4, #0
90015750:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
90015754:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
90015758:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001575c:	8014      	strh	r4, [r2, #0]
9001575e:	701c      	strb	r4, [r3, #0]
90015760:	f888 4000 	strb.w	r4, [r8]
90015764:	f88c 4000 	strb.w	r4, [ip]
90015768:	f88e 4000 	strb.w	r4, [lr]
9001576c:	703c      	strb	r4, [r7, #0]
9001576e:	6804      	ldr	r4, [r0, #0]
90015770:	b1a4      	cbz	r4, 9001579c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
90015772:	8824      	ldrh	r4, [r4, #0]
90015774:	f04f 0901 	mov.w	r9, #1
90015778:	b314      	cbz	r4, 900157c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001577a:	2c2b      	cmp	r4, #43	; 0x2b
9001577c:	d001      	beq.n	90015782 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001577e:	2c20      	cmp	r4, #32
90015780:	d110      	bne.n	900157a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
90015782:	8014      	strh	r4, [r2, #0]
90015784:	6804      	ldr	r4, [r0, #0]
90015786:	b10c      	cbz	r4, 9001578c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
90015788:	3402      	adds	r4, #2
9001578a:	6004      	str	r4, [r0, #0]
9001578c:	680c      	ldr	r4, [r1, #0]
9001578e:	b10c      	cbz	r4, 90015794 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
90015790:	3401      	adds	r4, #1
90015792:	600c      	str	r4, [r1, #0]
90015794:	6804      	ldr	r4, [r0, #0]
90015796:	b17c      	cbz	r4, 900157b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
90015798:	8824      	ldrh	r4, [r4, #0]
9001579a:	e7ed      	b.n	90015778 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001579c:	680c      	ldr	r4, [r1, #0]
9001579e:	b17c      	cbz	r4, 900157c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900157a0:	7824      	ldrb	r4, [r4, #0]
900157a2:	e7e7      	b.n	90015774 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
900157a4:	2c2d      	cmp	r4, #45	; 0x2d
900157a6:	d102      	bne.n	900157ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
900157a8:	f883 9000 	strb.w	r9, [r3]
900157ac:	e7ea      	b.n	90015784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900157ae:	2c23      	cmp	r4, #35	; 0x23
900157b0:	d107      	bne.n	900157c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
900157b2:	f888 9000 	strb.w	r9, [r8]
900157b6:	e7e5      	b.n	90015784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900157b8:	680c      	ldr	r4, [r1, #0]
900157ba:	b10c      	cbz	r4, 900157c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900157bc:	7824      	ldrb	r4, [r4, #0]
900157be:	e7db      	b.n	90015778 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
900157c0:	2400      	movs	r4, #0
900157c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
900157c6:	2b09      	cmp	r3, #9
900157c8:	d901      	bls.n	900157ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
900157ca:	2c2a      	cmp	r4, #42	; 0x2a
900157cc:	d122      	bne.n	90015814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
900157ce:	2301      	movs	r3, #1
900157d0:	2c30      	cmp	r4, #48	; 0x30
900157d2:	f88e 3000 	strb.w	r3, [lr]
900157d6:	d10d      	bne.n	900157f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
900157d8:	f88c 3000 	strb.w	r3, [ip]
900157dc:	6803      	ldr	r3, [r0, #0]
900157de:	b10b      	cbz	r3, 900157e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
900157e0:	3302      	adds	r3, #2
900157e2:	6003      	str	r3, [r0, #0]
900157e4:	680b      	ldr	r3, [r1, #0]
900157e6:	b10b      	cbz	r3, 900157ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
900157e8:	3301      	adds	r3, #1
900157ea:	600b      	str	r3, [r1, #0]
900157ec:	6803      	ldr	r3, [r0, #0]
900157ee:	2b00      	cmp	r3, #0
900157f0:	d02f      	beq.n	90015852 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
900157f2:	881c      	ldrh	r4, [r3, #0]
900157f4:	2c2a      	cmp	r4, #42	; 0x2a
900157f6:	d135      	bne.n	90015864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
900157f8:	f04f 33ff 	mov.w	r3, #4294967295
900157fc:	6033      	str	r3, [r6, #0]
900157fe:	6803      	ldr	r3, [r0, #0]
90015800:	b10b      	cbz	r3, 90015806 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
90015802:	3302      	adds	r3, #2
90015804:	6003      	str	r3, [r0, #0]
90015806:	680b      	ldr	r3, [r1, #0]
90015808:	b10b      	cbz	r3, 9001580e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001580a:	3301      	adds	r3, #1
9001580c:	600b      	str	r3, [r1, #0]
9001580e:	6803      	ldr	r3, [r0, #0]
90015810:	b31b      	cbz	r3, 9001585a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
90015812:	881c      	ldrh	r4, [r3, #0]
90015814:	2c2e      	cmp	r4, #46	; 0x2e
90015816:	d11a      	bne.n	9001584e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90015818:	2301      	movs	r3, #1
9001581a:	703b      	strb	r3, [r7, #0]
9001581c:	6803      	ldr	r3, [r0, #0]
9001581e:	b10b      	cbz	r3, 90015824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90015820:	3302      	adds	r3, #2
90015822:	6003      	str	r3, [r0, #0]
90015824:	680b      	ldr	r3, [r1, #0]
90015826:	b10b      	cbz	r3, 9001582c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
90015828:	3301      	adds	r3, #1
9001582a:	600b      	str	r3, [r1, #0]
9001582c:	6803      	ldr	r3, [r0, #0]
9001582e:	2b00      	cmp	r3, #0
90015830:	d036      	beq.n	900158a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
90015832:	881b      	ldrh	r3, [r3, #0]
90015834:	2b2a      	cmp	r3, #42	; 0x2a
90015836:	d137      	bne.n	900158a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90015838:	f04f 33ff 	mov.w	r3, #4294967295
9001583c:	602b      	str	r3, [r5, #0]
9001583e:	6803      	ldr	r3, [r0, #0]
90015840:	b10b      	cbz	r3, 90015846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
90015842:	3302      	adds	r3, #2
90015844:	6003      	str	r3, [r0, #0]
90015846:	680b      	ldr	r3, [r1, #0]
90015848:	b10b      	cbz	r3, 9001584e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001584a:	3301      	adds	r3, #1
9001584c:	600b      	str	r3, [r1, #0]
9001584e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015852:	680c      	ldr	r4, [r1, #0]
90015854:	b134      	cbz	r4, 90015864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90015856:	7824      	ldrb	r4, [r4, #0]
90015858:	e7cc      	b.n	900157f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001585a:	680b      	ldr	r3, [r1, #0]
9001585c:	2b00      	cmp	r3, #0
9001585e:	d0f6      	beq.n	9001584e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90015860:	781c      	ldrb	r4, [r3, #0]
90015862:	e7d7      	b.n	90015814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90015864:	2300      	movs	r3, #0
90015866:	220a      	movs	r2, #10
90015868:	6033      	str	r3, [r6, #0]
9001586a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001586e:	fa1f f38c 	uxth.w	r3, ip
90015872:	2b09      	cmp	r3, #9
90015874:	d8ce      	bhi.n	90015814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90015876:	6833      	ldr	r3, [r6, #0]
90015878:	fb02 c303 	mla	r3, r2, r3, ip
9001587c:	6033      	str	r3, [r6, #0]
9001587e:	6803      	ldr	r3, [r0, #0]
90015880:	b10b      	cbz	r3, 90015886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
90015882:	3302      	adds	r3, #2
90015884:	6003      	str	r3, [r0, #0]
90015886:	680b      	ldr	r3, [r1, #0]
90015888:	b10b      	cbz	r3, 9001588e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001588a:	3301      	adds	r3, #1
9001588c:	600b      	str	r3, [r1, #0]
9001588e:	6803      	ldr	r3, [r0, #0]
90015890:	b10b      	cbz	r3, 90015896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
90015892:	881c      	ldrh	r4, [r3, #0]
90015894:	e7e9      	b.n	9001586a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90015896:	680c      	ldr	r4, [r1, #0]
90015898:	2c00      	cmp	r4, #0
9001589a:	d0e6      	beq.n	9001586a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001589c:	7824      	ldrb	r4, [r4, #0]
9001589e:	e7e4      	b.n	9001586a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900158a0:	680b      	ldr	r3, [r1, #0]
900158a2:	b10b      	cbz	r3, 900158a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
900158a4:	781b      	ldrb	r3, [r3, #0]
900158a6:	e7c5      	b.n	90015834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
900158a8:	2200      	movs	r2, #0
900158aa:	240a      	movs	r4, #10
900158ac:	602a      	str	r2, [r5, #0]
900158ae:	3b30      	subs	r3, #48	; 0x30
900158b0:	682a      	ldr	r2, [r5, #0]
900158b2:	b29e      	uxth	r6, r3
900158b4:	2e09      	cmp	r6, #9
900158b6:	d813      	bhi.n	900158e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
900158b8:	fb04 3302 	mla	r3, r4, r2, r3
900158bc:	602b      	str	r3, [r5, #0]
900158be:	6803      	ldr	r3, [r0, #0]
900158c0:	b10b      	cbz	r3, 900158c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
900158c2:	3302      	adds	r3, #2
900158c4:	6003      	str	r3, [r0, #0]
900158c6:	680b      	ldr	r3, [r1, #0]
900158c8:	b10b      	cbz	r3, 900158ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
900158ca:	3301      	adds	r3, #1
900158cc:	600b      	str	r3, [r1, #0]
900158ce:	6803      	ldr	r3, [r0, #0]
900158d0:	b10b      	cbz	r3, 900158d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
900158d2:	881b      	ldrh	r3, [r3, #0]
900158d4:	e7eb      	b.n	900158ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900158d6:	680b      	ldr	r3, [r1, #0]
900158d8:	2b00      	cmp	r3, #0
900158da:	d0e8      	beq.n	900158ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900158dc:	781b      	ldrb	r3, [r3, #0]
900158de:	e7e6      	b.n	900158ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900158e0:	2a06      	cmp	r2, #6
900158e2:	bfa8      	it	ge
900158e4:	2206      	movge	r2, #6
900158e6:	602a      	str	r2, [r5, #0]
900158e8:	e7b1      	b.n	9001584e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

900158ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
900158ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900158ee:	b0a3      	sub	sp, #140	; 0x8c
900158f0:	2600      	movs	r6, #0
900158f2:	4607      	mov	r7, r0
900158f4:	4688      	mov	r8, r1
900158f6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
900158fa:	4631      	mov	r1, r6
900158fc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
900158fe:	4648      	mov	r0, r9
90015900:	960d      	str	r6, [sp, #52]	; 0x34
90015902:	e9cd 3208 	strd	r3, r2, [sp, #32]
90015906:	2242      	movs	r2, #66	; 0x42
90015908:	f00c fac4 	bl	90021e94 <memset>
9001590c:	b15f      	cbz	r7, 90015926 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001590e:	f108 3aff 	add.w	sl, r8, #4294967295
90015912:	9a09      	ldr	r2, [sp, #36]	; 0x24
90015914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90015916:	b152      	cbz	r2, 9001592e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
90015918:	8812      	ldrh	r2, [r2, #0]
9001591a:	b10a      	cbz	r2, 90015920 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001591c:	459a      	cmp	sl, r3
9001591e:	dc2e      	bgt.n	9001597e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90015920:	2200      	movs	r2, #0
90015922:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90015926:	4638      	mov	r0, r7
90015928:	b023      	add	sp, #140	; 0x8c
9001592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001592e:	9a08      	ldr	r2, [sp, #32]
90015930:	2a00      	cmp	r2, #0
90015932:	d0f5      	beq.n	90015920 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90015934:	7812      	ldrb	r2, [r2, #0]
90015936:	e7f0      	b.n	9001591a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
90015938:	2d00      	cmp	r5, #0
9001593a:	d0ea      	beq.n	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001593c:	782a      	ldrb	r2, [r5, #0]
9001593e:	b142      	cbz	r2, 90015952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90015940:	2a25      	cmp	r2, #37	; 0x25
90015942:	d001      	beq.n	90015948 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
90015944:	459a      	cmp	sl, r3
90015946:	dc08      	bgt.n	9001595a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
90015948:	f1bb 0f00 	cmp.w	fp, #0
9001594c:	d121      	bne.n	90015992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001594e:	2d00      	cmp	r5, #0
90015950:	d0df      	beq.n	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90015952:	782a      	ldrb	r2, [r5, #0]
90015954:	f04f 0b00 	mov.w	fp, #0
90015958:	e01d      	b.n	90015996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001595a:	f1bb 0f00 	cmp.w	fp, #0
9001595e:	d077      	beq.n	90015a50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
90015960:	f8bb 2000 	ldrh.w	r2, [fp]
90015964:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90015968:	f1bb 0f00 	cmp.w	fp, #0
9001596c:	d002      	beq.n	90015974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001596e:	f10b 0202 	add.w	r2, fp, #2
90015972:	9209      	str	r2, [sp, #36]	; 0x24
90015974:	b10d      	cbz	r5, 9001597a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
90015976:	3501      	adds	r5, #1
90015978:	9508      	str	r5, [sp, #32]
9001597a:	3301      	adds	r3, #1
9001597c:	930d      	str	r3, [sp, #52]	; 0x34
9001597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90015980:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
90015984:	f1bb 0f00 	cmp.w	fp, #0
90015988:	d0d6      	beq.n	90015938 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001598a:	f8bb 2000 	ldrh.w	r2, [fp]
9001598e:	2a00      	cmp	r2, #0
90015990:	d1d6      	bne.n	90015940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
90015992:	f8bb 2000 	ldrh.w	r2, [fp]
90015996:	2a00      	cmp	r2, #0
90015998:	d0bb      	beq.n	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001599a:	459a      	cmp	sl, r3
9001599c:	ddb9      	ble.n	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001599e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
900159a2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
900159a6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
900159aa:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
900159ae:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
900159b2:	960e      	str	r6, [sp, #56]	; 0x38
900159b4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
900159b8:	960f      	str	r6, [sp, #60]	; 0x3c
900159ba:	f1bb 0f00 	cmp.w	fp, #0
900159be:	d002      	beq.n	900159c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
900159c0:	f10b 0302 	add.w	r3, fp, #2
900159c4:	9309      	str	r3, [sp, #36]	; 0x24
900159c6:	b10d      	cbz	r5, 900159cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
900159c8:	1c6b      	adds	r3, r5, #1
900159ca:	9308      	str	r3, [sp, #32]
900159cc:	ab0f      	add	r3, sp, #60	; 0x3c
900159ce:	f10d 0232 	add.w	r2, sp, #50	; 0x32
900159d2:	a908      	add	r1, sp, #32
900159d4:	a809      	add	r0, sp, #36	; 0x24
900159d6:	9305      	str	r3, [sp, #20]
900159d8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
900159dc:	9304      	str	r3, [sp, #16]
900159de:	ab0e      	add	r3, sp, #56	; 0x38
900159e0:	9303      	str	r3, [sp, #12]
900159e2:	ab0c      	add	r3, sp, #48	; 0x30
900159e4:	9302      	str	r3, [sp, #8]
900159e6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
900159ea:	9301      	str	r3, [sp, #4]
900159ec:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
900159f0:	9300      	str	r3, [sp, #0]
900159f2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
900159f6:	f7ff fea8 	bl	9001574a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
900159fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900159fc:	2b00      	cmp	r3, #0
900159fe:	bfbf      	itttt	lt
90015a00:	6823      	ldrlt	r3, [r4, #0]
90015a02:	3404      	addlt	r4, #4
90015a04:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90015a08:	930e      	strlt	r3, [sp, #56]	; 0x38
90015a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90015a0c:	2b00      	cmp	r3, #0
90015a0e:	bfbe      	ittt	lt
90015a10:	6823      	ldrlt	r3, [r4, #0]
90015a12:	3404      	addlt	r4, #4
90015a14:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90015a18:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90015a1c:	bfb8      	it	lt
90015a1e:	930f      	strlt	r3, [sp, #60]	; 0x3c
90015a20:	b1d9      	cbz	r1, 90015a5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
90015a22:	880b      	ldrh	r3, [r1, #0]
90015a24:	2b69      	cmp	r3, #105	; 0x69
90015a26:	d01f      	beq.n	90015a68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90015a28:	d82f      	bhi.n	90015a8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
90015a2a:	2b58      	cmp	r3, #88	; 0x58
90015a2c:	d01c      	beq.n	90015a68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90015a2e:	d818      	bhi.n	90015a62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90015a30:	2b25      	cmp	r3, #37	; 0x25
90015a32:	d034      	beq.n	90015a9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
90015a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90015a36:	e9cd 5b08 	strd	r5, fp, [sp, #32]
90015a3a:	f1bb 0f00 	cmp.w	fp, #0
90015a3e:	f000 80b7 	beq.w	90015bb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
90015a42:	f8bb 5000 	ldrh.w	r5, [fp]
90015a46:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
90015a4a:	3301      	adds	r3, #1
90015a4c:	930d      	str	r3, [sp, #52]	; 0x34
90015a4e:	e029      	b.n	90015aa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90015a50:	b10d      	cbz	r5, 90015a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
90015a52:	782a      	ldrb	r2, [r5, #0]
90015a54:	e786      	b.n	90015964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90015a56:	462a      	mov	r2, r5
90015a58:	e784      	b.n	90015964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90015a5a:	2a00      	cmp	r2, #0
90015a5c:	d0ea      	beq.n	90015a34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90015a5e:	7813      	ldrb	r3, [r2, #0]
90015a60:	e7e0      	b.n	90015a24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
90015a62:	3b63      	subs	r3, #99	; 0x63
90015a64:	2b01      	cmp	r3, #1
90015a66:	d8e5      	bhi.n	90015a34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90015a68:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
90015a6c:	b329      	cbz	r1, 90015aba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
90015a6e:	880b      	ldrh	r3, [r1, #0]
90015a70:	2b69      	cmp	r3, #105	; 0x69
90015a72:	d063      	beq.n	90015b3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90015a74:	d825      	bhi.n	90015ac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
90015a76:	2b63      	cmp	r3, #99	; 0x63
90015a78:	d038      	beq.n	90015aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
90015a7a:	2b64      	cmp	r3, #100	; 0x64
90015a7c:	d05e      	beq.n	90015b3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90015a7e:	2b58      	cmp	r3, #88	; 0x58
90015a80:	d07a      	beq.n	90015b78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
90015a82:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90015a86:	4625      	mov	r5, r4
90015a88:	e036      	b.n	90015af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90015a8a:	2b73      	cmp	r3, #115	; 0x73
90015a8c:	d0ec      	beq.n	90015a68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90015a8e:	d802      	bhi.n	90015a96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
90015a90:	2b6f      	cmp	r3, #111	; 0x6f
90015a92:	d1cf      	bne.n	90015a34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90015a94:	e7e8      	b.n	90015a68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90015a96:	2b75      	cmp	r3, #117	; 0x75
90015a98:	d0e6      	beq.n	90015a68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90015a9a:	2b78      	cmp	r3, #120	; 0x78
90015a9c:	e7f9      	b.n	90015a92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
90015a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015aa0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
90015aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90015aa6:	b10b      	cbz	r3, 90015aac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
90015aa8:	3302      	adds	r3, #2
90015aaa:	9309      	str	r3, [sp, #36]	; 0x24
90015aac:	9b08      	ldr	r3, [sp, #32]
90015aae:	2b00      	cmp	r3, #0
90015ab0:	f43f af2f 	beq.w	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90015ab4:	3301      	adds	r3, #1
90015ab6:	9308      	str	r3, [sp, #32]
90015ab8:	e72b      	b.n	90015912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90015aba:	2a00      	cmp	r2, #0
90015abc:	d0e1      	beq.n	90015a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90015abe:	7813      	ldrb	r3, [r2, #0]
90015ac0:	e7d6      	b.n	90015a70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
90015ac2:	2b73      	cmp	r3, #115	; 0x73
90015ac4:	d036      	beq.n	90015b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
90015ac6:	d807      	bhi.n	90015ad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
90015ac8:	2b6f      	cmp	r3, #111	; 0x6f
90015aca:	d1da      	bne.n	90015a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90015acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015ace:	1d25      	adds	r5, r4, #4
90015ad0:	2308      	movs	r3, #8
90015ad2:	eba8 0202 	sub.w	r2, r8, r2
90015ad6:	e049      	b.n	90015b6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90015ad8:	2b75      	cmp	r3, #117	; 0x75
90015ada:	d042      	beq.n	90015b62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
90015adc:	2b78      	cmp	r3, #120	; 0x78
90015ade:	d1d0      	bne.n	90015a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90015ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015ae2:	1d25      	adds	r5, r4, #4
90015ae4:	2310      	movs	r3, #16
90015ae6:	eba8 0202 	sub.w	r2, r8, r2
90015aea:	e03f      	b.n	90015b6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90015aec:	6823      	ldr	r3, [r4, #0]
90015aee:	1d25      	adds	r5, r4, #4
90015af0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
90015af4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
90015af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90015afa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
90015afe:	2b00      	cmp	r3, #0
90015b00:	d051      	beq.n	90015ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
90015b02:	881a      	ldrh	r2, [r3, #0]
90015b04:	a80d      	add	r0, sp, #52	; 0x34
90015b06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
90015b0a:	462c      	mov	r4, r5
90015b0c:	9005      	str	r0, [sp, #20]
90015b0e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
90015b12:	9004      	str	r0, [sp, #16]
90015b14:	980e      	ldr	r0, [sp, #56]	; 0x38
90015b16:	9003      	str	r0, [sp, #12]
90015b18:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
90015b1c:	9002      	str	r0, [sp, #8]
90015b1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
90015b20:	9001      	str	r0, [sp, #4]
90015b22:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
90015b26:	e9cd 8706 	strd	r8, r7, [sp, #24]
90015b2a:	9000      	str	r0, [sp, #0]
90015b2c:	a810      	add	r0, sp, #64	; 0x40
90015b2e:	f7ff fd49 	bl	900155c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90015b32:	e7b7      	b.n	90015aa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90015b34:	1d25      	adds	r5, r4, #4
90015b36:	6823      	ldr	r3, [r4, #0]
90015b38:	9310      	str	r3, [sp, #64]	; 0x40
90015b3a:	e7dd      	b.n	90015af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90015b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015b3e:	230a      	movs	r3, #10
90015b40:	4649      	mov	r1, r9
90015b42:	6820      	ldr	r0, [r4, #0]
90015b44:	eba8 0202 	sub.w	r2, r8, r2
90015b48:	1d25      	adds	r5, r4, #4
90015b4a:	b292      	uxth	r2, r2
90015b4c:	f7ff fd08 	bl	90015560 <_ZN8touchgfx7Unicode4itoaElPtti>
90015b50:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90015b54:	2b2d      	cmp	r3, #45	; 0x2d
90015b56:	d1cf      	bne.n	90015af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90015b58:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90015b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015b5e:	3302      	adds	r3, #2
90015b60:	e7ea      	b.n	90015b38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
90015b62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015b64:	1d25      	adds	r5, r4, #4
90015b66:	230a      	movs	r3, #10
90015b68:	eba8 0202 	sub.w	r2, r8, r2
90015b6c:	b292      	uxth	r2, r2
90015b6e:	4649      	mov	r1, r9
90015b70:	6820      	ldr	r0, [r4, #0]
90015b72:	f7ff fcd7 	bl	90015524 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90015b76:	e7bf      	b.n	90015af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90015b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90015b7a:	2310      	movs	r3, #16
90015b7c:	4649      	mov	r1, r9
90015b7e:	6820      	ldr	r0, [r4, #0]
90015b80:	eba8 0202 	sub.w	r2, r8, r2
90015b84:	1d25      	adds	r5, r4, #4
90015b86:	b292      	uxth	r2, r2
90015b88:	f7ff fccc 	bl	90015524 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90015b8c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
90015b90:	f832 3f02 	ldrh.w	r3, [r2, #2]!
90015b94:	2b00      	cmp	r3, #0
90015b96:	d0af      	beq.n	90015af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90015b98:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
90015b9c:	2919      	cmp	r1, #25
90015b9e:	d8f7      	bhi.n	90015b90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90015ba0:	3b20      	subs	r3, #32
90015ba2:	8013      	strh	r3, [r2, #0]
90015ba4:	e7f4      	b.n	90015b90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90015ba6:	9a08      	ldr	r2, [sp, #32]
90015ba8:	2a00      	cmp	r2, #0
90015baa:	d0ab      	beq.n	90015b04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90015bac:	7812      	ldrb	r2, [r2, #0]
90015bae:	e7a9      	b.n	90015b04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90015bb0:	2d00      	cmp	r5, #0
90015bb2:	f43f af48 	beq.w	90015a46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
90015bb6:	782d      	ldrb	r5, [r5, #0]
90015bb8:	e745      	b.n	90015a46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

90015bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
90015bba:	b507      	push	{r0, r1, r2, lr}
90015bbc:	9300      	str	r3, [sp, #0]
90015bbe:	4613      	mov	r3, r2
90015bc0:	2200      	movs	r2, #0
90015bc2:	f7ff fe92 	bl	900158ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
90015bc6:	b003      	add	sp, #12
90015bc8:	f85d fb04 	ldr.w	pc, [sp], #4

90015bcc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
90015bcc:	b40c      	push	{r2, r3}
90015bce:	b507      	push	{r0, r1, r2, lr}
90015bd0:	ab04      	add	r3, sp, #16
90015bd2:	f853 2b04 	ldr.w	r2, [r3], #4
90015bd6:	9301      	str	r3, [sp, #4]
90015bd8:	f7ff ffef 	bl	90015bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
90015bdc:	b003      	add	sp, #12
90015bde:	f85d eb04 	ldr.w	lr, [sp], #4
90015be2:	b002      	add	sp, #8
90015be4:	4770      	bx	lr
	...

90015be8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
90015be8:	4b01      	ldr	r3, [pc, #4]	; (90015bf0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
90015bea:	6018      	str	r0, [r3, #0]
90015bec:	4770      	bx	lr
90015bee:	bf00      	nop
90015bf0:	2402626c 	.word	0x2402626c

90015bf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
90015bf4:	4b06      	ldr	r3, [pc, #24]	; (90015c10 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
90015bf6:	881a      	ldrh	r2, [r3, #0]
90015bf8:	4282      	cmp	r2, r0
90015bfa:	d807      	bhi.n	90015c0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
90015bfc:	4b05      	ldr	r3, [pc, #20]	; (90015c14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
90015bfe:	881b      	ldrh	r3, [r3, #0]
90015c00:	4413      	add	r3, r2
90015c02:	4298      	cmp	r0, r3
90015c04:	bfac      	ite	ge
90015c06:	2000      	movge	r0, #0
90015c08:	2001      	movlt	r0, #1
90015c0a:	4770      	bx	lr
90015c0c:	2000      	movs	r0, #0
90015c0e:	4770      	bx	lr
90015c10:	2402628c 	.word	0x2402628c
90015c14:	24026290 	.word	0x24026290

90015c18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90015c18:	b508      	push	{r3, lr}
90015c1a:	4601      	mov	r1, r0
90015c1c:	f7ff ffea 	bl	90015bf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90015c20:	b118      	cbz	r0, 90015c2a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90015c22:	4b02      	ldr	r3, [pc, #8]	; (90015c2c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90015c24:	681b      	ldr	r3, [r3, #0]
90015c26:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90015c2a:	bd08      	pop	{r3, pc}
90015c2c:	24026270 	.word	0x24026270

90015c30 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90015c30:	b5f0      	push	{r4, r5, r6, r7, lr}
90015c32:	4c24      	ldr	r4, [pc, #144]	; (90015cc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90015c34:	6823      	ldr	r3, [r4, #0]
90015c36:	2b00      	cmp	r3, #0
90015c38:	d042      	beq.n	90015cc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90015c3a:	4a23      	ldr	r2, [pc, #140]	; (90015cc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
90015c3c:	4d23      	ldr	r5, [pc, #140]	; (90015ccc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
90015c3e:	8811      	ldrh	r1, [r2, #0]
90015c40:	f8b5 c000 	ldrh.w	ip, [r5]
90015c44:	4822      	ldr	r0, [pc, #136]	; (90015cd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90015c46:	4461      	add	r1, ip
90015c48:	1c4a      	adds	r2, r1, #1
90015c4a:	008f      	lsls	r7, r1, #2
90015c4c:	f022 0201 	bic.w	r2, r2, #1
90015c50:	19de      	adds	r6, r3, r7
90015c52:	0412      	lsls	r2, r2, #16
90015c54:	6006      	str	r6, [r0, #0]
90015c56:	4e1f      	ldr	r6, [pc, #124]	; (90015cd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90015c58:	0c12      	lsrs	r2, r2, #16
90015c5a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
90015c5e:	19da      	adds	r2, r3, r7
90015c60:	6032      	str	r2, [r6, #0]
90015c62:	220e      	movs	r2, #14
90015c64:	fb02 f20c 	mul.w	r2, r2, ip
90015c68:	3203      	adds	r2, #3
90015c6a:	f022 0203 	bic.w	r2, r2, #3
90015c6e:	443a      	add	r2, r7
90015c70:	4f19      	ldr	r7, [pc, #100]	; (90015cd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
90015c72:	4413      	add	r3, r2
90015c74:	603b      	str	r3, [r7, #0]
90015c76:	2300      	movs	r3, #0
90015c78:	4f18      	ldr	r7, [pc, #96]	; (90015cdc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
90015c7a:	469c      	mov	ip, r3
90015c7c:	803b      	strh	r3, [r7, #0]
90015c7e:	4f18      	ldr	r7, [pc, #96]	; (90015ce0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90015c80:	683f      	ldr	r7, [r7, #0]
90015c82:	1aba      	subs	r2, r7, r2
90015c84:	4f17      	ldr	r7, [pc, #92]	; (90015ce4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
90015c86:	603a      	str	r2, [r7, #0]
90015c88:	f64f 77ff 	movw	r7, #65535	; 0xffff
90015c8c:	4a16      	ldr	r2, [pc, #88]	; (90015ce8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
90015c8e:	8013      	strh	r3, [r2, #0]
90015c90:	428b      	cmp	r3, r1
90015c92:	d10d      	bne.n	90015cb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
90015c94:	882d      	ldrh	r5, [r5, #0]
90015c96:	2300      	movs	r3, #0
90015c98:	6830      	ldr	r0, [r6, #0]
90015c9a:	240e      	movs	r4, #14
90015c9c:	429d      	cmp	r5, r3
90015c9e:	d90f      	bls.n	90015cc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90015ca0:	fb04 0203 	mla	r2, r4, r3, r0
90015ca4:	3301      	adds	r3, #1
90015ca6:	7b11      	ldrb	r1, [r2, #12]
90015ca8:	f36f 1145 	bfc	r1, #5, #1
90015cac:	7311      	strb	r1, [r2, #12]
90015cae:	e7f5      	b.n	90015c9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90015cb0:	6822      	ldr	r2, [r4, #0]
90015cb2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
90015cb6:	6802      	ldr	r2, [r0, #0]
90015cb8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
90015cbc:	3301      	adds	r3, #1
90015cbe:	e7e7      	b.n	90015c90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
90015cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015cc2:	bf00      	nop
90015cc4:	24026270 	.word	0x24026270
90015cc8:	2402628c 	.word	0x2402628c
90015ccc:	24026290 	.word	0x24026290
90015cd0:	24026284 	.word	0x24026284
90015cd4:	24026274 	.word	0x24026274
90015cd8:	2402627c 	.word	0x2402627c
90015cdc:	2402628e 	.word	0x2402628e
90015ce0:	24026278 	.word	0x24026278
90015ce4:	24026288 	.word	0x24026288
90015ce8:	24026280 	.word	0x24026280

90015cec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
90015cec:	4b06      	ldr	r3, [pc, #24]	; (90015d08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
90015cee:	681b      	ldr	r3, [r3, #0]
90015cf0:	b943      	cbnz	r3, 90015d04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90015cf2:	b139      	cbz	r1, 90015d04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90015cf4:	4b05      	ldr	r3, [pc, #20]	; (90015d0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
90015cf6:	801a      	strh	r2, [r3, #0]
90015cf8:	4b05      	ldr	r3, [pc, #20]	; (90015d10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
90015cfa:	6019      	str	r1, [r3, #0]
90015cfc:	4b05      	ldr	r3, [pc, #20]	; (90015d14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
90015cfe:	6018      	str	r0, [r3, #0]
90015d00:	f7ff bf96 	b.w	90015c30 <_ZN8touchgfx6Bitmap10clearCacheEv>
90015d04:	4770      	bx	lr
90015d06:	bf00      	nop
90015d08:	2402627c 	.word	0x2402627c
90015d0c:	24026290 	.word	0x24026290
90015d10:	24026278 	.word	0x24026278
90015d14:	24026270 	.word	0x24026270

90015d18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
90015d18:	b470      	push	{r4, r5, r6}
90015d1a:	4c07      	ldr	r4, [pc, #28]	; (90015d38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
90015d1c:	4605      	mov	r5, r0
90015d1e:	4610      	mov	r0, r2
90015d20:	9a03      	ldr	r2, [sp, #12]
90015d22:	6826      	ldr	r6, [r4, #0]
90015d24:	b936      	cbnz	r6, 90015d34 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90015d26:	6025      	str	r5, [r4, #0]
90015d28:	4c04      	ldr	r4, [pc, #16]	; (90015d3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
90015d2a:	8021      	strh	r1, [r4, #0]
90015d2c:	4619      	mov	r1, r3
90015d2e:	bc70      	pop	{r4, r5, r6}
90015d30:	f7ff bfdc 	b.w	90015cec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90015d34:	bc70      	pop	{r4, r5, r6}
90015d36:	4770      	bx	lr
90015d38:	24026294 	.word	0x24026294
90015d3c:	2402628c 	.word	0x2402628c

90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90015d40:	4a12      	ldr	r2, [pc, #72]	; (90015d8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90015d42:	8803      	ldrh	r3, [r0, #0]
90015d44:	8812      	ldrh	r2, [r2, #0]
90015d46:	4293      	cmp	r3, r2
90015d48:	d207      	bcs.n	90015d5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
90015d4a:	4a11      	ldr	r2, [pc, #68]	; (90015d90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
90015d4c:	2114      	movs	r1, #20
90015d4e:	6812      	ldr	r2, [r2, #0]
90015d50:	fb01 2303 	mla	r3, r1, r3, r2
90015d54:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90015d58:	4770      	bx	lr
90015d5a:	490e      	ldr	r1, [pc, #56]	; (90015d94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
90015d5c:	8809      	ldrh	r1, [r1, #0]
90015d5e:	4411      	add	r1, r2
90015d60:	428b      	cmp	r3, r1
90015d62:	da04      	bge.n	90015d6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90015d64:	1a9b      	subs	r3, r3, r2
90015d66:	4a0c      	ldr	r2, [pc, #48]	; (90015d98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90015d68:	210e      	movs	r1, #14
90015d6a:	6812      	ldr	r2, [r2, #0]
90015d6c:	e7f0      	b.n	90015d50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
90015d6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015d72:	4293      	cmp	r3, r2
90015d74:	d108      	bne.n	90015d88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
90015d76:	4b09      	ldr	r3, [pc, #36]	; (90015d9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90015d78:	781b      	ldrb	r3, [r3, #0]
90015d7a:	b91b      	cbnz	r3, 90015d84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
90015d7c:	4b08      	ldr	r3, [pc, #32]	; (90015da0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
90015d7e:	f9b3 0000 	ldrsh.w	r0, [r3]
90015d82:	4770      	bx	lr
90015d84:	4b07      	ldr	r3, [pc, #28]	; (90015da4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
90015d86:	e7fa      	b.n	90015d7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90015d88:	2000      	movs	r0, #0
90015d8a:	4770      	bx	lr
90015d8c:	2402628c 	.word	0x2402628c
90015d90:	24026294 	.word	0x24026294
90015d94:	24026290 	.word	0x24026290
90015d98:	24026274 	.word	0x24026274
90015d9c:	24026204 	.word	0x24026204
90015da0:	24026206 	.word	0x24026206
90015da4:	24026208 	.word	0x24026208

90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90015da8:	4a12      	ldr	r2, [pc, #72]	; (90015df4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
90015daa:	8803      	ldrh	r3, [r0, #0]
90015dac:	8812      	ldrh	r2, [r2, #0]
90015dae:	4293      	cmp	r3, r2
90015db0:	d207      	bcs.n	90015dc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90015db2:	4a11      	ldr	r2, [pc, #68]	; (90015df8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90015db4:	2114      	movs	r1, #20
90015db6:	6812      	ldr	r2, [r2, #0]
90015db8:	fb01 2303 	mla	r3, r1, r3, r2
90015dbc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90015dc0:	4770      	bx	lr
90015dc2:	490e      	ldr	r1, [pc, #56]	; (90015dfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
90015dc4:	8809      	ldrh	r1, [r1, #0]
90015dc6:	4411      	add	r1, r2
90015dc8:	428b      	cmp	r3, r1
90015dca:	da04      	bge.n	90015dd6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
90015dcc:	1a9b      	subs	r3, r3, r2
90015dce:	4a0c      	ldr	r2, [pc, #48]	; (90015e00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90015dd0:	210e      	movs	r1, #14
90015dd2:	6812      	ldr	r2, [r2, #0]
90015dd4:	e7f0      	b.n	90015db8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
90015dd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015dda:	4293      	cmp	r3, r2
90015ddc:	d108      	bne.n	90015df0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
90015dde:	4b09      	ldr	r3, [pc, #36]	; (90015e04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90015de0:	781b      	ldrb	r3, [r3, #0]
90015de2:	b91b      	cbnz	r3, 90015dec <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
90015de4:	4b08      	ldr	r3, [pc, #32]	; (90015e08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
90015de6:	f9b3 0000 	ldrsh.w	r0, [r3]
90015dea:	4770      	bx	lr
90015dec:	4b07      	ldr	r3, [pc, #28]	; (90015e0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
90015dee:	e7fa      	b.n	90015de6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
90015df0:	2000      	movs	r0, #0
90015df2:	4770      	bx	lr
90015df4:	2402628c 	.word	0x2402628c
90015df8:	24026294 	.word	0x24026294
90015dfc:	24026290 	.word	0x24026290
90015e00:	24026274 	.word	0x24026274
90015e04:	24026204 	.word	0x24026204
90015e08:	24026208 	.word	0x24026208
90015e0c:	24026206 	.word	0x24026206

90015e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
90015e10:	4a1f      	ldr	r2, [pc, #124]	; (90015e90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
90015e12:	b510      	push	{r4, lr}
90015e14:	880b      	ldrh	r3, [r1, #0]
90015e16:	8812      	ldrh	r2, [r2, #0]
90015e18:	4293      	cmp	r3, r2
90015e1a:	d213      	bcs.n	90015e44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
90015e1c:	4a1d      	ldr	r2, [pc, #116]	; (90015e94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
90015e1e:	2114      	movs	r1, #20
90015e20:	6812      	ldr	r2, [r2, #0]
90015e22:	fb01 2303 	mla	r3, r1, r3, r2
90015e26:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
90015e2a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
90015e2e:	8a1a      	ldrh	r2, [r3, #16]
90015e30:	8a5b      	ldrh	r3, [r3, #18]
90015e32:	f3c2 020c 	ubfx	r2, r2, #0, #13
90015e36:	8004      	strh	r4, [r0, #0]
90015e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
90015e3c:	8041      	strh	r1, [r0, #2]
90015e3e:	8082      	strh	r2, [r0, #4]
90015e40:	80c3      	strh	r3, [r0, #6]
90015e42:	e00e      	b.n	90015e62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015e44:	4914      	ldr	r1, [pc, #80]	; (90015e98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90015e46:	8809      	ldrh	r1, [r1, #0]
90015e48:	4411      	add	r1, r2
90015e4a:	428b      	cmp	r3, r1
90015e4c:	da0a      	bge.n	90015e64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
90015e4e:	1a9b      	subs	r3, r3, r2
90015e50:	4a12      	ldr	r2, [pc, #72]	; (90015e9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90015e52:	210e      	movs	r1, #14
90015e54:	6812      	ldr	r2, [r2, #0]
90015e56:	fb01 2303 	mla	r3, r1, r3, r2
90015e5a:	681a      	ldr	r2, [r3, #0]
90015e5c:	6002      	str	r2, [r0, #0]
90015e5e:	685a      	ldr	r2, [r3, #4]
90015e60:	6042      	str	r2, [r0, #4]
90015e62:	bd10      	pop	{r4, pc}
90015e64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015e68:	4293      	cmp	r3, r2
90015e6a:	d10b      	bne.n	90015e84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
90015e6c:	4b0c      	ldr	r3, [pc, #48]	; (90015ea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
90015e6e:	f9b3 1000 	ldrsh.w	r1, [r3]
90015e72:	4b0c      	ldr	r3, [pc, #48]	; (90015ea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90015e74:	8081      	strh	r1, [r0, #4]
90015e76:	f9b3 2000 	ldrsh.w	r2, [r3]
90015e7a:	2300      	movs	r3, #0
90015e7c:	80c2      	strh	r2, [r0, #6]
90015e7e:	8003      	strh	r3, [r0, #0]
90015e80:	8043      	strh	r3, [r0, #2]
90015e82:	e7ee      	b.n	90015e62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015e84:	2300      	movs	r3, #0
90015e86:	8003      	strh	r3, [r0, #0]
90015e88:	8043      	strh	r3, [r0, #2]
90015e8a:	8083      	strh	r3, [r0, #4]
90015e8c:	e7d8      	b.n	90015e40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
90015e8e:	bf00      	nop
90015e90:	2402628c 	.word	0x2402628c
90015e94:	24026294 	.word	0x24026294
90015e98:	24026290 	.word	0x24026290
90015e9c:	24026274 	.word	0x24026274
90015ea0:	24026200 	.word	0x24026200
90015ea4:	24026202 	.word	0x24026202

90015ea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90015ea8:	4a17      	ldr	r2, [pc, #92]	; (90015f08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
90015eaa:	8803      	ldrh	r3, [r0, #0]
90015eac:	8812      	ldrh	r2, [r2, #0]
90015eae:	4293      	cmp	r3, r2
90015eb0:	d213      	bcs.n	90015eda <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90015eb2:	4a16      	ldr	r2, [pc, #88]	; (90015f0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90015eb4:	2114      	movs	r1, #20
90015eb6:	6812      	ldr	r2, [r2, #0]
90015eb8:	fb01 2303 	mla	r3, r1, r3, r2
90015ebc:	8a1a      	ldrh	r2, [r3, #16]
90015ebe:	8919      	ldrh	r1, [r3, #8]
90015ec0:	f3c2 020c 	ubfx	r2, r2, #0, #13
90015ec4:	428a      	cmp	r2, r1
90015ec6:	db1d      	blt.n	90015f04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90015ec8:	8a58      	ldrh	r0, [r3, #18]
90015eca:	f3c0 000c 	ubfx	r0, r0, #0, #13
90015ece:	895b      	ldrh	r3, [r3, #10]
90015ed0:	4298      	cmp	r0, r3
90015ed2:	bfac      	ite	ge
90015ed4:	2000      	movge	r0, #0
90015ed6:	2001      	movlt	r0, #1
90015ed8:	4770      	bx	lr
90015eda:	490d      	ldr	r1, [pc, #52]	; (90015f10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
90015edc:	8809      	ldrh	r1, [r1, #0]
90015ede:	4411      	add	r1, r2
90015ee0:	428b      	cmp	r3, r1
90015ee2:	da0d      	bge.n	90015f00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
90015ee4:	1a9b      	subs	r3, r3, r2
90015ee6:	4a0b      	ldr	r2, [pc, #44]	; (90015f14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
90015ee8:	210e      	movs	r1, #14
90015eea:	6812      	ldr	r2, [r2, #0]
90015eec:	fb01 2303 	mla	r3, r1, r3, r2
90015ef0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
90015ef4:	891a      	ldrh	r2, [r3, #8]
90015ef6:	4291      	cmp	r1, r2
90015ef8:	db04      	blt.n	90015f04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90015efa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
90015efe:	e7e6      	b.n	90015ece <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
90015f00:	2000      	movs	r0, #0
90015f02:	4770      	bx	lr
90015f04:	2001      	movs	r0, #1
90015f06:	4770      	bx	lr
90015f08:	2402628c 	.word	0x2402628c
90015f0c:	24026294 	.word	0x24026294
90015f10:	24026290 	.word	0x24026290
90015f14:	24026274 	.word	0x24026274

90015f18 <_ZNK8touchgfx6Bitmap7getDataEv>:
90015f18:	4a12      	ldr	r2, [pc, #72]	; (90015f64 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
90015f1a:	8803      	ldrh	r3, [r0, #0]
90015f1c:	8811      	ldrh	r1, [r2, #0]
90015f1e:	428b      	cmp	r3, r1
90015f20:	d20b      	bcs.n	90015f3a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
90015f22:	4a11      	ldr	r2, [pc, #68]	; (90015f68 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90015f24:	6812      	ldr	r2, [r2, #0]
90015f26:	b112      	cbz	r2, 90015f2e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
90015f28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90015f2c:	b9c0      	cbnz	r0, 90015f60 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
90015f2e:	4a0f      	ldr	r2, [pc, #60]	; (90015f6c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
90015f30:	6811      	ldr	r1, [r2, #0]
90015f32:	2214      	movs	r2, #20
90015f34:	4353      	muls	r3, r2
90015f36:	58c8      	ldr	r0, [r1, r3]
90015f38:	4770      	bx	lr
90015f3a:	4a0d      	ldr	r2, [pc, #52]	; (90015f70 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
90015f3c:	8812      	ldrh	r2, [r2, #0]
90015f3e:	440a      	add	r2, r1
90015f40:	4293      	cmp	r3, r2
90015f42:	da04      	bge.n	90015f4e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
90015f44:	4a08      	ldr	r2, [pc, #32]	; (90015f68 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90015f46:	6812      	ldr	r2, [r2, #0]
90015f48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90015f4c:	4770      	bx	lr
90015f4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015f52:	4293      	cmp	r3, r2
90015f54:	d103      	bne.n	90015f5e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
90015f56:	4b07      	ldr	r3, [pc, #28]	; (90015f74 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90015f58:	681b      	ldr	r3, [r3, #0]
90015f5a:	6c58      	ldr	r0, [r3, #68]	; 0x44
90015f5c:	4770      	bx	lr
90015f5e:	2000      	movs	r0, #0
90015f60:	4770      	bx	lr
90015f62:	bf00      	nop
90015f64:	2402628c 	.word	0x2402628c
90015f68:	24026270 	.word	0x24026270
90015f6c:	24026294 	.word	0x24026294
90015f70:	24026290 	.word	0x24026290
90015f74:	2402620c 	.word	0x2402620c

90015f78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90015f78:	4b24      	ldr	r3, [pc, #144]	; (9001600c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
90015f7a:	8802      	ldrh	r2, [r0, #0]
90015f7c:	8818      	ldrh	r0, [r3, #0]
90015f7e:	4282      	cmp	r2, r0
90015f80:	d221      	bcs.n	90015fc6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
90015f82:	4b23      	ldr	r3, [pc, #140]	; (90016010 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
90015f84:	6819      	ldr	r1, [r3, #0]
90015f86:	2314      	movs	r3, #20
90015f88:	fb03 1302 	mla	r3, r3, r2, r1
90015f8c:	6858      	ldr	r0, [r3, #4]
90015f8e:	2800      	cmp	r0, #0
90015f90:	d03a      	beq.n	90016008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90015f92:	4920      	ldr	r1, [pc, #128]	; (90016014 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90015f94:	6809      	ldr	r1, [r1, #0]
90015f96:	2900      	cmp	r1, #0
90015f98:	d036      	beq.n	90016008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90015f9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
90015f9e:	2900      	cmp	r1, #0
90015fa0:	d032      	beq.n	90016008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90015fa2:	891a      	ldrh	r2, [r3, #8]
90015fa4:	8958      	ldrh	r0, [r3, #10]
90015fa6:	4350      	muls	r0, r2
90015fa8:	7c5a      	ldrb	r2, [r3, #17]
90015faa:	7cdb      	ldrb	r3, [r3, #19]
90015fac:	0952      	lsrs	r2, r2, #5
90015fae:	f3c3 1342 	ubfx	r3, r3, #5, #3
90015fb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90015fb6:	2b0b      	cmp	r3, #11
90015fb8:	bf18      	it	ne
90015fba:	0040      	lslne	r0, r0, #1
90015fbc:	3003      	adds	r0, #3
90015fbe:	f020 0003 	bic.w	r0, r0, #3
90015fc2:	4408      	add	r0, r1
90015fc4:	4770      	bx	lr
90015fc6:	4b14      	ldr	r3, [pc, #80]	; (90016018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
90015fc8:	881b      	ldrh	r3, [r3, #0]
90015fca:	4403      	add	r3, r0
90015fcc:	429a      	cmp	r2, r3
90015fce:	da1a      	bge.n	90016006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90015fd0:	4b12      	ldr	r3, [pc, #72]	; (9001601c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
90015fd2:	1a10      	subs	r0, r2, r0
90015fd4:	210e      	movs	r1, #14
90015fd6:	681b      	ldr	r3, [r3, #0]
90015fd8:	fb01 3000 	mla	r0, r1, r0, r3
90015fdc:	7b03      	ldrb	r3, [r0, #12]
90015fde:	f003 031f 	and.w	r3, r3, #31
90015fe2:	2b0b      	cmp	r3, #11
90015fe4:	d10b      	bne.n	90015ffe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
90015fe6:	8903      	ldrh	r3, [r0, #8]
90015fe8:	8940      	ldrh	r0, [r0, #10]
90015fea:	4358      	muls	r0, r3
90015fec:	4b09      	ldr	r3, [pc, #36]	; (90016014 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90015fee:	3003      	adds	r0, #3
90015ff0:	6819      	ldr	r1, [r3, #0]
90015ff2:	f020 0303 	bic.w	r3, r0, #3
90015ff6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
90015ffa:	4418      	add	r0, r3
90015ffc:	4770      	bx	lr
90015ffe:	2b0d      	cmp	r3, #13
90016000:	d101      	bne.n	90016006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90016002:	300d      	adds	r0, #13
90016004:	4770      	bx	lr
90016006:	2000      	movs	r0, #0
90016008:	4770      	bx	lr
9001600a:	bf00      	nop
9001600c:	2402628c 	.word	0x2402628c
90016010:	24026294 	.word	0x24026294
90016014:	24026270 	.word	0x24026270
90016018:	24026290 	.word	0x24026290
9001601c:	24026274 	.word	0x24026274

90016020 <_ZNK8touchgfx6Bitmap9getFormatEv>:
90016020:	4a17      	ldr	r2, [pc, #92]	; (90016080 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
90016022:	b510      	push	{r4, lr}
90016024:	8803      	ldrh	r3, [r0, #0]
90016026:	8812      	ldrh	r2, [r2, #0]
90016028:	4293      	cmp	r3, r2
9001602a:	d20c      	bcs.n	90016046 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001602c:	4a15      	ldr	r2, [pc, #84]	; (90016084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001602e:	2114      	movs	r1, #20
90016030:	6812      	ldr	r2, [r2, #0]
90016032:	fb01 2303 	mla	r3, r1, r3, r2
90016036:	7c58      	ldrb	r0, [r3, #17]
90016038:	0942      	lsrs	r2, r0, #5
9001603a:	7cd8      	ldrb	r0, [r3, #19]
9001603c:	f3c0 1042 	ubfx	r0, r0, #5, #3
90016040:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
90016044:	bd10      	pop	{r4, pc}
90016046:	4910      	ldr	r1, [pc, #64]	; (90016088 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90016048:	8809      	ldrh	r1, [r1, #0]
9001604a:	4411      	add	r1, r2
9001604c:	428b      	cmp	r3, r1
9001604e:	da09      	bge.n	90016064 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90016050:	1a9b      	subs	r3, r3, r2
90016052:	4a0e      	ldr	r2, [pc, #56]	; (9001608c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90016054:	210e      	movs	r1, #14
90016056:	6812      	ldr	r2, [r2, #0]
90016058:	fb01 2303 	mla	r3, r1, r3, r2
9001605c:	7b18      	ldrb	r0, [r3, #12]
9001605e:	f000 001f 	and.w	r0, r0, #31
90016062:	e7ef      	b.n	90016044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90016064:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90016068:	4293      	cmp	r3, r2
9001606a:	d106      	bne.n	9001607a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001606c:	f7fa fa20 	bl	900104b0 <_ZN8touchgfx3HAL3lcdEv>
90016070:	6803      	ldr	r3, [r0, #0]
90016072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016078:	4718      	bx	r3
9001607a:	2000      	movs	r0, #0
9001607c:	e7e2      	b.n	90016044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001607e:	bf00      	nop
90016080:	2402628c 	.word	0x2402628c
90016084:	24026294 	.word	0x24026294
90016088:	24026290 	.word	0x24026290
9001608c:	24026274 	.word	0x24026274

90016090 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90016090:	2010      	movs	r0, #16
90016092:	4770      	bx	lr

90016094 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
90016094:	4b02      	ldr	r3, [pc, #8]	; (900160a0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
90016096:	8818      	ldrh	r0, [r3, #0]
90016098:	0040      	lsls	r0, r0, #1
9001609a:	b280      	uxth	r0, r0
9001609c:	4770      	bx	lr
9001609e:	bf00      	nop
900160a0:	24026206 	.word	0x24026206

900160a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
900160a4:	2bff      	cmp	r3, #255	; 0xff
900160a6:	d050      	beq.n	9001614a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
900160a8:	2a0b      	cmp	r2, #11
900160aa:	d04a      	beq.n	90016142 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900160ac:	d80e      	bhi.n	900160cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
900160ae:	2a03      	cmp	r2, #3
900160b0:	d03f      	beq.n	90016132 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
900160b2:	d804      	bhi.n	900160be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
900160b4:	2a01      	cmp	r2, #1
900160b6:	d03e      	beq.n	90016136 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
900160b8:	d93f      	bls.n	9001613a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
900160ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
900160bc:	4770      	bx	lr
900160be:	2a09      	cmp	r2, #9
900160c0:	d03f      	beq.n	90016142 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900160c2:	d83c      	bhi.n	9001613e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900160c4:	2a08      	cmp	r2, #8
900160c6:	d03a      	beq.n	9001613e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900160c8:	2000      	movs	r0, #0
900160ca:	4770      	bx	lr
900160cc:	2a2f      	cmp	r2, #47	; 0x2f
900160ce:	d024      	beq.n	9001611a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
900160d0:	d80d      	bhi.n	900160ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
900160d2:	2a2d      	cmp	r2, #45	; 0x2d
900160d4:	d014      	beq.n	90016100 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
900160d6:	d826      	bhi.n	90016126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
900160d8:	2a2c      	cmp	r2, #44	; 0x2c
900160da:	d1f5      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900160dc:	684b      	ldr	r3, [r1, #4]
900160de:	781b      	ldrb	r3, [r3, #0]
900160e0:	2b01      	cmp	r3, #1
900160e2:	d018      	beq.n	90016116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
900160e4:	d323      	bcc.n	9001612e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
900160e6:	2b02      	cmp	r3, #2
900160e8:	d1ee      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900160ea:	6880      	ldr	r0, [r0, #8]
900160ec:	4770      	bx	lr
900160ee:	2a31      	cmp	r2, #49	; 0x31
900160f0:	d004      	beq.n	900160fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900160f2:	d328      	bcc.n	90016146 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900160f4:	2a32      	cmp	r2, #50	; 0x32
900160f6:	d026      	beq.n	90016146 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900160f8:	2a33      	cmp	r2, #51	; 0x33
900160fa:	d1e5      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900160fc:	6f00      	ldr	r0, [r0, #112]	; 0x70
900160fe:	4770      	bx	lr
90016100:	684b      	ldr	r3, [r1, #4]
90016102:	781b      	ldrb	r3, [r3, #0]
90016104:	2b01      	cmp	r3, #1
90016106:	d004      	beq.n	90016112 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
90016108:	d30b      	bcc.n	90016122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001610a:	2b02      	cmp	r3, #2
9001610c:	d1dc      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001610e:	6900      	ldr	r0, [r0, #16]
90016110:	4770      	bx	lr
90016112:	6a00      	ldr	r0, [r0, #32]
90016114:	4770      	bx	lr
90016116:	6980      	ldr	r0, [r0, #24]
90016118:	4770      	bx	lr
9001611a:	684b      	ldr	r3, [r1, #4]
9001611c:	781b      	ldrb	r3, [r3, #0]
9001611e:	2b00      	cmp	r3, #0
90016120:	d1d2      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016122:	6b00      	ldr	r0, [r0, #48]	; 0x30
90016124:	4770      	bx	lr
90016126:	684b      	ldr	r3, [r1, #4]
90016128:	781b      	ldrb	r3, [r3, #0]
9001612a:	2b00      	cmp	r3, #0
9001612c:	d1cc      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001612e:	6a80      	ldr	r0, [r0, #40]	; 0x28
90016130:	4770      	bx	lr
90016132:	6c80      	ldr	r0, [r0, #72]	; 0x48
90016134:	4770      	bx	lr
90016136:	6d00      	ldr	r0, [r0, #80]	; 0x50
90016138:	4770      	bx	lr
9001613a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001613c:	4770      	bx	lr
9001613e:	6d80      	ldr	r0, [r0, #88]	; 0x58
90016140:	4770      	bx	lr
90016142:	6e00      	ldr	r0, [r0, #96]	; 0x60
90016144:	4770      	bx	lr
90016146:	6e80      	ldr	r0, [r0, #104]	; 0x68
90016148:	4770      	bx	lr
9001614a:	2a0b      	cmp	r2, #11
9001614c:	d049      	beq.n	900161e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001614e:	d80e      	bhi.n	9001616e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90016150:	2a03      	cmp	r2, #3
90016152:	d040      	beq.n	900161d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90016154:	d804      	bhi.n	90016160 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
90016156:	2a01      	cmp	r2, #1
90016158:	d03f      	beq.n	900161da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001615a:	d940      	bls.n	900161de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001615c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001615e:	4770      	bx	lr
90016160:	2a09      	cmp	r2, #9
90016162:	d03e      	beq.n	900161e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90016164:	d801      	bhi.n	9001616a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
90016166:	2a08      	cmp	r2, #8
90016168:	d1ae      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001616a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001616c:	4770      	bx	lr
9001616e:	2a2f      	cmp	r2, #47	; 0x2f
90016170:	d024      	beq.n	900161bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
90016172:	d80d      	bhi.n	90016190 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
90016174:	2a2d      	cmp	r2, #45	; 0x2d
90016176:	d014      	beq.n	900161a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90016178:	d826      	bhi.n	900161c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001617a:	2a2c      	cmp	r2, #44	; 0x2c
9001617c:	d1a4      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001617e:	684b      	ldr	r3, [r1, #4]
90016180:	781b      	ldrb	r3, [r3, #0]
90016182:	2b01      	cmp	r3, #1
90016184:	d018      	beq.n	900161b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
90016186:	d324      	bcc.n	900161d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90016188:	2b02      	cmp	r3, #2
9001618a:	d19d      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001618c:	68c0      	ldr	r0, [r0, #12]
9001618e:	4770      	bx	lr
90016190:	2a31      	cmp	r2, #49	; 0x31
90016192:	d004      	beq.n	9001619e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
90016194:	d327      	bcc.n	900161e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90016196:	2a32      	cmp	r2, #50	; 0x32
90016198:	d025      	beq.n	900161e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001619a:	2a33      	cmp	r2, #51	; 0x33
9001619c:	d194      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001619e:	6f40      	ldr	r0, [r0, #116]	; 0x74
900161a0:	4770      	bx	lr
900161a2:	684b      	ldr	r3, [r1, #4]
900161a4:	781b      	ldrb	r3, [r3, #0]
900161a6:	2b01      	cmp	r3, #1
900161a8:	d004      	beq.n	900161b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
900161aa:	d30b      	bcc.n	900161c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
900161ac:	2b02      	cmp	r3, #2
900161ae:	d18b      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161b0:	6940      	ldr	r0, [r0, #20]
900161b2:	4770      	bx	lr
900161b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
900161b6:	4770      	bx	lr
900161b8:	69c0      	ldr	r0, [r0, #28]
900161ba:	4770      	bx	lr
900161bc:	684b      	ldr	r3, [r1, #4]
900161be:	781b      	ldrb	r3, [r3, #0]
900161c0:	2b00      	cmp	r3, #0
900161c2:	d181      	bne.n	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
900161c6:	4770      	bx	lr
900161c8:	684b      	ldr	r3, [r1, #4]
900161ca:	781b      	ldrb	r3, [r3, #0]
900161cc:	2b00      	cmp	r3, #0
900161ce:	f47f af7b 	bne.w	900160c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
900161d4:	4770      	bx	lr
900161d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
900161d8:	4770      	bx	lr
900161da:	6d40      	ldr	r0, [r0, #84]	; 0x54
900161dc:	4770      	bx	lr
900161de:	6c40      	ldr	r0, [r0, #68]	; 0x44
900161e0:	4770      	bx	lr
900161e2:	6e40      	ldr	r0, [r0, #100]	; 0x64
900161e4:	4770      	bx	lr
900161e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
900161e8:	4770      	bx	lr

900161ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900161ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900161ee:	b087      	sub	sp, #28
900161f0:	9815      	ldr	r0, [sp, #84]	; 0x54
900161f2:	9205      	str	r2, [sp, #20]
900161f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900161f8:	9101      	str	r1, [sp, #4]
900161fa:	9202      	str	r2, [sp, #8]
900161fc:	6841      	ldr	r1, [r0, #4]
900161fe:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90016202:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90016206:	fb01 2404 	mla	r4, r1, r4, r2
9001620a:	6802      	ldr	r2, [r0, #0]
9001620c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016210:	f8de 2000 	ldr.w	r2, [lr]
90016214:	9203      	str	r2, [sp, #12]
90016216:	f8de 2004 	ldr.w	r2, [lr, #4]
9001621a:	3204      	adds	r2, #4
9001621c:	9204      	str	r2, [sp, #16]
9001621e:	9a02      	ldr	r2, [sp, #8]
90016220:	43d6      	mvns	r6, r2
90016222:	b2f6      	uxtb	r6, r6
90016224:	9a01      	ldr	r2, [sp, #4]
90016226:	2a00      	cmp	r2, #0
90016228:	dc03      	bgt.n	90016232 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001622a:	9a05      	ldr	r2, [sp, #20]
9001622c:	2a00      	cmp	r2, #0
9001622e:	f340 8129 	ble.w	90016484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90016232:	9a11      	ldr	r2, [sp, #68]	; 0x44
90016234:	f9be c008 	ldrsh.w	ip, [lr, #8]
90016238:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001623c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001623e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90016242:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016246:	2b00      	cmp	r3, #0
90016248:	dd0e      	ble.n	90016268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001624a:	1408      	asrs	r0, r1, #16
9001624c:	d405      	bmi.n	9001625a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001624e:	4560      	cmp	r0, ip
90016250:	da03      	bge.n	9001625a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90016252:	1410      	asrs	r0, r2, #16
90016254:	d401      	bmi.n	9001625a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90016256:	42b8      	cmp	r0, r7
90016258:	db07      	blt.n	9001626a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001625a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001625c:	3b01      	subs	r3, #1
9001625e:	3402      	adds	r4, #2
90016260:	4401      	add	r1, r0
90016262:	9814      	ldr	r0, [sp, #80]	; 0x50
90016264:	4402      	add	r2, r0
90016266:	e7ee      	b.n	90016246 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90016268:	d071      	beq.n	9001634e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001626a:	1e58      	subs	r0, r3, #1
9001626c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001626e:	fb05 1500 	mla	r5, r5, r0, r1
90016272:	142d      	asrs	r5, r5, #16
90016274:	d45f      	bmi.n	90016336 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90016276:	4565      	cmp	r5, ip
90016278:	da5d      	bge.n	90016336 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001627a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001627c:	fb05 2000 	mla	r0, r5, r0, r2
90016280:	1400      	asrs	r0, r0, #16
90016282:	d458      	bmi.n	90016336 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90016284:	42b8      	cmp	r0, r7
90016286:	da56      	bge.n	90016336 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90016288:	4699      	mov	r9, r3
9001628a:	46a2      	mov	sl, r4
9001628c:	f8bd b008 	ldrh.w	fp, [sp, #8]
90016290:	f1b9 0f00 	cmp.w	r9, #0
90016294:	dd57      	ble.n	90016346 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
90016296:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001629a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001629e:	9803      	ldr	r0, [sp, #12]
900162a0:	140d      	asrs	r5, r1, #16
900162a2:	f109 39ff 	add.w	r9, r9, #4294967295
900162a6:	fb07 000c 	mla	r0, r7, ip, r0
900162aa:	5d40      	ldrb	r0, [r0, r5]
900162ac:	9d04      	ldr	r5, [sp, #16]
900162ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900162b2:	f8ba 5000 	ldrh.w	r5, [sl]
900162b6:	ea4f 2c20 	mov.w	ip, r0, asr #8
900162ba:	122f      	asrs	r7, r5, #8
900162bc:	ea4f 08e5 	mov.w	r8, r5, asr #3
900162c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900162c4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900162c8:	00ed      	lsls	r5, r5, #3
900162ca:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900162ce:	fb17 f706 	smulbb	r7, r7, r6
900162d2:	b2ed      	uxtb	r5, r5
900162d4:	fb18 f806 	smulbb	r8, r8, r6
900162d8:	fb0c 7c0b 	mla	ip, ip, fp, r7
900162dc:	10c7      	asrs	r7, r0, #3
900162de:	fb15 f506 	smulbb	r5, r5, r6
900162e2:	00c0      	lsls	r0, r0, #3
900162e4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900162e8:	fa1f fc8c 	uxth.w	ip, ip
900162ec:	b2c0      	uxtb	r0, r0
900162ee:	fb07 870b 	mla	r7, r7, fp, r8
900162f2:	fb00 500b 	mla	r0, r0, fp, r5
900162f6:	f10c 0501 	add.w	r5, ip, #1
900162fa:	b2bf      	uxth	r7, r7
900162fc:	b280      	uxth	r0, r0
900162fe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90016302:	f107 0801 	add.w	r8, r7, #1
90016306:	1c45      	adds	r5, r0, #1
90016308:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001630c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016310:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90016314:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016316:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001631a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001631e:	4401      	add	r1, r0
90016320:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90016324:	9814      	ldr	r0, [sp, #80]	; 0x50
90016326:	ea45 0c0c 	orr.w	ip, r5, ip
9001632a:	4402      	add	r2, r0
9001632c:	ea4c 0c08 	orr.w	ip, ip, r8
90016330:	f82a cb02 	strh.w	ip, [sl], #2
90016334:	e7ac      	b.n	90016290 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90016336:	f04f 0800 	mov.w	r8, #0
9001633a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001633e:	eb03 0008 	add.w	r0, r3, r8
90016342:	2800      	cmp	r0, #0
90016344:	dc41      	bgt.n	900163ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90016346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001634a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001634e:	9b01      	ldr	r3, [sp, #4]
90016350:	2b00      	cmp	r3, #0
90016352:	f340 8097 	ble.w	90016484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90016356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001635a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001635c:	ee30 0a04 	vadd.f32	s0, s0, s8
90016360:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016364:	eef0 6a62 	vmov.f32	s13, s5
90016368:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001636c:	ee31 1a05 	vadd.f32	s2, s2, s10
90016370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016374:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90016378:	eef0 6a43 	vmov.f32	s13, s6
9001637c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016380:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90016384:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016388:	ee61 7a27 	vmul.f32	s15, s2, s15
9001638c:	ee77 2a62 	vsub.f32	s5, s14, s5
90016390:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016394:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016398:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001639c:	ee12 2a90 	vmov	r2, s5
900163a0:	eef0 2a47 	vmov.f32	s5, s14
900163a4:	fb92 f3f3 	sdiv	r3, r2, r3
900163a8:	ee13 2a10 	vmov	r2, s6
900163ac:	9313      	str	r3, [sp, #76]	; 0x4c
900163ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
900163b0:	eeb0 3a67 	vmov.f32	s6, s15
900163b4:	fb92 f3f3 	sdiv	r3, r2, r3
900163b8:	9314      	str	r3, [sp, #80]	; 0x50
900163ba:	9b01      	ldr	r3, [sp, #4]
900163bc:	9a05      	ldr	r2, [sp, #20]
900163be:	3b01      	subs	r3, #1
900163c0:	9301      	str	r3, [sp, #4]
900163c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900163c4:	bf08      	it	eq
900163c6:	4613      	moveq	r3, r2
900163c8:	e72c      	b.n	90016224 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900163ca:	140f      	asrs	r7, r1, #16
900163cc:	d453      	bmi.n	90016476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900163ce:	f8de 5008 	ldr.w	r5, [lr, #8]
900163d2:	42bd      	cmp	r5, r7
900163d4:	dd4f      	ble.n	90016476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900163d6:	ea5f 4c22 	movs.w	ip, r2, asr #16
900163da:	d44c      	bmi.n	90016476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900163dc:	f8de 000c 	ldr.w	r0, [lr, #12]
900163e0:	4560      	cmp	r0, ip
900163e2:	dd48      	ble.n	90016476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900163e4:	9803      	ldr	r0, [sp, #12]
900163e6:	b22d      	sxth	r5, r5
900163e8:	fb0c 0505 	mla	r5, ip, r5, r0
900163ec:	5de8      	ldrb	r0, [r5, r7]
900163ee:	9d04      	ldr	r5, [sp, #16]
900163f0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900163f4:	f06f 0501 	mvn.w	r5, #1
900163f8:	fb05 fb08 	mul.w	fp, r5, r8
900163fc:	ea4f 2c20 	mov.w	ip, r0, asr #8
90016400:	f834 500b 	ldrh.w	r5, [r4, fp]
90016404:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016408:	122f      	asrs	r7, r5, #8
9001640a:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001640e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016412:	00ed      	lsls	r5, r5, #3
90016414:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90016418:	fb17 f706 	smulbb	r7, r7, r6
9001641c:	b2ed      	uxtb	r5, r5
9001641e:	fb19 f906 	smulbb	r9, r9, r6
90016422:	fb0c 7c0a 	mla	ip, ip, sl, r7
90016426:	10c7      	asrs	r7, r0, #3
90016428:	fb15 f506 	smulbb	r5, r5, r6
9001642c:	00c0      	lsls	r0, r0, #3
9001642e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90016432:	fa1f fc8c 	uxth.w	ip, ip
90016436:	b2c0      	uxtb	r0, r0
90016438:	fb07 970a 	mla	r7, r7, sl, r9
9001643c:	fb00 500a 	mla	r0, r0, sl, r5
90016440:	f10c 0501 	add.w	r5, ip, #1
90016444:	b2bf      	uxth	r7, r7
90016446:	b280      	uxth	r0, r0
90016448:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001644c:	f107 0901 	add.w	r9, r7, #1
90016450:	1c45      	adds	r5, r0, #1
90016452:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90016456:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001645a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001645e:	ea4f 1959 	mov.w	r9, r9, lsr #5
90016462:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90016466:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001646a:	ea45 0c0c 	orr.w	ip, r5, ip
9001646e:	ea4c 0c09 	orr.w	ip, ip, r9
90016472:	f824 c00b 	strh.w	ip, [r4, fp]
90016476:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016478:	f108 38ff 	add.w	r8, r8, #4294967295
9001647c:	4401      	add	r1, r0
9001647e:	9814      	ldr	r0, [sp, #80]	; 0x50
90016480:	4402      	add	r2, r0
90016482:	e75c      	b.n	9001633e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90016484:	b007      	add	sp, #28
90016486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001648a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001648a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001648e:	b085      	sub	sp, #20
90016490:	4693      	mov	fp, r2
90016492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016496:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90016498:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001649a:	6870      	ldr	r0, [r6, #4]
9001649c:	9100      	str	r1, [sp, #0]
9001649e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900164a2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
900164a6:	fb00 2404 	mla	r4, r0, r4, r2
900164aa:	6832      	ldr	r2, [r6, #0]
900164ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900164b0:	682a      	ldr	r2, [r5, #0]
900164b2:	9201      	str	r2, [sp, #4]
900164b4:	686a      	ldr	r2, [r5, #4]
900164b6:	3204      	adds	r2, #4
900164b8:	9202      	str	r2, [sp, #8]
900164ba:	9a00      	ldr	r2, [sp, #0]
900164bc:	2a00      	cmp	r2, #0
900164be:	dc03      	bgt.n	900164c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900164c0:	f1bb 0f00 	cmp.w	fp, #0
900164c4:	f340 80a0 	ble.w	90016608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900164c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900164ca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900164ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900164d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900164d4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900164d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900164dc:	2b00      	cmp	r3, #0
900164de:	dd0c      	ble.n	900164fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900164e0:	1406      	asrs	r6, r0, #16
900164e2:	d405      	bmi.n	900164f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900164e4:	454e      	cmp	r6, r9
900164e6:	da03      	bge.n	900164f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900164e8:	1416      	asrs	r6, r2, #16
900164ea:	d401      	bmi.n	900164f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900164ec:	4546      	cmp	r6, r8
900164ee:	db05      	blt.n	900164fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900164f0:	4470      	add	r0, lr
900164f2:	4462      	add	r2, ip
900164f4:	3b01      	subs	r3, #1
900164f6:	3402      	adds	r4, #2
900164f8:	e7f0      	b.n	900164dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900164fa:	d00f      	beq.n	9001651c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900164fc:	1e5e      	subs	r6, r3, #1
900164fe:	fb0e 0706 	mla	r7, lr, r6, r0
90016502:	143f      	asrs	r7, r7, #16
90016504:	d541      	bpl.n	9001658a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
90016506:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001650a:	4698      	mov	r8, r3
9001650c:	9603      	str	r6, [sp, #12]
9001650e:	f1b8 0f00 	cmp.w	r8, #0
90016512:	dc59      	bgt.n	900165c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90016514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016518:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001651c:	9b00      	ldr	r3, [sp, #0]
9001651e:	2b00      	cmp	r3, #0
90016520:	dd72      	ble.n	90016608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90016522:	ee30 0a04 	vadd.f32	s0, s0, s8
90016526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016528:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001652c:	eeb0 6a62 	vmov.f32	s12, s5
90016530:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016534:	ee31 1a05 	vadd.f32	s2, s2, s10
90016538:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001653c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016540:	eeb0 6a43 	vmov.f32	s12, s6
90016544:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016548:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001654c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016550:	ee61 7a27 	vmul.f32	s15, s2, s15
90016554:	ee77 2a62 	vsub.f32	s5, s14, s5
90016558:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001655c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016560:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016564:	ee12 2a90 	vmov	r2, s5
90016568:	eef0 2a47 	vmov.f32	s5, s14
9001656c:	fb92 fef3 	sdiv	lr, r2, r3
90016570:	ee13 2a10 	vmov	r2, s6
90016574:	eeb0 3a67 	vmov.f32	s6, s15
90016578:	fb92 fcf3 	sdiv	ip, r2, r3
9001657c:	9b00      	ldr	r3, [sp, #0]
9001657e:	3b01      	subs	r3, #1
90016580:	9300      	str	r3, [sp, #0]
90016582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016584:	bf08      	it	eq
90016586:	465b      	moveq	r3, fp
90016588:	e797      	b.n	900164ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001658a:	454f      	cmp	r7, r9
9001658c:	dabb      	bge.n	90016506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001658e:	fb0c 2606 	mla	r6, ip, r6, r2
90016592:	1436      	asrs	r6, r6, #16
90016594:	d4b7      	bmi.n	90016506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016596:	4546      	cmp	r6, r8
90016598:	dab5      	bge.n	90016506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001659a:	461e      	mov	r6, r3
9001659c:	46a0      	mov	r8, r4
9001659e:	2e00      	cmp	r6, #0
900165a0:	ddb8      	ble.n	90016514 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900165a2:	1417      	asrs	r7, r2, #16
900165a4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
900165a8:	9901      	ldr	r1, [sp, #4]
900165aa:	ea4f 4920 	mov.w	r9, r0, asr #16
900165ae:	4462      	add	r2, ip
900165b0:	4470      	add	r0, lr
900165b2:	fb0a 1707 	mla	r7, sl, r7, r1
900165b6:	9902      	ldr	r1, [sp, #8]
900165b8:	3e01      	subs	r6, #1
900165ba:	f817 7009 	ldrb.w	r7, [r7, r9]
900165be:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
900165c2:	f828 7b02 	strh.w	r7, [r8], #2
900165c6:	e7ea      	b.n	9001659e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
900165c8:	ea5f 4920 	movs.w	r9, r0, asr #16
900165cc:	d417      	bmi.n	900165fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900165ce:	68ae      	ldr	r6, [r5, #8]
900165d0:	454e      	cmp	r6, r9
900165d2:	dd14      	ble.n	900165fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900165d4:	ea5f 4a22 	movs.w	sl, r2, asr #16
900165d8:	d411      	bmi.n	900165fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900165da:	68ef      	ldr	r7, [r5, #12]
900165dc:	4557      	cmp	r7, sl
900165de:	dd0e      	ble.n	900165fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900165e0:	9f01      	ldr	r7, [sp, #4]
900165e2:	b236      	sxth	r6, r6
900165e4:	f06f 0101 	mvn.w	r1, #1
900165e8:	fb0a 7606 	mla	r6, sl, r6, r7
900165ec:	9f02      	ldr	r7, [sp, #8]
900165ee:	f816 6009 	ldrb.w	r6, [r6, r9]
900165f2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900165f6:	fb01 f608 	mul.w	r6, r1, r8
900165fa:	9903      	ldr	r1, [sp, #12]
900165fc:	538f      	strh	r7, [r1, r6]
900165fe:	4470      	add	r0, lr
90016600:	4462      	add	r2, ip
90016602:	f108 38ff 	add.w	r8, r8, #4294967295
90016606:	e782      	b.n	9001650e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90016608:	b005      	add	sp, #20
9001660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001660e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001660e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016612:	b087      	sub	sp, #28
90016614:	9c15      	ldr	r4, [sp, #84]	; 0x54
90016616:	9205      	str	r2, [sp, #20]
90016618:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001661c:	9102      	str	r1, [sp, #8]
9001661e:	9203      	str	r2, [sp, #12]
90016620:	6861      	ldr	r1, [r4, #4]
90016622:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90016626:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001662a:	fb01 2000 	mla	r0, r1, r0, r2
9001662e:	6822      	ldr	r2, [r4, #0]
90016630:	eb02 0240 	add.w	r2, r2, r0, lsl #1
90016634:	9200      	str	r2, [sp, #0]
90016636:	f8dc 2000 	ldr.w	r2, [ip]
9001663a:	9204      	str	r2, [sp, #16]
9001663c:	f8dc 2004 	ldr.w	r2, [ip, #4]
90016640:	3204      	adds	r2, #4
90016642:	9201      	str	r2, [sp, #4]
90016644:	9a03      	ldr	r2, [sp, #12]
90016646:	43d5      	mvns	r5, r2
90016648:	b2ed      	uxtb	r5, r5
9001664a:	9a02      	ldr	r2, [sp, #8]
9001664c:	2a00      	cmp	r2, #0
9001664e:	dc03      	bgt.n	90016658 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90016650:	9a05      	ldr	r2, [sp, #20]
90016652:	2a00      	cmp	r2, #0
90016654:	f340 812c 	ble.w	900168b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90016658:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001665a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001665e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016662:	9a12      	ldr	r2, [sp, #72]	; 0x48
90016664:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90016668:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001666c:	2b00      	cmp	r3, #0
9001666e:	dd10      	ble.n	90016692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90016670:	140c      	asrs	r4, r1, #16
90016672:	d405      	bmi.n	90016680 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90016674:	4574      	cmp	r4, lr
90016676:	da03      	bge.n	90016680 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90016678:	1414      	asrs	r4, r2, #16
9001667a:	d401      	bmi.n	90016680 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001667c:	42bc      	cmp	r4, r7
9001667e:	db09      	blt.n	90016694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90016680:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90016682:	3b01      	subs	r3, #1
90016684:	9800      	ldr	r0, [sp, #0]
90016686:	4421      	add	r1, r4
90016688:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001668a:	3002      	adds	r0, #2
9001668c:	4422      	add	r2, r4
9001668e:	9000      	str	r0, [sp, #0]
90016690:	e7ec      	b.n	9001666c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90016692:	d071      	beq.n	90016778 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90016694:	1e5c      	subs	r4, r3, #1
90016696:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90016698:	fb06 1604 	mla	r6, r6, r4, r1
9001669c:	1436      	asrs	r6, r6, #16
9001669e:	d45d      	bmi.n	9001675c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900166a0:	4576      	cmp	r6, lr
900166a2:	da5b      	bge.n	9001675c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900166a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
900166a6:	fb06 2404 	mla	r4, r6, r4, r2
900166aa:	1424      	asrs	r4, r4, #16
900166ac:	d456      	bmi.n	9001675c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900166ae:	42bc      	cmp	r4, r7
900166b0:	da54      	bge.n	9001675c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900166b2:	4698      	mov	r8, r3
900166b4:	f8dd 9000 	ldr.w	r9, [sp]
900166b8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
900166bc:	f1b8 0f00 	cmp.w	r8, #0
900166c0:	dd54      	ble.n	9001676c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
900166c2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
900166c6:	1414      	asrs	r4, r2, #16
900166c8:	9804      	ldr	r0, [sp, #16]
900166ca:	140e      	asrs	r6, r1, #16
900166cc:	f108 38ff 	add.w	r8, r8, #4294967295
900166d0:	fb07 0404 	mla	r4, r7, r4, r0
900166d4:	9801      	ldr	r0, [sp, #4]
900166d6:	f814 e006 	ldrb.w	lr, [r4, r6]
900166da:	f8b9 4000 	ldrh.w	r4, [r9]
900166de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
900166e2:	1227      	asrs	r7, r4, #8
900166e4:	eb00 0b0e 	add.w	fp, r0, lr
900166e8:	f810 e00e 	ldrb.w	lr, [r0, lr]
900166ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900166f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
900166f2:	f89b 6002 	ldrb.w	r6, [fp, #2]
900166f6:	f89b b001 	ldrb.w	fp, [fp, #1]
900166fa:	4401      	add	r1, r0
900166fc:	fb16 f60a 	smulbb	r6, r6, sl
90016700:	9814      	ldr	r0, [sp, #80]	; 0x50
90016702:	fb1b fb0a 	smulbb	fp, fp, sl
90016706:	fb07 6705 	mla	r7, r7, r5, r6
9001670a:	10e6      	asrs	r6, r4, #3
9001670c:	00e4      	lsls	r4, r4, #3
9001670e:	4402      	add	r2, r0
90016710:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016714:	b2bf      	uxth	r7, r7
90016716:	b2e4      	uxtb	r4, r4
90016718:	fb06 b605 	mla	r6, r6, r5, fp
9001671c:	fb14 f405 	smulbb	r4, r4, r5
90016720:	b2b6      	uxth	r6, r6
90016722:	fb0e 4e0a 	mla	lr, lr, sl, r4
90016726:	1c7c      	adds	r4, r7, #1
90016728:	f106 0b01 	add.w	fp, r6, #1
9001672c:	fa1f fe8e 	uxth.w	lr, lr
90016730:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90016734:	f10e 0401 	add.w	r4, lr, #1
90016738:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001673c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016740:	eb04 241e 	add.w	r4, r4, lr, lsr #8
90016744:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016748:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001674c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016750:	4327      	orrs	r7, r4
90016752:	ea47 070b 	orr.w	r7, r7, fp
90016756:	f829 7b02 	strh.w	r7, [r9], #2
9001675a:	e7af      	b.n	900166bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001675c:	f04f 0e00 	mov.w	lr, #0
90016760:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90016764:	eb03 040e 	add.w	r4, r3, lr
90016768:	2c00      	cmp	r4, #0
9001676a:	dc43      	bgt.n	900167f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001676c:	9a00      	ldr	r2, [sp, #0]
9001676e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016772:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90016776:	9300      	str	r3, [sp, #0]
90016778:	9b02      	ldr	r3, [sp, #8]
9001677a:	2b00      	cmp	r3, #0
9001677c:	f340 8098 	ble.w	900168b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90016780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90016784:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016786:	ee30 0a04 	vadd.f32	s0, s0, s8
9001678a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001678e:	eef0 6a62 	vmov.f32	s13, s5
90016792:	eec7 7a00 	vdiv.f32	s15, s14, s0
90016796:	ee31 1a05 	vadd.f32	s2, s2, s10
9001679a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001679e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
900167a2:	eef0 6a43 	vmov.f32	s13, s6
900167a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900167aa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
900167ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
900167b2:	ee61 7a27 	vmul.f32	s15, s2, s15
900167b6:	ee77 2a62 	vsub.f32	s5, s14, s5
900167ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
900167be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900167c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900167c6:	ee12 2a90 	vmov	r2, s5
900167ca:	eef0 2a47 	vmov.f32	s5, s14
900167ce:	fb92 f3f3 	sdiv	r3, r2, r3
900167d2:	ee13 2a10 	vmov	r2, s6
900167d6:	9313      	str	r3, [sp, #76]	; 0x4c
900167d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900167da:	eeb0 3a67 	vmov.f32	s6, s15
900167de:	fb92 f3f3 	sdiv	r3, r2, r3
900167e2:	9314      	str	r3, [sp, #80]	; 0x50
900167e4:	9b02      	ldr	r3, [sp, #8]
900167e6:	9a05      	ldr	r2, [sp, #20]
900167e8:	3b01      	subs	r3, #1
900167ea:	9302      	str	r3, [sp, #8]
900167ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
900167ee:	bf08      	it	eq
900167f0:	4613      	moveq	r3, r2
900167f2:	e72a      	b.n	9001664a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900167f4:	140f      	asrs	r7, r1, #16
900167f6:	d454      	bmi.n	900168a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900167f8:	f8dc 6008 	ldr.w	r6, [ip, #8]
900167fc:	42be      	cmp	r6, r7
900167fe:	dd50      	ble.n	900168a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90016800:	ea5f 4822 	movs.w	r8, r2, asr #16
90016804:	d44d      	bmi.n	900168a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90016806:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001680a:	4544      	cmp	r4, r8
9001680c:	dd49      	ble.n	900168a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001680e:	9c04      	ldr	r4, [sp, #16]
90016810:	b236      	sxth	r6, r6
90016812:	f06f 0001 	mvn.w	r0, #1
90016816:	fb08 4606 	mla	r6, r8, r6, r4
9001681a:	9c01      	ldr	r4, [sp, #4]
9001681c:	fb00 fa0e 	mul.w	sl, r0, lr
90016820:	9800      	ldr	r0, [sp, #0]
90016822:	f816 8007 	ldrb.w	r8, [r6, r7]
90016826:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001682a:	eb04 0b08 	add.w	fp, r4, r8
9001682e:	f830 400a 	ldrh.w	r4, [r0, sl]
90016832:	9801      	ldr	r0, [sp, #4]
90016834:	f89b 6002 	ldrb.w	r6, [fp, #2]
90016838:	1227      	asrs	r7, r4, #8
9001683a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001683e:	fb16 f609 	smulbb	r6, r6, r9
90016842:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016846:	f810 8008 	ldrb.w	r8, [r0, r8]
9001684a:	fb1b fb09 	smulbb	fp, fp, r9
9001684e:	fb07 6705 	mla	r7, r7, r5, r6
90016852:	10e6      	asrs	r6, r4, #3
90016854:	00e4      	lsls	r4, r4, #3
90016856:	9800      	ldr	r0, [sp, #0]
90016858:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001685c:	b2bf      	uxth	r7, r7
9001685e:	b2e4      	uxtb	r4, r4
90016860:	fb06 b605 	mla	r6, r6, r5, fp
90016864:	fb14 f405 	smulbb	r4, r4, r5
90016868:	b2b6      	uxth	r6, r6
9001686a:	fb08 4809 	mla	r8, r8, r9, r4
9001686e:	1c7c      	adds	r4, r7, #1
90016870:	f106 0b01 	add.w	fp, r6, #1
90016874:	fa1f f888 	uxth.w	r8, r8
90016878:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001687c:	f108 0401 	add.w	r4, r8, #1
90016880:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90016884:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016888:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001688c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016890:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90016894:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016898:	4327      	orrs	r7, r4
9001689a:	ea47 070b 	orr.w	r7, r7, fp
9001689e:	f820 700a 	strh.w	r7, [r0, sl]
900168a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
900168a4:	f10e 3eff 	add.w	lr, lr, #4294967295
900168a8:	4401      	add	r1, r0
900168aa:	9814      	ldr	r0, [sp, #80]	; 0x50
900168ac:	4402      	add	r2, r0
900168ae:	e759      	b.n	90016764 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
900168b0:	b007      	add	sp, #28
900168b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900168b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900168bc:	b085      	sub	sp, #20
900168be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900168c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900168c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
900168c6:	9203      	str	r2, [sp, #12]
900168c8:	6870      	ldr	r0, [r6, #4]
900168ca:	686f      	ldr	r7, [r5, #4]
900168cc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
900168d0:	3704      	adds	r7, #4
900168d2:	9101      	str	r1, [sp, #4]
900168d4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900168d8:	fb00 2404 	mla	r4, r0, r4, r2
900168dc:	6832      	ldr	r2, [r6, #0]
900168de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900168e2:	682a      	ldr	r2, [r5, #0]
900168e4:	9202      	str	r2, [sp, #8]
900168e6:	9a01      	ldr	r2, [sp, #4]
900168e8:	2a00      	cmp	r2, #0
900168ea:	dc03      	bgt.n	900168f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900168ec:	9a03      	ldr	r2, [sp, #12]
900168ee:	2a00      	cmp	r2, #0
900168f0:	f340 80cc 	ble.w	90016a8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
900168f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900168f6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900168fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900168fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016900:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90016904:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016908:	2b00      	cmp	r3, #0
9001690a:	dd0d      	ble.n	90016928 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001690c:	1406      	asrs	r6, r0, #16
9001690e:	d405      	bmi.n	9001691c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90016910:	454e      	cmp	r6, r9
90016912:	da03      	bge.n	9001691c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90016914:	1416      	asrs	r6, r2, #16
90016916:	d401      	bmi.n	9001691c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90016918:	4546      	cmp	r6, r8
9001691a:	db06      	blt.n	9001692a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001691c:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001691e:	4460      	add	r0, ip
90016920:	3b01      	subs	r3, #1
90016922:	3402      	adds	r4, #2
90016924:	4432      	add	r2, r6
90016926:	e7ef      	b.n	90016908 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90016928:	d00f      	beq.n	9001694a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001692a:	1e5e      	subs	r6, r3, #1
9001692c:	fb0c 0e06 	mla	lr, ip, r6, r0
90016930:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90016934:	d543      	bpl.n	900169be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90016936:	4698      	mov	r8, r3
90016938:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001693c:	f1b8 0f00 	cmp.w	r8, #0
90016940:	dc71      	bgt.n	90016a26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90016942:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016946:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001694a:	9b01      	ldr	r3, [sp, #4]
9001694c:	2b00      	cmp	r3, #0
9001694e:	f340 809d 	ble.w	90016a8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90016952:	ee30 0a04 	vadd.f32	s0, s0, s8
90016956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016958:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001695c:	eeb0 6a62 	vmov.f32	s12, s5
90016960:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016964:	ee31 1a05 	vadd.f32	s2, s2, s10
90016968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001696c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016970:	eeb0 6a43 	vmov.f32	s12, s6
90016974:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016978:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001697c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016980:	ee61 7a27 	vmul.f32	s15, s2, s15
90016984:	ee77 2a62 	vsub.f32	s5, s14, s5
90016988:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001698c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016990:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016994:	ee12 2a90 	vmov	r2, s5
90016998:	eef0 2a47 	vmov.f32	s5, s14
9001699c:	fb92 fcf3 	sdiv	ip, r2, r3
900169a0:	ee13 2a10 	vmov	r2, s6
900169a4:	eeb0 3a67 	vmov.f32	s6, s15
900169a8:	fb92 f3f3 	sdiv	r3, r2, r3
900169ac:	9312      	str	r3, [sp, #72]	; 0x48
900169ae:	9b01      	ldr	r3, [sp, #4]
900169b0:	9a03      	ldr	r2, [sp, #12]
900169b2:	3b01      	subs	r3, #1
900169b4:	9301      	str	r3, [sp, #4]
900169b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900169b8:	bf08      	it	eq
900169ba:	4613      	moveq	r3, r2
900169bc:	e793      	b.n	900168e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
900169be:	45ce      	cmp	lr, r9
900169c0:	dab9      	bge.n	90016936 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900169c2:	9912      	ldr	r1, [sp, #72]	; 0x48
900169c4:	fb01 2606 	mla	r6, r1, r6, r2
900169c8:	1436      	asrs	r6, r6, #16
900169ca:	d4b4      	bmi.n	90016936 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900169cc:	4546      	cmp	r6, r8
900169ce:	dab2      	bge.n	90016936 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900169d0:	4698      	mov	r8, r3
900169d2:	46a2      	mov	sl, r4
900169d4:	f1b8 0f00 	cmp.w	r8, #0
900169d8:	ddb3      	ble.n	90016942 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900169da:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900169de:	1416      	asrs	r6, r2, #16
900169e0:	9902      	ldr	r1, [sp, #8]
900169e2:	ea4f 4e20 	mov.w	lr, r0, asr #16
900169e6:	f108 38ff 	add.w	r8, r8, #4294967295
900169ea:	4460      	add	r0, ip
900169ec:	fb09 1606 	mla	r6, r9, r6, r1
900169f0:	4928      	ldr	r1, [pc, #160]	; (90016a94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
900169f2:	f816 e00e 	ldrb.w	lr, [r6, lr]
900169f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
900169fa:	eb07 0b0e 	add.w	fp, r7, lr
900169fe:	f89b 6001 	ldrb.w	r6, [fp, #1]
90016a02:	f89b 9002 	ldrb.w	r9, [fp, #2]
90016a06:	00f6      	lsls	r6, r6, #3
90016a08:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90016a0c:	9912      	ldr	r1, [sp, #72]	; 0x48
90016a0e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90016a12:	440a      	add	r2, r1
90016a14:	ea49 0606 	orr.w	r6, r9, r6
90016a18:	f817 900e 	ldrb.w	r9, [r7, lr]
90016a1c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90016a20:	f82a 6b02 	strh.w	r6, [sl], #2
90016a24:	e7d6      	b.n	900169d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90016a26:	ea5f 4920 	movs.w	r9, r0, asr #16
90016a2a:	d429      	bmi.n	90016a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016a2c:	68ae      	ldr	r6, [r5, #8]
90016a2e:	454e      	cmp	r6, r9
90016a30:	dd26      	ble.n	90016a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016a32:	ea5f 4b22 	movs.w	fp, r2, asr #16
90016a36:	d423      	bmi.n	90016a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016a38:	68e9      	ldr	r1, [r5, #12]
90016a3a:	4559      	cmp	r1, fp
90016a3c:	dd20      	ble.n	90016a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016a3e:	fa0f fe86 	sxth.w	lr, r6
90016a42:	9902      	ldr	r1, [sp, #8]
90016a44:	fb0b 1e0e 	mla	lr, fp, lr, r1
90016a48:	f06f 0101 	mvn.w	r1, #1
90016a4c:	f81e e009 	ldrb.w	lr, [lr, r9]
90016a50:	fb01 f908 	mul.w	r9, r1, r8
90016a54:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90016a58:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90016a5c:	eb07 060e 	add.w	r6, r7, lr
90016a60:	f896 b002 	ldrb.w	fp, [r6, #2]
90016a64:	7876      	ldrb	r6, [r6, #1]
90016a66:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90016a6a:	00f6      	lsls	r6, r6, #3
90016a6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90016a70:	ea4b 0606 	orr.w	r6, fp, r6
90016a74:	f817 b00e 	ldrb.w	fp, [r7, lr]
90016a78:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90016a7c:	f82a 6009 	strh.w	r6, [sl, r9]
90016a80:	9912      	ldr	r1, [sp, #72]	; 0x48
90016a82:	4460      	add	r0, ip
90016a84:	f108 38ff 	add.w	r8, r8, #4294967295
90016a88:	440a      	add	r2, r1
90016a8a:	e757      	b.n	9001693c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90016a8c:	b005      	add	sp, #20
90016a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016a92:	bf00      	nop
90016a94:	fffff800 	.word	0xfffff800

90016a98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016a9c:	b087      	sub	sp, #28
90016a9e:	468b      	mov	fp, r1
90016aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016aa4:	9815      	ldr	r0, [sp, #84]	; 0x54
90016aa6:	9204      	str	r2, [sp, #16]
90016aa8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90016aac:	6841      	ldr	r1, [r0, #4]
90016aae:	9205      	str	r2, [sp, #20]
90016ab0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90016ab4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90016ab8:	fb01 2404 	mla	r4, r1, r4, r2
90016abc:	6802      	ldr	r2, [r0, #0]
90016abe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016ac2:	f8dc 2000 	ldr.w	r2, [ip]
90016ac6:	9201      	str	r2, [sp, #4]
90016ac8:	f8dc 2004 	ldr.w	r2, [ip, #4]
90016acc:	3204      	adds	r2, #4
90016ace:	9202      	str	r2, [sp, #8]
90016ad0:	f1bb 0f00 	cmp.w	fp, #0
90016ad4:	dc03      	bgt.n	90016ade <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90016ad6:	9a04      	ldr	r2, [sp, #16]
90016ad8:	2a00      	cmp	r2, #0
90016ada:	f340 8138 	ble.w	90016d4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90016ade:	9a11      	ldr	r2, [sp, #68]	; 0x44
90016ae0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90016ae4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90016ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
90016aea:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
90016aee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016af2:	2b00      	cmp	r3, #0
90016af4:	dd0e      	ble.n	90016b14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016af6:	1402      	asrs	r2, r0, #16
90016af8:	d405      	bmi.n	90016b06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016afa:	42ba      	cmp	r2, r7
90016afc:	da03      	bge.n	90016b06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016afe:	140a      	asrs	r2, r1, #16
90016b00:	d401      	bmi.n	90016b06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016b02:	42b2      	cmp	r2, r6
90016b04:	db07      	blt.n	90016b16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016b06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016b08:	3b01      	subs	r3, #1
90016b0a:	3402      	adds	r4, #2
90016b0c:	4410      	add	r0, r2
90016b0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016b10:	4411      	add	r1, r2
90016b12:	e7ee      	b.n	90016af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90016b14:	d019      	beq.n	90016b4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90016b16:	1e5a      	subs	r2, r3, #1
90016b18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016b1a:	fb05 0502 	mla	r5, r5, r2, r0
90016b1e:	142d      	asrs	r5, r5, #16
90016b20:	d409      	bmi.n	90016b36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016b22:	42bd      	cmp	r5, r7
90016b24:	da07      	bge.n	90016b36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016b26:	9d14      	ldr	r5, [sp, #80]	; 0x50
90016b28:	fb05 1202 	mla	r2, r5, r2, r1
90016b2c:	1412      	asrs	r2, r2, #16
90016b2e:	d402      	bmi.n	90016b36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016b30:	42b2      	cmp	r2, r6
90016b32:	f2c0 80ac 	blt.w	90016c8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90016b36:	f04f 0e00 	mov.w	lr, #0
90016b3a:	eb03 020e 	add.w	r2, r3, lr
90016b3e:	2a00      	cmp	r2, #0
90016b40:	dc3e      	bgt.n	90016bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90016b42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016b46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016b4a:	f1bb 0f00 	cmp.w	fp, #0
90016b4e:	f340 80fe 	ble.w	90016d4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90016b52:	ee30 0a04 	vadd.f32	s0, s0, s8
90016b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016b58:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016b5c:	f1bb 0b01 	subs.w	fp, fp, #1
90016b60:	eeb0 6a62 	vmov.f32	s12, s5
90016b64:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016b68:	ee31 1a05 	vadd.f32	s2, s2, s10
90016b6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016b70:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90016b74:	eeb0 6a43 	vmov.f32	s12, s6
90016b78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016b7c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90016b80:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016b84:	ee61 7a27 	vmul.f32	s15, s2, s15
90016b88:	ee77 2a62 	vsub.f32	s5, s14, s5
90016b8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016b90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016b94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016b98:	ee12 2a90 	vmov	r2, s5
90016b9c:	eef0 2a47 	vmov.f32	s5, s14
90016ba0:	fb92 f3f3 	sdiv	r3, r2, r3
90016ba4:	ee13 2a10 	vmov	r2, s6
90016ba8:	9313      	str	r3, [sp, #76]	; 0x4c
90016baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016bac:	eeb0 3a67 	vmov.f32	s6, s15
90016bb0:	fb92 f3f3 	sdiv	r3, r2, r3
90016bb4:	9a04      	ldr	r2, [sp, #16]
90016bb6:	9314      	str	r3, [sp, #80]	; 0x50
90016bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016bba:	bf08      	it	eq
90016bbc:	4613      	moveq	r3, r2
90016bbe:	e787      	b.n	90016ad0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90016bc0:	1406      	asrs	r6, r0, #16
90016bc2:	d45d      	bmi.n	90016c80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016bc4:	f8dc 5008 	ldr.w	r5, [ip, #8]
90016bc8:	42b5      	cmp	r5, r6
90016bca:	dd59      	ble.n	90016c80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016bcc:	140f      	asrs	r7, r1, #16
90016bce:	d457      	bmi.n	90016c80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016bd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
90016bd4:	42ba      	cmp	r2, r7
90016bd6:	dd53      	ble.n	90016c80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016bd8:	9a01      	ldr	r2, [sp, #4]
90016bda:	b22d      	sxth	r5, r5
90016bdc:	fb07 2505 	mla	r5, r7, r5, r2
90016be0:	5daa      	ldrb	r2, [r5, r6]
90016be2:	9d02      	ldr	r5, [sp, #8]
90016be4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90016be8:	0e2e      	lsrs	r6, r5, #24
90016bea:	d049      	beq.n	90016c80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016bec:	f06f 0201 	mvn.w	r2, #1
90016bf0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016bf4:	fb02 f20e 	mul.w	r2, r2, lr
90016bf8:	f834 8002 	ldrh.w	r8, [r4, r2]
90016bfc:	9203      	str	r2, [sp, #12]
90016bfe:	9a05      	ldr	r2, [sp, #20]
90016c00:	ea4f 2728 	mov.w	r7, r8, asr #8
90016c04:	4356      	muls	r6, r2
90016c06:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016c0a:	1c72      	adds	r2, r6, #1
90016c0c:	eb02 2226 	add.w	r2, r2, r6, asr #8
90016c10:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016c14:	b2ed      	uxtb	r5, r5
90016c16:	1212      	asrs	r2, r2, #8
90016c18:	fa1f f982 	uxth.w	r9, r2
90016c1c:	43d2      	mvns	r2, r2
90016c1e:	fb16 f609 	smulbb	r6, r6, r9
90016c22:	b2d2      	uxtb	r2, r2
90016c24:	fb15 f509 	smulbb	r5, r5, r9
90016c28:	fb07 6702 	mla	r7, r7, r2, r6
90016c2c:	ea4f 06e8 	mov.w	r6, r8, asr #3
90016c30:	fb1a fa09 	smulbb	sl, sl, r9
90016c34:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90016c38:	b2bf      	uxth	r7, r7
90016c3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016c3e:	fa5f f888 	uxtb.w	r8, r8
90016c42:	fb06 a602 	mla	r6, r6, r2, sl
90016c46:	fb08 5502 	mla	r5, r8, r2, r5
90016c4a:	1c7a      	adds	r2, r7, #1
90016c4c:	b2b6      	uxth	r6, r6
90016c4e:	b2ad      	uxth	r5, r5
90016c50:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90016c54:	9a03      	ldr	r2, [sp, #12]
90016c56:	f105 0a01 	add.w	sl, r5, #1
90016c5a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016c5e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016c62:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016c66:	ea4a 0707 	orr.w	r7, sl, r7
90016c6a:	f106 0a01 	add.w	sl, r6, #1
90016c6e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016c72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016c76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016c7a:	ea47 070a 	orr.w	r7, r7, sl
90016c7e:	52a7      	strh	r7, [r4, r2]
90016c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016c82:	f10e 3eff 	add.w	lr, lr, #4294967295
90016c86:	4410      	add	r0, r2
90016c88:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016c8a:	4411      	add	r1, r2
90016c8c:	e755      	b.n	90016b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90016c8e:	f04f 0800 	mov.w	r8, #0
90016c92:	eba3 0208 	sub.w	r2, r3, r8
90016c96:	2a00      	cmp	r2, #0
90016c98:	f77f af53 	ble.w	90016b42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90016c9c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90016ca0:	140a      	asrs	r2, r1, #16
90016ca2:	9f01      	ldr	r7, [sp, #4]
90016ca4:	1405      	asrs	r5, r0, #16
90016ca6:	fb06 7202 	mla	r2, r6, r2, r7
90016caa:	5d52      	ldrb	r2, [r2, r5]
90016cac:	9d02      	ldr	r5, [sp, #8]
90016cae:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90016cb2:	0e2e      	lsrs	r6, r5, #24
90016cb4:	d044      	beq.n	90016d40 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
90016cb6:	9a05      	ldr	r2, [sp, #20]
90016cb8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016cbc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90016cc0:	4356      	muls	r6, r2
90016cc2:	ea4f 272e 	mov.w	r7, lr, asr #8
90016cc6:	1c72      	adds	r2, r6, #1
90016cc8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016ccc:	eb02 2226 	add.w	r2, r2, r6, asr #8
90016cd0:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016cd4:	b2ed      	uxtb	r5, r5
90016cd6:	1212      	asrs	r2, r2, #8
90016cd8:	fa1f f982 	uxth.w	r9, r2
90016cdc:	43d2      	mvns	r2, r2
90016cde:	fb16 f609 	smulbb	r6, r6, r9
90016ce2:	b2d2      	uxtb	r2, r2
90016ce4:	fb15 f509 	smulbb	r5, r5, r9
90016ce8:	fb07 6702 	mla	r7, r7, r2, r6
90016cec:	ea4f 06ee 	mov.w	r6, lr, asr #3
90016cf0:	fb1a fa09 	smulbb	sl, sl, r9
90016cf4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90016cf8:	b2bf      	uxth	r7, r7
90016cfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016cfe:	fa5f fe8e 	uxtb.w	lr, lr
90016d02:	fb06 a602 	mla	r6, r6, r2, sl
90016d06:	fb0e 5502 	mla	r5, lr, r2, r5
90016d0a:	1c7a      	adds	r2, r7, #1
90016d0c:	b2b6      	uxth	r6, r6
90016d0e:	b2ad      	uxth	r5, r5
90016d10:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90016d14:	f105 0a01 	add.w	sl, r5, #1
90016d18:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016d1c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016d20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016d24:	ea4a 0707 	orr.w	r7, sl, r7
90016d28:	f106 0a01 	add.w	sl, r6, #1
90016d2c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016d30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016d34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016d38:	ea47 070a 	orr.w	r7, r7, sl
90016d3c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90016d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016d42:	f108 0801 	add.w	r8, r8, #1
90016d46:	4410      	add	r0, r2
90016d48:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016d4a:	4411      	add	r1, r2
90016d4c:	e7a1      	b.n	90016c92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
90016d4e:	b007      	add	sp, #28
90016d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016d54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016d58:	b085      	sub	sp, #20
90016d5a:	468b      	mov	fp, r1
90016d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016d60:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016d62:	9203      	str	r2, [sp, #12]
90016d64:	6841      	ldr	r1, [r0, #4]
90016d66:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90016d6a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90016d6e:	fb01 2404 	mla	r4, r1, r4, r2
90016d72:	6802      	ldr	r2, [r0, #0]
90016d74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016d78:	f8de 2000 	ldr.w	r2, [lr]
90016d7c:	9200      	str	r2, [sp, #0]
90016d7e:	f8de 2004 	ldr.w	r2, [lr, #4]
90016d82:	3204      	adds	r2, #4
90016d84:	9201      	str	r2, [sp, #4]
90016d86:	f1bb 0f00 	cmp.w	fp, #0
90016d8a:	dc03      	bgt.n	90016d94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90016d8c:	9a03      	ldr	r2, [sp, #12]
90016d8e:	2a00      	cmp	r2, #0
90016d90:	f340 8153 	ble.w	9001703a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90016d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90016d96:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90016d9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016da0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90016da4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016da8:	2b00      	cmp	r3, #0
90016daa:	dd0e      	ble.n	90016dca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90016dac:	1408      	asrs	r0, r1, #16
90016dae:	d405      	bmi.n	90016dbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016db0:	42b8      	cmp	r0, r7
90016db2:	da03      	bge.n	90016dbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016db4:	1410      	asrs	r0, r2, #16
90016db6:	d401      	bmi.n	90016dbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016db8:	42b0      	cmp	r0, r6
90016dba:	db07      	blt.n	90016dcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90016dbc:	9811      	ldr	r0, [sp, #68]	; 0x44
90016dbe:	3b01      	subs	r3, #1
90016dc0:	3402      	adds	r4, #2
90016dc2:	4401      	add	r1, r0
90016dc4:	9812      	ldr	r0, [sp, #72]	; 0x48
90016dc6:	4402      	add	r2, r0
90016dc8:	e7ee      	b.n	90016da8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90016dca:	d017      	beq.n	90016dfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90016dcc:	1e58      	subs	r0, r3, #1
90016dce:	9d11      	ldr	r5, [sp, #68]	; 0x44
90016dd0:	fb05 1500 	mla	r5, r5, r0, r1
90016dd4:	142d      	asrs	r5, r5, #16
90016dd6:	d409      	bmi.n	90016dec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016dd8:	42bd      	cmp	r5, r7
90016dda:	da07      	bge.n	90016dec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016ddc:	9d12      	ldr	r5, [sp, #72]	; 0x48
90016dde:	fb05 2000 	mla	r0, r5, r0, r2
90016de2:	1400      	asrs	r0, r0, #16
90016de4:	d402      	bmi.n	90016dec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016de6:	42b0      	cmp	r0, r6
90016de8:	f2c0 80bc 	blt.w	90016f64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
90016dec:	2600      	movs	r6, #0
90016dee:	1998      	adds	r0, r3, r6
90016df0:	2800      	cmp	r0, #0
90016df2:	dc3e      	bgt.n	90016e72 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
90016df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016df8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016dfc:	f1bb 0f00 	cmp.w	fp, #0
90016e00:	f340 811b 	ble.w	9001703a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90016e04:	ee30 0a04 	vadd.f32	s0, s0, s8
90016e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016e0e:	f1bb 0b01 	subs.w	fp, fp, #1
90016e12:	eeb0 6a62 	vmov.f32	s12, s5
90016e16:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016e1a:	ee31 1a05 	vadd.f32	s2, s2, s10
90016e1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016e22:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016e26:	eeb0 6a43 	vmov.f32	s12, s6
90016e2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016e2e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90016e32:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016e36:	ee61 7a27 	vmul.f32	s15, s2, s15
90016e3a:	ee77 2a62 	vsub.f32	s5, s14, s5
90016e3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016e42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016e46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016e4a:	ee12 2a90 	vmov	r2, s5
90016e4e:	eef0 2a47 	vmov.f32	s5, s14
90016e52:	fb92 f3f3 	sdiv	r3, r2, r3
90016e56:	ee13 2a10 	vmov	r2, s6
90016e5a:	9311      	str	r3, [sp, #68]	; 0x44
90016e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016e5e:	eeb0 3a67 	vmov.f32	s6, s15
90016e62:	fb92 f3f3 	sdiv	r3, r2, r3
90016e66:	9a03      	ldr	r2, [sp, #12]
90016e68:	9312      	str	r3, [sp, #72]	; 0x48
90016e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016e6c:	bf08      	it	eq
90016e6e:	4613      	moveq	r3, r2
90016e70:	e789      	b.n	90016d86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90016e72:	140f      	asrs	r7, r1, #16
90016e74:	d426      	bmi.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016e76:	f8de 5008 	ldr.w	r5, [lr, #8]
90016e7a:	42bd      	cmp	r5, r7
90016e7c:	dd22      	ble.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016e7e:	ea5f 4c22 	movs.w	ip, r2, asr #16
90016e82:	d41f      	bmi.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016e84:	f8de 000c 	ldr.w	r0, [lr, #12]
90016e88:	4560      	cmp	r0, ip
90016e8a:	dd1b      	ble.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016e8c:	9800      	ldr	r0, [sp, #0]
90016e8e:	b22d      	sxth	r5, r5
90016e90:	fb0c 0505 	mla	r5, ip, r5, r0
90016e94:	5de8      	ldrb	r0, [r5, r7]
90016e96:	9d01      	ldr	r5, [sp, #4]
90016e98:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
90016e9c:	0e07      	lsrs	r7, r0, #24
90016e9e:	2fff      	cmp	r7, #255	; 0xff
90016ea0:	d116      	bne.n	90016ed0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90016ea2:	f06f 0501 	mvn.w	r5, #1
90016ea6:	fb05 f706 	mul.w	r7, r5, r6
90016eaa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90016eae:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90016eb2:	0945      	lsrs	r5, r0, #5
90016eb4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90016eb8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90016ebc:	ea4c 0505 	orr.w	r5, ip, r5
90016ec0:	4305      	orrs	r5, r0
90016ec2:	53e5      	strh	r5, [r4, r7]
90016ec4:	9811      	ldr	r0, [sp, #68]	; 0x44
90016ec6:	3e01      	subs	r6, #1
90016ec8:	4401      	add	r1, r0
90016eca:	9812      	ldr	r0, [sp, #72]	; 0x48
90016ecc:	4402      	add	r2, r0
90016ece:	e78e      	b.n	90016dee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90016ed0:	b2fd      	uxtb	r5, r7
90016ed2:	2f00      	cmp	r7, #0
90016ed4:	d0f6      	beq.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016ed6:	f06f 0701 	mvn.w	r7, #1
90016eda:	fa1f f985 	uxth.w	r9, r5
90016ede:	43ed      	mvns	r5, r5
90016ee0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90016ee4:	4377      	muls	r7, r6
90016ee6:	fb1a fa09 	smulbb	sl, sl, r9
90016eea:	b2ed      	uxtb	r5, r5
90016eec:	f834 8007 	ldrh.w	r8, [r4, r7]
90016ef0:	9702      	str	r7, [sp, #8]
90016ef2:	f3c0 4707 	ubfx	r7, r0, #16, #8
90016ef6:	ea4f 2c28 	mov.w	ip, r8, asr #8
90016efa:	fb17 f709 	smulbb	r7, r7, r9
90016efe:	b2c0      	uxtb	r0, r0
90016f00:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016f04:	fb10 f009 	smulbb	r0, r0, r9
90016f08:	fb0c 7c05 	mla	ip, ip, r5, r7
90016f0c:	ea4f 07e8 	mov.w	r7, r8, asr #3
90016f10:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90016f14:	fa1f fc8c 	uxth.w	ip, ip
90016f18:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90016f1c:	fa5f f888 	uxtb.w	r8, r8
90016f20:	fb07 a705 	mla	r7, r7, r5, sl
90016f24:	fb08 0005 	mla	r0, r8, r5, r0
90016f28:	f10c 0501 	add.w	r5, ip, #1
90016f2c:	b2bf      	uxth	r7, r7
90016f2e:	b280      	uxth	r0, r0
90016f30:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90016f34:	f100 0a01 	add.w	sl, r0, #1
90016f38:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016f3c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90016f40:	9802      	ldr	r0, [sp, #8]
90016f42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016f46:	ea4a 0c0c 	orr.w	ip, sl, ip
90016f4a:	f107 0a01 	add.w	sl, r7, #1
90016f4e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90016f52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016f56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016f5a:	ea4c 0c0a 	orr.w	ip, ip, sl
90016f5e:	f824 c000 	strh.w	ip, [r4, r0]
90016f62:	e7af      	b.n	90016ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016f64:	f04f 0800 	mov.w	r8, #0
90016f68:	eba3 0008 	sub.w	r0, r3, r8
90016f6c:	2800      	cmp	r0, #0
90016f6e:	f77f af41 	ble.w	90016df4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90016f72:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90016f76:	1410      	asrs	r0, r2, #16
90016f78:	9f00      	ldr	r7, [sp, #0]
90016f7a:	140d      	asrs	r5, r1, #16
90016f7c:	fb06 7000 	mla	r0, r6, r0, r7
90016f80:	5d40      	ldrb	r0, [r0, r5]
90016f82:	9d01      	ldr	r5, [sp, #4]
90016f84:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90016f88:	0e2e      	lsrs	r6, r5, #24
90016f8a:	2eff      	cmp	r6, #255	; 0xff
90016f8c:	d112      	bne.n	90016fb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
90016f8e:	482c      	ldr	r0, [pc, #176]	; (90017040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90016f90:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90016f94:	0968      	lsrs	r0, r5, #5
90016f96:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90016f9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90016f9e:	4330      	orrs	r0, r6
90016fa0:	4328      	orrs	r0, r5
90016fa2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
90016fa6:	9811      	ldr	r0, [sp, #68]	; 0x44
90016fa8:	f108 0801 	add.w	r8, r8, #1
90016fac:	4401      	add	r1, r0
90016fae:	9812      	ldr	r0, [sp, #72]	; 0x48
90016fb0:	4402      	add	r2, r0
90016fb2:	e7d9      	b.n	90016f68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90016fb4:	b2f0      	uxtb	r0, r6
90016fb6:	2e00      	cmp	r6, #0
90016fb8:	d0f5      	beq.n	90016fa6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90016fba:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
90016fbe:	fa1f f980 	uxth.w	r9, r0
90016fc2:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016fc6:	43c0      	mvns	r0, r0
90016fc8:	ea4f 272c 	mov.w	r7, ip, asr #8
90016fcc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016fd0:	fb16 f609 	smulbb	r6, r6, r9
90016fd4:	b2c0      	uxtb	r0, r0
90016fd6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016fda:	b2ed      	uxtb	r5, r5
90016fdc:	fb1a fa09 	smulbb	sl, sl, r9
90016fe0:	fb07 6700 	mla	r7, r7, r0, r6
90016fe4:	ea4f 06ec 	mov.w	r6, ip, asr #3
90016fe8:	fb15 f509 	smulbb	r5, r5, r9
90016fec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90016ff0:	b2bf      	uxth	r7, r7
90016ff2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016ff6:	fa5f fc8c 	uxtb.w	ip, ip
90016ffa:	fb06 a600 	mla	r6, r6, r0, sl
90016ffe:	fb0c 5500 	mla	r5, ip, r0, r5
90017002:	1c78      	adds	r0, r7, #1
90017004:	b2b6      	uxth	r6, r6
90017006:	b2ad      	uxth	r5, r5
90017008:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001700c:	f105 0a01 	add.w	sl, r5, #1
90017010:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017014:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017018:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001701c:	ea4a 0707 	orr.w	r7, sl, r7
90017020:	f106 0a01 	add.w	sl, r6, #1
90017024:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017028:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001702c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017030:	ea47 070a 	orr.w	r7, r7, sl
90017034:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90017038:	e7b5      	b.n	90016fa6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001703a:	b005      	add	sp, #20
9001703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017040:	fffff800 	.word	0xfffff800

90017044 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017048:	b087      	sub	sp, #28
9001704a:	468b      	mov	fp, r1
9001704c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017050:	9c15      	ldr	r4, [sp, #84]	; 0x54
90017052:	9204      	str	r2, [sp, #16]
90017054:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017058:	6861      	ldr	r1, [r4, #4]
9001705a:	9205      	str	r2, [sp, #20]
9001705c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90017060:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90017064:	fb01 2000 	mla	r0, r1, r0, r2
90017068:	6822      	ldr	r2, [r4, #0]
9001706a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001706e:	f8de 2000 	ldr.w	r2, [lr]
90017072:	9201      	str	r2, [sp, #4]
90017074:	f8de 2004 	ldr.w	r2, [lr, #4]
90017078:	9202      	str	r2, [sp, #8]
9001707a:	f1bb 0f00 	cmp.w	fp, #0
9001707e:	dc03      	bgt.n	90017088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90017080:	9a04      	ldr	r2, [sp, #16]
90017082:	2a00      	cmp	r2, #0
90017084:	f340 8142 	ble.w	9001730c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90017088:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001708a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001708e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017092:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017094:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90017098:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001709c:	2b00      	cmp	r3, #0
9001709e:	dd0e      	ble.n	900170be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900170a0:	140c      	asrs	r4, r1, #16
900170a2:	d405      	bmi.n	900170b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900170a4:	42bc      	cmp	r4, r7
900170a6:	da03      	bge.n	900170b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900170a8:	1414      	asrs	r4, r2, #16
900170aa:	d401      	bmi.n	900170b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900170ac:	42b4      	cmp	r4, r6
900170ae:	db07      	blt.n	900170c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900170b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900170b2:	3b01      	subs	r3, #1
900170b4:	3002      	adds	r0, #2
900170b6:	4421      	add	r1, r4
900170b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
900170ba:	4422      	add	r2, r4
900170bc:	e7ee      	b.n	9001709c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900170be:	d019      	beq.n	900170f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900170c0:	1e5c      	subs	r4, r3, #1
900170c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900170c4:	fb05 1504 	mla	r5, r5, r4, r1
900170c8:	142d      	asrs	r5, r5, #16
900170ca:	d409      	bmi.n	900170e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900170cc:	42bd      	cmp	r5, r7
900170ce:	da07      	bge.n	900170e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900170d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
900170d2:	fb05 2404 	mla	r4, r5, r4, r2
900170d6:	1424      	asrs	r4, r4, #16
900170d8:	d402      	bmi.n	900170e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900170da:	42b4      	cmp	r4, r6
900170dc:	f2c0 80b1 	blt.w	90017242 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
900170e0:	f04f 0800 	mov.w	r8, #0
900170e4:	eb03 0408 	add.w	r4, r3, r8
900170e8:	2c00      	cmp	r4, #0
900170ea:	dc3e      	bgt.n	9001716a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900170ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900170f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900170f4:	f1bb 0f00 	cmp.w	fp, #0
900170f8:	f340 8108 	ble.w	9001730c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900170fc:	ee30 0a04 	vadd.f32	s0, s0, s8
90017100:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017102:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017106:	f1bb 0b01 	subs.w	fp, fp, #1
9001710a:	eeb0 6a62 	vmov.f32	s12, s5
9001710e:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017112:	ee31 1a05 	vadd.f32	s2, s2, s10
90017116:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001711a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001711e:	eeb0 6a43 	vmov.f32	s12, s6
90017122:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017126:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001712a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001712e:	ee61 7a27 	vmul.f32	s15, s2, s15
90017132:	ee77 2a62 	vsub.f32	s5, s14, s5
90017136:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001713a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001713e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017142:	ee12 2a90 	vmov	r2, s5
90017146:	eef0 2a47 	vmov.f32	s5, s14
9001714a:	fb92 f3f3 	sdiv	r3, r2, r3
9001714e:	ee13 2a10 	vmov	r2, s6
90017152:	9313      	str	r3, [sp, #76]	; 0x4c
90017154:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017156:	eeb0 3a67 	vmov.f32	s6, s15
9001715a:	fb92 f3f3 	sdiv	r3, r2, r3
9001715e:	9a04      	ldr	r2, [sp, #16]
90017160:	9314      	str	r3, [sp, #80]	; 0x50
90017162:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017164:	bf08      	it	eq
90017166:	4613      	moveq	r3, r2
90017168:	e787      	b.n	9001707a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001716a:	140e      	asrs	r6, r1, #16
9001716c:	d462      	bmi.n	90017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001716e:	f8de 5008 	ldr.w	r5, [lr, #8]
90017172:	42b5      	cmp	r5, r6
90017174:	dd5e      	ble.n	90017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017176:	1417      	asrs	r7, r2, #16
90017178:	d45c      	bmi.n	90017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001717a:	f8de 400c 	ldr.w	r4, [lr, #12]
9001717e:	42bc      	cmp	r4, r7
90017180:	dd58      	ble.n	90017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017182:	b22d      	sxth	r5, r5
90017184:	9c02      	ldr	r4, [sp, #8]
90017186:	fb07 6505 	mla	r5, r7, r5, r6
9001718a:	5d66      	ldrb	r6, [r4, r5]
9001718c:	2e00      	cmp	r6, #0
9001718e:	d051      	beq.n	90017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017190:	9c01      	ldr	r4, [sp, #4]
90017192:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
90017196:	f06f 0401 	mvn.w	r4, #1
9001719a:	fb04 f408 	mul.w	r4, r4, r8
9001719e:	ea4f 2c29 	mov.w	ip, r9, asr #8
900171a2:	5b05      	ldrh	r5, [r0, r4]
900171a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900171a8:	9403      	str	r4, [sp, #12]
900171aa:	9c05      	ldr	r4, [sp, #20]
900171ac:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900171b0:	4366      	muls	r6, r4
900171b2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900171b6:	1c74      	adds	r4, r6, #1
900171b8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
900171bc:	122e      	asrs	r6, r5, #8
900171be:	1224      	asrs	r4, r4, #8
900171c0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900171c4:	00ed      	lsls	r5, r5, #3
900171c6:	b2a7      	uxth	r7, r4
900171c8:	43e4      	mvns	r4, r4
900171ca:	b2ed      	uxtb	r5, r5
900171cc:	b2e4      	uxtb	r4, r4
900171ce:	fb16 f604 	smulbb	r6, r6, r4
900171d2:	fb15 f504 	smulbb	r5, r5, r4
900171d6:	fb0c 6c07 	mla	ip, ip, r7, r6
900171da:	ea4f 06e9 	mov.w	r6, r9, asr #3
900171de:	fb1a fa04 	smulbb	sl, sl, r4
900171e2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900171e6:	fa1f fc8c 	uxth.w	ip, ip
900171ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900171ee:	fa5f f989 	uxtb.w	r9, r9
900171f2:	fb06 a607 	mla	r6, r6, r7, sl
900171f6:	f10c 0401 	add.w	r4, ip, #1
900171fa:	fb09 5507 	mla	r5, r9, r7, r5
900171fe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90017202:	9c03      	ldr	r4, [sp, #12]
90017204:	b2ad      	uxth	r5, r5
90017206:	b2b6      	uxth	r6, r6
90017208:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001720c:	f105 0a01 	add.w	sl, r5, #1
90017210:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017214:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017218:	ea4a 0c0c 	orr.w	ip, sl, ip
9001721c:	f106 0a01 	add.w	sl, r6, #1
90017220:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017224:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017228:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001722c:	ea4c 0c0a 	orr.w	ip, ip, sl
90017230:	f820 c004 	strh.w	ip, [r0, r4]
90017234:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017236:	f108 38ff 	add.w	r8, r8, #4294967295
9001723a:	4421      	add	r1, r4
9001723c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001723e:	4422      	add	r2, r4
90017240:	e750      	b.n	900170e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017242:	f04f 0900 	mov.w	r9, #0
90017246:	eba3 0409 	sub.w	r4, r3, r9
9001724a:	2c00      	cmp	r4, #0
9001724c:	f77f af4e 	ble.w	900170ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90017250:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90017254:	140d      	asrs	r5, r1, #16
90017256:	1414      	asrs	r4, r2, #16
90017258:	fb06 5404 	mla	r4, r6, r4, r5
9001725c:	9d02      	ldr	r5, [sp, #8]
9001725e:	5d2e      	ldrb	r6, [r5, r4]
90017260:	2e00      	cmp	r6, #0
90017262:	d04c      	beq.n	900172fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90017264:	9d01      	ldr	r5, [sp, #4]
90017266:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001726a:	9c05      	ldr	r4, [sp, #20]
9001726c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90017270:	ea4f 2c28 	mov.w	ip, r8, asr #8
90017274:	4366      	muls	r6, r4
90017276:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001727a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001727e:	1c74      	adds	r4, r6, #1
90017280:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90017284:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90017288:	122e      	asrs	r6, r5, #8
9001728a:	1224      	asrs	r4, r4, #8
9001728c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90017290:	00ed      	lsls	r5, r5, #3
90017292:	b2a7      	uxth	r7, r4
90017294:	43e4      	mvns	r4, r4
90017296:	b2ed      	uxtb	r5, r5
90017298:	b2e4      	uxtb	r4, r4
9001729a:	fb16 f604 	smulbb	r6, r6, r4
9001729e:	fb15 f504 	smulbb	r5, r5, r4
900172a2:	fb0c 6c07 	mla	ip, ip, r7, r6
900172a6:	ea4f 06e8 	mov.w	r6, r8, asr #3
900172aa:	fb1a fa04 	smulbb	sl, sl, r4
900172ae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900172b2:	fa1f fc8c 	uxth.w	ip, ip
900172b6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900172ba:	fa5f f888 	uxtb.w	r8, r8
900172be:	fb06 a607 	mla	r6, r6, r7, sl
900172c2:	f10c 0401 	add.w	r4, ip, #1
900172c6:	fb08 5507 	mla	r5, r8, r7, r5
900172ca:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900172ce:	b2ad      	uxth	r5, r5
900172d0:	b2b6      	uxth	r6, r6
900172d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900172d6:	f105 0a01 	add.w	sl, r5, #1
900172da:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900172de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900172e2:	ea4a 0c0c 	orr.w	ip, sl, ip
900172e6:	f106 0a01 	add.w	sl, r6, #1
900172ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900172ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900172f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900172f6:	ea4c 0c0a 	orr.w	ip, ip, sl
900172fa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900172fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017300:	f109 0901 	add.w	r9, r9, #1
90017304:	4421      	add	r1, r4
90017306:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017308:	4422      	add	r2, r4
9001730a:	e79c      	b.n	90017246 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001730c:	b007      	add	sp, #28
9001730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017312 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017316:	b085      	sub	sp, #20
90017318:	468b      	mov	fp, r1
9001731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001731e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017320:	9203      	str	r2, [sp, #12]
90017322:	6861      	ldr	r1, [r4, #4]
90017324:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90017328:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001732c:	fb01 2000 	mla	r0, r1, r0, r2
90017330:	6822      	ldr	r2, [r4, #0]
90017332:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90017336:	f8d8 2000 	ldr.w	r2, [r8]
9001733a:	9200      	str	r2, [sp, #0]
9001733c:	f8d8 2004 	ldr.w	r2, [r8, #4]
90017340:	9201      	str	r2, [sp, #4]
90017342:	f1bb 0f00 	cmp.w	fp, #0
90017346:	dc03      	bgt.n	90017350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017348:	9a03      	ldr	r2, [sp, #12]
9001734a:	2a00      	cmp	r2, #0
9001734c:	f340 8146 	ble.w	900175dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90017350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017352:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90017356:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001735a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001735c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90017360:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017364:	2b00      	cmp	r3, #0
90017366:	dd0e      	ble.n	90017386 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90017368:	140c      	asrs	r4, r1, #16
9001736a:	d405      	bmi.n	90017378 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001736c:	42bc      	cmp	r4, r7
9001736e:	da03      	bge.n	90017378 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017370:	1414      	asrs	r4, r2, #16
90017372:	d401      	bmi.n	90017378 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017374:	42b4      	cmp	r4, r6
90017376:	db07      	blt.n	90017388 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017378:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001737a:	3b01      	subs	r3, #1
9001737c:	3002      	adds	r0, #2
9001737e:	4421      	add	r1, r4
90017380:	9c12      	ldr	r4, [sp, #72]	; 0x48
90017382:	4422      	add	r2, r4
90017384:	e7ee      	b.n	90017364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90017386:	d017      	beq.n	900173b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017388:	1e5c      	subs	r4, r3, #1
9001738a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001738c:	fb05 1504 	mla	r5, r5, r4, r1
90017390:	142d      	asrs	r5, r5, #16
90017392:	d409      	bmi.n	900173a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017394:	42bd      	cmp	r5, r7
90017396:	da07      	bge.n	900173a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017398:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001739a:	fb05 2404 	mla	r4, r5, r4, r2
9001739e:	1424      	asrs	r4, r4, #16
900173a0:	d402      	bmi.n	900173a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900173a2:	42b4      	cmp	r4, r6
900173a4:	f2c0 80b3 	blt.w	9001750e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900173a8:	2600      	movs	r6, #0
900173aa:	199c      	adds	r4, r3, r6
900173ac:	2c00      	cmp	r4, #0
900173ae:	dc3e      	bgt.n	9001742e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900173b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900173b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900173b8:	f1bb 0f00 	cmp.w	fp, #0
900173bc:	f340 810e 	ble.w	900175dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900173c0:	ee30 0a04 	vadd.f32	s0, s0, s8
900173c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900173c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900173ca:	f1bb 0b01 	subs.w	fp, fp, #1
900173ce:	eeb0 6a62 	vmov.f32	s12, s5
900173d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
900173d6:	ee31 1a05 	vadd.f32	s2, s2, s10
900173da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900173de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900173e2:	eeb0 6a43 	vmov.f32	s12, s6
900173e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900173ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900173ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
900173f2:	ee61 7a27 	vmul.f32	s15, s2, s15
900173f6:	ee77 2a62 	vsub.f32	s5, s14, s5
900173fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
900173fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017406:	ee12 2a90 	vmov	r2, s5
9001740a:	eef0 2a47 	vmov.f32	s5, s14
9001740e:	fb92 f3f3 	sdiv	r3, r2, r3
90017412:	ee13 2a10 	vmov	r2, s6
90017416:	9311      	str	r3, [sp, #68]	; 0x44
90017418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001741a:	eeb0 3a67 	vmov.f32	s6, s15
9001741e:	fb92 f3f3 	sdiv	r3, r2, r3
90017422:	9a03      	ldr	r2, [sp, #12]
90017424:	9312      	str	r3, [sp, #72]	; 0x48
90017426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017428:	bf08      	it	eq
9001742a:	4613      	moveq	r3, r2
9001742c:	e789      	b.n	90017342 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001742e:	140f      	asrs	r7, r1, #16
90017430:	d418      	bmi.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017432:	f8d8 5008 	ldr.w	r5, [r8, #8]
90017436:	42bd      	cmp	r5, r7
90017438:	dd14      	ble.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001743a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001743e:	d411      	bmi.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017440:	f8d8 400c 	ldr.w	r4, [r8, #12]
90017444:	4564      	cmp	r4, ip
90017446:	dd0d      	ble.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017448:	b22d      	sxth	r5, r5
9001744a:	9c01      	ldr	r4, [sp, #4]
9001744c:	fb0c 7505 	mla	r5, ip, r5, r7
90017450:	5d64      	ldrb	r4, [r4, r5]
90017452:	2cff      	cmp	r4, #255	; 0xff
90017454:	d10c      	bne.n	90017470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90017456:	9c00      	ldr	r4, [sp, #0]
90017458:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001745c:	f06f 0401 	mvn.w	r4, #1
90017460:	4374      	muls	r4, r6
90017462:	5305      	strh	r5, [r0, r4]
90017464:	9c11      	ldr	r4, [sp, #68]	; 0x44
90017466:	3e01      	subs	r6, #1
90017468:	4421      	add	r1, r4
9001746a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001746c:	4422      	add	r2, r4
9001746e:	e79c      	b.n	900173aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017470:	2c00      	cmp	r4, #0
90017472:	d0f7      	beq.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017474:	9f00      	ldr	r7, [sp, #0]
90017476:	fa1f fc84 	uxth.w	ip, r4
9001747a:	43e4      	mvns	r4, r4
9001747c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90017480:	f06f 0501 	mvn.w	r5, #1
90017484:	b2e4      	uxtb	r4, r4
90017486:	4375      	muls	r5, r6
90017488:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001748c:	9502      	str	r5, [sp, #8]
9001748e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90017492:	5b45      	ldrh	r5, [r0, r5]
90017494:	122f      	asrs	r7, r5, #8
90017496:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001749a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001749e:	00ed      	lsls	r5, r5, #3
900174a0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900174a4:	fb17 f704 	smulbb	r7, r7, r4
900174a8:	b2ed      	uxtb	r5, r5
900174aa:	fb1a fa04 	smulbb	sl, sl, r4
900174ae:	fb0e 7e0c 	mla	lr, lr, ip, r7
900174b2:	ea4f 07e9 	mov.w	r7, r9, asr #3
900174b6:	fb15 f504 	smulbb	r5, r5, r4
900174ba:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900174be:	fa1f fe8e 	uxth.w	lr, lr
900174c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900174c6:	fa5f f989 	uxtb.w	r9, r9
900174ca:	fb07 a70c 	mla	r7, r7, ip, sl
900174ce:	f10e 0401 	add.w	r4, lr, #1
900174d2:	fb09 550c 	mla	r5, r9, ip, r5
900174d6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
900174da:	9c02      	ldr	r4, [sp, #8]
900174dc:	b2ad      	uxth	r5, r5
900174de:	b2bf      	uxth	r7, r7
900174e0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900174e4:	f105 0a01 	add.w	sl, r5, #1
900174e8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900174ec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900174f0:	ea4a 0e0e 	orr.w	lr, sl, lr
900174f4:	f107 0a01 	add.w	sl, r7, #1
900174f8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900174fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017500:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017504:	ea4e 0e0a 	orr.w	lr, lr, sl
90017508:	f820 e004 	strh.w	lr, [r0, r4]
9001750c:	e7aa      	b.n	90017464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001750e:	f04f 0900 	mov.w	r9, #0
90017512:	eba3 0409 	sub.w	r4, r3, r9
90017516:	2c00      	cmp	r4, #0
90017518:	f77f af4a 	ble.w	900173b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001751c:	1414      	asrs	r4, r2, #16
9001751e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90017522:	140d      	asrs	r5, r1, #16
90017524:	fb06 5504 	mla	r5, r6, r4, r5
90017528:	9c01      	ldr	r4, [sp, #4]
9001752a:	5d64      	ldrb	r4, [r4, r5]
9001752c:	2cff      	cmp	r4, #255	; 0xff
9001752e:	d10b      	bne.n	90017548 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90017530:	9c00      	ldr	r4, [sp, #0]
90017532:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
90017536:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001753a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001753c:	f109 0901 	add.w	r9, r9, #1
90017540:	4421      	add	r1, r4
90017542:	9c12      	ldr	r4, [sp, #72]	; 0x48
90017544:	4422      	add	r2, r4
90017546:	e7e4      	b.n	90017512 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90017548:	2c00      	cmp	r4, #0
9001754a:	d0f6      	beq.n	9001753a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001754c:	9e00      	ldr	r6, [sp, #0]
9001754e:	b2a7      	uxth	r7, r4
90017550:	43e4      	mvns	r4, r4
90017552:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
90017556:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001755a:	b2e4      	uxtb	r4, r4
9001755c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017560:	122e      	asrs	r6, r5, #8
90017562:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90017566:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001756a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001756e:	00ed      	lsls	r5, r5, #3
90017570:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90017574:	fb16 f604 	smulbb	r6, r6, r4
90017578:	b2ed      	uxtb	r5, r5
9001757a:	fb1a fa04 	smulbb	sl, sl, r4
9001757e:	fb0c 6c07 	mla	ip, ip, r7, r6
90017582:	ea4f 06ee 	mov.w	r6, lr, asr #3
90017586:	fb15 f504 	smulbb	r5, r5, r4
9001758a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001758e:	fa1f fc8c 	uxth.w	ip, ip
90017592:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017596:	fa5f fe8e 	uxtb.w	lr, lr
9001759a:	fb06 a607 	mla	r6, r6, r7, sl
9001759e:	f10c 0401 	add.w	r4, ip, #1
900175a2:	fb0e 5507 	mla	r5, lr, r7, r5
900175a6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900175aa:	b2ad      	uxth	r5, r5
900175ac:	b2b6      	uxth	r6, r6
900175ae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900175b2:	f105 0a01 	add.w	sl, r5, #1
900175b6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900175ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900175be:	ea4a 0c0c 	orr.w	ip, sl, ip
900175c2:	f106 0a01 	add.w	sl, r6, #1
900175c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900175ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900175ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900175d2:	ea4c 0c0a 	orr.w	ip, ip, sl
900175d6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900175da:	e7ae      	b.n	9001753a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
900175dc:	b005      	add	sp, #20
900175de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900175e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900175e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900175e6:	b085      	sub	sp, #20
900175e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
900175ea:	9203      	str	r2, [sp, #12]
900175ec:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
900175f0:	9100      	str	r1, [sp, #0]
900175f2:	9201      	str	r2, [sp, #4]
900175f4:	6841      	ldr	r1, [r0, #4]
900175f6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
900175fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900175fe:	fb01 2404 	mla	r4, r1, r4, r2
90017602:	6802      	ldr	r2, [r0, #0]
90017604:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017608:	f8de 2000 	ldr.w	r2, [lr]
9001760c:	9202      	str	r2, [sp, #8]
9001760e:	9a01      	ldr	r2, [sp, #4]
90017610:	43d6      	mvns	r6, r2
90017612:	b2f6      	uxtb	r6, r6
90017614:	9a00      	ldr	r2, [sp, #0]
90017616:	2a00      	cmp	r2, #0
90017618:	dc03      	bgt.n	90017622 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001761a:	9a03      	ldr	r2, [sp, #12]
9001761c:	2a00      	cmp	r2, #0
9001761e:	f340 8124 	ble.w	9001786a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90017622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017624:	f9be c008 	ldrsh.w	ip, [lr, #8]
90017628:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001762c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001762e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90017632:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017636:	2b00      	cmp	r3, #0
90017638:	dd0e      	ble.n	90017658 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001763a:	1408      	asrs	r0, r1, #16
9001763c:	d405      	bmi.n	9001764a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001763e:	4560      	cmp	r0, ip
90017640:	da03      	bge.n	9001764a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90017642:	1410      	asrs	r0, r2, #16
90017644:	d401      	bmi.n	9001764a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90017646:	42b8      	cmp	r0, r7
90017648:	db07      	blt.n	9001765a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001764a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001764c:	3b01      	subs	r3, #1
9001764e:	3402      	adds	r4, #2
90017650:	4401      	add	r1, r0
90017652:	9812      	ldr	r0, [sp, #72]	; 0x48
90017654:	4402      	add	r2, r0
90017656:	e7ee      	b.n	90017636 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90017658:	d06e      	beq.n	90017738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001765a:	1e58      	subs	r0, r3, #1
9001765c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001765e:	fb05 1500 	mla	r5, r5, r0, r1
90017662:	142d      	asrs	r5, r5, #16
90017664:	d45c      	bmi.n	90017720 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017666:	4565      	cmp	r5, ip
90017668:	da5a      	bge.n	90017720 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001766a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001766c:	fb05 2000 	mla	r0, r5, r0, r2
90017670:	1400      	asrs	r0, r0, #16
90017672:	d455      	bmi.n	90017720 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017674:	42b8      	cmp	r0, r7
90017676:	da53      	bge.n	90017720 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017678:	4699      	mov	r9, r3
9001767a:	46a2      	mov	sl, r4
9001767c:	f8bd b004 	ldrh.w	fp, [sp, #4]
90017680:	f1b9 0f00 	cmp.w	r9, #0
90017684:	dd54      	ble.n	90017730 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017686:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001768a:	140d      	asrs	r5, r1, #16
9001768c:	1410      	asrs	r0, r2, #16
9001768e:	f109 39ff 	add.w	r9, r9, #4294967295
90017692:	fb07 5000 	mla	r0, r7, r0, r5
90017696:	9d02      	ldr	r5, [sp, #8]
90017698:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001769c:	f8ba 5000 	ldrh.w	r5, [sl]
900176a0:	ea4f 2c20 	mov.w	ip, r0, asr #8
900176a4:	122f      	asrs	r7, r5, #8
900176a6:	ea4f 08e5 	mov.w	r8, r5, asr #3
900176aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900176ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900176b2:	00ed      	lsls	r5, r5, #3
900176b4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900176b8:	fb17 f706 	smulbb	r7, r7, r6
900176bc:	b2ed      	uxtb	r5, r5
900176be:	fb18 f806 	smulbb	r8, r8, r6
900176c2:	fb0c 7c0b 	mla	ip, ip, fp, r7
900176c6:	10c7      	asrs	r7, r0, #3
900176c8:	fb15 f506 	smulbb	r5, r5, r6
900176cc:	00c0      	lsls	r0, r0, #3
900176ce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900176d2:	fa1f fc8c 	uxth.w	ip, ip
900176d6:	b2c0      	uxtb	r0, r0
900176d8:	fb07 870b 	mla	r7, r7, fp, r8
900176dc:	fb00 500b 	mla	r0, r0, fp, r5
900176e0:	f10c 0501 	add.w	r5, ip, #1
900176e4:	b2bf      	uxth	r7, r7
900176e6:	b280      	uxth	r0, r0
900176e8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900176ec:	f107 0801 	add.w	r8, r7, #1
900176f0:	1c45      	adds	r5, r0, #1
900176f2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900176f6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900176fa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900176fe:	9811      	ldr	r0, [sp, #68]	; 0x44
90017700:	ea4f 1858 	mov.w	r8, r8, lsr #5
90017704:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90017708:	4401      	add	r1, r0
9001770a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001770e:	9812      	ldr	r0, [sp, #72]	; 0x48
90017710:	ea45 0c0c 	orr.w	ip, r5, ip
90017714:	4402      	add	r2, r0
90017716:	ea4c 0c08 	orr.w	ip, ip, r8
9001771a:	f82a cb02 	strh.w	ip, [sl], #2
9001771e:	e7af      	b.n	90017680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017720:	f04f 0800 	mov.w	r8, #0
90017724:	f8bd a004 	ldrh.w	sl, [sp, #4]
90017728:	eb03 0008 	add.w	r0, r3, r8
9001772c:	2800      	cmp	r0, #0
9001772e:	dc41      	bgt.n	900177b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90017730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017734:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017738:	9b00      	ldr	r3, [sp, #0]
9001773a:	2b00      	cmp	r3, #0
9001773c:	f340 8095 	ble.w	9001786a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90017740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017746:	ee30 0a04 	vadd.f32	s0, s0, s8
9001774a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001774e:	eef0 6a62 	vmov.f32	s13, s5
90017752:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017756:	ee31 1a05 	vadd.f32	s2, s2, s10
9001775a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001775e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
90017762:	eef0 6a43 	vmov.f32	s13, s6
90017766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001776a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001776e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017772:	ee61 7a27 	vmul.f32	s15, s2, s15
90017776:	ee77 2a62 	vsub.f32	s5, s14, s5
9001777a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001777e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017782:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017786:	ee12 2a90 	vmov	r2, s5
9001778a:	eef0 2a47 	vmov.f32	s5, s14
9001778e:	fb92 f3f3 	sdiv	r3, r2, r3
90017792:	ee13 2a10 	vmov	r2, s6
90017796:	9311      	str	r3, [sp, #68]	; 0x44
90017798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001779a:	eeb0 3a67 	vmov.f32	s6, s15
9001779e:	fb92 f3f3 	sdiv	r3, r2, r3
900177a2:	9312      	str	r3, [sp, #72]	; 0x48
900177a4:	9b00      	ldr	r3, [sp, #0]
900177a6:	9a03      	ldr	r2, [sp, #12]
900177a8:	3b01      	subs	r3, #1
900177aa:	9300      	str	r3, [sp, #0]
900177ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900177ae:	bf08      	it	eq
900177b0:	4613      	moveq	r3, r2
900177b2:	e72f      	b.n	90017614 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
900177b4:	140f      	asrs	r7, r1, #16
900177b6:	d451      	bmi.n	9001785c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900177b8:	f8de 5008 	ldr.w	r5, [lr, #8]
900177bc:	42bd      	cmp	r5, r7
900177be:	dd4d      	ble.n	9001785c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900177c0:	ea5f 4c22 	movs.w	ip, r2, asr #16
900177c4:	d44a      	bmi.n	9001785c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900177c6:	f8de 000c 	ldr.w	r0, [lr, #12]
900177ca:	4560      	cmp	r0, ip
900177cc:	dd46      	ble.n	9001785c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900177ce:	b22d      	sxth	r5, r5
900177d0:	9802      	ldr	r0, [sp, #8]
900177d2:	fb0c 7505 	mla	r5, ip, r5, r7
900177d6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
900177da:	f06f 0501 	mvn.w	r5, #1
900177de:	fb05 fb08 	mul.w	fp, r5, r8
900177e2:	ea4f 2c20 	mov.w	ip, r0, asr #8
900177e6:	f834 500b 	ldrh.w	r5, [r4, fp]
900177ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900177ee:	122f      	asrs	r7, r5, #8
900177f0:	ea4f 09e5 	mov.w	r9, r5, asr #3
900177f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900177f8:	00ed      	lsls	r5, r5, #3
900177fa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900177fe:	fb17 f706 	smulbb	r7, r7, r6
90017802:	b2ed      	uxtb	r5, r5
90017804:	fb19 f906 	smulbb	r9, r9, r6
90017808:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001780c:	10c7      	asrs	r7, r0, #3
9001780e:	fb15 f506 	smulbb	r5, r5, r6
90017812:	00c0      	lsls	r0, r0, #3
90017814:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017818:	fa1f fc8c 	uxth.w	ip, ip
9001781c:	b2c0      	uxtb	r0, r0
9001781e:	fb07 970a 	mla	r7, r7, sl, r9
90017822:	fb00 500a 	mla	r0, r0, sl, r5
90017826:	f10c 0501 	add.w	r5, ip, #1
9001782a:	b2bf      	uxth	r7, r7
9001782c:	b280      	uxth	r0, r0
9001782e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017832:	f107 0901 	add.w	r9, r7, #1
90017836:	1c45      	adds	r5, r0, #1
90017838:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001783c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017840:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90017844:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017848:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001784c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90017850:	ea45 0c0c 	orr.w	ip, r5, ip
90017854:	ea4c 0c09 	orr.w	ip, ip, r9
90017858:	f824 c00b 	strh.w	ip, [r4, fp]
9001785c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001785e:	f108 38ff 	add.w	r8, r8, #4294967295
90017862:	4401      	add	r1, r0
90017864:	9812      	ldr	r0, [sp, #72]	; 0x48
90017866:	4402      	add	r2, r0
90017868:	e75e      	b.n	90017728 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001786a:	b005      	add	sp, #20
9001786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017870 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017874:	b085      	sub	sp, #20
90017876:	4693      	mov	fp, r2
90017878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001787c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001787e:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017880:	6870      	ldr	r0, [r6, #4]
90017882:	9101      	str	r1, [sp, #4]
90017884:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017888:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001788c:	fb00 2404 	mla	r4, r0, r4, r2
90017890:	6832      	ldr	r2, [r6, #0]
90017892:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017896:	682a      	ldr	r2, [r5, #0]
90017898:	9202      	str	r2, [sp, #8]
9001789a:	9a01      	ldr	r2, [sp, #4]
9001789c:	2a00      	cmp	r2, #0
9001789e:	dc03      	bgt.n	900178a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900178a0:	f1bb 0f00 	cmp.w	fp, #0
900178a4:	f340 809a 	ble.w	900179dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
900178a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900178aa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900178ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900178b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900178b4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900178b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900178bc:	2b00      	cmp	r3, #0
900178be:	dd0c      	ble.n	900178da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
900178c0:	1406      	asrs	r6, r0, #16
900178c2:	d405      	bmi.n	900178d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900178c4:	454e      	cmp	r6, r9
900178c6:	da03      	bge.n	900178d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900178c8:	1416      	asrs	r6, r2, #16
900178ca:	d401      	bmi.n	900178d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900178cc:	4546      	cmp	r6, r8
900178ce:	db05      	blt.n	900178dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900178d0:	4470      	add	r0, lr
900178d2:	4462      	add	r2, ip
900178d4:	3b01      	subs	r3, #1
900178d6:	3402      	adds	r4, #2
900178d8:	e7f0      	b.n	900178bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900178da:	d00f      	beq.n	900178fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900178dc:	1e5e      	subs	r6, r3, #1
900178de:	fb0e 0706 	mla	r7, lr, r6, r0
900178e2:	143f      	asrs	r7, r7, #16
900178e4:	d541      	bpl.n	9001796a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
900178e6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900178ea:	4698      	mov	r8, r3
900178ec:	9603      	str	r6, [sp, #12]
900178ee:	f1b8 0f00 	cmp.w	r8, #0
900178f2:	dc56      	bgt.n	900179a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
900178f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900178f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900178fc:	9b01      	ldr	r3, [sp, #4]
900178fe:	2b00      	cmp	r3, #0
90017900:	dd6c      	ble.n	900179dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90017902:	ee30 0a04 	vadd.f32	s0, s0, s8
90017906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017908:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001790c:	eeb0 6a62 	vmov.f32	s12, s5
90017910:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017914:	ee31 1a05 	vadd.f32	s2, s2, s10
90017918:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001791c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017920:	eeb0 6a43 	vmov.f32	s12, s6
90017924:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017928:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001792c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017930:	ee61 7a27 	vmul.f32	s15, s2, s15
90017934:	ee77 2a62 	vsub.f32	s5, s14, s5
90017938:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001793c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017940:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017944:	ee12 2a90 	vmov	r2, s5
90017948:	eef0 2a47 	vmov.f32	s5, s14
9001794c:	fb92 fef3 	sdiv	lr, r2, r3
90017950:	ee13 2a10 	vmov	r2, s6
90017954:	eeb0 3a67 	vmov.f32	s6, s15
90017958:	fb92 fcf3 	sdiv	ip, r2, r3
9001795c:	9b01      	ldr	r3, [sp, #4]
9001795e:	3b01      	subs	r3, #1
90017960:	9301      	str	r3, [sp, #4]
90017962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017964:	bf08      	it	eq
90017966:	465b      	moveq	r3, fp
90017968:	e797      	b.n	9001789a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001796a:	454f      	cmp	r7, r9
9001796c:	dabb      	bge.n	900178e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001796e:	fb0c 2606 	mla	r6, ip, r6, r2
90017972:	1436      	asrs	r6, r6, #16
90017974:	d4b7      	bmi.n	900178e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017976:	4546      	cmp	r6, r8
90017978:	dab5      	bge.n	900178e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001797a:	461e      	mov	r6, r3
9001797c:	46a0      	mov	r8, r4
9001797e:	2e00      	cmp	r6, #0
90017980:	ddb8      	ble.n	900178f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017982:	1417      	asrs	r7, r2, #16
90017984:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017988:	ea4f 4920 	mov.w	r9, r0, asr #16
9001798c:	9902      	ldr	r1, [sp, #8]
9001798e:	4470      	add	r0, lr
90017990:	4462      	add	r2, ip
90017992:	fb0a 9707 	mla	r7, sl, r7, r9
90017996:	3e01      	subs	r6, #1
90017998:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001799c:	f828 7b02 	strh.w	r7, [r8], #2
900179a0:	e7ed      	b.n	9001797e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
900179a2:	ea5f 4920 	movs.w	r9, r0, asr #16
900179a6:	d414      	bmi.n	900179d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900179a8:	68ae      	ldr	r6, [r5, #8]
900179aa:	454e      	cmp	r6, r9
900179ac:	dd11      	ble.n	900179d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900179ae:	ea5f 4a22 	movs.w	sl, r2, asr #16
900179b2:	d40e      	bmi.n	900179d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900179b4:	68ef      	ldr	r7, [r5, #12]
900179b6:	4557      	cmp	r7, sl
900179b8:	dd0b      	ble.n	900179d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900179ba:	b236      	sxth	r6, r6
900179bc:	f06f 0101 	mvn.w	r1, #1
900179c0:	9f02      	ldr	r7, [sp, #8]
900179c2:	fb0a 9606 	mla	r6, sl, r6, r9
900179c6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900179ca:	fb01 f608 	mul.w	r6, r1, r8
900179ce:	9903      	ldr	r1, [sp, #12]
900179d0:	538f      	strh	r7, [r1, r6]
900179d2:	4470      	add	r0, lr
900179d4:	4462      	add	r2, ip
900179d6:	f108 38ff 	add.w	r8, r8, #4294967295
900179da:	e788      	b.n	900178ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900179dc:	b005      	add	sp, #20
900179de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900179e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900179e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900179e6:	b087      	sub	sp, #28
900179e8:	468b      	mov	fp, r1
900179ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900179ee:	9815      	ldr	r0, [sp, #84]	; 0x54
900179f0:	9203      	str	r2, [sp, #12]
900179f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900179f6:	6841      	ldr	r1, [r0, #4]
900179f8:	9204      	str	r2, [sp, #16]
900179fa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
900179fe:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
90017a02:	fb01 2505 	mla	r5, r1, r5, r2
90017a06:	6802      	ldr	r2, [r0, #0]
90017a08:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90017a0c:	f8d9 2000 	ldr.w	r2, [r9]
90017a10:	9201      	str	r2, [sp, #4]
90017a12:	f1bb 0f00 	cmp.w	fp, #0
90017a16:	dc03      	bgt.n	90017a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017a18:	9a03      	ldr	r2, [sp, #12]
90017a1a:	2a00      	cmp	r2, #0
90017a1c:	f340 8158 	ble.w	90017cd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90017a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017a22:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90017a26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017a2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017a2c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90017a30:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017a34:	2b00      	cmp	r3, #0
90017a36:	dd0e      	ble.n	90017a56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90017a38:	1402      	asrs	r2, r0, #16
90017a3a:	d405      	bmi.n	90017a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a3c:	42ba      	cmp	r2, r7
90017a3e:	da03      	bge.n	90017a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a40:	140a      	asrs	r2, r1, #16
90017a42:	d401      	bmi.n	90017a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a44:	42b2      	cmp	r2, r6
90017a46:	db07      	blt.n	90017a58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017a4a:	3b01      	subs	r3, #1
90017a4c:	3502      	adds	r5, #2
90017a4e:	4410      	add	r0, r2
90017a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017a52:	4411      	add	r1, r2
90017a54:	e7ee      	b.n	90017a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90017a56:	d017      	beq.n	90017a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017a58:	1e5a      	subs	r2, r3, #1
90017a5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017a5c:	fb04 0402 	mla	r4, r4, r2, r0
90017a60:	1424      	asrs	r4, r4, #16
90017a62:	d409      	bmi.n	90017a78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017a64:	42bc      	cmp	r4, r7
90017a66:	da07      	bge.n	90017a78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017a68:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017a6a:	fb04 1202 	mla	r2, r4, r2, r1
90017a6e:	1412      	asrs	r2, r2, #16
90017a70:	d402      	bmi.n	90017a78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017a72:	42b2      	cmp	r2, r6
90017a74:	f2c0 80bf 	blt.w	90017bf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90017a78:	2700      	movs	r7, #0
90017a7a:	19da      	adds	r2, r3, r7
90017a7c:	2a00      	cmp	r2, #0
90017a7e:	dc3e      	bgt.n	90017afe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017a80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017a84:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90017a88:	f1bb 0f00 	cmp.w	fp, #0
90017a8c:	f340 8120 	ble.w	90017cd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90017a90:	ee30 0a04 	vadd.f32	s0, s0, s8
90017a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017a96:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017a9a:	f1bb 0b01 	subs.w	fp, fp, #1
90017a9e:	eeb0 6a62 	vmov.f32	s12, s5
90017aa2:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017aa6:	ee31 1a05 	vadd.f32	s2, s2, s10
90017aaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017aae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017ab2:	eeb0 6a43 	vmov.f32	s12, s6
90017ab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017aba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017abe:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017ac2:	ee61 7a27 	vmul.f32	s15, s2, s15
90017ac6:	ee77 2a62 	vsub.f32	s5, s14, s5
90017aca:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017ace:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017ad2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017ad6:	ee12 2a90 	vmov	r2, s5
90017ada:	eef0 2a47 	vmov.f32	s5, s14
90017ade:	fb92 f3f3 	sdiv	r3, r2, r3
90017ae2:	ee13 2a10 	vmov	r2, s6
90017ae6:	9313      	str	r3, [sp, #76]	; 0x4c
90017ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017aea:	eeb0 3a67 	vmov.f32	s6, s15
90017aee:	fb92 f3f3 	sdiv	r3, r2, r3
90017af2:	9a03      	ldr	r2, [sp, #12]
90017af4:	9314      	str	r3, [sp, #80]	; 0x50
90017af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017af8:	bf08      	it	eq
90017afa:	4613      	moveq	r3, r2
90017afc:	e789      	b.n	90017a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017afe:	1406      	asrs	r6, r0, #16
90017b00:	d42d      	bmi.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017b02:	f8d9 4008 	ldr.w	r4, [r9, #8]
90017b06:	42b4      	cmp	r4, r6
90017b08:	dd29      	ble.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017b0a:	ea5f 4c21 	movs.w	ip, r1, asr #16
90017b0e:	d426      	bmi.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017b10:	f8d9 200c 	ldr.w	r2, [r9, #12]
90017b14:	4562      	cmp	r2, ip
90017b16:	dd22      	ble.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017b18:	b224      	sxth	r4, r4
90017b1a:	9a01      	ldr	r2, [sp, #4]
90017b1c:	fb0c 6404 	mla	r4, ip, r4, r6
90017b20:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90017b24:	0e22      	lsrs	r2, r4, #24
90017b26:	d01a      	beq.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017b28:	9e04      	ldr	r6, [sp, #16]
90017b2a:	4372      	muls	r2, r6
90017b2c:	1c56      	adds	r6, r2, #1
90017b2e:	eb06 2222 	add.w	r2, r6, r2, asr #8
90017b32:	0a26      	lsrs	r6, r4, #8
90017b34:	1212      	asrs	r2, r2, #8
90017b36:	9605      	str	r6, [sp, #20]
90017b38:	2aff      	cmp	r2, #255	; 0xff
90017b3a:	d116      	bne.n	90017b6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90017b3c:	f06f 0201 	mvn.w	r2, #1
90017b40:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90017b44:	fb02 fc07 	mul.w	ip, r2, r7
90017b48:	0962      	lsrs	r2, r4, #5
90017b4a:	f026 0607 	bic.w	r6, r6, #7
90017b4e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90017b52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017b56:	4316      	orrs	r6, r2
90017b58:	4326      	orrs	r6, r4
90017b5a:	f825 600c 	strh.w	r6, [r5, ip]
90017b5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017b60:	3f01      	subs	r7, #1
90017b62:	4410      	add	r0, r2
90017b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017b66:	4411      	add	r1, r2
90017b68:	e787      	b.n	90017a7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017b6a:	f06f 0601 	mvn.w	r6, #1
90017b6e:	fa1f fa82 	uxth.w	sl, r2
90017b72:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90017b76:	43d2      	mvns	r2, r2
90017b78:	437e      	muls	r6, r7
90017b7a:	b2e4      	uxtb	r4, r4
90017b7c:	fb1c fc0a 	smulbb	ip, ip, sl
90017b80:	b2d2      	uxtb	r2, r2
90017b82:	f835 8006 	ldrh.w	r8, [r5, r6]
90017b86:	fb14 f40a 	smulbb	r4, r4, sl
90017b8a:	9602      	str	r6, [sp, #8]
90017b8c:	ea4f 2e28 	mov.w	lr, r8, asr #8
90017b90:	f89d 6014 	ldrb.w	r6, [sp, #20]
90017b94:	fb16 f60a 	smulbb	r6, r6, sl
90017b98:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90017b9c:	fb0e ce02 	mla	lr, lr, r2, ip
90017ba0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90017ba4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017ba8:	fa1f fe8e 	uxth.w	lr, lr
90017bac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90017bb0:	fa5f f888 	uxtb.w	r8, r8
90017bb4:	fb0c 6c02 	mla	ip, ip, r2, r6
90017bb8:	fb08 4402 	mla	r4, r8, r2, r4
90017bbc:	f10e 0201 	add.w	r2, lr, #1
90017bc0:	fa1f fc8c 	uxth.w	ip, ip
90017bc4:	b2a4      	uxth	r4, r4
90017bc6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90017bca:	9a02      	ldr	r2, [sp, #8]
90017bcc:	1c66      	adds	r6, r4, #1
90017bce:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90017bd2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017bd6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017bda:	ea46 0e0e 	orr.w	lr, r6, lr
90017bde:	f10c 0601 	add.w	r6, ip, #1
90017be2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90017be6:	0976      	lsrs	r6, r6, #5
90017be8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017bec:	ea4e 0e06 	orr.w	lr, lr, r6
90017bf0:	f825 e002 	strh.w	lr, [r5, r2]
90017bf4:	e7b3      	b.n	90017b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017bf6:	f04f 0800 	mov.w	r8, #0
90017bfa:	eba3 0208 	sub.w	r2, r3, r8
90017bfe:	2a00      	cmp	r2, #0
90017c00:	f77f af3e 	ble.w	90017a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017c04:	1404      	asrs	r4, r0, #16
90017c06:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
90017c0a:	140a      	asrs	r2, r1, #16
90017c0c:	fb06 4202 	mla	r2, r6, r2, r4
90017c10:	9c01      	ldr	r4, [sp, #4]
90017c12:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
90017c16:	0e22      	lsrs	r2, r4, #24
90017c18:	d015      	beq.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90017c1a:	9e04      	ldr	r6, [sp, #16]
90017c1c:	4372      	muls	r2, r6
90017c1e:	1c56      	adds	r6, r2, #1
90017c20:	eb06 2222 	add.w	r2, r6, r2, asr #8
90017c24:	0a26      	lsrs	r6, r4, #8
90017c26:	1212      	asrs	r2, r2, #8
90017c28:	2aff      	cmp	r2, #255	; 0xff
90017c2a:	d113      	bne.n	90017c54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90017c2c:	0962      	lsrs	r2, r4, #5
90017c2e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90017c32:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90017c36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017c3a:	f026 0607 	bic.w	r6, r6, #7
90017c3e:	4316      	orrs	r6, r2
90017c40:	4326      	orrs	r6, r4
90017c42:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90017c46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017c48:	f108 0801 	add.w	r8, r8, #1
90017c4c:	4410      	add	r0, r2
90017c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017c50:	4411      	add	r1, r2
90017c52:	e7d2      	b.n	90017bfa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90017c54:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90017c58:	fa1f fa82 	uxth.w	sl, r2
90017c5c:	f3c4 4707 	ubfx	r7, r4, #16, #8
90017c60:	43d2      	mvns	r2, r2
90017c62:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017c66:	fb17 f70a 	smulbb	r7, r7, sl
90017c6a:	b2d2      	uxtb	r2, r2
90017c6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017c70:	b2e4      	uxtb	r4, r4
90017c72:	b2f6      	uxtb	r6, r6
90017c74:	fb0c 7c02 	mla	ip, ip, r2, r7
90017c78:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017c7c:	fb14 f40a 	smulbb	r4, r4, sl
90017c80:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017c84:	fa1f fc8c 	uxth.w	ip, ip
90017c88:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017c8c:	fb16 f60a 	smulbb	r6, r6, sl
90017c90:	fa5f fe8e 	uxtb.w	lr, lr
90017c94:	fb0e 4402 	mla	r4, lr, r2, r4
90017c98:	fb07 6702 	mla	r7, r7, r2, r6
90017c9c:	f10c 0201 	add.w	r2, ip, #1
90017ca0:	b2a4      	uxth	r4, r4
90017ca2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90017ca6:	1c66      	adds	r6, r4, #1
90017ca8:	b2bf      	uxth	r7, r7
90017caa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017cae:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017cb2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017cb6:	ea46 0c0c 	orr.w	ip, r6, ip
90017cba:	1c7e      	adds	r6, r7, #1
90017cbc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
90017cc0:	0976      	lsrs	r6, r6, #5
90017cc2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017cc6:	ea4c 0c06 	orr.w	ip, ip, r6
90017cca:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
90017cce:	e7ba      	b.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90017cd0:	b007      	add	sp, #28
90017cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017cd8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017cdc:	b085      	sub	sp, #20
90017cde:	468b      	mov	fp, r1
90017ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017ce4:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017ce6:	9203      	str	r2, [sp, #12]
90017ce8:	6841      	ldr	r1, [r0, #4]
90017cea:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90017cee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017cf2:	fb01 2404 	mla	r4, r1, r4, r2
90017cf6:	6802      	ldr	r2, [r0, #0]
90017cf8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017cfc:	f8d8 2000 	ldr.w	r2, [r8]
90017d00:	9201      	str	r2, [sp, #4]
90017d02:	f1bb 0f00 	cmp.w	fp, #0
90017d06:	dc03      	bgt.n	90017d10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017d08:	9a03      	ldr	r2, [sp, #12]
90017d0a:	2a00      	cmp	r2, #0
90017d0c:	f340 814f 	ble.w	90017fae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90017d10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017d12:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90017d16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017d1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017d1c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90017d20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017d24:	2b00      	cmp	r3, #0
90017d26:	dd0e      	ble.n	90017d46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017d28:	1408      	asrs	r0, r1, #16
90017d2a:	d405      	bmi.n	90017d38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017d2c:	42b8      	cmp	r0, r7
90017d2e:	da03      	bge.n	90017d38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017d30:	1410      	asrs	r0, r2, #16
90017d32:	d401      	bmi.n	90017d38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017d34:	42b0      	cmp	r0, r6
90017d36:	db07      	blt.n	90017d48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017d38:	9811      	ldr	r0, [sp, #68]	; 0x44
90017d3a:	3b01      	subs	r3, #1
90017d3c:	3402      	adds	r4, #2
90017d3e:	4401      	add	r1, r0
90017d40:	9812      	ldr	r0, [sp, #72]	; 0x48
90017d42:	4402      	add	r2, r0
90017d44:	e7ee      	b.n	90017d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90017d46:	d017      	beq.n	90017d78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017d48:	1e58      	subs	r0, r3, #1
90017d4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90017d4c:	fb05 1500 	mla	r5, r5, r0, r1
90017d50:	142d      	asrs	r5, r5, #16
90017d52:	d409      	bmi.n	90017d68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017d54:	42bd      	cmp	r5, r7
90017d56:	da07      	bge.n	90017d68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017d58:	9d12      	ldr	r5, [sp, #72]	; 0x48
90017d5a:	fb05 2000 	mla	r0, r5, r0, r2
90017d5e:	1400      	asrs	r0, r0, #16
90017d60:	d402      	bmi.n	90017d68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017d62:	42b0      	cmp	r0, r6
90017d64:	f2c0 80ba 	blt.w	90017edc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90017d68:	2600      	movs	r6, #0
90017d6a:	1998      	adds	r0, r3, r6
90017d6c:	2800      	cmp	r0, #0
90017d6e:	dc3e      	bgt.n	90017dee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90017d70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017d74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017d78:	f1bb 0f00 	cmp.w	fp, #0
90017d7c:	f340 8117 	ble.w	90017fae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90017d80:	ee30 0a04 	vadd.f32	s0, s0, s8
90017d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017d86:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017d8a:	f1bb 0b01 	subs.w	fp, fp, #1
90017d8e:	eeb0 6a62 	vmov.f32	s12, s5
90017d92:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017d96:	ee31 1a05 	vadd.f32	s2, s2, s10
90017d9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017d9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017da2:	eeb0 6a43 	vmov.f32	s12, s6
90017da6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017daa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017dae:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017db2:	ee61 7a27 	vmul.f32	s15, s2, s15
90017db6:	ee77 2a62 	vsub.f32	s5, s14, s5
90017dba:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017dbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017dc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017dc6:	ee12 2a90 	vmov	r2, s5
90017dca:	eef0 2a47 	vmov.f32	s5, s14
90017dce:	fb92 f3f3 	sdiv	r3, r2, r3
90017dd2:	ee13 2a10 	vmov	r2, s6
90017dd6:	9311      	str	r3, [sp, #68]	; 0x44
90017dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017dda:	eeb0 3a67 	vmov.f32	s6, s15
90017dde:	fb92 f3f3 	sdiv	r3, r2, r3
90017de2:	9a03      	ldr	r2, [sp, #12]
90017de4:	9312      	str	r3, [sp, #72]	; 0x48
90017de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017de8:	bf08      	it	eq
90017dea:	4613      	moveq	r3, r2
90017dec:	e789      	b.n	90017d02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90017dee:	140f      	asrs	r7, r1, #16
90017df0:	d424      	bmi.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017df2:	f8d8 5008 	ldr.w	r5, [r8, #8]
90017df6:	42bd      	cmp	r5, r7
90017df8:	dd20      	ble.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017dfa:	ea5f 4c22 	movs.w	ip, r2, asr #16
90017dfe:	d41d      	bmi.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017e00:	f8d8 000c 	ldr.w	r0, [r8, #12]
90017e04:	4560      	cmp	r0, ip
90017e06:	dd19      	ble.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017e08:	b22d      	sxth	r5, r5
90017e0a:	9801      	ldr	r0, [sp, #4]
90017e0c:	fb0c 7505 	mla	r5, ip, r5, r7
90017e10:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
90017e14:	0e07      	lsrs	r7, r0, #24
90017e16:	2fff      	cmp	r7, #255	; 0xff
90017e18:	d116      	bne.n	90017e48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90017e1a:	f06f 0501 	mvn.w	r5, #1
90017e1e:	fb05 f706 	mul.w	r7, r5, r6
90017e22:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90017e26:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90017e2a:	0945      	lsrs	r5, r0, #5
90017e2c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90017e30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90017e34:	ea4c 0505 	orr.w	r5, ip, r5
90017e38:	4305      	orrs	r5, r0
90017e3a:	53e5      	strh	r5, [r4, r7]
90017e3c:	9811      	ldr	r0, [sp, #68]	; 0x44
90017e3e:	3e01      	subs	r6, #1
90017e40:	4401      	add	r1, r0
90017e42:	9812      	ldr	r0, [sp, #72]	; 0x48
90017e44:	4402      	add	r2, r0
90017e46:	e790      	b.n	90017d6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017e48:	b2fd      	uxtb	r5, r7
90017e4a:	2f00      	cmp	r7, #0
90017e4c:	d0f6      	beq.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017e4e:	f06f 0701 	mvn.w	r7, #1
90017e52:	fa1f f985 	uxth.w	r9, r5
90017e56:	43ed      	mvns	r5, r5
90017e58:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90017e5c:	4377      	muls	r7, r6
90017e5e:	fb1a fa09 	smulbb	sl, sl, r9
90017e62:	b2ed      	uxtb	r5, r5
90017e64:	f834 e007 	ldrh.w	lr, [r4, r7]
90017e68:	9702      	str	r7, [sp, #8]
90017e6a:	f3c0 4707 	ubfx	r7, r0, #16, #8
90017e6e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017e72:	fb17 f709 	smulbb	r7, r7, r9
90017e76:	b2c0      	uxtb	r0, r0
90017e78:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017e7c:	fb10 f009 	smulbb	r0, r0, r9
90017e80:	fb0c 7c05 	mla	ip, ip, r5, r7
90017e84:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017e88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017e8c:	fa1f fc8c 	uxth.w	ip, ip
90017e90:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017e94:	fa5f fe8e 	uxtb.w	lr, lr
90017e98:	fb07 a705 	mla	r7, r7, r5, sl
90017e9c:	fb0e 0005 	mla	r0, lr, r5, r0
90017ea0:	f10c 0501 	add.w	r5, ip, #1
90017ea4:	b2bf      	uxth	r7, r7
90017ea6:	b280      	uxth	r0, r0
90017ea8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017eac:	f100 0a01 	add.w	sl, r0, #1
90017eb0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017eb4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90017eb8:	9802      	ldr	r0, [sp, #8]
90017eba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017ebe:	ea4a 0c0c 	orr.w	ip, sl, ip
90017ec2:	f107 0a01 	add.w	sl, r7, #1
90017ec6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90017eca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017ece:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017ed2:	ea4c 0c0a 	orr.w	ip, ip, sl
90017ed6:	f824 c000 	strh.w	ip, [r4, r0]
90017eda:	e7af      	b.n	90017e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017edc:	f04f 0e00 	mov.w	lr, #0
90017ee0:	eba3 000e 	sub.w	r0, r3, lr
90017ee4:	2800      	cmp	r0, #0
90017ee6:	f77f af43 	ble.w	90017d70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017eea:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90017eee:	140d      	asrs	r5, r1, #16
90017ef0:	1410      	asrs	r0, r2, #16
90017ef2:	fb06 5000 	mla	r0, r6, r0, r5
90017ef6:	9d01      	ldr	r5, [sp, #4]
90017ef8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90017efc:	0e2e      	lsrs	r6, r5, #24
90017efe:	2eff      	cmp	r6, #255	; 0xff
90017f00:	d112      	bne.n	90017f28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
90017f02:	482c      	ldr	r0, [pc, #176]	; (90017fb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
90017f04:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90017f08:	0968      	lsrs	r0, r5, #5
90017f0a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90017f0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90017f12:	4330      	orrs	r0, r6
90017f14:	4328      	orrs	r0, r5
90017f16:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
90017f1a:	9811      	ldr	r0, [sp, #68]	; 0x44
90017f1c:	f10e 0e01 	add.w	lr, lr, #1
90017f20:	4401      	add	r1, r0
90017f22:	9812      	ldr	r0, [sp, #72]	; 0x48
90017f24:	4402      	add	r2, r0
90017f26:	e7db      	b.n	90017ee0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90017f28:	b2f0      	uxtb	r0, r6
90017f2a:	2e00      	cmp	r6, #0
90017f2c:	d0f5      	beq.n	90017f1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90017f2e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90017f32:	fa1f f980 	uxth.w	r9, r0
90017f36:	f3c5 4607 	ubfx	r6, r5, #16, #8
90017f3a:	43c0      	mvns	r0, r0
90017f3c:	ea4f 272c 	mov.w	r7, ip, asr #8
90017f40:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90017f44:	fb16 f609 	smulbb	r6, r6, r9
90017f48:	b2c0      	uxtb	r0, r0
90017f4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017f4e:	b2ed      	uxtb	r5, r5
90017f50:	fb1a fa09 	smulbb	sl, sl, r9
90017f54:	fb07 6700 	mla	r7, r7, r0, r6
90017f58:	ea4f 06ec 	mov.w	r6, ip, asr #3
90017f5c:	fb15 f509 	smulbb	r5, r5, r9
90017f60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90017f64:	b2bf      	uxth	r7, r7
90017f66:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017f6a:	fa5f fc8c 	uxtb.w	ip, ip
90017f6e:	fb06 a600 	mla	r6, r6, r0, sl
90017f72:	fb0c 5500 	mla	r5, ip, r0, r5
90017f76:	1c78      	adds	r0, r7, #1
90017f78:	b2b6      	uxth	r6, r6
90017f7a:	b2ad      	uxth	r5, r5
90017f7c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90017f80:	f105 0a01 	add.w	sl, r5, #1
90017f84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017f88:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017f8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017f90:	ea4a 0707 	orr.w	r7, sl, r7
90017f94:	f106 0a01 	add.w	sl, r6, #1
90017f98:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017f9c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017fa0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017fa4:	ea47 070a 	orr.w	r7, r7, sl
90017fa8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
90017fac:	e7b5      	b.n	90017f1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90017fae:	b005      	add	sp, #20
90017fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017fb4:	fffff800 	.word	0xfffff800

90017fb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017fbc:	b087      	sub	sp, #28
90017fbe:	468b      	mov	fp, r1
90017fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017fc4:	9815      	ldr	r0, [sp, #84]	; 0x54
90017fc6:	9203      	str	r2, [sp, #12]
90017fc8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017fcc:	6841      	ldr	r1, [r0, #4]
90017fce:	9204      	str	r2, [sp, #16]
90017fd0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90017fd4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017fd8:	fb01 2404 	mla	r4, r1, r4, r2
90017fdc:	6802      	ldr	r2, [r0, #0]
90017fde:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017fe2:	f8d9 2008 	ldr.w	r2, [r9, #8]
90017fe6:	3201      	adds	r2, #1
90017fe8:	f022 0201 	bic.w	r2, r2, #1
90017fec:	9200      	str	r2, [sp, #0]
90017fee:	f8d9 2000 	ldr.w	r2, [r9]
90017ff2:	9201      	str	r2, [sp, #4]
90017ff4:	f1bb 0f00 	cmp.w	fp, #0
90017ff8:	dc03      	bgt.n	90018002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90017ffa:	9a03      	ldr	r2, [sp, #12]
90017ffc:	2a00      	cmp	r2, #0
90017ffe:	f340 816a 	ble.w	900182d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90018002:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018004:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90018008:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001800c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001800e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90018012:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018016:	2b00      	cmp	r3, #0
90018018:	dd0e      	ble.n	90018038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001801a:	1402      	asrs	r2, r0, #16
9001801c:	d405      	bmi.n	9001802a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001801e:	42ba      	cmp	r2, r7
90018020:	da03      	bge.n	9001802a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018022:	140a      	asrs	r2, r1, #16
90018024:	d401      	bmi.n	9001802a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018026:	42b2      	cmp	r2, r6
90018028:	db07      	blt.n	9001803a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001802a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001802c:	3b01      	subs	r3, #1
9001802e:	3402      	adds	r4, #2
90018030:	4410      	add	r0, r2
90018032:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018034:	4411      	add	r1, r2
90018036:	e7ee      	b.n	90018016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90018038:	d017      	beq.n	9001806a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001803a:	1e5a      	subs	r2, r3, #1
9001803c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001803e:	fb05 0502 	mla	r5, r5, r2, r0
90018042:	142d      	asrs	r5, r5, #16
90018044:	d409      	bmi.n	9001805a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018046:	42bd      	cmp	r5, r7
90018048:	da07      	bge.n	9001805a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001804a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001804c:	fb05 1202 	mla	r2, r5, r2, r1
90018050:	1412      	asrs	r2, r2, #16
90018052:	d402      	bmi.n	9001805a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018054:	42b2      	cmp	r2, r6
90018056:	f2c0 80c8 	blt.w	900181ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001805a:	2700      	movs	r7, #0
9001805c:	19da      	adds	r2, r3, r7
9001805e:	2a00      	cmp	r2, #0
90018060:	dc3e      	bgt.n	900180e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90018062:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018066:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001806a:	f1bb 0f00 	cmp.w	fp, #0
9001806e:	f340 8132 	ble.w	900182d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90018072:	ee30 0a04 	vadd.f32	s0, s0, s8
90018076:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018078:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001807c:	f1bb 0b01 	subs.w	fp, fp, #1
90018080:	eeb0 6a62 	vmov.f32	s12, s5
90018084:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018088:	ee31 1a05 	vadd.f32	s2, s2, s10
9001808c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018090:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018094:	eeb0 6a43 	vmov.f32	s12, s6
90018098:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001809c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900180a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900180a4:	ee61 7a27 	vmul.f32	s15, s2, s15
900180a8:	ee77 2a62 	vsub.f32	s5, s14, s5
900180ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
900180b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900180b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900180b8:	ee12 2a90 	vmov	r2, s5
900180bc:	eef0 2a47 	vmov.f32	s5, s14
900180c0:	fb92 f3f3 	sdiv	r3, r2, r3
900180c4:	ee13 2a10 	vmov	r2, s6
900180c8:	9313      	str	r3, [sp, #76]	; 0x4c
900180ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180cc:	eeb0 3a67 	vmov.f32	s6, s15
900180d0:	fb92 f3f3 	sdiv	r3, r2, r3
900180d4:	9a03      	ldr	r2, [sp, #12]
900180d6:	9314      	str	r3, [sp, #80]	; 0x50
900180d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180da:	bf08      	it	eq
900180dc:	4613      	moveq	r3, r2
900180de:	e789      	b.n	90017ff4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900180e0:	1405      	asrs	r5, r0, #16
900180e2:	d436      	bmi.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900180e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
900180e8:	42aa      	cmp	r2, r5
900180ea:	dd32      	ble.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900180ec:	140e      	asrs	r6, r1, #16
900180ee:	d430      	bmi.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900180f0:	f8d9 200c 	ldr.w	r2, [r9, #12]
900180f4:	42b2      	cmp	r2, r6
900180f6:	dd2c      	ble.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900180f8:	9a00      	ldr	r2, [sp, #0]
900180fa:	fb06 5502 	mla	r5, r6, r2, r5
900180fe:	9e01      	ldr	r6, [sp, #4]
90018100:	086a      	lsrs	r2, r5, #1
90018102:	5cb2      	ldrb	r2, [r6, r2]
90018104:	07ee      	lsls	r6, r5, #31
90018106:	bf54      	ite	pl
90018108:	f002 020f 	andpl.w	r2, r2, #15
9001810c:	1112      	asrmi	r2, r2, #4
9001810e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90018112:	b2d2      	uxtb	r2, r2
90018114:	b1ea      	cbz	r2, 90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90018116:	9d04      	ldr	r5, [sp, #16]
90018118:	436a      	muls	r2, r5
9001811a:	1c55      	adds	r5, r2, #1
9001811c:	eb05 2222 	add.w	r2, r5, r2, asr #8
90018120:	4d6e      	ldr	r5, [pc, #440]	; (900182dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90018122:	1212      	asrs	r2, r2, #8
90018124:	682d      	ldr	r5, [r5, #0]
90018126:	2aff      	cmp	r2, #255	; 0xff
90018128:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001812c:	9605      	str	r6, [sp, #20]
9001812e:	d116      	bne.n	9001815e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
90018130:	f06f 0201 	mvn.w	r2, #1
90018134:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90018138:	fb02 fc07 	mul.w	ip, r2, r7
9001813c:	096a      	lsrs	r2, r5, #5
9001813e:	f026 0607 	bic.w	r6, r6, #7
90018142:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90018146:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001814a:	4316      	orrs	r6, r2
9001814c:	432e      	orrs	r6, r5
9001814e:	f824 600c 	strh.w	r6, [r4, ip]
90018152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018154:	3f01      	subs	r7, #1
90018156:	4410      	add	r0, r2
90018158:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001815a:	4411      	add	r1, r2
9001815c:	e77e      	b.n	9001805c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001815e:	f06f 0601 	mvn.w	r6, #1
90018162:	fa1f fa82 	uxth.w	sl, r2
90018166:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001816a:	43d2      	mvns	r2, r2
9001816c:	437e      	muls	r6, r7
9001816e:	b2ed      	uxtb	r5, r5
90018170:	fb1c fc0a 	smulbb	ip, ip, sl
90018174:	b2d2      	uxtb	r2, r2
90018176:	f834 8006 	ldrh.w	r8, [r4, r6]
9001817a:	fb15 f50a 	smulbb	r5, r5, sl
9001817e:	9602      	str	r6, [sp, #8]
90018180:	ea4f 2e28 	mov.w	lr, r8, asr #8
90018184:	f89d 6014 	ldrb.w	r6, [sp, #20]
90018188:	fb16 f60a 	smulbb	r6, r6, sl
9001818c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90018190:	fb0e ce02 	mla	lr, lr, r2, ip
90018194:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90018198:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001819c:	fa1f fe8e 	uxth.w	lr, lr
900181a0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900181a4:	fa5f f888 	uxtb.w	r8, r8
900181a8:	fb0c 6c02 	mla	ip, ip, r2, r6
900181ac:	fb08 5502 	mla	r5, r8, r2, r5
900181b0:	f10e 0201 	add.w	r2, lr, #1
900181b4:	fa1f fc8c 	uxth.w	ip, ip
900181b8:	b2ad      	uxth	r5, r5
900181ba:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900181be:	9a02      	ldr	r2, [sp, #8]
900181c0:	1c6e      	adds	r6, r5, #1
900181c2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900181c6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
900181ca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900181ce:	ea46 0e0e 	orr.w	lr, r6, lr
900181d2:	f10c 0601 	add.w	r6, ip, #1
900181d6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900181da:	0976      	lsrs	r6, r6, #5
900181dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900181e0:	ea4e 0e06 	orr.w	lr, lr, r6
900181e4:	f824 e002 	strh.w	lr, [r4, r2]
900181e8:	e7b3      	b.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181ea:	f04f 0800 	mov.w	r8, #0
900181ee:	eba3 0208 	sub.w	r2, r3, r8
900181f2:	2a00      	cmp	r2, #0
900181f4:	f77f af35 	ble.w	90018062 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900181f8:	1402      	asrs	r2, r0, #16
900181fa:	9e00      	ldr	r6, [sp, #0]
900181fc:	140d      	asrs	r5, r1, #16
900181fe:	fb06 2505 	mla	r5, r6, r5, r2
90018202:	9e01      	ldr	r6, [sp, #4]
90018204:	086a      	lsrs	r2, r5, #1
90018206:	07ed      	lsls	r5, r5, #31
90018208:	5cb2      	ldrb	r2, [r6, r2]
9001820a:	bf54      	ite	pl
9001820c:	f002 020f 	andpl.w	r2, r2, #15
90018210:	1112      	asrmi	r2, r2, #4
90018212:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90018216:	b2d2      	uxtb	r2, r2
90018218:	b1c2      	cbz	r2, 9001824c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001821a:	9d04      	ldr	r5, [sp, #16]
9001821c:	436a      	muls	r2, r5
9001821e:	1c55      	adds	r5, r2, #1
90018220:	eb05 2222 	add.w	r2, r5, r2, asr #8
90018224:	4d2d      	ldr	r5, [pc, #180]	; (900182dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90018226:	1212      	asrs	r2, r2, #8
90018228:	682e      	ldr	r6, [r5, #0]
9001822a:	2aff      	cmp	r2, #255	; 0xff
9001822c:	ea4f 2516 	mov.w	r5, r6, lsr #8
90018230:	d113      	bne.n	9001825a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90018232:	0972      	lsrs	r2, r6, #5
90018234:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90018238:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001823c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018240:	f025 0507 	bic.w	r5, r5, #7
90018244:	4315      	orrs	r5, r2
90018246:	4335      	orrs	r5, r6
90018248:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001824c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001824e:	f108 0801 	add.w	r8, r8, #1
90018252:	4410      	add	r0, r2
90018254:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018256:	4411      	add	r1, r2
90018258:	e7c9      	b.n	900181ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001825a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001825e:	fa1f fa82 	uxth.w	sl, r2
90018262:	f3c6 4707 	ubfx	r7, r6, #16, #8
90018266:	43d2      	mvns	r2, r2
90018268:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001826c:	fb17 f70a 	smulbb	r7, r7, sl
90018270:	b2d2      	uxtb	r2, r2
90018272:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018276:	b2f6      	uxtb	r6, r6
90018278:	b2ed      	uxtb	r5, r5
9001827a:	fb0c 7c02 	mla	ip, ip, r2, r7
9001827e:	ea4f 07ee 	mov.w	r7, lr, asr #3
90018282:	fb16 f60a 	smulbb	r6, r6, sl
90018286:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001828a:	fa1f fc8c 	uxth.w	ip, ip
9001828e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018292:	fb15 f50a 	smulbb	r5, r5, sl
90018296:	fa5f fe8e 	uxtb.w	lr, lr
9001829a:	fb0e 6602 	mla	r6, lr, r2, r6
9001829e:	fb07 5702 	mla	r7, r7, r2, r5
900182a2:	f10c 0201 	add.w	r2, ip, #1
900182a6:	b2b6      	uxth	r6, r6
900182a8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
900182ac:	1c75      	adds	r5, r6, #1
900182ae:	b2bf      	uxth	r7, r7
900182b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900182b4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
900182b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900182bc:	ea45 0c0c 	orr.w	ip, r5, ip
900182c0:	1c7d      	adds	r5, r7, #1
900182c2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
900182c6:	096d      	lsrs	r5, r5, #5
900182c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900182cc:	ea4c 0c05 	orr.w	ip, ip, r5
900182d0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
900182d4:	e7ba      	b.n	9001824c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900182d6:	b007      	add	sp, #28
900182d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900182dc:	24026214 	.word	0x24026214

900182e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900182e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900182e4:	b087      	sub	sp, #28
900182e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900182ea:	f8df 8308 	ldr.w	r8, [pc, #776]	; 900185f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
900182ee:	9815      	ldr	r0, [sp, #84]	; 0x54
900182f0:	9101      	str	r1, [sp, #4]
900182f2:	9205      	str	r2, [sp, #20]
900182f4:	6841      	ldr	r1, [r0, #4]
900182f6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
900182fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900182fe:	fb01 2404 	mla	r4, r1, r4, r2
90018302:	6802      	ldr	r2, [r0, #0]
90018304:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018308:	f8db 2008 	ldr.w	r2, [fp, #8]
9001830c:	3201      	adds	r2, #1
9001830e:	f022 0201 	bic.w	r2, r2, #1
90018312:	9202      	str	r2, [sp, #8]
90018314:	f8db 2000 	ldr.w	r2, [fp]
90018318:	9203      	str	r2, [sp, #12]
9001831a:	9a01      	ldr	r2, [sp, #4]
9001831c:	2a00      	cmp	r2, #0
9001831e:	dc03      	bgt.n	90018328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90018320:	9a05      	ldr	r2, [sp, #20]
90018322:	2a00      	cmp	r2, #0
90018324:	f340 8162 	ble.w	900185ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90018328:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001832a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001832e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018332:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018334:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
90018338:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001833c:	2b00      	cmp	r3, #0
9001833e:	dd0e      	ble.n	9001835e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018340:	1402      	asrs	r2, r0, #16
90018342:	d405      	bmi.n	90018350 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018344:	42ba      	cmp	r2, r7
90018346:	da03      	bge.n	90018350 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018348:	140a      	asrs	r2, r1, #16
9001834a:	d401      	bmi.n	90018350 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001834c:	42b2      	cmp	r2, r6
9001834e:	db07      	blt.n	90018360 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90018350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018352:	3b01      	subs	r3, #1
90018354:	3402      	adds	r4, #2
90018356:	4410      	add	r0, r2
90018358:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001835a:	4411      	add	r1, r2
9001835c:	e7ee      	b.n	9001833c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001835e:	d017      	beq.n	90018390 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90018360:	1e5a      	subs	r2, r3, #1
90018362:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90018364:	fb05 0502 	mla	r5, r5, r2, r0
90018368:	142d      	asrs	r5, r5, #16
9001836a:	d409      	bmi.n	90018380 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001836c:	42bd      	cmp	r5, r7
9001836e:	da07      	bge.n	90018380 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018370:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018372:	fb05 1202 	mla	r2, r5, r2, r1
90018376:	1412      	asrs	r2, r2, #16
90018378:	d402      	bmi.n	90018380 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001837a:	42b2      	cmp	r2, r6
9001837c:	f2c0 80c3 	blt.w	90018506 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90018380:	2500      	movs	r5, #0
90018382:	195a      	adds	r2, r3, r5
90018384:	2a00      	cmp	r2, #0
90018386:	dc3f      	bgt.n	90018408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90018388:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001838c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018390:	9b01      	ldr	r3, [sp, #4]
90018392:	2b00      	cmp	r3, #0
90018394:	f340 812a 	ble.w	900185ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90018398:	ee30 0a04 	vadd.f32	s0, s0, s8
9001839c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001839e:	ee70 0aa4 	vadd.f32	s1, s1, s9
900183a2:	eeb0 6a62 	vmov.f32	s12, s5
900183a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900183aa:	ee31 1a05 	vadd.f32	s2, s2, s10
900183ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900183b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900183b6:	eeb0 6a43 	vmov.f32	s12, s6
900183ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900183be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900183c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900183c6:	ee61 7a27 	vmul.f32	s15, s2, s15
900183ca:	ee77 2a62 	vsub.f32	s5, s14, s5
900183ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
900183d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900183d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900183da:	ee12 2a90 	vmov	r2, s5
900183de:	eef0 2a47 	vmov.f32	s5, s14
900183e2:	fb92 f3f3 	sdiv	r3, r2, r3
900183e6:	ee13 2a10 	vmov	r2, s6
900183ea:	9313      	str	r3, [sp, #76]	; 0x4c
900183ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
900183ee:	eeb0 3a67 	vmov.f32	s6, s15
900183f2:	fb92 f3f3 	sdiv	r3, r2, r3
900183f6:	9314      	str	r3, [sp, #80]	; 0x50
900183f8:	9b01      	ldr	r3, [sp, #4]
900183fa:	9a05      	ldr	r2, [sp, #20]
900183fc:	3b01      	subs	r3, #1
900183fe:	9301      	str	r3, [sp, #4]
90018400:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018402:	bf08      	it	eq
90018404:	4613      	moveq	r3, r2
90018406:	e788      	b.n	9001831a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90018408:	1406      	asrs	r6, r0, #16
9001840a:	d42c      	bmi.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001840c:	f8db 2008 	ldr.w	r2, [fp, #8]
90018410:	42b2      	cmp	r2, r6
90018412:	dd28      	ble.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018414:	140f      	asrs	r7, r1, #16
90018416:	d426      	bmi.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018418:	f8db 200c 	ldr.w	r2, [fp, #12]
9001841c:	42ba      	cmp	r2, r7
9001841e:	dd22      	ble.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018420:	9a02      	ldr	r2, [sp, #8]
90018422:	fb07 6602 	mla	r6, r7, r2, r6
90018426:	9f03      	ldr	r7, [sp, #12]
90018428:	0872      	lsrs	r2, r6, #1
9001842a:	07f6      	lsls	r6, r6, #31
9001842c:	5cba      	ldrb	r2, [r7, r2]
9001842e:	bf54      	ite	pl
90018430:	f002 020f 	andpl.w	r2, r2, #15
90018434:	1112      	asrmi	r2, r2, #4
90018436:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001843a:	b2d2      	uxtb	r2, r2
9001843c:	2aff      	cmp	r2, #255	; 0xff
9001843e:	d118      	bne.n	90018472 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
90018440:	f06f 0601 	mvn.w	r6, #1
90018444:	f8d8 2000 	ldr.w	r2, [r8]
90018448:	fb06 f705 	mul.w	r7, r6, r5
9001844c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90018450:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
90018454:	0956      	lsrs	r6, r2, #5
90018456:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001845a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001845e:	ea4c 0606 	orr.w	r6, ip, r6
90018462:	4316      	orrs	r6, r2
90018464:	53e6      	strh	r6, [r4, r7]
90018466:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018468:	3d01      	subs	r5, #1
9001846a:	4410      	add	r0, r2
9001846c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001846e:	4411      	add	r1, r2
90018470:	e787      	b.n	90018382 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018472:	2a00      	cmp	r2, #0
90018474:	d0f7      	beq.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018476:	f06f 0601 	mvn.w	r6, #1
9001847a:	f8d8 c000 	ldr.w	ip, [r8]
9001847e:	fa1f f982 	uxth.w	r9, r2
90018482:	43d2      	mvns	r2, r2
90018484:	436e      	muls	r6, r5
90018486:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001848a:	b2d2      	uxtb	r2, r2
9001848c:	f834 e006 	ldrh.w	lr, [r4, r6]
90018490:	fb1a fa09 	smulbb	sl, sl, r9
90018494:	9604      	str	r6, [sp, #16]
90018496:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001849a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001849e:	fb16 f609 	smulbb	r6, r6, r9
900184a2:	fa5f fc8c 	uxtb.w	ip, ip
900184a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900184aa:	fb1c fc09 	smulbb	ip, ip, r9
900184ae:	fb07 6702 	mla	r7, r7, r2, r6
900184b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
900184b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900184ba:	b2bf      	uxth	r7, r7
900184bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900184c0:	fa5f fe8e 	uxtb.w	lr, lr
900184c4:	fb06 a602 	mla	r6, r6, r2, sl
900184c8:	fb0e cc02 	mla	ip, lr, r2, ip
900184cc:	1c7a      	adds	r2, r7, #1
900184ce:	b2b6      	uxth	r6, r6
900184d0:	fa1f fc8c 	uxth.w	ip, ip
900184d4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900184d8:	9a04      	ldr	r2, [sp, #16]
900184da:	f10c 0a01 	add.w	sl, ip, #1
900184de:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900184e2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
900184e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900184ea:	ea4a 0707 	orr.w	r7, sl, r7
900184ee:	f106 0a01 	add.w	sl, r6, #1
900184f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900184f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900184fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900184fe:	ea47 070a 	orr.w	r7, r7, sl
90018502:	52a7      	strh	r7, [r4, r2]
90018504:	e7af      	b.n	90018466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018506:	f04f 0e00 	mov.w	lr, #0
9001850a:	eba3 020e 	sub.w	r2, r3, lr
9001850e:	2a00      	cmp	r2, #0
90018510:	f77f af3a 	ble.w	90018388 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018514:	1402      	asrs	r2, r0, #16
90018516:	9e02      	ldr	r6, [sp, #8]
90018518:	140d      	asrs	r5, r1, #16
9001851a:	fb06 2505 	mla	r5, r6, r5, r2
9001851e:	9e03      	ldr	r6, [sp, #12]
90018520:	086a      	lsrs	r2, r5, #1
90018522:	07ed      	lsls	r5, r5, #31
90018524:	5cb2      	ldrb	r2, [r6, r2]
90018526:	bf54      	ite	pl
90018528:	f002 020f 	andpl.w	r2, r2, #15
9001852c:	1112      	asrmi	r2, r2, #4
9001852e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90018532:	b2d2      	uxtb	r2, r2
90018534:	2aff      	cmp	r2, #255	; 0xff
90018536:	d115      	bne.n	90018564 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
90018538:	f8d8 5000 	ldr.w	r5, [r8]
9001853c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
90018540:	ea02 2615 	and.w	r6, r2, r5, lsr #8
90018544:	096a      	lsrs	r2, r5, #5
90018546:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001854a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001854e:	4332      	orrs	r2, r6
90018550:	432a      	orrs	r2, r5
90018552:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
90018556:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018558:	f10e 0e01 	add.w	lr, lr, #1
9001855c:	4410      	add	r0, r2
9001855e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018560:	4411      	add	r1, r2
90018562:	e7d2      	b.n	9001850a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90018564:	2a00      	cmp	r2, #0
90018566:	d0f6      	beq.n	90018556 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90018568:	f8d8 7000 	ldr.w	r7, [r8]
9001856c:	fa1f f982 	uxth.w	r9, r2
90018570:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90018574:	43d2      	mvns	r2, r2
90018576:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001857a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001857e:	ea4f 262c 	mov.w	r6, ip, asr #8
90018582:	fb15 f509 	smulbb	r5, r5, r9
90018586:	b2d2      	uxtb	r2, r2
90018588:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001858c:	b2ff      	uxtb	r7, r7
9001858e:	fb1a fa09 	smulbb	sl, sl, r9
90018592:	fb06 5602 	mla	r6, r6, r2, r5
90018596:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001859a:	fb17 f709 	smulbb	r7, r7, r9
9001859e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900185a2:	b2b6      	uxth	r6, r6
900185a4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900185a8:	fa5f fc8c 	uxtb.w	ip, ip
900185ac:	fb05 a502 	mla	r5, r5, r2, sl
900185b0:	fb0c 7702 	mla	r7, ip, r2, r7
900185b4:	1c72      	adds	r2, r6, #1
900185b6:	b2ad      	uxth	r5, r5
900185b8:	b2bf      	uxth	r7, r7
900185ba:	eb02 2616 	add.w	r6, r2, r6, lsr #8
900185be:	f107 0a01 	add.w	sl, r7, #1
900185c2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
900185c6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900185ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900185ce:	ea4a 0606 	orr.w	r6, sl, r6
900185d2:	f105 0a01 	add.w	sl, r5, #1
900185d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900185da:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900185de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900185e2:	ea46 060a 	orr.w	r6, r6, sl
900185e6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
900185ea:	e7b4      	b.n	90018556 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
900185ec:	b007      	add	sp, #28
900185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900185f2:	bf00      	nop
900185f4:	24026214 	.word	0x24026214

900185f8 <_ZN8touchgfx8LCD16bppD1Ev>:
900185f8:	4770      	bx	lr

900185fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
900185fa:	4770      	bx	lr

900185fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
900185fc:	4770      	bx	lr

900185fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
900185fe:	4770      	bx	lr

90018600 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
90018600:	4770      	bx	lr

90018602 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90018602:	4770      	bx	lr

90018604 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90018604:	4770      	bx	lr

90018606 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90018606:	4770      	bx	lr

90018608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90018608:	4770      	bx	lr

9001860a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001860a:	4770      	bx	lr

9001860c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001860c:	4770      	bx	lr

9001860e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001860e:	4770      	bx	lr

90018610 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
90018610:	4770      	bx	lr

90018612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90018612:	4770      	bx	lr

90018614 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90018614:	4770      	bx	lr

90018616 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90018616:	4770      	bx	lr

90018618 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
90018618:	4770      	bx	lr

9001861a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001861a:	4770      	bx	lr

9001861c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001861c:	4770      	bx	lr

9001861e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001861e:	4770      	bx	lr

90018620 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90018620:	4770      	bx	lr

90018622 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
90018622:	4770      	bx	lr

90018624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
90018624:	4770      	bx	lr

90018626 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
90018626:	4770      	bx	lr

90018628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
90018628:	4770      	bx	lr

9001862a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001862a:	4770      	bx	lr

9001862c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001862c:	4770      	bx	lr

9001862e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001862e:	4770      	bx	lr

90018630 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90018630:	4770      	bx	lr

90018632 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
90018632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90018636:	b088      	sub	sp, #32
90018638:	4606      	mov	r6, r0
9001863a:	4688      	mov	r8, r1
9001863c:	4691      	mov	r9, r2
9001863e:	ac08      	add	r4, sp, #32
90018640:	f824 3d0c 	strh.w	r3, [r4, #-12]!
90018644:	4620      	mov	r0, r4
90018646:	f7fd fc67 	bl	90015f18 <_ZNK8touchgfx6Bitmap7getDataEv>
9001864a:	6833      	ldr	r3, [r6, #0]
9001864c:	4605      	mov	r5, r0
9001864e:	4620      	mov	r0, r4
90018650:	699f      	ldr	r7, [r3, #24]
90018652:	f7fd fb75 	bl	90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>
90018656:	4682      	mov	sl, r0
90018658:	4620      	mov	r0, r4
9001865a:	f7fd fba5 	bl	90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001865e:	9500      	str	r5, [sp, #0]
90018660:	464b      	mov	r3, r9
90018662:	4642      	mov	r2, r8
90018664:	4631      	mov	r1, r6
90018666:	e9cd a001 	strd	sl, r0, [sp, #4]
9001866a:	a806      	add	r0, sp, #24
9001866c:	47b8      	blx	r7
9001866e:	4628      	mov	r0, r5
90018670:	b008      	add	sp, #32
90018672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

90018678 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90018678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001867c:	2300      	movs	r3, #0
9001867e:	9300      	str	r3, [sp, #0]
90018680:	4b3d      	ldr	r3, [pc, #244]	; (90018778 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90018682:	781b      	ldrb	r3, [r3, #0]
90018684:	2b00      	cmp	r3, #0
90018686:	d137      	bne.n	900186f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90018688:	4a3c      	ldr	r2, [pc, #240]	; (9001877c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001868a:	f9b2 2000 	ldrsh.w	r2, [r2]
9001868e:	f8ad 2004 	strh.w	r2, [sp, #4]
90018692:	2b00      	cmp	r3, #0
90018694:	d132      	bne.n	900186fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90018696:	4b3a      	ldr	r3, [pc, #232]	; (90018780 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90018698:	f9b3 3000 	ldrsh.w	r3, [r3]
9001869c:	ac02      	add	r4, sp, #8
9001869e:	6808      	ldr	r0, [r1, #0]
900186a0:	f8ad 3006 	strh.w	r3, [sp, #6]
900186a4:	ab02      	add	r3, sp, #8
900186a6:	6849      	ldr	r1, [r1, #4]
900186a8:	4d36      	ldr	r5, [pc, #216]	; (90018784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
900186aa:	c303      	stmia	r3!, {r0, r1}
900186ac:	4669      	mov	r1, sp
900186ae:	4620      	mov	r0, r4
900186b0:	f7fa f9d2 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900186b4:	4668      	mov	r0, sp
900186b6:	f7fa f9a7 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900186ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900186be:	f8bd 2000 	ldrh.w	r2, [sp]
900186c2:	462f      	mov	r7, r5
900186c4:	6828      	ldr	r0, [r5, #0]
900186c6:	4413      	add	r3, r2
900186c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
900186cc:	f8ad 3008 	strh.w	r3, [sp, #8]
900186d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900186d4:	4413      	add	r3, r2
900186d6:	f8ad 300a 	strh.w	r3, [sp, #10]
900186da:	6803      	ldr	r3, [r0, #0]
900186dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900186de:	4798      	blx	r3
900186e0:	f010 0f01 	tst.w	r0, #1
900186e4:	d00c      	beq.n	90018700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
900186e6:	6828      	ldr	r0, [r5, #0]
900186e8:	6803      	ldr	r3, [r0, #0]
900186ea:	e894 0006 	ldmia.w	r4, {r1, r2}
900186ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900186f0:	4798      	blx	r3
900186f2:	b004      	add	sp, #16
900186f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900186f8:	4a21      	ldr	r2, [pc, #132]	; (90018780 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
900186fa:	e7c6      	b.n	9001868a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
900186fc:	4b1f      	ldr	r3, [pc, #124]	; (9001877c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
900186fe:	e7cb      	b.n	90018698 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
90018700:	6838      	ldr	r0, [r7, #0]
90018702:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90018706:	6803      	ldr	r3, [r0, #0]
90018708:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001870c:	ea4f 0848 	mov.w	r8, r8, lsl #1
90018710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018712:	4798      	blx	r3
90018714:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90018718:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001871c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
90018720:	fb16 3602 	smlabb	r6, r6, r2, r3
90018724:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90018728:	6838      	ldr	r0, [r7, #0]
9001872a:	6803      	ldr	r3, [r0, #0]
9001872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001872e:	4798      	blx	r3
90018730:	4a12      	ldr	r2, [pc, #72]	; (9001877c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90018732:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90018736:	8813      	ldrh	r3, [r2, #0]
90018738:	4691      	mov	r9, r2
9001873a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001873e:	435d      	muls	r5, r3
90018740:	fb03 1404 	mla	r4, r3, r4, r1
90018744:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90018748:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001874c:	6838      	ldr	r0, [r7, #0]
9001874e:	42ac      	cmp	r4, r5
90018750:	6803      	ldr	r3, [r0, #0]
90018752:	d20e      	bcs.n	90018772 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90018754:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90018758:	4632      	mov	r2, r6
9001875a:	4643      	mov	r3, r8
9001875c:	4621      	mov	r1, r4
9001875e:	47d0      	blx	sl
90018760:	f8b9 3000 	ldrh.w	r3, [r9]
90018764:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018768:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001876c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90018770:	e7ec      	b.n	9001874c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90018772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018774:	4798      	blx	r3
90018776:	e7bc      	b.n	900186f2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90018778:	24026204 	.word	0x24026204
9001877c:	24026206 	.word	0x24026206
90018780:	24026208 	.word	0x24026208
90018784:	2402620c 	.word	0x2402620c

90018788 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001878c:	b08b      	sub	sp, #44	; 0x2c
9001878e:	460f      	mov	r7, r1
90018790:	4616      	mov	r6, r2
90018792:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90018796:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001879a:	f1bb 0f00 	cmp.w	fp, #0
9001879e:	d049      	beq.n	90018834 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
900187a0:	6810      	ldr	r0, [r2, #0]
900187a2:	ad06      	add	r5, sp, #24
900187a4:	6851      	ldr	r1, [r2, #4]
900187a6:	c503      	stmia	r5!, {r0, r1}
900187a8:	6818      	ldr	r0, [r3, #0]
900187aa:	ad08      	add	r5, sp, #32
900187ac:	6859      	ldr	r1, [r3, #4]
900187ae:	c503      	stmia	r5!, {r0, r1}
900187b0:	a806      	add	r0, sp, #24
900187b2:	f7fa f929 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900187b6:	4631      	mov	r1, r6
900187b8:	a808      	add	r0, sp, #32
900187ba:	f7fa f94d 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900187be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
900187c2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
900187c6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
900187ca:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
900187ce:	fb16 2103 	smlabb	r1, r6, r3, r2
900187d2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
900187d6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
900187da:	f8bd 1018 	ldrh.w	r1, [sp, #24]
900187de:	4f5f      	ldr	r7, [pc, #380]	; (9001895c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
900187e0:	440a      	add	r2, r1
900187e2:	6838      	ldr	r0, [r7, #0]
900187e4:	46b9      	mov	r9, r7
900187e6:	f8ad 2020 	strh.w	r2, [sp, #32]
900187ea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900187ee:	4413      	add	r3, r2
900187f0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900187f4:	6803      	ldr	r3, [r0, #0]
900187f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900187f8:	4798      	blx	r3
900187fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
900187fe:	d01c      	beq.n	9001883a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
90018800:	f010 0f04 	tst.w	r0, #4
90018804:	d01d      	beq.n	90018842 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90018806:	f8d9 0000 	ldr.w	r0, [r9]
9001880a:	2700      	movs	r7, #0
9001880c:	b2ad      	uxth	r5, r5
9001880e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
90018812:	6801      	ldr	r1, [r0, #0]
90018814:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90018818:	f8cd b00c 	str.w	fp, [sp, #12]
9001881c:	9501      	str	r5, [sp, #4]
9001881e:	e9cd 4704 	strd	r4, r7, [sp, #16]
90018822:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90018826:	9402      	str	r4, [sp, #8]
90018828:	fa1f f488 	uxth.w	r4, r8
9001882c:	9400      	str	r4, [sp, #0]
9001882e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
90018830:	4631      	mov	r1, r6
90018832:	47a0      	blx	r4
90018834:	b00b      	add	sp, #44	; 0x2c
90018836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001883a:	b914      	cbnz	r4, 90018842 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001883c:	f010 0f01 	tst.w	r0, #1
90018840:	e7e0      	b.n	90018804 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90018842:	f8d9 0000 	ldr.w	r0, [r9]
90018846:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001884a:	6803      	ldr	r3, [r0, #0]
9001884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001884e:	4798      	blx	r3
90018850:	4b43      	ldr	r3, [pc, #268]	; (90018960 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90018852:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90018856:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001885a:	881a      	ldrh	r2, [r3, #0]
9001885c:	469a      	mov	sl, r3
9001885e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90018862:	fb05 f502 	mul.w	r5, r5, r2
90018866:	fb02 1404 	mla	r4, r2, r4, r1
9001886a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001886e:	d059      	beq.n	90018924 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90018870:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90018874:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018878:	fa1f f28b 	uxth.w	r2, fp
9001887c:	469e      	mov	lr, r3
9001887e:	fa1f f989 	uxth.w	r9, r9
90018882:	42ac      	cmp	r4, r5
90018884:	d264      	bcs.n	90018950 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90018886:	eb04 0a07 	add.w	sl, r4, r7
9001888a:	4554      	cmp	r4, sl
9001888c:	d23d      	bcs.n	9001890a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001888e:	8821      	ldrh	r1, [r4, #0]
90018890:	f836 3b02 	ldrh.w	r3, [r6], #2
90018894:	1208      	asrs	r0, r1, #8
90018896:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001889a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001889e:	ea4f 0be1 	mov.w	fp, r1, asr #3
900188a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900188a6:	00c9      	lsls	r1, r1, #3
900188a8:	fb10 f009 	smulbb	r0, r0, r9
900188ac:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
900188b0:	b2c9      	uxtb	r1, r1
900188b2:	fb0c 0c02 	mla	ip, ip, r2, r0
900188b6:	10d8      	asrs	r0, r3, #3
900188b8:	fb1b fb09 	smulbb	fp, fp, r9
900188bc:	00db      	lsls	r3, r3, #3
900188be:	fa1f fc8c 	uxth.w	ip, ip
900188c2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900188c6:	fb11 f109 	smulbb	r1, r1, r9
900188ca:	b2db      	uxtb	r3, r3
900188cc:	fb00 b002 	mla	r0, r0, r2, fp
900188d0:	f10c 0b01 	add.w	fp, ip, #1
900188d4:	fb03 1302 	mla	r3, r3, r2, r1
900188d8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
900188dc:	b29b      	uxth	r3, r3
900188de:	b280      	uxth	r0, r0
900188e0:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
900188e4:	f103 0c01 	add.w	ip, r3, #1
900188e8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900188ec:	1c43      	adds	r3, r0, #1
900188ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900188f2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900188f6:	0940      	lsrs	r0, r0, #5
900188f8:	ea4c 0c0b 	orr.w	ip, ip, fp
900188fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90018900:	ea4c 0c00 	orr.w	ip, ip, r0
90018904:	f824 cb02 	strh.w	ip, [r4], #2
90018908:	e7bf      	b.n	9001888a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001890a:	f8be 3000 	ldrh.w	r3, [lr]
9001890e:	eba3 0308 	sub.w	r3, r3, r8
90018912:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018916:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001891a:	eba3 0308 	sub.w	r3, r3, r8
9001891e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90018922:	e7ae      	b.n	90018882 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90018924:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018928:	f8d9 0000 	ldr.w	r0, [r9]
9001892c:	42ac      	cmp	r4, r5
9001892e:	6803      	ldr	r3, [r0, #0]
90018930:	d20e      	bcs.n	90018950 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90018932:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
90018936:	4632      	mov	r2, r6
90018938:	463b      	mov	r3, r7
9001893a:	4621      	mov	r1, r4
9001893c:	47c0      	blx	r8
9001893e:	f8ba 3000 	ldrh.w	r3, [sl]
90018942:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018946:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001894a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001894e:	e7eb      	b.n	90018928 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90018950:	4b02      	ldr	r3, [pc, #8]	; (9001895c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90018952:	6818      	ldr	r0, [r3, #0]
90018954:	6803      	ldr	r3, [r0, #0]
90018956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018958:	4798      	blx	r3
9001895a:	e76b      	b.n	90018834 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001895c:	2402620c 	.word	0x2402620c
90018960:	24026206 	.word	0x24026206

90018964 <_ZN8touchgfx8LCD16bppD0Ev>:
90018964:	b510      	push	{r4, lr}
90018966:	4604      	mov	r4, r0
90018968:	2178      	movs	r1, #120	; 0x78
9001896a:	f008 ffca 	bl	90021902 <_ZdlPvj>
9001896e:	4620      	mov	r0, r4
90018970:	bd10      	pop	{r4, pc}

90018972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018972:	b510      	push	{r4, lr}
90018974:	4604      	mov	r4, r0
90018976:	2104      	movs	r1, #4
90018978:	f008 ffc3 	bl	90021902 <_ZdlPvj>
9001897c:	4620      	mov	r0, r4
9001897e:	bd10      	pop	{r4, pc}

90018980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90018980:	b510      	push	{r4, lr}
90018982:	4604      	mov	r4, r0
90018984:	2104      	movs	r1, #4
90018986:	f008 ffbc 	bl	90021902 <_ZdlPvj>
9001898a:	4620      	mov	r0, r4
9001898c:	bd10      	pop	{r4, pc}

9001898e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001898e:	b510      	push	{r4, lr}
90018990:	4604      	mov	r4, r0
90018992:	2104      	movs	r1, #4
90018994:	f008 ffb5 	bl	90021902 <_ZdlPvj>
90018998:	4620      	mov	r0, r4
9001899a:	bd10      	pop	{r4, pc}

9001899c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001899c:	b510      	push	{r4, lr}
9001899e:	4604      	mov	r4, r0
900189a0:	2104      	movs	r1, #4
900189a2:	f008 ffae 	bl	90021902 <_ZdlPvj>
900189a6:	4620      	mov	r0, r4
900189a8:	bd10      	pop	{r4, pc}

900189aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
900189aa:	b510      	push	{r4, lr}
900189ac:	4604      	mov	r4, r0
900189ae:	2104      	movs	r1, #4
900189b0:	f008 ffa7 	bl	90021902 <_ZdlPvj>
900189b4:	4620      	mov	r0, r4
900189b6:	bd10      	pop	{r4, pc}

900189b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
900189b8:	b510      	push	{r4, lr}
900189ba:	4604      	mov	r4, r0
900189bc:	2104      	movs	r1, #4
900189be:	f008 ffa0 	bl	90021902 <_ZdlPvj>
900189c2:	4620      	mov	r0, r4
900189c4:	bd10      	pop	{r4, pc}

900189c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
900189c6:	b510      	push	{r4, lr}
900189c8:	4604      	mov	r4, r0
900189ca:	2104      	movs	r1, #4
900189cc:	f008 ff99 	bl	90021902 <_ZdlPvj>
900189d0:	4620      	mov	r0, r4
900189d2:	bd10      	pop	{r4, pc}

900189d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
900189d4:	b510      	push	{r4, lr}
900189d6:	4604      	mov	r4, r0
900189d8:	2104      	movs	r1, #4
900189da:	f008 ff92 	bl	90021902 <_ZdlPvj>
900189de:	4620      	mov	r0, r4
900189e0:	bd10      	pop	{r4, pc}

900189e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
900189e2:	b510      	push	{r4, lr}
900189e4:	4604      	mov	r4, r0
900189e6:	2104      	movs	r1, #4
900189e8:	f008 ff8b 	bl	90021902 <_ZdlPvj>
900189ec:	4620      	mov	r0, r4
900189ee:	bd10      	pop	{r4, pc}

900189f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
900189f0:	b510      	push	{r4, lr}
900189f2:	4604      	mov	r4, r0
900189f4:	2104      	movs	r1, #4
900189f6:	f008 ff84 	bl	90021902 <_ZdlPvj>
900189fa:	4620      	mov	r0, r4
900189fc:	bd10      	pop	{r4, pc}

900189fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
900189fe:	b510      	push	{r4, lr}
90018a00:	4604      	mov	r4, r0
90018a02:	2104      	movs	r1, #4
90018a04:	f008 ff7d 	bl	90021902 <_ZdlPvj>
90018a08:	4620      	mov	r0, r4
90018a0a:	bd10      	pop	{r4, pc}

90018a0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90018a0c:	b510      	push	{r4, lr}
90018a0e:	4604      	mov	r4, r0
90018a10:	2104      	movs	r1, #4
90018a12:	f008 ff76 	bl	90021902 <_ZdlPvj>
90018a16:	4620      	mov	r0, r4
90018a18:	bd10      	pop	{r4, pc}

90018a1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018a1a:	b510      	push	{r4, lr}
90018a1c:	4604      	mov	r4, r0
90018a1e:	2104      	movs	r1, #4
90018a20:	f008 ff6f 	bl	90021902 <_ZdlPvj>
90018a24:	4620      	mov	r0, r4
90018a26:	bd10      	pop	{r4, pc}

90018a28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90018a28:	b510      	push	{r4, lr}
90018a2a:	4604      	mov	r4, r0
90018a2c:	2104      	movs	r1, #4
90018a2e:	f008 ff68 	bl	90021902 <_ZdlPvj>
90018a32:	4620      	mov	r0, r4
90018a34:	bd10      	pop	{r4, pc}

90018a36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90018a36:	b510      	push	{r4, lr}
90018a38:	4604      	mov	r4, r0
90018a3a:	2104      	movs	r1, #4
90018a3c:	f008 ff61 	bl	90021902 <_ZdlPvj>
90018a40:	4620      	mov	r0, r4
90018a42:	bd10      	pop	{r4, pc}

90018a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018a44:	b510      	push	{r4, lr}
90018a46:	4604      	mov	r4, r0
90018a48:	2104      	movs	r1, #4
90018a4a:	f008 ff5a 	bl	90021902 <_ZdlPvj>
90018a4e:	4620      	mov	r0, r4
90018a50:	bd10      	pop	{r4, pc}

90018a52 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90018a52:	b510      	push	{r4, lr}
90018a54:	4604      	mov	r4, r0
90018a56:	2104      	movs	r1, #4
90018a58:	f008 ff53 	bl	90021902 <_ZdlPvj>
90018a5c:	4620      	mov	r0, r4
90018a5e:	bd10      	pop	{r4, pc}

90018a60 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90018a60:	b510      	push	{r4, lr}
90018a62:	4604      	mov	r4, r0
90018a64:	2104      	movs	r1, #4
90018a66:	f008 ff4c 	bl	90021902 <_ZdlPvj>
90018a6a:	4620      	mov	r0, r4
90018a6c:	bd10      	pop	{r4, pc}

90018a6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018a6e:	b510      	push	{r4, lr}
90018a70:	4604      	mov	r4, r0
90018a72:	2104      	movs	r1, #4
90018a74:	f008 ff45 	bl	90021902 <_ZdlPvj>
90018a78:	4620      	mov	r0, r4
90018a7a:	bd10      	pop	{r4, pc}

90018a7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90018a7c:	b510      	push	{r4, lr}
90018a7e:	4604      	mov	r4, r0
90018a80:	2104      	movs	r1, #4
90018a82:	f008 ff3e 	bl	90021902 <_ZdlPvj>
90018a86:	4620      	mov	r0, r4
90018a88:	bd10      	pop	{r4, pc}

90018a8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90018a8a:	b510      	push	{r4, lr}
90018a8c:	4604      	mov	r4, r0
90018a8e:	2104      	movs	r1, #4
90018a90:	f008 ff37 	bl	90021902 <_ZdlPvj>
90018a94:	4620      	mov	r0, r4
90018a96:	bd10      	pop	{r4, pc}

90018a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018a98:	b510      	push	{r4, lr}
90018a9a:	4604      	mov	r4, r0
90018a9c:	2104      	movs	r1, #4
90018a9e:	f008 ff30 	bl	90021902 <_ZdlPvj>
90018aa2:	4620      	mov	r0, r4
90018aa4:	bd10      	pop	{r4, pc}

90018aa6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018aa6:	b510      	push	{r4, lr}
90018aa8:	4604      	mov	r4, r0
90018aaa:	2104      	movs	r1, #4
90018aac:	f008 ff29 	bl	90021902 <_ZdlPvj>
90018ab0:	4620      	mov	r0, r4
90018ab2:	bd10      	pop	{r4, pc}

90018ab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90018ab4:	b510      	push	{r4, lr}
90018ab6:	4604      	mov	r4, r0
90018ab8:	2104      	movs	r1, #4
90018aba:	f008 ff22 	bl	90021902 <_ZdlPvj>
90018abe:	4620      	mov	r0, r4
90018ac0:	bd10      	pop	{r4, pc}

90018ac2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90018ac2:	b510      	push	{r4, lr}
90018ac4:	4604      	mov	r4, r0
90018ac6:	2104      	movs	r1, #4
90018ac8:	f008 ff1b 	bl	90021902 <_ZdlPvj>
90018acc:	4620      	mov	r0, r4
90018ace:	bd10      	pop	{r4, pc}

90018ad0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90018ad0:	b510      	push	{r4, lr}
90018ad2:	4604      	mov	r4, r0
90018ad4:	2104      	movs	r1, #4
90018ad6:	f008 ff14 	bl	90021902 <_ZdlPvj>
90018ada:	4620      	mov	r0, r4
90018adc:	bd10      	pop	{r4, pc}

90018ade <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
90018ade:	b510      	push	{r4, lr}
90018ae0:	4604      	mov	r4, r0
90018ae2:	2104      	movs	r1, #4
90018ae4:	f008 ff0d 	bl	90021902 <_ZdlPvj>
90018ae8:	4620      	mov	r0, r4
90018aea:	bd10      	pop	{r4, pc}

90018aec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
90018aec:	b510      	push	{r4, lr}
90018aee:	4604      	mov	r4, r0
90018af0:	2104      	movs	r1, #4
90018af2:	f008 ff06 	bl	90021902 <_ZdlPvj>
90018af6:	4620      	mov	r0, r4
90018af8:	bd10      	pop	{r4, pc}
	...

90018afc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
90018afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018b00:	b091      	sub	sp, #68	; 0x44
90018b02:	469b      	mov	fp, r3
90018b04:	4616      	mov	r6, r2
90018b06:	f9b3 2000 	ldrsh.w	r2, [r3]
90018b0a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
90018b0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90018b12:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
90018b16:	4604      	mov	r4, r0
90018b18:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
90018b1c:	4640      	mov	r0, r8
90018b1e:	460d      	mov	r5, r1
90018b20:	4659      	mov	r1, fp
90018b22:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90018b26:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018b2a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
90018b2e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
90018b32:	f7f7 f9df 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90018b36:	4631      	mov	r1, r6
90018b38:	4640      	mov	r0, r8
90018b3a:	f7f7 f9db 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90018b3e:	4b74      	ldr	r3, [pc, #464]	; (90018d10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
90018b40:	8818      	ldrh	r0, [r3, #0]
90018b42:	4b74      	ldr	r3, [pc, #464]	; (90018d14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
90018b44:	b202      	sxth	r2, r0
90018b46:	8819      	ldrh	r1, [r3, #0]
90018b48:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90018b4c:	b20e      	sxth	r6, r1
90018b4e:	2b00      	cmp	r3, #0
90018b50:	da07      	bge.n	90018b62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
90018b52:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018b56:	4463      	add	r3, ip
90018b58:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
90018b5c:	2300      	movs	r3, #0
90018b5e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
90018b62:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90018b66:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
90018b6a:	1ad2      	subs	r2, r2, r3
90018b6c:	4594      	cmp	ip, r2
90018b6e:	bfc4      	itt	gt
90018b70:	1ac2      	subgt	r2, r0, r3
90018b72:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
90018b76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90018b7a:	2a00      	cmp	r2, #0
90018b7c:	da07      	bge.n	90018b8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
90018b7e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
90018b82:	4462      	add	r2, ip
90018b84:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90018b88:	2200      	movs	r2, #0
90018b8a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90018b8e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90018b92:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
90018b96:	eba6 060a 	sub.w	r6, r6, sl
90018b9a:	42b2      	cmp	r2, r6
90018b9c:	bfc4      	itt	gt
90018b9e:	eba1 020a 	subgt.w	r2, r1, sl
90018ba2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
90018ba6:	4a5c      	ldr	r2, [pc, #368]	; (90018d18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
90018ba8:	7812      	ldrb	r2, [r2, #0]
90018baa:	b9a2      	cbnz	r2, 90018bd6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
90018bac:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
90018bb0:	4286      	cmp	r6, r0
90018bb2:	4640      	mov	r0, r8
90018bb4:	9303      	str	r3, [sp, #12]
90018bb6:	bf14      	ite	ne
90018bb8:	2600      	movne	r6, #0
90018bba:	2601      	moveq	r6, #1
90018bbc:	f7f7 f9dd 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90018bc0:	9b03      	ldr	r3, [sp, #12]
90018bc2:	b160      	cbz	r0, 90018bde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
90018bc4:	2300      	movs	r3, #0
90018bc6:	8023      	strh	r3, [r4, #0]
90018bc8:	8063      	strh	r3, [r4, #2]
90018bca:	80a3      	strh	r3, [r4, #4]
90018bcc:	4620      	mov	r0, r4
90018bce:	80e3      	strh	r3, [r4, #6]
90018bd0:	b011      	add	sp, #68	; 0x44
90018bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018bd6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
90018bda:	428e      	cmp	r6, r1
90018bdc:	e7e9      	b.n	90018bb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
90018bde:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90018be2:	a90e      	add	r1, sp, #56	; 0x38
90018be4:	900e      	str	r0, [sp, #56]	; 0x38
90018be6:	a80c      	add	r0, sp, #48	; 0x30
90018be8:	9205      	str	r2, [sp, #20]
90018bea:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
90018bee:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
90018bf2:	9206      	str	r2, [sp, #24]
90018bf4:	f8bb 2000 	ldrh.w	r2, [fp]
90018bf8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
90018bfc:	1a9b      	subs	r3, r3, r2
90018bfe:	b21b      	sxth	r3, r3
90018c00:	9303      	str	r3, [sp, #12]
90018c02:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90018c06:	f8df b118 	ldr.w	fp, [pc, #280]	; 90018d20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
90018c0a:	ebaa 0a03 	sub.w	sl, sl, r3
90018c0e:	fa0f f38a 	sxth.w	r3, sl
90018c12:	9304      	str	r3, [sp, #16]
90018c14:	9b03      	ldr	r3, [sp, #12]
90018c16:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90018c1a:	9b04      	ldr	r3, [sp, #16]
90018c1c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90018c20:	9b05      	ldr	r3, [sp, #20]
90018c22:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90018c26:	9b06      	ldr	r3, [sp, #24]
90018c28:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90018c2c:	f7f9 ff14 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018c30:	4640      	mov	r0, r8
90018c32:	f7f9 fee9 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018c36:	a80e      	add	r0, sp, #56	; 0x38
90018c38:	f7f9 fee6 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018c3c:	4b37      	ldr	r3, [pc, #220]	; (90018d1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
90018c3e:	4628      	mov	r0, r5
90018c40:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
90018c44:	881b      	ldrh	r3, [r3, #0]
90018c46:	9307      	str	r3, [sp, #28]
90018c48:	682b      	ldr	r3, [r5, #0]
90018c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018c4c:	4798      	blx	r3
90018c4e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
90018c52:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90018c56:	4681      	mov	r9, r0
90018c58:	f8db 0000 	ldr.w	r0, [fp]
90018c5c:	fb1a 3305 	smlabb	r3, sl, r5, r3
90018c60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90018c62:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018c66:	6803      	ldr	r3, [r0, #0]
90018c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018c6a:	4798      	blx	r3
90018c6c:	4607      	mov	r7, r0
90018c6e:	f8db 0000 	ldr.w	r0, [fp]
90018c72:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
90018c76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90018c7a:	6803      	ldr	r3, [r0, #0]
90018c7c:	9109      	str	r1, [sp, #36]	; 0x24
90018c7e:	9208      	str	r2, [sp, #32]
90018c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018c82:	4798      	blx	r3
90018c84:	f010 0f01 	tst.w	r0, #1
90018c88:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90018c8c:	d012      	beq.n	90018cb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
90018c8e:	f8db 0000 	ldr.w	r0, [fp]
90018c92:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
90018c96:	6803      	ldr	r3, [r0, #0]
90018c98:	9200      	str	r2, [sp, #0]
90018c9a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90018c9c:	462b      	mov	r3, r5
90018c9e:	e898 0006 	ldmia.w	r8, {r1, r2}
90018ca2:	47b0      	blx	r6
90018ca4:	9b03      	ldr	r3, [sp, #12]
90018ca6:	8023      	strh	r3, [r4, #0]
90018ca8:	9b04      	ldr	r3, [sp, #16]
90018caa:	8063      	strh	r3, [r4, #2]
90018cac:	9b05      	ldr	r3, [sp, #20]
90018cae:	80a3      	strh	r3, [r4, #4]
90018cb0:	9b06      	ldr	r3, [sp, #24]
90018cb2:	e78b      	b.n	90018bcc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
90018cb4:	fb09 f202 	mul.w	r2, r9, r2
90018cb8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
90018cbc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90018cc0:	440f      	add	r7, r1
90018cc2:	b166      	cbz	r6, 90018cde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
90018cc4:	9a07      	ldr	r2, [sp, #28]
90018cc6:	4592      	cmp	sl, r2
90018cc8:	d109      	bne.n	90018cde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
90018cca:	f8db 0000 	ldr.w	r0, [fp]
90018cce:	fb09 f303 	mul.w	r3, r9, r3
90018cd2:	4629      	mov	r1, r5
90018cd4:	6802      	ldr	r2, [r0, #0]
90018cd6:	6b56      	ldr	r6, [r2, #52]	; 0x34
90018cd8:	463a      	mov	r2, r7
90018cda:	47b0      	blx	r6
90018cdc:	e7e2      	b.n	90018ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
90018cde:	fb0a f303 	mul.w	r3, sl, r3
90018ce2:	ea4f 064a 	mov.w	r6, sl, lsl #1
90018ce6:	f8df b038 	ldr.w	fp, [pc, #56]	; 90018d20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
90018cea:	eb05 0843 	add.w	r8, r5, r3, lsl #1
90018cee:	4545      	cmp	r5, r8
90018cf0:	d2d8      	bcs.n	90018ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
90018cf2:	f8db 0000 	ldr.w	r0, [fp]
90018cf6:	4629      	mov	r1, r5
90018cf8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
90018cfc:	4435      	add	r5, r6
90018cfe:	6802      	ldr	r2, [r0, #0]
90018d00:	005b      	lsls	r3, r3, #1
90018d02:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
90018d06:	463a      	mov	r2, r7
90018d08:	47d0      	blx	sl
90018d0a:	444f      	add	r7, r9
90018d0c:	e7ef      	b.n	90018cee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
90018d0e:	bf00      	nop
90018d10:	24026200 	.word	0x24026200
90018d14:	24026202 	.word	0x24026202
90018d18:	24026204 	.word	0x24026204
90018d1c:	24026206 	.word	0x24026206
90018d20:	2402620c 	.word	0x2402620c

90018d24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
90018d24:	b5f0      	push	{r4, r5, r6, r7, lr}
90018d26:	4606      	mov	r6, r0
90018d28:	b087      	sub	sp, #28
90018d2a:	460c      	mov	r4, r1
90018d2c:	4617      	mov	r7, r2
90018d2e:	461d      	mov	r5, r3
90018d30:	b333      	cbz	r3, 90018d80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
90018d32:	4608      	mov	r0, r1
90018d34:	f7f7 f921 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90018d38:	bb10      	cbnz	r0, 90018d80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
90018d3a:	6820      	ldr	r0, [r4, #0]
90018d3c:	ab04      	add	r3, sp, #16
90018d3e:	6861      	ldr	r1, [r4, #4]
90018d40:	4c1b      	ldr	r4, [pc, #108]	; (90018db0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
90018d42:	c303      	stmia	r3!, {r0, r1}
90018d44:	a804      	add	r0, sp, #16
90018d46:	f7f9 fe5f 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018d4a:	6820      	ldr	r0, [r4, #0]
90018d4c:	6803      	ldr	r3, [r0, #0]
90018d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018d50:	4798      	blx	r3
90018d52:	2dff      	cmp	r5, #255	; 0xff
90018d54:	d016      	beq.n	90018d84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
90018d56:	f010 0f08 	tst.w	r0, #8
90018d5a:	6820      	ldr	r0, [r4, #0]
90018d5c:	d015      	beq.n	90018d8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
90018d5e:	2400      	movs	r4, #0
90018d60:	6801      	ldr	r1, [r0, #0]
90018d62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90018d66:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90018d6a:	e9cd 5402 	strd	r5, r4, [sp, #8]
90018d6e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
90018d72:	9401      	str	r4, [sp, #4]
90018d74:	f8bd 4014 	ldrh.w	r4, [sp, #20]
90018d78:	9400      	str	r4, [sp, #0]
90018d7a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
90018d7c:	4639      	mov	r1, r7
90018d7e:	47a0      	blx	r4
90018d80:	b007      	add	sp, #28
90018d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
90018d84:	f010 0f02 	tst.w	r0, #2
90018d88:	e7e7      	b.n	90018d5a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
90018d8a:	6803      	ldr	r3, [r0, #0]
90018d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018d8e:	4798      	blx	r3
90018d90:	4b08      	ldr	r3, [pc, #32]	; (90018db4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
90018d92:	4601      	mov	r1, r0
90018d94:	4630      	mov	r0, r6
90018d96:	881a      	ldrh	r2, [r3, #0]
90018d98:	6833      	ldr	r3, [r6, #0]
90018d9a:	e9cd 7500 	strd	r7, r5, [sp]
90018d9e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90018da0:	ab04      	add	r3, sp, #16
90018da2:	47a8      	blx	r5
90018da4:	6820      	ldr	r0, [r4, #0]
90018da6:	6803      	ldr	r3, [r0, #0]
90018da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018daa:	4798      	blx	r3
90018dac:	e7e8      	b.n	90018d80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
90018dae:	bf00      	nop
90018db0:	2402620c 	.word	0x2402620c
90018db4:	24026206 	.word	0x24026206

90018db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
90018db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90018dbc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
90018dc0:	4688      	mov	r8, r1
90018dc2:	4614      	mov	r4, r2
90018dc4:	461d      	mov	r5, r3
90018dc6:	9e08      	ldr	r6, [sp, #32]
90018dc8:	2f00      	cmp	r7, #0
90018dca:	f000 80ab 	beq.w	90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018dce:	4618      	mov	r0, r3
90018dd0:	f7f7 f8d3 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90018dd4:	2800      	cmp	r0, #0
90018dd6:	f040 80a5 	bne.w	90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018dda:	f9b5 1000 	ldrsh.w	r1, [r5]
90018dde:	2fff      	cmp	r7, #255	; 0xff
90018de0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90018de4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
90018de8:	fb04 1303 	mla	r3, r4, r3, r1
90018dec:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
90018df0:	eba4 0200 	sub.w	r2, r4, r0
90018df4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
90018df8:	fb04 f505 	mul.w	r5, r4, r5
90018dfc:	ea4f 2816 	mov.w	r8, r6, lsr #8
90018e00:	eb01 0545 	add.w	r5, r1, r5, lsl #1
90018e04:	d04a      	beq.n	90018e9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
90018e06:	b2bc      	uxth	r4, r7
90018e08:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
90018e0c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
90018e10:	fa5f f788 	uxtb.w	r7, r8
90018e14:	b2f3      	uxtb	r3, r6
90018e16:	0040      	lsls	r0, r0, #1
90018e18:	fb0e fe04 	mul.w	lr, lr, r4
90018e1c:	4367      	muls	r7, r4
90018e1e:	ea4f 0842 	mov.w	r8, r2, lsl #1
90018e22:	4363      	muls	r3, r4
90018e24:	fa1f fc8c 	uxth.w	ip, ip
90018e28:	42a9      	cmp	r1, r5
90018e2a:	d27b      	bcs.n	90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018e2c:	eb01 0900 	add.w	r9, r1, r0
90018e30:	4549      	cmp	r1, r9
90018e32:	d231      	bcs.n	90018e98 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
90018e34:	880a      	ldrh	r2, [r1, #0]
90018e36:	1214      	asrs	r4, r2, #8
90018e38:	10d6      	asrs	r6, r2, #3
90018e3a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90018e3e:	00d2      	lsls	r2, r2, #3
90018e40:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018e44:	b2d2      	uxtb	r2, r2
90018e46:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
90018e4a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
90018e4e:	fb14 f40c 	smulbb	r4, r4, ip
90018e52:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
90018e56:	fb12 f20c 	smulbb	r2, r2, ip
90018e5a:	fb16 f60c 	smulbb	r6, r6, ip
90018e5e:	4474      	add	r4, lr
90018e60:	441a      	add	r2, r3
90018e62:	b2a4      	uxth	r4, r4
90018e64:	443e      	add	r6, r7
90018e66:	b292      	uxth	r2, r2
90018e68:	f104 0a01 	add.w	sl, r4, #1
90018e6c:	b2b6      	uxth	r6, r6
90018e6e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90018e72:	f102 0a01 	add.w	sl, r2, #1
90018e76:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
90018e7a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90018e7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90018e82:	4322      	orrs	r2, r4
90018e84:	1c74      	adds	r4, r6, #1
90018e86:	eb04 2616 	add.w	r6, r4, r6, lsr #8
90018e8a:	0976      	lsrs	r6, r6, #5
90018e8c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90018e90:	4332      	orrs	r2, r6
90018e92:	f821 2b02 	strh.w	r2, [r1], #2
90018e96:	e7cb      	b.n	90018e30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
90018e98:	4441      	add	r1, r8
90018e9a:	e7c5      	b.n	90018e28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
90018e9c:	0973      	lsrs	r3, r6, #5
90018e9e:	4f22      	ldr	r7, [pc, #136]	; (90018f28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
90018ea0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
90018ea4:	ea08 0707 	and.w	r7, r8, r7
90018ea8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90018eac:	433b      	orrs	r3, r7
90018eae:	07e7      	lsls	r7, r4, #31
90018eb0:	ea43 0306 	orr.w	r3, r3, r6
90018eb4:	b29b      	uxth	r3, r3
90018eb6:	d50b      	bpl.n	90018ed0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
90018eb8:	0040      	lsls	r0, r0, #1
90018eba:	0052      	lsls	r2, r2, #1
90018ebc:	42a9      	cmp	r1, r5
90018ebe:	d231      	bcs.n	90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018ec0:	180c      	adds	r4, r1, r0
90018ec2:	42a1      	cmp	r1, r4
90018ec4:	d202      	bcs.n	90018ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
90018ec6:	f821 3b02 	strh.w	r3, [r1], #2
90018eca:	e7fa      	b.n	90018ec2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
90018ecc:	4411      	add	r1, r2
90018ece:	e7f5      	b.n	90018ebc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
90018ed0:	078e      	lsls	r6, r1, #30
90018ed2:	d008      	beq.n	90018ee6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
90018ed4:	0066      	lsls	r6, r4, #1
90018ed6:	460a      	mov	r2, r1
90018ed8:	42aa      	cmp	r2, r5
90018eda:	d202      	bcs.n	90018ee2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
90018edc:	8013      	strh	r3, [r2, #0]
90018ede:	4432      	add	r2, r6
90018ee0:	e7fa      	b.n	90018ed8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
90018ee2:	3102      	adds	r1, #2
90018ee4:	3801      	subs	r0, #1
90018ee6:	07c2      	lsls	r2, r0, #31
90018ee8:	d50b      	bpl.n	90018f02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
90018eea:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
90018eee:	0066      	lsls	r6, r4, #1
90018ef0:	3a01      	subs	r2, #1
90018ef2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
90018ef6:	42aa      	cmp	r2, r5
90018ef8:	d202      	bcs.n	90018f00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
90018efa:	8013      	strh	r3, [r2, #0]
90018efc:	4432      	add	r2, r6
90018efe:	e7fa      	b.n	90018ef6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
90018f00:	3801      	subs	r0, #1
90018f02:	b178      	cbz	r0, 90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018f04:	1040      	asrs	r0, r0, #1
90018f06:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
90018f0a:	0080      	lsls	r0, r0, #2
90018f0c:	0064      	lsls	r4, r4, #1
90018f0e:	42a9      	cmp	r1, r5
90018f10:	d208      	bcs.n	90018f24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018f12:	180e      	adds	r6, r1, r0
90018f14:	460a      	mov	r2, r1
90018f16:	42b2      	cmp	r2, r6
90018f18:	d202      	bcs.n	90018f20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
90018f1a:	f842 3b04 	str.w	r3, [r2], #4
90018f1e:	e7fa      	b.n	90018f16 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
90018f20:	4421      	add	r1, r4
90018f22:	e7f4      	b.n	90018f0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
90018f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90018f28:	00fff800 	.word	0x00fff800

90018f2c <_ZN8touchgfx8LCD16bppC1Ev>:
90018f2c:	2200      	movs	r2, #0
90018f2e:	4910      	ldr	r1, [pc, #64]	; (90018f70 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
90018f30:	6042      	str	r2, [r0, #4]
90018f32:	6001      	str	r1, [r0, #0]
90018f34:	e9c0 2202 	strd	r2, r2, [r0, #8]
90018f38:	e9c0 2204 	strd	r2, r2, [r0, #16]
90018f3c:	e9c0 2206 	strd	r2, r2, [r0, #24]
90018f40:	e9c0 2208 	strd	r2, r2, [r0, #32]
90018f44:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
90018f48:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
90018f4c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
90018f50:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
90018f54:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
90018f58:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
90018f5c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
90018f60:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
90018f64:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
90018f68:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
90018f6c:	4770      	bx	lr
90018f6e:	bf00      	nop
90018f70:	90025b70 	.word	0x90025b70

90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
90018f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018f78:	b08d      	sub	sp, #52	; 0x34
90018f7a:	460d      	mov	r5, r1
90018f7c:	4604      	mov	r4, r0
90018f7e:	4699      	mov	r9, r3
90018f80:	6808      	ldr	r0, [r1, #0]
90018f82:	ab08      	add	r3, sp, #32
90018f84:	6849      	ldr	r1, [r1, #4]
90018f86:	c303      	stmia	r3!, {r0, r1}
90018f88:	6810      	ldr	r0, [r2, #0]
90018f8a:	ab0a      	add	r3, sp, #40	; 0x28
90018f8c:	6851      	ldr	r1, [r2, #4]
90018f8e:	c303      	stmia	r3!, {r0, r1}
90018f90:	a808      	add	r0, sp, #32
90018f92:	f7f9 fd39 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018f96:	4629      	mov	r1, r5
90018f98:	a80a      	add	r0, sp, #40	; 0x28
90018f9a:	4d67      	ldr	r5, [pc, #412]	; (90019138 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
90018f9c:	f7f9 fd5c 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018fa0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
90018fa4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
90018fa8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
90018fac:	6828      	ldr	r0, [r5, #0]
90018fae:	fb11 2103 	smlabb	r1, r1, r3, r2
90018fb2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
90018fb6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
90018fba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
90018fbe:	f8bd 1020 	ldrh.w	r1, [sp, #32]
90018fc2:	440a      	add	r2, r1
90018fc4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90018fc8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90018fcc:	4413      	add	r3, r2
90018fce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018fd2:	6803      	ldr	r3, [r0, #0]
90018fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018fd6:	4798      	blx	r3
90018fd8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90018fdc:	d119      	bne.n	90019012 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
90018fde:	f010 0f20 	tst.w	r0, #32
90018fe2:	6828      	ldr	r0, [r5, #0]
90018fe4:	d018      	beq.n	90019018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
90018fe6:	2500      	movs	r5, #0
90018fe8:	6801      	ldr	r1, [r0, #0]
90018fea:	b2b6      	uxth	r6, r6
90018fec:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
90018ff0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
90018ff4:	9601      	str	r6, [sp, #4]
90018ff6:	e9cd 9503 	strd	r9, r5, [sp, #12]
90018ffa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
90018ffe:	9502      	str	r5, [sp, #8]
90019000:	fa1f f588 	uxth.w	r5, r8
90019004:	9500      	str	r5, [sp, #0]
90019006:	6d0d      	ldr	r5, [r1, #80]	; 0x50
90019008:	4621      	mov	r1, r4
9001900a:	47a8      	blx	r5
9001900c:	b00d      	add	sp, #52	; 0x34
9001900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019012:	f010 0f40 	tst.w	r0, #64	; 0x40
90019016:	e7e4      	b.n	90018fe2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
90019018:	6803      	ldr	r3, [r0, #0]
9001901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001901c:	4798      	blx	r3
9001901e:	4947      	ldr	r1, [pc, #284]	; (9001913c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
90019020:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90019024:	880b      	ldrh	r3, [r1, #0]
90019026:	468a      	mov	sl, r1
90019028:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001902c:	fb03 5202 	mla	r2, r3, r2, r5
90019030:	4373      	muls	r3, r6
90019032:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90019036:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001903a:	9307      	str	r3, [sp, #28]
9001903c:	ea4f 0348 	mov.w	r3, r8, lsl #1
90019040:	9306      	str	r3, [sp, #24]
90019042:	9b07      	ldr	r3, [sp, #28]
90019044:	4298      	cmp	r0, r3
90019046:	d270      	bcs.n	9001912a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
90019048:	9b06      	ldr	r3, [sp, #24]
9001904a:	4621      	mov	r1, r4
9001904c:	eb00 0b03 	add.w	fp, r0, r3
90019050:	4558      	cmp	r0, fp
90019052:	d25d      	bcs.n	90019110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
90019054:	f851 4b04 	ldr.w	r4, [r1], #4
90019058:	0e23      	lsrs	r3, r4, #24
9001905a:	d014      	beq.n	90019086 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001905c:	2bff      	cmp	r3, #255	; 0xff
9001905e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
90019062:	d112      	bne.n	9001908a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
90019064:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90019068:	d10f      	bne.n	9001908a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001906a:	0963      	lsrs	r3, r4, #5
9001906c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90019070:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90019074:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90019078:	f02c 0c07 	bic.w	ip, ip, #7
9001907c:	ea43 0c0c 	orr.w	ip, r3, ip
90019080:	ea4c 0404 	orr.w	r4, ip, r4
90019084:	8004      	strh	r4, [r0, #0]
90019086:	3002      	adds	r0, #2
90019088:	e7e2      	b.n	90019050 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001908a:	fb09 f303 	mul.w	r3, r9, r3
9001908e:	8807      	ldrh	r7, [r0, #0]
90019090:	f3c4 4e07 	ubfx	lr, r4, #16, #8
90019094:	fa5f fc8c 	uxtb.w	ip, ip
90019098:	1c5a      	adds	r2, r3, #1
9001909a:	123e      	asrs	r6, r7, #8
9001909c:	10fd      	asrs	r5, r7, #3
9001909e:	eb02 2223 	add.w	r2, r2, r3, asr #8
900190a2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900190a6:	00ff      	lsls	r7, r7, #3
900190a8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900190ac:	1212      	asrs	r2, r2, #8
900190ae:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
900190b2:	b293      	uxth	r3, r2
900190b4:	43d2      	mvns	r2, r2
900190b6:	b2ff      	uxtb	r7, r7
900190b8:	fb1e fe03 	smulbb	lr, lr, r3
900190bc:	b2d2      	uxtb	r2, r2
900190be:	fb1c fc03 	smulbb	ip, ip, r3
900190c2:	b2e4      	uxtb	r4, r4
900190c4:	fb06 e602 	mla	r6, r6, r2, lr
900190c8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
900190cc:	fb14 f403 	smulbb	r4, r4, r3
900190d0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
900190d4:	b2b6      	uxth	r6, r6
900190d6:	fb05 c502 	mla	r5, r5, r2, ip
900190da:	fb07 4702 	mla	r7, r7, r2, r4
900190de:	f106 0e01 	add.w	lr, r6, #1
900190e2:	b2ad      	uxth	r5, r5
900190e4:	b2bf      	uxth	r7, r7
900190e6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
900190ea:	f105 0c01 	add.w	ip, r5, #1
900190ee:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
900190f2:	1c7e      	adds	r6, r7, #1
900190f4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900190f8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
900190fc:	096d      	lsrs	r5, r5, #5
900190fe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90019102:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019106:	ea46 060e 	orr.w	r6, r6, lr
9001910a:	432e      	orrs	r6, r5
9001910c:	8006      	strh	r6, [r0, #0]
9001910e:	e7ba      	b.n	90019086 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
90019110:	f8ba 3000 	ldrh.w	r3, [sl]
90019114:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
90019118:	eba3 0308 	sub.w	r3, r3, r8
9001911c:	eba4 0408 	sub.w	r4, r4, r8
90019120:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019124:	eb01 0484 	add.w	r4, r1, r4, lsl #2
90019128:	e78b      	b.n	90019042 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001912a:	4b03      	ldr	r3, [pc, #12]	; (90019138 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001912c:	6818      	ldr	r0, [r3, #0]
9001912e:	6803      	ldr	r3, [r0, #0]
90019130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019132:	4798      	blx	r3
90019134:	e76a      	b.n	9001900c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
90019136:	bf00      	nop
90019138:	2402620c 	.word	0x2402620c
9001913c:	24026206 	.word	0x24026206

90019140 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
90019140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90019144:	b085      	sub	sp, #20
90019146:	6810      	ldr	r0, [r2, #0]
90019148:	460c      	mov	r4, r1
9001914a:	6851      	ldr	r1, [r2, #4]
9001914c:	466d      	mov	r5, sp
9001914e:	4616      	mov	r6, r2
90019150:	c503      	stmia	r5!, {r0, r1}
90019152:	6818      	ldr	r0, [r3, #0]
90019154:	6859      	ldr	r1, [r3, #4]
90019156:	c503      	stmia	r5!, {r0, r1}
90019158:	4668      	mov	r0, sp
9001915a:	4d2e      	ldr	r5, [pc, #184]	; (90019214 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001915c:	f7f9 fc54 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019160:	4631      	mov	r1, r6
90019162:	a802      	add	r0, sp, #8
90019164:	4e2c      	ldr	r6, [pc, #176]	; (90019218 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
90019166:	f7f9 fc77 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001916a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001916e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
90019172:	f8bd 1004 	ldrh.w	r1, [sp, #4]
90019176:	6828      	ldr	r0, [r5, #0]
90019178:	fb11 2103 	smlabb	r1, r1, r3, r2
9001917c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90019180:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
90019184:	eb04 0481 	add.w	r4, r4, r1, lsl #2
90019188:	f8bd 1000 	ldrh.w	r1, [sp]
9001918c:	440a      	add	r2, r1
9001918e:	f8ad 2008 	strh.w	r2, [sp, #8]
90019192:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90019196:	4413      	add	r3, r2
90019198:	f8ad 300a 	strh.w	r3, [sp, #10]
9001919c:	6803      	ldr	r3, [r0, #0]
9001919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900191a0:	4798      	blx	r3
900191a2:	8833      	ldrh	r3, [r6, #0]
900191a4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
900191a8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
900191ac:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
900191b0:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001921c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
900191b4:	fb03 1202 	mla	r2, r3, r2, r1
900191b8:	fb08 f303 	mul.w	r3, r8, r3
900191bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
900191c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900191c4:	4298      	cmp	r0, r3
900191c6:	d21d      	bcs.n	90019204 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
900191c8:	eb00 080c 	add.w	r8, r0, ip
900191cc:	4540      	cmp	r0, r8
900191ce:	d20f      	bcs.n	900191f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
900191d0:	f854 1b04 	ldr.w	r1, [r4], #4
900191d4:	ea4f 1951 	mov.w	r9, r1, lsr #5
900191d8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
900191dc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
900191e0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900191e4:	ea42 0209 	orr.w	r2, r2, r9
900191e8:	430a      	orrs	r2, r1
900191ea:	f820 2b02 	strh.w	r2, [r0], #2
900191ee:	e7ed      	b.n	900191cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
900191f0:	8832      	ldrh	r2, [r6, #0]
900191f2:	1bd2      	subs	r2, r2, r7
900191f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
900191f8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
900191fc:	1bd2      	subs	r2, r2, r7
900191fe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
90019202:	e7df      	b.n	900191c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
90019204:	6828      	ldr	r0, [r5, #0]
90019206:	6803      	ldr	r3, [r0, #0]
90019208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001920a:	4798      	blx	r3
9001920c:	b005      	add	sp, #20
9001920e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90019212:	bf00      	nop
90019214:	2402620c 	.word	0x2402620c
90019218:	24026206 	.word	0x24026206
9001921c:	fffff800 	.word	0xfffff800

90019220 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
90019220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90019224:	b08e      	sub	sp, #56	; 0x38
90019226:	460e      	mov	r6, r1
90019228:	4604      	mov	r4, r0
9001922a:	461d      	mov	r5, r3
9001922c:	6808      	ldr	r0, [r1, #0]
9001922e:	ab0a      	add	r3, sp, #40	; 0x28
90019230:	6849      	ldr	r1, [r1, #4]
90019232:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 90019408 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
90019236:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001940c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001923a:	c303      	stmia	r3!, {r0, r1}
9001923c:	6810      	ldr	r0, [r2, #0]
9001923e:	ab0c      	add	r3, sp, #48	; 0x30
90019240:	6851      	ldr	r1, [r2, #4]
90019242:	c303      	stmia	r3!, {r0, r1}
90019244:	a80a      	add	r0, sp, #40	; 0x28
90019246:	f7f9 fbdf 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001924a:	4631      	mov	r1, r6
9001924c:	a80c      	add	r0, sp, #48	; 0x30
9001924e:	f7f9 fc03 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019252:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
90019256:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001925a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001925e:	f8d8 0000 	ldr.w	r0, [r8]
90019262:	fb11 2103 	smlabb	r1, r1, r3, r2
90019266:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001926a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001926e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90019272:	440c      	add	r4, r1
90019274:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
90019278:	440a      	add	r2, r1
9001927a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001927e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
90019282:	4413      	add	r3, r2
90019284:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90019288:	6803      	ldr	r3, [r0, #0]
9001928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001928c:	4798      	blx	r3
9001928e:	2dff      	cmp	r5, #255	; 0xff
90019290:	d124      	bne.n	900192dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
90019292:	f010 0f01 	tst.w	r0, #1
90019296:	f8d8 0000 	ldr.w	r0, [r8]
9001929a:	d022      	beq.n	900192e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001929c:	2100      	movs	r1, #0
9001929e:	f04f 0e01 	mov.w	lr, #1
900192a2:	f8d0 c000 	ldr.w	ip, [r0]
900192a6:	b2b6      	uxth	r6, r6
900192a8:	f8cd e018 	str.w	lr, [sp, #24]
900192ac:	b2bf      	uxth	r7, r7
900192ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
900192b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
900192b6:	e9cd 1107 	strd	r1, r1, [sp, #28]
900192ba:	f8b9 e000 	ldrh.w	lr, [r9]
900192be:	9503      	str	r5, [sp, #12]
900192c0:	9601      	str	r6, [sp, #4]
900192c2:	9700      	str	r7, [sp, #0]
900192c4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
900192c8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
900192cc:	9102      	str	r1, [sp, #8]
900192ce:	4621      	mov	r1, r4
900192d0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
900192d4:	47a8      	blx	r5
900192d6:	b00e      	add	sp, #56	; 0x38
900192d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900192dc:	f010 0f04 	tst.w	r0, #4
900192e0:	e7d9      	b.n	90019296 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
900192e2:	6803      	ldr	r3, [r0, #0]
900192e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900192e6:	4798      	blx	r3
900192e8:	f8b9 3000 	ldrh.w	r3, [r9]
900192ec:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
900192f0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
900192f4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
900192f8:	435e      	muls	r6, r3
900192fa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
900192fe:	2dff      	cmp	r5, #255	; 0xff
90019300:	fb03 1202 	mla	r2, r3, r2, r1
90019304:	ebac 0c07 	sub.w	ip, ip, r7
90019308:	eba3 0707 	sub.w	r7, r3, r7
9001930c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90019310:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90019314:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90019318:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001931c:	d049      	beq.n	900193b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001931e:	43eb      	mvns	r3, r5
90019320:	fa1f f985 	uxth.w	r9, r5
90019324:	b2db      	uxtb	r3, r3
90019326:	42b0      	cmp	r0, r6
90019328:	d266      	bcs.n	900193f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001932a:	eb00 0a0e 	add.w	sl, r0, lr
9001932e:	4550      	cmp	r0, sl
90019330:	4621      	mov	r1, r4
90019332:	f104 0403 	add.w	r4, r4, #3
90019336:	d25b      	bcs.n	900193f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
90019338:	8802      	ldrh	r2, [r0, #0]
9001933a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001933e:	ea4f 2822 	mov.w	r8, r2, asr #8
90019342:	fb11 f109 	smulbb	r1, r1, r9
90019346:	10d5      	asrs	r5, r2, #3
90019348:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001934c:	00d2      	lsls	r2, r2, #3
9001934e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019352:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
90019356:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001935a:	fb08 1803 	mla	r8, r8, r3, r1
9001935e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
90019362:	b2d2      	uxtb	r2, r2
90019364:	fb11 f109 	smulbb	r1, r1, r9
90019368:	fa1f f888 	uxth.w	r8, r8
9001936c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
90019370:	fb05 1503 	mla	r5, r5, r3, r1
90019374:	f814 1c03 	ldrb.w	r1, [r4, #-3]
90019378:	fb11 f109 	smulbb	r1, r1, r9
9001937c:	b2ad      	uxth	r5, r5
9001937e:	fb02 1203 	mla	r2, r2, r3, r1
90019382:	f108 0101 	add.w	r1, r8, #1
90019386:	b292      	uxth	r2, r2
90019388:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001938c:	1c51      	adds	r1, r2, #1
9001938e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
90019392:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90019396:	1c69      	adds	r1, r5, #1
90019398:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001939c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900193a0:	096d      	lsrs	r5, r5, #5
900193a2:	ea42 0208 	orr.w	r2, r2, r8
900193a6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900193aa:	432a      	orrs	r2, r5
900193ac:	f820 2b02 	strh.w	r2, [r0], #2
900193b0:	e7bd      	b.n	9001932e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
900193b2:	4a14      	ldr	r2, [pc, #80]	; (90019404 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
900193b4:	42b0      	cmp	r0, r6
900193b6:	d21f      	bcs.n	900193f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
900193b8:	eb00 050e 	add.w	r5, r0, lr
900193bc:	42a8      	cmp	r0, r5
900193be:	4621      	mov	r1, r4
900193c0:	f104 0403 	add.w	r4, r4, #3
900193c4:	d210      	bcs.n	900193e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
900193c6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
900193ca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
900193ce:	00db      	lsls	r3, r3, #3
900193d0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
900193d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900193d8:	430b      	orrs	r3, r1
900193da:	f814 1c03 	ldrb.w	r1, [r4, #-3]
900193de:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
900193e2:	f820 3b02 	strh.w	r3, [r0], #2
900193e6:	e7e9      	b.n	900193bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
900193e8:	4438      	add	r0, r7
900193ea:	eb01 040c 	add.w	r4, r1, ip
900193ee:	e7e1      	b.n	900193b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
900193f0:	4438      	add	r0, r7
900193f2:	eb01 040c 	add.w	r4, r1, ip
900193f6:	e796      	b.n	90019326 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
900193f8:	4b03      	ldr	r3, [pc, #12]	; (90019408 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
900193fa:	6818      	ldr	r0, [r3, #0]
900193fc:	6803      	ldr	r3, [r0, #0]
900193fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019400:	4798      	blx	r3
90019402:	e768      	b.n	900192d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
90019404:	fffff800 	.word	0xfffff800
90019408:	2402620c 	.word	0x2402620c
9001940c:	24026206 	.word	0x24026206

90019410 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
90019410:	b4f0      	push	{r4, r5, r6, r7}
90019412:	4616      	mov	r6, r2
90019414:	461c      	mov	r4, r3
90019416:	460d      	mov	r5, r1
90019418:	9a04      	ldr	r2, [sp, #16]
9001941a:	2e01      	cmp	r6, #1
9001941c:	f89d 3014 	ldrb.w	r3, [sp, #20]
90019420:	f89d 7018 	ldrb.w	r7, [sp, #24]
90019424:	d012      	beq.n	9001944c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
90019426:	d303      	bcc.n	90019430 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
90019428:	2e02      	cmp	r6, #2
9001942a:	d00a      	beq.n	90019442 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001942c:	bcf0      	pop	{r4, r5, r6, r7}
9001942e:	4770      	bx	lr
90019430:	6805      	ldr	r5, [r0, #0]
90019432:	e9cd 3704 	strd	r3, r7, [sp, #16]
90019436:	68ed      	ldr	r5, [r5, #12]
90019438:	4613      	mov	r3, r2
9001943a:	4622      	mov	r2, r4
9001943c:	46ac      	mov	ip, r5
9001943e:	bcf0      	pop	{r4, r5, r6, r7}
90019440:	4760      	bx	ip
90019442:	4621      	mov	r1, r4
90019444:	4628      	mov	r0, r5
90019446:	bcf0      	pop	{r4, r5, r6, r7}
90019448:	f7ff bd94 	b.w	90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001944c:	4621      	mov	r1, r4
9001944e:	4628      	mov	r0, r5
90019450:	bcf0      	pop	{r4, r5, r6, r7}
90019452:	f7ff bee5 	b.w	90019220 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

90019458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
90019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001945c:	b093      	sub	sp, #76	; 0x4c
9001945e:	4681      	mov	r9, r0
90019460:	4688      	mov	r8, r1
90019462:	6810      	ldr	r0, [r2, #0]
90019464:	6851      	ldr	r1, [r2, #4]
90019466:	ac0e      	add	r4, sp, #56	; 0x38
90019468:	4616      	mov	r6, r2
9001946a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001946e:	4f6b      	ldr	r7, [pc, #428]	; (9001961c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
90019470:	c403      	stmia	r4!, {r0, r1}
90019472:	6818      	ldr	r0, [r3, #0]
90019474:	ac10      	add	r4, sp, #64	; 0x40
90019476:	6859      	ldr	r1, [r3, #4]
90019478:	c403      	stmia	r4!, {r0, r1}
9001947a:	a80e      	add	r0, sp, #56	; 0x38
9001947c:	f7f9 fac4 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019480:	4631      	mov	r1, r6
90019482:	a810      	add	r0, sp, #64	; 0x40
90019484:	4e66      	ldr	r6, [pc, #408]	; (90019620 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
90019486:	f7f9 fae7 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001948a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001948e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
90019492:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
90019496:	6830      	ldr	r0, [r6, #0]
90019498:	fb11 2103 	smlabb	r1, r1, r3, r2
9001949c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
900194a0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
900194a4:	4489      	add	r9, r1
900194a6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
900194aa:	440a      	add	r2, r1
900194ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
900194b0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
900194b4:	4413      	add	r3, r2
900194b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
900194ba:	6803      	ldr	r3, [r0, #0]
900194bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900194be:	4798      	blx	r3
900194c0:	f010 0f80 	tst.w	r0, #128	; 0x80
900194c4:	6830      	ldr	r0, [r6, #0]
900194c6:	d01d      	beq.n	90019504 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
900194c8:	2200      	movs	r2, #0
900194ca:	6801      	ldr	r1, [r0, #0]
900194cc:	b2a4      	uxth	r4, r4
900194ce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900194d2:	b2ad      	uxth	r5, r5
900194d4:	e9cd 2208 	strd	r2, r2, [sp, #32]
900194d8:	220b      	movs	r2, #11
900194da:	9207      	str	r2, [sp, #28]
900194dc:	883a      	ldrh	r2, [r7, #0]
900194de:	9502      	str	r5, [sp, #8]
900194e0:	9206      	str	r2, [sp, #24]
900194e2:	2201      	movs	r2, #1
900194e4:	9401      	str	r4, [sp, #4]
900194e6:	e9cd a204 	strd	sl, r2, [sp, #16]
900194ea:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
900194ee:	9203      	str	r2, [sp, #12]
900194f0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
900194f4:	9200      	str	r2, [sp, #0]
900194f6:	4642      	mov	r2, r8
900194f8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
900194fa:	4649      	mov	r1, r9
900194fc:	47a0      	blx	r4
900194fe:	b013      	add	sp, #76	; 0x4c
90019500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019504:	6803      	ldr	r3, [r0, #0]
90019506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019508:	4798      	blx	r3
9001950a:	883b      	ldrh	r3, [r7, #0]
9001950c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
90019510:	f04f 0e04 	mov.w	lr, #4
90019514:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
90019518:	435d      	muls	r5, r3
9001951a:	fb03 1202 	mla	r2, r3, r2, r1
9001951e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90019522:	eb00 0245 	add.w	r2, r0, r5, lsl #1
90019526:	920c      	str	r2, [sp, #48]	; 0x30
90019528:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001952c:	1b12      	subs	r2, r2, r4
9001952e:	920d      	str	r2, [sp, #52]	; 0x34
90019530:	0062      	lsls	r2, r4, #1
90019532:	1b1c      	subs	r4, r3, r4
90019534:	920a      	str	r2, [sp, #40]	; 0x28
90019536:	0063      	lsls	r3, r4, #1
90019538:	930b      	str	r3, [sp, #44]	; 0x2c
9001953a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001953c:	4298      	cmp	r0, r3
9001953e:	d266      	bcs.n	9001960e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
90019540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90019542:	eb00 0b03 	add.w	fp, r0, r3
90019546:	4558      	cmp	r0, fp
90019548:	d25c      	bcs.n	90019604 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001954a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001954e:	fb1e e303 	smlabb	r3, lr, r3, lr
90019552:	f858 2003 	ldr.w	r2, [r8, r3]
90019556:	0e11      	lsrs	r1, r2, #24
90019558:	d012      	beq.n	90019580 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001955a:	29ff      	cmp	r1, #255	; 0xff
9001955c:	ea4f 2712 	mov.w	r7, r2, lsr #8
90019560:	d110      	bne.n	90019584 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
90019562:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90019566:	d10d      	bne.n	90019584 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
90019568:	0953      	lsrs	r3, r2, #5
9001956a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001956e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90019572:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90019576:	f027 0707 	bic.w	r7, r7, #7
9001957a:	431f      	orrs	r7, r3
9001957c:	433a      	orrs	r2, r7
9001957e:	8002      	strh	r2, [r0, #0]
90019580:	3002      	adds	r0, #2
90019582:	e7e0      	b.n	90019546 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
90019584:	fb0a f101 	mul.w	r1, sl, r1
90019588:	8806      	ldrh	r6, [r0, #0]
9001958a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001958e:	b2d2      	uxtb	r2, r2
90019590:	1c4b      	adds	r3, r1, #1
90019592:	1235      	asrs	r5, r6, #8
90019594:	10f4      	asrs	r4, r6, #3
90019596:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001959a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001959e:	00f6      	lsls	r6, r6, #3
900195a0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
900195a4:	121b      	asrs	r3, r3, #8
900195a6:	b2f6      	uxtb	r6, r6
900195a8:	b299      	uxth	r1, r3
900195aa:	43db      	mvns	r3, r3
900195ac:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
900195b0:	fb1c fc01 	smulbb	ip, ip, r1
900195b4:	b2db      	uxtb	r3, r3
900195b6:	fb12 f201 	smulbb	r2, r2, r1
900195ba:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
900195be:	fb05 c503 	mla	r5, r5, r3, ip
900195c2:	b2ff      	uxtb	r7, r7
900195c4:	fb06 2203 	mla	r2, r6, r3, r2
900195c8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
900195cc:	fb17 f701 	smulbb	r7, r7, r1
900195d0:	b2ad      	uxth	r5, r5
900195d2:	b292      	uxth	r2, r2
900195d4:	fb04 7403 	mla	r4, r4, r3, r7
900195d8:	f105 0c01 	add.w	ip, r5, #1
900195dc:	1c57      	adds	r7, r2, #1
900195de:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900195e2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
900195e6:	b2a4      	uxth	r4, r4
900195e8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900195ec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900195f0:	433d      	orrs	r5, r7
900195f2:	1c67      	adds	r7, r4, #1
900195f4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
900195f8:	0964      	lsrs	r4, r4, #5
900195fa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
900195fe:	4325      	orrs	r5, r4
90019600:	8005      	strh	r5, [r0, #0]
90019602:	e7bd      	b.n	90019580 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
90019604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019606:	4418      	add	r0, r3
90019608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001960a:	4499      	add	r9, r3
9001960c:	e795      	b.n	9001953a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001960e:	4b04      	ldr	r3, [pc, #16]	; (90019620 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
90019610:	6818      	ldr	r0, [r3, #0]
90019612:	6803      	ldr	r3, [r0, #0]
90019614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019616:	4798      	blx	r3
90019618:	e771      	b.n	900194fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001961a:	bf00      	nop
9001961c:	24026206 	.word	0x24026206
90019620:	2402620c 	.word	0x2402620c

90019624 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
90019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019628:	b087      	sub	sp, #28
9001962a:	4680      	mov	r8, r0
9001962c:	460d      	mov	r5, r1
9001962e:	4614      	mov	r4, r2
90019630:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
90019634:	2e00      	cmp	r6, #0
90019636:	f000 80b9 	beq.w	900197ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001963a:	6810      	ldr	r0, [r2, #0]
9001963c:	af02      	add	r7, sp, #8
9001963e:	6851      	ldr	r1, [r2, #4]
90019640:	c703      	stmia	r7!, {r0, r1}
90019642:	6818      	ldr	r0, [r3, #0]
90019644:	af04      	add	r7, sp, #16
90019646:	6859      	ldr	r1, [r3, #4]
90019648:	c703      	stmia	r7!, {r0, r1}
9001964a:	a802      	add	r0, sp, #8
9001964c:	f7f9 f9dc 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019650:	4621      	mov	r1, r4
90019652:	a804      	add	r0, sp, #16
90019654:	f7f9 fa00 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019658:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001965c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019660:	f8bd 400c 	ldrh.w	r4, [sp, #12]
90019664:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
90019668:	fb14 2103 	smlabb	r1, r4, r3, r2
9001966c:	eb08 0401 	add.w	r4, r8, r1
90019670:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90019674:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
90019678:	440a      	add	r2, r1
9001967a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001967e:	f8ad 2010 	strh.w	r2, [sp, #16]
90019682:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019686:	4413      	add	r3, r2
90019688:	f8ad 3012 	strh.w	r3, [sp, #18]
9001968c:	4b49      	ldr	r3, [pc, #292]	; (900197b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001968e:	6818      	ldr	r0, [r3, #0]
90019690:	6803      	ldr	r3, [r0, #0]
90019692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019694:	4798      	blx	r3
90019696:	4b48      	ldr	r3, [pc, #288]	; (900197b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
90019698:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001969c:	2eff      	cmp	r6, #255	; 0xff
9001969e:	881a      	ldrh	r2, [r3, #0]
900196a0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
900196a4:	fb02 c101 	mla	r1, r2, r1, ip
900196a8:	fb02 f207 	mul.w	r2, r2, r7
900196ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
900196b0:	f105 0104 	add.w	r1, r5, #4
900196b4:	461d      	mov	r5, r3
900196b6:	d05a      	beq.n	9001976e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
900196b8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
900196bc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
900196c0:	b2b6      	uxth	r6, r6
900196c2:	9301      	str	r3, [sp, #4]
900196c4:	fa1f fe8e 	uxth.w	lr, lr
900196c8:	4282      	cmp	r2, r0
900196ca:	d96a      	bls.n	900197a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
900196cc:	eb00 0b0a 	add.w	fp, r0, sl
900196d0:	4583      	cmp	fp, r0
900196d2:	d940      	bls.n	90019756 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
900196d4:	8805      	ldrh	r5, [r0, #0]
900196d6:	f814 3b01 	ldrb.w	r3, [r4], #1
900196da:	122f      	asrs	r7, r5, #8
900196dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
900196e0:	ea4f 09e5 	mov.w	r9, r5, asr #3
900196e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900196e8:	00ed      	lsls	r5, r5, #3
900196ea:	ea4f 2c23 	mov.w	ip, r3, asr #8
900196ee:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900196f2:	fb17 f70e 	smulbb	r7, r7, lr
900196f6:	b2ed      	uxtb	r5, r5
900196f8:	fb19 f90e 	smulbb	r9, r9, lr
900196fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019700:	fb15 f50e 	smulbb	r5, r5, lr
90019704:	fb0c 7c06 	mla	ip, ip, r6, r7
90019708:	10df      	asrs	r7, r3, #3
9001970a:	00db      	lsls	r3, r3, #3
9001970c:	fa1f fc8c 	uxth.w	ip, ip
90019710:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019714:	b2db      	uxtb	r3, r3
90019716:	fb07 9706 	mla	r7, r7, r6, r9
9001971a:	f10c 0901 	add.w	r9, ip, #1
9001971e:	fb03 5306 	mla	r3, r3, r6, r5
90019722:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
90019726:	b29b      	uxth	r3, r3
90019728:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001972c:	b2bf      	uxth	r7, r7
9001972e:	f103 0c01 	add.w	ip, r3, #1
90019732:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019736:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001973a:	ea4c 0c09 	orr.w	ip, ip, r9
9001973e:	f107 0901 	add.w	r9, r7, #1
90019742:	eb09 2717 	add.w	r7, r9, r7, lsr #8
90019746:	097f      	lsrs	r7, r7, #5
90019748:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001974c:	ea4c 0c07 	orr.w	ip, ip, r7
90019750:	f820 cb02 	strh.w	ip, [r0], #2
90019754:	e7bc      	b.n	900196d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
90019756:	9b01      	ldr	r3, [sp, #4]
90019758:	881b      	ldrh	r3, [r3, #0]
9001975a:	eba3 0308 	sub.w	r3, r3, r8
9001975e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019762:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90019766:	eba3 0308 	sub.w	r3, r3, r8
9001976a:	441c      	add	r4, r3
9001976c:	e7ac      	b.n	900196c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001976e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90019772:	4282      	cmp	r2, r0
90019774:	d915      	bls.n	900197a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
90019776:	eb00 060a 	add.w	r6, r0, sl
9001977a:	4286      	cmp	r6, r0
9001977c:	d906      	bls.n	9001978c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001977e:	f814 3b01 	ldrb.w	r3, [r4], #1
90019782:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
90019786:	f820 3b02 	strh.w	r3, [r0], #2
9001978a:	e7f6      	b.n	9001977a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001978c:	882b      	ldrh	r3, [r5, #0]
9001978e:	eba3 0308 	sub.w	r3, r3, r8
90019792:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019796:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001979a:	eba3 0308 	sub.w	r3, r3, r8
9001979e:	441c      	add	r4, r3
900197a0:	e7e7      	b.n	90019772 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
900197a2:	4b04      	ldr	r3, [pc, #16]	; (900197b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
900197a4:	6818      	ldr	r0, [r3, #0]
900197a6:	6803      	ldr	r3, [r0, #0]
900197a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900197aa:	4798      	blx	r3
900197ac:	b007      	add	sp, #28
900197ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900197b2:	bf00      	nop
900197b4:	2402620c 	.word	0x2402620c
900197b8:	24026206 	.word	0x24026206

900197bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
900197bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900197c0:	b091      	sub	sp, #68	; 0x44
900197c2:	4680      	mov	r8, r0
900197c4:	460f      	mov	r7, r1
900197c6:	4614      	mov	r4, r2
900197c8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
900197cc:	2d00      	cmp	r5, #0
900197ce:	d051      	beq.n	90019874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
900197d0:	6810      	ldr	r0, [r2, #0]
900197d2:	ae0c      	add	r6, sp, #48	; 0x30
900197d4:	6851      	ldr	r1, [r2, #4]
900197d6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 900199d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
900197da:	c603      	stmia	r6!, {r0, r1}
900197dc:	6818      	ldr	r0, [r3, #0]
900197de:	ae0e      	add	r6, sp, #56	; 0x38
900197e0:	6859      	ldr	r1, [r3, #4]
900197e2:	c603      	stmia	r6!, {r0, r1}
900197e4:	a80c      	add	r0, sp, #48	; 0x30
900197e6:	f7f9 f90f 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900197ea:	4621      	mov	r1, r4
900197ec:	a80e      	add	r0, sp, #56	; 0x38
900197ee:	f7f9 f933 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900197f2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
900197f6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
900197fa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900197fe:	f8d9 0000 	ldr.w	r0, [r9]
90019802:	fb11 2103 	smlabb	r1, r1, r3, r2
90019806:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001980a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001980e:	eb08 0401 	add.w	r4, r8, r1
90019812:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
90019816:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 900199dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001981a:	440a      	add	r2, r1
9001981c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
90019820:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90019824:	4413      	add	r3, r2
90019826:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001982a:	6803      	ldr	r3, [r0, #0]
9001982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001982e:	4798      	blx	r3
90019830:	f010 0f80 	tst.w	r0, #128	; 0x80
90019834:	f8d9 0000 	ldr.w	r0, [r9]
90019838:	d01f      	beq.n	9001987a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001983a:	2200      	movs	r2, #0
9001983c:	6801      	ldr	r1, [r0, #0]
9001983e:	b2b6      	uxth	r6, r6
90019840:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90019844:	e9cd 2208 	strd	r2, r2, [sp, #32]
90019848:	220b      	movs	r2, #11
9001984a:	9207      	str	r2, [sp, #28]
9001984c:	f8b8 2000 	ldrh.w	r2, [r8]
90019850:	9601      	str	r6, [sp, #4]
90019852:	9206      	str	r2, [sp, #24]
90019854:	2201      	movs	r2, #1
90019856:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001985a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001985e:	9203      	str	r2, [sp, #12]
90019860:	fa1f f28a 	uxth.w	r2, sl
90019864:	9202      	str	r2, [sp, #8]
90019866:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001986a:	9200      	str	r2, [sp, #0]
9001986c:	463a      	mov	r2, r7
9001986e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
90019870:	4621      	mov	r1, r4
90019872:	47a8      	blx	r5
90019874:	b011      	add	sp, #68	; 0x44
90019876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001987a:	6803      	ldr	r3, [r0, #0]
9001987c:	ea4f 0946 	mov.w	r9, r6, lsl #1
90019880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019882:	4798      	blx	r3
90019884:	f8b8 2000 	ldrh.w	r2, [r8]
90019888:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001988c:	2dff      	cmp	r5, #255	; 0xff
9001988e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
90019892:	fb0a fa02 	mul.w	sl, sl, r2
90019896:	fb02 1303 	mla	r3, r2, r3, r1
9001989a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001989e:	d062      	beq.n	90019966 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
900198a0:	ea6f 0c05 	mvn.w	ip, r5
900198a4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
900198a8:	b2ad      	uxth	r5, r5
900198aa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
900198ae:	fa5f fc8c 	uxtb.w	ip, ip
900198b2:	930a      	str	r3, [sp, #40]	; 0x28
900198b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900198b6:	4298      	cmp	r0, r3
900198b8:	f080 8085 	bcs.w	900199c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
900198bc:	eb00 0b09 	add.w	fp, r0, r9
900198c0:	4558      	cmp	r0, fp
900198c2:	d246      	bcs.n	90019952 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
900198c4:	f814 eb01 	ldrb.w	lr, [r4], #1
900198c8:	2303      	movs	r3, #3
900198ca:	2204      	movs	r2, #4
900198cc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
900198d0:	8803      	ldrh	r3, [r0, #0]
900198d2:	eb07 0a0e 	add.w	sl, r7, lr
900198d6:	1219      	asrs	r1, r3, #8
900198d8:	10da      	asrs	r2, r3, #3
900198da:	f817 e00e 	ldrb.w	lr, [r7, lr]
900198de:	f89a 8002 	ldrb.w	r8, [sl, #2]
900198e2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900198e6:	00db      	lsls	r3, r3, #3
900198e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900198ec:	fb18 f805 	smulbb	r8, r8, r5
900198f0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
900198f4:	fb1e fe05 	smulbb	lr, lr, r5
900198f8:	b2db      	uxtb	r3, r3
900198fa:	fb01 810c 	mla	r1, r1, ip, r8
900198fe:	f89a 8001 	ldrb.w	r8, [sl, #1]
90019902:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
90019906:	fb18 f805 	smulbb	r8, r8, r5
9001990a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001990e:	b289      	uxth	r1, r1
90019910:	fb02 820c 	mla	r2, r2, ip, r8
90019914:	fb03 e30c 	mla	r3, r3, ip, lr
90019918:	f101 0801 	add.w	r8, r1, #1
9001991c:	b292      	uxth	r2, r2
9001991e:	b29b      	uxth	r3, r3
90019920:	eb08 2111 	add.w	r1, r8, r1, lsr #8
90019924:	f102 0801 	add.w	r8, r2, #1
90019928:	f103 0e01 	add.w	lr, r3, #1
9001992c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
90019930:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90019934:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
90019938:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001993c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90019940:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90019944:	ea4e 0101 	orr.w	r1, lr, r1
90019948:	ea41 0108 	orr.w	r1, r1, r8
9001994c:	f820 1b02 	strh.w	r1, [r0], #2
90019950:	e7b6      	b.n	900198c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
90019952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019954:	881b      	ldrh	r3, [r3, #0]
90019956:	1b9b      	subs	r3, r3, r6
90019958:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001995c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
90019960:	1b9b      	subs	r3, r3, r6
90019962:	441c      	add	r4, r3
90019964:	e7a6      	b.n	900198b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
90019966:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001996a:	2203      	movs	r2, #3
9001996c:	2504      	movs	r5, #4
9001996e:	4919      	ldr	r1, [pc, #100]	; (900199d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
90019970:	4550      	cmp	r0, sl
90019972:	d228      	bcs.n	900199c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
90019974:	eb00 0c09 	add.w	ip, r0, r9
90019978:	4560      	cmp	r0, ip
9001997a:	4623      	mov	r3, r4
9001997c:	d219      	bcs.n	900199b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001997e:	f893 e000 	ldrb.w	lr, [r3]
90019982:	3401      	adds	r4, #1
90019984:	fb12 5e0e 	smlabb	lr, r2, lr, r5
90019988:	eb07 0b0e 	add.w	fp, r7, lr
9001998c:	f817 e00e 	ldrb.w	lr, [r7, lr]
90019990:	f89b 3002 	ldrb.w	r3, [fp, #2]
90019994:	f89b b001 	ldrb.w	fp, [fp, #1]
90019998:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001999c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
900199a0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900199a4:	ea43 030b 	orr.w	r3, r3, fp
900199a8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
900199ac:	f820 3b02 	strh.w	r3, [r0], #2
900199b0:	e7e2      	b.n	90019978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
900199b2:	f8b8 3000 	ldrh.w	r3, [r8]
900199b6:	1b9b      	subs	r3, r3, r6
900199b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900199bc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
900199c0:	1b9b      	subs	r3, r3, r6
900199c2:	441c      	add	r4, r3
900199c4:	e7d4      	b.n	90019970 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
900199c6:	4b04      	ldr	r3, [pc, #16]	; (900199d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
900199c8:	6818      	ldr	r0, [r3, #0]
900199ca:	6803      	ldr	r3, [r0, #0]
900199cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900199ce:	4798      	blx	r3
900199d0:	e750      	b.n	90019874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
900199d2:	bf00      	nop
900199d4:	fffff800 	.word	0xfffff800
900199d8:	2402620c 	.word	0x2402620c
900199dc:	24026206 	.word	0x24026206

900199e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
900199e0:	b430      	push	{r4, r5}
900199e2:	780d      	ldrb	r5, [r1, #0]
900199e4:	f89d 4008 	ldrb.w	r4, [sp, #8]
900199e8:	2d01      	cmp	r5, #1
900199ea:	d00a      	beq.n	90019a02 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
900199ec:	d305      	bcc.n	900199fa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
900199ee:	2d02      	cmp	r5, #2
900199f0:	d10b      	bne.n	90019a0a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
900199f2:	9402      	str	r4, [sp, #8]
900199f4:	bc30      	pop	{r4, r5}
900199f6:	f7ff be15 	b.w	90019624 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
900199fa:	9402      	str	r4, [sp, #8]
900199fc:	bc30      	pop	{r4, r5}
900199fe:	f7ff bd2b 	b.w	90019458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
90019a02:	9402      	str	r4, [sp, #8]
90019a04:	bc30      	pop	{r4, r5}
90019a06:	f7ff bed9 	b.w	900197bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
90019a0a:	bc30      	pop	{r4, r5}
90019a0c:	4770      	bx	lr
	...

90019a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
90019a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019a14:	b087      	sub	sp, #28
90019a16:	4604      	mov	r4, r0
90019a18:	460e      	mov	r6, r1
90019a1a:	6810      	ldr	r0, [r2, #0]
90019a1c:	6851      	ldr	r1, [r2, #4]
90019a1e:	ad02      	add	r5, sp, #8
90019a20:	4617      	mov	r7, r2
90019a22:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
90019a26:	f8df 9230 	ldr.w	r9, [pc, #560]	; 90019c58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
90019a2a:	c503      	stmia	r5!, {r0, r1}
90019a2c:	6818      	ldr	r0, [r3, #0]
90019a2e:	ad04      	add	r5, sp, #16
90019a30:	6859      	ldr	r1, [r3, #4]
90019a32:	c503      	stmia	r5!, {r0, r1}
90019a34:	a802      	add	r0, sp, #8
90019a36:	f7f8 ffe7 	bl	90012a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019a3a:	4639      	mov	r1, r7
90019a3c:	a804      	add	r0, sp, #16
90019a3e:	f7f9 f80b 	bl	90012a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019a42:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90019a46:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019a4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
90019a4e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
90019a52:	fb11 2103 	smlabb	r1, r1, r3, r2
90019a56:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
90019a5a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
90019a5e:	440e      	add	r6, r1
90019a60:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90019a64:	440a      	add	r2, r1
90019a66:	f8ad 2010 	strh.w	r2, [sp, #16]
90019a6a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019a6e:	4413      	add	r3, r2
90019a70:	f8ad 3012 	strh.w	r3, [sp, #18]
90019a74:	4b77      	ldr	r3, [pc, #476]	; (90019c54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
90019a76:	6818      	ldr	r0, [r3, #0]
90019a78:	6803      	ldr	r3, [r0, #0]
90019a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019a7c:	4798      	blx	r3
90019a7e:	f8b9 b000 	ldrh.w	fp, [r9]
90019a82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019a86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90019a8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90019a8e:	fb05 f50b 	mul.w	r5, r5, fp
90019a92:	fb0b 2303 	mla	r3, fp, r3, r2
90019a96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019a9a:	ea4f 0348 	mov.w	r3, r8, lsl #1
90019a9e:	9300      	str	r3, [sp, #0]
90019aa0:	d069      	beq.n	90019b76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
90019aa2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
90019aa6:	4558      	cmp	r0, fp
90019aa8:	f080 80cc 	bcs.w	90019c44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
90019aac:	9b00      	ldr	r3, [sp, #0]
90019aae:	4631      	mov	r1, r6
90019ab0:	18c3      	adds	r3, r0, r3
90019ab2:	9301      	str	r3, [sp, #4]
90019ab4:	9b01      	ldr	r3, [sp, #4]
90019ab6:	4298      	cmp	r0, r3
90019ab8:	d24f      	bcs.n	90019b5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
90019aba:	f811 2b01 	ldrb.w	r2, [r1], #1
90019abe:	2a00      	cmp	r2, #0
90019ac0:	d048      	beq.n	90019b54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
90019ac2:	fb0a f202 	mul.w	r2, sl, r2
90019ac6:	1c53      	adds	r3, r2, #1
90019ac8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90019acc:	121b      	asrs	r3, r3, #8
90019ace:	d041      	beq.n	90019b54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
90019ad0:	8802      	ldrh	r2, [r0, #0]
90019ad2:	b29e      	uxth	r6, r3
90019ad4:	f8b4 c000 	ldrh.w	ip, [r4]
90019ad8:	43db      	mvns	r3, r3
90019ada:	1215      	asrs	r5, r2, #8
90019adc:	b2db      	uxtb	r3, r3
90019ade:	ea4f 272c 	mov.w	r7, ip, asr #8
90019ae2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90019ae6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
90019aea:	fb15 f503 	smulbb	r5, r5, r3
90019aee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019af2:	00d2      	lsls	r2, r2, #3
90019af4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90019af8:	fb07 5706 	mla	r7, r7, r6, r5
90019afc:	ea4f 05ec 	mov.w	r5, ip, asr #3
90019b00:	b2d2      	uxtb	r2, r2
90019b02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019b06:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019b0a:	fb1e fe03 	smulbb	lr, lr, r3
90019b0e:	b2bf      	uxth	r7, r7
90019b10:	fb12 f203 	smulbb	r2, r2, r3
90019b14:	fa5f fc8c 	uxtb.w	ip, ip
90019b18:	fb05 e506 	mla	r5, r5, r6, lr
90019b1c:	f107 0e01 	add.w	lr, r7, #1
90019b20:	fb0c 2c06 	mla	ip, ip, r6, r2
90019b24:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
90019b28:	fa1f fc8c 	uxth.w	ip, ip
90019b2c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
90019b30:	b2ad      	uxth	r5, r5
90019b32:	f10c 0701 	add.w	r7, ip, #1
90019b36:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90019b3a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90019b3e:	ea47 070e 	orr.w	r7, r7, lr
90019b42:	f105 0e01 	add.w	lr, r5, #1
90019b46:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
90019b4a:	096d      	lsrs	r5, r5, #5
90019b4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019b50:	432f      	orrs	r7, r5
90019b52:	8007      	strh	r7, [r0, #0]
90019b54:	3002      	adds	r0, #2
90019b56:	3402      	adds	r4, #2
90019b58:	e7ac      	b.n	90019ab4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
90019b5a:	f8b9 3000 	ldrh.w	r3, [r9]
90019b5e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
90019b62:	eba3 0308 	sub.w	r3, r3, r8
90019b66:	eba6 0608 	sub.w	r6, r6, r8
90019b6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019b6e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
90019b72:	440e      	add	r6, r1
90019b74:	e797      	b.n	90019aa6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
90019b76:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90019b7a:	42a8      	cmp	r0, r5
90019b7c:	d262      	bcs.n	90019c44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
90019b7e:	9b00      	ldr	r3, [sp, #0]
90019b80:	4631      	mov	r1, r6
90019b82:	eb00 0b03 	add.w	fp, r0, r3
90019b86:	4558      	cmp	r0, fp
90019b88:	d24e      	bcs.n	90019c28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
90019b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
90019b8e:	b12b      	cbz	r3, 90019b9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
90019b90:	2bff      	cmp	r3, #255	; 0xff
90019b92:	f8b4 e000 	ldrh.w	lr, [r4]
90019b96:	d104      	bne.n	90019ba2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
90019b98:	f8a0 e000 	strh.w	lr, [r0]
90019b9c:	3002      	adds	r0, #2
90019b9e:	3402      	adds	r4, #2
90019ba0:	e7f1      	b.n	90019b86 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
90019ba2:	8802      	ldrh	r2, [r0, #0]
90019ba4:	b29f      	uxth	r7, r3
90019ba6:	43db      	mvns	r3, r3
90019ba8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019bac:	1216      	asrs	r6, r2, #8
90019bae:	b2db      	uxtb	r3, r3
90019bb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019bb4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019bb8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
90019bbc:	00d2      	lsls	r2, r2, #3
90019bbe:	fb16 f603 	smulbb	r6, r6, r3
90019bc2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90019bc6:	b2d2      	uxtb	r2, r2
90019bc8:	fb0c 6c07 	mla	ip, ip, r7, r6
90019bcc:	ea4f 06ee 	mov.w	r6, lr, asr #3
90019bd0:	fb1a fa03 	smulbb	sl, sl, r3
90019bd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019bd8:	fa1f fc8c 	uxth.w	ip, ip
90019bdc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90019be0:	fb12 f303 	smulbb	r3, r2, r3
90019be4:	fa5f fe8e 	uxtb.w	lr, lr
90019be8:	fb06 a607 	mla	r6, r6, r7, sl
90019bec:	f10c 0201 	add.w	r2, ip, #1
90019bf0:	fb0e 3307 	mla	r3, lr, r7, r3
90019bf4:	b2b6      	uxth	r6, r6
90019bf6:	b29b      	uxth	r3, r3
90019bf8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90019bfc:	f106 0a01 	add.w	sl, r6, #1
90019c00:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
90019c04:	f103 0c01 	add.w	ip, r3, #1
90019c08:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
90019c0c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019c10:	0976      	lsrs	r6, r6, #5
90019c12:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90019c16:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90019c1a:	ea4c 0c02 	orr.w	ip, ip, r2
90019c1e:	ea4c 0c06 	orr.w	ip, ip, r6
90019c22:	f8a0 c000 	strh.w	ip, [r0]
90019c26:	e7b9      	b.n	90019b9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
90019c28:	f8b9 3000 	ldrh.w	r3, [r9]
90019c2c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
90019c30:	eba3 0308 	sub.w	r3, r3, r8
90019c34:	eba6 0608 	sub.w	r6, r6, r8
90019c38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019c3c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
90019c40:	440e      	add	r6, r1
90019c42:	e79a      	b.n	90019b7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
90019c44:	4b03      	ldr	r3, [pc, #12]	; (90019c54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
90019c46:	6818      	ldr	r0, [r3, #0]
90019c48:	6803      	ldr	r3, [r0, #0]
90019c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019c4c:	4798      	blx	r3
90019c4e:	b007      	add	sp, #28
90019c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019c54:	2402620c 	.word	0x2402620c
90019c58:	24026206 	.word	0x24026206

90019c5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
90019c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019c60:	b089      	sub	sp, #36	; 0x24
90019c62:	4682      	mov	sl, r0
90019c64:	460f      	mov	r7, r1
90019c66:	4691      	mov	r9, r2
90019c68:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
90019c6c:	4698      	mov	r8, r3
90019c6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90019c70:	2e00      	cmp	r6, #0
90019c72:	d036      	beq.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019c74:	4608      	mov	r0, r1
90019c76:	f7fc f863 	bl	90015d40 <_ZNK8touchgfx6Bitmap8getWidthEv>
90019c7a:	4605      	mov	r5, r0
90019c7c:	4638      	mov	r0, r7
90019c7e:	f7fc f893 	bl	90015da8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90019c82:	f8ad 000e 	strh.w	r0, [sp, #14]
90019c86:	4638      	mov	r0, r7
90019c88:	f8ad 9008 	strh.w	r9, [sp, #8]
90019c8c:	f8ad 500c 	strh.w	r5, [sp, #12]
90019c90:	f8ad 800a 	strh.w	r8, [sp, #10]
90019c94:	f7fc f940 	bl	90015f18 <_ZNK8touchgfx6Bitmap7getDataEv>
90019c98:	4605      	mov	r5, r0
90019c9a:	4638      	mov	r0, r7
90019c9c:	f7fc f96c 	bl	90015f78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
90019ca0:	4681      	mov	r9, r0
90019ca2:	4638      	mov	r0, r7
90019ca4:	f7fc f9bc 	bl	90016020 <_ZNK8touchgfx6Bitmap9getFormatEv>
90019ca8:	280b      	cmp	r0, #11
90019caa:	d81a      	bhi.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019cac:	e8df f000 	tbb	[pc, r0]
90019cb0:	1906aebd 	.word	0x1906aebd
90019cb4:	19191919 	.word	0x19191919
90019cb8:	b5191919 	.word	0xb5191919
90019cbc:	4bb0      	ldr	r3, [pc, #704]	; (90019f80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
90019cbe:	6818      	ldr	r0, [r3, #0]
90019cc0:	6803      	ldr	r3, [r0, #0]
90019cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019cc4:	4798      	blx	r3
90019cc6:	2eff      	cmp	r6, #255	; 0xff
90019cc8:	d121      	bne.n	90019d0e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
90019cca:	0683      	lsls	r3, r0, #26
90019ccc:	d41f      	bmi.n	90019d0e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
90019cce:	4638      	mov	r0, r7
90019cd0:	f7fc f8ea 	bl	90015ea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90019cd4:	b940      	cbnz	r0, 90019ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
90019cd6:	4623      	mov	r3, r4
90019cd8:	aa02      	add	r2, sp, #8
90019cda:	4629      	mov	r1, r5
90019cdc:	4650      	mov	r0, sl
90019cde:	f7ff fa2f 	bl	90019140 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
90019ce2:	b009      	add	sp, #36	; 0x24
90019ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019ce8:	f10d 0818 	add.w	r8, sp, #24
90019cec:	4639      	mov	r1, r7
90019cee:	af04      	add	r7, sp, #16
90019cf0:	4640      	mov	r0, r8
90019cf2:	f7fc f88d 	bl	90015e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90019cf6:	e898 0003 	ldmia.w	r8, {r0, r1}
90019cfa:	e887 0003 	stmia.w	r7, {r0, r1}
90019cfe:	4638      	mov	r0, r7
90019d00:	4621      	mov	r1, r4
90019d02:	f7f6 f8f7 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90019d06:	4638      	mov	r0, r7
90019d08:	f7f6 f937 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90019d0c:	b130      	cbz	r0, 90019d1c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
90019d0e:	4633      	mov	r3, r6
90019d10:	4622      	mov	r2, r4
90019d12:	a902      	add	r1, sp, #8
90019d14:	4628      	mov	r0, r5
90019d16:	f7ff f92d 	bl	90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90019d1a:	e7e2      	b.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019d1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019d20:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019d24:	4293      	cmp	r3, r2
90019d26:	dd12      	ble.n	90019d4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
90019d28:	1a9b      	subs	r3, r3, r2
90019d2a:	f9b4 0000 	ldrsh.w	r0, [r4]
90019d2e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019d32:	f8ad 0018 	strh.w	r0, [sp, #24]
90019d36:	4628      	mov	r0, r5
90019d38:	f8ad 201a 	strh.w	r2, [sp, #26]
90019d3c:	4642      	mov	r2, r8
90019d3e:	f8ad 101c 	strh.w	r1, [sp, #28]
90019d42:	a902      	add	r1, sp, #8
90019d44:	f8ad 301e 	strh.w	r3, [sp, #30]
90019d48:	4633      	mov	r3, r6
90019d4a:	f7ff f913 	bl	90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90019d4e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
90019d52:	f9b4 2000 	ldrsh.w	r2, [r4]
90019d56:	4293      	cmp	r3, r2
90019d58:	dd12      	ble.n	90019d80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
90019d5a:	1a9b      	subs	r3, r3, r2
90019d5c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
90019d60:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
90019d64:	f8ad 2018 	strh.w	r2, [sp, #24]
90019d68:	4642      	mov	r2, r8
90019d6a:	f8ad 001a 	strh.w	r0, [sp, #26]
90019d6e:	4628      	mov	r0, r5
90019d70:	f8ad 301c 	strh.w	r3, [sp, #28]
90019d74:	23ff      	movs	r3, #255	; 0xff
90019d76:	f8ad 101e 	strh.w	r1, [sp, #30]
90019d7a:	a902      	add	r1, sp, #8
90019d7c:	f7ff f8fa 	bl	90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90019d80:	463b      	mov	r3, r7
90019d82:	aa02      	add	r2, sp, #8
90019d84:	4629      	mov	r1, r5
90019d86:	4650      	mov	r0, sl
90019d88:	f7ff f9da 	bl	90019140 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
90019d8c:	88a2      	ldrh	r2, [r4, #4]
90019d8e:	8823      	ldrh	r3, [r4, #0]
90019d90:	f8bd 1014 	ldrh.w	r1, [sp, #20]
90019d94:	4413      	add	r3, r2
90019d96:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90019d9a:	440a      	add	r2, r1
90019d9c:	b29b      	uxth	r3, r3
90019d9e:	b292      	uxth	r2, r2
90019da0:	b218      	sxth	r0, r3
90019da2:	b211      	sxth	r1, r2
90019da4:	4288      	cmp	r0, r1
90019da6:	dd12      	ble.n	90019dce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
90019da8:	1a9b      	subs	r3, r3, r2
90019daa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
90019dae:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
90019db2:	4642      	mov	r2, r8
90019db4:	f8ad 1018 	strh.w	r1, [sp, #24]
90019db8:	a902      	add	r1, sp, #8
90019dba:	f8ad 301c 	strh.w	r3, [sp, #28]
90019dbe:	23ff      	movs	r3, #255	; 0xff
90019dc0:	f8ad 001e 	strh.w	r0, [sp, #30]
90019dc4:	4628      	mov	r0, r5
90019dc6:	f8ad 601a 	strh.w	r6, [sp, #26]
90019dca:	f7ff f8d3 	bl	90018f74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90019dce:	88e2      	ldrh	r2, [r4, #6]
90019dd0:	8863      	ldrh	r3, [r4, #2]
90019dd2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
90019dd6:	4413      	add	r3, r2
90019dd8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
90019ddc:	440a      	add	r2, r1
90019dde:	b29b      	uxth	r3, r3
90019de0:	b292      	uxth	r2, r2
90019de2:	b218      	sxth	r0, r3
90019de4:	b211      	sxth	r1, r2
90019de6:	4288      	cmp	r0, r1
90019de8:	f77f af7b 	ble.w	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019dec:	1a9b      	subs	r3, r3, r2
90019dee:	f9b4 6000 	ldrsh.w	r6, [r4]
90019df2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019df6:	4642      	mov	r2, r8
90019df8:	f8ad 301e 	strh.w	r3, [sp, #30]
90019dfc:	23ff      	movs	r3, #255	; 0xff
90019dfe:	f8ad 6018 	strh.w	r6, [sp, #24]
90019e02:	f8ad 101a 	strh.w	r1, [sp, #26]
90019e06:	f8ad 001c 	strh.w	r0, [sp, #28]
90019e0a:	e782      	b.n	90019d12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
90019e0c:	4633      	mov	r3, r6
90019e0e:	4622      	mov	r2, r4
90019e10:	a902      	add	r1, sp, #8
90019e12:	4628      	mov	r0, r5
90019e14:	f7ff fa04 	bl	90019220 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
90019e18:	e763      	b.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019e1a:	9600      	str	r6, [sp, #0]
90019e1c:	4623      	mov	r3, r4
90019e1e:	aa02      	add	r2, sp, #8
90019e20:	4649      	mov	r1, r9
90019e22:	4628      	mov	r0, r5
90019e24:	f7ff fddc 	bl	900199e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
90019e28:	e75b      	b.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019e2a:	4638      	mov	r0, r7
90019e2c:	f7fc f83c 	bl	90015ea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90019e30:	b950      	cbnz	r0, 90019e48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
90019e32:	f8da 3000 	ldr.w	r3, [sl]
90019e36:	aa02      	add	r2, sp, #8
90019e38:	4629      	mov	r1, r5
90019e3a:	e9cd 6000 	strd	r6, r0, [sp]
90019e3e:	4650      	mov	r0, sl
90019e40:	68de      	ldr	r6, [r3, #12]
90019e42:	4623      	mov	r3, r4
90019e44:	47b0      	blx	r6
90019e46:	e74c      	b.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019e48:	f10d 0818 	add.w	r8, sp, #24
90019e4c:	4639      	mov	r1, r7
90019e4e:	af04      	add	r7, sp, #16
90019e50:	4640      	mov	r0, r8
90019e52:	f7fb ffdd 	bl	90015e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90019e56:	e898 0003 	ldmia.w	r8, {r0, r1}
90019e5a:	e887 0003 	stmia.w	r7, {r0, r1}
90019e5e:	4638      	mov	r0, r7
90019e60:	4621      	mov	r1, r4
90019e62:	f7f6 f847 	bl	9000fef4 <_ZN8touchgfx4RectaNERKS0_>
90019e66:	4638      	mov	r0, r7
90019e68:	f7f6 f887 	bl	9000ff7a <_ZNK8touchgfx4Rect7isEmptyEv>
90019e6c:	b138      	cbz	r0, 90019e7e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
90019e6e:	4623      	mov	r3, r4
90019e70:	9600      	str	r6, [sp, #0]
90019e72:	aa02      	add	r2, sp, #8
90019e74:	4649      	mov	r1, r9
90019e76:	4628      	mov	r0, r5
90019e78:	f7ff fdca 	bl	90019a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019e7c:	e731      	b.n	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019e7e:	f8da 3000 	ldr.w	r3, [sl]
90019e82:	aa02      	add	r2, sp, #8
90019e84:	4629      	mov	r1, r5
90019e86:	e9cd 6000 	strd	r6, r0, [sp]
90019e8a:	4650      	mov	r0, sl
90019e8c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
90019e90:	463b      	mov	r3, r7
90019e92:	47d8      	blx	fp
90019e94:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019e98:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019e9c:	4293      	cmp	r3, r2
90019e9e:	dd13      	ble.n	90019ec8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
90019ea0:	f9b4 0000 	ldrsh.w	r0, [r4]
90019ea4:	1a9b      	subs	r3, r3, r2
90019ea6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019eaa:	f8ad 0018 	strh.w	r0, [sp, #24]
90019eae:	4628      	mov	r0, r5
90019eb0:	f8ad 201a 	strh.w	r2, [sp, #26]
90019eb4:	aa02      	add	r2, sp, #8
90019eb6:	f8ad 101c 	strh.w	r1, [sp, #28]
90019eba:	4649      	mov	r1, r9
90019ebc:	f8ad 301e 	strh.w	r3, [sp, #30]
90019ec0:	4643      	mov	r3, r8
90019ec2:	9600      	str	r6, [sp, #0]
90019ec4:	f7ff fda4 	bl	90019a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019ec8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
90019ecc:	f9b4 2000 	ldrsh.w	r2, [r4]
90019ed0:	4293      	cmp	r3, r2
90019ed2:	dd13      	ble.n	90019efc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
90019ed4:	1a9b      	subs	r3, r3, r2
90019ed6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
90019eda:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
90019ede:	f8ad 2018 	strh.w	r2, [sp, #24]
90019ee2:	aa02      	add	r2, sp, #8
90019ee4:	f8ad 001a 	strh.w	r0, [sp, #26]
90019ee8:	4628      	mov	r0, r5
90019eea:	f8ad 301c 	strh.w	r3, [sp, #28]
90019eee:	4643      	mov	r3, r8
90019ef0:	f8ad 101e 	strh.w	r1, [sp, #30]
90019ef4:	4649      	mov	r1, r9
90019ef6:	9600      	str	r6, [sp, #0]
90019ef8:	f7ff fd8a 	bl	90019a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019efc:	88a2      	ldrh	r2, [r4, #4]
90019efe:	8823      	ldrh	r3, [r4, #0]
90019f00:	f8bd 1014 	ldrh.w	r1, [sp, #20]
90019f04:	4413      	add	r3, r2
90019f06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90019f0a:	440a      	add	r2, r1
90019f0c:	b29b      	uxth	r3, r3
90019f0e:	b292      	uxth	r2, r2
90019f10:	b218      	sxth	r0, r3
90019f12:	b211      	sxth	r1, r2
90019f14:	4288      	cmp	r0, r1
90019f16:	dd13      	ble.n	90019f40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
90019f18:	1a9b      	subs	r3, r3, r2
90019f1a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
90019f1e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
90019f22:	aa02      	add	r2, sp, #8
90019f24:	f8ad 1018 	strh.w	r1, [sp, #24]
90019f28:	4649      	mov	r1, r9
90019f2a:	f8ad 301c 	strh.w	r3, [sp, #28]
90019f2e:	4643      	mov	r3, r8
90019f30:	f8ad 001e 	strh.w	r0, [sp, #30]
90019f34:	4628      	mov	r0, r5
90019f36:	9600      	str	r6, [sp, #0]
90019f38:	f8ad 701a 	strh.w	r7, [sp, #26]
90019f3c:	f7ff fd68 	bl	90019a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019f40:	88e2      	ldrh	r2, [r4, #6]
90019f42:	8863      	ldrh	r3, [r4, #2]
90019f44:	f8bd 1016 	ldrh.w	r1, [sp, #22]
90019f48:	4413      	add	r3, r2
90019f4a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
90019f4e:	440a      	add	r2, r1
90019f50:	b29b      	uxth	r3, r3
90019f52:	b292      	uxth	r2, r2
90019f54:	b218      	sxth	r0, r3
90019f56:	b211      	sxth	r1, r2
90019f58:	4288      	cmp	r0, r1
90019f5a:	f77f aec2 	ble.w	90019ce2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019f5e:	f9b4 7000 	ldrsh.w	r7, [r4]
90019f62:	1a9b      	subs	r3, r3, r2
90019f64:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019f68:	f8ad 301e 	strh.w	r3, [sp, #30]
90019f6c:	4643      	mov	r3, r8
90019f6e:	f8ad 7018 	strh.w	r7, [sp, #24]
90019f72:	f8ad 101a 	strh.w	r1, [sp, #26]
90019f76:	f8ad 001c 	strh.w	r0, [sp, #28]
90019f7a:	9600      	str	r6, [sp, #0]
90019f7c:	e779      	b.n	90019e72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
90019f7e:	bf00      	nop
90019f80:	2402620c 	.word	0x2402620c

90019f84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
90019f84:	b180      	cbz	r0, 90019fa8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
90019f86:	2903      	cmp	r1, #3
90019f88:	d81c      	bhi.n	90019fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
90019f8a:	e8df f001 	tbb	[pc, r1]
90019f8e:	1d02      	.short	0x1d02
90019f90:	1f08      	.short	0x1f08
90019f92:	4b10      	ldr	r3, [pc, #64]	; (90019fd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90019f94:	8818      	ldrh	r0, [r3, #0]
90019f96:	f3c0 000e 	ubfx	r0, r0, #0, #15
90019f9a:	4240      	negs	r0, r0
90019f9c:	4770      	bx	lr
90019f9e:	4b0d      	ldr	r3, [pc, #52]	; (90019fd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90019fa0:	8818      	ldrh	r0, [r3, #0]
90019fa2:	f3c0 000e 	ubfx	r0, r0, #0, #15
90019fa6:	4770      	bx	lr
90019fa8:	2903      	cmp	r1, #3
90019faa:	d80b      	bhi.n	90019fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
90019fac:	a301      	add	r3, pc, #4	; (adr r3, 90019fb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
90019fae:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
90019fb2:	bf00      	nop
90019fb4:	90019fc9 	.word	0x90019fc9
90019fb8:	90019f9f 	.word	0x90019f9f
90019fbc:	90019fcd 	.word	0x90019fcd
90019fc0:	90019f93 	.word	0x90019f93
90019fc4:	2000      	movs	r0, #0
90019fc6:	4770      	bx	lr
90019fc8:	2001      	movs	r0, #1
90019fca:	4770      	bx	lr
90019fcc:	f04f 30ff 	mov.w	r0, #4294967295
90019fd0:	4770      	bx	lr
90019fd2:	bf00      	nop
90019fd4:	24026206 	.word	0x24026206

90019fd8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
90019fd8:	b180      	cbz	r0, 90019ffc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
90019fda:	2903      	cmp	r1, #3
90019fdc:	d81c      	bhi.n	9001a018 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
90019fde:	e8df f001 	tbb	[pc, r1]
90019fe2:	021d      	.short	0x021d
90019fe4:	071f      	.short	0x071f
90019fe6:	4b10      	ldr	r3, [pc, #64]	; (9001a028 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
90019fe8:	8818      	ldrh	r0, [r3, #0]
90019fea:	f3c0 000e 	ubfx	r0, r0, #0, #15
90019fee:	4770      	bx	lr
90019ff0:	4b0d      	ldr	r3, [pc, #52]	; (9001a028 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
90019ff2:	8818      	ldrh	r0, [r3, #0]
90019ff4:	f3c0 000e 	ubfx	r0, r0, #0, #15
90019ff8:	4240      	negs	r0, r0
90019ffa:	4770      	bx	lr
90019ffc:	2903      	cmp	r1, #3
90019ffe:	d80b      	bhi.n	9001a018 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001a000:	a301      	add	r3, pc, #4	; (adr r3, 9001a008 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001a002:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001a006:	bf00      	nop
9001a008:	90019fe7 	.word	0x90019fe7
9001a00c:	9001a021 	.word	0x9001a021
9001a010:	90019ff1 	.word	0x90019ff1
9001a014:	9001a01d 	.word	0x9001a01d
9001a018:	2000      	movs	r0, #0
9001a01a:	4770      	bx	lr
9001a01c:	2001      	movs	r0, #1
9001a01e:	4770      	bx	lr
9001a020:	f04f 30ff 	mov.w	r0, #4294967295
9001a024:	4770      	bx	lr
9001a026:	bf00      	nop
9001a028:	24026206 	.word	0x24026206

9001a02c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a030:	b099      	sub	sp, #100	; 0x64
9001a032:	910b      	str	r1, [sp, #44]	; 0x2c
9001a034:	a914      	add	r1, sp, #80	; 0x50
9001a036:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001a03a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001a03e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001a042:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001a046:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001a04a:	e881 000c 	stmia.w	r1, {r2, r3}
9001a04e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001a052:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001a056:	9309      	str	r3, [sp, #36]	; 0x24
9001a058:	f891 900d 	ldrb.w	r9, [r1, #13]
9001a05c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001a060:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001a064:	9310      	str	r3, [sp, #64]	; 0x40
9001a066:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001a06a:	930c      	str	r3, [sp, #48]	; 0x30
9001a06c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001a070:	798f      	ldrb	r7, [r1, #6]
9001a072:	431f      	orrs	r7, r3
9001a074:	f000 8195 	beq.w	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a078:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001a07c:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001a080:	f891 9007 	ldrb.w	r9, [r1, #7]
9001a084:	ea59 0903 	orrs.w	r9, r9, r3
9001a088:	f000 818b 	beq.w	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a08c:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001a090:	b29b      	uxth	r3, r3
9001a092:	2d00      	cmp	r5, #0
9001a094:	f000 812e 	beq.w	9001a2f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001a098:	1aed      	subs	r5, r5, r3
9001a09a:	b2ad      	uxth	r5, r5
9001a09c:	042b      	lsls	r3, r5, #16
9001a09e:	d502      	bpl.n	9001a0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001a0a0:	1b64      	subs	r4, r4, r5
9001a0a2:	2500      	movs	r5, #0
9001a0a4:	b224      	sxth	r4, r4
9001a0a6:	f9b2 1000 	ldrsh.w	r1, [r2]
9001a0aa:	a814      	add	r0, sp, #80	; 0x50
9001a0ac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001a0b0:	428c      	cmp	r4, r1
9001a0b2:	b28b      	uxth	r3, r1
9001a0b4:	bfbf      	itttt	lt
9001a0b6:	18ed      	addlt	r5, r5, r3
9001a0b8:	1b2c      	sublt	r4, r5, r4
9001a0ba:	b2a5      	uxthlt	r5, r4
9001a0bc:	460c      	movlt	r4, r1
9001a0be:	8891      	ldrh	r1, [r2, #4]
9001a0c0:	440b      	add	r3, r1
9001a0c2:	4621      	mov	r1, r4
9001a0c4:	b21b      	sxth	r3, r3
9001a0c6:	930f      	str	r3, [sp, #60]	; 0x3c
9001a0c8:	88d3      	ldrh	r3, [r2, #6]
9001a0ca:	8852      	ldrh	r2, [r2, #2]
9001a0cc:	4413      	add	r3, r2
9001a0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001a0d0:	b21b      	sxth	r3, r3
9001a0d2:	930d      	str	r3, [sp, #52]	; 0x34
9001a0d4:	4bbd      	ldr	r3, [pc, #756]	; (9001a3cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001a0d6:	f893 b000 	ldrb.w	fp, [r3]
9001a0da:	f10b 3cff 	add.w	ip, fp, #4294967295
9001a0de:	f1dc 0300 	rsbs	r3, ip, #0
9001a0e2:	eb43 030c 	adc.w	r3, r3, ip
9001a0e6:	930e      	str	r3, [sp, #56]	; 0x38
9001a0e8:	4653      	mov	r3, sl
9001a0ea:	f7f8 fb07 	bl	900126fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001a0ee:	4621      	mov	r1, r4
9001a0f0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001a0f4:	4653      	mov	r3, sl
9001a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001a0f8:	a814      	add	r0, sp, #80	; 0x50
9001a0fa:	f7f8 fb1c 	bl	90012736 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001a0fe:	a918      	add	r1, sp, #96	; 0x60
9001a100:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001a104:	a817      	add	r0, sp, #92	; 0x5c
9001a106:	f7f8 fc3d 	bl	90012984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001a10a:	f1ba 0f00 	cmp.w	sl, #0
9001a10e:	f040 80f4 	bne.w	9001a2fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001a112:	f1bb 0f01 	cmp.w	fp, #1
9001a116:	f040 80f8 	bne.w	9001a30a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001a11a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a11c:	2b00      	cmp	r3, #0
9001a11e:	f040 8145 	bne.w	9001a3ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001a122:	b2ba      	uxth	r2, r7
9001a124:	b905      	cbnz	r5, 9001a128 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001a126:	b16e      	cbz	r6, 9001a144 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001a128:	fb06 5302 	mla	r3, r6, r2, r5
9001a12c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001a12e:	4631      	mov	r1, r6
9001a130:	fb08 f303 	mul.w	r3, r8, r3
9001a134:	f003 0607 	and.w	r6, r3, #7
9001a138:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001a13c:	9328      	str	r3, [sp, #160]	; 0xa0
9001a13e:	eba9 0301 	sub.w	r3, r9, r1
9001a142:	930a      	str	r3, [sp, #40]	; 0x28
9001a144:	4651      	mov	r1, sl
9001a146:	980e      	ldr	r0, [sp, #56]	; 0x38
9001a148:	f7ff ff1c 	bl	90019f84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001a14c:	4681      	mov	r9, r0
9001a14e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001a150:	f7ff ff42 	bl	90019fd8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001a154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001a156:	9909      	ldr	r1, [sp, #36]	; 0x24
9001a158:	4683      	mov	fp, r0
9001a15a:	eba3 0a01 	sub.w	sl, r3, r1
9001a15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001a160:	459a      	cmp	sl, r3
9001a162:	bfa8      	it	ge
9001a164:	469a      	movge	sl, r3
9001a166:	f1ba 0f00 	cmp.w	sl, #0
9001a16a:	f340 811a 	ble.w	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a16e:	1b64      	subs	r4, r4, r5
9001a170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001a172:	1b1c      	subs	r4, r3, r4
9001a174:	42bc      	cmp	r4, r7
9001a176:	bfd4      	ite	le
9001a178:	ebc5 0504 	rsble	r5, r5, r4
9001a17c:	ebc5 0507 	rsbgt	r5, r5, r7
9001a180:	2d00      	cmp	r5, #0
9001a182:	f340 810e 	ble.w	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a186:	1b52      	subs	r2, r2, r5
9001a188:	fb08 f302 	mul.w	r3, r8, r2
9001a18c:	930f      	str	r3, [sp, #60]	; 0x3c
9001a18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001a190:	2b00      	cmp	r3, #0
9001a192:	f040 8116 	bne.w	9001a3c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001a196:	4b8e      	ldr	r3, [pc, #568]	; (9001a3d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001a198:	6818      	ldr	r0, [r3, #0]
9001a19a:	6803      	ldr	r3, [r0, #0]
9001a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a19e:	4798      	blx	r3
9001a1a0:	2301      	movs	r3, #1
9001a1a2:	4a8c      	ldr	r2, [pc, #560]	; (9001a3d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001a1a4:	fa03 f308 	lsl.w	r3, r3, r8
9001a1a8:	8811      	ldrh	r1, [r2, #0]
9001a1aa:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001a1ae:	3b01      	subs	r3, #1
9001a1b0:	b2db      	uxtb	r3, r3
9001a1b2:	930e      	str	r3, [sp, #56]	; 0x38
9001a1b4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001a1b8:	fb01 2303 	mla	r3, r1, r3, r2
9001a1bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a1c0:	930a      	str	r3, [sp, #40]	; 0x28
9001a1c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a1c4:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001a1c8:	9313      	str	r3, [sp, #76]	; 0x4c
9001a1ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a1cc:	0a19      	lsrs	r1, r3, #8
9001a1ce:	b2cb      	uxtb	r3, r1
9001a1d0:	9312      	str	r3, [sp, #72]	; 0x48
9001a1d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a1d4:	b2db      	uxtb	r3, r3
9001a1d6:	9311      	str	r3, [sp, #68]	; 0x44
9001a1d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a1da:	095a      	lsrs	r2, r3, #5
9001a1dc:	4b7e      	ldr	r3, [pc, #504]	; (9001a3d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001a1de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001a1e2:	400b      	ands	r3, r1
9001a1e4:	4313      	orrs	r3, r2
9001a1e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001a1e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001a1ec:	4313      	orrs	r3, r2
9001a1ee:	b29b      	uxth	r3, r3
9001a1f0:	9310      	str	r3, [sp, #64]	; 0x40
9001a1f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001a1f4:	781a      	ldrb	r2, [r3, #0]
9001a1f6:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001a1fa:	fb05 b919 	mls	r9, r5, r9, fp
9001a1fe:	4132      	asrs	r2, r6
9001a200:	fb03 fb05 	mul.w	fp, r3, r5
9001a204:	930d      	str	r3, [sp, #52]	; 0x34
9001a206:	b2d2      	uxtb	r2, r2
9001a208:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001a20c:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001a210:	f0c0 80f5 	bcc.w	9001a3fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001a214:	46ae      	mov	lr, r5
9001a216:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001a21a:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001a21e:	f0c0 80dd 	bcc.w	9001a3dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001a222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001a224:	4013      	ands	r3, r2
9001a226:	d055      	beq.n	9001a2d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001a228:	20ff      	movs	r0, #255	; 0xff
9001a22a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001a22c:	fb90 f1f1 	sdiv	r1, r0, r1
9001a230:	434b      	muls	r3, r1
9001a232:	2bfe      	cmp	r3, #254	; 0xfe
9001a234:	dd03      	ble.n	9001a23e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001a236:	990c      	ldr	r1, [sp, #48]	; 0x30
9001a238:	4281      	cmp	r1, r0
9001a23a:	f000 80c4 	beq.w	9001a3c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001a23e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001a240:	f8bc 4000 	ldrh.w	r4, [ip]
9001a244:	fb11 f303 	smulbb	r3, r1, r3
9001a248:	1220      	asrs	r0, r4, #8
9001a24a:	b29b      	uxth	r3, r3
9001a24c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001a250:	1c59      	adds	r1, r3, #1
9001a252:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001a256:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001a25a:	10e1      	asrs	r1, r4, #3
9001a25c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001a260:	00e4      	lsls	r4, r4, #3
9001a262:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001a266:	b29f      	uxth	r7, r3
9001a268:	43db      	mvns	r3, r3
9001a26a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001a26e:	b2db      	uxtb	r3, r3
9001a270:	b2e4      	uxtb	r4, r4
9001a272:	9309      	str	r3, [sp, #36]	; 0x24
9001a274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001a276:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a27a:	fb13 f907 	smulbb	r9, r3, r7
9001a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a280:	fb00 9003 	mla	r0, r0, r3, r9
9001a284:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001a286:	fb13 f907 	smulbb	r9, r3, r7
9001a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a28c:	b280      	uxth	r0, r0
9001a28e:	fb01 9103 	mla	r1, r1, r3, r9
9001a292:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001a294:	fb13 f707 	smulbb	r7, r3, r7
9001a298:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a29a:	b289      	uxth	r1, r1
9001a29c:	fb04 7403 	mla	r4, r4, r3, r7
9001a2a0:	1c43      	adds	r3, r0, #1
9001a2a2:	b2a4      	uxth	r4, r4
9001a2a4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001a2a8:	f104 0901 	add.w	r9, r4, #1
9001a2ac:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001a2b0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001a2b4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001a2b8:	ea49 0000 	orr.w	r0, r9, r0
9001a2bc:	f101 0901 	add.w	r9, r1, #1
9001a2c0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001a2c4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001a2c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001a2cc:	ea40 0009 	orr.w	r0, r0, r9
9001a2d0:	f8ac 0000 	strh.w	r0, [ip]
9001a2d4:	4446      	add	r6, r8
9001a2d6:	b2b6      	uxth	r6, r6
9001a2d8:	2e07      	cmp	r6, #7
9001a2da:	bf89      	itett	hi
9001a2dc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001a2de:	fa42 f208 	asrls.w	r2, r2, r8
9001a2e2:	2600      	movhi	r6, #0
9001a2e4:	785a      	ldrbhi	r2, [r3, #1]
9001a2e6:	bf8a      	itet	hi
9001a2e8:	3301      	addhi	r3, #1
9001a2ea:	b2d2      	uxtbls	r2, r2
9001a2ec:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001a2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001a2f0:	449c      	add	ip, r3
9001a2f2:	e792      	b.n	9001a21a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001a2f4:	441c      	add	r4, r3
9001a2f6:	b224      	sxth	r4, r4
9001a2f8:	e6d5      	b.n	9001a0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001a2fa:	f1ba 0f01 	cmp.w	sl, #1
9001a2fe:	f47f af0c 	bne.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a302:	f1bb 0f01 	cmp.w	fp, #1
9001a306:	f47f af08 	bne.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a30a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001a3d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001a30e:	f8db 0000 	ldr.w	r0, [fp]
9001a312:	6803      	ldr	r3, [r0, #0]
9001a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a316:	4798      	blx	r3
9001a318:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001a31c:	465a      	mov	r2, fp
9001a31e:	d006      	beq.n	9001a32e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001a320:	f1b8 0f04 	cmp.w	r8, #4
9001a324:	d140      	bne.n	9001a3a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001a326:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a328:	3300      	adds	r3, #0
9001a32a:	bf18      	it	ne
9001a32c:	2301      	movne	r3, #1
9001a32e:	0580      	lsls	r0, r0, #22
9001a330:	d56e      	bpl.n	9001a410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001a332:	f1b8 0f08 	cmp.w	r8, #8
9001a336:	d16b      	bne.n	9001a410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001a338:	2b00      	cmp	r3, #0
9001a33a:	bf0c      	ite	eq
9001a33c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001a340:	f44f 7180 	movne.w	r1, #256	; 0x100
9001a344:	2d00      	cmp	r5, #0
9001a346:	f47f aee8 	bne.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a34a:	2e00      	cmp	r6, #0
9001a34c:	f47f aee5 	bne.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a350:	19e3      	adds	r3, r4, r7
9001a352:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001a354:	4283      	cmp	r3, r0
9001a356:	f73f aee0 	bgt.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a35c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001a35e:	444b      	add	r3, r9
9001a360:	4283      	cmp	r3, r0
9001a362:	f73f aeda 	bgt.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a366:	b2bf      	uxth	r7, r7
9001a368:	f1b8 0f08 	cmp.w	r8, #8
9001a36c:	6810      	ldr	r0, [r2, #0]
9001a36e:	f04f 0500 	mov.w	r5, #0
9001a372:	bf18      	it	ne
9001a374:	3701      	addne	r7, #1
9001a376:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001a37a:	6804      	ldr	r4, [r0, #0]
9001a37c:	bf18      	it	ne
9001a37e:	f027 0701 	bicne.w	r7, r7, #1
9001a382:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001a386:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001a38a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001a38c:	bf18      	it	ne
9001a38e:	b2bf      	uxthne	r7, r7
9001a390:	9104      	str	r1, [sp, #16]
9001a392:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001a394:	e9cd 7900 	strd	r7, r9, [sp]
9001a398:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001a39c:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001a39e:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001a3a0:	47a0      	blx	r4
9001a3a2:	b019      	add	sp, #100	; 0x64
9001a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a3a8:	2300      	movs	r3, #0
9001a3aa:	e7c0      	b.n	9001a32e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001a3ac:	2208      	movs	r2, #8
9001a3ae:	fb92 f3f8 	sdiv	r3, r2, r8
9001a3b2:	1e5a      	subs	r2, r3, #1
9001a3b4:	443a      	add	r2, r7
9001a3b6:	fb92 f2f3 	sdiv	r2, r2, r3
9001a3ba:	fb12 f203 	smulbb	r2, r2, r3
9001a3be:	b292      	uxth	r2, r2
9001a3c0:	e6b0      	b.n	9001a124 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001a3c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001a3c4:	e6ec      	b.n	9001a1a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001a3c6:	9810      	ldr	r0, [sp, #64]	; 0x40
9001a3c8:	e782      	b.n	9001a2d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001a3ca:	bf00      	nop
9001a3cc:	24026204 	.word	0x24026204
9001a3d0:	2402620c 	.word	0x2402620c
9001a3d4:	24026206 	.word	0x24026206
9001a3d8:	00fff800 	.word	0x00fff800
9001a3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001a3de:	b153      	cbz	r3, 9001a3f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001a3e0:	441e      	add	r6, r3
9001a3e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001a3e4:	b2b6      	uxth	r6, r6
9001a3e6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001a3ea:	f006 0607 	and.w	r6, r6, #7
9001a3ee:	781a      	ldrb	r2, [r3, #0]
9001a3f0:	9328      	str	r3, [sp, #160]	; 0xa0
9001a3f2:	4132      	asrs	r2, r6
9001a3f4:	b2d2      	uxtb	r2, r2
9001a3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001a3f8:	445b      	add	r3, fp
9001a3fa:	930a      	str	r3, [sp, #40]	; 0x28
9001a3fc:	e706      	b.n	9001a20c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001a3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001a400:	2b00      	cmp	r3, #0
9001a402:	d1ce      	bne.n	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a404:	4b05      	ldr	r3, [pc, #20]	; (9001a41c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001a406:	6818      	ldr	r0, [r3, #0]
9001a408:	6803      	ldr	r3, [r0, #0]
9001a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a40c:	4798      	blx	r3
9001a40e:	e7c8      	b.n	9001a3a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001a410:	2b00      	cmp	r3, #0
9001a412:	f43f ae82 	beq.w	9001a11a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001a416:	f44f 7180 	mov.w	r1, #256	; 0x100
9001a41a:	e793      	b.n	9001a344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001a41c:	2402620c 	.word	0x2402620c

9001a420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001a420:	b538      	push	{r3, r4, r5, lr}
9001a422:	4c15      	ldr	r4, [pc, #84]	; (9001a478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001a424:	4605      	mov	r5, r0
9001a426:	7823      	ldrb	r3, [r4, #0]
9001a428:	f3bf 8f5b 	dmb	ish
9001a42c:	07da      	lsls	r2, r3, #31
9001a42e:	d40b      	bmi.n	9001a448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001a430:	4620      	mov	r0, r4
9001a432:	f007 fa68 	bl	90021906 <__cxa_guard_acquire>
9001a436:	b138      	cbz	r0, 9001a448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001a438:	4620      	mov	r0, r4
9001a43a:	f007 fa70 	bl	9002191e <__cxa_guard_release>
9001a43e:	4a0f      	ldr	r2, [pc, #60]	; (9001a47c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001a440:	490f      	ldr	r1, [pc, #60]	; (9001a480 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001a442:	4810      	ldr	r0, [pc, #64]	; (9001a484 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001a444:	f007 fa58 	bl	900218f8 <__aeabi_atexit>
9001a448:	4c0f      	ldr	r4, [pc, #60]	; (9001a488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001a44a:	7823      	ldrb	r3, [r4, #0]
9001a44c:	f3bf 8f5b 	dmb	ish
9001a450:	07db      	lsls	r3, r3, #31
9001a452:	d40b      	bmi.n	9001a46c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001a454:	4620      	mov	r0, r4
9001a456:	f007 fa56 	bl	90021906 <__cxa_guard_acquire>
9001a45a:	b138      	cbz	r0, 9001a46c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001a45c:	4620      	mov	r0, r4
9001a45e:	f007 fa5e 	bl	9002191e <__cxa_guard_release>
9001a462:	4a06      	ldr	r2, [pc, #24]	; (9001a47c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001a464:	4909      	ldr	r1, [pc, #36]	; (9001a48c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001a466:	480a      	ldr	r0, [pc, #40]	; (9001a490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001a468:	f007 fa46 	bl	900218f8 <__aeabi_atexit>
9001a46c:	4b05      	ldr	r3, [pc, #20]	; (9001a484 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001a46e:	612b      	str	r3, [r5, #16]
9001a470:	4b07      	ldr	r3, [pc, #28]	; (9001a490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001a472:	616b      	str	r3, [r5, #20]
9001a474:	bd38      	pop	{r3, r4, r5, pc}
9001a476:	bf00      	nop
9001a478:	240262d8 	.word	0x240262d8
9001a47c:	24000000 	.word	0x24000000
9001a480:	9001862d 	.word	0x9001862d
9001a484:	240000ac 	.word	0x240000ac
9001a488:	240262dc 	.word	0x240262dc
9001a48c:	9001862b 	.word	0x9001862b
9001a490:	240000b0 	.word	0x240000b0

9001a494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001a494:	b538      	push	{r3, r4, r5, lr}
9001a496:	4c15      	ldr	r4, [pc, #84]	; (9001a4ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001a498:	4605      	mov	r5, r0
9001a49a:	7823      	ldrb	r3, [r4, #0]
9001a49c:	f3bf 8f5b 	dmb	ish
9001a4a0:	07da      	lsls	r2, r3, #31
9001a4a2:	d40b      	bmi.n	9001a4bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001a4a4:	4620      	mov	r0, r4
9001a4a6:	f007 fa2e 	bl	90021906 <__cxa_guard_acquire>
9001a4aa:	b138      	cbz	r0, 9001a4bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001a4ac:	4620      	mov	r0, r4
9001a4ae:	f007 fa36 	bl	9002191e <__cxa_guard_release>
9001a4b2:	4a0f      	ldr	r2, [pc, #60]	; (9001a4f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001a4b4:	490f      	ldr	r1, [pc, #60]	; (9001a4f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001a4b6:	4810      	ldr	r0, [pc, #64]	; (9001a4f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001a4b8:	f007 fa1e 	bl	900218f8 <__aeabi_atexit>
9001a4bc:	4c0f      	ldr	r4, [pc, #60]	; (9001a4fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001a4be:	7823      	ldrb	r3, [r4, #0]
9001a4c0:	f3bf 8f5b 	dmb	ish
9001a4c4:	07db      	lsls	r3, r3, #31
9001a4c6:	d40b      	bmi.n	9001a4e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001a4c8:	4620      	mov	r0, r4
9001a4ca:	f007 fa1c 	bl	90021906 <__cxa_guard_acquire>
9001a4ce:	b138      	cbz	r0, 9001a4e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001a4d0:	4620      	mov	r0, r4
9001a4d2:	f007 fa24 	bl	9002191e <__cxa_guard_release>
9001a4d6:	4a06      	ldr	r2, [pc, #24]	; (9001a4f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001a4d8:	4909      	ldr	r1, [pc, #36]	; (9001a500 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001a4da:	480a      	ldr	r0, [pc, #40]	; (9001a504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001a4dc:	f007 fa0c 	bl	900218f8 <__aeabi_atexit>
9001a4e0:	4b05      	ldr	r3, [pc, #20]	; (9001a4f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001a4e2:	60ab      	str	r3, [r5, #8]
9001a4e4:	4b07      	ldr	r3, [pc, #28]	; (9001a504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001a4e6:	60eb      	str	r3, [r5, #12]
9001a4e8:	bd38      	pop	{r3, r4, r5, pc}
9001a4ea:	bf00      	nop
9001a4ec:	240262b0 	.word	0x240262b0
9001a4f0:	24000000 	.word	0x24000000
9001a4f4:	90018631 	.word	0x90018631
9001a4f8:	24000084 	.word	0x24000084
9001a4fc:	240262b4 	.word	0x240262b4
9001a500:	9001862f 	.word	0x9001862f
9001a504:	24000088 	.word	0x24000088

9001a508 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001a508:	b510      	push	{r4, lr}
9001a50a:	4604      	mov	r4, r0
9001a50c:	f7ff ff88 	bl	9001a420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001a510:	4620      	mov	r0, r4
9001a512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a516:	f7ff bfbd 	b.w	9001a494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001a51c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001a51c:	b538      	push	{r3, r4, r5, lr}
9001a51e:	4c15      	ldr	r4, [pc, #84]	; (9001a574 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001a520:	4605      	mov	r5, r0
9001a522:	7823      	ldrb	r3, [r4, #0]
9001a524:	f3bf 8f5b 	dmb	ish
9001a528:	07da      	lsls	r2, r3, #31
9001a52a:	d40b      	bmi.n	9001a544 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001a52c:	4620      	mov	r0, r4
9001a52e:	f007 f9ea 	bl	90021906 <__cxa_guard_acquire>
9001a532:	b138      	cbz	r0, 9001a544 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001a534:	4620      	mov	r0, r4
9001a536:	f007 f9f2 	bl	9002191e <__cxa_guard_release>
9001a53a:	4a0f      	ldr	r2, [pc, #60]	; (9001a578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001a53c:	490f      	ldr	r1, [pc, #60]	; (9001a57c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001a53e:	4810      	ldr	r0, [pc, #64]	; (9001a580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001a540:	f007 f9da 	bl	900218f8 <__aeabi_atexit>
9001a544:	4c0f      	ldr	r4, [pc, #60]	; (9001a584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001a546:	7823      	ldrb	r3, [r4, #0]
9001a548:	f3bf 8f5b 	dmb	ish
9001a54c:	07db      	lsls	r3, r3, #31
9001a54e:	d40b      	bmi.n	9001a568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001a550:	4620      	mov	r0, r4
9001a552:	f007 f9d8 	bl	90021906 <__cxa_guard_acquire>
9001a556:	b138      	cbz	r0, 9001a568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001a558:	4620      	mov	r0, r4
9001a55a:	f007 f9e0 	bl	9002191e <__cxa_guard_release>
9001a55e:	4a06      	ldr	r2, [pc, #24]	; (9001a578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001a560:	4909      	ldr	r1, [pc, #36]	; (9001a588 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001a562:	480a      	ldr	r0, [pc, #40]	; (9001a58c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001a564:	f007 f9c8 	bl	900218f8 <__aeabi_atexit>
9001a568:	4b05      	ldr	r3, [pc, #20]	; (9001a580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001a56a:	622b      	str	r3, [r5, #32]
9001a56c:	4b07      	ldr	r3, [pc, #28]	; (9001a58c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001a56e:	626b      	str	r3, [r5, #36]	; 0x24
9001a570:	bd38      	pop	{r3, r4, r5, pc}
9001a572:	bf00      	nop
9001a574:	240262e0 	.word	0x240262e0
9001a578:	24000000 	.word	0x24000000
9001a57c:	90018625 	.word	0x90018625
9001a580:	240000b4 	.word	0x240000b4
9001a584:	240262e4 	.word	0x240262e4
9001a588:	90018623 	.word	0x90018623
9001a58c:	240000b8 	.word	0x240000b8

9001a590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001a590:	b538      	push	{r3, r4, r5, lr}
9001a592:	4c15      	ldr	r4, [pc, #84]	; (9001a5e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001a594:	4605      	mov	r5, r0
9001a596:	7823      	ldrb	r3, [r4, #0]
9001a598:	f3bf 8f5b 	dmb	ish
9001a59c:	07da      	lsls	r2, r3, #31
9001a59e:	d40b      	bmi.n	9001a5b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001a5a0:	4620      	mov	r0, r4
9001a5a2:	f007 f9b0 	bl	90021906 <__cxa_guard_acquire>
9001a5a6:	b138      	cbz	r0, 9001a5b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001a5a8:	4620      	mov	r0, r4
9001a5aa:	f007 f9b8 	bl	9002191e <__cxa_guard_release>
9001a5ae:	4a0f      	ldr	r2, [pc, #60]	; (9001a5ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001a5b0:	490f      	ldr	r1, [pc, #60]	; (9001a5f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001a5b2:	4810      	ldr	r0, [pc, #64]	; (9001a5f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001a5b4:	f007 f9a0 	bl	900218f8 <__aeabi_atexit>
9001a5b8:	4c0f      	ldr	r4, [pc, #60]	; (9001a5f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001a5ba:	7823      	ldrb	r3, [r4, #0]
9001a5bc:	f3bf 8f5b 	dmb	ish
9001a5c0:	07db      	lsls	r3, r3, #31
9001a5c2:	d40b      	bmi.n	9001a5dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001a5c4:	4620      	mov	r0, r4
9001a5c6:	f007 f99e 	bl	90021906 <__cxa_guard_acquire>
9001a5ca:	b138      	cbz	r0, 9001a5dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001a5cc:	4620      	mov	r0, r4
9001a5ce:	f007 f9a6 	bl	9002191e <__cxa_guard_release>
9001a5d2:	4a06      	ldr	r2, [pc, #24]	; (9001a5ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001a5d4:	4909      	ldr	r1, [pc, #36]	; (9001a5fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001a5d6:	480a      	ldr	r0, [pc, #40]	; (9001a600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001a5d8:	f007 f98e 	bl	900218f8 <__aeabi_atexit>
9001a5dc:	4b05      	ldr	r3, [pc, #20]	; (9001a5f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001a5de:	61ab      	str	r3, [r5, #24]
9001a5e0:	4b07      	ldr	r3, [pc, #28]	; (9001a600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001a5e2:	61eb      	str	r3, [r5, #28]
9001a5e4:	bd38      	pop	{r3, r4, r5, pc}
9001a5e6:	bf00      	nop
9001a5e8:	240262b8 	.word	0x240262b8
9001a5ec:	24000000 	.word	0x24000000
9001a5f0:	90018629 	.word	0x90018629
9001a5f4:	2400008c 	.word	0x2400008c
9001a5f8:	240262bc 	.word	0x240262bc
9001a5fc:	90018627 	.word	0x90018627
9001a600:	24000090 	.word	0x24000090

9001a604 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001a604:	b510      	push	{r4, lr}
9001a606:	4604      	mov	r4, r0
9001a608:	f7ff ff88 	bl	9001a51c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001a60c:	4620      	mov	r0, r4
9001a60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a612:	f7ff bfbd 	b.w	9001a590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001a618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001a618:	b538      	push	{r3, r4, r5, lr}
9001a61a:	4c15      	ldr	r4, [pc, #84]	; (9001a670 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001a61c:	4605      	mov	r5, r0
9001a61e:	7823      	ldrb	r3, [r4, #0]
9001a620:	f3bf 8f5b 	dmb	ish
9001a624:	07da      	lsls	r2, r3, #31
9001a626:	d40b      	bmi.n	9001a640 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001a628:	4620      	mov	r0, r4
9001a62a:	f007 f96c 	bl	90021906 <__cxa_guard_acquire>
9001a62e:	b138      	cbz	r0, 9001a640 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001a630:	4620      	mov	r0, r4
9001a632:	f007 f974 	bl	9002191e <__cxa_guard_release>
9001a636:	4a0f      	ldr	r2, [pc, #60]	; (9001a674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001a638:	490f      	ldr	r1, [pc, #60]	; (9001a678 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001a63a:	4810      	ldr	r0, [pc, #64]	; (9001a67c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001a63c:	f007 f95c 	bl	900218f8 <__aeabi_atexit>
9001a640:	4c0f      	ldr	r4, [pc, #60]	; (9001a680 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001a642:	7823      	ldrb	r3, [r4, #0]
9001a644:	f3bf 8f5b 	dmb	ish
9001a648:	07db      	lsls	r3, r3, #31
9001a64a:	d40b      	bmi.n	9001a664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001a64c:	4620      	mov	r0, r4
9001a64e:	f007 f95a 	bl	90021906 <__cxa_guard_acquire>
9001a652:	b138      	cbz	r0, 9001a664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001a654:	4620      	mov	r0, r4
9001a656:	f007 f962 	bl	9002191e <__cxa_guard_release>
9001a65a:	4a06      	ldr	r2, [pc, #24]	; (9001a674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001a65c:	4909      	ldr	r1, [pc, #36]	; (9001a684 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001a65e:	480a      	ldr	r0, [pc, #40]	; (9001a688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001a660:	f007 f94a 	bl	900218f8 <__aeabi_atexit>
9001a664:	4b05      	ldr	r3, [pc, #20]	; (9001a67c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001a666:	632b      	str	r3, [r5, #48]	; 0x30
9001a668:	4b07      	ldr	r3, [pc, #28]	; (9001a688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001a66a:	636b      	str	r3, [r5, #52]	; 0x34
9001a66c:	bd38      	pop	{r3, r4, r5, pc}
9001a66e:	bf00      	nop
9001a670:	240262f0 	.word	0x240262f0
9001a674:	24000000 	.word	0x24000000
9001a678:	9001861d 	.word	0x9001861d
9001a67c:	240000c4 	.word	0x240000c4
9001a680:	240262f4 	.word	0x240262f4
9001a684:	9001861b 	.word	0x9001861b
9001a688:	240000c8 	.word	0x240000c8

9001a68c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001a68c:	b538      	push	{r3, r4, r5, lr}
9001a68e:	4c15      	ldr	r4, [pc, #84]	; (9001a6e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001a690:	4605      	mov	r5, r0
9001a692:	7823      	ldrb	r3, [r4, #0]
9001a694:	f3bf 8f5b 	dmb	ish
9001a698:	07da      	lsls	r2, r3, #31
9001a69a:	d40b      	bmi.n	9001a6b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001a69c:	4620      	mov	r0, r4
9001a69e:	f007 f932 	bl	90021906 <__cxa_guard_acquire>
9001a6a2:	b138      	cbz	r0, 9001a6b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001a6a4:	4620      	mov	r0, r4
9001a6a6:	f007 f93a 	bl	9002191e <__cxa_guard_release>
9001a6aa:	4a0f      	ldr	r2, [pc, #60]	; (9001a6e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001a6ac:	490f      	ldr	r1, [pc, #60]	; (9001a6ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001a6ae:	4810      	ldr	r0, [pc, #64]	; (9001a6f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001a6b0:	f007 f922 	bl	900218f8 <__aeabi_atexit>
9001a6b4:	4c0f      	ldr	r4, [pc, #60]	; (9001a6f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001a6b6:	7823      	ldrb	r3, [r4, #0]
9001a6b8:	f3bf 8f5b 	dmb	ish
9001a6bc:	07db      	lsls	r3, r3, #31
9001a6be:	d40b      	bmi.n	9001a6d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001a6c0:	4620      	mov	r0, r4
9001a6c2:	f007 f920 	bl	90021906 <__cxa_guard_acquire>
9001a6c6:	b138      	cbz	r0, 9001a6d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001a6c8:	4620      	mov	r0, r4
9001a6ca:	f007 f928 	bl	9002191e <__cxa_guard_release>
9001a6ce:	4a06      	ldr	r2, [pc, #24]	; (9001a6e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001a6d0:	4909      	ldr	r1, [pc, #36]	; (9001a6f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001a6d2:	480a      	ldr	r0, [pc, #40]	; (9001a6fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001a6d4:	f007 f910 	bl	900218f8 <__aeabi_atexit>
9001a6d8:	4b05      	ldr	r3, [pc, #20]	; (9001a6f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001a6da:	62ab      	str	r3, [r5, #40]	; 0x28
9001a6dc:	4b07      	ldr	r3, [pc, #28]	; (9001a6fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001a6de:	62eb      	str	r3, [r5, #44]	; 0x2c
9001a6e0:	bd38      	pop	{r3, r4, r5, pc}
9001a6e2:	bf00      	nop
9001a6e4:	240262c0 	.word	0x240262c0
9001a6e8:	24000000 	.word	0x24000000
9001a6ec:	90018621 	.word	0x90018621
9001a6f0:	24000094 	.word	0x24000094
9001a6f4:	240262c4 	.word	0x240262c4
9001a6f8:	9001861f 	.word	0x9001861f
9001a6fc:	24000098 	.word	0x24000098

9001a700 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001a700:	b510      	push	{r4, lr}
9001a702:	4604      	mov	r4, r0
9001a704:	f7ff ff88 	bl	9001a618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001a708:	4620      	mov	r0, r4
9001a70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a70e:	f7ff bfbd 	b.w	9001a68c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001a714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001a714:	b538      	push	{r3, r4, r5, lr}
9001a716:	4c15      	ldr	r4, [pc, #84]	; (9001a76c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001a718:	4605      	mov	r5, r0
9001a71a:	7823      	ldrb	r3, [r4, #0]
9001a71c:	f3bf 8f5b 	dmb	ish
9001a720:	07da      	lsls	r2, r3, #31
9001a722:	d40b      	bmi.n	9001a73c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001a724:	4620      	mov	r0, r4
9001a726:	f007 f8ee 	bl	90021906 <__cxa_guard_acquire>
9001a72a:	b138      	cbz	r0, 9001a73c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001a72c:	4620      	mov	r0, r4
9001a72e:	f007 f8f6 	bl	9002191e <__cxa_guard_release>
9001a732:	4a0f      	ldr	r2, [pc, #60]	; (9001a770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001a734:	490f      	ldr	r1, [pc, #60]	; (9001a774 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001a736:	4810      	ldr	r0, [pc, #64]	; (9001a778 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001a738:	f007 f8de 	bl	900218f8 <__aeabi_atexit>
9001a73c:	4c0f      	ldr	r4, [pc, #60]	; (9001a77c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001a73e:	7823      	ldrb	r3, [r4, #0]
9001a740:	f3bf 8f5b 	dmb	ish
9001a744:	07db      	lsls	r3, r3, #31
9001a746:	d40b      	bmi.n	9001a760 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001a748:	4620      	mov	r0, r4
9001a74a:	f007 f8dc 	bl	90021906 <__cxa_guard_acquire>
9001a74e:	b138      	cbz	r0, 9001a760 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001a750:	4620      	mov	r0, r4
9001a752:	f007 f8e4 	bl	9002191e <__cxa_guard_release>
9001a756:	4a06      	ldr	r2, [pc, #24]	; (9001a770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001a758:	4909      	ldr	r1, [pc, #36]	; (9001a780 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001a75a:	480a      	ldr	r0, [pc, #40]	; (9001a784 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001a75c:	f007 f8cc 	bl	900218f8 <__aeabi_atexit>
9001a760:	4b05      	ldr	r3, [pc, #20]	; (9001a778 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001a762:	652b      	str	r3, [r5, #80]	; 0x50
9001a764:	4b07      	ldr	r3, [pc, #28]	; (9001a784 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001a766:	656b      	str	r3, [r5, #84]	; 0x54
9001a768:	bd38      	pop	{r3, r4, r5, pc}
9001a76a:	bf00      	nop
9001a76c:	240262f8 	.word	0x240262f8
9001a770:	24000000 	.word	0x24000000
9001a774:	9001860d 	.word	0x9001860d
9001a778:	240000cc 	.word	0x240000cc
9001a77c:	240262fc 	.word	0x240262fc
9001a780:	9001860b 	.word	0x9001860b
9001a784:	240000d0 	.word	0x240000d0

9001a788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001a788:	b538      	push	{r3, r4, r5, lr}
9001a78a:	4c15      	ldr	r4, [pc, #84]	; (9001a7e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001a78c:	4605      	mov	r5, r0
9001a78e:	7823      	ldrb	r3, [r4, #0]
9001a790:	f3bf 8f5b 	dmb	ish
9001a794:	07da      	lsls	r2, r3, #31
9001a796:	d40b      	bmi.n	9001a7b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001a798:	4620      	mov	r0, r4
9001a79a:	f007 f8b4 	bl	90021906 <__cxa_guard_acquire>
9001a79e:	b138      	cbz	r0, 9001a7b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001a7a0:	4620      	mov	r0, r4
9001a7a2:	f007 f8bc 	bl	9002191e <__cxa_guard_release>
9001a7a6:	4a0f      	ldr	r2, [pc, #60]	; (9001a7e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001a7a8:	490f      	ldr	r1, [pc, #60]	; (9001a7e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001a7aa:	4810      	ldr	r0, [pc, #64]	; (9001a7ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001a7ac:	f007 f8a4 	bl	900218f8 <__aeabi_atexit>
9001a7b0:	4c0f      	ldr	r4, [pc, #60]	; (9001a7f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001a7b2:	7823      	ldrb	r3, [r4, #0]
9001a7b4:	f3bf 8f5b 	dmb	ish
9001a7b8:	07db      	lsls	r3, r3, #31
9001a7ba:	d40b      	bmi.n	9001a7d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001a7bc:	4620      	mov	r0, r4
9001a7be:	f007 f8a2 	bl	90021906 <__cxa_guard_acquire>
9001a7c2:	b138      	cbz	r0, 9001a7d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001a7c4:	4620      	mov	r0, r4
9001a7c6:	f007 f8aa 	bl	9002191e <__cxa_guard_release>
9001a7ca:	4a06      	ldr	r2, [pc, #24]	; (9001a7e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001a7cc:	4909      	ldr	r1, [pc, #36]	; (9001a7f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001a7ce:	480a      	ldr	r0, [pc, #40]	; (9001a7f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001a7d0:	f007 f892 	bl	900218f8 <__aeabi_atexit>
9001a7d4:	4b05      	ldr	r3, [pc, #20]	; (9001a7ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001a7d6:	64ab      	str	r3, [r5, #72]	; 0x48
9001a7d8:	4b07      	ldr	r3, [pc, #28]	; (9001a7f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001a7da:	64eb      	str	r3, [r5, #76]	; 0x4c
9001a7dc:	bd38      	pop	{r3, r4, r5, pc}
9001a7de:	bf00      	nop
9001a7e0:	24026300 	.word	0x24026300
9001a7e4:	24000000 	.word	0x24000000
9001a7e8:	90018611 	.word	0x90018611
9001a7ec:	240000d4 	.word	0x240000d4
9001a7f0:	24026304 	.word	0x24026304
9001a7f4:	9001860f 	.word	0x9001860f
9001a7f8:	240000d8 	.word	0x240000d8

9001a7fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001a7fc:	b538      	push	{r3, r4, r5, lr}
9001a7fe:	4c15      	ldr	r4, [pc, #84]	; (9001a854 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001a800:	4605      	mov	r5, r0
9001a802:	7823      	ldrb	r3, [r4, #0]
9001a804:	f3bf 8f5b 	dmb	ish
9001a808:	07da      	lsls	r2, r3, #31
9001a80a:	d40b      	bmi.n	9001a824 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001a80c:	4620      	mov	r0, r4
9001a80e:	f007 f87a 	bl	90021906 <__cxa_guard_acquire>
9001a812:	b138      	cbz	r0, 9001a824 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001a814:	4620      	mov	r0, r4
9001a816:	f007 f882 	bl	9002191e <__cxa_guard_release>
9001a81a:	4a0f      	ldr	r2, [pc, #60]	; (9001a858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001a81c:	490f      	ldr	r1, [pc, #60]	; (9001a85c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001a81e:	4810      	ldr	r0, [pc, #64]	; (9001a860 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001a820:	f007 f86a 	bl	900218f8 <__aeabi_atexit>
9001a824:	4c0f      	ldr	r4, [pc, #60]	; (9001a864 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001a826:	7823      	ldrb	r3, [r4, #0]
9001a828:	f3bf 8f5b 	dmb	ish
9001a82c:	07db      	lsls	r3, r3, #31
9001a82e:	d40b      	bmi.n	9001a848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001a830:	4620      	mov	r0, r4
9001a832:	f007 f868 	bl	90021906 <__cxa_guard_acquire>
9001a836:	b138      	cbz	r0, 9001a848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001a838:	4620      	mov	r0, r4
9001a83a:	f007 f870 	bl	9002191e <__cxa_guard_release>
9001a83e:	4a06      	ldr	r2, [pc, #24]	; (9001a858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001a840:	4909      	ldr	r1, [pc, #36]	; (9001a868 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001a842:	480a      	ldr	r0, [pc, #40]	; (9001a86c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001a844:	f007 f858 	bl	900218f8 <__aeabi_atexit>
9001a848:	4b05      	ldr	r3, [pc, #20]	; (9001a860 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001a84a:	642b      	str	r3, [r5, #64]	; 0x40
9001a84c:	4b07      	ldr	r3, [pc, #28]	; (9001a86c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001a84e:	646b      	str	r3, [r5, #68]	; 0x44
9001a850:	bd38      	pop	{r3, r4, r5, pc}
9001a852:	bf00      	nop
9001a854:	240262c8 	.word	0x240262c8
9001a858:	24000000 	.word	0x24000000
9001a85c:	90018615 	.word	0x90018615
9001a860:	2400009c 	.word	0x2400009c
9001a864:	240262cc 	.word	0x240262cc
9001a868:	90018613 	.word	0x90018613
9001a86c:	240000a0 	.word	0x240000a0

9001a870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001a870:	b538      	push	{r3, r4, r5, lr}
9001a872:	4c15      	ldr	r4, [pc, #84]	; (9001a8c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001a874:	4605      	mov	r5, r0
9001a876:	7823      	ldrb	r3, [r4, #0]
9001a878:	f3bf 8f5b 	dmb	ish
9001a87c:	07da      	lsls	r2, r3, #31
9001a87e:	d40b      	bmi.n	9001a898 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001a880:	4620      	mov	r0, r4
9001a882:	f007 f840 	bl	90021906 <__cxa_guard_acquire>
9001a886:	b138      	cbz	r0, 9001a898 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001a888:	4620      	mov	r0, r4
9001a88a:	f007 f848 	bl	9002191e <__cxa_guard_release>
9001a88e:	4a0f      	ldr	r2, [pc, #60]	; (9001a8cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001a890:	490f      	ldr	r1, [pc, #60]	; (9001a8d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001a892:	4810      	ldr	r0, [pc, #64]	; (9001a8d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001a894:	f007 f830 	bl	900218f8 <__aeabi_atexit>
9001a898:	4c0f      	ldr	r4, [pc, #60]	; (9001a8d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001a89a:	7823      	ldrb	r3, [r4, #0]
9001a89c:	f3bf 8f5b 	dmb	ish
9001a8a0:	07db      	lsls	r3, r3, #31
9001a8a2:	d40b      	bmi.n	9001a8bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001a8a4:	4620      	mov	r0, r4
9001a8a6:	f007 f82e 	bl	90021906 <__cxa_guard_acquire>
9001a8aa:	b138      	cbz	r0, 9001a8bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001a8ac:	4620      	mov	r0, r4
9001a8ae:	f007 f836 	bl	9002191e <__cxa_guard_release>
9001a8b2:	4a06      	ldr	r2, [pc, #24]	; (9001a8cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001a8b4:	4909      	ldr	r1, [pc, #36]	; (9001a8dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001a8b6:	480a      	ldr	r0, [pc, #40]	; (9001a8e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001a8b8:	f007 f81e 	bl	900218f8 <__aeabi_atexit>
9001a8bc:	4b05      	ldr	r3, [pc, #20]	; (9001a8d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001a8be:	63ab      	str	r3, [r5, #56]	; 0x38
9001a8c0:	4b07      	ldr	r3, [pc, #28]	; (9001a8e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001a8c2:	63eb      	str	r3, [r5, #60]	; 0x3c
9001a8c4:	bd38      	pop	{r3, r4, r5, pc}
9001a8c6:	bf00      	nop
9001a8c8:	240262e8 	.word	0x240262e8
9001a8cc:	24000000 	.word	0x24000000
9001a8d0:	90018619 	.word	0x90018619
9001a8d4:	240000bc 	.word	0x240000bc
9001a8d8:	240262ec 	.word	0x240262ec
9001a8dc:	90018617 	.word	0x90018617
9001a8e0:	240000c0 	.word	0x240000c0

9001a8e4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001a8e4:	b510      	push	{r4, lr}
9001a8e6:	4604      	mov	r4, r0
9001a8e8:	f7ff ff14 	bl	9001a714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001a8ec:	4620      	mov	r0, r4
9001a8ee:	f7ff ff85 	bl	9001a7fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001a8f2:	4620      	mov	r0, r4
9001a8f4:	f7ff ff48 	bl	9001a788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001a8f8:	4620      	mov	r0, r4
9001a8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a8fe:	f7ff bfb7 	b.w	9001a870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001a904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001a904:	b538      	push	{r3, r4, r5, lr}
9001a906:	4c15      	ldr	r4, [pc, #84]	; (9001a95c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001a908:	4605      	mov	r5, r0
9001a90a:	7823      	ldrb	r3, [r4, #0]
9001a90c:	f3bf 8f5b 	dmb	ish
9001a910:	07da      	lsls	r2, r3, #31
9001a912:	d40b      	bmi.n	9001a92c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001a914:	4620      	mov	r0, r4
9001a916:	f006 fff6 	bl	90021906 <__cxa_guard_acquire>
9001a91a:	b138      	cbz	r0, 9001a92c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001a91c:	4620      	mov	r0, r4
9001a91e:	f006 fffe 	bl	9002191e <__cxa_guard_release>
9001a922:	4a0f      	ldr	r2, [pc, #60]	; (9001a960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001a924:	490f      	ldr	r1, [pc, #60]	; (9001a964 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001a926:	4810      	ldr	r0, [pc, #64]	; (9001a968 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001a928:	f006 ffe6 	bl	900218f8 <__aeabi_atexit>
9001a92c:	4c0f      	ldr	r4, [pc, #60]	; (9001a96c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001a92e:	7823      	ldrb	r3, [r4, #0]
9001a930:	f3bf 8f5b 	dmb	ish
9001a934:	07db      	lsls	r3, r3, #31
9001a936:	d40b      	bmi.n	9001a950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001a938:	4620      	mov	r0, r4
9001a93a:	f006 ffe4 	bl	90021906 <__cxa_guard_acquire>
9001a93e:	b138      	cbz	r0, 9001a950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001a940:	4620      	mov	r0, r4
9001a942:	f006 ffec 	bl	9002191e <__cxa_guard_release>
9001a946:	4a06      	ldr	r2, [pc, #24]	; (9001a960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001a948:	4909      	ldr	r1, [pc, #36]	; (9001a970 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001a94a:	480a      	ldr	r0, [pc, #40]	; (9001a974 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001a94c:	f006 ffd4 	bl	900218f8 <__aeabi_atexit>
9001a950:	4b05      	ldr	r3, [pc, #20]	; (9001a968 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001a952:	662b      	str	r3, [r5, #96]	; 0x60
9001a954:	4b07      	ldr	r3, [pc, #28]	; (9001a974 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001a956:	666b      	str	r3, [r5, #100]	; 0x64
9001a958:	bd38      	pop	{r3, r4, r5, pc}
9001a95a:	bf00      	nop
9001a95c:	240262d0 	.word	0x240262d0
9001a960:	24000000 	.word	0x24000000
9001a964:	90018605 	.word	0x90018605
9001a968:	240000a4 	.word	0x240000a4
9001a96c:	240262d4 	.word	0x240262d4
9001a970:	90018603 	.word	0x90018603
9001a974:	240000a8 	.word	0x240000a8

9001a978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001a978:	b538      	push	{r3, r4, r5, lr}
9001a97a:	4c15      	ldr	r4, [pc, #84]	; (9001a9d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001a97c:	4605      	mov	r5, r0
9001a97e:	7823      	ldrb	r3, [r4, #0]
9001a980:	f3bf 8f5b 	dmb	ish
9001a984:	07da      	lsls	r2, r3, #31
9001a986:	d40b      	bmi.n	9001a9a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001a988:	4620      	mov	r0, r4
9001a98a:	f006 ffbc 	bl	90021906 <__cxa_guard_acquire>
9001a98e:	b138      	cbz	r0, 9001a9a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001a990:	4620      	mov	r0, r4
9001a992:	f006 ffc4 	bl	9002191e <__cxa_guard_release>
9001a996:	4a0f      	ldr	r2, [pc, #60]	; (9001a9d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001a998:	490f      	ldr	r1, [pc, #60]	; (9001a9d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001a99a:	4810      	ldr	r0, [pc, #64]	; (9001a9dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001a99c:	f006 ffac 	bl	900218f8 <__aeabi_atexit>
9001a9a0:	4c0f      	ldr	r4, [pc, #60]	; (9001a9e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001a9a2:	7823      	ldrb	r3, [r4, #0]
9001a9a4:	f3bf 8f5b 	dmb	ish
9001a9a8:	07db      	lsls	r3, r3, #31
9001a9aa:	d40b      	bmi.n	9001a9c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001a9ac:	4620      	mov	r0, r4
9001a9ae:	f006 ffaa 	bl	90021906 <__cxa_guard_acquire>
9001a9b2:	b138      	cbz	r0, 9001a9c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001a9b4:	4620      	mov	r0, r4
9001a9b6:	f006 ffb2 	bl	9002191e <__cxa_guard_release>
9001a9ba:	4a06      	ldr	r2, [pc, #24]	; (9001a9d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001a9bc:	4909      	ldr	r1, [pc, #36]	; (9001a9e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001a9be:	480a      	ldr	r0, [pc, #40]	; (9001a9e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001a9c0:	f006 ff9a 	bl	900218f8 <__aeabi_atexit>
9001a9c4:	4b05      	ldr	r3, [pc, #20]	; (9001a9dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001a9c6:	65ab      	str	r3, [r5, #88]	; 0x58
9001a9c8:	4b07      	ldr	r3, [pc, #28]	; (9001a9e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001a9ca:	65eb      	str	r3, [r5, #92]	; 0x5c
9001a9cc:	bd38      	pop	{r3, r4, r5, pc}
9001a9ce:	bf00      	nop
9001a9d0:	240262a8 	.word	0x240262a8
9001a9d4:	24000000 	.word	0x24000000
9001a9d8:	90018609 	.word	0x90018609
9001a9dc:	2400007c 	.word	0x2400007c
9001a9e0:	240262ac 	.word	0x240262ac
9001a9e4:	90018607 	.word	0x90018607
9001a9e8:	24000080 	.word	0x24000080

9001a9ec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001a9ec:	b510      	push	{r4, lr}
9001a9ee:	4604      	mov	r4, r0
9001a9f0:	f7ff ff88 	bl	9001a904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001a9f4:	4620      	mov	r0, r4
9001a9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a9fa:	f7ff bfbd 	b.w	9001a978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001aa00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001aa00:	b538      	push	{r3, r4, r5, lr}
9001aa02:	4c15      	ldr	r4, [pc, #84]	; (9001aa58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001aa04:	4605      	mov	r5, r0
9001aa06:	7823      	ldrb	r3, [r4, #0]
9001aa08:	f3bf 8f5b 	dmb	ish
9001aa0c:	07da      	lsls	r2, r3, #31
9001aa0e:	d40b      	bmi.n	9001aa28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001aa10:	4620      	mov	r0, r4
9001aa12:	f006 ff78 	bl	90021906 <__cxa_guard_acquire>
9001aa16:	b138      	cbz	r0, 9001aa28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001aa18:	4620      	mov	r0, r4
9001aa1a:	f006 ff80 	bl	9002191e <__cxa_guard_release>
9001aa1e:	4a0f      	ldr	r2, [pc, #60]	; (9001aa5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001aa20:	490f      	ldr	r1, [pc, #60]	; (9001aa60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001aa22:	4810      	ldr	r0, [pc, #64]	; (9001aa64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001aa24:	f006 ff68 	bl	900218f8 <__aeabi_atexit>
9001aa28:	4c0f      	ldr	r4, [pc, #60]	; (9001aa68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001aa2a:	7823      	ldrb	r3, [r4, #0]
9001aa2c:	f3bf 8f5b 	dmb	ish
9001aa30:	07db      	lsls	r3, r3, #31
9001aa32:	d40b      	bmi.n	9001aa4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001aa34:	4620      	mov	r0, r4
9001aa36:	f006 ff66 	bl	90021906 <__cxa_guard_acquire>
9001aa3a:	b138      	cbz	r0, 9001aa4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001aa3c:	4620      	mov	r0, r4
9001aa3e:	f006 ff6e 	bl	9002191e <__cxa_guard_release>
9001aa42:	4a06      	ldr	r2, [pc, #24]	; (9001aa5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001aa44:	4909      	ldr	r1, [pc, #36]	; (9001aa6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001aa46:	480a      	ldr	r0, [pc, #40]	; (9001aa70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001aa48:	f006 ff56 	bl	900218f8 <__aeabi_atexit>
9001aa4c:	4b05      	ldr	r3, [pc, #20]	; (9001aa64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001aa4e:	672b      	str	r3, [r5, #112]	; 0x70
9001aa50:	4b07      	ldr	r3, [pc, #28]	; (9001aa70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001aa52:	676b      	str	r3, [r5, #116]	; 0x74
9001aa54:	bd38      	pop	{r3, r4, r5, pc}
9001aa56:	bf00      	nop
9001aa58:	240262a0 	.word	0x240262a0
9001aa5c:	24000000 	.word	0x24000000
9001aa60:	900185fd 	.word	0x900185fd
9001aa64:	24000074 	.word	0x24000074
9001aa68:	240262a4 	.word	0x240262a4
9001aa6c:	900185fb 	.word	0x900185fb
9001aa70:	24000078 	.word	0x24000078

9001aa74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001aa74:	b538      	push	{r3, r4, r5, lr}
9001aa76:	4c15      	ldr	r4, [pc, #84]	; (9001aacc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001aa78:	4605      	mov	r5, r0
9001aa7a:	7823      	ldrb	r3, [r4, #0]
9001aa7c:	f3bf 8f5b 	dmb	ish
9001aa80:	07da      	lsls	r2, r3, #31
9001aa82:	d40b      	bmi.n	9001aa9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001aa84:	4620      	mov	r0, r4
9001aa86:	f006 ff3e 	bl	90021906 <__cxa_guard_acquire>
9001aa8a:	b138      	cbz	r0, 9001aa9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001aa8c:	4620      	mov	r0, r4
9001aa8e:	f006 ff46 	bl	9002191e <__cxa_guard_release>
9001aa92:	4a0f      	ldr	r2, [pc, #60]	; (9001aad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001aa94:	490f      	ldr	r1, [pc, #60]	; (9001aad4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001aa96:	4810      	ldr	r0, [pc, #64]	; (9001aad8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001aa98:	f006 ff2e 	bl	900218f8 <__aeabi_atexit>
9001aa9c:	4c0f      	ldr	r4, [pc, #60]	; (9001aadc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001aa9e:	7823      	ldrb	r3, [r4, #0]
9001aaa0:	f3bf 8f5b 	dmb	ish
9001aaa4:	07db      	lsls	r3, r3, #31
9001aaa6:	d40b      	bmi.n	9001aac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001aaa8:	4620      	mov	r0, r4
9001aaaa:	f006 ff2c 	bl	90021906 <__cxa_guard_acquire>
9001aaae:	b138      	cbz	r0, 9001aac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001aab0:	4620      	mov	r0, r4
9001aab2:	f006 ff34 	bl	9002191e <__cxa_guard_release>
9001aab6:	4a06      	ldr	r2, [pc, #24]	; (9001aad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001aab8:	4909      	ldr	r1, [pc, #36]	; (9001aae0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001aaba:	480a      	ldr	r0, [pc, #40]	; (9001aae4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001aabc:	f006 ff1c 	bl	900218f8 <__aeabi_atexit>
9001aac0:	4b05      	ldr	r3, [pc, #20]	; (9001aad8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001aac2:	66ab      	str	r3, [r5, #104]	; 0x68
9001aac4:	4b07      	ldr	r3, [pc, #28]	; (9001aae4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001aac6:	66eb      	str	r3, [r5, #108]	; 0x6c
9001aac8:	bd38      	pop	{r3, r4, r5, pc}
9001aaca:	bf00      	nop
9001aacc:	24026298 	.word	0x24026298
9001aad0:	24000000 	.word	0x24000000
9001aad4:	90018601 	.word	0x90018601
9001aad8:	2400006c 	.word	0x2400006c
9001aadc:	2402629c 	.word	0x2402629c
9001aae0:	900185ff 	.word	0x900185ff
9001aae4:	24000070 	.word	0x24000070

9001aae8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001aae8:	b510      	push	{r4, lr}
9001aaea:	4604      	mov	r4, r0
9001aaec:	f7ff ff88 	bl	9001aa00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001aaf0:	4620      	mov	r0, r4
9001aaf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001aaf6:	f7ff bfbd 	b.w	9001aa74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001aafa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001aafa:	b510      	push	{r4, lr}
9001aafc:	4604      	mov	r4, r0
9001aafe:	f7ff fff3 	bl	9001aae8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001ab02:	4620      	mov	r0, r4
9001ab04:	f7ff ff72 	bl	9001a9ec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001ab08:	4620      	mov	r0, r4
9001ab0a:	f7ff fdf9 	bl	9001a700 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001ab0e:	4620      	mov	r0, r4
9001ab10:	f7ff fcfa 	bl	9001a508 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001ab14:	4620      	mov	r0, r4
9001ab16:	f7ff fd75 	bl	9001a604 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001ab1a:	4620      	mov	r0, r4
9001ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001ab20:	f7ff bee0 	b.w	9001a8e4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001ab24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ab28:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001ab2c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001ab30:	2d00      	cmp	r5, #0
9001ab32:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001ab36:	fb05 4c0e 	mla	ip, r5, lr, r4
9001ab3a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001ab3e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001ab42:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001ab46:	eb02 0a0c 	add.w	sl, r2, ip
9001ab4a:	8808      	ldrh	r0, [r1, #0]
9001ab4c:	f2c0 80b0 	blt.w	9001acb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001ab50:	45ab      	cmp	fp, r5
9001ab52:	f340 80ad 	ble.w	9001acb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001ab56:	2c00      	cmp	r4, #0
9001ab58:	f2c0 80a8 	blt.w	9001acac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001ab5c:	45a6      	cmp	lr, r4
9001ab5e:	f340 80a5 	ble.w	9001acac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001ab62:	f812 200c 	ldrb.w	r2, [r2, ip]
9001ab66:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001ab6a:	1c62      	adds	r2, r4, #1
9001ab6c:	f100 80a3 	bmi.w	9001acb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001ab70:	4596      	cmp	lr, r2
9001ab72:	f340 80a0 	ble.w	9001acb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001ab76:	f1b9 0f00 	cmp.w	r9, #0
9001ab7a:	f000 809c 	beq.w	9001acb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001ab7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001ab82:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001ab86:	3501      	adds	r5, #1
9001ab88:	f100 8099 	bmi.w	9001acbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001ab8c:	45ab      	cmp	fp, r5
9001ab8e:	f340 8096 	ble.w	9001acbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001ab92:	2f00      	cmp	r7, #0
9001ab94:	f000 8093 	beq.w	9001acbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001ab98:	2c00      	cmp	r4, #0
9001ab9a:	f2c0 808e 	blt.w	9001acba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001ab9e:	45a6      	cmp	lr, r4
9001aba0:	f340 808b 	ble.w	9001acba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001aba4:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001aba8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001abac:	3401      	adds	r4, #1
9001abae:	f100 8089 	bmi.w	9001acc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001abb2:	45a6      	cmp	lr, r4
9001abb4:	f340 8086 	ble.w	9001acc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001abb8:	f1b9 0f00 	cmp.w	r9, #0
9001abbc:	f000 8082 	beq.w	9001acc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001abc0:	44d6      	add	lr, sl
9001abc2:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001abc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001abca:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001abce:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001abd2:	fb19 fe07 	smulbb	lr, r9, r7
9001abd6:	f1c7 0210 	rsb	r2, r7, #16
9001abda:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001abde:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001abe2:	eba2 0209 	sub.w	r2, r2, r9
9001abe6:	ea44 0808 	orr.w	r8, r4, r8
9001abea:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001abee:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001abf2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001abf6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001abfa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001abfe:	ea44 0c0c 	orr.w	ip, r4, ip
9001ac02:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001ac06:	fb04 f40c 	mul.w	r4, r4, ip
9001ac0a:	fb02 4808 	mla	r8, r2, r8, r4
9001ac0e:	041a      	lsls	r2, r3, #16
9001ac10:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ac14:	b2b4      	uxth	r4, r6
9001ac16:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ac1a:	43f6      	mvns	r6, r6
9001ac1c:	4313      	orrs	r3, r2
9001ac1e:	042a      	lsls	r2, r5, #16
9001ac20:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001ac24:	b2f6      	uxtb	r6, r6
9001ac26:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ac2a:	fb0e 8303 	mla	r3, lr, r3, r8
9001ac2e:	432a      	orrs	r2, r5
9001ac30:	fb07 3202 	mla	r2, r7, r2, r3
9001ac34:	10c7      	asrs	r7, r0, #3
9001ac36:	0d53      	lsrs	r3, r2, #21
9001ac38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ac3c:	0952      	lsrs	r2, r2, #5
9001ac3e:	fb17 f706 	smulbb	r7, r7, r6
9001ac42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ac46:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ac4a:	431a      	orrs	r2, r3
9001ac4c:	b293      	uxth	r3, r2
9001ac4e:	1202      	asrs	r2, r0, #8
9001ac50:	121d      	asrs	r5, r3, #8
9001ac52:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001ac56:	00c0      	lsls	r0, r0, #3
9001ac58:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ac5c:	fb12 f206 	smulbb	r2, r2, r6
9001ac60:	b2c0      	uxtb	r0, r0
9001ac62:	fb05 2504 	mla	r5, r5, r4, r2
9001ac66:	10da      	asrs	r2, r3, #3
9001ac68:	fb10 f006 	smulbb	r0, r0, r6
9001ac6c:	00db      	lsls	r3, r3, #3
9001ac6e:	b2ad      	uxth	r5, r5
9001ac70:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ac74:	b2db      	uxtb	r3, r3
9001ac76:	fb02 7204 	mla	r2, r2, r4, r7
9001ac7a:	fb03 0004 	mla	r0, r3, r4, r0
9001ac7e:	1c6b      	adds	r3, r5, #1
9001ac80:	b292      	uxth	r2, r2
9001ac82:	b280      	uxth	r0, r0
9001ac84:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ac88:	1c43      	adds	r3, r0, #1
9001ac8a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ac8e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001ac92:	1c50      	adds	r0, r2, #1
9001ac94:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001ac98:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ac9c:	0952      	lsrs	r2, r2, #5
9001ac9e:	432b      	orrs	r3, r5
9001aca0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001aca4:	4313      	orrs	r3, r2
9001aca6:	800b      	strh	r3, [r1, #0]
9001aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001acac:	4680      	mov	r8, r0
9001acae:	e75c      	b.n	9001ab6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001acb0:	4684      	mov	ip, r0
9001acb2:	4680      	mov	r8, r0
9001acb4:	e767      	b.n	9001ab86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001acb6:	4684      	mov	ip, r0
9001acb8:	e765      	b.n	9001ab86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001acba:	4605      	mov	r5, r0
9001acbc:	e776      	b.n	9001abac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001acbe:	4603      	mov	r3, r0
9001acc0:	4605      	mov	r5, r0
9001acc2:	e782      	b.n	9001abca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001acc4:	4603      	mov	r3, r0
9001acc6:	e780      	b.n	9001abca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001acc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001accc:	b099      	sub	sp, #100	; 0x64
9001acce:	9215      	str	r2, [sp, #84]	; 0x54
9001acd0:	9309      	str	r3, [sp, #36]	; 0x24
9001acd2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001acd4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001acd8:	9016      	str	r0, [sp, #88]	; 0x58
9001acda:	930d      	str	r3, [sp, #52]	; 0x34
9001acdc:	6850      	ldr	r0, [r2, #4]
9001acde:	910c      	str	r1, [sp, #48]	; 0x30
9001ace0:	6812      	ldr	r2, [r2, #0]
9001ace2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001ace6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001acea:	fb00 1303 	mla	r3, r0, r3, r1
9001acee:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001acf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001acf4:	681b      	ldr	r3, [r3, #0]
9001acf6:	930b      	str	r3, [sp, #44]	; 0x2c
9001acf8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001acfa:	685e      	ldr	r6, [r3, #4]
9001acfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001acfe:	3604      	adds	r6, #4
9001ad00:	43db      	mvns	r3, r3
9001ad02:	b2db      	uxtb	r3, r3
9001ad04:	930a      	str	r3, [sp, #40]	; 0x28
9001ad06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ad08:	2b00      	cmp	r3, #0
9001ad0a:	dc03      	bgt.n	9001ad14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ad0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001ad0e:	2b00      	cmp	r3, #0
9001ad10:	f340 8225 	ble.w	9001b15e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001ad14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ad16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ad1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ad1e:	1e48      	subs	r0, r1, #1
9001ad20:	1e57      	subs	r7, r2, #1
9001ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ad24:	2b00      	cmp	r3, #0
9001ad26:	f340 80e3 	ble.w	9001aef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001ad2a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001ad2e:	ea4f 4325 	mov.w	r3, r5, asr #16
9001ad32:	d406      	bmi.n	9001ad42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ad34:	4584      	cmp	ip, r0
9001ad36:	da04      	bge.n	9001ad42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ad38:	2b00      	cmp	r3, #0
9001ad3a:	db02      	blt.n	9001ad42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ad3c:	42bb      	cmp	r3, r7
9001ad3e:	f2c0 80d8 	blt.w	9001aef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001ad42:	f11c 0c01 	adds.w	ip, ip, #1
9001ad46:	f100 80c9 	bmi.w	9001aedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ad4a:	4561      	cmp	r1, ip
9001ad4c:	f2c0 80c6 	blt.w	9001aedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ad50:	3301      	adds	r3, #1
9001ad52:	f100 80c3 	bmi.w	9001aedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ad56:	429a      	cmp	r2, r3
9001ad58:	f2c0 80c0 	blt.w	9001aedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ad5c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001ad60:	4647      	mov	r7, r8
9001ad62:	f1bb 0f00 	cmp.w	fp, #0
9001ad66:	f340 80e3 	ble.w	9001af30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001ad6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001ad6c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001ad70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ad72:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001ad76:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001ad7a:	ea5f 422a 	movs.w	r2, sl, asr #16
9001ad7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001ad82:	689b      	ldr	r3, [r3, #8]
9001ad84:	f100 8121 	bmi.w	9001afca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ad88:	f103 39ff 	add.w	r9, r3, #4294967295
9001ad8c:	454a      	cmp	r2, r9
9001ad8e:	f280 811c 	bge.w	9001afca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ad92:	f1bc 0f00 	cmp.w	ip, #0
9001ad96:	f2c0 8118 	blt.w	9001afca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ad9a:	f10e 39ff 	add.w	r9, lr, #4294967295
9001ad9e:	45cc      	cmp	ip, r9
9001ada0:	f280 8113 	bge.w	9001afca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ada4:	b21b      	sxth	r3, r3
9001ada6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ada8:	fb0c 2203 	mla	r2, ip, r3, r2
9001adac:	eb04 0902 	add.w	r9, r4, r2
9001adb0:	5ca2      	ldrb	r2, [r4, r2]
9001adb2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001adb6:	2800      	cmp	r0, #0
9001adb8:	f000 80fe 	beq.w	9001afb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001adbc:	f899 2001 	ldrb.w	r2, [r9, #1]
9001adc0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001adc4:	9211      	str	r2, [sp, #68]	; 0x44
9001adc6:	b151      	cbz	r1, 9001adde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001adc8:	eb09 0203 	add.w	r2, r9, r3
9001adcc:	f819 3003 	ldrb.w	r3, [r9, r3]
9001add0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001add4:	930f      	str	r3, [sp, #60]	; 0x3c
9001add6:	7853      	ldrb	r3, [r2, #1]
9001add8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001addc:	9312      	str	r3, [sp, #72]	; 0x48
9001adde:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ade0:	fb10 f201 	smulbb	r2, r0, r1
9001ade4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ade6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001adea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001adee:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001adf2:	10d2      	asrs	r2, r2, #3
9001adf4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001adf8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001adfc:	ea4c 0c03 	orr.w	ip, ip, r3
9001ae00:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001ae02:	041b      	lsls	r3, r3, #16
9001ae04:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ae08:	4323      	orrs	r3, r4
9001ae0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001ae0c:	4353      	muls	r3, r2
9001ae0e:	fb09 330c 	mla	r3, r9, ip, r3
9001ae12:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001ae16:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ae1a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ae1e:	ea4c 0e0e 	orr.w	lr, ip, lr
9001ae22:	f1c1 0c10 	rsb	ip, r1, #16
9001ae26:	ebac 0c00 	sub.w	ip, ip, r0
9001ae2a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001ae2e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001ae32:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001ae36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ae38:	0418      	lsls	r0, r3, #16
9001ae3a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ae3e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ae42:	4318      	orrs	r0, r3
9001ae44:	fb02 c200 	mla	r2, r2, r0, ip
9001ae48:	8838      	ldrh	r0, [r7, #0]
9001ae4a:	0d53      	lsrs	r3, r2, #21
9001ae4c:	0952      	lsrs	r2, r2, #5
9001ae4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ae52:	1201      	asrs	r1, r0, #8
9001ae54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ae58:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001ae5c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ae60:	00c0      	lsls	r0, r0, #3
9001ae62:	431a      	orrs	r2, r3
9001ae64:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001ae68:	fb11 f104 	smulbb	r1, r1, r4
9001ae6c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001ae70:	b292      	uxth	r2, r2
9001ae72:	fb1e fe04 	smulbb	lr, lr, r4
9001ae76:	b2c0      	uxtb	r0, r0
9001ae78:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001ae7c:	fb10 f004 	smulbb	r0, r0, r4
9001ae80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ae84:	fb0c 1c03 	mla	ip, ip, r3, r1
9001ae88:	10d1      	asrs	r1, r2, #3
9001ae8a:	00d2      	lsls	r2, r2, #3
9001ae8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ae90:	fa1f fc8c 	uxth.w	ip, ip
9001ae94:	b2d2      	uxtb	r2, r2
9001ae96:	fb01 e103 	mla	r1, r1, r3, lr
9001ae9a:	fb02 0303 	mla	r3, r2, r3, r0
9001ae9e:	b289      	uxth	r1, r1
9001aea0:	b29a      	uxth	r2, r3
9001aea2:	f10c 0301 	add.w	r3, ip, #1
9001aea6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001aeaa:	1c53      	adds	r3, r2, #1
9001aeac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001aeb0:	1c4a      	adds	r2, r1, #1
9001aeb2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001aeb6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001aeba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001aebe:	0949      	lsrs	r1, r1, #5
9001aec0:	ea43 030c 	orr.w	r3, r3, ip
9001aec4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001aec8:	430b      	orrs	r3, r1
9001aeca:	803b      	strh	r3, [r7, #0]
9001aecc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001aece:	3702      	adds	r7, #2
9001aed0:	f10b 3bff 	add.w	fp, fp, #4294967295
9001aed4:	449a      	add	sl, r3
9001aed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001aed8:	441d      	add	r5, r3
9001aeda:	e742      	b.n	9001ad62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001aedc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001aede:	f108 0802 	add.w	r8, r8, #2
9001aee2:	449a      	add	sl, r3
9001aee4:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001aee6:	441d      	add	r5, r3
9001aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001aeea:	3b01      	subs	r3, #1
9001aeec:	9309      	str	r3, [sp, #36]	; 0x24
9001aeee:	e718      	b.n	9001ad22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001aef0:	d023      	beq.n	9001af3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001aef4:	9825      	ldr	r0, [sp, #148]	; 0x94
9001aef6:	3b01      	subs	r3, #1
9001aef8:	fb00 a003 	mla	r0, r0, r3, sl
9001aefc:	1400      	asrs	r0, r0, #16
9001aefe:	f53f af2d 	bmi.w	9001ad5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001af02:	3901      	subs	r1, #1
9001af04:	4288      	cmp	r0, r1
9001af06:	f6bf af29 	bge.w	9001ad5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001af0a:	9926      	ldr	r1, [sp, #152]	; 0x98
9001af0c:	fb01 5303 	mla	r3, r1, r3, r5
9001af10:	141b      	asrs	r3, r3, #16
9001af12:	f53f af23 	bmi.w	9001ad5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001af16:	3a01      	subs	r2, #1
9001af18:	4293      	cmp	r3, r2
9001af1a:	f6bf af1f 	bge.w	9001ad5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001af1e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001af22:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001af26:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001af2a:	f1be 0f00 	cmp.w	lr, #0
9001af2e:	dc6c      	bgt.n	9001b00a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001af32:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001af36:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001af3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001af3c:	2b00      	cmp	r3, #0
9001af3e:	f340 810e 	ble.w	9001b15e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001af42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001af46:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001af48:	ee30 0a04 	vadd.f32	s0, s0, s8
9001af4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001af50:	eef0 6a62 	vmov.f32	s13, s5
9001af54:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001af58:	ee31 1a05 	vadd.f32	s2, s2, s10
9001af5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001af60:	ee16 aa90 	vmov	sl, s13
9001af64:	eef0 6a43 	vmov.f32	s13, s6
9001af68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001af6c:	ee16 5a90 	vmov	r5, s13
9001af70:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001af74:	ee61 7a27 	vmul.f32	s15, s2, s15
9001af78:	ee77 2a62 	vsub.f32	s5, s14, s5
9001af7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001af80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001af84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001af88:	ee12 2a90 	vmov	r2, s5
9001af8c:	eef0 2a47 	vmov.f32	s5, s14
9001af90:	fb92 f3f3 	sdiv	r3, r2, r3
9001af94:	ee13 2a10 	vmov	r2, s6
9001af98:	9325      	str	r3, [sp, #148]	; 0x94
9001af9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001af9c:	eeb0 3a67 	vmov.f32	s6, s15
9001afa0:	fb92 f3f3 	sdiv	r3, r2, r3
9001afa4:	9326      	str	r3, [sp, #152]	; 0x98
9001afa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001afa8:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001afaa:	3b01      	subs	r3, #1
9001afac:	930c      	str	r3, [sp, #48]	; 0x30
9001afae:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001afb0:	bf08      	it	eq
9001afb2:	4613      	moveq	r3, r2
9001afb4:	9309      	str	r3, [sp, #36]	; 0x24
9001afb6:	e6a6      	b.n	9001ad06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001afb8:	2900      	cmp	r1, #0
9001afba:	f43f af10 	beq.w	9001adde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001afbe:	f819 3003 	ldrb.w	r3, [r9, r3]
9001afc2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001afc6:	930f      	str	r3, [sp, #60]	; 0x3c
9001afc8:	e709      	b.n	9001adde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001afca:	f112 0901 	adds.w	r9, r2, #1
9001afce:	f53f af7d 	bmi.w	9001aecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001afd2:	454b      	cmp	r3, r9
9001afd4:	f6ff af7a 	blt.w	9001aecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001afd8:	f11c 0901 	adds.w	r9, ip, #1
9001afdc:	f53f af76 	bmi.w	9001aecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001afe0:	45ce      	cmp	lr, r9
9001afe2:	f6ff af73 	blt.w	9001aecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001afe6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001afe8:	b21b      	sxth	r3, r3
9001afea:	9202      	str	r2, [sp, #8]
9001afec:	fa0f f28e 	sxth.w	r2, lr
9001aff0:	9300      	str	r3, [sp, #0]
9001aff2:	4633      	mov	r3, r6
9001aff4:	9201      	str	r2, [sp, #4]
9001aff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001aff8:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001affc:	e9cd c003 	strd	ip, r0, [sp, #12]
9001b000:	4639      	mov	r1, r7
9001b002:	9816      	ldr	r0, [sp, #88]	; 0x58
9001b004:	f7ff fd8e 	bl	9001ab24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001b008:	e760      	b.n	9001aecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001b00a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b00c:	ea4f 422a 	mov.w	r2, sl, asr #16
9001b010:	1429      	asrs	r1, r5, #16
9001b012:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001b014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001b018:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001b01c:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001b020:	fb03 2101 	mla	r1, r3, r1, r2
9001b024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001b026:	440a      	add	r2, r1
9001b028:	5c61      	ldrb	r1, [r4, r1]
9001b02a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001b02e:	f1bc 0f00 	cmp.w	ip, #0
9001b032:	f000 808c 	beq.w	9001b14e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001b036:	7857      	ldrb	r7, [r2, #1]
9001b038:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001b03c:	9413      	str	r4, [sp, #76]	; 0x4c
9001b03e:	b140      	cbz	r0, 9001b052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001b040:	18d7      	adds	r7, r2, r3
9001b042:	5cd3      	ldrb	r3, [r2, r3]
9001b044:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001b048:	9310      	str	r3, [sp, #64]	; 0x40
9001b04a:	787b      	ldrb	r3, [r7, #1]
9001b04c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001b050:	9314      	str	r3, [sp, #80]	; 0x50
9001b052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001b054:	fb1c f200 	smulbb	r2, ip, r0
9001b058:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001b05a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001b05e:	041f      	lsls	r7, r3, #16
9001b060:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001b064:	10d2      	asrs	r2, r2, #3
9001b066:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001b06a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001b06e:	431f      	orrs	r7, r3
9001b070:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001b074:	9317      	str	r3, [sp, #92]	; 0x5c
9001b076:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001b078:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001b07a:	041b      	lsls	r3, r3, #16
9001b07c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b080:	ea43 030b 	orr.w	r3, r3, fp
9001b084:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001b088:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001b08c:	4353      	muls	r3, r2
9001b08e:	fb04 3707 	mla	r7, r4, r7, r3
9001b092:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001b096:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001b098:	ea43 0b01 	orr.w	fp, r3, r1
9001b09c:	f1c0 0110 	rsb	r1, r0, #16
9001b0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b0a2:	eba1 0c0c 	sub.w	ip, r1, ip
9001b0a6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001b0aa:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001b0ae:	fb0c 770b 	mla	r7, ip, fp, r7
9001b0b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001b0b6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001b0ba:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001b0be:	ea4c 0c0b 	orr.w	ip, ip, fp
9001b0c2:	fb02 770c 	mla	r7, r2, ip, r7
9001b0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001b0c8:	0d79      	lsrs	r1, r7, #21
9001b0ca:	8812      	ldrh	r2, [r2, #0]
9001b0cc:	097f      	lsrs	r7, r7, #5
9001b0ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001b0d2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001b0d6:	430f      	orrs	r7, r1
9001b0d8:	1211      	asrs	r1, r2, #8
9001b0da:	b2bb      	uxth	r3, r7
9001b0dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001b0e0:	10d7      	asrs	r7, r2, #3
9001b0e2:	fb11 f104 	smulbb	r1, r1, r4
9001b0e6:	1218      	asrs	r0, r3, #8
9001b0e8:	00d2      	lsls	r2, r2, #3
9001b0ea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b0ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001b0f2:	fb17 f704 	smulbb	r7, r7, r4
9001b0f6:	b2d2      	uxtb	r2, r2
9001b0f8:	fb00 1009 	mla	r0, r0, r9, r1
9001b0fc:	10d9      	asrs	r1, r3, #3
9001b0fe:	fb12 f204 	smulbb	r2, r2, r4
9001b102:	00db      	lsls	r3, r3, #3
9001b104:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001b108:	b280      	uxth	r0, r0
9001b10a:	b2db      	uxtb	r3, r3
9001b10c:	fb01 7109 	mla	r1, r1, r9, r7
9001b110:	fb03 2309 	mla	r3, r3, r9, r2
9001b114:	1c42      	adds	r2, r0, #1
9001b116:	b289      	uxth	r1, r1
9001b118:	b29b      	uxth	r3, r3
9001b11a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001b11e:	1c4f      	adds	r7, r1, #1
9001b120:	1c5a      	adds	r2, r3, #1
9001b122:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001b126:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001b12a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001b12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b130:	0949      	lsrs	r1, r1, #5
9001b132:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001b136:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001b13a:	4310      	orrs	r0, r2
9001b13c:	4308      	orrs	r0, r1
9001b13e:	f823 0b02 	strh.w	r0, [r3], #2
9001b142:	930e      	str	r3, [sp, #56]	; 0x38
9001b144:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001b146:	449a      	add	sl, r3
9001b148:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b14a:	441d      	add	r5, r3
9001b14c:	e6ed      	b.n	9001af2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001b14e:	2800      	cmp	r0, #0
9001b150:	f43f af7f 	beq.w	9001b052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001b154:	5cd3      	ldrb	r3, [r2, r3]
9001b156:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001b15a:	9310      	str	r3, [sp, #64]	; 0x40
9001b15c:	e779      	b.n	9001b052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001b15e:	b019      	add	sp, #100	; 0x64
9001b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001b168:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001b16c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001b170:	f1b8 0f00 	cmp.w	r8, #0
9001b174:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001b178:	fb08 470e 	mla	r7, r8, lr, r4
9001b17c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001b180:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001b184:	eb02 0907 	add.w	r9, r2, r7
9001b188:	8808      	ldrh	r0, [r1, #0]
9001b18a:	db67      	blt.n	9001b25c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001b18c:	45c2      	cmp	sl, r8
9001b18e:	dd65      	ble.n	9001b25c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001b190:	2c00      	cmp	r4, #0
9001b192:	db61      	blt.n	9001b258 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001b194:	45a6      	cmp	lr, r4
9001b196:	dd5f      	ble.n	9001b258 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001b198:	5dd2      	ldrb	r2, [r2, r7]
9001b19a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001b19e:	1c62      	adds	r2, r4, #1
9001b1a0:	d45f      	bmi.n	9001b262 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001b1a2:	4596      	cmp	lr, r2
9001b1a4:	dd5d      	ble.n	9001b262 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001b1a6:	2d00      	cmp	r5, #0
9001b1a8:	d05b      	beq.n	9001b262 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001b1aa:	f899 2001 	ldrb.w	r2, [r9, #1]
9001b1ae:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001b1b2:	f118 0801 	adds.w	r8, r8, #1
9001b1b6:	d458      	bmi.n	9001b26a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001b1b8:	45c2      	cmp	sl, r8
9001b1ba:	dd56      	ble.n	9001b26a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001b1bc:	2e00      	cmp	r6, #0
9001b1be:	d054      	beq.n	9001b26a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001b1c0:	2c00      	cmp	r4, #0
9001b1c2:	db50      	blt.n	9001b266 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001b1c4:	45a6      	cmp	lr, r4
9001b1c6:	dd4e      	ble.n	9001b266 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001b1c8:	f819 200e 	ldrb.w	r2, [r9, lr]
9001b1cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001b1d0:	3401      	adds	r4, #1
9001b1d2:	d407      	bmi.n	9001b1e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001b1d4:	45a6      	cmp	lr, r4
9001b1d6:	dd05      	ble.n	9001b1e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001b1d8:	b125      	cbz	r5, 9001b1e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001b1da:	44ce      	add	lr, r9
9001b1dc:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001b1e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001b1e4:	fb15 f406 	smulbb	r4, r5, r6
9001b1e8:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001b1ec:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001b1f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001b1f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b1f8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001b1fc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001b200:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001b204:	ea43 0c0c 	orr.w	ip, r3, ip
9001b208:	f1c6 0310 	rsb	r3, r6, #16
9001b20c:	ea4e 0707 	orr.w	r7, lr, r7
9001b210:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001b214:	1b5b      	subs	r3, r3, r5
9001b216:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001b21a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001b21e:	437d      	muls	r5, r7
9001b220:	fb03 5c0c 	mla	ip, r3, ip, r5
9001b224:	0403      	lsls	r3, r0, #16
9001b226:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001b22a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b22e:	4318      	orrs	r0, r3
9001b230:	0413      	lsls	r3, r2, #16
9001b232:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001b236:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b23a:	fb04 c000 	mla	r0, r4, r0, ip
9001b23e:	4313      	orrs	r3, r2
9001b240:	fb06 0003 	mla	r0, r6, r3, r0
9001b244:	0d43      	lsrs	r3, r0, #21
9001b246:	0940      	lsrs	r0, r0, #5
9001b248:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b24c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001b250:	4318      	orrs	r0, r3
9001b252:	8008      	strh	r0, [r1, #0]
9001b254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001b258:	4684      	mov	ip, r0
9001b25a:	e7a0      	b.n	9001b19e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001b25c:	4607      	mov	r7, r0
9001b25e:	4684      	mov	ip, r0
9001b260:	e7a7      	b.n	9001b1b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001b262:	4607      	mov	r7, r0
9001b264:	e7a5      	b.n	9001b1b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001b266:	4602      	mov	r2, r0
9001b268:	e7b2      	b.n	9001b1d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001b26a:	4602      	mov	r2, r0
9001b26c:	e7ba      	b.n	9001b1e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001b26e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b272:	b093      	sub	sp, #76	; 0x4c
9001b274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001b278:	920f      	str	r2, [sp, #60]	; 0x3c
9001b27a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001b27c:	9010      	str	r0, [sp, #64]	; 0x40
9001b27e:	9108      	str	r1, [sp, #32]
9001b280:	6850      	ldr	r0, [r2, #4]
9001b282:	9306      	str	r3, [sp, #24]
9001b284:	6812      	ldr	r2, [r2, #0]
9001b286:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001b28a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001b28e:	fb00 1303 	mla	r3, r0, r3, r1
9001b292:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001b296:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001b298:	681b      	ldr	r3, [r3, #0]
9001b29a:	9307      	str	r3, [sp, #28]
9001b29c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001b29e:	685f      	ldr	r7, [r3, #4]
9001b2a0:	3704      	adds	r7, #4
9001b2a2:	9b08      	ldr	r3, [sp, #32]
9001b2a4:	2b00      	cmp	r3, #0
9001b2a6:	dc03      	bgt.n	9001b2b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001b2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b2aa:	2b00      	cmp	r3, #0
9001b2ac:	f340 81b2 	ble.w	9001b614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001b2b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001b2b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001b2b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001b2ba:	1e48      	subs	r0, r1, #1
9001b2bc:	f102 3cff 	add.w	ip, r2, #4294967295
9001b2c0:	9b06      	ldr	r3, [sp, #24]
9001b2c2:	2b00      	cmp	r3, #0
9001b2c4:	f340 80a9 	ble.w	9001b41a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001b2c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001b2cc:	ea4f 4326 	mov.w	r3, r6, asr #16
9001b2d0:	d406      	bmi.n	9001b2e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b2d2:	4586      	cmp	lr, r0
9001b2d4:	da04      	bge.n	9001b2e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b2d6:	2b00      	cmp	r3, #0
9001b2d8:	db02      	blt.n	9001b2e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b2da:	4563      	cmp	r3, ip
9001b2dc:	f2c0 809e 	blt.w	9001b41c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001b2e0:	f11e 0e01 	adds.w	lr, lr, #1
9001b2e4:	f100 808f 	bmi.w	9001b406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001b2e8:	4571      	cmp	r1, lr
9001b2ea:	f2c0 808c 	blt.w	9001b406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001b2ee:	3301      	adds	r3, #1
9001b2f0:	f100 8089 	bmi.w	9001b406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001b2f4:	429a      	cmp	r2, r3
9001b2f6:	f2c0 8086 	blt.w	9001b406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001b2fa:	f8dd b018 	ldr.w	fp, [sp, #24]
9001b2fe:	46c8      	mov	r8, r9
9001b300:	f1bb 0f00 	cmp.w	fp, #0
9001b304:	f340 80a6 	ble.w	9001b454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001b308:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001b30a:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001b30e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001b310:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001b314:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001b318:	1422      	asrs	r2, r4, #16
9001b31a:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001b31e:	689b      	ldr	r3, [r3, #8]
9001b320:	f100 80e3 	bmi.w	9001b4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001b324:	f103 3aff 	add.w	sl, r3, #4294967295
9001b328:	4552      	cmp	r2, sl
9001b32a:	f280 80de 	bge.w	9001b4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001b32e:	f1bc 0f00 	cmp.w	ip, #0
9001b332:	f2c0 80da 	blt.w	9001b4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001b336:	f10e 3aff 	add.w	sl, lr, #4294967295
9001b33a:	45d4      	cmp	ip, sl
9001b33c:	f280 80d5 	bge.w	9001b4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001b340:	b21b      	sxth	r3, r3
9001b342:	9d07      	ldr	r5, [sp, #28]
9001b344:	fb0c 2203 	mla	r2, ip, r3, r2
9001b348:	eb05 0a02 	add.w	sl, r5, r2
9001b34c:	5caa      	ldrb	r2, [r5, r2]
9001b34e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001b352:	2800      	cmp	r0, #0
9001b354:	f000 80c0 	beq.w	9001b4d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001b358:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001b35c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001b360:	920b      	str	r2, [sp, #44]	; 0x2c
9001b362:	b151      	cbz	r1, 9001b37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001b364:	eb0a 0203 	add.w	r2, sl, r3
9001b368:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001b36c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b370:	9309      	str	r3, [sp, #36]	; 0x24
9001b372:	7853      	ldrb	r3, [r2, #1]
9001b374:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b378:	930c      	str	r3, [sp, #48]	; 0x30
9001b37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b37c:	fb10 f201 	smulbb	r2, r0, r1
9001b380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001b382:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001b386:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001b38a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001b38e:	10d2      	asrs	r2, r2, #3
9001b390:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001b394:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001b398:	ea4c 0c03 	orr.w	ip, ip, r3
9001b39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b39e:	041b      	lsls	r3, r3, #16
9001b3a0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b3a4:	432b      	orrs	r3, r5
9001b3a6:	4353      	muls	r3, r2
9001b3a8:	fb0a 330c 	mla	r3, sl, ip, r3
9001b3ac:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001b3b0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001b3b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001b3b8:	ea4c 0e0e 	orr.w	lr, ip, lr
9001b3bc:	f1c1 0c10 	rsb	ip, r1, #16
9001b3c0:	ebac 0c00 	sub.w	ip, ip, r0
9001b3c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001b3c8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001b3cc:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001b3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b3d2:	0418      	lsls	r0, r3, #16
9001b3d4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001b3d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001b3dc:	4318      	orrs	r0, r3
9001b3de:	fb02 c200 	mla	r2, r2, r0, ip
9001b3e2:	0d53      	lsrs	r3, r2, #21
9001b3e4:	0952      	lsrs	r2, r2, #5
9001b3e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b3ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001b3ee:	431a      	orrs	r2, r3
9001b3f0:	f8a8 2000 	strh.w	r2, [r8]
9001b3f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b3f6:	f108 0802 	add.w	r8, r8, #2
9001b3fa:	f10b 3bff 	add.w	fp, fp, #4294967295
9001b3fe:	441c      	add	r4, r3
9001b400:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b402:	441e      	add	r6, r3
9001b404:	e77c      	b.n	9001b300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b408:	f109 0902 	add.w	r9, r9, #2
9001b40c:	441c      	add	r4, r3
9001b40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b410:	441e      	add	r6, r3
9001b412:	9b06      	ldr	r3, [sp, #24]
9001b414:	3b01      	subs	r3, #1
9001b416:	9306      	str	r3, [sp, #24]
9001b418:	e752      	b.n	9001b2c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001b41a:	d020      	beq.n	9001b45e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001b41c:	9b06      	ldr	r3, [sp, #24]
9001b41e:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001b420:	3b01      	subs	r3, #1
9001b422:	fb00 4003 	mla	r0, r0, r3, r4
9001b426:	1400      	asrs	r0, r0, #16
9001b428:	f53f af67 	bmi.w	9001b2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001b42c:	3901      	subs	r1, #1
9001b42e:	4288      	cmp	r0, r1
9001b430:	f6bf af63 	bge.w	9001b2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001b434:	9920      	ldr	r1, [sp, #128]	; 0x80
9001b436:	fb01 6303 	mla	r3, r1, r3, r6
9001b43a:	141b      	asrs	r3, r3, #16
9001b43c:	f53f af5d 	bmi.w	9001b2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001b440:	3a01      	subs	r2, #1
9001b442:	4293      	cmp	r3, r2
9001b444:	f6bf af59 	bge.w	9001b2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001b448:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001b44c:	46ca      	mov	sl, r9
9001b44e:	f1b8 0f00 	cmp.w	r8, #0
9001b452:	dc67      	bgt.n	9001b524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001b454:	9b06      	ldr	r3, [sp, #24]
9001b456:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001b45a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001b45e:	9b08      	ldr	r3, [sp, #32]
9001b460:	2b00      	cmp	r3, #0
9001b462:	f340 80d7 	ble.w	9001b614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001b466:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b46a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001b46c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b470:	eeb0 6a62 	vmov.f32	s12, s5
9001b474:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001b478:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b47c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b480:	ee16 4a10 	vmov	r4, s12
9001b484:	eeb0 6a43 	vmov.f32	s12, s6
9001b488:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b48c:	ee16 6a10 	vmov	r6, s12
9001b490:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b494:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b498:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b49c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b4a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b4a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b4a8:	ee12 2a90 	vmov	r2, s5
9001b4ac:	eef0 2a47 	vmov.f32	s5, s14
9001b4b0:	fb92 f3f3 	sdiv	r3, r2, r3
9001b4b4:	ee13 2a10 	vmov	r2, s6
9001b4b8:	931f      	str	r3, [sp, #124]	; 0x7c
9001b4ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001b4bc:	eeb0 3a67 	vmov.f32	s6, s15
9001b4c0:	fb92 f3f3 	sdiv	r3, r2, r3
9001b4c4:	9320      	str	r3, [sp, #128]	; 0x80
9001b4c6:	9b08      	ldr	r3, [sp, #32]
9001b4c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001b4ca:	3b01      	subs	r3, #1
9001b4cc:	9308      	str	r3, [sp, #32]
9001b4ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001b4d0:	bf08      	it	eq
9001b4d2:	4613      	moveq	r3, r2
9001b4d4:	9306      	str	r3, [sp, #24]
9001b4d6:	e6e4      	b.n	9001b2a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001b4d8:	2900      	cmp	r1, #0
9001b4da:	f43f af4e 	beq.w	9001b37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001b4de:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001b4e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b4e6:	9309      	str	r3, [sp, #36]	; 0x24
9001b4e8:	e747      	b.n	9001b37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001b4ea:	f112 0a01 	adds.w	sl, r2, #1
9001b4ee:	d481      	bmi.n	9001b3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001b4f0:	4553      	cmp	r3, sl
9001b4f2:	f6ff af7f 	blt.w	9001b3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001b4f6:	f11c 0a01 	adds.w	sl, ip, #1
9001b4fa:	f53f af7b 	bmi.w	9001b3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001b4fe:	45d6      	cmp	lr, sl
9001b500:	f6ff af78 	blt.w	9001b3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001b504:	b21b      	sxth	r3, r3
9001b506:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001b50a:	fa0f f28e 	sxth.w	r2, lr
9001b50e:	9300      	str	r3, [sp, #0]
9001b510:	463b      	mov	r3, r7
9001b512:	9201      	str	r2, [sp, #4]
9001b514:	9a07      	ldr	r2, [sp, #28]
9001b516:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001b51a:	4641      	mov	r1, r8
9001b51c:	9810      	ldr	r0, [sp, #64]	; 0x40
9001b51e:	f7ff fe21 	bl	9001b164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001b522:	e767      	b.n	9001b3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001b524:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001b526:	1422      	asrs	r2, r4, #16
9001b528:	1431      	asrs	r1, r6, #16
9001b52a:	9d07      	ldr	r5, [sp, #28]
9001b52c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001b530:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001b534:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001b538:	fb03 2101 	mla	r1, r3, r1, r2
9001b53c:	9a07      	ldr	r2, [sp, #28]
9001b53e:	440a      	add	r2, r1
9001b540:	5c69      	ldrb	r1, [r5, r1]
9001b542:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001b546:	f1be 0f00 	cmp.w	lr, #0
9001b54a:	d05c      	beq.n	9001b606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001b54c:	f892 c001 	ldrb.w	ip, [r2, #1]
9001b550:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001b554:	950d      	str	r5, [sp, #52]	; 0x34
9001b556:	b150      	cbz	r0, 9001b56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001b558:	eb02 0c03 	add.w	ip, r2, r3
9001b55c:	5cd3      	ldrb	r3, [r2, r3]
9001b55e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b562:	930a      	str	r3, [sp, #40]	; 0x28
9001b564:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001b568:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b56c:	930e      	str	r3, [sp, #56]	; 0x38
9001b56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b570:	fb1e f200 	smulbb	r2, lr, r0
9001b574:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001b576:	f108 38ff 	add.w	r8, r8, #4294967295
9001b57a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001b57e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001b582:	10d2      	asrs	r2, r2, #3
9001b584:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001b588:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001b58c:	ea4c 0c03 	orr.w	ip, ip, r3
9001b590:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001b594:	9311      	str	r3, [sp, #68]	; 0x44
9001b596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b598:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001b59a:	041b      	lsls	r3, r3, #16
9001b59c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001b5a0:	ea43 030b 	orr.w	r3, r3, fp
9001b5a4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001b5a8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001b5ac:	4353      	muls	r3, r2
9001b5ae:	fb05 3c0c 	mla	ip, r5, ip, r3
9001b5b2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001b5b6:	ea43 0b01 	orr.w	fp, r3, r1
9001b5ba:	f1c0 0110 	rsb	r1, r0, #16
9001b5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b5c0:	eba1 0e0e 	sub.w	lr, r1, lr
9001b5c4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001b5c8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001b5cc:	fb0e cc0b 	mla	ip, lr, fp, ip
9001b5d0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001b5d4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001b5d8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001b5dc:	ea4b 0e0e 	orr.w	lr, fp, lr
9001b5e0:	fb02 cc0e 	mla	ip, r2, lr, ip
9001b5e4:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001b5e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001b5ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b5f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001b5f4:	ea43 0c0c 	orr.w	ip, r3, ip
9001b5f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b5fa:	441c      	add	r4, r3
9001b5fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b5fe:	f82a cb02 	strh.w	ip, [sl], #2
9001b602:	441e      	add	r6, r3
9001b604:	e723      	b.n	9001b44e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001b606:	2800      	cmp	r0, #0
9001b608:	d0b1      	beq.n	9001b56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001b60a:	5cd3      	ldrb	r3, [r2, r3]
9001b60c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001b610:	930a      	str	r3, [sp, #40]	; 0x28
9001b612:	e7ac      	b.n	9001b56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001b614:	b013      	add	sp, #76	; 0x4c
9001b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b61a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001b61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b61e:	880d      	ldrh	r5, [r1, #0]
9001b620:	b087      	sub	sp, #28
9001b622:	10ef      	asrs	r7, r5, #3
9001b624:	9103      	str	r1, [sp, #12]
9001b626:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001b62a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001b62e:	00ed      	lsls	r5, r5, #3
9001b630:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b634:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001b638:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001b63c:	b2ed      	uxtb	r5, r5
9001b63e:	9701      	str	r7, [sp, #4]
9001b640:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001b644:	9502      	str	r5, [sp, #8]
9001b646:	9d01      	ldr	r5, [sp, #4]
9001b648:	9902      	ldr	r1, [sp, #8]
9001b64a:	022d      	lsls	r5, r5, #8
9001b64c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001b650:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001b654:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001b658:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001b65c:	430d      	orrs	r5, r1
9001b65e:	fb06 0709 	mla	r7, r6, r9, r0
9001b662:	2e00      	cmp	r6, #0
9001b664:	9505      	str	r5, [sp, #20]
9001b666:	eb02 0c07 	add.w	ip, r2, r7
9001b66a:	f2c0 80b6 	blt.w	9001b7da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001b66e:	45b3      	cmp	fp, r6
9001b670:	f340 80b3 	ble.w	9001b7da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001b674:	2800      	cmp	r0, #0
9001b676:	f2c0 80ae 	blt.w	9001b7d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001b67a:	4581      	cmp	r9, r0
9001b67c:	f340 80ab 	ble.w	9001b7d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001b680:	5dd7      	ldrb	r7, [r2, r7]
9001b682:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001b686:	441f      	add	r7, r3
9001b688:	1c42      	adds	r2, r0, #1
9001b68a:	f100 80a9 	bmi.w	9001b7e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001b68e:	4591      	cmp	r9, r2
9001b690:	f340 80a6 	ble.w	9001b7e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001b694:	2c00      	cmp	r4, #0
9001b696:	f000 80a3 	beq.w	9001b7e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001b69a:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001b69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001b6a2:	441d      	add	r5, r3
9001b6a4:	3601      	adds	r6, #1
9001b6a6:	f100 809f 	bmi.w	9001b7e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001b6aa:	45b3      	cmp	fp, r6
9001b6ac:	f340 809c 	ble.w	9001b7e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001b6b0:	f1be 0f00 	cmp.w	lr, #0
9001b6b4:	f000 8098 	beq.w	9001b7e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001b6b8:	2800      	cmp	r0, #0
9001b6ba:	f2c0 8093 	blt.w	9001b7e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001b6be:	4581      	cmp	r9, r0
9001b6c0:	f340 8090 	ble.w	9001b7e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001b6c4:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001b6c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001b6cc:	441e      	add	r6, r3
9001b6ce:	3001      	adds	r0, #1
9001b6d0:	f100 808d 	bmi.w	9001b7ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001b6d4:	4581      	cmp	r9, r0
9001b6d6:	f340 808a 	ble.w	9001b7ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001b6da:	2c00      	cmp	r4, #0
9001b6dc:	f000 8087 	beq.w	9001b7ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001b6e0:	44e1      	add	r9, ip
9001b6e2:	f899 2001 	ldrb.w	r2, [r9, #1]
9001b6e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b6ea:	4413      	add	r3, r2
9001b6ec:	b2a4      	uxth	r4, r4
9001b6ee:	f897 c002 	ldrb.w	ip, [r7, #2]
9001b6f2:	fa1f fe8e 	uxth.w	lr, lr
9001b6f6:	9901      	ldr	r1, [sp, #4]
9001b6f8:	fb04 fb0e 	mul.w	fp, r4, lr
9001b6fc:	0124      	lsls	r4, r4, #4
9001b6fe:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001b702:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001b706:	eba4 040b 	sub.w	r4, r4, fp
9001b70a:	fa1f f08e 	uxth.w	r0, lr
9001b70e:	b2a2      	uxth	r2, r4
9001b710:	78ac      	ldrb	r4, [r5, #2]
9001b712:	eba9 0900 	sub.w	r9, r9, r0
9001b716:	fa1f fe88 	uxth.w	lr, r8
9001b71a:	4354      	muls	r4, r2
9001b71c:	ea6f 0808 	mvn.w	r8, r8
9001b720:	fa1f f989 	uxth.w	r9, r9
9001b724:	fa5f f888 	uxtb.w	r8, r8
9001b728:	fb09 440c 	mla	r4, r9, ip, r4
9001b72c:	f896 c002 	ldrb.w	ip, [r6, #2]
9001b730:	fb1a fa08 	smulbb	sl, sl, r8
9001b734:	fb00 440c 	mla	r4, r0, ip, r4
9001b738:	f893 c002 	ldrb.w	ip, [r3, #2]
9001b73c:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001b740:	787c      	ldrb	r4, [r7, #1]
9001b742:	783f      	ldrb	r7, [r7, #0]
9001b744:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001b748:	fb0c ac0e 	mla	ip, ip, lr, sl
9001b74c:	f895 a001 	ldrb.w	sl, [r5, #1]
9001b750:	782d      	ldrb	r5, [r5, #0]
9001b752:	fb02 fa0a 	mul.w	sl, r2, sl
9001b756:	fa1f fc8c 	uxth.w	ip, ip
9001b75a:	436a      	muls	r2, r5
9001b75c:	7835      	ldrb	r5, [r6, #0]
9001b75e:	fb09 aa04 	mla	sl, r9, r4, sl
9001b762:	7874      	ldrb	r4, [r6, #1]
9001b764:	fb09 2207 	mla	r2, r9, r7, r2
9001b768:	fb00 aa04 	mla	sl, r0, r4, sl
9001b76c:	785c      	ldrb	r4, [r3, #1]
9001b76e:	fb00 2005 	mla	r0, r0, r5, r2
9001b772:	781b      	ldrb	r3, [r3, #0]
9001b774:	fb0b a404 	mla	r4, fp, r4, sl
9001b778:	fb11 fa08 	smulbb	sl, r1, r8
9001b77c:	fb0b 0b03 	mla	fp, fp, r3, r0
9001b780:	9b02      	ldr	r3, [sp, #8]
9001b782:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001b786:	fb13 f808 	smulbb	r8, r3, r8
9001b78a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001b78e:	fb04 a40e 	mla	r4, r4, lr, sl
9001b792:	f10c 0301 	add.w	r3, ip, #1
9001b796:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001b79a:	b2a4      	uxth	r4, r4
9001b79c:	fa1f fe8e 	uxth.w	lr, lr
9001b7a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001b7a4:	f104 0a01 	add.w	sl, r4, #1
9001b7a8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001b7ac:	f10e 0c01 	add.w	ip, lr, #1
9001b7b0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001b7b4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001b7b8:	0964      	lsrs	r4, r4, #5
9001b7ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b7be:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001b7c2:	ea4c 0c03 	orr.w	ip, ip, r3
9001b7c6:	9b03      	ldr	r3, [sp, #12]
9001b7c8:	ea4c 0c04 	orr.w	ip, ip, r4
9001b7cc:	f8a3 c000 	strh.w	ip, [r3]
9001b7d0:	b007      	add	sp, #28
9001b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b7d6:	af05      	add	r7, sp, #20
9001b7d8:	e756      	b.n	9001b688 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001b7da:	ad05      	add	r5, sp, #20
9001b7dc:	462f      	mov	r7, r5
9001b7de:	e761      	b.n	9001b6a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001b7e0:	ad05      	add	r5, sp, #20
9001b7e2:	e75f      	b.n	9001b6a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001b7e4:	ae05      	add	r6, sp, #20
9001b7e6:	e772      	b.n	9001b6ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001b7e8:	ab05      	add	r3, sp, #20
9001b7ea:	461e      	mov	r6, r3
9001b7ec:	e77e      	b.n	9001b6ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001b7ee:	ab05      	add	r3, sp, #20
9001b7f0:	e77c      	b.n	9001b6ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001b7f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b7f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b7f6:	b095      	sub	sp, #84	; 0x54
9001b7f8:	9212      	str	r2, [sp, #72]	; 0x48
9001b7fa:	9309      	str	r3, [sp, #36]	; 0x24
9001b7fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001b7fe:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001b802:	9013      	str	r0, [sp, #76]	; 0x4c
9001b804:	930f      	str	r3, [sp, #60]	; 0x3c
9001b806:	6850      	ldr	r0, [r2, #4]
9001b808:	910e      	str	r1, [sp, #56]	; 0x38
9001b80a:	6812      	ldr	r2, [r2, #0]
9001b80c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001b810:	fb00 1303 	mla	r3, r0, r3, r1
9001b814:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b818:	930a      	str	r3, [sp, #40]	; 0x28
9001b81a:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b81c:	681b      	ldr	r3, [r3, #0]
9001b81e:	930d      	str	r3, [sp, #52]	; 0x34
9001b820:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b822:	685c      	ldr	r4, [r3, #4]
9001b824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b826:	3404      	adds	r4, #4
9001b828:	43db      	mvns	r3, r3
9001b82a:	b2db      	uxtb	r3, r3
9001b82c:	930b      	str	r3, [sp, #44]	; 0x2c
9001b82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b830:	2b00      	cmp	r3, #0
9001b832:	dc03      	bgt.n	9001b83c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001b834:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b836:	2b00      	cmp	r3, #0
9001b838:	f340 8255 	ble.w	9001bce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001b83c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b83e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001b842:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001b846:	1e48      	subs	r0, r1, #1
9001b848:	1e55      	subs	r5, r2, #1
9001b84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b84c:	2b00      	cmp	r3, #0
9001b84e:	f340 80f9 	ble.w	9001ba44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001b852:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001b854:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b856:	1436      	asrs	r6, r6, #16
9001b858:	ea4f 4323 	mov.w	r3, r3, asr #16
9001b85c:	d406      	bmi.n	9001b86c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b85e:	4286      	cmp	r6, r0
9001b860:	da04      	bge.n	9001b86c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b862:	2b00      	cmp	r3, #0
9001b864:	db02      	blt.n	9001b86c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b866:	42ab      	cmp	r3, r5
9001b868:	f2c0 80ed 	blt.w	9001ba46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001b86c:	3601      	adds	r6, #1
9001b86e:	f100 80da 	bmi.w	9001ba26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b872:	42b1      	cmp	r1, r6
9001b874:	f2c0 80d7 	blt.w	9001ba26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b878:	3301      	adds	r3, #1
9001b87a:	f100 80d4 	bmi.w	9001ba26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b87e:	429a      	cmp	r2, r3
9001b880:	f2c0 80d1 	blt.w	9001ba26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b884:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b886:	9311      	str	r3, [sp, #68]	; 0x44
9001b888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b88a:	930c      	str	r3, [sp, #48]	; 0x30
9001b88c:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b88e:	2b00      	cmp	r3, #0
9001b890:	f340 80fa 	ble.w	9001ba88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001b894:	9826      	ldr	r0, [sp, #152]	; 0x98
9001b896:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b898:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001b89a:	68c6      	ldr	r6, [r0, #12]
9001b89c:	141d      	asrs	r5, r3, #16
9001b89e:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001b8a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001b8a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b8a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001b8a8:	1400      	asrs	r0, r0, #16
9001b8aa:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001b8ae:	6892      	ldr	r2, [r2, #8]
9001b8b0:	f100 813e 	bmi.w	9001bb30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b8b4:	1e57      	subs	r7, r2, #1
9001b8b6:	42b8      	cmp	r0, r7
9001b8b8:	f280 813a 	bge.w	9001bb30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b8bc:	2d00      	cmp	r5, #0
9001b8be:	f2c0 8137 	blt.w	9001bb30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b8c2:	1e77      	subs	r7, r6, #1
9001b8c4:	42bd      	cmp	r5, r7
9001b8c6:	f280 8133 	bge.w	9001bb30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b8ca:	b212      	sxth	r2, r2
9001b8cc:	fb05 0002 	mla	r0, r5, r2, r0
9001b8d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001b8d2:	f815 a000 	ldrb.w	sl, [r5, r0]
9001b8d6:	182e      	adds	r6, r5, r0
9001b8d8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001b8dc:	eb04 050a 	add.w	r5, r4, sl
9001b8e0:	2b00      	cmp	r3, #0
9001b8e2:	f000 8117 	beq.w	9001bb14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001b8e6:	f896 c001 	ldrb.w	ip, [r6, #1]
9001b8ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001b8ee:	44a4      	add	ip, r4
9001b8f0:	2900      	cmp	r1, #0
9001b8f2:	f000 8117 	beq.w	9001bb24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001b8f6:	18b0      	adds	r0, r6, r2
9001b8f8:	5cb2      	ldrb	r2, [r6, r2]
9001b8fa:	7840      	ldrb	r0, [r0, #1]
9001b8fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001b904:	4422      	add	r2, r4
9001b906:	4420      	add	r0, r4
9001b908:	b29b      	uxth	r3, r3
9001b90a:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001b90e:	b289      	uxth	r1, r1
9001b910:	f895 b002 	ldrb.w	fp, [r5, #2]
9001b914:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001b916:	fb03 f901 	mul.w	r9, r3, r1
9001b91a:	011b      	lsls	r3, r3, #4
9001b91c:	f8b6 e000 	ldrh.w	lr, [r6]
9001b920:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001b924:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001b928:	eba3 0309 	sub.w	r3, r3, r9
9001b92c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001b930:	b289      	uxth	r1, r1
9001b932:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001b936:	b29b      	uxth	r3, r3
9001b938:	eba8 0801 	sub.w	r8, r8, r1
9001b93c:	435f      	muls	r7, r3
9001b93e:	fa1f f888 	uxth.w	r8, r8
9001b942:	9310      	str	r3, [sp, #64]	; 0x40
9001b944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b946:	fb08 770b 	mla	r7, r8, fp, r7
9001b94a:	f892 b002 	ldrb.w	fp, [r2, #2]
9001b94e:	fb01 770b 	mla	r7, r1, fp, r7
9001b952:	f890 b002 	ldrb.w	fp, [r0, #2]
9001b956:	fb09 770b 	mla	r7, r9, fp, r7
9001b95a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001b95e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001b962:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001b966:	fb1b fb03 	smulbb	fp, fp, r3
9001b96a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b96c:	fb07 b706 	mla	r7, r7, r6, fp
9001b970:	f895 b001 	ldrb.w	fp, [r5, #1]
9001b974:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001b978:	f89c c000 	ldrb.w	ip, [ip]
9001b97c:	b2bf      	uxth	r7, r7
9001b97e:	435d      	muls	r5, r3
9001b980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b982:	fb08 550b 	mla	r5, r8, fp, r5
9001b986:	f892 b001 	ldrb.w	fp, [r2, #1]
9001b98a:	fb01 550b 	mla	r5, r1, fp, r5
9001b98e:	f890 b001 	ldrb.w	fp, [r0, #1]
9001b992:	fb09 550b 	mla	r5, r9, fp, r5
9001b996:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001b99a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b99e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001b9a2:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001b9a6:	fa5f fe8e 	uxtb.w	lr, lr
9001b9aa:	fb1b fb03 	smulbb	fp, fp, r3
9001b9ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b9b0:	fb03 f30c 	mul.w	r3, r3, ip
9001b9b4:	f892 c000 	ldrb.w	ip, [r2]
9001b9b8:	fb05 b506 	mla	r5, r5, r6, fp
9001b9bc:	fb08 330a 	mla	r3, r8, sl, r3
9001b9c0:	b2ad      	uxth	r5, r5
9001b9c2:	fb01 330c 	mla	r3, r1, ip, r3
9001b9c6:	f890 c000 	ldrb.w	ip, [r0]
9001b9ca:	f105 0b01 	add.w	fp, r5, #1
9001b9ce:	fb09 3c0c 	mla	ip, r9, ip, r3
9001b9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b9d4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001b9d8:	fb1e fe03 	smulbb	lr, lr, r3
9001b9dc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001b9e0:	1c7b      	adds	r3, r7, #1
9001b9e2:	096d      	lsrs	r5, r5, #5
9001b9e4:	fb0c e606 	mla	r6, ip, r6, lr
9001b9e8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001b9ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b9f0:	b2b6      	uxth	r6, r6
9001b9f2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001b9f6:	1c77      	adds	r7, r6, #1
9001b9f8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001b9fc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ba00:	431f      	orrs	r7, r3
9001ba02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ba04:	433d      	orrs	r5, r7
9001ba06:	801d      	strh	r5, [r3, #0]
9001ba08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ba0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001ba0c:	3302      	adds	r3, #2
9001ba0e:	930c      	str	r3, [sp, #48]	; 0x30
9001ba10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001ba12:	4413      	add	r3, r2
9001ba14:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001ba16:	931f      	str	r3, [sp, #124]	; 0x7c
9001ba18:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ba1a:	4413      	add	r3, r2
9001ba1c:	9320      	str	r3, [sp, #128]	; 0x80
9001ba1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ba20:	3b01      	subs	r3, #1
9001ba22:	9311      	str	r3, [sp, #68]	; 0x44
9001ba24:	e732      	b.n	9001b88c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001ba26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001ba28:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001ba2a:	4433      	add	r3, r6
9001ba2c:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001ba2e:	931f      	str	r3, [sp, #124]	; 0x7c
9001ba30:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ba32:	4433      	add	r3, r6
9001ba34:	9320      	str	r3, [sp, #128]	; 0x80
9001ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ba38:	3b01      	subs	r3, #1
9001ba3a:	9309      	str	r3, [sp, #36]	; 0x24
9001ba3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ba3e:	3302      	adds	r3, #2
9001ba40:	930a      	str	r3, [sp, #40]	; 0x28
9001ba42:	e702      	b.n	9001b84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001ba44:	d027      	beq.n	9001ba96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ba48:	9821      	ldr	r0, [sp, #132]	; 0x84
9001ba4a:	3b01      	subs	r3, #1
9001ba4c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001ba4e:	fb00 5003 	mla	r0, r0, r3, r5
9001ba52:	1400      	asrs	r0, r0, #16
9001ba54:	f53f af16 	bmi.w	9001b884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ba58:	3901      	subs	r1, #1
9001ba5a:	4288      	cmp	r0, r1
9001ba5c:	f6bf af12 	bge.w	9001b884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ba60:	9922      	ldr	r1, [sp, #136]	; 0x88
9001ba62:	9820      	ldr	r0, [sp, #128]	; 0x80
9001ba64:	fb01 0303 	mla	r3, r1, r3, r0
9001ba68:	141b      	asrs	r3, r3, #16
9001ba6a:	f53f af0b 	bmi.w	9001b884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ba6e:	3a01      	subs	r2, #1
9001ba70:	4293      	cmp	r3, r2
9001ba72:	f6bf af07 	bge.w	9001b884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ba78:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001ba7c:	9311      	str	r3, [sp, #68]	; 0x44
9001ba7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ba80:	930c      	str	r3, [sp, #48]	; 0x30
9001ba82:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ba84:	2b00      	cmp	r3, #0
9001ba86:	dc70      	bgt.n	9001bb6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ba8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001ba8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ba90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ba94:	930a      	str	r3, [sp, #40]	; 0x28
9001ba96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ba98:	2b00      	cmp	r3, #0
9001ba9a:	f340 8124 	ble.w	9001bce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001ba9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001baa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001baa4:	ee30 0a04 	vadd.f32	s0, s0, s8
9001baa8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001baac:	eef0 6a62 	vmov.f32	s13, s5
9001bab0:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001bab4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bab8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001babc:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001bac0:	eef0 6a43 	vmov.f32	s13, s6
9001bac4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001bac8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001bacc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bad0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bad4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bad8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001badc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bae0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bae4:	ee12 2a90 	vmov	r2, s5
9001bae8:	eef0 2a47 	vmov.f32	s5, s14
9001baec:	fb92 f3f3 	sdiv	r3, r2, r3
9001baf0:	ee13 2a10 	vmov	r2, s6
9001baf4:	9321      	str	r3, [sp, #132]	; 0x84
9001baf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001baf8:	eeb0 3a67 	vmov.f32	s6, s15
9001bafc:	fb92 f3f3 	sdiv	r3, r2, r3
9001bb00:	9322      	str	r3, [sp, #136]	; 0x88
9001bb02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bb04:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bb06:	3b01      	subs	r3, #1
9001bb08:	930e      	str	r3, [sp, #56]	; 0x38
9001bb0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001bb0c:	bf08      	it	eq
9001bb0e:	4613      	moveq	r3, r2
9001bb10:	9309      	str	r3, [sp, #36]	; 0x24
9001bb12:	e68c      	b.n	9001b82e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bb14:	b149      	cbz	r1, 9001bb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001bb16:	5cb2      	ldrb	r2, [r6, r2]
9001bb18:	4628      	mov	r0, r5
9001bb1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bb1e:	4422      	add	r2, r4
9001bb20:	46ac      	mov	ip, r5
9001bb22:	e6f1      	b.n	9001b908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001bb24:	4628      	mov	r0, r5
9001bb26:	462a      	mov	r2, r5
9001bb28:	e6ee      	b.n	9001b908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001bb2a:	4628      	mov	r0, r5
9001bb2c:	462a      	mov	r2, r5
9001bb2e:	e7f7      	b.n	9001bb20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001bb30:	1c47      	adds	r7, r0, #1
9001bb32:	f53f af69 	bmi.w	9001ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001bb36:	42ba      	cmp	r2, r7
9001bb38:	f6ff af66 	blt.w	9001ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001bb3c:	1c6f      	adds	r7, r5, #1
9001bb3e:	f53f af63 	bmi.w	9001ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001bb42:	42be      	cmp	r6, r7
9001bb44:	f6ff af60 	blt.w	9001ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001bb48:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001bb4a:	b236      	sxth	r6, r6
9001bb4c:	b212      	sxth	r2, r2
9001bb4e:	9002      	str	r0, [sp, #8]
9001bb50:	9601      	str	r6, [sp, #4]
9001bb52:	9200      	str	r2, [sp, #0]
9001bb54:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bb56:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001bb5a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001bb5e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001bb62:	4623      	mov	r3, r4
9001bb64:	f7ff fd59 	bl	9001b61a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001bb68:	e74e      	b.n	9001ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001bb6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001bb6c:	9820      	ldr	r0, [sp, #128]	; 0x80
9001bb6e:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001bb72:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001bb74:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001bb76:	1400      	asrs	r0, r0, #16
9001bb78:	142d      	asrs	r5, r5, #16
9001bb7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001bb7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001bb80:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001bb84:	fb02 5000 	mla	r0, r2, r0, r5
9001bb88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001bb8a:	f815 9000 	ldrb.w	r9, [r5, r0]
9001bb8e:	182e      	adds	r6, r5, r0
9001bb90:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001bb94:	eb04 0509 	add.w	r5, r4, r9
9001bb98:	2b00      	cmp	r3, #0
9001bb9a:	f000 8096 	beq.w	9001bcca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001bb9e:	7877      	ldrb	r7, [r6, #1]
9001bba0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001bba4:	4427      	add	r7, r4
9001bba6:	2900      	cmp	r1, #0
9001bba8:	f000 8097 	beq.w	9001bcda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001bbac:	18b0      	adds	r0, r6, r2
9001bbae:	5cb2      	ldrb	r2, [r6, r2]
9001bbb0:	7840      	ldrb	r0, [r0, #1]
9001bbb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bbb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001bbba:	4422      	add	r2, r4
9001bbbc:	4420      	add	r0, r4
9001bbbe:	b29b      	uxth	r3, r3
9001bbc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001bbc2:	b289      	uxth	r1, r1
9001bbc4:	f895 b002 	ldrb.w	fp, [r5, #2]
9001bbc8:	f8b6 c000 	ldrh.w	ip, [r6]
9001bbcc:	fb03 f801 	mul.w	r8, r3, r1
9001bbd0:	011b      	lsls	r3, r3, #4
9001bbd2:	78be      	ldrb	r6, [r7, #2]
9001bbd4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001bbd8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001bbdc:	eba3 0308 	sub.w	r3, r3, r8
9001bbe0:	f814 9009 	ldrb.w	r9, [r4, r9]
9001bbe4:	b289      	uxth	r1, r1
9001bbe6:	b29b      	uxth	r3, r3
9001bbe8:	ebae 0e01 	sub.w	lr, lr, r1
9001bbec:	435e      	muls	r6, r3
9001bbee:	fa1f fe8e 	uxth.w	lr, lr
9001bbf2:	9310      	str	r3, [sp, #64]	; 0x40
9001bbf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001bbf6:	fb0e 660b 	mla	r6, lr, fp, r6
9001bbfa:	f892 b002 	ldrb.w	fp, [r2, #2]
9001bbfe:	fb01 660b 	mla	r6, r1, fp, r6
9001bc02:	f890 b002 	ldrb.w	fp, [r0, #2]
9001bc06:	fb08 660b 	mla	r6, r8, fp, r6
9001bc0a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001bc0e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001bc12:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001bc16:	fb1b fb03 	smulbb	fp, fp, r3
9001bc1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bc1c:	fb06 b60a 	mla	r6, r6, sl, fp
9001bc20:	f895 b001 	ldrb.w	fp, [r5, #1]
9001bc24:	787d      	ldrb	r5, [r7, #1]
9001bc26:	783f      	ldrb	r7, [r7, #0]
9001bc28:	b2b6      	uxth	r6, r6
9001bc2a:	435d      	muls	r5, r3
9001bc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001bc2e:	fb0e 550b 	mla	r5, lr, fp, r5
9001bc32:	f892 b001 	ldrb.w	fp, [r2, #1]
9001bc36:	fb01 550b 	mla	r5, r1, fp, r5
9001bc3a:	f890 b001 	ldrb.w	fp, [r0, #1]
9001bc3e:	fb08 550b 	mla	r5, r8, fp, r5
9001bc42:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001bc46:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001bc4a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001bc4e:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001bc52:	fa5f fc8c 	uxtb.w	ip, ip
9001bc56:	fb1b fb03 	smulbb	fp, fp, r3
9001bc5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bc5c:	437b      	muls	r3, r7
9001bc5e:	7817      	ldrb	r7, [r2, #0]
9001bc60:	fb05 b50a 	mla	r5, r5, sl, fp
9001bc64:	fb0e 3309 	mla	r3, lr, r9, r3
9001bc68:	b2ad      	uxth	r5, r5
9001bc6a:	fb01 3307 	mla	r3, r1, r7, r3
9001bc6e:	7807      	ldrb	r7, [r0, #0]
9001bc70:	f105 0b01 	add.w	fp, r5, #1
9001bc74:	fb08 3707 	mla	r7, r8, r7, r3
9001bc78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001bc7a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001bc7e:	fb1c fc03 	smulbb	ip, ip, r3
9001bc82:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001bc86:	1c73      	adds	r3, r6, #1
9001bc88:	096d      	lsrs	r5, r5, #5
9001bc8a:	fb07 c70a 	mla	r7, r7, sl, ip
9001bc8e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001bc92:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001bc96:	b2bf      	uxth	r7, r7
9001bc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001bc9a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001bc9e:	1c7a      	adds	r2, r7, #1
9001bca0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001bca4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001bca8:	4316      	orrs	r6, r2
9001bcaa:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001bcac:	432e      	orrs	r6, r5
9001bcae:	f823 6b02 	strh.w	r6, [r3], #2
9001bcb2:	930c      	str	r3, [sp, #48]	; 0x30
9001bcb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001bcb6:	4413      	add	r3, r2
9001bcb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001bcba:	931f      	str	r3, [sp, #124]	; 0x7c
9001bcbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001bcbe:	4413      	add	r3, r2
9001bcc0:	9320      	str	r3, [sp, #128]	; 0x80
9001bcc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001bcc4:	3b01      	subs	r3, #1
9001bcc6:	9311      	str	r3, [sp, #68]	; 0x44
9001bcc8:	e6db      	b.n	9001ba82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001bcca:	b149      	cbz	r1, 9001bce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001bccc:	5cb2      	ldrb	r2, [r6, r2]
9001bcce:	4628      	mov	r0, r5
9001bcd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bcd4:	4422      	add	r2, r4
9001bcd6:	462f      	mov	r7, r5
9001bcd8:	e771      	b.n	9001bbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001bcda:	4628      	mov	r0, r5
9001bcdc:	462a      	mov	r2, r5
9001bcde:	e76e      	b.n	9001bbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001bce0:	4628      	mov	r0, r5
9001bce2:	462a      	mov	r2, r5
9001bce4:	e7f7      	b.n	9001bcd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001bce6:	b015      	add	sp, #84	; 0x54
9001bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bcec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001bcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bcf0:	880f      	ldrh	r7, [r1, #0]
9001bcf2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001bcf6:	023c      	lsls	r4, r7, #8
9001bcf8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001bcfc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001bd00:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001bd04:	017c      	lsls	r4, r7, #5
9001bd06:	00ff      	lsls	r7, r7, #3
9001bd08:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001bd0c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001bd10:	b2ff      	uxtb	r7, r7
9001bd12:	ea4b 0404 	orr.w	r4, fp, r4
9001bd16:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001bd1a:	4327      	orrs	r7, r4
9001bd1c:	fb05 ca0e 	mla	sl, r5, lr, ip
9001bd20:	2d00      	cmp	r5, #0
9001bd22:	9701      	str	r7, [sp, #4]
9001bd24:	eb02 080a 	add.w	r8, r2, sl
9001bd28:	db7e      	blt.n	9001be28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001bd2a:	45a9      	cmp	r9, r5
9001bd2c:	dd7c      	ble.n	9001be28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001bd2e:	f1bc 0f00 	cmp.w	ip, #0
9001bd32:	db77      	blt.n	9001be24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001bd34:	45e6      	cmp	lr, ip
9001bd36:	dd75      	ble.n	9001be24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001bd38:	f812 700a 	ldrb.w	r7, [r2, sl]
9001bd3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001bd40:	441f      	add	r7, r3
9001bd42:	f11c 0201 	adds.w	r2, ip, #1
9001bd46:	d472      	bmi.n	9001be2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001bd48:	4596      	cmp	lr, r2
9001bd4a:	dd70      	ble.n	9001be2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001bd4c:	2800      	cmp	r0, #0
9001bd4e:	d06e      	beq.n	9001be2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001bd50:	f898 4001 	ldrb.w	r4, [r8, #1]
9001bd54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001bd58:	441c      	add	r4, r3
9001bd5a:	3501      	adds	r5, #1
9001bd5c:	d46b      	bmi.n	9001be36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001bd5e:	45a9      	cmp	r9, r5
9001bd60:	dd69      	ble.n	9001be36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001bd62:	2e00      	cmp	r6, #0
9001bd64:	d067      	beq.n	9001be36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001bd66:	f1bc 0f00 	cmp.w	ip, #0
9001bd6a:	db62      	blt.n	9001be32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001bd6c:	45e6      	cmp	lr, ip
9001bd6e:	dd60      	ble.n	9001be32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001bd70:	f818 500e 	ldrb.w	r5, [r8, lr]
9001bd74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001bd78:	441d      	add	r5, r3
9001bd7a:	f11c 0201 	adds.w	r2, ip, #1
9001bd7e:	d45d      	bmi.n	9001be3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001bd80:	4596      	cmp	lr, r2
9001bd82:	dd5b      	ble.n	9001be3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001bd84:	2800      	cmp	r0, #0
9001bd86:	d059      	beq.n	9001be3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001bd88:	44c6      	add	lr, r8
9001bd8a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001bd8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bd92:	4413      	add	r3, r2
9001bd94:	b280      	uxth	r0, r0
9001bd96:	f897 e002 	ldrb.w	lr, [r7, #2]
9001bd9a:	b2b2      	uxth	r2, r6
9001bd9c:	f897 9000 	ldrb.w	r9, [r7]
9001bda0:	787f      	ldrb	r7, [r7, #1]
9001bda2:	fb00 f602 	mul.w	r6, r0, r2
9001bda6:	0100      	lsls	r0, r0, #4
9001bda8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001bdac:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001bdb0:	1b80      	subs	r0, r0, r6
9001bdb2:	fa1f fc82 	uxth.w	ip, r2
9001bdb6:	b282      	uxth	r2, r0
9001bdb8:	78a0      	ldrb	r0, [r4, #2]
9001bdba:	eba8 080c 	sub.w	r8, r8, ip
9001bdbe:	4350      	muls	r0, r2
9001bdc0:	fa1f f888 	uxth.w	r8, r8
9001bdc4:	fb08 0e0e 	mla	lr, r8, lr, r0
9001bdc8:	78a8      	ldrb	r0, [r5, #2]
9001bdca:	fb0c e000 	mla	r0, ip, r0, lr
9001bdce:	f893 e002 	ldrb.w	lr, [r3, #2]
9001bdd2:	fb06 0e0e 	mla	lr, r6, lr, r0
9001bdd6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001bdda:	f894 e000 	ldrb.w	lr, [r4]
9001bdde:	fb02 fe0e 	mul.w	lr, r2, lr
9001bde2:	fb08 e909 	mla	r9, r8, r9, lr
9001bde6:	f895 e000 	ldrb.w	lr, [r5]
9001bdea:	fb0c 990e 	mla	r9, ip, lr, r9
9001bdee:	f893 e000 	ldrb.w	lr, [r3]
9001bdf2:	785b      	ldrb	r3, [r3, #1]
9001bdf4:	fb06 9e0e 	mla	lr, r6, lr, r9
9001bdf8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001bdfc:	ea4e 0e00 	orr.w	lr, lr, r0
9001be00:	7860      	ldrb	r0, [r4, #1]
9001be02:	4350      	muls	r0, r2
9001be04:	786a      	ldrb	r2, [r5, #1]
9001be06:	fb08 0007 	mla	r0, r8, r7, r0
9001be0a:	fb0c 0202 	mla	r2, ip, r2, r0
9001be0e:	fb06 2303 	mla	r3, r6, r3, r2
9001be12:	095b      	lsrs	r3, r3, #5
9001be14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001be18:	ea4e 0303 	orr.w	r3, lr, r3
9001be1c:	800b      	strh	r3, [r1, #0]
9001be1e:	b003      	add	sp, #12
9001be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001be24:	af01      	add	r7, sp, #4
9001be26:	e78c      	b.n	9001bd42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001be28:	ac01      	add	r4, sp, #4
9001be2a:	4627      	mov	r7, r4
9001be2c:	e795      	b.n	9001bd5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001be2e:	ac01      	add	r4, sp, #4
9001be30:	e793      	b.n	9001bd5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001be32:	ad01      	add	r5, sp, #4
9001be34:	e7a1      	b.n	9001bd7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001be36:	ab01      	add	r3, sp, #4
9001be38:	461d      	mov	r5, r3
9001be3a:	e7ab      	b.n	9001bd94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001be3c:	ab01      	add	r3, sp, #4
9001be3e:	e7a9      	b.n	9001bd94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001be40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001be44:	b08f      	sub	sp, #60	; 0x3c
9001be46:	920c      	str	r2, [sp, #48]	; 0x30
9001be48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001be4a:	900d      	str	r0, [sp, #52]	; 0x34
9001be4c:	910a      	str	r1, [sp, #40]	; 0x28
9001be4e:	6850      	ldr	r0, [r2, #4]
9001be50:	9306      	str	r3, [sp, #24]
9001be52:	6812      	ldr	r2, [r2, #0]
9001be54:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001be58:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001be5c:	fb00 1303 	mla	r3, r0, r3, r1
9001be60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001be64:	9307      	str	r3, [sp, #28]
9001be66:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001be68:	681b      	ldr	r3, [r3, #0]
9001be6a:	9308      	str	r3, [sp, #32]
9001be6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001be6e:	685c      	ldr	r4, [r3, #4]
9001be70:	3404      	adds	r4, #4
9001be72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001be74:	2b00      	cmp	r3, #0
9001be76:	dc03      	bgt.n	9001be80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001be78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001be7a:	2b00      	cmp	r3, #0
9001be7c:	f340 81d5 	ble.w	9001c22a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001be80:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001be82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001be86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001be8a:	1e48      	subs	r0, r1, #1
9001be8c:	1e56      	subs	r6, r2, #1
9001be8e:	9b06      	ldr	r3, [sp, #24]
9001be90:	2b00      	cmp	r3, #0
9001be92:	f340 80b6 	ble.w	9001c002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001be96:	ea5f 472b 	movs.w	r7, fp, asr #16
9001be9a:	ea4f 4325 	mov.w	r3, r5, asr #16
9001be9e:	d406      	bmi.n	9001beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bea0:	4287      	cmp	r7, r0
9001bea2:	da04      	bge.n	9001beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bea4:	2b00      	cmp	r3, #0
9001bea6:	db02      	blt.n	9001beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bea8:	42b3      	cmp	r3, r6
9001beaa:	f2c0 80ab 	blt.w	9001c004 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001beae:	3701      	adds	r7, #1
9001beb0:	f100 809c 	bmi.w	9001bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001beb4:	42b9      	cmp	r1, r7
9001beb6:	f2c0 8099 	blt.w	9001bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001beba:	3301      	adds	r3, #1
9001bebc:	f100 8096 	bmi.w	9001bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001bec0:	429a      	cmp	r2, r3
9001bec2:	f2c0 8093 	blt.w	9001bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001bec6:	9b06      	ldr	r3, [sp, #24]
9001bec8:	930b      	str	r3, [sp, #44]	; 0x2c
9001beca:	9b07      	ldr	r3, [sp, #28]
9001becc:	9309      	str	r3, [sp, #36]	; 0x24
9001bece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001bed0:	2b00      	cmp	r3, #0
9001bed2:	f340 80b4 	ble.w	9001c03e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001bed6:	9820      	ldr	r0, [sp, #128]	; 0x80
9001bed8:	142e      	asrs	r6, r5, #16
9001beda:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001bedc:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001bee0:	68c7      	ldr	r7, [r0, #12]
9001bee2:	ea5f 402b 	movs.w	r0, fp, asr #16
9001bee6:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001beea:	6892      	ldr	r2, [r2, #8]
9001beec:	f100 80fb 	bmi.w	9001c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001bef0:	f102 3cff 	add.w	ip, r2, #4294967295
9001bef4:	4560      	cmp	r0, ip
9001bef6:	f280 80f6 	bge.w	9001c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001befa:	2e00      	cmp	r6, #0
9001befc:	f2c0 80f3 	blt.w	9001c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001bf00:	f107 3cff 	add.w	ip, r7, #4294967295
9001bf04:	4566      	cmp	r6, ip
9001bf06:	f280 80ee 	bge.w	9001c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001bf0a:	b212      	sxth	r2, r2
9001bf0c:	fb06 0002 	mla	r0, r6, r2, r0
9001bf10:	9e08      	ldr	r6, [sp, #32]
9001bf12:	1837      	adds	r7, r6, r0
9001bf14:	5c30      	ldrb	r0, [r6, r0]
9001bf16:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001bf1a:	eb04 0c08 	add.w	ip, r4, r8
9001bf1e:	2b00      	cmp	r3, #0
9001bf20:	f000 80d3 	beq.w	9001c0ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001bf24:	787e      	ldrb	r6, [r7, #1]
9001bf26:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001bf2a:	4426      	add	r6, r4
9001bf2c:	2900      	cmp	r1, #0
9001bf2e:	f000 80d4 	beq.w	9001c0da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001bf32:	18b8      	adds	r0, r7, r2
9001bf34:	5cba      	ldrb	r2, [r7, r2]
9001bf36:	7840      	ldrb	r0, [r0, #1]
9001bf38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bf3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001bf40:	4422      	add	r2, r4
9001bf42:	4420      	add	r0, r4
9001bf44:	b29b      	uxth	r3, r3
9001bf46:	78b7      	ldrb	r7, [r6, #2]
9001bf48:	b289      	uxth	r1, r1
9001bf4a:	f89c a002 	ldrb.w	sl, [ip, #2]
9001bf4e:	f89c c001 	ldrb.w	ip, [ip, #1]
9001bf52:	fb03 f901 	mul.w	r9, r3, r1
9001bf56:	011b      	lsls	r3, r3, #4
9001bf58:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001bf5c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001bf60:	eba3 0309 	sub.w	r3, r3, r9
9001bf64:	b289      	uxth	r1, r1
9001bf66:	b29b      	uxth	r3, r3
9001bf68:	ebae 0e01 	sub.w	lr, lr, r1
9001bf6c:	435f      	muls	r7, r3
9001bf6e:	fa1f fe8e 	uxth.w	lr, lr
9001bf72:	fb0e 770a 	mla	r7, lr, sl, r7
9001bf76:	f892 a002 	ldrb.w	sl, [r2, #2]
9001bf7a:	fb01 770a 	mla	r7, r1, sl, r7
9001bf7e:	f890 a002 	ldrb.w	sl, [r0, #2]
9001bf82:	fb09 7a0a 	mla	sl, r9, sl, r7
9001bf86:	f814 7008 	ldrb.w	r7, [r4, r8]
9001bf8a:	f896 8000 	ldrb.w	r8, [r6]
9001bf8e:	7876      	ldrb	r6, [r6, #1]
9001bf90:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001bf94:	fb03 f808 	mul.w	r8, r3, r8
9001bf98:	4373      	muls	r3, r6
9001bf9a:	fb0e 8807 	mla	r8, lr, r7, r8
9001bf9e:	7817      	ldrb	r7, [r2, #0]
9001bfa0:	fb0e 330c 	mla	r3, lr, ip, r3
9001bfa4:	fb01 8807 	mla	r8, r1, r7, r8
9001bfa8:	7807      	ldrb	r7, [r0, #0]
9001bfaa:	fb09 8707 	mla	r7, r9, r7, r8
9001bfae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001bfb2:	ea47 070a 	orr.w	r7, r7, sl
9001bfb6:	f892 a001 	ldrb.w	sl, [r2, #1]
9001bfba:	fb01 310a 	mla	r1, r1, sl, r3
9001bfbe:	f890 a001 	ldrb.w	sl, [r0, #1]
9001bfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bfc4:	fb09 1a0a 	mla	sl, r9, sl, r1
9001bfc8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001bfcc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001bfd0:	ea47 070a 	orr.w	r7, r7, sl
9001bfd4:	801f      	strh	r7, [r3, #0]
9001bfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bfd8:	3302      	adds	r3, #2
9001bfda:	9309      	str	r3, [sp, #36]	; 0x24
9001bfdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001bfde:	449b      	add	fp, r3
9001bfe0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001bfe2:	441d      	add	r5, r3
9001bfe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001bfe6:	3b01      	subs	r3, #1
9001bfe8:	930b      	str	r3, [sp, #44]	; 0x2c
9001bfea:	e770      	b.n	9001bece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001bfec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001bfee:	449b      	add	fp, r3
9001bff0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001bff2:	441d      	add	r5, r3
9001bff4:	9b06      	ldr	r3, [sp, #24]
9001bff6:	3b01      	subs	r3, #1
9001bff8:	9306      	str	r3, [sp, #24]
9001bffa:	9b07      	ldr	r3, [sp, #28]
9001bffc:	3302      	adds	r3, #2
9001bffe:	9307      	str	r3, [sp, #28]
9001c000:	e745      	b.n	9001be8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001c002:	d023      	beq.n	9001c04c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001c004:	9b06      	ldr	r3, [sp, #24]
9001c006:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001c008:	3b01      	subs	r3, #1
9001c00a:	fb00 b003 	mla	r0, r0, r3, fp
9001c00e:	1400      	asrs	r0, r0, #16
9001c010:	f53f af59 	bmi.w	9001bec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001c014:	3901      	subs	r1, #1
9001c016:	4288      	cmp	r0, r1
9001c018:	f6bf af55 	bge.w	9001bec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001c01c:	991c      	ldr	r1, [sp, #112]	; 0x70
9001c01e:	fb01 5303 	mla	r3, r1, r3, r5
9001c022:	141b      	asrs	r3, r3, #16
9001c024:	f53f af4f 	bmi.w	9001bec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001c028:	3a01      	subs	r2, #1
9001c02a:	4293      	cmp	r3, r2
9001c02c:	f6bf af4b 	bge.w	9001bec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001c030:	9b06      	ldr	r3, [sp, #24]
9001c032:	9309      	str	r3, [sp, #36]	; 0x24
9001c034:	9b07      	ldr	r3, [sp, #28]
9001c036:	930b      	str	r3, [sp, #44]	; 0x2c
9001c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c03a:	2b00      	cmp	r3, #0
9001c03c:	dc70      	bgt.n	9001c120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001c03e:	9b06      	ldr	r3, [sp, #24]
9001c040:	9a07      	ldr	r2, [sp, #28]
9001c042:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c046:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001c04a:	9307      	str	r3, [sp, #28]
9001c04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001c04e:	2b00      	cmp	r3, #0
9001c050:	f340 80eb 	ble.w	9001c22a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001c054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c058:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001c05a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c05e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c062:	eef0 6a62 	vmov.f32	s13, s5
9001c066:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c06a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c06e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c072:	ee16 ba90 	vmov	fp, s13
9001c076:	eef0 6a43 	vmov.f32	s13, s6
9001c07a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c07e:	ee16 5a90 	vmov	r5, s13
9001c082:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c086:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c08a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c08e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c092:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c096:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c09a:	ee12 2a90 	vmov	r2, s5
9001c09e:	eef0 2a47 	vmov.f32	s5, s14
9001c0a2:	fb92 f3f3 	sdiv	r3, r2, r3
9001c0a6:	ee13 2a10 	vmov	r2, s6
9001c0aa:	931b      	str	r3, [sp, #108]	; 0x6c
9001c0ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001c0ae:	eeb0 3a67 	vmov.f32	s6, s15
9001c0b2:	fb92 f3f3 	sdiv	r3, r2, r3
9001c0b6:	931c      	str	r3, [sp, #112]	; 0x70
9001c0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001c0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001c0bc:	3b01      	subs	r3, #1
9001c0be:	930a      	str	r3, [sp, #40]	; 0x28
9001c0c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001c0c2:	bf08      	it	eq
9001c0c4:	4613      	moveq	r3, r2
9001c0c6:	9306      	str	r3, [sp, #24]
9001c0c8:	e6d3      	b.n	9001be72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c0ca:	b149      	cbz	r1, 9001c0e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001c0cc:	5cba      	ldrb	r2, [r7, r2]
9001c0ce:	4660      	mov	r0, ip
9001c0d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001c0d4:	4422      	add	r2, r4
9001c0d6:	4666      	mov	r6, ip
9001c0d8:	e734      	b.n	9001bf44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001c0da:	4660      	mov	r0, ip
9001c0dc:	4662      	mov	r2, ip
9001c0de:	e731      	b.n	9001bf44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001c0e0:	4660      	mov	r0, ip
9001c0e2:	4662      	mov	r2, ip
9001c0e4:	e7f7      	b.n	9001c0d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001c0e6:	f110 0c01 	adds.w	ip, r0, #1
9001c0ea:	f53f af74 	bmi.w	9001bfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c0ee:	4562      	cmp	r2, ip
9001c0f0:	f6ff af71 	blt.w	9001bfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c0f4:	f116 0c01 	adds.w	ip, r6, #1
9001c0f8:	f53f af6d 	bmi.w	9001bfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c0fc:	4567      	cmp	r7, ip
9001c0fe:	f6ff af6a 	blt.w	9001bfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c102:	b23f      	sxth	r7, r7
9001c104:	b212      	sxth	r2, r2
9001c106:	9701      	str	r7, [sp, #4]
9001c108:	9200      	str	r2, [sp, #0]
9001c10a:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001c10e:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001c112:	4623      	mov	r3, r4
9001c114:	980d      	ldr	r0, [sp, #52]	; 0x34
9001c116:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001c11a:	f7ff fde7 	bl	9001bcec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001c11e:	e75a      	b.n	9001bfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c120:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001c122:	ea4f 462b 	mov.w	r6, fp, asr #16
9001c126:	1428      	asrs	r0, r5, #16
9001c128:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001c12c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001c130:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c134:	fb02 6000 	mla	r0, r2, r0, r6
9001c138:	9e08      	ldr	r6, [sp, #32]
9001c13a:	f816 8000 	ldrb.w	r8, [r6, r0]
9001c13e:	1837      	adds	r7, r6, r0
9001c140:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001c144:	eb04 0c08 	add.w	ip, r4, r8
9001c148:	2b00      	cmp	r3, #0
9001c14a:	d060      	beq.n	9001c20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001c14c:	787e      	ldrb	r6, [r7, #1]
9001c14e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001c152:	4426      	add	r6, r4
9001c154:	2900      	cmp	r1, #0
9001c156:	d062      	beq.n	9001c21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001c158:	18b8      	adds	r0, r7, r2
9001c15a:	5cba      	ldrb	r2, [r7, r2]
9001c15c:	7840      	ldrb	r0, [r0, #1]
9001c15e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001c162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001c166:	4422      	add	r2, r4
9001c168:	4420      	add	r0, r4
9001c16a:	b29b      	uxth	r3, r3
9001c16c:	78b7      	ldrb	r7, [r6, #2]
9001c16e:	b289      	uxth	r1, r1
9001c170:	f89c a002 	ldrb.w	sl, [ip, #2]
9001c174:	f89c c001 	ldrb.w	ip, [ip, #1]
9001c178:	fb03 f901 	mul.w	r9, r3, r1
9001c17c:	011b      	lsls	r3, r3, #4
9001c17e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001c182:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001c186:	eba3 0309 	sub.w	r3, r3, r9
9001c18a:	b289      	uxth	r1, r1
9001c18c:	b29b      	uxth	r3, r3
9001c18e:	ebae 0e01 	sub.w	lr, lr, r1
9001c192:	435f      	muls	r7, r3
9001c194:	fa1f fe8e 	uxth.w	lr, lr
9001c198:	fb0e 770a 	mla	r7, lr, sl, r7
9001c19c:	f892 a002 	ldrb.w	sl, [r2, #2]
9001c1a0:	fb01 770a 	mla	r7, r1, sl, r7
9001c1a4:	f890 a002 	ldrb.w	sl, [r0, #2]
9001c1a8:	fb09 7a0a 	mla	sl, r9, sl, r7
9001c1ac:	f814 7008 	ldrb.w	r7, [r4, r8]
9001c1b0:	f896 8000 	ldrb.w	r8, [r6]
9001c1b4:	7876      	ldrb	r6, [r6, #1]
9001c1b6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001c1ba:	fb03 f808 	mul.w	r8, r3, r8
9001c1be:	4373      	muls	r3, r6
9001c1c0:	7856      	ldrb	r6, [r2, #1]
9001c1c2:	fb0e 8807 	mla	r8, lr, r7, r8
9001c1c6:	7817      	ldrb	r7, [r2, #0]
9001c1c8:	fb0e 330c 	mla	r3, lr, ip, r3
9001c1cc:	fb01 8807 	mla	r8, r1, r7, r8
9001c1d0:	7807      	ldrb	r7, [r0, #0]
9001c1d2:	fb01 3306 	mla	r3, r1, r6, r3
9001c1d6:	fb09 8707 	mla	r7, r9, r7, r8
9001c1da:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001c1de:	ea47 070a 	orr.w	r7, r7, sl
9001c1e2:	f890 a001 	ldrb.w	sl, [r0, #1]
9001c1e6:	fb09 3a0a 	mla	sl, r9, sl, r3
9001c1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c1ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c1f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c1f4:	ea47 070a 	orr.w	r7, r7, sl
9001c1f8:	f823 7b02 	strh.w	r7, [r3], #2
9001c1fc:	930b      	str	r3, [sp, #44]	; 0x2c
9001c1fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001c200:	449b      	add	fp, r3
9001c202:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c204:	441d      	add	r5, r3
9001c206:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c208:	3b01      	subs	r3, #1
9001c20a:	9309      	str	r3, [sp, #36]	; 0x24
9001c20c:	e714      	b.n	9001c038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001c20e:	b149      	cbz	r1, 9001c224 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001c210:	5cba      	ldrb	r2, [r7, r2]
9001c212:	4660      	mov	r0, ip
9001c214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001c218:	4422      	add	r2, r4
9001c21a:	4666      	mov	r6, ip
9001c21c:	e7a5      	b.n	9001c16a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001c21e:	4660      	mov	r0, ip
9001c220:	4662      	mov	r2, ip
9001c222:	e7a2      	b.n	9001c16a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001c224:	4660      	mov	r0, ip
9001c226:	4662      	mov	r2, ip
9001c228:	e7f7      	b.n	9001c21a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001c22a:	b00f      	add	sp, #60	; 0x3c
9001c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c230 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c234:	b085      	sub	sp, #20
9001c236:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001c23a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001c23e:	9102      	str	r1, [sp, #8]
9001c240:	2c00      	cmp	r4, #0
9001c242:	fb04 710c 	mla	r1, r4, ip, r7
9001c246:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001c24a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001c24e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001c252:	eb02 0e01 	add.w	lr, r2, r1
9001c256:	f2c0 8122 	blt.w	9001c49e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001c25a:	45a0      	cmp	r8, r4
9001c25c:	f340 811f 	ble.w	9001c49e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001c260:	2f00      	cmp	r7, #0
9001c262:	f2c0 811a 	blt.w	9001c49a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001c266:	45bc      	cmp	ip, r7
9001c268:	f340 8117 	ble.w	9001c49a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001c26c:	5c52      	ldrb	r2, [r2, r1]
9001c26e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001c272:	1c7a      	adds	r2, r7, #1
9001c274:	f100 8116 	bmi.w	9001c4a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001c278:	4594      	cmp	ip, r2
9001c27a:	f340 8113 	ble.w	9001c4a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001c27e:	2e00      	cmp	r6, #0
9001c280:	f000 8112 	beq.w	9001c4a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001c284:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001c28c:	3401      	adds	r4, #1
9001c28e:	f100 810f 	bmi.w	9001c4b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001c292:	45a0      	cmp	r8, r4
9001c294:	f340 810c 	ble.w	9001c4b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001c298:	2800      	cmp	r0, #0
9001c29a:	f000 810c 	beq.w	9001c4b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001c29e:	2f00      	cmp	r7, #0
9001c2a0:	f2c0 8104 	blt.w	9001c4ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001c2a4:	45bc      	cmp	ip, r7
9001c2a6:	f340 8101 	ble.w	9001c4ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001c2aa:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001c2ae:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001c2b2:	3701      	adds	r7, #1
9001c2b4:	f100 8102 	bmi.w	9001c4bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001c2b8:	45bc      	cmp	ip, r7
9001c2ba:	f340 80ff 	ble.w	9001c4bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001c2be:	2e00      	cmp	r6, #0
9001c2c0:	f000 80fe 	beq.w	9001c4c0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001c2c4:	44f4      	add	ip, lr
9001c2c6:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001c2ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001c2ce:	b2b6      	uxth	r6, r6
9001c2d0:	b280      	uxth	r0, r0
9001c2d2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001c2d6:	fb00 fe06 	mul.w	lr, r0, r6
9001c2da:	0136      	lsls	r6, r6, #4
9001c2dc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001c2e0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001c2e4:	eba6 070e 	sub.w	r7, r6, lr
9001c2e8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001c2ec:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001c2f0:	b280      	uxth	r0, r0
9001c2f2:	b2bf      	uxth	r7, r7
9001c2f4:	1a1b      	subs	r3, r3, r0
9001c2f6:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001c2fa:	fb0a f607 	mul.w	r6, sl, r7
9001c2fe:	b29b      	uxth	r3, r3
9001c300:	fb0b 6603 	mla	r6, fp, r3, r6
9001c304:	fb00 6609 	mla	r6, r0, r9, r6
9001c308:	fb0e 6608 	mla	r6, lr, r8, r6
9001c30c:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001c310:	9600      	str	r6, [sp, #0]
9001c312:	2e00      	cmp	r6, #0
9001c314:	f000 80be 	beq.w	9001c494 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001c318:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001c31c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001c320:	9e02      	ldr	r6, [sp, #8]
9001c322:	fb0b fc0c 	mul.w	ip, fp, ip
9001c326:	fb0b f505 	mul.w	r5, fp, r5
9001c32a:	8836      	ldrh	r6, [r6, #0]
9001c32c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001c330:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001c334:	9501      	str	r5, [sp, #4]
9001c336:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001c33a:	44dc      	add	ip, fp
9001c33c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c340:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001c344:	9503      	str	r5, [sp, #12]
9001c346:	9d01      	ldr	r5, [sp, #4]
9001c348:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001c34c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001c350:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001c354:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001c358:	fb0a fc0c 	mul.w	ip, sl, ip
9001c35c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001c360:	fb0a fa01 	mul.w	sl, sl, r1
9001c364:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001c368:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001c36c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001c370:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001c374:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001c378:	4465      	add	r5, ip
9001c37a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c37e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001c382:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c386:	fb09 fc0c 	mul.w	ip, r9, ip
9001c38a:	0a2d      	lsrs	r5, r5, #8
9001c38c:	fb09 f904 	mul.w	r9, r9, r4
9001c390:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c394:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001c398:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001c39c:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001c3a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001c3a4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001c3a8:	437d      	muls	r5, r7
9001c3aa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001c3ae:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001c3b2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001c3b6:	4461      	add	r1, ip
9001c3b8:	fb08 f404 	mul.w	r4, r8, r4
9001c3bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001c3c0:	fb08 f802 	mul.w	r8, r8, r2
9001c3c4:	0a09      	lsrs	r1, r1, #8
9001c3c6:	0a22      	lsrs	r2, r4, #8
9001c3c8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001c3cc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001c3d0:	fb07 f70a 	mul.w	r7, r7, sl
9001c3d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001c3d8:	4414      	add	r4, r2
9001c3da:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001c3de:	0a24      	lsrs	r4, r4, #8
9001c3e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001c3e4:	9a03      	ldr	r2, [sp, #12]
9001c3e6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001c3ea:	fb02 5503 	mla	r5, r2, r3, r5
9001c3ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001c3f2:	9a00      	ldr	r2, [sp, #0]
9001c3f4:	fb04 540e 	mla	r4, r4, lr, r5
9001c3f8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001c3fc:	1235      	asrs	r5, r6, #8
9001c3fe:	fb01 4100 	mla	r1, r1, r0, r4
9001c402:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c406:	0a09      	lsrs	r1, r1, #8
9001c408:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001c40c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001c410:	fb03 7101 	mla	r1, r3, r1, r7
9001c414:	fb0e 1e08 	mla	lr, lr, r8, r1
9001c418:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001c41c:	fb00 e101 	mla	r1, r0, r1, lr
9001c420:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001c424:	b287      	uxth	r7, r0
9001c426:	0a09      	lsrs	r1, r1, #8
9001c428:	437a      	muls	r2, r7
9001c42a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001c42e:	1c53      	adds	r3, r2, #1
9001c430:	4321      	orrs	r1, r4
9001c432:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c436:	0c0a      	lsrs	r2, r1, #16
9001c438:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001c43c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001c440:	b2c8      	uxtb	r0, r1
9001c442:	fb12 f207 	smulbb	r2, r2, r7
9001c446:	fb14 f407 	smulbb	r4, r4, r7
9001c44a:	b2db      	uxtb	r3, r3
9001c44c:	fb10 f007 	smulbb	r0, r0, r7
9001c450:	fb05 2503 	mla	r5, r5, r3, r2
9001c454:	10f2      	asrs	r2, r6, #3
9001c456:	00f6      	lsls	r6, r6, #3
9001c458:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c45c:	b2ad      	uxth	r5, r5
9001c45e:	b2f6      	uxtb	r6, r6
9001c460:	fb02 4203 	mla	r2, r2, r3, r4
9001c464:	fb06 0303 	mla	r3, r6, r3, r0
9001c468:	b294      	uxth	r4, r2
9001c46a:	b299      	uxth	r1, r3
9001c46c:	1c6b      	adds	r3, r5, #1
9001c46e:	1c62      	adds	r2, r4, #1
9001c470:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c474:	1c4b      	adds	r3, r1, #1
9001c476:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001c47a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001c47e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c482:	0952      	lsrs	r2, r2, #5
9001c484:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c488:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c48c:	432b      	orrs	r3, r5
9001c48e:	4313      	orrs	r3, r2
9001c490:	9a02      	ldr	r2, [sp, #8]
9001c492:	8013      	strh	r3, [r2, #0]
9001c494:	b005      	add	sp, #20
9001c496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c49a:	2500      	movs	r5, #0
9001c49c:	e6e9      	b.n	9001c272 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001c49e:	2100      	movs	r1, #0
9001c4a0:	460d      	mov	r5, r1
9001c4a2:	e6f3      	b.n	9001c28c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001c4a4:	2100      	movs	r1, #0
9001c4a6:	e6f1      	b.n	9001c28c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001c4a8:	4631      	mov	r1, r6
9001c4aa:	e6ef      	b.n	9001c28c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001c4ac:	2400      	movs	r4, #0
9001c4ae:	e700      	b.n	9001c2b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001c4b0:	2200      	movs	r2, #0
9001c4b2:	4614      	mov	r4, r2
9001c4b4:	e70b      	b.n	9001c2ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001c4b6:	4602      	mov	r2, r0
9001c4b8:	4604      	mov	r4, r0
9001c4ba:	e708      	b.n	9001c2ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001c4bc:	2200      	movs	r2, #0
9001c4be:	e706      	b.n	9001c2ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001c4c0:	4632      	mov	r2, r6
9001c4c2:	e704      	b.n	9001c2ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001c4c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c4c8:	b09f      	sub	sp, #124	; 0x7c
9001c4ca:	921b      	str	r2, [sp, #108]	; 0x6c
9001c4cc:	9309      	str	r3, [sp, #36]	; 0x24
9001c4ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001c4d0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001c4d4:	901d      	str	r0, [sp, #116]	; 0x74
9001c4d6:	931c      	str	r3, [sp, #112]	; 0x70
9001c4d8:	6850      	ldr	r0, [r2, #4]
9001c4da:	9119      	str	r1, [sp, #100]	; 0x64
9001c4dc:	6812      	ldr	r2, [r2, #0]
9001c4de:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001c4e0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001c4e4:	fb00 1303 	mla	r3, r0, r3, r1
9001c4e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001c4ec:	930c      	str	r3, [sp, #48]	; 0x30
9001c4ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c4f0:	681b      	ldr	r3, [r3, #0]
9001c4f2:	9312      	str	r3, [sp, #72]	; 0x48
9001c4f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c4f6:	685e      	ldr	r6, [r3, #4]
9001c4f8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001c4fc:	3604      	adds	r6, #4
9001c4fe:	930d      	str	r3, [sp, #52]	; 0x34
9001c500:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001c502:	2b00      	cmp	r3, #0
9001c504:	dc03      	bgt.n	9001c50e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001c506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001c508:	2b00      	cmp	r3, #0
9001c50a:	f340 8387 	ble.w	9001cc1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001c50e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c510:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c514:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c518:	1e48      	subs	r0, r1, #1
9001c51a:	1e57      	subs	r7, r2, #1
9001c51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c51e:	2b00      	cmp	r3, #0
9001c520:	f340 8194 	ble.w	9001c84c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001c524:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c526:	142b      	asrs	r3, r5, #16
9001c528:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001c52c:	d406      	bmi.n	9001c53c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c52e:	4584      	cmp	ip, r0
9001c530:	da04      	bge.n	9001c53c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c532:	2b00      	cmp	r3, #0
9001c534:	db02      	blt.n	9001c53c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c536:	42bb      	cmp	r3, r7
9001c538:	f2c0 8189 	blt.w	9001c84e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c53c:	f11c 0c01 	adds.w	ip, ip, #1
9001c540:	f100 8177 	bmi.w	9001c832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001c544:	4561      	cmp	r1, ip
9001c546:	f2c0 8174 	blt.w	9001c832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001c54a:	3301      	adds	r3, #1
9001c54c:	f100 8171 	bmi.w	9001c832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001c550:	429a      	cmp	r2, r3
9001c552:	f2c0 816e 	blt.w	9001c832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c558:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001c55a:	931a      	str	r3, [sp, #104]	; 0x68
9001c55c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001c55e:	2b00      	cmp	r3, #0
9001c560:	f340 8193 	ble.w	9001c88a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001c564:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001c566:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c56a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c56e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001c572:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c574:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001c578:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001c57a:	141b      	asrs	r3, r3, #16
9001c57c:	f100 81d6 	bmi.w	9001c92c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001c580:	f100 38ff 	add.w	r8, r0, #4294967295
9001c584:	4543      	cmp	r3, r8
9001c586:	f280 81d1 	bge.w	9001c92c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001c58a:	f1bc 0f00 	cmp.w	ip, #0
9001c58e:	f2c0 81cd 	blt.w	9001c92c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001c592:	f10e 38ff 	add.w	r8, lr, #4294967295
9001c596:	45c4      	cmp	ip, r8
9001c598:	f280 81c8 	bge.w	9001c92c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001c59c:	b200      	sxth	r0, r0
9001c59e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c5a0:	fb0c 3300 	mla	r3, ip, r0, r3
9001c5a4:	eb04 0803 	add.w	r8, r4, r3
9001c5a8:	5ce3      	ldrb	r3, [r4, r3]
9001c5aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001c5ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001c5b2:	2a00      	cmp	r2, #0
9001c5b4:	f000 81af 	beq.w	9001c916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001c5b8:	f898 c001 	ldrb.w	ip, [r8, #1]
9001c5bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001c5c0:	940e      	str	r4, [sp, #56]	; 0x38
9001c5c2:	0e24      	lsrs	r4, r4, #24
9001c5c4:	9415      	str	r4, [sp, #84]	; 0x54
9001c5c6:	b179      	cbz	r1, 9001c5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001c5c8:	eb08 0c00 	add.w	ip, r8, r0
9001c5cc:	f818 0000 	ldrb.w	r0, [r8, r0]
9001c5d0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001c5d4:	900a      	str	r0, [sp, #40]	; 0x28
9001c5d6:	0e00      	lsrs	r0, r0, #24
9001c5d8:	9013      	str	r0, [sp, #76]	; 0x4c
9001c5da:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001c5de:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001c5e2:	900f      	str	r0, [sp, #60]	; 0x3c
9001c5e4:	0e00      	lsrs	r0, r0, #24
9001c5e6:	9016      	str	r0, [sp, #88]	; 0x58
9001c5e8:	b292      	uxth	r2, r2
9001c5ea:	9815      	ldr	r0, [sp, #84]	; 0x54
9001c5ec:	b289      	uxth	r1, r1
9001c5ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c5f0:	fb02 f901 	mul.w	r9, r2, r1
9001c5f4:	0112      	lsls	r2, r2, #4
9001c5f6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001c5fa:	eba2 0809 	sub.w	r8, r2, r9
9001c5fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001c602:	b289      	uxth	r1, r1
9001c604:	fa1f f888 	uxth.w	r8, r8
9001c608:	1a52      	subs	r2, r2, r1
9001c60a:	fb08 f000 	mul.w	r0, r8, r0
9001c60e:	b292      	uxth	r2, r2
9001c610:	fb02 000e 	mla	r0, r2, lr, r0
9001c614:	fb01 0004 	mla	r0, r1, r4, r0
9001c618:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001c61a:	fb09 0004 	mla	r0, r9, r4, r0
9001c61e:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001c622:	2800      	cmp	r0, #0
9001c624:	f000 80fa 	beq.w	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c628:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001c62c:	d01b      	beq.n	9001c666 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001c62e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001c632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c636:	fb0e fa0a 	mul.w	sl, lr, sl
9001c63a:	fb0e fe03 	mul.w	lr, lr, r3
9001c63e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001c642:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001c646:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001c64a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c64e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001c652:	4453      	add	r3, sl
9001c654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c658:	0a1b      	lsrs	r3, r3, #8
9001c65a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001c65e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c662:	ea43 030c 	orr.w	r3, r3, ip
9001c666:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c668:	2cff      	cmp	r4, #255	; 0xff
9001c66a:	d021      	beq.n	9001c6b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001c66c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c66e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c672:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c674:	fb04 fb0b 	mul.w	fp, r4, fp
9001c678:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c67a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c67e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c680:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c684:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c688:	fb04 fa0a 	mul.w	sl, r4, sl
9001c68c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c690:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c694:	44de      	add	lr, fp
9001c696:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c69a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c69e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c6a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c6a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c6aa:	ea4e 040a 	orr.w	r4, lr, sl
9001c6ae:	940e      	str	r4, [sp, #56]	; 0x38
9001c6b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c6b2:	2cff      	cmp	r4, #255	; 0xff
9001c6b4:	d021      	beq.n	9001c6fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001c6b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c6b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c6bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c6be:	fb04 fb0b 	mul.w	fp, r4, fp
9001c6c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c6c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c6c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c6ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c6ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c6d2:	fb04 fa0a 	mul.w	sl, r4, sl
9001c6d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c6da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c6de:	44de      	add	lr, fp
9001c6e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c6e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c6e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c6ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c6f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c6f4:	ea4e 040a 	orr.w	r4, lr, sl
9001c6f8:	940a      	str	r4, [sp, #40]	; 0x28
9001c6fa:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001c6fc:	2cff      	cmp	r4, #255	; 0xff
9001c6fe:	d021      	beq.n	9001c744 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001c700:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001c702:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c706:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001c708:	fb04 fb0b 	mul.w	fp, r4, fp
9001c70c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001c70e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c712:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001c714:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c718:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c71c:	fb04 fa0a 	mul.w	sl, r4, sl
9001c720:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c724:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c728:	44de      	add	lr, fp
9001c72a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c72e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c732:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c736:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c73a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c73e:	ea4e 040a 	orr.w	r4, lr, sl
9001c742:	940f      	str	r4, [sp, #60]	; 0x3c
9001c744:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c746:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001c74a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c74e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c754:	fb08 fc0c 	mul.w	ip, r8, ip
9001c758:	fb02 cc0e 	mla	ip, r2, lr, ip
9001c75c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c760:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001c762:	fb01 cc0e 	mla	ip, r1, lr, ip
9001c766:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c76a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c76c:	fb09 cc0e 	mla	ip, r9, lr, ip
9001c770:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001c774:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c776:	fb08 f80e 	mul.w	r8, r8, lr
9001c77a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c77e:	fb02 8303 	mla	r3, r2, r3, r8
9001c782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001c784:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c788:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001c78c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c78e:	fb01 330a 	mla	r3, r1, sl, r3
9001c792:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001c796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c798:	fb09 3901 	mla	r9, r9, r1, r3
9001c79c:	883b      	ldrh	r3, [r7, #0]
9001c79e:	4342      	muls	r2, r0
9001c7a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001c7a4:	1c50      	adds	r0, r2, #1
9001c7a6:	1219      	asrs	r1, r3, #8
9001c7a8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001c7ac:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001c7b0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c7b4:	ea4c 0c09 	orr.w	ip, ip, r9
9001c7b8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001c7bc:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001c7c0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001c7c4:	b2c0      	uxtb	r0, r0
9001c7c6:	fb12 f204 	smulbb	r2, r2, r4
9001c7ca:	fa5f fc8c 	uxtb.w	ip, ip
9001c7ce:	fb1e fe04 	smulbb	lr, lr, r4
9001c7d2:	fb01 2100 	mla	r1, r1, r0, r2
9001c7d6:	10da      	asrs	r2, r3, #3
9001c7d8:	fb1c fc04 	smulbb	ip, ip, r4
9001c7dc:	00db      	lsls	r3, r3, #3
9001c7de:	b289      	uxth	r1, r1
9001c7e0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c7e4:	b2db      	uxtb	r3, r3
9001c7e6:	fb02 e200 	mla	r2, r2, r0, lr
9001c7ea:	fb03 c300 	mla	r3, r3, r0, ip
9001c7ee:	b292      	uxth	r2, r2
9001c7f0:	fa1f fc83 	uxth.w	ip, r3
9001c7f4:	1c4b      	adds	r3, r1, #1
9001c7f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001c7fa:	f10c 0301 	add.w	r3, ip, #1
9001c7fe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001c802:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001c806:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c80a:	430b      	orrs	r3, r1
9001c80c:	1c51      	adds	r1, r2, #1
9001c80e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001c812:	0952      	lsrs	r2, r2, #5
9001c814:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c818:	4313      	orrs	r3, r2
9001c81a:	803b      	strh	r3, [r7, #0]
9001c81c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001c81e:	3702      	adds	r7, #2
9001c820:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001c822:	441a      	add	r2, r3
9001c824:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c826:	441d      	add	r5, r3
9001c828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001c82a:	9229      	str	r2, [sp, #164]	; 0xa4
9001c82c:	3b01      	subs	r3, #1
9001c82e:	931a      	str	r3, [sp, #104]	; 0x68
9001c830:	e694      	b.n	9001c55c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c832:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001c834:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c836:	441c      	add	r4, r3
9001c838:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c83a:	441d      	add	r5, r3
9001c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c83e:	9429      	str	r4, [sp, #164]	; 0xa4
9001c840:	3b01      	subs	r3, #1
9001c842:	9309      	str	r3, [sp, #36]	; 0x24
9001c844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c846:	3302      	adds	r3, #2
9001c848:	930c      	str	r3, [sp, #48]	; 0x30
9001c84a:	e667      	b.n	9001c51c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c84c:	d024      	beq.n	9001c898 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c850:	982b      	ldr	r0, [sp, #172]	; 0xac
9001c852:	3b01      	subs	r3, #1
9001c854:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c856:	fb00 4003 	mla	r0, r0, r3, r4
9001c85a:	1400      	asrs	r0, r0, #16
9001c85c:	f53f ae7b 	bmi.w	9001c556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c860:	3901      	subs	r1, #1
9001c862:	4288      	cmp	r0, r1
9001c864:	f6bf ae77 	bge.w	9001c556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c868:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001c86a:	fb01 5303 	mla	r3, r1, r3, r5
9001c86e:	141b      	asrs	r3, r3, #16
9001c870:	f53f ae71 	bmi.w	9001c556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c874:	3a01      	subs	r2, #1
9001c876:	4293      	cmp	r3, r2
9001c878:	f6bf ae6d 	bge.w	9001c556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c87c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c880:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001c884:	f1bb 0f00 	cmp.w	fp, #0
9001c888:	dc70      	bgt.n	9001c96c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001c88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c88c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c892:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001c896:	930c      	str	r3, [sp, #48]	; 0x30
9001c898:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001c89a:	2b00      	cmp	r3, #0
9001c89c:	f340 81be 	ble.w	9001cc1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001c8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c8a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c8a6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c8aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c8ae:	eef0 6a62 	vmov.f32	s13, s5
9001c8b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c8b6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c8ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c8be:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001c8c2:	eef0 6a43 	vmov.f32	s13, s6
9001c8c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c8ca:	ee16 5a90 	vmov	r5, s13
9001c8ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c8d2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c8d6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c8da:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c8de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c8e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c8e6:	ee12 2a90 	vmov	r2, s5
9001c8ea:	eef0 2a47 	vmov.f32	s5, s14
9001c8ee:	fb92 f3f3 	sdiv	r3, r2, r3
9001c8f2:	ee13 2a10 	vmov	r2, s6
9001c8f6:	932b      	str	r3, [sp, #172]	; 0xac
9001c8f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c8fa:	eeb0 3a67 	vmov.f32	s6, s15
9001c8fe:	fb92 f3f3 	sdiv	r3, r2, r3
9001c902:	932c      	str	r3, [sp, #176]	; 0xb0
9001c904:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001c906:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001c908:	3b01      	subs	r3, #1
9001c90a:	9319      	str	r3, [sp, #100]	; 0x64
9001c90c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c90e:	bf08      	it	eq
9001c910:	4613      	moveq	r3, r2
9001c912:	9309      	str	r3, [sp, #36]	; 0x24
9001c914:	e5f4      	b.n	9001c500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001c916:	2900      	cmp	r1, #0
9001c918:	f43f ae66 	beq.w	9001c5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001c91c:	f818 0000 	ldrb.w	r0, [r8, r0]
9001c920:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001c924:	900a      	str	r0, [sp, #40]	; 0x28
9001c926:	0e00      	lsrs	r0, r0, #24
9001c928:	9013      	str	r0, [sp, #76]	; 0x4c
9001c92a:	e65d      	b.n	9001c5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001c92c:	f113 0801 	adds.w	r8, r3, #1
9001c930:	f53f af74 	bmi.w	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c934:	4540      	cmp	r0, r8
9001c936:	f6ff af71 	blt.w	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c93a:	f11c 0801 	adds.w	r8, ip, #1
9001c93e:	f53f af6d 	bmi.w	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c942:	45c6      	cmp	lr, r8
9001c944:	f6ff af6a 	blt.w	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c948:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001c94a:	b200      	sxth	r0, r0
9001c94c:	9302      	str	r3, [sp, #8]
9001c94e:	fa0f f38e 	sxth.w	r3, lr
9001c952:	9000      	str	r0, [sp, #0]
9001c954:	9301      	str	r3, [sp, #4]
9001c956:	4633      	mov	r3, r6
9001c958:	981d      	ldr	r0, [sp, #116]	; 0x74
9001c95a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c95e:	e9cd c203 	strd	ip, r2, [sp, #12]
9001c962:	4639      	mov	r1, r7
9001c964:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c966:	f7ff fc63 	bl	9001c230 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001c96a:	e757      	b.n	9001c81c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c96c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001c96e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c972:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c974:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001c978:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c97a:	1427      	asrs	r7, r4, #16
9001c97c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c97e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c982:	142b      	asrs	r3, r5, #16
9001c984:	fb01 7303 	mla	r3, r1, r3, r7
9001c988:	18e7      	adds	r7, r4, r3
9001c98a:	5ce3      	ldrb	r3, [r4, r3]
9001c98c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001c990:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001c994:	2a00      	cmp	r2, #0
9001c996:	f000 8137 	beq.w	9001cc08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001c99a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001c99e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001c9a2:	9410      	str	r4, [sp, #64]	; 0x40
9001c9a4:	0e24      	lsrs	r4, r4, #24
9001c9a6:	9417      	str	r4, [sp, #92]	; 0x5c
9001c9a8:	b170      	cbz	r0, 9001c9c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001c9aa:	eb07 0e01 	add.w	lr, r7, r1
9001c9ae:	5c79      	ldrb	r1, [r7, r1]
9001c9b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c9b4:	910b      	str	r1, [sp, #44]	; 0x2c
9001c9b6:	0e09      	lsrs	r1, r1, #24
9001c9b8:	9114      	str	r1, [sp, #80]	; 0x50
9001c9ba:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001c9be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c9c2:	9111      	str	r1, [sp, #68]	; 0x44
9001c9c4:	0e09      	lsrs	r1, r1, #24
9001c9c6:	9118      	str	r1, [sp, #96]	; 0x60
9001c9c8:	b292      	uxth	r2, r2
9001c9ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001c9cc:	b280      	uxth	r0, r0
9001c9ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c9d0:	fb02 f800 	mul.w	r8, r2, r0
9001c9d4:	0112      	lsls	r2, r2, #4
9001c9d6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001c9da:	eba2 0e08 	sub.w	lr, r2, r8
9001c9de:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001c9e2:	b280      	uxth	r0, r0
9001c9e4:	fa1f fe8e 	uxth.w	lr, lr
9001c9e8:	1a12      	subs	r2, r2, r0
9001c9ea:	fb0e f101 	mul.w	r1, lr, r1
9001c9ee:	b292      	uxth	r2, r2
9001c9f0:	fb02 110c 	mla	r1, r2, ip, r1
9001c9f4:	fb00 1104 	mla	r1, r0, r4, r1
9001c9f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001c9fa:	fb08 1104 	mla	r1, r8, r4, r1
9001c9fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001ca02:	2900      	cmp	r1, #0
9001ca04:	f000 80f5 	beq.w	9001cbf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001ca08:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001ca0c:	d019      	beq.n	9001ca42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001ca0e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001ca12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ca16:	fb0c fa0a 	mul.w	sl, ip, sl
9001ca1a:	fb0c fc03 	mul.w	ip, ip, r3
9001ca1e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001ca22:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001ca26:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001ca2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ca2e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ca32:	4453      	add	r3, sl
9001ca34:	0a3f      	lsrs	r7, r7, #8
9001ca36:	0a1b      	lsrs	r3, r3, #8
9001ca38:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001ca3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ca40:	433b      	orrs	r3, r7
9001ca42:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001ca44:	2cff      	cmp	r4, #255	; 0xff
9001ca46:	d020      	beq.n	9001ca8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001ca48:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ca4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ca4e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001ca50:	4367      	muls	r7, r4
9001ca52:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ca54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001ca58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001ca5c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001ca5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001ca62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ca66:	fb04 fa0a 	mul.w	sl, r4, sl
9001ca6a:	44bc      	add	ip, r7
9001ca6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001ca70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ca74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001ca78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ca7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ca80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ca84:	ea4c 040a 	orr.w	r4, ip, sl
9001ca88:	9410      	str	r4, [sp, #64]	; 0x40
9001ca8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ca8c:	2cff      	cmp	r4, #255	; 0xff
9001ca8e:	d020      	beq.n	9001cad2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001ca90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ca92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ca96:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ca98:	4367      	muls	r7, r4
9001ca9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ca9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001caa0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001caa4:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001caa6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001caaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001caae:	fb04 fa0a 	mul.w	sl, r4, sl
9001cab2:	44bc      	add	ip, r7
9001cab4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001cab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cabc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001cac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cac4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001cac8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001cacc:	ea4c 040a 	orr.w	r4, ip, sl
9001cad0:	940b      	str	r4, [sp, #44]	; 0x2c
9001cad2:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001cad4:	2cff      	cmp	r4, #255	; 0xff
9001cad6:	d020      	beq.n	9001cb1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001cad8:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cada:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001cade:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001cae0:	4367      	muls	r7, r4
9001cae2:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cae4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001cae8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001caec:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001caee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001caf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001caf6:	fb04 fa0a 	mul.w	sl, r4, sl
9001cafa:	44bc      	add	ip, r7
9001cafc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001cb00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cb04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001cb08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cb0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001cb10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001cb14:	ea4c 040a 	orr.w	r4, ip, sl
9001cb18:	9411      	str	r4, [sp, #68]	; 0x44
9001cb1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001cb1c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001cb20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001cb24:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001cb28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001cb2a:	fb0e f707 	mul.w	r7, lr, r7
9001cb2e:	fb02 770c 	mla	r7, r2, ip, r7
9001cb32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001cb36:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cb38:	fb00 770c 	mla	r7, r0, ip, r7
9001cb3c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001cb40:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001cb42:	fb08 770c 	mla	r7, r8, ip, r7
9001cb46:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001cb4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001cb4c:	fb0e fe0c 	mul.w	lr, lr, ip
9001cb50:	0a3f      	lsrs	r7, r7, #8
9001cb52:	fb02 e303 	mla	r3, r2, r3, lr
9001cb56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001cb58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001cb5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001cb60:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001cb62:	fb00 330a 	mla	r3, r0, sl, r3
9001cb66:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001cb6a:	f8b9 0000 	ldrh.w	r0, [r9]
9001cb6e:	fb08 3c0c 	mla	ip, r8, ip, r3
9001cb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001cb74:	1202      	asrs	r2, r0, #8
9001cb76:	434b      	muls	r3, r1
9001cb78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cb7c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001cb80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001cb84:	1c59      	adds	r1, r3, #1
9001cb86:	ea47 070c 	orr.w	r7, r7, ip
9001cb8a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001cb8e:	0c3b      	lsrs	r3, r7, #16
9001cb90:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001cb94:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001cb98:	b2ff      	uxtb	r7, r7
9001cb9a:	fb13 f304 	smulbb	r3, r3, r4
9001cb9e:	b2c9      	uxtb	r1, r1
9001cba0:	fb1c fc04 	smulbb	ip, ip, r4
9001cba4:	fb02 3201 	mla	r2, r2, r1, r3
9001cba8:	10c3      	asrs	r3, r0, #3
9001cbaa:	fb17 f704 	smulbb	r7, r7, r4
9001cbae:	00c0      	lsls	r0, r0, #3
9001cbb0:	b292      	uxth	r2, r2
9001cbb2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001cbb6:	b2c0      	uxtb	r0, r0
9001cbb8:	fb03 c301 	mla	r3, r3, r1, ip
9001cbbc:	f102 0c01 	add.w	ip, r2, #1
9001cbc0:	fb00 7001 	mla	r0, r0, r1, r7
9001cbc4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001cbc8:	b280      	uxth	r0, r0
9001cbca:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001cbce:	b29b      	uxth	r3, r3
9001cbd0:	1c42      	adds	r2, r0, #1
9001cbd2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001cbd6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001cbda:	ea42 020c 	orr.w	r2, r2, ip
9001cbde:	f103 0c01 	add.w	ip, r3, #1
9001cbe2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001cbe6:	095b      	lsrs	r3, r3, #5
9001cbe8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cbec:	431a      	orrs	r2, r3
9001cbee:	f8a9 2000 	strh.w	r2, [r9]
9001cbf2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001cbf4:	f109 0902 	add.w	r9, r9, #2
9001cbf8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001cbfa:	f10b 3bff 	add.w	fp, fp, #4294967295
9001cbfe:	441a      	add	r2, r3
9001cc00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cc02:	9229      	str	r2, [sp, #164]	; 0xa4
9001cc04:	441d      	add	r5, r3
9001cc06:	e63d      	b.n	9001c884 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001cc08:	2800      	cmp	r0, #0
9001cc0a:	f43f aedd 	beq.w	9001c9c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001cc0e:	5c79      	ldrb	r1, [r7, r1]
9001cc10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cc14:	910b      	str	r1, [sp, #44]	; 0x2c
9001cc16:	0e09      	lsrs	r1, r1, #24
9001cc18:	9114      	str	r1, [sp, #80]	; 0x50
9001cc1a:	e6d5      	b.n	9001c9c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001cc1c:	b01f      	add	sp, #124	; 0x7c
9001cc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cc22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001cc22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cc26:	b089      	sub	sp, #36	; 0x24
9001cc28:	9101      	str	r1, [sp, #4]
9001cc2a:	9801      	ldr	r0, [sp, #4]
9001cc2c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001cc30:	8800      	ldrh	r0, [r0, #0]
9001cc32:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001cc36:	1206      	asrs	r6, r0, #8
9001cc38:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001cc3c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001cc40:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001cc44:	9602      	str	r6, [sp, #8]
9001cc46:	10c6      	asrs	r6, r0, #3
9001cc48:	00c0      	lsls	r0, r0, #3
9001cc4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001cc4e:	b2c0      	uxtb	r0, r0
9001cc50:	9603      	str	r6, [sp, #12]
9001cc52:	9004      	str	r0, [sp, #16]
9001cc54:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001cc58:	fb07 100c 	mla	r0, r7, ip, r1
9001cc5c:	2f00      	cmp	r7, #0
9001cc5e:	eb02 0e00 	add.w	lr, r2, r0
9001cc62:	f2c0 810a 	blt.w	9001ce7a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001cc66:	45b8      	cmp	r8, r7
9001cc68:	f340 8107 	ble.w	9001ce7a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001cc6c:	2900      	cmp	r1, #0
9001cc6e:	f2c0 8102 	blt.w	9001ce76 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001cc72:	458c      	cmp	ip, r1
9001cc74:	f340 80ff 	ble.w	9001ce76 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001cc78:	5c12      	ldrb	r2, [r2, r0]
9001cc7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001cc7e:	1c4a      	adds	r2, r1, #1
9001cc80:	f100 80fe 	bmi.w	9001ce80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001cc84:	4594      	cmp	ip, r2
9001cc86:	f340 80fb 	ble.w	9001ce80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001cc8a:	2d00      	cmp	r5, #0
9001cc8c:	f000 80fa 	beq.w	9001ce84 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001cc90:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001cc94:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001cc98:	3701      	adds	r7, #1
9001cc9a:	f100 80f7 	bmi.w	9001ce8c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001cc9e:	45b8      	cmp	r8, r7
9001cca0:	f340 80f4 	ble.w	9001ce8c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001cca4:	2c00      	cmp	r4, #0
9001cca6:	f000 80f4 	beq.w	9001ce92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001ccaa:	2900      	cmp	r1, #0
9001ccac:	eb0e 020c 	add.w	r2, lr, ip
9001ccb0:	f2c0 80ea 	blt.w	9001ce88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001ccb4:	458c      	cmp	ip, r1
9001ccb6:	f340 80e7 	ble.w	9001ce88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001ccba:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001ccbe:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001ccc2:	3101      	adds	r1, #1
9001ccc4:	f100 80e8 	bmi.w	9001ce98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001ccc8:	458c      	cmp	ip, r1
9001ccca:	f340 80e5 	ble.w	9001ce98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001ccce:	2d00      	cmp	r5, #0
9001ccd0:	f000 80e4 	beq.w	9001ce9c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001ccd4:	7852      	ldrb	r2, [r2, #1]
9001ccd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001ccda:	0e0b      	lsrs	r3, r1, #24
9001ccdc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001cce0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001cce4:	9300      	str	r3, [sp, #0]
9001cce6:	b2a4      	uxth	r4, r4
9001cce8:	b2ab      	uxth	r3, r5
9001ccea:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001ccee:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001ccf2:	fb03 f904 	mul.w	r9, r3, r4
9001ccf6:	011b      	lsls	r3, r3, #4
9001ccf8:	fb0a f505 	mul.w	r5, sl, r5
9001ccfc:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001cd00:	eba3 0e09 	sub.w	lr, r3, r9
9001cd04:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001cd08:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001cd0c:	0a28      	lsrs	r0, r5, #8
9001cd0e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001cd12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001cd16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001cd1a:	fb0a f303 	mul.w	r3, sl, r3
9001cd1e:	fb08 f707 	mul.w	r7, r8, r7
9001cd22:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001cd26:	4405      	add	r5, r0
9001cd28:	fb08 fc0c 	mul.w	ip, r8, ip
9001cd2c:	b2a4      	uxth	r4, r4
9001cd2e:	0a2d      	lsrs	r5, r5, #8
9001cd30:	fa1f fe8e 	uxth.w	lr, lr
9001cd34:	1b12      	subs	r2, r2, r4
9001cd36:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001cd3a:	b292      	uxth	r2, r2
9001cd3c:	9005      	str	r0, [sp, #20]
9001cd3e:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001cd42:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001cd46:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001cd4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001cd4e:	0a1b      	lsrs	r3, r3, #8
9001cd50:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001cd54:	9306      	str	r3, [sp, #24]
9001cd56:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001cd5a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001cd5e:	4460      	add	r0, ip
9001cd60:	fb0b f303 	mul.w	r3, fp, r3
9001cd64:	fb0b f606 	mul.w	r6, fp, r6
9001cd68:	0a00      	lsrs	r0, r0, #8
9001cd6a:	0a1d      	lsrs	r5, r3, #8
9001cd6c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001cd70:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001cd74:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001cd78:	441d      	add	r5, r3
9001cd7a:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001cd7e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001cd82:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001cd86:	0a2d      	lsrs	r5, r5, #8
9001cd88:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001cd8c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001cd90:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001cd94:	0a36      	lsrs	r6, r6, #8
9001cd96:	0a1b      	lsrs	r3, r3, #8
9001cd98:	fb05 f50e 	mul.w	r5, r5, lr
9001cd9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001cda0:	9307      	str	r3, [sp, #28]
9001cda2:	0e0b      	lsrs	r3, r1, #24
9001cda4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001cda8:	fb0e f606 	mul.w	r6, lr, r6
9001cdac:	435f      	muls	r7, r3
9001cdae:	4359      	muls	r1, r3
9001cdb0:	9b05      	ldr	r3, [sp, #20]
9001cdb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001cdb6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001cdba:	fb03 5502 	mla	r5, r3, r2, r5
9001cdbe:	9b06      	ldr	r3, [sp, #24]
9001cdc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cdc4:	fb0e fe0b 	mul.w	lr, lr, fp
9001cdc8:	44bc      	add	ip, r7
9001cdca:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001cdce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cdd2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001cdd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cdda:	0a09      	lsrs	r1, r1, #8
9001cddc:	fb0c 5509 	mla	r5, ip, r9, r5
9001cde0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001cde4:	fb00 5504 	mla	r5, r0, r4, r5
9001cde8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001cdec:	9b07      	ldr	r3, [sp, #28]
9001cdee:	fb02 6000 	mla	r0, r2, r0, r6
9001cdf2:	0a2d      	lsrs	r5, r5, #8
9001cdf4:	fb02 e20a 	mla	r2, r2, sl, lr
9001cdf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001cdfc:	fb09 0001 	mla	r0, r9, r1, r0
9001ce00:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001ce04:	fb04 0003 	mla	r0, r4, r3, r0
9001ce08:	9b00      	ldr	r3, [sp, #0]
9001ce0a:	fb04 2408 	mla	r4, r4, r8, r2
9001ce0e:	9a04      	ldr	r2, [sp, #16]
9001ce10:	0a00      	lsrs	r0, r0, #8
9001ce12:	fb09 4903 	mla	r9, r9, r3, r4
9001ce16:	9b02      	ldr	r3, [sp, #8]
9001ce18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001ce1c:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001ce20:	4305      	orrs	r5, r0
9001ce22:	fa5f f989 	uxtb.w	r9, r9
9001ce26:	fb03 f109 	mul.w	r1, r3, r9
9001ce2a:	9b03      	ldr	r3, [sp, #12]
9001ce2c:	fb03 f309 	mul.w	r3, r3, r9
9001ce30:	fb02 f909 	mul.w	r9, r2, r9
9001ce34:	1c4a      	adds	r2, r1, #1
9001ce36:	1c58      	adds	r0, r3, #1
9001ce38:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ce3c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001ce40:	0c2a      	lsrs	r2, r5, #16
9001ce42:	0a2b      	lsrs	r3, r5, #8
9001ce44:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001ce48:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001ce4c:	0212      	lsls	r2, r2, #8
9001ce4e:	00db      	lsls	r3, r3, #3
9001ce50:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001ce54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ce58:	4313      	orrs	r3, r2
9001ce5a:	f109 0201 	add.w	r2, r9, #1
9001ce5e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001ce62:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001ce66:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001ce6a:	431d      	orrs	r5, r3
9001ce6c:	9b01      	ldr	r3, [sp, #4]
9001ce6e:	801d      	strh	r5, [r3, #0]
9001ce70:	b009      	add	sp, #36	; 0x24
9001ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ce76:	2000      	movs	r0, #0
9001ce78:	e701      	b.n	9001cc7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001ce7a:	2600      	movs	r6, #0
9001ce7c:	4630      	mov	r0, r6
9001ce7e:	e70b      	b.n	9001cc98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001ce80:	2600      	movs	r6, #0
9001ce82:	e709      	b.n	9001cc98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001ce84:	462e      	mov	r6, r5
9001ce86:	e707      	b.n	9001cc98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001ce88:	2700      	movs	r7, #0
9001ce8a:	e71a      	b.n	9001ccc2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001ce8c:	2100      	movs	r1, #0
9001ce8e:	460f      	mov	r7, r1
9001ce90:	e723      	b.n	9001ccda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001ce92:	4621      	mov	r1, r4
9001ce94:	4627      	mov	r7, r4
9001ce96:	e720      	b.n	9001ccda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001ce98:	2100      	movs	r1, #0
9001ce9a:	e71e      	b.n	9001ccda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001ce9c:	4629      	mov	r1, r5
9001ce9e:	e71c      	b.n	9001ccda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001cea0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cea4:	b09b      	sub	sp, #108	; 0x6c
9001cea6:	9218      	str	r2, [sp, #96]	; 0x60
9001cea8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001ceaa:	9019      	str	r0, [sp, #100]	; 0x64
9001ceac:	9116      	str	r1, [sp, #88]	; 0x58
9001ceae:	6850      	ldr	r0, [r2, #4]
9001ceb0:	9307      	str	r3, [sp, #28]
9001ceb2:	6812      	ldr	r2, [r2, #0]
9001ceb4:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001ceb6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001ceba:	fb00 1303 	mla	r3, r0, r3, r1
9001cebe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cec2:	930a      	str	r3, [sp, #40]	; 0x28
9001cec4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cec6:	681b      	ldr	r3, [r3, #0]
9001cec8:	930f      	str	r3, [sp, #60]	; 0x3c
9001ceca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cecc:	685e      	ldr	r6, [r3, #4]
9001cece:	3604      	adds	r6, #4
9001ced0:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001ced2:	2b00      	cmp	r3, #0
9001ced4:	dc03      	bgt.n	9001cede <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001ced6:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ced8:	2b00      	cmp	r3, #0
9001ceda:	f340 8373 	ble.w	9001d5c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001cede:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cee0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cee4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cee8:	1e48      	subs	r0, r1, #1
9001ceea:	1e57      	subs	r7, r2, #1
9001ceec:	9b07      	ldr	r3, [sp, #28]
9001ceee:	2b00      	cmp	r3, #0
9001cef0:	f340 818f 	ble.w	9001d212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001cef4:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001cef6:	142b      	asrs	r3, r5, #16
9001cef8:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001cefc:	d406      	bmi.n	9001cf0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001cefe:	4584      	cmp	ip, r0
9001cf00:	da04      	bge.n	9001cf0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001cf02:	2b00      	cmp	r3, #0
9001cf04:	db02      	blt.n	9001cf0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001cf06:	42bb      	cmp	r3, r7
9001cf08:	f2c0 8184 	blt.w	9001d214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001cf0c:	f11c 0c01 	adds.w	ip, ip, #1
9001cf10:	f100 8172 	bmi.w	9001d1f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001cf14:	4561      	cmp	r1, ip
9001cf16:	f2c0 816f 	blt.w	9001d1f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001cf1a:	3301      	adds	r3, #1
9001cf1c:	f100 816c 	bmi.w	9001d1f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001cf20:	429a      	cmp	r2, r3
9001cf22:	f2c0 8169 	blt.w	9001d1f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001cf26:	9b07      	ldr	r3, [sp, #28]
9001cf28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001cf2a:	9317      	str	r3, [sp, #92]	; 0x5c
9001cf2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001cf2e:	2b00      	cmp	r3, #0
9001cf30:	f340 818e 	ble.w	9001d250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001cf34:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001cf36:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001cf3a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001cf3e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001cf42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cf44:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001cf48:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001cf4a:	141b      	asrs	r3, r3, #16
9001cf4c:	f100 81d1 	bmi.w	9001d2f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001cf50:	f101 38ff 	add.w	r8, r1, #4294967295
9001cf54:	4543      	cmp	r3, r8
9001cf56:	f280 81cc 	bge.w	9001d2f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001cf5a:	f1bc 0f00 	cmp.w	ip, #0
9001cf5e:	f2c0 81c8 	blt.w	9001d2f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001cf62:	f10e 38ff 	add.w	r8, lr, #4294967295
9001cf66:	45c4      	cmp	ip, r8
9001cf68:	f280 81c3 	bge.w	9001d2f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001cf6c:	b209      	sxth	r1, r1
9001cf6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001cf70:	fb0c 3301 	mla	r3, ip, r1, r3
9001cf74:	eb04 0803 	add.w	r8, r4, r3
9001cf78:	5ce3      	ldrb	r3, [r4, r3]
9001cf7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001cf7e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001cf82:	2a00      	cmp	r2, #0
9001cf84:	f000 81aa 	beq.w	9001d2dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001cf88:	f898 c001 	ldrb.w	ip, [r8, #1]
9001cf8c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001cf90:	940b      	str	r4, [sp, #44]	; 0x2c
9001cf92:	0e24      	lsrs	r4, r4, #24
9001cf94:	9412      	str	r4, [sp, #72]	; 0x48
9001cf96:	b178      	cbz	r0, 9001cfb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001cf98:	eb08 0c01 	add.w	ip, r8, r1
9001cf9c:	f818 1001 	ldrb.w	r1, [r8, r1]
9001cfa0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cfa4:	9108      	str	r1, [sp, #32]
9001cfa6:	0e09      	lsrs	r1, r1, #24
9001cfa8:	9110      	str	r1, [sp, #64]	; 0x40
9001cfaa:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001cfae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cfb2:	910c      	str	r1, [sp, #48]	; 0x30
9001cfb4:	0e09      	lsrs	r1, r1, #24
9001cfb6:	9113      	str	r1, [sp, #76]	; 0x4c
9001cfb8:	b292      	uxth	r2, r2
9001cfba:	9912      	ldr	r1, [sp, #72]	; 0x48
9001cfbc:	b280      	uxth	r0, r0
9001cfbe:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001cfc0:	fb02 f900 	mul.w	r9, r2, r0
9001cfc4:	0112      	lsls	r2, r2, #4
9001cfc6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001cfca:	eba2 0809 	sub.w	r8, r2, r9
9001cfce:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001cfd2:	b280      	uxth	r0, r0
9001cfd4:	fa1f f888 	uxth.w	r8, r8
9001cfd8:	1a12      	subs	r2, r2, r0
9001cfda:	fb08 f101 	mul.w	r1, r8, r1
9001cfde:	b292      	uxth	r2, r2
9001cfe0:	fb02 110e 	mla	r1, r2, lr, r1
9001cfe4:	fb00 1104 	mla	r1, r0, r4, r1
9001cfe8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001cfea:	fb09 1104 	mla	r1, r9, r4, r1
9001cfee:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001cff2:	2900      	cmp	r1, #0
9001cff4:	f000 80f5 	beq.w	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cff8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001cffc:	d01b      	beq.n	9001d036 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001cffe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001d002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001d006:	fb0e fa0a 	mul.w	sl, lr, sl
9001d00a:	fb0e fe03 	mul.w	lr, lr, r3
9001d00e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001d012:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001d016:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001d01a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001d01e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001d022:	4453      	add	r3, sl
9001d024:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d028:	0a1b      	lsrs	r3, r3, #8
9001d02a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001d02e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001d032:	ea43 030c 	orr.w	r3, r3, ip
9001d036:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001d038:	2cff      	cmp	r4, #255	; 0xff
9001d03a:	d021      	beq.n	9001d080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d03c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d03e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001d042:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001d044:	fb04 fb0b 	mul.w	fp, r4, fp
9001d048:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d04a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d04e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001d050:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d054:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001d058:	fb04 fa0a 	mul.w	sl, r4, sl
9001d05c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d060:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001d064:	44de      	add	lr, fp
9001d066:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d06a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d06e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d072:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d076:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d07a:	ea4e 040a 	orr.w	r4, lr, sl
9001d07e:	940b      	str	r4, [sp, #44]	; 0x2c
9001d080:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001d082:	2cff      	cmp	r4, #255	; 0xff
9001d084:	d021      	beq.n	9001d0ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001d086:	9c08      	ldr	r4, [sp, #32]
9001d088:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001d08c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001d08e:	fb04 fb0b 	mul.w	fp, r4, fp
9001d092:	9c08      	ldr	r4, [sp, #32]
9001d094:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d098:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001d09a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d09e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001d0a2:	fb04 fa0a 	mul.w	sl, r4, sl
9001d0a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d0aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001d0ae:	44de      	add	lr, fp
9001d0b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d0b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d0b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d0bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d0c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d0c4:	ea4e 040a 	orr.w	r4, lr, sl
9001d0c8:	9408      	str	r4, [sp, #32]
9001d0ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d0cc:	2cff      	cmp	r4, #255	; 0xff
9001d0ce:	d021      	beq.n	9001d114 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001d0d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001d0d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001d0d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d0d8:	fb04 fb0b 	mul.w	fp, r4, fp
9001d0dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001d0de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d0e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d0e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d0e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001d0ec:	fb04 fa0a 	mul.w	sl, r4, sl
9001d0f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d0f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001d0f8:	44de      	add	lr, fp
9001d0fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d0fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d102:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d106:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001d10a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d10e:	ea4e 040a 	orr.w	r4, lr, sl
9001d112:	940c      	str	r4, [sp, #48]	; 0x30
9001d114:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d116:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001d11a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001d11e:	43c9      	mvns	r1, r1
9001d120:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d124:	9c08      	ldr	r4, [sp, #32]
9001d126:	fb08 fc0c 	mul.w	ip, r8, ip
9001d12a:	fb02 cc0e 	mla	ip, r2, lr, ip
9001d12e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001d132:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001d134:	fb00 cc0e 	mla	ip, r0, lr, ip
9001d138:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001d13c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d13e:	fb09 cc0e 	mla	ip, r9, lr, ip
9001d142:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001d146:	fb08 f80e 	mul.w	r8, r8, lr
9001d14a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d14e:	fa5f fe81 	uxtb.w	lr, r1
9001d152:	fb02 8303 	mla	r3, r2, r3, r8
9001d156:	9a08      	ldr	r2, [sp, #32]
9001d158:	f8b7 8000 	ldrh.w	r8, [r7]
9001d15c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d160:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001d164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001d166:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001d16a:	fb00 330a 	mla	r3, r0, sl, r3
9001d16e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001d172:	ea4f 2228 	mov.w	r2, r8, asr #8
9001d176:	fb09 3900 	mla	r9, r9, r0, r3
9001d17a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001d17e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001d182:	b2c9      	uxtb	r1, r1
9001d184:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d188:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001d18c:	fb02 f20e 	mul.w	r2, r2, lr
9001d190:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001d194:	fb00 f00e 	mul.w	r0, r0, lr
9001d198:	1c53      	adds	r3, r2, #1
9001d19a:	fb01 f10e 	mul.w	r1, r1, lr
9001d19e:	ea4c 0c09 	orr.w	ip, ip, r9
9001d1a2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001d1a6:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001d1aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d1ae:	4a60      	ldr	r2, [pc, #384]	; (9001d330 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001d1b0:	b2db      	uxtb	r3, r3
9001d1b2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001d1b6:	1c43      	adds	r3, r0, #1
9001d1b8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001d1bc:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001d1c0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001d1c4:	00db      	lsls	r3, r3, #3
9001d1c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d1ca:	4313      	orrs	r3, r2
9001d1cc:	1c4a      	adds	r2, r1, #1
9001d1ce:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001d1d2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001d1d6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001d1da:	ea4c 0c03 	orr.w	ip, ip, r3
9001d1de:	f8a7 c000 	strh.w	ip, [r7]
9001d1e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001d1e4:	3702      	adds	r7, #2
9001d1e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001d1e8:	441a      	add	r2, r3
9001d1ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d1ec:	441d      	add	r5, r3
9001d1ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001d1f0:	9225      	str	r2, [sp, #148]	; 0x94
9001d1f2:	3b01      	subs	r3, #1
9001d1f4:	9317      	str	r3, [sp, #92]	; 0x5c
9001d1f6:	e699      	b.n	9001cf2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d1f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001d1fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001d1fc:	441c      	add	r4, r3
9001d1fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d200:	441d      	add	r5, r3
9001d202:	9b07      	ldr	r3, [sp, #28]
9001d204:	9425      	str	r4, [sp, #148]	; 0x94
9001d206:	3b01      	subs	r3, #1
9001d208:	9307      	str	r3, [sp, #28]
9001d20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d20c:	3302      	adds	r3, #2
9001d20e:	930a      	str	r3, [sp, #40]	; 0x28
9001d210:	e66c      	b.n	9001ceec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001d212:	d024      	beq.n	9001d25e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001d214:	9b07      	ldr	r3, [sp, #28]
9001d216:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001d218:	3b01      	subs	r3, #1
9001d21a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001d21c:	fb00 4003 	mla	r0, r0, r3, r4
9001d220:	1400      	asrs	r0, r0, #16
9001d222:	f53f ae80 	bmi.w	9001cf26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d226:	3901      	subs	r1, #1
9001d228:	4288      	cmp	r0, r1
9001d22a:	f6bf ae7c 	bge.w	9001cf26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d22e:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001d230:	fb01 5303 	mla	r3, r1, r3, r5
9001d234:	141b      	asrs	r3, r3, #16
9001d236:	f53f ae76 	bmi.w	9001cf26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d23a:	3a01      	subs	r2, #1
9001d23c:	4293      	cmp	r3, r2
9001d23e:	f6bf ae72 	bge.w	9001cf26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d242:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001d246:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001d24a:	f1bb 0f00 	cmp.w	fp, #0
9001d24e:	dc71      	bgt.n	9001d334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001d250:	9b07      	ldr	r3, [sp, #28]
9001d252:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001d256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d258:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001d25c:	930a      	str	r3, [sp, #40]	; 0x28
9001d25e:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001d260:	2b00      	cmp	r3, #0
9001d262:	f340 81af 	ble.w	9001d5c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001d266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d26a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d26c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d270:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d274:	eef0 6a62 	vmov.f32	s13, s5
9001d278:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d27c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d284:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001d288:	eef0 6a43 	vmov.f32	s13, s6
9001d28c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d290:	ee16 5a90 	vmov	r5, s13
9001d294:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d298:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d29c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d2a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d2a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d2a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d2ac:	ee12 2a90 	vmov	r2, s5
9001d2b0:	eef0 2a47 	vmov.f32	s5, s14
9001d2b4:	fb92 f3f3 	sdiv	r3, r2, r3
9001d2b8:	ee13 2a10 	vmov	r2, s6
9001d2bc:	9327      	str	r3, [sp, #156]	; 0x9c
9001d2be:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d2c0:	eeb0 3a67 	vmov.f32	s6, s15
9001d2c4:	fb92 f3f3 	sdiv	r3, r2, r3
9001d2c8:	9328      	str	r3, [sp, #160]	; 0xa0
9001d2ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001d2cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001d2ce:	3b01      	subs	r3, #1
9001d2d0:	9316      	str	r3, [sp, #88]	; 0x58
9001d2d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d2d4:	bf08      	it	eq
9001d2d6:	4613      	moveq	r3, r2
9001d2d8:	9307      	str	r3, [sp, #28]
9001d2da:	e5f9      	b.n	9001ced0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001d2dc:	2800      	cmp	r0, #0
9001d2de:	f43f ae6b 	beq.w	9001cfb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001d2e2:	f818 1001 	ldrb.w	r1, [r8, r1]
9001d2e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001d2ea:	9108      	str	r1, [sp, #32]
9001d2ec:	0e09      	lsrs	r1, r1, #24
9001d2ee:	9110      	str	r1, [sp, #64]	; 0x40
9001d2f0:	e662      	b.n	9001cfb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001d2f2:	f113 0801 	adds.w	r8, r3, #1
9001d2f6:	f53f af74 	bmi.w	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001d2fa:	4541      	cmp	r1, r8
9001d2fc:	f6ff af71 	blt.w	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001d300:	f11c 0801 	adds.w	r8, ip, #1
9001d304:	f53f af6d 	bmi.w	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001d308:	45c6      	cmp	lr, r8
9001d30a:	f6ff af6a 	blt.w	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001d30e:	b209      	sxth	r1, r1
9001d310:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001d314:	fa0f f38e 	sxth.w	r3, lr
9001d318:	9100      	str	r1, [sp, #0]
9001d31a:	4639      	mov	r1, r7
9001d31c:	9301      	str	r3, [sp, #4]
9001d31e:	4633      	mov	r3, r6
9001d320:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001d324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d326:	9819      	ldr	r0, [sp, #100]	; 0x64
9001d328:	f7ff fc7b 	bl	9001cc22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001d32c:	e759      	b.n	9001d1e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001d32e:	bf00      	nop
9001d330:	fffff800 	.word	0xfffff800
9001d334:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001d336:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001d33a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001d33c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001d340:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001d342:	1427      	asrs	r7, r4, #16
9001d344:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001d346:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d34a:	142b      	asrs	r3, r5, #16
9001d34c:	fb01 7303 	mla	r3, r1, r3, r7
9001d350:	18e7      	adds	r7, r4, r3
9001d352:	5ce3      	ldrb	r3, [r4, r3]
9001d354:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001d358:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001d35c:	2a00      	cmp	r2, #0
9001d35e:	f000 8127 	beq.w	9001d5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001d362:	f897 e001 	ldrb.w	lr, [r7, #1]
9001d366:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001d36a:	940d      	str	r4, [sp, #52]	; 0x34
9001d36c:	0e24      	lsrs	r4, r4, #24
9001d36e:	9414      	str	r4, [sp, #80]	; 0x50
9001d370:	b170      	cbz	r0, 9001d390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001d372:	eb07 0e01 	add.w	lr, r7, r1
9001d376:	5c79      	ldrb	r1, [r7, r1]
9001d378:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001d37c:	9109      	str	r1, [sp, #36]	; 0x24
9001d37e:	0e09      	lsrs	r1, r1, #24
9001d380:	9111      	str	r1, [sp, #68]	; 0x44
9001d382:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001d386:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001d38a:	910e      	str	r1, [sp, #56]	; 0x38
9001d38c:	0e09      	lsrs	r1, r1, #24
9001d38e:	9115      	str	r1, [sp, #84]	; 0x54
9001d390:	b292      	uxth	r2, r2
9001d392:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001d394:	b280      	uxth	r0, r0
9001d396:	fb02 f800 	mul.w	r8, r2, r0
9001d39a:	0112      	lsls	r2, r2, #4
9001d39c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001d3a0:	eba2 0e08 	sub.w	lr, r2, r8
9001d3a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001d3a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d3aa:	b280      	uxth	r0, r0
9001d3ac:	fa1f fe8e 	uxth.w	lr, lr
9001d3b0:	1a09      	subs	r1, r1, r0
9001d3b2:	fb0e f202 	mul.w	r2, lr, r2
9001d3b6:	b289      	uxth	r1, r1
9001d3b8:	fb01 220c 	mla	r2, r1, ip, r2
9001d3bc:	fb00 2204 	mla	r2, r0, r4, r2
9001d3c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001d3c2:	fb08 2204 	mla	r2, r8, r4, r2
9001d3c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001d3ca:	2a00      	cmp	r2, #0
9001d3cc:	f000 80e5 	beq.w	9001d59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001d3d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001d3d4:	d019      	beq.n	9001d40a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001d3d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001d3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001d3de:	fb0c fa0a 	mul.w	sl, ip, sl
9001d3e2:	fb0c fc03 	mul.w	ip, ip, r3
9001d3e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001d3ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001d3ee:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001d3f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001d3f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001d3fa:	4453      	add	r3, sl
9001d3fc:	0a3f      	lsrs	r7, r7, #8
9001d3fe:	0a1b      	lsrs	r3, r3, #8
9001d400:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001d404:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001d408:	433b      	orrs	r3, r7
9001d40a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d40c:	2cff      	cmp	r4, #255	; 0xff
9001d40e:	d020      	beq.n	9001d452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001d410:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d412:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001d416:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d418:	4367      	muls	r7, r4
9001d41a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d41c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001d420:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d424:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d426:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001d42a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d42e:	fb04 fa0a 	mul.w	sl, r4, sl
9001d432:	44bc      	add	ip, r7
9001d434:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001d438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d43c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001d440:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d444:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d448:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d44c:	ea4c 040a 	orr.w	r4, ip, sl
9001d450:	940d      	str	r4, [sp, #52]	; 0x34
9001d452:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001d454:	2cff      	cmp	r4, #255	; 0xff
9001d456:	d020      	beq.n	9001d49a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001d458:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001d45a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001d45e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001d460:	4367      	muls	r7, r4
9001d462:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001d464:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001d468:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d46c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001d46e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001d472:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d476:	fb04 fa0a 	mul.w	sl, r4, sl
9001d47a:	44bc      	add	ip, r7
9001d47c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001d480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d484:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001d488:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d48c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d490:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d494:	ea4c 040a 	orr.w	r4, ip, sl
9001d498:	9409      	str	r4, [sp, #36]	; 0x24
9001d49a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001d49c:	2cff      	cmp	r4, #255	; 0xff
9001d49e:	d020      	beq.n	9001d4e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001d4a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001d4a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001d4a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001d4a8:	4367      	muls	r7, r4
9001d4aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001d4ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001d4b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001d4b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001d4b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001d4ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d4be:	fb04 fa0a 	mul.w	sl, r4, sl
9001d4c2:	44bc      	add	ip, r7
9001d4c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001d4c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d4cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001d4d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001d4d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d4d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d4dc:	ea4c 040a 	orr.w	r4, ip, sl
9001d4e0:	940e      	str	r4, [sp, #56]	; 0x38
9001d4e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d4e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001d4e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001d4ec:	43d2      	mvns	r2, r2
9001d4ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001d4f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001d4f4:	b2d2      	uxtb	r2, r2
9001d4f6:	fb0e f707 	mul.w	r7, lr, r7
9001d4fa:	fb01 770c 	mla	r7, r1, ip, r7
9001d4fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d502:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001d504:	fb00 770c 	mla	r7, r0, ip, r7
9001d508:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d50c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d50e:	fb08 770c 	mla	r7, r8, ip, r7
9001d512:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001d516:	fb0e fe0c 	mul.w	lr, lr, ip
9001d51a:	0a3f      	lsrs	r7, r7, #8
9001d51c:	fb01 e303 	mla	r3, r1, r3, lr
9001d520:	9909      	ldr	r1, [sp, #36]	; 0x24
9001d522:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001d526:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001d52a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001d52c:	fb00 330a 	mla	r3, r0, sl, r3
9001d530:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001d534:	fb08 3c0c 	mla	ip, r8, ip, r3
9001d538:	f8b9 3000 	ldrh.w	r3, [r9]
9001d53c:	1218      	asrs	r0, r3, #8
9001d53e:	10d9      	asrs	r1, r3, #3
9001d540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d544:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001d548:	00db      	lsls	r3, r3, #3
9001d54a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001d54e:	4350      	muls	r0, r2
9001d550:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001d554:	b2db      	uxtb	r3, r3
9001d556:	4351      	muls	r1, r2
9001d558:	ea47 070c 	orr.w	r7, r7, ip
9001d55c:	4353      	muls	r3, r2
9001d55e:	1c42      	adds	r2, r0, #1
9001d560:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001d564:	0c3a      	lsrs	r2, r7, #16
9001d566:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001d56a:	4a18      	ldr	r2, [pc, #96]	; (9001d5cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001d56c:	b2c0      	uxtb	r0, r0
9001d56e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001d572:	1c4a      	adds	r2, r1, #1
9001d574:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001d578:	0a3a      	lsrs	r2, r7, #8
9001d57a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001d57e:	00c9      	lsls	r1, r1, #3
9001d580:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001d584:	4301      	orrs	r1, r0
9001d586:	1c58      	adds	r0, r3, #1
9001d588:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001d58c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001d590:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001d594:	4308      	orrs	r0, r1
9001d596:	f8a9 0000 	strh.w	r0, [r9]
9001d59a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001d59c:	f109 0902 	add.w	r9, r9, #2
9001d5a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001d5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001d5a6:	441a      	add	r2, r3
9001d5a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d5aa:	9225      	str	r2, [sp, #148]	; 0x94
9001d5ac:	441d      	add	r5, r3
9001d5ae:	e64c      	b.n	9001d24a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001d5b0:	2800      	cmp	r0, #0
9001d5b2:	f43f aeed 	beq.w	9001d390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001d5b6:	5c79      	ldrb	r1, [r7, r1]
9001d5b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001d5bc:	9109      	str	r1, [sp, #36]	; 0x24
9001d5be:	0e09      	lsrs	r1, r1, #24
9001d5c0:	9111      	str	r1, [sp, #68]	; 0x44
9001d5c2:	e6e5      	b.n	9001d390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001d5c4:	b01b      	add	sp, #108	; 0x6c
9001d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d5ca:	bf00      	nop
9001d5cc:	fffff800 	.word	0xfffff800

9001d5d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d5d4:	b085      	sub	sp, #20
9001d5d6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001d5da:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001d5de:	2800      	cmp	r0, #0
9001d5e0:	9103      	str	r1, [sp, #12]
9001d5e2:	fb00 7406 	mla	r4, r0, r6, r7
9001d5e6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001d5ea:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001d5ee:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001d5f2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001d5f6:	eb03 0904 	add.w	r9, r3, r4
9001d5fa:	9501      	str	r5, [sp, #4]
9001d5fc:	f2c0 8150 	blt.w	9001d8a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001d600:	4583      	cmp	fp, r0
9001d602:	f340 814d 	ble.w	9001d8a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001d606:	2f00      	cmp	r7, #0
9001d608:	f2c0 8146 	blt.w	9001d898 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001d60c:	42be      	cmp	r6, r7
9001d60e:	f340 8143 	ble.w	9001d898 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001d612:	f813 c004 	ldrb.w	ip, [r3, r4]
9001d616:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001d61a:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001d61e:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001d622:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001d626:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d62a:	4355      	muls	r5, r2
9001d62c:	fb0c f203 	mul.w	r2, ip, r3
9001d630:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001d634:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001d638:	441d      	add	r5, r3
9001d63a:	f102 0320 	add.w	r3, r2, #32
9001d63e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d642:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001d646:	0a1b      	lsrs	r3, r3, #8
9001d648:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d64c:	431c      	orrs	r4, r3
9001d64e:	1c7b      	adds	r3, r7, #1
9001d650:	f100 812b 	bmi.w	9001d8aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001d654:	429e      	cmp	r6, r3
9001d656:	f340 8128 	ble.w	9001d8aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001d65a:	2900      	cmp	r1, #0
9001d65c:	f000 8128 	beq.w	9001d8b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001d660:	9a01      	ldr	r2, [sp, #4]
9001d662:	f899 3001 	ldrb.w	r3, [r9, #1]
9001d666:	8855      	ldrh	r5, [r2, #2]
9001d668:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001d66c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001d670:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d674:	fb08 f802 	mul.w	r8, r8, r2
9001d678:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001d67c:	435d      	muls	r5, r3
9001d67e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001d682:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001d686:	44d0      	add	r8, sl
9001d688:	f105 0a20 	add.w	sl, r5, #32
9001d68c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001d690:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001d694:	0a2d      	lsrs	r5, r5, #8
9001d696:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d69a:	432a      	orrs	r2, r5
9001d69c:	3001      	adds	r0, #1
9001d69e:	f100 810d 	bmi.w	9001d8bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001d6a2:	4583      	cmp	fp, r0
9001d6a4:	f340 810a 	ble.w	9001d8bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001d6a8:	f1be 0f00 	cmp.w	lr, #0
9001d6ac:	f000 810b 	beq.w	9001d8c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001d6b0:	2f00      	cmp	r7, #0
9001d6b2:	f2c0 8100 	blt.w	9001d8b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001d6b6:	42be      	cmp	r6, r7
9001d6b8:	f340 80fd 	ble.w	9001d8b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001d6bc:	9801      	ldr	r0, [sp, #4]
9001d6be:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001d6c2:	f819 5006 	ldrb.w	r5, [r9, r6]
9001d6c6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001d6ca:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001d6ce:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001d6d2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001d6d6:	fb0a fa00 	mul.w	sl, sl, r0
9001d6da:	fb05 f808 	mul.w	r8, r5, r8
9001d6de:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001d6e2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001d6e6:	4482      	add	sl, r0
9001d6e8:	f108 0020 	add.w	r0, r8, #32
9001d6ec:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001d6f0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001d6f4:	0a00      	lsrs	r0, r0, #8
9001d6f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d6fa:	ea4b 0b00 	orr.w	fp, fp, r0
9001d6fe:	3701      	adds	r7, #1
9001d700:	f100 80e6 	bmi.w	9001d8d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001d704:	42be      	cmp	r6, r7
9001d706:	f340 80e3 	ble.w	9001d8d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001d70a:	2900      	cmp	r1, #0
9001d70c:	f000 80e3 	beq.w	9001d8d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001d710:	3601      	adds	r6, #1
9001d712:	9801      	ldr	r0, [sp, #4]
9001d714:	f819 7006 	ldrb.w	r7, [r9, r6]
9001d718:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001d71c:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001d720:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001d724:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d728:	fb09 f906 	mul.w	r9, r9, r6
9001d72c:	fb07 f800 	mul.w	r8, r7, r0
9001d730:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001d734:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001d738:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001d73c:	44d1      	add	r9, sl
9001d73e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001d742:	f108 0020 	add.w	r0, r8, #32
9001d746:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001d74a:	0a00      	lsrs	r0, r0, #8
9001d74c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d750:	4330      	orrs	r0, r6
9001d752:	b28e      	uxth	r6, r1
9001d754:	fa1f f98e 	uxth.w	r9, lr
9001d758:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001d75c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001d760:	fb06 f809 	mul.w	r8, r6, r9
9001d764:	0136      	lsls	r6, r6, #4
9001d766:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d76a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001d76e:	9601      	str	r6, [sp, #4]
9001d770:	ea4a 0404 	orr.w	r4, sl, r4
9001d774:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001d778:	fa1f f689 	uxth.w	r6, r9
9001d77c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d780:	fb11 f90e 	smulbb	r9, r1, lr
9001d784:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d788:	9602      	str	r6, [sp, #8]
9001d78a:	4626      	mov	r6, r4
9001d78c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001d790:	f1ce 0410 	rsb	r4, lr, #16
9001d794:	ea4a 0202 	orr.w	r2, sl, r2
9001d798:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001d79c:	1a64      	subs	r4, r4, r1
9001d79e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001d7a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d7a6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001d7aa:	434a      	muls	r2, r1
9001d7ac:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001d7b0:	ea4a 0000 	orr.w	r0, sl, r0
9001d7b4:	9903      	ldr	r1, [sp, #12]
9001d7b6:	fb04 2406 	mla	r4, r4, r6, r2
9001d7ba:	9e02      	ldr	r6, [sp, #8]
9001d7bc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001d7c0:	fb09 4200 	mla	r2, r9, r0, r4
9001d7c4:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001d7c8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001d7cc:	8808      	ldrh	r0, [r1, #0]
9001d7ce:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001d7d2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001d7d6:	ea44 0b0b 	orr.w	fp, r4, fp
9001d7da:	9c01      	ldr	r4, [sp, #4]
9001d7dc:	b289      	uxth	r1, r1
9001d7de:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001d7e2:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001d7e6:	1ba4      	subs	r4, r4, r6
9001d7e8:	9e01      	ldr	r6, [sp, #4]
9001d7ea:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001d7ee:	eba6 0608 	sub.w	r6, r6, r8
9001d7f2:	b2a4      	uxth	r4, r4
9001d7f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001d7f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d7fc:	b2b6      	uxth	r6, r6
9001d7fe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001d802:	4373      	muls	r3, r6
9001d804:	ea42 0e0e 	orr.w	lr, r2, lr
9001d808:	fb0c 3304 	mla	r3, ip, r4, r3
9001d80c:	9c02      	ldr	r4, [sp, #8]
9001d80e:	fa1f f28e 	uxth.w	r2, lr
9001d812:	fb04 3505 	mla	r5, r4, r5, r3
9001d816:	10d4      	asrs	r4, r2, #3
9001d818:	fb08 5707 	mla	r7, r8, r7, r5
9001d81c:	1215      	asrs	r5, r2, #8
9001d81e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001d822:	00d2      	lsls	r2, r2, #3
9001d824:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d828:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d82c:	b2d2      	uxtb	r2, r2
9001d82e:	434f      	muls	r7, r1
9001d830:	1c7b      	adds	r3, r7, #1
9001d832:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001d836:	1203      	asrs	r3, r0, #8
9001d838:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001d83c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001d840:	b2ff      	uxtb	r7, r7
9001d842:	fb13 f307 	smulbb	r3, r3, r7
9001d846:	fb05 3501 	mla	r5, r5, r1, r3
9001d84a:	10c3      	asrs	r3, r0, #3
9001d84c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001d850:	b2ad      	uxth	r5, r5
9001d852:	fb13 f307 	smulbb	r3, r3, r7
9001d856:	fb04 3401 	mla	r4, r4, r1, r3
9001d85a:	00c3      	lsls	r3, r0, #3
9001d85c:	b2db      	uxtb	r3, r3
9001d85e:	b2a4      	uxth	r4, r4
9001d860:	fb13 f307 	smulbb	r3, r3, r7
9001d864:	fb02 3101 	mla	r1, r2, r1, r3
9001d868:	1c6b      	adds	r3, r5, #1
9001d86a:	1c62      	adds	r2, r4, #1
9001d86c:	b289      	uxth	r1, r1
9001d86e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d872:	1c4b      	adds	r3, r1, #1
9001d874:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001d878:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d87c:	9a03      	ldr	r2, [sp, #12]
9001d87e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d882:	0964      	lsrs	r4, r4, #5
9001d884:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d888:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001d88c:	432b      	orrs	r3, r5
9001d88e:	4323      	orrs	r3, r4
9001d890:	8013      	strh	r3, [r2, #0]
9001d892:	b005      	add	sp, #20
9001d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d898:	f04f 0c00 	mov.w	ip, #0
9001d89c:	4664      	mov	r4, ip
9001d89e:	e6d6      	b.n	9001d64e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001d8a0:	2300      	movs	r3, #0
9001d8a2:	469c      	mov	ip, r3
9001d8a4:	461a      	mov	r2, r3
9001d8a6:	461c      	mov	r4, r3
9001d8a8:	e6f8      	b.n	9001d69c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d8aa:	2300      	movs	r3, #0
9001d8ac:	461a      	mov	r2, r3
9001d8ae:	e6f5      	b.n	9001d69c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d8b0:	460b      	mov	r3, r1
9001d8b2:	460a      	mov	r2, r1
9001d8b4:	e6f2      	b.n	9001d69c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d8b6:	2500      	movs	r5, #0
9001d8b8:	46ab      	mov	fp, r5
9001d8ba:	e720      	b.n	9001d6fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001d8bc:	2700      	movs	r7, #0
9001d8be:	463d      	mov	r5, r7
9001d8c0:	4638      	mov	r0, r7
9001d8c2:	46bb      	mov	fp, r7
9001d8c4:	e745      	b.n	9001d752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d8c6:	4677      	mov	r7, lr
9001d8c8:	4675      	mov	r5, lr
9001d8ca:	4670      	mov	r0, lr
9001d8cc:	46f3      	mov	fp, lr
9001d8ce:	e740      	b.n	9001d752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d8d0:	2700      	movs	r7, #0
9001d8d2:	4638      	mov	r0, r7
9001d8d4:	e73d      	b.n	9001d752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d8d6:	460f      	mov	r7, r1
9001d8d8:	4608      	mov	r0, r1
9001d8da:	e73a      	b.n	9001d752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001d8dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d8e0:	b097      	sub	sp, #92	; 0x5c
9001d8e2:	9214      	str	r2, [sp, #80]	; 0x50
9001d8e4:	9308      	str	r3, [sp, #32]
9001d8e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001d8e8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001d8ec:	9015      	str	r0, [sp, #84]	; 0x54
9001d8ee:	9312      	str	r3, [sp, #72]	; 0x48
9001d8f0:	6850      	ldr	r0, [r2, #4]
9001d8f2:	9111      	str	r1, [sp, #68]	; 0x44
9001d8f4:	6812      	ldr	r2, [r2, #0]
9001d8f6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001d8fa:	fb00 1303 	mla	r3, r0, r3, r1
9001d8fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d902:	9309      	str	r3, [sp, #36]	; 0x24
9001d904:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d906:	681b      	ldr	r3, [r3, #0]
9001d908:	930b      	str	r3, [sp, #44]	; 0x2c
9001d90a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d90c:	685b      	ldr	r3, [r3, #4]
9001d90e:	930c      	str	r3, [sp, #48]	; 0x30
9001d910:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001d914:	930a      	str	r3, [sp, #40]	; 0x28
9001d916:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d918:	2b00      	cmp	r3, #0
9001d91a:	dc03      	bgt.n	9001d924 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d91c:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001d91e:	2b00      	cmp	r3, #0
9001d920:	f340 83cd 	ble.w	9001e0be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001d924:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d926:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d92a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d92e:	1e48      	subs	r0, r1, #1
9001d930:	1e55      	subs	r5, r2, #1
9001d932:	9b08      	ldr	r3, [sp, #32]
9001d934:	2b00      	cmp	r3, #0
9001d936:	f340 81a5 	ble.w	9001dc84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001d93a:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001d93c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d93e:	1436      	asrs	r6, r6, #16
9001d940:	ea4f 4323 	mov.w	r3, r3, asr #16
9001d944:	d406      	bmi.n	9001d954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d946:	4286      	cmp	r6, r0
9001d948:	da04      	bge.n	9001d954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d94a:	2b00      	cmp	r3, #0
9001d94c:	db02      	blt.n	9001d954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d94e:	42ab      	cmp	r3, r5
9001d950:	f2c0 8199 	blt.w	9001dc86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001d954:	3601      	adds	r6, #1
9001d956:	f100 8186 	bmi.w	9001dc66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d95a:	42b1      	cmp	r1, r6
9001d95c:	f2c0 8183 	blt.w	9001dc66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d960:	3301      	adds	r3, #1
9001d962:	f100 8180 	bmi.w	9001dc66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d966:	429a      	cmp	r2, r3
9001d968:	f2c0 817d 	blt.w	9001dc66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d96c:	9b08      	ldr	r3, [sp, #32]
9001d96e:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001d972:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001d974:	9313      	str	r3, [sp, #76]	; 0x4c
9001d976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001d978:	2b00      	cmp	r3, #0
9001d97a:	f340 81a6 	ble.w	9001dcca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001d97e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d980:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001d982:	1418      	asrs	r0, r3, #16
9001d984:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d986:	142d      	asrs	r5, r5, #16
9001d988:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001d98c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d98e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001d992:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d994:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001d998:	f100 81fa 	bmi.w	9001dd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d99c:	f102 3eff 	add.w	lr, r2, #4294967295
9001d9a0:	4575      	cmp	r5, lr
9001d9a2:	f280 81f5 	bge.w	9001dd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d9a6:	2800      	cmp	r0, #0
9001d9a8:	f2c0 81f2 	blt.w	9001dd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d9ac:	f103 3eff 	add.w	lr, r3, #4294967295
9001d9b0:	4570      	cmp	r0, lr
9001d9b2:	f280 81ed 	bge.w	9001dd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d9b6:	b212      	sxth	r2, r2
9001d9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d9ba:	fa1f fe81 	uxth.w	lr, r1
9001d9be:	fb00 5002 	mla	r0, r0, r2, r5
9001d9c2:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001d9c6:	eb03 0a00 	add.w	sl, r3, r0
9001d9ca:	f813 9000 	ldrb.w	r9, [r3, r0]
9001d9ce:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001d9d2:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001d9d6:	b29b      	uxth	r3, r3
9001d9d8:	f1bc 0f00 	cmp.w	ip, #0
9001d9dc:	f000 81bb 	beq.w	9001dd56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001d9e0:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001d9e4:	eb0a 0b02 	add.w	fp, sl, r2
9001d9e8:	fa1f fa8c 	uxth.w	sl, ip
9001d9ec:	940d      	str	r4, [sp, #52]	; 0x34
9001d9ee:	fb0a fe0e 	mul.w	lr, sl, lr
9001d9f2:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001d9f6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001d9fa:	eba5 050e 	sub.w	r5, r5, lr
9001d9fe:	940e      	str	r4, [sp, #56]	; 0x38
9001da00:	fa1f fa8a 	uxth.w	sl, sl
9001da04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001da06:	b2ad      	uxth	r5, r5
9001da08:	eba3 030a 	sub.w	r3, r3, sl
9001da0c:	fb08 f505 	mul.w	r5, r8, r5
9001da10:	b29b      	uxth	r3, r3
9001da12:	fb09 5303 	mla	r3, r9, r3, r5
9001da16:	fb0a 3304 	mla	r3, sl, r4, r3
9001da1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001da1c:	fb0e 3304 	mla	r3, lr, r4, r3
9001da20:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001da24:	2b00      	cmp	r3, #0
9001da26:	f000 8111 	beq.w	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001da2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001da2c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001da30:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001da34:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001da38:	f000 8192 	beq.w	9001dd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001da3c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001da40:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001da44:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001da48:	fb0a fe0e 	mul.w	lr, sl, lr
9001da4c:	fb09 f000 	mul.w	r0, r9, r0
9001da50:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001da54:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001da58:	f100 0b20 	add.w	fp, r0, #32
9001da5c:	44ce      	add	lr, r9
9001da5e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001da62:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001da66:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001da6a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001da6e:	ea4e 0909 	orr.w	r9, lr, r9
9001da72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001da76:	8868      	ldrh	r0, [r5, #2]
9001da78:	d019      	beq.n	9001daae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001da7a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001da7e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001da82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001da86:	fb0a fe0e 	mul.w	lr, sl, lr
9001da8a:	fb08 f800 	mul.w	r8, r8, r0
9001da8e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001da92:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001da96:	f108 0b20 	add.w	fp, r8, #32
9001da9a:	4486      	add	lr, r0
9001da9c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001daa0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001daa4:	0a00      	lsrs	r0, r0, #8
9001daa6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001daaa:	ea4e 0000 	orr.w	r0, lr, r0
9001daae:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001dab2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001dab6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001daba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001dabe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001dac2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001dac6:	ea4e 0909 	orr.w	r9, lr, r9
9001daca:	ea4a 0000 	orr.w	r0, sl, r0
9001dace:	f1bc 0f00 	cmp.w	ip, #0
9001dad2:	f000 8147 	beq.w	9001dd64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001dad6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001dada:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001dadc:	3a01      	subs	r2, #1
9001dade:	2cff      	cmp	r4, #255	; 0xff
9001dae0:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001dae4:	f102 0202 	add.w	r2, r2, #2
9001dae8:	eb05 0e02 	add.w	lr, r5, r2
9001daec:	5aaa      	ldrh	r2, [r5, r2]
9001daee:	d018      	beq.n	9001db22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001daf0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001daf4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001daf8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001dafc:	fb04 fa02 	mul.w	sl, r4, r2
9001db00:	fb08 f805 	mul.w	r8, r8, r5
9001db04:	f10a 0520 	add.w	r5, sl, #32
9001db08:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001db0c:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001db10:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001db14:	4442      	add	r2, r8
9001db16:	0a2d      	lsrs	r5, r5, #8
9001db18:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001db1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001db20:	432a      	orrs	r2, r5
9001db22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001db24:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001db28:	2cff      	cmp	r4, #255	; 0xff
9001db2a:	d01a      	beq.n	9001db62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001db2c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001db30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001db34:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001db38:	fb04 fa05 	mul.w	sl, r4, r5
9001db3c:	fb08 f80e 	mul.w	r8, r8, lr
9001db40:	f10a 0e20 	add.w	lr, sl, #32
9001db44:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001db48:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001db4c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001db50:	4445      	add	r5, r8
9001db52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001db56:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001db5a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001db5e:	ea45 050e 	orr.w	r5, r5, lr
9001db62:	fb1c fe01 	smulbb	lr, ip, r1
9001db66:	f1cc 0810 	rsb	r8, ip, #16
9001db6a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001db6e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001db72:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001db76:	eba8 0801 	sub.w	r8, r8, r1
9001db7a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001db7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001db82:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001db86:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001db8a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001db8e:	ea4a 0202 	orr.w	r2, sl, r2
9001db92:	4341      	muls	r1, r0
9001db94:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001db98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001db9c:	fb09 1108 	mla	r1, r9, r8, r1
9001dba0:	ea4b 0505 	orr.w	r5, fp, r5
9001dba4:	fb0c 1102 	mla	r1, ip, r2, r1
9001dba8:	fb0e 1e05 	mla	lr, lr, r5, r1
9001dbac:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001dbb0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001dbb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dbb8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001dbbc:	ea42 0e0e 	orr.w	lr, r2, lr
9001dbc0:	fa1f f28e 	uxth.w	r2, lr
9001dbc4:	2bff      	cmp	r3, #255	; 0xff
9001dbc6:	d103      	bne.n	9001dbd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001dbc8:	9912      	ldr	r1, [sp, #72]	; 0x48
9001dbca:	29ff      	cmp	r1, #255	; 0xff
9001dbcc:	f000 80de 	beq.w	9001dd8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001dbd0:	990a      	ldr	r1, [sp, #40]	; 0x28
9001dbd2:	1215      	asrs	r5, r2, #8
9001dbd4:	8838      	ldrh	r0, [r7, #0]
9001dbd6:	434b      	muls	r3, r1
9001dbd8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001dbdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dbde:	f103 0c01 	add.w	ip, r3, #1
9001dbe2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001dbe6:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001dbea:	fa5f fc83 	uxtb.w	ip, r3
9001dbee:	1203      	asrs	r3, r0, #8
9001dbf0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001dbf4:	fb13 f30c 	smulbb	r3, r3, ip
9001dbf8:	fb05 3501 	mla	r5, r5, r1, r3
9001dbfc:	10c3      	asrs	r3, r0, #3
9001dbfe:	10d1      	asrs	r1, r2, #3
9001dc00:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001dc04:	00d2      	lsls	r2, r2, #3
9001dc06:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001dc0a:	b2ad      	uxth	r5, r5
9001dc0c:	fb13 f30c 	smulbb	r3, r3, ip
9001dc10:	b2d2      	uxtb	r2, r2
9001dc12:	fb01 3104 	mla	r1, r1, r4, r3
9001dc16:	00c3      	lsls	r3, r0, #3
9001dc18:	b2db      	uxtb	r3, r3
9001dc1a:	b289      	uxth	r1, r1
9001dc1c:	fb13 f30c 	smulbb	r3, r3, ip
9001dc20:	fb02 3304 	mla	r3, r2, r4, r3
9001dc24:	b29a      	uxth	r2, r3
9001dc26:	1c6b      	adds	r3, r5, #1
9001dc28:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001dc2c:	1c53      	adds	r3, r2, #1
9001dc2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001dc32:	1c4a      	adds	r2, r1, #1
9001dc34:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001dc38:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001dc3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001dc40:	0949      	lsrs	r1, r1, #5
9001dc42:	432b      	orrs	r3, r5
9001dc44:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001dc48:	430b      	orrs	r3, r1
9001dc4a:	803b      	strh	r3, [r7, #0]
9001dc4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001dc4e:	3702      	adds	r7, #2
9001dc50:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001dc52:	4413      	add	r3, r2
9001dc54:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001dc56:	9321      	str	r3, [sp, #132]	; 0x84
9001dc58:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dc5a:	441a      	add	r2, r3
9001dc5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001dc5e:	3b01      	subs	r3, #1
9001dc60:	9222      	str	r2, [sp, #136]	; 0x88
9001dc62:	9313      	str	r3, [sp, #76]	; 0x4c
9001dc64:	e687      	b.n	9001d976 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001dc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001dc68:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001dc6a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001dc6c:	4433      	add	r3, r6
9001dc6e:	9321      	str	r3, [sp, #132]	; 0x84
9001dc70:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dc72:	441c      	add	r4, r3
9001dc74:	9b08      	ldr	r3, [sp, #32]
9001dc76:	3b01      	subs	r3, #1
9001dc78:	9422      	str	r4, [sp, #136]	; 0x88
9001dc7a:	9308      	str	r3, [sp, #32]
9001dc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dc7e:	3302      	adds	r3, #2
9001dc80:	9309      	str	r3, [sp, #36]	; 0x24
9001dc82:	e656      	b.n	9001d932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001dc84:	d028      	beq.n	9001dcd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001dc86:	9b08      	ldr	r3, [sp, #32]
9001dc88:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001dc8a:	3b01      	subs	r3, #1
9001dc8c:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001dc8e:	fb00 5003 	mla	r0, r0, r3, r5
9001dc92:	1400      	asrs	r0, r0, #16
9001dc94:	f53f ae6a 	bmi.w	9001d96c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001dc98:	3901      	subs	r1, #1
9001dc9a:	4288      	cmp	r0, r1
9001dc9c:	f6bf ae66 	bge.w	9001d96c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001dca0:	9924      	ldr	r1, [sp, #144]	; 0x90
9001dca2:	9822      	ldr	r0, [sp, #136]	; 0x88
9001dca4:	fb01 0303 	mla	r3, r1, r3, r0
9001dca8:	141b      	asrs	r3, r3, #16
9001dcaa:	f53f ae5f 	bmi.w	9001d96c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001dcae:	3a01      	subs	r2, #1
9001dcb0:	4293      	cmp	r3, r2
9001dcb2:	f6bf ae5b 	bge.w	9001d96c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001dcb6:	9b08      	ldr	r3, [sp, #32]
9001dcb8:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001dcbc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001dcc0:	9313      	str	r3, [sp, #76]	; 0x4c
9001dcc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001dcc4:	2b00      	cmp	r3, #0
9001dcc6:	f300 8082 	bgt.w	9001ddce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001dcca:	9b08      	ldr	r3, [sp, #32]
9001dccc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001dcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dcd2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001dcd6:	9309      	str	r3, [sp, #36]	; 0x24
9001dcd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001dcda:	2b00      	cmp	r3, #0
9001dcdc:	f340 81ef 	ble.w	9001e0be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001dce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001dce6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dcea:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dcee:	eef0 6a62 	vmov.f32	s13, s5
9001dcf2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001dcf6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001dcfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dcfe:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001dd02:	eef0 6a43 	vmov.f32	s13, s6
9001dd06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dd0a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001dd0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001dd12:	ee61 7a27 	vmul.f32	s15, s2, s15
9001dd16:	ee77 2a62 	vsub.f32	s5, s14, s5
9001dd1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001dd1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001dd22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001dd26:	ee12 2a90 	vmov	r2, s5
9001dd2a:	eef0 2a47 	vmov.f32	s5, s14
9001dd2e:	fb92 f3f3 	sdiv	r3, r2, r3
9001dd32:	ee13 2a10 	vmov	r2, s6
9001dd36:	9323      	str	r3, [sp, #140]	; 0x8c
9001dd38:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001dd3a:	eeb0 3a67 	vmov.f32	s6, s15
9001dd3e:	fb92 f3f3 	sdiv	r3, r2, r3
9001dd42:	9324      	str	r3, [sp, #144]	; 0x90
9001dd44:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001dd46:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001dd48:	3b01      	subs	r3, #1
9001dd4a:	9311      	str	r3, [sp, #68]	; 0x44
9001dd4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001dd4e:	bf08      	it	eq
9001dd50:	4613      	moveq	r3, r2
9001dd52:	9308      	str	r3, [sp, #32]
9001dd54:	e5df      	b.n	9001d916 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001dd56:	fb08 f505 	mul.w	r5, r8, r5
9001dd5a:	fb09 5303 	mla	r3, r9, r3, r5
9001dd5e:	e65f      	b.n	9001da20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001dd60:	4681      	mov	r9, r0
9001dd62:	e686      	b.n	9001da72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001dd64:	f1c1 0210 	rsb	r2, r1, #16
9001dd68:	4341      	muls	r1, r0
9001dd6a:	fb09 1902 	mla	r9, r9, r2, r1
9001dd6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001dd72:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001dd76:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001dd7a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dd7e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001dd82:	ea42 0909 	orr.w	r9, r2, r9
9001dd86:	fa1f f289 	uxth.w	r2, r9
9001dd8a:	e71b      	b.n	9001dbc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001dd8c:	803a      	strh	r2, [r7, #0]
9001dd8e:	e75d      	b.n	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001dd90:	f115 0e01 	adds.w	lr, r5, #1
9001dd94:	f53f af5a 	bmi.w	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001dd98:	4572      	cmp	r2, lr
9001dd9a:	f6ff af57 	blt.w	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001dd9e:	f110 0e01 	adds.w	lr, r0, #1
9001dda2:	f53f af53 	bmi.w	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001dda6:	4573      	cmp	r3, lr
9001dda8:	f6ff af50 	blt.w	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ddac:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ddae:	b21b      	sxth	r3, r3
9001ddb0:	b212      	sxth	r2, r2
9001ddb2:	9502      	str	r5, [sp, #8]
9001ddb4:	9301      	str	r3, [sp, #4]
9001ddb6:	9200      	str	r2, [sp, #0]
9001ddb8:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001ddbc:	e9cd c405 	strd	ip, r4, [sp, #20]
9001ddc0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001ddc4:	4639      	mov	r1, r7
9001ddc6:	9815      	ldr	r0, [sp, #84]	; 0x54
9001ddc8:	f7ff fc02 	bl	9001d5d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001ddcc:	e73e      	b.n	9001dc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ddce:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ddd0:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001ddd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ddd6:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001ddda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001dddc:	fa1f fc82 	uxth.w	ip, r2
9001dde0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001dde4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001dde6:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001ddea:	141f      	asrs	r7, r3, #16
9001ddec:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ddee:	141b      	asrs	r3, r3, #16
9001ddf0:	fb01 3707 	mla	r7, r1, r7, r3
9001ddf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ddf6:	eb03 0a07 	add.w	sl, r3, r7
9001ddfa:	f813 9007 	ldrb.w	r9, [r3, r7]
9001ddfe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001de02:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001de06:	b29b      	uxth	r3, r3
9001de08:	2d00      	cmp	r5, #0
9001de0a:	f000 813d 	beq.w	9001e088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001de0e:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001de12:	eb0a 0b01 	add.w	fp, sl, r1
9001de16:	fa1f fa85 	uxth.w	sl, r5
9001de1a:	940f      	str	r4, [sp, #60]	; 0x3c
9001de1c:	fb0a fc0c 	mul.w	ip, sl, ip
9001de20:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001de24:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001de28:	eba0 000c 	sub.w	r0, r0, ip
9001de2c:	9410      	str	r4, [sp, #64]	; 0x40
9001de2e:	fa1f fa8a 	uxth.w	sl, sl
9001de32:	b280      	uxth	r0, r0
9001de34:	eba3 030a 	sub.w	r3, r3, sl
9001de38:	fb08 f000 	mul.w	r0, r8, r0
9001de3c:	b29b      	uxth	r3, r3
9001de3e:	fb09 0303 	mla	r3, r9, r3, r0
9001de42:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001de44:	fb0a 3300 	mla	r3, sl, r0, r3
9001de48:	fb0c 3304 	mla	r3, ip, r4, r3
9001de4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001de50:	2b00      	cmp	r3, #0
9001de52:	f000 810b 	beq.w	9001e06c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001de56:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001de58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001de5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001de5e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001de62:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001de66:	f000 8114 	beq.w	9001e092 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001de6a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001de6e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001de72:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001de76:	fb0a fc0c 	mul.w	ip, sl, ip
9001de7a:	fb09 f707 	mul.w	r7, r9, r7
9001de7e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001de82:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001de86:	f107 0b20 	add.w	fp, r7, #32
9001de8a:	44cc      	add	ip, r9
9001de8c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001de90:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001de94:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001de98:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001de9c:	ea4c 0909 	orr.w	r9, ip, r9
9001dea0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001dea4:	8847      	ldrh	r7, [r0, #2]
9001dea6:	d019      	beq.n	9001dedc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001dea8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001deac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001deb0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001deb4:	fb0a fc0c 	mul.w	ip, sl, ip
9001deb8:	fb08 f807 	mul.w	r8, r8, r7
9001debc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001dec0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001dec4:	f108 0b20 	add.w	fp, r8, #32
9001dec8:	44bc      	add	ip, r7
9001deca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001dece:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001ded2:	0a3f      	lsrs	r7, r7, #8
9001ded4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ded8:	ea4c 0707 	orr.w	r7, ip, r7
9001dedc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001dee0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001dee4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001dee8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001deec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001def0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001def4:	ea4c 0909 	orr.w	r9, ip, r9
9001def8:	ea4a 0707 	orr.w	r7, sl, r7
9001defc:	2d00      	cmp	r5, #0
9001defe:	f000 80ca 	beq.w	9001e096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001df02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001df06:	3901      	subs	r1, #1
9001df08:	0049      	lsls	r1, r1, #1
9001df0a:	3102      	adds	r1, #2
9001df0c:	eb00 0c01 	add.w	ip, r0, r1
9001df10:	5a41      	ldrh	r1, [r0, r1]
9001df12:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001df14:	28ff      	cmp	r0, #255	; 0xff
9001df16:	d019      	beq.n	9001df4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001df18:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001df1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001df1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001df22:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001df26:	fb04 fa01 	mul.w	sl, r4, r1
9001df2a:	fb08 f800 	mul.w	r8, r8, r0
9001df2e:	f10a 0020 	add.w	r0, sl, #32
9001df32:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001df36:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001df3a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001df3e:	4441      	add	r1, r8
9001df40:	0a00      	lsrs	r0, r0, #8
9001df42:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001df46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001df4a:	4301      	orrs	r1, r0
9001df4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001df4e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001df52:	2cff      	cmp	r4, #255	; 0xff
9001df54:	d01a      	beq.n	9001df8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001df56:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001df5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001df5e:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001df62:	fb04 fa00 	mul.w	sl, r4, r0
9001df66:	fb08 f80c 	mul.w	r8, r8, ip
9001df6a:	f10a 0c20 	add.w	ip, sl, #32
9001df6e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001df72:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001df76:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001df7a:	4440      	add	r0, r8
9001df7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001df80:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001df84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001df88:	ea40 000c 	orr.w	r0, r0, ip
9001df8c:	fb15 fc02 	smulbb	ip, r5, r2
9001df90:	f1c5 0810 	rsb	r8, r5, #16
9001df94:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001df98:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001df9c:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001dfa0:	eba8 0802 	sub.w	r8, r8, r2
9001dfa4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001dfa8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001dfac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001dfb0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001dfb4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001dfb8:	ea4a 0101 	orr.w	r1, sl, r1
9001dfbc:	437a      	muls	r2, r7
9001dfbe:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001dfc2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001dfc6:	fb09 2208 	mla	r2, r9, r8, r2
9001dfca:	ea4b 0000 	orr.w	r0, fp, r0
9001dfce:	fb05 2201 	mla	r2, r5, r1, r2
9001dfd2:	fb0c 2200 	mla	r2, ip, r0, r2
9001dfd6:	0d57      	lsrs	r7, r2, #21
9001dfd8:	0952      	lsrs	r2, r2, #5
9001dfda:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001dfde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001dfe2:	433a      	orrs	r2, r7
9001dfe4:	2bff      	cmp	r3, #255	; 0xff
9001dfe6:	b292      	uxth	r2, r2
9001dfe8:	d102      	bne.n	9001dff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001dfea:	9912      	ldr	r1, [sp, #72]	; 0x48
9001dfec:	29ff      	cmp	r1, #255	; 0xff
9001dfee:	d063      	beq.n	9001e0b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001dff0:	980a      	ldr	r0, [sp, #40]	; 0x28
9001dff2:	1215      	asrs	r5, r2, #8
9001dff4:	f8be 1000 	ldrh.w	r1, [lr]
9001dff8:	4343      	muls	r3, r0
9001dffa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dffc:	10cf      	asrs	r7, r1, #3
9001dffe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001e002:	1c58      	adds	r0, r3, #1
9001e004:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e008:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001e00c:	1208      	asrs	r0, r1, #8
9001e00e:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001e012:	00c9      	lsls	r1, r1, #3
9001e014:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e018:	b2db      	uxtb	r3, r3
9001e01a:	b2c9      	uxtb	r1, r1
9001e01c:	fb10 f003 	smulbb	r0, r0, r3
9001e020:	fb11 f103 	smulbb	r1, r1, r3
9001e024:	fb05 0504 	mla	r5, r5, r4, r0
9001e028:	10d0      	asrs	r0, r2, #3
9001e02a:	fb17 f703 	smulbb	r7, r7, r3
9001e02e:	00d2      	lsls	r2, r2, #3
9001e030:	b2ad      	uxth	r5, r5
9001e032:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e036:	b2d2      	uxtb	r2, r2
9001e038:	fb00 7004 	mla	r0, r0, r4, r7
9001e03c:	1c6b      	adds	r3, r5, #1
9001e03e:	fb02 1204 	mla	r2, r2, r4, r1
9001e042:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001e046:	b292      	uxth	r2, r2
9001e048:	b280      	uxth	r0, r0
9001e04a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001e04e:	1c57      	adds	r7, r2, #1
9001e050:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001e054:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001e058:	433d      	orrs	r5, r7
9001e05a:	1c47      	adds	r7, r0, #1
9001e05c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001e060:	097f      	lsrs	r7, r7, #5
9001e062:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e066:	433d      	orrs	r5, r7
9001e068:	f8ae 5000 	strh.w	r5, [lr]
9001e06c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001e06e:	f10e 0e02 	add.w	lr, lr, #2
9001e072:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001e074:	4413      	add	r3, r2
9001e076:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001e078:	9321      	str	r3, [sp, #132]	; 0x84
9001e07a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e07c:	441a      	add	r2, r3
9001e07e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001e080:	3b01      	subs	r3, #1
9001e082:	9222      	str	r2, [sp, #136]	; 0x88
9001e084:	9313      	str	r3, [sp, #76]	; 0x4c
9001e086:	e61c      	b.n	9001dcc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001e088:	fb08 f000 	mul.w	r0, r8, r0
9001e08c:	fb09 0303 	mla	r3, r9, r3, r0
9001e090:	e6dc      	b.n	9001de4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001e092:	46b9      	mov	r9, r7
9001e094:	e704      	b.n	9001dea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001e096:	f1c2 0110 	rsb	r1, r2, #16
9001e09a:	437a      	muls	r2, r7
9001e09c:	fb09 2901 	mla	r9, r9, r1, r2
9001e0a0:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001e0a4:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001e0a8:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001e0ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e0b0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e0b4:	4302      	orrs	r2, r0
9001e0b6:	e795      	b.n	9001dfe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001e0b8:	f8ae 2000 	strh.w	r2, [lr]
9001e0bc:	e7d6      	b.n	9001e06c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001e0be:	b017      	add	sp, #92	; 0x5c
9001e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e0c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e0c8:	b085      	sub	sp, #20
9001e0ca:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001e0ce:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001e0d2:	2800      	cmp	r0, #0
9001e0d4:	9103      	str	r1, [sp, #12]
9001e0d6:	fb00 7406 	mla	r4, r0, r6, r7
9001e0da:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001e0de:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001e0e2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001e0e6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001e0ea:	eb02 0904 	add.w	r9, r2, r4
9001e0ee:	9501      	str	r5, [sp, #4]
9001e0f0:	f2c0 8141 	blt.w	9001e376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001e0f4:	4583      	cmp	fp, r0
9001e0f6:	f340 813e 	ble.w	9001e376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001e0fa:	2f00      	cmp	r7, #0
9001e0fc:	f2c0 8137 	blt.w	9001e36e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001e100:	42be      	cmp	r6, r7
9001e102:	f340 8134 	ble.w	9001e36e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001e106:	f812 c004 	ldrb.w	ip, [r2, r4]
9001e10a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001e10e:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001e112:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001e116:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001e11a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e11e:	4355      	muls	r5, r2
9001e120:	fb0c f203 	mul.w	r2, ip, r3
9001e124:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001e128:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001e12c:	441d      	add	r5, r3
9001e12e:	f102 0320 	add.w	r3, r2, #32
9001e132:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e136:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001e13a:	0a1b      	lsrs	r3, r3, #8
9001e13c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e140:	431c      	orrs	r4, r3
9001e142:	1c7b      	adds	r3, r7, #1
9001e144:	f100 811c 	bmi.w	9001e380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001e148:	429e      	cmp	r6, r3
9001e14a:	f340 8119 	ble.w	9001e380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001e14e:	2900      	cmp	r1, #0
9001e150:	f000 8119 	beq.w	9001e386 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001e154:	9a01      	ldr	r2, [sp, #4]
9001e156:	f899 3001 	ldrb.w	r3, [r9, #1]
9001e15a:	8855      	ldrh	r5, [r2, #2]
9001e15c:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001e160:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001e164:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e168:	fb08 f802 	mul.w	r8, r8, r2
9001e16c:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001e170:	435d      	muls	r5, r3
9001e172:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001e176:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e17a:	44d0      	add	r8, sl
9001e17c:	f105 0a20 	add.w	sl, r5, #32
9001e180:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001e184:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001e188:	0a2d      	lsrs	r5, r5, #8
9001e18a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e18e:	432a      	orrs	r2, r5
9001e190:	3001      	adds	r0, #1
9001e192:	f100 80fe 	bmi.w	9001e392 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001e196:	4583      	cmp	fp, r0
9001e198:	f340 80fb 	ble.w	9001e392 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001e19c:	f1be 0f00 	cmp.w	lr, #0
9001e1a0:	f000 80fc 	beq.w	9001e39c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001e1a4:	2f00      	cmp	r7, #0
9001e1a6:	f2c0 80f1 	blt.w	9001e38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001e1aa:	42be      	cmp	r6, r7
9001e1ac:	f340 80ee 	ble.w	9001e38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001e1b0:	9801      	ldr	r0, [sp, #4]
9001e1b2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001e1b6:	f819 5006 	ldrb.w	r5, [r9, r6]
9001e1ba:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001e1be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001e1c2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001e1c6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001e1ca:	fb0a fa00 	mul.w	sl, sl, r0
9001e1ce:	fb05 f808 	mul.w	r8, r5, r8
9001e1d2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001e1d6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001e1da:	4482      	add	sl, r0
9001e1dc:	f108 0020 	add.w	r0, r8, #32
9001e1e0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001e1e4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001e1e8:	0a00      	lsrs	r0, r0, #8
9001e1ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e1ee:	ea4b 0b00 	orr.w	fp, fp, r0
9001e1f2:	3701      	adds	r7, #1
9001e1f4:	f100 80d7 	bmi.w	9001e3a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001e1f8:	42be      	cmp	r6, r7
9001e1fa:	f340 80d4 	ble.w	9001e3a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001e1fe:	2900      	cmp	r1, #0
9001e200:	f000 80d4 	beq.w	9001e3ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001e204:	3601      	adds	r6, #1
9001e206:	9801      	ldr	r0, [sp, #4]
9001e208:	f819 7006 	ldrb.w	r7, [r9, r6]
9001e20c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001e210:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001e214:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001e218:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e21c:	fb09 f906 	mul.w	r9, r9, r6
9001e220:	fb07 f800 	mul.w	r8, r7, r0
9001e224:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001e228:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001e22c:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001e230:	44d1      	add	r9, sl
9001e232:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001e236:	f108 0020 	add.w	r0, r8, #32
9001e23a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001e23e:	0a00      	lsrs	r0, r0, #8
9001e240:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e244:	4330      	orrs	r0, r6
9001e246:	b28e      	uxth	r6, r1
9001e248:	fa1f f98e 	uxth.w	r9, lr
9001e24c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001e250:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001e254:	fb06 f809 	mul.w	r8, r6, r9
9001e258:	0136      	lsls	r6, r6, #4
9001e25a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e25e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001e262:	9601      	str	r6, [sp, #4]
9001e264:	ea4a 0404 	orr.w	r4, sl, r4
9001e268:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001e26c:	fa1f f689 	uxth.w	r6, r9
9001e270:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e274:	fb11 f90e 	smulbb	r9, r1, lr
9001e278:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e27c:	9602      	str	r6, [sp, #8]
9001e27e:	4626      	mov	r6, r4
9001e280:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001e284:	f1ce 0410 	rsb	r4, lr, #16
9001e288:	ea4a 0202 	orr.w	r2, sl, r2
9001e28c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001e290:	1a64      	subs	r4, r4, r1
9001e292:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001e296:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e29a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001e29e:	434a      	muls	r2, r1
9001e2a0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001e2a4:	ea4a 0000 	orr.w	r0, sl, r0
9001e2a8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001e2ac:	fb04 2406 	mla	r4, r4, r6, r2
9001e2b0:	9903      	ldr	r1, [sp, #12]
9001e2b2:	fb09 4200 	mla	r2, r9, r0, r4
9001e2b6:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001e2ba:	9801      	ldr	r0, [sp, #4]
9001e2bc:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001e2c0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001e2c4:	8809      	ldrh	r1, [r1, #0]
9001e2c6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001e2ca:	ea44 0b0b 	orr.w	fp, r4, fp
9001e2ce:	9c02      	ldr	r4, [sp, #8]
9001e2d0:	1b00      	subs	r0, r0, r4
9001e2d2:	9c01      	ldr	r4, [sp, #4]
9001e2d4:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001e2d8:	eba4 0608 	sub.w	r6, r4, r8
9001e2dc:	b280      	uxth	r0, r0
9001e2de:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001e2e2:	b2b6      	uxth	r6, r6
9001e2e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001e2e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e2ec:	4373      	muls	r3, r6
9001e2ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001e2f2:	fb0c 3300 	mla	r3, ip, r0, r3
9001e2f6:	9802      	ldr	r0, [sp, #8]
9001e2f8:	ea42 0e0e 	orr.w	lr, r2, lr
9001e2fc:	fb00 3505 	mla	r5, r0, r5, r3
9001e300:	120b      	asrs	r3, r1, #8
9001e302:	10c8      	asrs	r0, r1, #3
9001e304:	fb08 5707 	mla	r7, r8, r7, r5
9001e308:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001e30c:	00c9      	lsls	r1, r1, #3
9001e30e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e312:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001e316:	fa1f f28e 	uxth.w	r2, lr
9001e31a:	b2c9      	uxtb	r1, r1
9001e31c:	b2ff      	uxtb	r7, r7
9001e31e:	437b      	muls	r3, r7
9001e320:	4378      	muls	r0, r7
9001e322:	434f      	muls	r7, r1
9001e324:	1c59      	adds	r1, r3, #1
9001e326:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001e32a:	1213      	asrs	r3, r2, #8
9001e32c:	f023 0307 	bic.w	r3, r3, #7
9001e330:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001e334:	1c41      	adds	r1, r0, #1
9001e336:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001e33a:	10d1      	asrs	r1, r2, #3
9001e33c:	021b      	lsls	r3, r3, #8
9001e33e:	f021 0103 	bic.w	r1, r1, #3
9001e342:	00d2      	lsls	r2, r2, #3
9001e344:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001e348:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001e34c:	00c9      	lsls	r1, r1, #3
9001e34e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e352:	430b      	orrs	r3, r1
9001e354:	1c79      	adds	r1, r7, #1
9001e356:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001e35a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001e35e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001e362:	431a      	orrs	r2, r3
9001e364:	9b03      	ldr	r3, [sp, #12]
9001e366:	801a      	strh	r2, [r3, #0]
9001e368:	b005      	add	sp, #20
9001e36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e36e:	f04f 0c00 	mov.w	ip, #0
9001e372:	4664      	mov	r4, ip
9001e374:	e6e5      	b.n	9001e142 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001e376:	2300      	movs	r3, #0
9001e378:	469c      	mov	ip, r3
9001e37a:	461a      	mov	r2, r3
9001e37c:	461c      	mov	r4, r3
9001e37e:	e707      	b.n	9001e190 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001e380:	2300      	movs	r3, #0
9001e382:	461a      	mov	r2, r3
9001e384:	e704      	b.n	9001e190 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001e386:	460b      	mov	r3, r1
9001e388:	460a      	mov	r2, r1
9001e38a:	e701      	b.n	9001e190 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001e38c:	2500      	movs	r5, #0
9001e38e:	46ab      	mov	fp, r5
9001e390:	e72f      	b.n	9001e1f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001e392:	2700      	movs	r7, #0
9001e394:	463d      	mov	r5, r7
9001e396:	4638      	mov	r0, r7
9001e398:	46bb      	mov	fp, r7
9001e39a:	e754      	b.n	9001e246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001e39c:	4677      	mov	r7, lr
9001e39e:	4675      	mov	r5, lr
9001e3a0:	4670      	mov	r0, lr
9001e3a2:	46f3      	mov	fp, lr
9001e3a4:	e74f      	b.n	9001e246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001e3a6:	2700      	movs	r7, #0
9001e3a8:	4638      	mov	r0, r7
9001e3aa:	e74c      	b.n	9001e246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001e3ac:	460f      	mov	r7, r1
9001e3ae:	4608      	mov	r0, r1
9001e3b0:	e749      	b.n	9001e246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001e3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e3b8:	b093      	sub	sp, #76	; 0x4c
9001e3ba:	9210      	str	r2, [sp, #64]	; 0x40
9001e3bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001e3be:	9011      	str	r0, [sp, #68]	; 0x44
9001e3c0:	910e      	str	r1, [sp, #56]	; 0x38
9001e3c2:	6850      	ldr	r0, [r2, #4]
9001e3c4:	9306      	str	r3, [sp, #24]
9001e3c6:	6812      	ldr	r2, [r2, #0]
9001e3c8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001e3cc:	fb00 1303 	mla	r3, r0, r3, r1
9001e3d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e3d4:	9307      	str	r3, [sp, #28]
9001e3d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e3d8:	681b      	ldr	r3, [r3, #0]
9001e3da:	9308      	str	r3, [sp, #32]
9001e3dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e3de:	685b      	ldr	r3, [r3, #4]
9001e3e0:	9309      	str	r3, [sp, #36]	; 0x24
9001e3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e3e4:	2b00      	cmp	r3, #0
9001e3e6:	dc03      	bgt.n	9001e3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001e3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001e3ea:	2b00      	cmp	r3, #0
9001e3ec:	f340 83b6 	ble.w	9001eb5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001e3f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e3f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e3f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e3fa:	1e48      	subs	r0, r1, #1
9001e3fc:	1e55      	subs	r5, r2, #1
9001e3fe:	9b06      	ldr	r3, [sp, #24]
9001e400:	2b00      	cmp	r3, #0
9001e402:	f340 8165 	ble.w	9001e6d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001e406:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001e408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e40a:	1436      	asrs	r6, r6, #16
9001e40c:	ea4f 4323 	mov.w	r3, r3, asr #16
9001e410:	d406      	bmi.n	9001e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e412:	4286      	cmp	r6, r0
9001e414:	da04      	bge.n	9001e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e416:	2b00      	cmp	r3, #0
9001e418:	db02      	blt.n	9001e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e41a:	42ab      	cmp	r3, r5
9001e41c:	f2c0 8159 	blt.w	9001e6d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001e420:	3601      	adds	r6, #1
9001e422:	f100 8146 	bmi.w	9001e6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001e426:	42b1      	cmp	r1, r6
9001e428:	f2c0 8143 	blt.w	9001e6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001e42c:	3301      	adds	r3, #1
9001e42e:	f100 8140 	bmi.w	9001e6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001e432:	429a      	cmp	r2, r3
9001e434:	f2c0 813d 	blt.w	9001e6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001e438:	9b06      	ldr	r3, [sp, #24]
9001e43a:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001e43e:	9f07      	ldr	r7, [sp, #28]
9001e440:	930f      	str	r3, [sp, #60]	; 0x3c
9001e442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001e444:	2b00      	cmp	r3, #0
9001e446:	f340 8166 	ble.w	9001e716 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001e44a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e44c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001e44e:	1418      	asrs	r0, r3, #16
9001e450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e452:	142d      	asrs	r5, r5, #16
9001e454:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001e458:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e45a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001e45e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e460:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001e464:	f100 81f0 	bmi.w	9001e848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e468:	f102 3eff 	add.w	lr, r2, #4294967295
9001e46c:	4575      	cmp	r5, lr
9001e46e:	f280 81eb 	bge.w	9001e848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e472:	2800      	cmp	r0, #0
9001e474:	f2c0 81e8 	blt.w	9001e848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e478:	f103 3eff 	add.w	lr, r3, #4294967295
9001e47c:	4570      	cmp	r0, lr
9001e47e:	f280 81e3 	bge.w	9001e848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e482:	b212      	sxth	r2, r2
9001e484:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e486:	fa1f fe81 	uxth.w	lr, r1
9001e48a:	fb00 5002 	mla	r0, r0, r2, r5
9001e48e:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001e492:	eb03 0a00 	add.w	sl, r3, r0
9001e496:	f813 9000 	ldrb.w	r9, [r3, r0]
9001e49a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001e49e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001e4a2:	b29b      	uxth	r3, r3
9001e4a4:	f1bc 0f00 	cmp.w	ip, #0
9001e4a8:	f000 817b 	beq.w	9001e7a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001e4ac:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001e4b0:	eb0a 0b02 	add.w	fp, sl, r2
9001e4b4:	fa1f fa8c 	uxth.w	sl, ip
9001e4b8:	940a      	str	r4, [sp, #40]	; 0x28
9001e4ba:	fb0a fe0e 	mul.w	lr, sl, lr
9001e4be:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001e4c2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001e4c6:	eba5 050e 	sub.w	r5, r5, lr
9001e4ca:	940b      	str	r4, [sp, #44]	; 0x2c
9001e4cc:	fa1f fa8a 	uxth.w	sl, sl
9001e4d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001e4d2:	b2ad      	uxth	r5, r5
9001e4d4:	eba3 030a 	sub.w	r3, r3, sl
9001e4d8:	fb08 f505 	mul.w	r5, r8, r5
9001e4dc:	b29b      	uxth	r3, r3
9001e4de:	fb09 5303 	mla	r3, r9, r3, r5
9001e4e2:	fb0a 3304 	mla	r3, sl, r4, r3
9001e4e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e4e8:	fb0e 3304 	mla	r3, lr, r4, r3
9001e4ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001e4f0:	2b00      	cmp	r3, #0
9001e4f2:	f000 80d1 	beq.w	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e4f6:	9c08      	ldr	r4, [sp, #32]
9001e4f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e4fc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001e500:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001e504:	f000 8152 	beq.w	9001e7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001e508:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001e50c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001e510:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e514:	fb0a fe0e 	mul.w	lr, sl, lr
9001e518:	fb09 f000 	mul.w	r0, r9, r0
9001e51c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001e520:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001e524:	f100 0b20 	add.w	fp, r0, #32
9001e528:	44ce      	add	lr, r9
9001e52a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001e52e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001e532:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e536:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e53a:	ea4e 0909 	orr.w	r9, lr, r9
9001e53e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001e542:	8868      	ldrh	r0, [r5, #2]
9001e544:	d019      	beq.n	9001e57a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001e546:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001e54a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001e54e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e552:	fb0a fe0e 	mul.w	lr, sl, lr
9001e556:	fb08 f800 	mul.w	r8, r8, r0
9001e55a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001e55e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001e562:	f108 0b20 	add.w	fp, r8, #32
9001e566:	4486      	add	lr, r0
9001e568:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001e56c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001e570:	0a00      	lsrs	r0, r0, #8
9001e572:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e576:	ea4e 0000 	orr.w	r0, lr, r0
9001e57a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001e57e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001e582:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001e586:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001e58a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001e58e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e592:	ea4e 0909 	orr.w	r9, lr, r9
9001e596:	ea4a 0000 	orr.w	r0, sl, r0
9001e59a:	f1bc 0f00 	cmp.w	ip, #0
9001e59e:	f000 8107 	beq.w	9001e7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001e5a2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001e5a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001e5a8:	3a01      	subs	r2, #1
9001e5aa:	2cff      	cmp	r4, #255	; 0xff
9001e5ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001e5b0:	f102 0202 	add.w	r2, r2, #2
9001e5b4:	eb05 0e02 	add.w	lr, r5, r2
9001e5b8:	5aaa      	ldrh	r2, [r5, r2]
9001e5ba:	d018      	beq.n	9001e5ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001e5bc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001e5c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e5c4:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001e5c8:	fb04 fa02 	mul.w	sl, r4, r2
9001e5cc:	fb08 f805 	mul.w	r8, r8, r5
9001e5d0:	f10a 0520 	add.w	r5, sl, #32
9001e5d4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001e5d8:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e5dc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001e5e0:	4442      	add	r2, r8
9001e5e2:	0a2d      	lsrs	r5, r5, #8
9001e5e4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001e5e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e5ec:	432a      	orrs	r2, r5
9001e5ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e5f0:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001e5f4:	2cff      	cmp	r4, #255	; 0xff
9001e5f6:	d01a      	beq.n	9001e62e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001e5f8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001e5fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e600:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001e604:	fb04 fa05 	mul.w	sl, r4, r5
9001e608:	fb08 f80e 	mul.w	r8, r8, lr
9001e60c:	f10a 0e20 	add.w	lr, sl, #32
9001e610:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001e614:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e618:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001e61c:	4445      	add	r5, r8
9001e61e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e622:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001e626:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001e62a:	ea45 050e 	orr.w	r5, r5, lr
9001e62e:	fb1c fe01 	smulbb	lr, ip, r1
9001e632:	f1cc 0810 	rsb	r8, ip, #16
9001e636:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001e63a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e63e:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001e642:	eba8 0801 	sub.w	r8, r8, r1
9001e646:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001e64a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e64e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001e652:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001e656:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001e65a:	ea4a 0202 	orr.w	r2, sl, r2
9001e65e:	4341      	muls	r1, r0
9001e660:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001e664:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001e668:	fb09 1108 	mla	r1, r9, r8, r1
9001e66c:	ea4b 0505 	orr.w	r5, fp, r5
9001e670:	fb0c 1102 	mla	r1, ip, r2, r1
9001e674:	fb0e 1e05 	mla	lr, lr, r5, r1
9001e678:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001e67c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001e680:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e684:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001e688:	ea42 0e0e 	orr.w	lr, r2, lr
9001e68c:	fa1f f28e 	uxth.w	r2, lr
9001e690:	2bff      	cmp	r3, #255	; 0xff
9001e692:	f040 80a1 	bne.w	9001e7d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001e696:	803a      	strh	r2, [r7, #0]
9001e698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e69a:	3702      	adds	r7, #2
9001e69c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001e69e:	4413      	add	r3, r2
9001e6a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001e6a2:	931d      	str	r3, [sp, #116]	; 0x74
9001e6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e6a6:	441a      	add	r2, r3
9001e6a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001e6aa:	3b01      	subs	r3, #1
9001e6ac:	921e      	str	r2, [sp, #120]	; 0x78
9001e6ae:	930f      	str	r3, [sp, #60]	; 0x3c
9001e6b0:	e6c7      	b.n	9001e442 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001e6b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e6b4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001e6b6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001e6b8:	4433      	add	r3, r6
9001e6ba:	931d      	str	r3, [sp, #116]	; 0x74
9001e6bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e6be:	441c      	add	r4, r3
9001e6c0:	9b06      	ldr	r3, [sp, #24]
9001e6c2:	3b01      	subs	r3, #1
9001e6c4:	941e      	str	r4, [sp, #120]	; 0x78
9001e6c6:	9306      	str	r3, [sp, #24]
9001e6c8:	9b07      	ldr	r3, [sp, #28]
9001e6ca:	3302      	adds	r3, #2
9001e6cc:	9307      	str	r3, [sp, #28]
9001e6ce:	e696      	b.n	9001e3fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001e6d0:	d028      	beq.n	9001e724 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001e6d2:	9b06      	ldr	r3, [sp, #24]
9001e6d4:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001e6d6:	3b01      	subs	r3, #1
9001e6d8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001e6da:	fb00 5003 	mla	r0, r0, r3, r5
9001e6de:	1400      	asrs	r0, r0, #16
9001e6e0:	f53f aeaa 	bmi.w	9001e438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001e6e4:	3901      	subs	r1, #1
9001e6e6:	4288      	cmp	r0, r1
9001e6e8:	f6bf aea6 	bge.w	9001e438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001e6ec:	9920      	ldr	r1, [sp, #128]	; 0x80
9001e6ee:	981e      	ldr	r0, [sp, #120]	; 0x78
9001e6f0:	fb01 0303 	mla	r3, r1, r3, r0
9001e6f4:	141b      	asrs	r3, r3, #16
9001e6f6:	f53f ae9f 	bmi.w	9001e438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001e6fa:	3a01      	subs	r2, #1
9001e6fc:	4293      	cmp	r3, r2
9001e6fe:	f6bf ae9b 	bge.w	9001e438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001e702:	9b06      	ldr	r3, [sp, #24]
9001e704:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001e708:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001e70c:	930f      	str	r3, [sp, #60]	; 0x3c
9001e70e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001e710:	2b00      	cmp	r3, #0
9001e712:	f300 80b6 	bgt.w	9001e882 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001e716:	9b06      	ldr	r3, [sp, #24]
9001e718:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e71c:	9b07      	ldr	r3, [sp, #28]
9001e71e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e722:	9307      	str	r3, [sp, #28]
9001e724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e726:	2b00      	cmp	r3, #0
9001e728:	f340 8218 	ble.w	9001eb5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001e72c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e730:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e732:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e736:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e73a:	eef0 6a62 	vmov.f32	s13, s5
9001e73e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e742:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e746:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e74a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001e74e:	eef0 6a43 	vmov.f32	s13, s6
9001e752:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e756:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001e75a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e75e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e762:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e766:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e76a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e76e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e772:	ee12 2a90 	vmov	r2, s5
9001e776:	eef0 2a47 	vmov.f32	s5, s14
9001e77a:	fb92 f3f3 	sdiv	r3, r2, r3
9001e77e:	ee13 2a10 	vmov	r2, s6
9001e782:	931f      	str	r3, [sp, #124]	; 0x7c
9001e784:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e786:	eeb0 3a67 	vmov.f32	s6, s15
9001e78a:	fb92 f3f3 	sdiv	r3, r2, r3
9001e78e:	9320      	str	r3, [sp, #128]	; 0x80
9001e790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e792:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e794:	3b01      	subs	r3, #1
9001e796:	930e      	str	r3, [sp, #56]	; 0x38
9001e798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e79a:	bf08      	it	eq
9001e79c:	4613      	moveq	r3, r2
9001e79e:	9306      	str	r3, [sp, #24]
9001e7a0:	e61f      	b.n	9001e3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001e7a2:	fb08 f505 	mul.w	r5, r8, r5
9001e7a6:	fb09 5303 	mla	r3, r9, r3, r5
9001e7aa:	e69f      	b.n	9001e4ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001e7ac:	4681      	mov	r9, r0
9001e7ae:	e6c6      	b.n	9001e53e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001e7b0:	f1c1 0210 	rsb	r2, r1, #16
9001e7b4:	4341      	muls	r1, r0
9001e7b6:	fb09 1902 	mla	r9, r9, r2, r1
9001e7ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001e7be:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001e7c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001e7c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e7ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001e7ce:	ea42 0909 	orr.w	r9, r2, r9
9001e7d2:	fa1f f289 	uxth.w	r2, r9
9001e7d6:	e75b      	b.n	9001e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001e7d8:	f8b7 c000 	ldrh.w	ip, [r7]
9001e7dc:	43db      	mvns	r3, r3
9001e7de:	ea4f 202c 	mov.w	r0, ip, asr #8
9001e7e2:	fa5f fe83 	uxtb.w	lr, r3
9001e7e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e7ea:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001e7ee:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001e7f2:	fb00 f00e 	mul.w	r0, r0, lr
9001e7f6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e7fa:	b2db      	uxtb	r3, r3
9001e7fc:	1c41      	adds	r1, r0, #1
9001e7fe:	fb05 f50e 	mul.w	r5, r5, lr
9001e802:	fb03 f30e 	mul.w	r3, r3, lr
9001e806:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001e80a:	1211      	asrs	r1, r2, #8
9001e80c:	f021 0107 	bic.w	r1, r1, #7
9001e810:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001e814:	48d3      	ldr	r0, [pc, #844]	; (9001eb64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001e816:	b2c9      	uxtb	r1, r1
9001e818:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001e81c:	1c69      	adds	r1, r5, #1
9001e81e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001e822:	10d1      	asrs	r1, r2, #3
9001e824:	00d2      	lsls	r2, r2, #3
9001e826:	f021 0103 	bic.w	r1, r1, #3
9001e82a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001e82e:	00c9      	lsls	r1, r1, #3
9001e830:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e834:	4301      	orrs	r1, r0
9001e836:	1c58      	adds	r0, r3, #1
9001e838:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e83c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001e840:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001e844:	430a      	orrs	r2, r1
9001e846:	e726      	b.n	9001e696 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001e848:	f115 0e01 	adds.w	lr, r5, #1
9001e84c:	f53f af24 	bmi.w	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e850:	4572      	cmp	r2, lr
9001e852:	f6ff af21 	blt.w	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e856:	f110 0e01 	adds.w	lr, r0, #1
9001e85a:	f53f af1d 	bmi.w	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e85e:	4573      	cmp	r3, lr
9001e860:	f6ff af1a 	blt.w	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e864:	b21b      	sxth	r3, r3
9001e866:	b212      	sxth	r2, r2
9001e868:	9301      	str	r3, [sp, #4]
9001e86a:	9200      	str	r2, [sp, #0]
9001e86c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001e870:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001e874:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001e878:	4639      	mov	r1, r7
9001e87a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001e87c:	f7ff fc22 	bl	9001e0c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001e880:	e70a      	b.n	9001e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e882:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e884:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e888:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e88a:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001e88e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e890:	fa1f fc82 	uxth.w	ip, r2
9001e894:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e898:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e89a:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001e89e:	141f      	asrs	r7, r3, #16
9001e8a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e8a2:	141b      	asrs	r3, r3, #16
9001e8a4:	fb01 3707 	mla	r7, r1, r7, r3
9001e8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e8aa:	eb03 0a07 	add.w	sl, r3, r7
9001e8ae:	f813 9007 	ldrb.w	r9, [r3, r7]
9001e8b2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001e8b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001e8ba:	b29b      	uxth	r3, r3
9001e8bc:	2d00      	cmp	r5, #0
9001e8be:	f000 80fe 	beq.w	9001eabe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001e8c2:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001e8c6:	eb0a 0b01 	add.w	fp, sl, r1
9001e8ca:	fa1f fa85 	uxth.w	sl, r5
9001e8ce:	940c      	str	r4, [sp, #48]	; 0x30
9001e8d0:	fb0a fc0c 	mul.w	ip, sl, ip
9001e8d4:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001e8d8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001e8dc:	eba0 000c 	sub.w	r0, r0, ip
9001e8e0:	940d      	str	r4, [sp, #52]	; 0x34
9001e8e2:	fa1f fa8a 	uxth.w	sl, sl
9001e8e6:	b280      	uxth	r0, r0
9001e8e8:	eba3 030a 	sub.w	r3, r3, sl
9001e8ec:	fb08 f000 	mul.w	r0, r8, r0
9001e8f0:	b29b      	uxth	r3, r3
9001e8f2:	fb09 0303 	mla	r3, r9, r3, r0
9001e8f6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001e8f8:	fb0a 3300 	mla	r3, sl, r0, r3
9001e8fc:	fb0c 3304 	mla	r3, ip, r4, r3
9001e900:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001e904:	2b00      	cmp	r3, #0
9001e906:	f000 80cc 	beq.w	9001eaa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001e90a:	9808      	ldr	r0, [sp, #32]
9001e90c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e910:	9c08      	ldr	r4, [sp, #32]
9001e912:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001e916:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001e91a:	f000 80d5 	beq.w	9001eac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001e91e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001e922:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001e926:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e92a:	fb0a fc0c 	mul.w	ip, sl, ip
9001e92e:	fb09 f707 	mul.w	r7, r9, r7
9001e932:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001e936:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001e93a:	f107 0b20 	add.w	fp, r7, #32
9001e93e:	44cc      	add	ip, r9
9001e940:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001e944:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001e948:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e94c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e950:	ea4c 0909 	orr.w	r9, ip, r9
9001e954:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001e958:	8847      	ldrh	r7, [r0, #2]
9001e95a:	d019      	beq.n	9001e990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001e95c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001e960:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001e964:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e968:	fb0a fc0c 	mul.w	ip, sl, ip
9001e96c:	fb08 f807 	mul.w	r8, r8, r7
9001e970:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001e974:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001e978:	f108 0b20 	add.w	fp, r8, #32
9001e97c:	44bc      	add	ip, r7
9001e97e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001e982:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001e986:	0a3f      	lsrs	r7, r7, #8
9001e988:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e98c:	ea4c 0707 	orr.w	r7, ip, r7
9001e990:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001e994:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001e998:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001e99c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001e9a0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001e9a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e9a8:	ea4c 0909 	orr.w	r9, ip, r9
9001e9ac:	ea4a 0707 	orr.w	r7, sl, r7
9001e9b0:	2d00      	cmp	r5, #0
9001e9b2:	f000 808b 	beq.w	9001eacc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001e9b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001e9ba:	3901      	subs	r1, #1
9001e9bc:	0049      	lsls	r1, r1, #1
9001e9be:	3102      	adds	r1, #2
9001e9c0:	eb00 0c01 	add.w	ip, r0, r1
9001e9c4:	5a41      	ldrh	r1, [r0, r1]
9001e9c6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001e9c8:	28ff      	cmp	r0, #255	; 0xff
9001e9ca:	d019      	beq.n	9001ea00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001e9cc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001e9d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e9d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e9d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001e9da:	fb04 fa01 	mul.w	sl, r4, r1
9001e9de:	fb08 f800 	mul.w	r8, r8, r0
9001e9e2:	f10a 0020 	add.w	r0, sl, #32
9001e9e6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001e9ea:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e9ee:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001e9f2:	4441      	add	r1, r8
9001e9f4:	0a00      	lsrs	r0, r0, #8
9001e9f6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001e9fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e9fe:	4301      	orrs	r1, r0
9001ea00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ea02:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001ea06:	2cff      	cmp	r4, #255	; 0xff
9001ea08:	d01a      	beq.n	9001ea40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001ea0a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001ea0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ea12:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001ea16:	fb04 fa00 	mul.w	sl, r4, r0
9001ea1a:	fb08 f80c 	mul.w	r8, r8, ip
9001ea1e:	f10a 0c20 	add.w	ip, sl, #32
9001ea22:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001ea26:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ea2a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001ea2e:	4440      	add	r0, r8
9001ea30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ea34:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001ea38:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001ea3c:	ea40 000c 	orr.w	r0, r0, ip
9001ea40:	fb15 fc02 	smulbb	ip, r5, r2
9001ea44:	f1c5 0810 	rsb	r8, r5, #16
9001ea48:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001ea4c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ea50:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001ea54:	eba8 0802 	sub.w	r8, r8, r2
9001ea58:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001ea5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ea60:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001ea64:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ea68:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001ea6c:	ea4a 0101 	orr.w	r1, sl, r1
9001ea70:	437a      	muls	r2, r7
9001ea72:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001ea76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ea7a:	fb09 2208 	mla	r2, r9, r8, r2
9001ea7e:	ea4b 0000 	orr.w	r0, fp, r0
9001ea82:	fb05 2201 	mla	r2, r5, r1, r2
9001ea86:	fb0c 2200 	mla	r2, ip, r0, r2
9001ea8a:	0d57      	lsrs	r7, r2, #21
9001ea8c:	0952      	lsrs	r2, r2, #5
9001ea8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ea92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ea96:	433a      	orrs	r2, r7
9001ea98:	2bff      	cmp	r3, #255	; 0xff
9001ea9a:	b292      	uxth	r2, r2
9001ea9c:	d127      	bne.n	9001eaee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001ea9e:	f8ae 2000 	strh.w	r2, [lr]
9001eaa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001eaa4:	f10e 0e02 	add.w	lr, lr, #2
9001eaa8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001eaaa:	4413      	add	r3, r2
9001eaac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001eaae:	931d      	str	r3, [sp, #116]	; 0x74
9001eab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eab2:	441a      	add	r2, r3
9001eab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001eab6:	3b01      	subs	r3, #1
9001eab8:	921e      	str	r2, [sp, #120]	; 0x78
9001eaba:	930f      	str	r3, [sp, #60]	; 0x3c
9001eabc:	e627      	b.n	9001e70e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001eabe:	fb08 f000 	mul.w	r0, r8, r0
9001eac2:	fb09 0303 	mla	r3, r9, r3, r0
9001eac6:	e71b      	b.n	9001e900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001eac8:	46b9      	mov	r9, r7
9001eaca:	e743      	b.n	9001e954 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001eacc:	f1c2 0110 	rsb	r1, r2, #16
9001ead0:	437a      	muls	r2, r7
9001ead2:	fb09 2901 	mla	r9, r9, r1, r2
9001ead6:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001eada:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001eade:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001eae2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001eae6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001eaea:	4302      	orrs	r2, r0
9001eaec:	e7d4      	b.n	9001ea98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9001eaee:	f8be 7000 	ldrh.w	r7, [lr]
9001eaf2:	43db      	mvns	r3, r3
9001eaf4:	4c1b      	ldr	r4, [pc, #108]	; (9001eb64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001eaf6:	1238      	asrs	r0, r7, #8
9001eaf8:	fa5f fc83 	uxtb.w	ip, r3
9001eafc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001eb00:	10fd      	asrs	r5, r7, #3
9001eb02:	00fb      	lsls	r3, r7, #3
9001eb04:	fb00 f00c 	mul.w	r0, r0, ip
9001eb08:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001eb0c:	b2db      	uxtb	r3, r3
9001eb0e:	fb05 f10c 	mul.w	r1, r5, ip
9001eb12:	1c45      	adds	r5, r0, #1
9001eb14:	fb03 f30c 	mul.w	r3, r3, ip
9001eb18:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001eb1c:	1215      	asrs	r5, r2, #8
9001eb1e:	f025 0507 	bic.w	r5, r5, #7
9001eb22:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001eb26:	1c4d      	adds	r5, r1, #1
9001eb28:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9001eb2c:	10d1      	asrs	r1, r2, #3
9001eb2e:	b2c0      	uxtb	r0, r0
9001eb30:	f021 0103 	bic.w	r1, r1, #3
9001eb34:	00d2      	lsls	r2, r2, #3
9001eb36:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9001eb3a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001eb3e:	00c9      	lsls	r1, r1, #3
9001eb40:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001eb44:	4308      	orrs	r0, r1
9001eb46:	1c59      	adds	r1, r3, #1
9001eb48:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001eb4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9001eb50:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9001eb54:	4318      	orrs	r0, r3
9001eb56:	f8ae 0000 	strh.w	r0, [lr]
9001eb5a:	e7a2      	b.n	9001eaa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001eb5c:	b013      	add	sp, #76	; 0x4c
9001eb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eb62:	bf00      	nop
9001eb64:	fffff800 	.word	0xfffff800

9001eb68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
9001eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001eb6c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
9001eb70:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9001eb74:	fb05 4c03 	mla	ip, r5, r3, r4
9001eb78:	2d00      	cmp	r5, #0
9001eb7a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9001eb7e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9001eb82:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9001eb86:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001eb8a:	8808      	ldrh	r0, [r1, #0]
9001eb8c:	f2c0 80a7 	blt.w	9001ecde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001eb90:	45aa      	cmp	sl, r5
9001eb92:	f340 80a4 	ble.w	9001ecde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001eb96:	2c00      	cmp	r4, #0
9001eb98:	f2c0 809f 	blt.w	9001ecda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001eb9c:	42a3      	cmp	r3, r4
9001eb9e:	f340 809c 	ble.w	9001ecda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001eba2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
9001eba6:	1c62      	adds	r2, r4, #1
9001eba8:	f100 809c 	bmi.w	9001ece4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ebac:	4293      	cmp	r3, r2
9001ebae:	f340 8099 	ble.w	9001ece4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ebb2:	f1b9 0f00 	cmp.w	r9, #0
9001ebb6:	f000 8095 	beq.w	9001ece4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ebba:	f8be c002 	ldrh.w	ip, [lr, #2]
9001ebbe:	3501      	adds	r5, #1
9001ebc0:	f100 8094 	bmi.w	9001ecec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ebc4:	45aa      	cmp	sl, r5
9001ebc6:	f340 8091 	ble.w	9001ecec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ebca:	2f00      	cmp	r7, #0
9001ebcc:	f000 808e 	beq.w	9001ecec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ebd0:	2c00      	cmp	r4, #0
9001ebd2:	f2c0 8089 	blt.w	9001ece8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001ebd6:	42a3      	cmp	r3, r4
9001ebd8:	f340 8086 	ble.w	9001ece8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001ebdc:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
9001ebe0:	3401      	adds	r4, #1
9001ebe2:	f100 8086 	bmi.w	9001ecf2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ebe6:	42a3      	cmp	r3, r4
9001ebe8:	f340 8083 	ble.w	9001ecf2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ebec:	f1b9 0f00 	cmp.w	r9, #0
9001ebf0:	d07f      	beq.n	9001ecf2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ebf2:	3301      	adds	r3, #1
9001ebf4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
9001ebf8:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001ebfc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001ec00:	fb19 fe07 	smulbb	lr, r9, r7
9001ec04:	f1c7 0210 	rsb	r2, r7, #16
9001ec08:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ec0c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001ec10:	eba2 0209 	sub.w	r2, r2, r9
9001ec14:	ea44 0808 	orr.w	r8, r4, r8
9001ec18:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001ec1c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001ec20:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001ec24:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ec28:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001ec2c:	ea44 0c0c 	orr.w	ip, r4, ip
9001ec30:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001ec34:	fb04 f40c 	mul.w	r4, r4, ip
9001ec38:	fb02 4808 	mla	r8, r2, r8, r4
9001ec3c:	041a      	lsls	r2, r3, #16
9001ec3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ec42:	b2b4      	uxth	r4, r6
9001ec44:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ec48:	43f6      	mvns	r6, r6
9001ec4a:	4313      	orrs	r3, r2
9001ec4c:	042a      	lsls	r2, r5, #16
9001ec4e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001ec52:	b2f6      	uxtb	r6, r6
9001ec54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ec58:	fb0e 8303 	mla	r3, lr, r3, r8
9001ec5c:	432a      	orrs	r2, r5
9001ec5e:	fb07 3202 	mla	r2, r7, r2, r3
9001ec62:	10c7      	asrs	r7, r0, #3
9001ec64:	0d53      	lsrs	r3, r2, #21
9001ec66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ec6a:	0952      	lsrs	r2, r2, #5
9001ec6c:	fb17 f706 	smulbb	r7, r7, r6
9001ec70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ec74:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ec78:	431a      	orrs	r2, r3
9001ec7a:	b293      	uxth	r3, r2
9001ec7c:	1202      	asrs	r2, r0, #8
9001ec7e:	121d      	asrs	r5, r3, #8
9001ec80:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001ec84:	00c0      	lsls	r0, r0, #3
9001ec86:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ec8a:	fb12 f206 	smulbb	r2, r2, r6
9001ec8e:	b2c0      	uxtb	r0, r0
9001ec90:	fb05 2504 	mla	r5, r5, r4, r2
9001ec94:	10da      	asrs	r2, r3, #3
9001ec96:	fb10 f006 	smulbb	r0, r0, r6
9001ec9a:	00db      	lsls	r3, r3, #3
9001ec9c:	b2ad      	uxth	r5, r5
9001ec9e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001eca2:	b2db      	uxtb	r3, r3
9001eca4:	fb02 7204 	mla	r2, r2, r4, r7
9001eca8:	fb03 0004 	mla	r0, r3, r4, r0
9001ecac:	1c6b      	adds	r3, r5, #1
9001ecae:	b292      	uxth	r2, r2
9001ecb0:	b280      	uxth	r0, r0
9001ecb2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ecb6:	1c43      	adds	r3, r0, #1
9001ecb8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ecbc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001ecc0:	1c50      	adds	r0, r2, #1
9001ecc2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001ecc6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ecca:	0952      	lsrs	r2, r2, #5
9001eccc:	432b      	orrs	r3, r5
9001ecce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ecd2:	4313      	orrs	r3, r2
9001ecd4:	800b      	strh	r3, [r1, #0]
9001ecd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ecda:	4680      	mov	r8, r0
9001ecdc:	e763      	b.n	9001eba6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9001ecde:	4684      	mov	ip, r0
9001ece0:	4680      	mov	r8, r0
9001ece2:	e76c      	b.n	9001ebbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001ece4:	4684      	mov	ip, r0
9001ece6:	e76a      	b.n	9001ebbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001ece8:	4605      	mov	r5, r0
9001ecea:	e779      	b.n	9001ebe0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9001ecec:	4603      	mov	r3, r0
9001ecee:	4605      	mov	r5, r0
9001ecf0:	e782      	b.n	9001ebf8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
9001ecf2:	4603      	mov	r3, r0
9001ecf4:	e780      	b.n	9001ebf8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

9001ecf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ecf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ecfa:	b093      	sub	sp, #76	; 0x4c
9001ecfc:	461d      	mov	r5, r3
9001ecfe:	9210      	str	r2, [sp, #64]	; 0x40
9001ed00:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ed02:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
9001ed06:	910a      	str	r1, [sp, #40]	; 0x28
9001ed08:	920b      	str	r2, [sp, #44]	; 0x2c
9001ed0a:	6859      	ldr	r1, [r3, #4]
9001ed0c:	681b      	ldr	r3, [r3, #0]
9001ed0e:	9011      	str	r0, [sp, #68]	; 0x44
9001ed10:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
9001ed14:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001ed18:	fb01 2707 	mla	r7, r1, r7, r2
9001ed1c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
9001ed20:	9307      	str	r3, [sp, #28]
9001ed22:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ed24:	681b      	ldr	r3, [r3, #0]
9001ed26:	9309      	str	r3, [sp, #36]	; 0x24
9001ed28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ed2a:	43db      	mvns	r3, r3
9001ed2c:	b2db      	uxtb	r3, r3
9001ed2e:	9308      	str	r3, [sp, #32]
9001ed30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ed32:	2b00      	cmp	r3, #0
9001ed34:	dc03      	bgt.n	9001ed3e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ed36:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ed38:	2b00      	cmp	r3, #0
9001ed3a:	f340 8205 	ble.w	9001f148 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ed3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ed40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ed44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ed48:	1e48      	subs	r0, r1, #1
9001ed4a:	f102 3cff 	add.w	ip, r2, #4294967295
9001ed4e:	2d00      	cmp	r5, #0
9001ed50:	f340 80da 	ble.w	9001ef08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
9001ed54:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001ed58:	ea4f 4326 	mov.w	r3, r6, asr #16
9001ed5c:	d406      	bmi.n	9001ed6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ed5e:	4586      	cmp	lr, r0
9001ed60:	da04      	bge.n	9001ed6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ed62:	2b00      	cmp	r3, #0
9001ed64:	db02      	blt.n	9001ed6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ed66:	4563      	cmp	r3, ip
9001ed68:	f2c0 80cf 	blt.w	9001ef0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ed6c:	f11e 0e01 	adds.w	lr, lr, #1
9001ed70:	f100 80c1 	bmi.w	9001eef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001ed74:	4571      	cmp	r1, lr
9001ed76:	f2c0 80be 	blt.w	9001eef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001ed7a:	3301      	adds	r3, #1
9001ed7c:	f100 80bb 	bmi.w	9001eef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001ed80:	429a      	cmp	r2, r3
9001ed82:	f2c0 80b8 	blt.w	9001eef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001ed86:	46a9      	mov	r9, r5
9001ed88:	f8dd 801c 	ldr.w	r8, [sp, #28]
9001ed8c:	f1b9 0f00 	cmp.w	r9, #0
9001ed90:	f340 80d8 	ble.w	9001ef44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
9001ed94:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ed96:	1421      	asrs	r1, r4, #16
9001ed98:	ea4f 4026 	mov.w	r0, r6, asr #16
9001ed9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001eda0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9001eda4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9001eda8:	f100 8112 	bmi.w	9001efd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001edac:	f10e 3aff 	add.w	sl, lr, #4294967295
9001edb0:	4551      	cmp	r1, sl
9001edb2:	f280 810d 	bge.w	9001efd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001edb6:	2800      	cmp	r0, #0
9001edb8:	f2c0 810a 	blt.w	9001efd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001edbc:	f103 3aff 	add.w	sl, r3, #4294967295
9001edc0:	4550      	cmp	r0, sl
9001edc2:	f280 8105 	bge.w	9001efd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001edc6:	fa0f f38e 	sxth.w	r3, lr
9001edca:	fb00 1103 	mla	r1, r0, r3, r1
9001edce:	9809      	ldr	r0, [sp, #36]	; 0x24
9001edd0:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
9001edd4:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
9001edd8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
9001eddc:	f1bc 0f00 	cmp.w	ip, #0
9001ede0:	d007      	beq.n	9001edf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
9001ede2:	005b      	lsls	r3, r3, #1
9001ede4:	eb0a 0003 	add.w	r0, sl, r3
9001ede8:	f83a 3003 	ldrh.w	r3, [sl, r3]
9001edec:	930c      	str	r3, [sp, #48]	; 0x30
9001edee:	8843      	ldrh	r3, [r0, #2]
9001edf0:	930d      	str	r3, [sp, #52]	; 0x34
9001edf2:	ea4f 400e 	mov.w	r0, lr, lsl #16
9001edf6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001edfa:	fb12 f30c 	smulbb	r3, r2, ip
9001edfe:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001ee02:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ee06:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ee0a:	10db      	asrs	r3, r3, #3
9001ee0c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ee10:	ea40 000e 	orr.w	r0, r0, lr
9001ee14:	f1cc 0e10 	rsb	lr, ip, #16
9001ee18:	ea4a 0101 	orr.w	r1, sl, r1
9001ee1c:	9f08      	ldr	r7, [sp, #32]
9001ee1e:	ebae 0e02 	sub.w	lr, lr, r2
9001ee22:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001ee26:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9001ee2a:	4351      	muls	r1, r2
9001ee2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ee2e:	fb0e 1e00 	mla	lr, lr, r0, r1
9001ee32:	990c      	ldr	r1, [sp, #48]	; 0x30
9001ee34:	0410      	lsls	r0, r2, #16
9001ee36:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ee3a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ee3e:	4310      	orrs	r0, r2
9001ee40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001ee42:	0412      	lsls	r2, r2, #16
9001ee44:	fb03 e000 	mla	r0, r3, r0, lr
9001ee48:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9001ee4c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9001ee50:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ee54:	ea42 020e 	orr.w	r2, r2, lr
9001ee58:	fb03 0302 	mla	r3, r3, r2, r0
9001ee5c:	f8b8 0000 	ldrh.w	r0, [r8]
9001ee60:	0d5a      	lsrs	r2, r3, #21
9001ee62:	095b      	lsrs	r3, r3, #5
9001ee64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ee68:	1201      	asrs	r1, r0, #8
9001ee6a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ee6e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001ee72:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ee76:	00c0      	lsls	r0, r0, #3
9001ee78:	4313      	orrs	r3, r2
9001ee7a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001ee7e:	fb11 f107 	smulbb	r1, r1, r7
9001ee82:	b2c0      	uxtb	r0, r0
9001ee84:	b29b      	uxth	r3, r3
9001ee86:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001ee8a:	fb10 f007 	smulbb	r0, r0, r7
9001ee8e:	fb1e fe07 	smulbb	lr, lr, r7
9001ee92:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ee96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ee9a:	fb0c 1c02 	mla	ip, ip, r2, r1
9001ee9e:	10d9      	asrs	r1, r3, #3
9001eea0:	00db      	lsls	r3, r3, #3
9001eea2:	fa1f fc8c 	uxth.w	ip, ip
9001eea6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001eeaa:	b2db      	uxtb	r3, r3
9001eeac:	fb01 e102 	mla	r1, r1, r2, lr
9001eeb0:	fb03 0302 	mla	r3, r3, r2, r0
9001eeb4:	b289      	uxth	r1, r1
9001eeb6:	b29a      	uxth	r2, r3
9001eeb8:	f10c 0301 	add.w	r3, ip, #1
9001eebc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001eec0:	1c53      	adds	r3, r2, #1
9001eec2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001eec6:	1c4a      	adds	r2, r1, #1
9001eec8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001eecc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eed0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001eed4:	0949      	lsrs	r1, r1, #5
9001eed6:	ea43 030c 	orr.w	r3, r3, ip
9001eeda:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001eede:	430b      	orrs	r3, r1
9001eee0:	f8a8 3000 	strh.w	r3, [r8]
9001eee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001eee6:	f108 0802 	add.w	r8, r8, #2
9001eeea:	f109 39ff 	add.w	r9, r9, #4294967295
9001eeee:	441c      	add	r4, r3
9001eef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eef2:	441e      	add	r6, r3
9001eef4:	e74a      	b.n	9001ed8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001eef6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001eef8:	3d01      	subs	r5, #1
9001eefa:	441c      	add	r4, r3
9001eefc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eefe:	441e      	add	r6, r3
9001ef00:	9b07      	ldr	r3, [sp, #28]
9001ef02:	3302      	adds	r3, #2
9001ef04:	9307      	str	r3, [sp, #28]
9001ef06:	e722      	b.n	9001ed4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001ef08:	d022      	beq.n	9001ef50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9001ef0a:	1e6b      	subs	r3, r5, #1
9001ef0c:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001ef0e:	fb00 4003 	mla	r0, r0, r3, r4
9001ef12:	1400      	asrs	r0, r0, #16
9001ef14:	f53f af37 	bmi.w	9001ed86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef18:	3901      	subs	r1, #1
9001ef1a:	4288      	cmp	r0, r1
9001ef1c:	f6bf af33 	bge.w	9001ed86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef20:	9920      	ldr	r1, [sp, #128]	; 0x80
9001ef22:	fb01 6303 	mla	r3, r1, r3, r6
9001ef26:	141b      	asrs	r3, r3, #16
9001ef28:	f53f af2d 	bmi.w	9001ed86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef2c:	3a01      	subs	r2, #1
9001ef2e:	4293      	cmp	r3, r2
9001ef30:	f6bf af29 	bge.w	9001ed86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef34:	46a8      	mov	r8, r5
9001ef36:	f8dd 901c 	ldr.w	r9, [sp, #28]
9001ef3a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9001ef3e:	f1b8 0f00 	cmp.w	r8, #0
9001ef42:	dc60      	bgt.n	9001f006 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
9001ef44:	9b07      	ldr	r3, [sp, #28]
9001ef46:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9001ef4a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9001ef4e:	9307      	str	r3, [sp, #28]
9001ef50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ef52:	2b00      	cmp	r3, #0
9001ef54:	f340 80f8 	ble.w	9001f148 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ef58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ef5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ef5e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ef62:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ef66:	eef0 6a62 	vmov.f32	s13, s5
9001ef6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ef6e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ef72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ef76:	ee16 4a90 	vmov	r4, s13
9001ef7a:	eef0 6a43 	vmov.f32	s13, s6
9001ef7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ef82:	ee16 6a90 	vmov	r6, s13
9001ef86:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ef8a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ef8e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ef92:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ef96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ef9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ef9e:	ee12 2a90 	vmov	r2, s5
9001efa2:	eef0 2a47 	vmov.f32	s5, s14
9001efa6:	fb92 f3f3 	sdiv	r3, r2, r3
9001efaa:	ee13 2a10 	vmov	r2, s6
9001efae:	931f      	str	r3, [sp, #124]	; 0x7c
9001efb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001efb2:	eeb0 3a67 	vmov.f32	s6, s15
9001efb6:	fb92 f3f3 	sdiv	r3, r2, r3
9001efba:	9320      	str	r3, [sp, #128]	; 0x80
9001efbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001efbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001efc0:	3b01      	subs	r3, #1
9001efc2:	930a      	str	r3, [sp, #40]	; 0x28
9001efc4:	bf08      	it	eq
9001efc6:	4615      	moveq	r5, r2
9001efc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001efca:	bf18      	it	ne
9001efcc:	461d      	movne	r5, r3
9001efce:	e6af      	b.n	9001ed30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001efd0:	f111 0a01 	adds.w	sl, r1, #1
9001efd4:	d486      	bmi.n	9001eee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001efd6:	45d6      	cmp	lr, sl
9001efd8:	db84      	blt.n	9001eee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001efda:	f110 0a01 	adds.w	sl, r0, #1
9001efde:	d481      	bmi.n	9001eee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001efe0:	4553      	cmp	r3, sl
9001efe2:	f6ff af7f 	blt.w	9001eee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001efe6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
9001efe8:	b21b      	sxth	r3, r3
9001efea:	9101      	str	r1, [sp, #4]
9001efec:	4641      	mov	r1, r8
9001efee:	9300      	str	r3, [sp, #0]
9001eff0:	fa0f f38e 	sxth.w	r3, lr
9001eff4:	e9cd 0202 	strd	r0, r2, [sp, #8]
9001eff8:	e9cd c704 	strd	ip, r7, [sp, #16]
9001effc:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001effe:	9811      	ldr	r0, [sp, #68]	; 0x44
9001f000:	f7ff fdb2 	bl	9001eb68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
9001f004:	e76e      	b.n	9001eee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001f006:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f008:	1430      	asrs	r0, r6, #16
9001f00a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001f00c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
9001f010:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f014:	1423      	asrs	r3, r4, #16
9001f016:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001f01a:	fb01 3000 	mla	r0, r1, r0, r3
9001f01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f020:	eb03 0340 	add.w	r3, r3, r0, lsl #1
9001f024:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
9001f028:	8858      	ldrh	r0, [r3, #2]
9001f02a:	f1be 0f00 	cmp.w	lr, #0
9001f02e:	d00b      	beq.n	9001f048 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
9001f030:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001f034:	3901      	subs	r1, #1
9001f036:	0049      	lsls	r1, r1, #1
9001f038:	3102      	adds	r1, #2
9001f03a:	eb03 0b01 	add.w	fp, r3, r1
9001f03e:	5a5b      	ldrh	r3, [r3, r1]
9001f040:	930e      	str	r3, [sp, #56]	; 0x38
9001f042:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001f046:	930f      	str	r3, [sp, #60]	; 0x3c
9001f048:	ea4f 410c 	mov.w	r1, ip, lsl #16
9001f04c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001f050:	fb12 f30e 	smulbb	r3, r2, lr
9001f054:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f058:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9001f05c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f060:	10db      	asrs	r3, r3, #3
9001f062:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f066:	ea41 010c 	orr.w	r1, r1, ip
9001f06a:	f1ce 0c10 	rsb	ip, lr, #16
9001f06e:	ea4b 0000 	orr.w	r0, fp, r0
9001f072:	9f08      	ldr	r7, [sp, #32]
9001f074:	ebac 0c02 	sub.w	ip, ip, r2
9001f078:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001f07c:	f108 38ff 	add.w	r8, r8, #4294967295
9001f080:	4350      	muls	r0, r2
9001f082:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9001f086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001f088:	fb0c 0c01 	mla	ip, ip, r1, r0
9001f08c:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f08e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9001f092:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
9001f096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001f098:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f09c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f0a0:	0412      	lsls	r2, r2, #16
9001f0a2:	ea4b 0101 	orr.w	r1, fp, r1
9001f0a6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001f0aa:	fb03 c101 	mla	r1, r3, r1, ip
9001f0ae:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9001f0b2:	4302      	orrs	r2, r0
9001f0b4:	fb03 1202 	mla	r2, r3, r2, r1
9001f0b8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9001f0bc:	0952      	lsrs	r2, r2, #5
9001f0be:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001f0c2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
9001f0c6:	f8b9 2000 	ldrh.w	r2, [r9]
9001f0ca:	ea4b 0303 	orr.w	r3, fp, r3
9001f0ce:	1211      	asrs	r1, r2, #8
9001f0d0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
9001f0d4:	b29b      	uxth	r3, r3
9001f0d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001f0da:	00d2      	lsls	r2, r2, #3
9001f0dc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001f0e0:	fb11 f107 	smulbb	r1, r1, r7
9001f0e4:	1218      	asrs	r0, r3, #8
9001f0e6:	fb1c fc07 	smulbb	ip, ip, r7
9001f0ea:	b2d2      	uxtb	r2, r2
9001f0ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f0f0:	fb12 f207 	smulbb	r2, r2, r7
9001f0f4:	fb00 100a 	mla	r0, r0, sl, r1
9001f0f8:	10d9      	asrs	r1, r3, #3
9001f0fa:	00db      	lsls	r3, r3, #3
9001f0fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f100:	b280      	uxth	r0, r0
9001f102:	b2db      	uxtb	r3, r3
9001f104:	fb01 c10a 	mla	r1, r1, sl, ip
9001f108:	fb03 230a 	mla	r3, r3, sl, r2
9001f10c:	1c42      	adds	r2, r0, #1
9001f10e:	b289      	uxth	r1, r1
9001f110:	b29b      	uxth	r3, r3
9001f112:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001f116:	f101 0c01 	add.w	ip, r1, #1
9001f11a:	1c5a      	adds	r2, r3, #1
9001f11c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001f120:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001f124:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001f128:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001f12a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001f12e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001f132:	441c      	add	r4, r3
9001f134:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001f138:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f13a:	4310      	orrs	r0, r2
9001f13c:	441e      	add	r6, r3
9001f13e:	ea40 000c 	orr.w	r0, r0, ip
9001f142:	f829 0b02 	strh.w	r0, [r9], #2
9001f146:	e6fa      	b.n	9001ef3e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
9001f148:	b013      	add	sp, #76	; 0x4c
9001f14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f14e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9001f14e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001f152:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
9001f156:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9001f15a:	fb0e 4703 	mla	r7, lr, r3, r4
9001f15e:	f1be 0f00 	cmp.w	lr, #0
9001f162:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
9001f166:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9001f16a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9001f16e:	8808      	ldrh	r0, [r1, #0]
9001f170:	db60      	blt.n	9001f234 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9001f172:	45f1      	cmp	r9, lr
9001f174:	dd5e      	ble.n	9001f234 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9001f176:	2c00      	cmp	r4, #0
9001f178:	db5a      	blt.n	9001f230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9001f17a:	42a3      	cmp	r3, r4
9001f17c:	dd58      	ble.n	9001f230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9001f17e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
9001f182:	1c62      	adds	r2, r4, #1
9001f184:	d459      	bmi.n	9001f23a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001f186:	4293      	cmp	r3, r2
9001f188:	dd57      	ble.n	9001f23a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001f18a:	2d00      	cmp	r5, #0
9001f18c:	d055      	beq.n	9001f23a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001f18e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
9001f192:	f11e 0e01 	adds.w	lr, lr, #1
9001f196:	d454      	bmi.n	9001f242 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001f198:	45f1      	cmp	r9, lr
9001f19a:	dd52      	ble.n	9001f242 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001f19c:	2e00      	cmp	r6, #0
9001f19e:	d050      	beq.n	9001f242 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001f1a0:	2c00      	cmp	r4, #0
9001f1a2:	db4c      	blt.n	9001f23e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9001f1a4:	42a3      	cmp	r3, r4
9001f1a6:	dd4a      	ble.n	9001f23e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9001f1a8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9001f1ac:	3401      	adds	r4, #1
9001f1ae:	d405      	bmi.n	9001f1bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001f1b0:	42a3      	cmp	r3, r4
9001f1b2:	dd03      	ble.n	9001f1bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001f1b4:	b115      	cbz	r5, 9001f1bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001f1b6:	3301      	adds	r3, #1
9001f1b8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9001f1bc:	fb15 f406 	smulbb	r4, r5, r6
9001f1c0:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001f1c4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001f1c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001f1cc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001f1d0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001f1d4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001f1d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001f1dc:	ea43 0c0c 	orr.w	ip, r3, ip
9001f1e0:	f1c6 0310 	rsb	r3, r6, #16
9001f1e4:	ea4e 0707 	orr.w	r7, lr, r7
9001f1e8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001f1ec:	1b5b      	subs	r3, r3, r5
9001f1ee:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001f1f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001f1f6:	437d      	muls	r5, r7
9001f1f8:	fb03 5c0c 	mla	ip, r3, ip, r5
9001f1fc:	0403      	lsls	r3, r0, #16
9001f1fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f202:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001f206:	4318      	orrs	r0, r3
9001f208:	0413      	lsls	r3, r2, #16
9001f20a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f20e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001f212:	fb04 c000 	mla	r0, r4, r0, ip
9001f216:	4313      	orrs	r3, r2
9001f218:	fb06 0003 	mla	r0, r6, r3, r0
9001f21c:	0d43      	lsrs	r3, r0, #21
9001f21e:	0940      	lsrs	r0, r0, #5
9001f220:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f224:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f228:	4318      	orrs	r0, r3
9001f22a:	8008      	strh	r0, [r1, #0]
9001f22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001f230:	4684      	mov	ip, r0
9001f232:	e7a6      	b.n	9001f182 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
9001f234:	4607      	mov	r7, r0
9001f236:	4684      	mov	ip, r0
9001f238:	e7ab      	b.n	9001f192 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9001f23a:	4607      	mov	r7, r0
9001f23c:	e7a9      	b.n	9001f192 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9001f23e:	4602      	mov	r2, r0
9001f240:	e7b4      	b.n	9001f1ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
9001f242:	4602      	mov	r2, r0
9001f244:	e7ba      	b.n	9001f1bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

9001f246 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f24a:	b08f      	sub	sp, #60	; 0x3c
9001f24c:	461d      	mov	r5, r3
9001f24e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001f250:	9107      	str	r1, [sp, #28]
9001f252:	920c      	str	r2, [sp, #48]	; 0x30
9001f254:	6859      	ldr	r1, [r3, #4]
9001f256:	681b      	ldr	r3, [r3, #0]
9001f258:	900d      	str	r0, [sp, #52]	; 0x34
9001f25a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9001f25e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
9001f262:	fb01 2707 	mla	r7, r1, r7, r2
9001f266:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9001f26a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f26c:	f8d3 8000 	ldr.w	r8, [r3]
9001f270:	9b07      	ldr	r3, [sp, #28]
9001f272:	2b00      	cmp	r3, #0
9001f274:	dc03      	bgt.n	9001f27e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001f276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f278:	2b00      	cmp	r3, #0
9001f27a:	f340 8182 	ble.w	9001f582 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9001f27e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f280:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f284:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f288:	1e48      	subs	r0, r1, #1
9001f28a:	f102 3cff 	add.w	ip, r2, #4294967295
9001f28e:	2d00      	cmp	r5, #0
9001f290:	f340 809b 	ble.w	9001f3ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
9001f294:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001f298:	ea4f 4326 	mov.w	r3, r6, asr #16
9001f29c:	d406      	bmi.n	9001f2ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001f29e:	4586      	cmp	lr, r0
9001f2a0:	da04      	bge.n	9001f2ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001f2a2:	2b00      	cmp	r3, #0
9001f2a4:	db02      	blt.n	9001f2ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001f2a6:	4563      	cmp	r3, ip
9001f2a8:	f2c0 8090 	blt.w	9001f3cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001f2ac:	f11e 0e01 	adds.w	lr, lr, #1
9001f2b0:	f100 8084 	bmi.w	9001f3bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001f2b4:	4571      	cmp	r1, lr
9001f2b6:	f2c0 8081 	blt.w	9001f3bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001f2ba:	3301      	adds	r3, #1
9001f2bc:	d47e      	bmi.n	9001f3bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001f2be:	429a      	cmp	r2, r3
9001f2c0:	db7c      	blt.n	9001f3bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001f2c2:	46aa      	mov	sl, r5
9001f2c4:	46b9      	mov	r9, r7
9001f2c6:	f1ba 0f00 	cmp.w	sl, #0
9001f2ca:	f340 8099 	ble.w	9001f400 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
9001f2ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f2d0:	1421      	asrs	r1, r4, #16
9001f2d2:	ea4f 4026 	mov.w	r0, r6, asr #16
9001f2d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001f2da:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9001f2de:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9001f2e2:	f100 80d1 	bmi.w	9001f488 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001f2e6:	f10e 3bff 	add.w	fp, lr, #4294967295
9001f2ea:	4559      	cmp	r1, fp
9001f2ec:	f280 80cc 	bge.w	9001f488 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001f2f0:	2800      	cmp	r0, #0
9001f2f2:	f2c0 80c9 	blt.w	9001f488 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001f2f6:	f103 3bff 	add.w	fp, r3, #4294967295
9001f2fa:	4558      	cmp	r0, fp
9001f2fc:	f280 80c4 	bge.w	9001f488 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001f300:	fa0f fe8e 	sxth.w	lr, lr
9001f304:	fb00 110e 	mla	r1, r0, lr, r1
9001f308:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9001f30c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
9001f310:	8841      	ldrh	r1, [r0, #2]
9001f312:	f1bc 0f00 	cmp.w	ip, #0
9001f316:	d00b      	beq.n	9001f330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
9001f318:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
9001f31c:	3b01      	subs	r3, #1
9001f31e:	005b      	lsls	r3, r3, #1
9001f320:	3302      	adds	r3, #2
9001f322:	eb00 0e03 	add.w	lr, r0, r3
9001f326:	5ac3      	ldrh	r3, [r0, r3]
9001f328:	9308      	str	r3, [sp, #32]
9001f32a:	f8be 3002 	ldrh.w	r3, [lr, #2]
9001f32e:	9309      	str	r3, [sp, #36]	; 0x24
9001f330:	ea4f 400b 	mov.w	r0, fp, lsl #16
9001f334:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f338:	fb12 f30c 	smulbb	r3, r2, ip
9001f33c:	f1cc 0e10 	rsb	lr, ip, #16
9001f340:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001f344:	10db      	asrs	r3, r3, #3
9001f346:	ebae 0e02 	sub.w	lr, lr, r2
9001f34a:	ea40 000b 	orr.w	r0, r0, fp
9001f34e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001f352:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f356:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001f35a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f35e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9001f362:	ea4b 0101 	orr.w	r1, fp, r1
9001f366:	4351      	muls	r1, r2
9001f368:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f36a:	fb0e 1e00 	mla	lr, lr, r0, r1
9001f36e:	0410      	lsls	r0, r2, #16
9001f370:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f374:	9908      	ldr	r1, [sp, #32]
9001f376:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001f37a:	4310      	orrs	r0, r2
9001f37c:	9a08      	ldr	r2, [sp, #32]
9001f37e:	0412      	lsls	r2, r2, #16
9001f380:	fb03 e000 	mla	r0, r3, r0, lr
9001f384:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9001f388:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9001f38c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001f390:	ea42 020e 	orr.w	r2, r2, lr
9001f394:	fb03 0302 	mla	r3, r3, r2, r0
9001f398:	0d5a      	lsrs	r2, r3, #21
9001f39a:	095b      	lsrs	r3, r3, #5
9001f39c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f3a0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001f3a4:	4313      	orrs	r3, r2
9001f3a6:	f8a9 3000 	strh.w	r3, [r9]
9001f3aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001f3ac:	f109 0902 	add.w	r9, r9, #2
9001f3b0:	f10a 3aff 	add.w	sl, sl, #4294967295
9001f3b4:	441c      	add	r4, r3
9001f3b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001f3b8:	441e      	add	r6, r3
9001f3ba:	e784      	b.n	9001f2c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001f3bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001f3be:	3d01      	subs	r5, #1
9001f3c0:	3702      	adds	r7, #2
9001f3c2:	441c      	add	r4, r3
9001f3c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001f3c6:	441e      	add	r6, r3
9001f3c8:	e761      	b.n	9001f28e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001f3ca:	d01d      	beq.n	9001f408 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001f3cc:	1e6b      	subs	r3, r5, #1
9001f3ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001f3d0:	fb00 4003 	mla	r0, r0, r3, r4
9001f3d4:	1400      	asrs	r0, r0, #16
9001f3d6:	f53f af74 	bmi.w	9001f2c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001f3da:	3901      	subs	r1, #1
9001f3dc:	4288      	cmp	r0, r1
9001f3de:	f6bf af70 	bge.w	9001f2c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001f3e2:	991c      	ldr	r1, [sp, #112]	; 0x70
9001f3e4:	fb01 6303 	mla	r3, r1, r3, r6
9001f3e8:	141b      	asrs	r3, r3, #16
9001f3ea:	f53f af6a 	bmi.w	9001f2c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001f3ee:	3a01      	subs	r2, #1
9001f3f0:	4293      	cmp	r3, r2
9001f3f2:	f6bf af66 	bge.w	9001f2c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001f3f6:	46a9      	mov	r9, r5
9001f3f8:	46ba      	mov	sl, r7
9001f3fa:	f1b9 0f00 	cmp.w	r9, #0
9001f3fe:	dc5b      	bgt.n	9001f4b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001f400:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9001f404:	eb07 0745 	add.w	r7, r7, r5, lsl #1
9001f408:	9b07      	ldr	r3, [sp, #28]
9001f40a:	2b00      	cmp	r3, #0
9001f40c:	f340 80b9 	ble.w	9001f582 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9001f410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f414:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f416:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f41a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f41e:	eef0 6a62 	vmov.f32	s13, s5
9001f422:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f426:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f42a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f42e:	ee16 4a90 	vmov	r4, s13
9001f432:	eef0 6a43 	vmov.f32	s13, s6
9001f436:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f43a:	ee16 6a90 	vmov	r6, s13
9001f43e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f442:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f446:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f44a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f44e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f452:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f456:	ee12 2a90 	vmov	r2, s5
9001f45a:	eef0 2a47 	vmov.f32	s5, s14
9001f45e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f462:	ee13 2a10 	vmov	r2, s6
9001f466:	931b      	str	r3, [sp, #108]	; 0x6c
9001f468:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f46a:	eeb0 3a67 	vmov.f32	s6, s15
9001f46e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f472:	931c      	str	r3, [sp, #112]	; 0x70
9001f474:	9b07      	ldr	r3, [sp, #28]
9001f476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001f478:	3b01      	subs	r3, #1
9001f47a:	9307      	str	r3, [sp, #28]
9001f47c:	bf08      	it	eq
9001f47e:	4615      	moveq	r5, r2
9001f480:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f482:	bf18      	it	ne
9001f484:	461d      	movne	r5, r3
9001f486:	e6f3      	b.n	9001f270 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001f488:	f111 0b01 	adds.w	fp, r1, #1
9001f48c:	d48d      	bmi.n	9001f3aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001f48e:	45de      	cmp	lr, fp
9001f490:	db8b      	blt.n	9001f3aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001f492:	f110 0b01 	adds.w	fp, r0, #1
9001f496:	d488      	bmi.n	9001f3aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001f498:	455b      	cmp	r3, fp
9001f49a:	db86      	blt.n	9001f3aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001f49c:	b21b      	sxth	r3, r3
9001f49e:	e9cd 1001 	strd	r1, r0, [sp, #4]
9001f4a2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
9001f4a6:	9300      	str	r3, [sp, #0]
9001f4a8:	4642      	mov	r2, r8
9001f4aa:	fa0f f38e 	sxth.w	r3, lr
9001f4ae:	4649      	mov	r1, r9
9001f4b0:	980d      	ldr	r0, [sp, #52]	; 0x34
9001f4b2:	f7ff fe4c 	bl	9001f14e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
9001f4b6:	e778      	b.n	9001f3aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001f4b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f4ba:	1420      	asrs	r0, r4, #16
9001f4bc:	1431      	asrs	r1, r6, #16
9001f4be:	f3c6 3e03 	ubfx	lr, r6, #12, #4
9001f4c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001f4c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001f4ca:	fb03 0101 	mla	r1, r3, r1, r0
9001f4ce:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9001f4d2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
9001f4d6:	8841      	ldrh	r1, [r0, #2]
9001f4d8:	f1be 0f00 	cmp.w	lr, #0
9001f4dc:	d00b      	beq.n	9001f4f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9001f4de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
9001f4e2:	3b01      	subs	r3, #1
9001f4e4:	005b      	lsls	r3, r3, #1
9001f4e6:	3302      	adds	r3, #2
9001f4e8:	eb00 0b03 	add.w	fp, r0, r3
9001f4ec:	5ac3      	ldrh	r3, [r0, r3]
9001f4ee:	930a      	str	r3, [sp, #40]	; 0x28
9001f4f0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001f4f4:	930b      	str	r3, [sp, #44]	; 0x2c
9001f4f6:	ea4f 400c 	mov.w	r0, ip, lsl #16
9001f4fa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001f4fe:	fb12 f30e 	smulbb	r3, r2, lr
9001f502:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001f506:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001f50a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f50e:	10db      	asrs	r3, r3, #3
9001f510:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f514:	ea40 000c 	orr.w	r0, r0, ip
9001f518:	f1ce 0c10 	rsb	ip, lr, #16
9001f51c:	ea4b 0101 	orr.w	r1, fp, r1
9001f520:	f109 39ff 	add.w	r9, r9, #4294967295
9001f524:	ebac 0c02 	sub.w	ip, ip, r2
9001f528:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001f52c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9001f530:	4351      	muls	r1, r2
9001f532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001f534:	fb0c 1c00 	mla	ip, ip, r0, r1
9001f538:	990a      	ldr	r1, [sp, #40]	; 0x28
9001f53a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9001f53e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
9001f542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001f544:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f548:	0412      	lsls	r2, r2, #16
9001f54a:	ea4b 0000 	orr.w	r0, fp, r0
9001f54e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
9001f552:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001f556:	fb03 c000 	mla	r0, r3, r0, ip
9001f55a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9001f55e:	ea42 0b0b 	orr.w	fp, r2, fp
9001f562:	fb03 000b 	mla	r0, r3, fp, r0
9001f566:	0d43      	lsrs	r3, r0, #21
9001f568:	0940      	lsrs	r0, r0, #5
9001f56a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f56e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f572:	4318      	orrs	r0, r3
9001f574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001f576:	441c      	add	r4, r3
9001f578:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001f57a:	f82a 0b02 	strh.w	r0, [sl], #2
9001f57e:	441e      	add	r6, r3
9001f580:	e73b      	b.n	9001f3fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
9001f582:	b00f      	add	sp, #60	; 0x3c
9001f584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f588 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
9001f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f58c:	b085      	sub	sp, #20
9001f58e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9001f592:	9102      	str	r1, [sp, #8]
9001f594:	2c00      	cmp	r4, #0
9001f596:	fb04 7103 	mla	r1, r4, r3, r7
9001f59a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9001f59e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001f5a2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9001f5a6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9001f5aa:	f2c0 811b 	blt.w	9001f7e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9001f5ae:	45a6      	cmp	lr, r4
9001f5b0:	f340 8118 	ble.w	9001f7e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9001f5b4:	2f00      	cmp	r7, #0
9001f5b6:	f2c0 8113 	blt.w	9001f7e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9001f5ba:	42bb      	cmp	r3, r7
9001f5bc:	f340 8110 	ble.w	9001f7e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9001f5c0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9001f5c4:	1c7a      	adds	r2, r7, #1
9001f5c6:	f100 8110 	bmi.w	9001f7ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9001f5ca:	4293      	cmp	r3, r2
9001f5cc:	f340 810d 	ble.w	9001f7ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9001f5d0:	2e00      	cmp	r6, #0
9001f5d2:	f000 810c 	beq.w	9001f7ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
9001f5d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
9001f5da:	3401      	adds	r4, #1
9001f5dc:	f100 810b 	bmi.w	9001f7f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9001f5e0:	45a6      	cmp	lr, r4
9001f5e2:	f340 8108 	ble.w	9001f7f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9001f5e6:	2800      	cmp	r0, #0
9001f5e8:	f000 8108 	beq.w	9001f7fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
9001f5ec:	2f00      	cmp	r7, #0
9001f5ee:	f2c0 8100 	blt.w	9001f7f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
9001f5f2:	42bb      	cmp	r3, r7
9001f5f4:	f340 80fd 	ble.w	9001f7f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
9001f5f8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9001f5fc:	3701      	adds	r7, #1
9001f5fe:	f100 8100 	bmi.w	9001f802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
9001f602:	42bb      	cmp	r3, r7
9001f604:	f340 80fd 	ble.w	9001f802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
9001f608:	2e00      	cmp	r6, #0
9001f60a:	f000 80fc 	beq.w	9001f806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
9001f60e:	3301      	adds	r3, #1
9001f610:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
9001f614:	b2b6      	uxth	r6, r6
9001f616:	b280      	uxth	r0, r0
9001f618:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001f61c:	fb00 fe06 	mul.w	lr, r0, r6
9001f620:	0136      	lsls	r6, r6, #4
9001f622:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001f626:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001f62a:	eba6 070e 	sub.w	r7, r6, lr
9001f62e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001f632:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001f636:	b280      	uxth	r0, r0
9001f638:	b2bf      	uxth	r7, r7
9001f63a:	1a1b      	subs	r3, r3, r0
9001f63c:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001f640:	fb0a f607 	mul.w	r6, sl, r7
9001f644:	b29b      	uxth	r3, r3
9001f646:	fb0b 6603 	mla	r6, fp, r3, r6
9001f64a:	fb00 6609 	mla	r6, r0, r9, r6
9001f64e:	fb0e 6608 	mla	r6, lr, r8, r6
9001f652:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001f656:	9600      	str	r6, [sp, #0]
9001f658:	2e00      	cmp	r6, #0
9001f65a:	f000 80be 	beq.w	9001f7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
9001f65e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001f662:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001f666:	9e02      	ldr	r6, [sp, #8]
9001f668:	fb0b fc0c 	mul.w	ip, fp, ip
9001f66c:	fb0b f505 	mul.w	r5, fp, r5
9001f670:	8836      	ldrh	r6, [r6, #0]
9001f672:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001f676:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f67a:	9501      	str	r5, [sp, #4]
9001f67c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001f680:	44dc      	add	ip, fp
9001f682:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f686:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001f68a:	9503      	str	r5, [sp, #12]
9001f68c:	9d01      	ldr	r5, [sp, #4]
9001f68e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001f692:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001f696:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001f69a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001f69e:	fb0a fc0c 	mul.w	ip, sl, ip
9001f6a2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001f6a6:	fb0a fa01 	mul.w	sl, sl, r1
9001f6aa:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001f6ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f6b2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001f6b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001f6ba:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001f6be:	4465      	add	r5, ip
9001f6c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001f6c4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001f6c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f6cc:	fb09 fc0c 	mul.w	ip, r9, ip
9001f6d0:	0a2d      	lsrs	r5, r5, #8
9001f6d2:	fb09 f904 	mul.w	r9, r9, r4
9001f6d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f6da:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001f6de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001f6e2:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001f6e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f6ea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001f6ee:	437d      	muls	r5, r7
9001f6f0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001f6f4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001f6f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001f6fc:	4461      	add	r1, ip
9001f6fe:	fb08 f404 	mul.w	r4, r8, r4
9001f702:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f706:	fb08 f802 	mul.w	r8, r8, r2
9001f70a:	0a09      	lsrs	r1, r1, #8
9001f70c:	0a22      	lsrs	r2, r4, #8
9001f70e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001f712:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001f716:	fb07 f70a 	mul.w	r7, r7, sl
9001f71a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f71e:	4414      	add	r4, r2
9001f720:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001f724:	0a24      	lsrs	r4, r4, #8
9001f726:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001f72a:	9a03      	ldr	r2, [sp, #12]
9001f72c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001f730:	fb02 5503 	mla	r5, r2, r3, r5
9001f734:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001f738:	9a00      	ldr	r2, [sp, #0]
9001f73a:	fb04 540e 	mla	r4, r4, lr, r5
9001f73e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001f742:	1235      	asrs	r5, r6, #8
9001f744:	fb01 4100 	mla	r1, r1, r0, r4
9001f748:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f74c:	0a09      	lsrs	r1, r1, #8
9001f74e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001f752:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001f756:	fb03 7101 	mla	r1, r3, r1, r7
9001f75a:	fb0e 1e08 	mla	lr, lr, r8, r1
9001f75e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001f762:	fb00 e101 	mla	r1, r0, r1, lr
9001f766:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001f76a:	b287      	uxth	r7, r0
9001f76c:	0a09      	lsrs	r1, r1, #8
9001f76e:	437a      	muls	r2, r7
9001f770:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001f774:	1c53      	adds	r3, r2, #1
9001f776:	4321      	orrs	r1, r4
9001f778:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f77c:	0c0a      	lsrs	r2, r1, #16
9001f77e:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001f782:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001f786:	b2c8      	uxtb	r0, r1
9001f788:	fb12 f207 	smulbb	r2, r2, r7
9001f78c:	fb14 f407 	smulbb	r4, r4, r7
9001f790:	b2db      	uxtb	r3, r3
9001f792:	fb10 f007 	smulbb	r0, r0, r7
9001f796:	fb05 2503 	mla	r5, r5, r3, r2
9001f79a:	10f2      	asrs	r2, r6, #3
9001f79c:	00f6      	lsls	r6, r6, #3
9001f79e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001f7a2:	b2ad      	uxth	r5, r5
9001f7a4:	b2f6      	uxtb	r6, r6
9001f7a6:	fb02 4203 	mla	r2, r2, r3, r4
9001f7aa:	fb06 0303 	mla	r3, r6, r3, r0
9001f7ae:	b294      	uxth	r4, r2
9001f7b0:	b299      	uxth	r1, r3
9001f7b2:	1c6b      	adds	r3, r5, #1
9001f7b4:	1c62      	adds	r2, r4, #1
9001f7b6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f7ba:	1c4b      	adds	r3, r1, #1
9001f7bc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001f7c0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f7c4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f7c8:	0952      	lsrs	r2, r2, #5
9001f7ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f7ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f7d2:	432b      	orrs	r3, r5
9001f7d4:	4313      	orrs	r3, r2
9001f7d6:	9a02      	ldr	r2, [sp, #8]
9001f7d8:	8013      	strh	r3, [r2, #0]
9001f7da:	b005      	add	sp, #20
9001f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f7e0:	2500      	movs	r5, #0
9001f7e2:	e6ef      	b.n	9001f5c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
9001f7e4:	2100      	movs	r1, #0
9001f7e6:	460d      	mov	r5, r1
9001f7e8:	e6f7      	b.n	9001f5da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f7ea:	2100      	movs	r1, #0
9001f7ec:	e6f5      	b.n	9001f5da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f7ee:	4631      	mov	r1, r6
9001f7f0:	e6f3      	b.n	9001f5da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f7f2:	2400      	movs	r4, #0
9001f7f4:	e702      	b.n	9001f5fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
9001f7f6:	2200      	movs	r2, #0
9001f7f8:	4614      	mov	r4, r2
9001f7fa:	e70b      	b.n	9001f614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f7fc:	4602      	mov	r2, r0
9001f7fe:	4604      	mov	r4, r0
9001f800:	e708      	b.n	9001f614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f802:	2200      	movs	r2, #0
9001f804:	e706      	b.n	9001f614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f806:	4632      	mov	r2, r6
9001f808:	e704      	b.n	9001f614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

9001f80a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f80a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f80e:	b09d      	sub	sp, #116	; 0x74
9001f810:	9219      	str	r2, [sp, #100]	; 0x64
9001f812:	9307      	str	r3, [sp, #28]
9001f814:	9a2b      	ldr	r2, [sp, #172]	; 0xac
9001f816:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
9001f81a:	901b      	str	r0, [sp, #108]	; 0x6c
9001f81c:	931a      	str	r3, [sp, #104]	; 0x68
9001f81e:	6850      	ldr	r0, [r2, #4]
9001f820:	9117      	str	r1, [sp, #92]	; 0x5c
9001f822:	6812      	ldr	r2, [r2, #0]
9001f824:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
9001f828:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
9001f82c:	fb00 1303 	mla	r3, r0, r3, r1
9001f830:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f834:	930a      	str	r3, [sp, #40]	; 0x28
9001f836:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f838:	681b      	ldr	r3, [r3, #0]
9001f83a:	9310      	str	r3, [sp, #64]	; 0x40
9001f83c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
9001f840:	930b      	str	r3, [sp, #44]	; 0x2c
9001f842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001f844:	2b00      	cmp	r3, #0
9001f846:	dc03      	bgt.n	9001f850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001f848:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001f84a:	2b00      	cmp	r3, #0
9001f84c:	f340 8375 	ble.w	9001ff3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
9001f850:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f852:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f856:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f85a:	1e48      	subs	r0, r1, #1
9001f85c:	1e57      	subs	r7, r2, #1
9001f85e:	9b07      	ldr	r3, [sp, #28]
9001f860:	2b00      	cmp	r3, #0
9001f862:	f340 818e 	ble.w	9001fb82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001f866:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001f86a:	ea4f 4326 	mov.w	r3, r6, asr #16
9001f86e:	d406      	bmi.n	9001f87e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f870:	4584      	cmp	ip, r0
9001f872:	da04      	bge.n	9001f87e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f874:	2b00      	cmp	r3, #0
9001f876:	db02      	blt.n	9001f87e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f878:	42bb      	cmp	r3, r7
9001f87a:	f2c0 8183 	blt.w	9001fb84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
9001f87e:	f11c 0c01 	adds.w	ip, ip, #1
9001f882:	f100 8173 	bmi.w	9001fb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f886:	4561      	cmp	r1, ip
9001f888:	f2c0 8170 	blt.w	9001fb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f88c:	3301      	adds	r3, #1
9001f88e:	f100 816d 	bmi.w	9001fb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f892:	429a      	cmp	r2, r3
9001f894:	f2c0 816a 	blt.w	9001fb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f898:	9b07      	ldr	r3, [sp, #28]
9001f89a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001f89c:	9318      	str	r3, [sp, #96]	; 0x60
9001f89e:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f8a0:	2b00      	cmp	r3, #0
9001f8a2:	f340 818c 	ble.w	9001fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
9001f8a6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
9001f8a8:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001f8ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f8ae:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001f8b2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001f8b6:	1422      	asrs	r2, r4, #16
9001f8b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001f8bc:	689b      	ldr	r3, [r3, #8]
9001f8be:	f100 81cd 	bmi.w	9001fc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f8c2:	f103 38ff 	add.w	r8, r3, #4294967295
9001f8c6:	4542      	cmp	r2, r8
9001f8c8:	f280 81c8 	bge.w	9001fc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f8cc:	f1bc 0f00 	cmp.w	ip, #0
9001f8d0:	f2c0 81c4 	blt.w	9001fc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f8d4:	f10e 38ff 	add.w	r8, lr, #4294967295
9001f8d8:	45c4      	cmp	ip, r8
9001f8da:	f280 81bf 	bge.w	9001fc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f8de:	b21b      	sxth	r3, r3
9001f8e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001f8e2:	fb0c 2203 	mla	r2, ip, r3, r2
9001f8e6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
9001f8ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9001f8ee:	ea4f 6e12 	mov.w	lr, r2, lsr #24
9001f8f2:	2800      	cmp	r0, #0
9001f8f4:	f000 81a9 	beq.w	9001fc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
9001f8f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001f8fc:	950c      	str	r5, [sp, #48]	; 0x30
9001f8fe:	0e2d      	lsrs	r5, r5, #24
9001f900:	9513      	str	r5, [sp, #76]	; 0x4c
9001f902:	b181      	cbz	r1, 9001f926 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001f904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9001f908:	3b01      	subs	r3, #1
9001f90a:	009b      	lsls	r3, r3, #2
9001f90c:	3304      	adds	r3, #4
9001f90e:	eb08 0c03 	add.w	ip, r8, r3
9001f912:	f858 3003 	ldr.w	r3, [r8, r3]
9001f916:	9308      	str	r3, [sp, #32]
9001f918:	0e1b      	lsrs	r3, r3, #24
9001f91a:	9311      	str	r3, [sp, #68]	; 0x44
9001f91c:	f8dc 3004 	ldr.w	r3, [ip, #4]
9001f920:	930d      	str	r3, [sp, #52]	; 0x34
9001f922:	0e1b      	lsrs	r3, r3, #24
9001f924:	9314      	str	r3, [sp, #80]	; 0x50
9001f926:	b280      	uxth	r0, r0
9001f928:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f92a:	b289      	uxth	r1, r1
9001f92c:	fb00 f901 	mul.w	r9, r0, r1
9001f930:	0100      	lsls	r0, r0, #4
9001f932:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001f936:	eba0 0809 	sub.w	r8, r0, r9
9001f93a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f93e:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001f940:	b289      	uxth	r1, r1
9001f942:	fa1f f888 	uxth.w	r8, r8
9001f946:	1a5b      	subs	r3, r3, r1
9001f948:	fb08 f000 	mul.w	r0, r8, r0
9001f94c:	b29b      	uxth	r3, r3
9001f94e:	fb03 000e 	mla	r0, r3, lr, r0
9001f952:	fb01 0005 	mla	r0, r1, r5, r0
9001f956:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001f958:	fb09 0005 	mla	r0, r9, r5, r0
9001f95c:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001f960:	2800      	cmp	r0, #0
9001f962:	f000 80fa 	beq.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f966:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001f96a:	d01b      	beq.n	9001f9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001f96c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
9001f970:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001f974:	fb0e fa0a 	mul.w	sl, lr, sl
9001f978:	fb0e fe02 	mul.w	lr, lr, r2
9001f97c:	ea4f 221a 	mov.w	r2, sl, lsr #8
9001f980:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001f984:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001f988:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f98c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001f990:	4452      	add	r2, sl
9001f992:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f996:	0a12      	lsrs	r2, r2, #8
9001f998:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001f99c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f9a0:	ea42 020c 	orr.w	r2, r2, ip
9001f9a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f9a6:	2dff      	cmp	r5, #255	; 0xff
9001f9a8:	d021      	beq.n	9001f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
9001f9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f9ac:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001f9b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f9b2:	fb05 fb0b 	mul.w	fp, r5, fp
9001f9b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f9b8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f9bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f9be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001f9c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001f9c6:	fb05 fa0a 	mul.w	sl, r5, sl
9001f9ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f9ce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001f9d2:	44de      	add	lr, fp
9001f9d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001f9d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f9dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f9e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f9e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f9e8:	ea4e 050a 	orr.w	r5, lr, sl
9001f9ec:	950c      	str	r5, [sp, #48]	; 0x30
9001f9ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f9f0:	2dff      	cmp	r5, #255	; 0xff
9001f9f2:	d021      	beq.n	9001fa38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
9001f9f4:	9d08      	ldr	r5, [sp, #32]
9001f9f6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001f9fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f9fc:	fb05 fb0b 	mul.w	fp, r5, fp
9001fa00:	9d08      	ldr	r5, [sp, #32]
9001fa02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fa06:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001fa08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001fa0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001fa10:	fb05 fa0a 	mul.w	sl, r5, sl
9001fa14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fa18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001fa1c:	44de      	add	lr, fp
9001fa1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001fa22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fa26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fa2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fa2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fa32:	ea4e 050a 	orr.w	r5, lr, sl
9001fa36:	9508      	str	r5, [sp, #32]
9001fa38:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001fa3a:	2dff      	cmp	r5, #255	; 0xff
9001fa3c:	d021      	beq.n	9001fa82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
9001fa3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001fa40:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001fa44:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001fa46:	fb05 fb0b 	mul.w	fp, r5, fp
9001fa4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001fa4c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fa50:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001fa52:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001fa56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001fa5a:	fb05 fa0a 	mul.w	sl, r5, sl
9001fa5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fa62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001fa66:	44de      	add	lr, fp
9001fa68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001fa6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fa70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fa74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fa78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fa7c:	ea4e 050a 	orr.w	r5, lr, sl
9001fa80:	950d      	str	r5, [sp, #52]	; 0x34
9001fa82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001fa84:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
9001fa88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001fa8c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001fa90:	9d08      	ldr	r5, [sp, #32]
9001fa92:	fb08 fc0c 	mul.w	ip, r8, ip
9001fa96:	fb03 cc0e 	mla	ip, r3, lr, ip
9001fa9a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001fa9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001faa0:	fb01 cc0e 	mla	ip, r1, lr, ip
9001faa4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001faa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001faaa:	fb09 cc0e 	mla	ip, r9, lr, ip
9001faae:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9001fab2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fab4:	fb08 f80e 	mul.w	r8, r8, lr
9001fab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fabc:	fb03 8202 	mla	r2, r3, r2, r8
9001fac0:	9b08      	ldr	r3, [sp, #32]
9001fac2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fac6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
9001faca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001facc:	fb01 220a 	mla	r2, r1, sl, r2
9001fad0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
9001fad4:	883b      	ldrh	r3, [r7, #0]
9001fad6:	fb09 2901 	mla	r9, r9, r1, r2
9001fada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001fadc:	1219      	asrs	r1, r3, #8
9001fade:	4342      	muls	r2, r0
9001fae0:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fae4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001fae8:	1c50      	adds	r0, r2, #1
9001faea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001faee:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001faf2:	ea4c 0c09 	orr.w	ip, ip, r9
9001faf6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001fafa:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001fafe:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001fb02:	fa5f fc8c 	uxtb.w	ip, ip
9001fb06:	fb12 f205 	smulbb	r2, r2, r5
9001fb0a:	b2c0      	uxtb	r0, r0
9001fb0c:	fb1c fc05 	smulbb	ip, ip, r5
9001fb10:	fb01 2100 	mla	r1, r1, r0, r2
9001fb14:	10da      	asrs	r2, r3, #3
9001fb16:	fb1e fe05 	smulbb	lr, lr, r5
9001fb1a:	00db      	lsls	r3, r3, #3
9001fb1c:	b289      	uxth	r1, r1
9001fb1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001fb22:	b2db      	uxtb	r3, r3
9001fb24:	fb02 e200 	mla	r2, r2, r0, lr
9001fb28:	fb03 c300 	mla	r3, r3, r0, ip
9001fb2c:	b292      	uxth	r2, r2
9001fb2e:	fa1f fc83 	uxth.w	ip, r3
9001fb32:	1c4b      	adds	r3, r1, #1
9001fb34:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001fb38:	f10c 0301 	add.w	r3, ip, #1
9001fb3c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001fb40:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001fb44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001fb48:	430b      	orrs	r3, r1
9001fb4a:	1c51      	adds	r1, r2, #1
9001fb4c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001fb50:	0952      	lsrs	r2, r2, #5
9001fb52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fb56:	4313      	orrs	r3, r2
9001fb58:	803b      	strh	r3, [r7, #0]
9001fb5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001fb5c:	3702      	adds	r7, #2
9001fb5e:	441c      	add	r4, r3
9001fb60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fb62:	441e      	add	r6, r3
9001fb64:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001fb66:	3b01      	subs	r3, #1
9001fb68:	9318      	str	r3, [sp, #96]	; 0x60
9001fb6a:	e698      	b.n	9001f89e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001fb6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001fb6e:	441c      	add	r4, r3
9001fb70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fb72:	441e      	add	r6, r3
9001fb74:	9b07      	ldr	r3, [sp, #28]
9001fb76:	3b01      	subs	r3, #1
9001fb78:	9307      	str	r3, [sp, #28]
9001fb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001fb7c:	3302      	adds	r3, #2
9001fb7e:	930a      	str	r3, [sp, #40]	; 0x28
9001fb80:	e66d      	b.n	9001f85e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001fb82:	d023      	beq.n	9001fbcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
9001fb84:	9b07      	ldr	r3, [sp, #28]
9001fb86:	9829      	ldr	r0, [sp, #164]	; 0xa4
9001fb88:	3b01      	subs	r3, #1
9001fb8a:	fb00 4003 	mla	r0, r0, r3, r4
9001fb8e:	1400      	asrs	r0, r0, #16
9001fb90:	f53f ae82 	bmi.w	9001f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fb94:	3901      	subs	r1, #1
9001fb96:	4288      	cmp	r0, r1
9001fb98:	f6bf ae7e 	bge.w	9001f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fb9c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001fb9e:	fb01 6303 	mla	r3, r1, r3, r6
9001fba2:	141b      	asrs	r3, r3, #16
9001fba4:	f53f ae78 	bmi.w	9001f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fba8:	3a01      	subs	r2, #1
9001fbaa:	4293      	cmp	r3, r2
9001fbac:	f6bf ae74 	bge.w	9001f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fbb0:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001fbb4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001fbb8:	f1bb 0f00 	cmp.w	fp, #0
9001fbbc:	dc6c      	bgt.n	9001fc98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9001fbbe:	9b07      	ldr	r3, [sp, #28]
9001fbc0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001fbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001fbc6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9001fbca:	930a      	str	r3, [sp, #40]	; 0x28
9001fbcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001fbce:	2b00      	cmp	r3, #0
9001fbd0:	f340 81b3 	ble.w	9001ff3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
9001fbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fbd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001fbda:	ee30 0a04 	vadd.f32	s0, s0, s8
9001fbde:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001fbe2:	eef0 6a62 	vmov.f32	s13, s5
9001fbe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fbea:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fbee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fbf2:	ee16 4a90 	vmov	r4, s13
9001fbf6:	eef0 6a43 	vmov.f32	s13, s6
9001fbfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fbfe:	ee16 6a90 	vmov	r6, s13
9001fc02:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fc06:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fc0a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fc0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fc12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fc16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fc1a:	ee12 2a90 	vmov	r2, s5
9001fc1e:	eef0 2a47 	vmov.f32	s5, s14
9001fc22:	fb92 f3f3 	sdiv	r3, r2, r3
9001fc26:	ee13 2a10 	vmov	r2, s6
9001fc2a:	9329      	str	r3, [sp, #164]	; 0xa4
9001fc2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001fc2e:	eeb0 3a67 	vmov.f32	s6, s15
9001fc32:	fb92 f3f3 	sdiv	r3, r2, r3
9001fc36:	932a      	str	r3, [sp, #168]	; 0xa8
9001fc38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001fc3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
9001fc3c:	3b01      	subs	r3, #1
9001fc3e:	9317      	str	r3, [sp, #92]	; 0x5c
9001fc40:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001fc42:	bf08      	it	eq
9001fc44:	4613      	moveq	r3, r2
9001fc46:	9307      	str	r3, [sp, #28]
9001fc48:	e5fb      	b.n	9001f842 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001fc4a:	2900      	cmp	r1, #0
9001fc4c:	f43f ae6b 	beq.w	9001f926 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001fc50:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9001fc54:	9308      	str	r3, [sp, #32]
9001fc56:	0e1b      	lsrs	r3, r3, #24
9001fc58:	9311      	str	r3, [sp, #68]	; 0x44
9001fc5a:	e664      	b.n	9001f926 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001fc5c:	f112 0801 	adds.w	r8, r2, #1
9001fc60:	f53f af7b 	bmi.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001fc64:	4543      	cmp	r3, r8
9001fc66:	f6ff af78 	blt.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001fc6a:	f11c 0801 	adds.w	r8, ip, #1
9001fc6e:	f53f af74 	bmi.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001fc72:	45c6      	cmp	lr, r8
9001fc74:	f6ff af71 	blt.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001fc78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001fc7a:	b21b      	sxth	r3, r3
9001fc7c:	9201      	str	r2, [sp, #4]
9001fc7e:	fa0f f28e 	sxth.w	r2, lr
9001fc82:	e9cd 1504 	strd	r1, r5, [sp, #16]
9001fc86:	e9cd c002 	strd	ip, r0, [sp, #8]
9001fc8a:	9200      	str	r2, [sp, #0]
9001fc8c:	4639      	mov	r1, r7
9001fc8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001fc90:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001fc92:	f7ff fc79 	bl	9001f588 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
9001fc96:	e760      	b.n	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001fc98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001fc9a:	1427      	asrs	r7, r4, #16
9001fc9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001fc9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001fca2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fca6:	1433      	asrs	r3, r6, #16
9001fca8:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001fcac:	fb01 7303 	mla	r3, r1, r3, r7
9001fcb0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
9001fcb4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
9001fcb8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001fcbc:	2a00      	cmp	r2, #0
9001fcbe:	f000 8133 	beq.w	9001ff28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
9001fcc2:	687d      	ldr	r5, [r7, #4]
9001fcc4:	950e      	str	r5, [sp, #56]	; 0x38
9001fcc6:	0e2d      	lsrs	r5, r5, #24
9001fcc8:	9515      	str	r5, [sp, #84]	; 0x54
9001fcca:	b178      	cbz	r0, 9001fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001fccc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
9001fcd0:	3901      	subs	r1, #1
9001fcd2:	0089      	lsls	r1, r1, #2
9001fcd4:	3104      	adds	r1, #4
9001fcd6:	eb07 0e01 	add.w	lr, r7, r1
9001fcda:	5879      	ldr	r1, [r7, r1]
9001fcdc:	9109      	str	r1, [sp, #36]	; 0x24
9001fcde:	0e09      	lsrs	r1, r1, #24
9001fce0:	9112      	str	r1, [sp, #72]	; 0x48
9001fce2:	f8de 1004 	ldr.w	r1, [lr, #4]
9001fce6:	910f      	str	r1, [sp, #60]	; 0x3c
9001fce8:	0e09      	lsrs	r1, r1, #24
9001fcea:	9116      	str	r1, [sp, #88]	; 0x58
9001fcec:	b292      	uxth	r2, r2
9001fcee:	9915      	ldr	r1, [sp, #84]	; 0x54
9001fcf0:	b280      	uxth	r0, r0
9001fcf2:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fcf4:	fb02 f800 	mul.w	r8, r2, r0
9001fcf8:	0112      	lsls	r2, r2, #4
9001fcfa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001fcfe:	eba2 0e08 	sub.w	lr, r2, r8
9001fd02:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001fd06:	b280      	uxth	r0, r0
9001fd08:	fa1f fe8e 	uxth.w	lr, lr
9001fd0c:	1a12      	subs	r2, r2, r0
9001fd0e:	fb0e f101 	mul.w	r1, lr, r1
9001fd12:	b292      	uxth	r2, r2
9001fd14:	fb02 110c 	mla	r1, r2, ip, r1
9001fd18:	fb00 1105 	mla	r1, r0, r5, r1
9001fd1c:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001fd1e:	fb08 1105 	mla	r1, r8, r5, r1
9001fd22:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001fd26:	2900      	cmp	r1, #0
9001fd28:	f000 80f5 	beq.w	9001ff16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9001fd2c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001fd30:	d019      	beq.n	9001fd66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
9001fd32:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001fd36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001fd3a:	fb0c fa0a 	mul.w	sl, ip, sl
9001fd3e:	fb0c fc03 	mul.w	ip, ip, r3
9001fd42:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001fd46:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001fd4a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001fd4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001fd52:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001fd56:	4453      	add	r3, sl
9001fd58:	0a3f      	lsrs	r7, r7, #8
9001fd5a:	0a1b      	lsrs	r3, r3, #8
9001fd5c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001fd60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001fd64:	433b      	orrs	r3, r7
9001fd66:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001fd68:	2dff      	cmp	r5, #255	; 0xff
9001fd6a:	d020      	beq.n	9001fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9001fd6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001fd6e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001fd72:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001fd74:	436f      	muls	r7, r5
9001fd76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001fd78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001fd7c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fd80:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001fd82:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001fd86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fd8a:	fb05 fa0a 	mul.w	sl, r5, sl
9001fd8e:	44bc      	add	ip, r7
9001fd90:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001fd94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fd98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001fd9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fda0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fda4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fda8:	ea4c 050a 	orr.w	r5, ip, sl
9001fdac:	950e      	str	r5, [sp, #56]	; 0x38
9001fdae:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fdb0:	2dff      	cmp	r5, #255	; 0xff
9001fdb2:	d020      	beq.n	9001fdf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
9001fdb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001fdb6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001fdba:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fdbc:	436f      	muls	r7, r5
9001fdbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001fdc0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001fdc4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fdc8:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fdca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001fdce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fdd2:	fb05 fa0a 	mul.w	sl, r5, sl
9001fdd6:	44bc      	add	ip, r7
9001fdd8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001fddc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fde0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001fde4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fde8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fdec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fdf0:	ea4c 050a 	orr.w	r5, ip, sl
9001fdf4:	9509      	str	r5, [sp, #36]	; 0x24
9001fdf6:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001fdf8:	2dff      	cmp	r5, #255	; 0xff
9001fdfa:	d020      	beq.n	9001fe3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
9001fdfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001fdfe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001fe02:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001fe04:	436f      	muls	r7, r5
9001fe06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001fe08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001fe0c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fe10:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001fe12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001fe16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fe1a:	fb05 fa0a 	mul.w	sl, r5, sl
9001fe1e:	44bc      	add	ip, r7
9001fe20:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001fe24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fe28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001fe2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fe30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fe34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fe38:	ea4c 050a 	orr.w	r5, ip, sl
9001fe3c:	950f      	str	r5, [sp, #60]	; 0x3c
9001fe3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001fe40:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001fe44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001fe48:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001fe4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001fe4e:	fb0e f707 	mul.w	r7, lr, r7
9001fe52:	fb02 770c 	mla	r7, r2, ip, r7
9001fe56:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001fe5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001fe5c:	fb00 770c 	mla	r7, r0, ip, r7
9001fe60:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001fe64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001fe66:	fb08 770c 	mla	r7, r8, ip, r7
9001fe6a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9001fe6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fe70:	fb0e fe0c 	mul.w	lr, lr, ip
9001fe74:	0a3f      	lsrs	r7, r7, #8
9001fe76:	fb02 e303 	mla	r3, r2, r3, lr
9001fe7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001fe7c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001fe80:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001fe84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001fe86:	fb00 330a 	mla	r3, r0, sl, r3
9001fe8a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001fe8e:	f8b9 0000 	ldrh.w	r0, [r9]
9001fe92:	fb08 3c0c 	mla	ip, r8, ip, r3
9001fe96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001fe98:	1202      	asrs	r2, r0, #8
9001fe9a:	4359      	muls	r1, r3
9001fe9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fea0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001fea4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001fea8:	1c4b      	adds	r3, r1, #1
9001feaa:	ea47 070c 	orr.w	r7, r7, ip
9001feae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001feb2:	0c3b      	lsrs	r3, r7, #16
9001feb4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001feb8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001febc:	b2ff      	uxtb	r7, r7
9001febe:	fb13 f305 	smulbb	r3, r3, r5
9001fec2:	b2c9      	uxtb	r1, r1
9001fec4:	fb17 f705 	smulbb	r7, r7, r5
9001fec8:	fb02 3201 	mla	r2, r2, r1, r3
9001fecc:	10c3      	asrs	r3, r0, #3
9001fece:	fb1c fc05 	smulbb	ip, ip, r5
9001fed2:	00c0      	lsls	r0, r0, #3
9001fed4:	b292      	uxth	r2, r2
9001fed6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001feda:	b2c0      	uxtb	r0, r0
9001fedc:	fb03 c301 	mla	r3, r3, r1, ip
9001fee0:	fb00 7001 	mla	r0, r0, r1, r7
9001fee4:	1c51      	adds	r1, r2, #1
9001fee6:	b29b      	uxth	r3, r3
9001fee8:	b280      	uxth	r0, r0
9001feea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001feee:	f100 0c01 	add.w	ip, r0, #1
9001fef2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001fef6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
9001fefa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001fefe:	ea4c 0202 	orr.w	r2, ip, r2
9001ff02:	f103 0c01 	add.w	ip, r3, #1
9001ff06:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001ff0a:	095b      	lsrs	r3, r3, #5
9001ff0c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ff10:	431a      	orrs	r2, r3
9001ff12:	f8a9 2000 	strh.w	r2, [r9]
9001ff16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001ff18:	f109 0902 	add.w	r9, r9, #2
9001ff1c:	f10b 3bff 	add.w	fp, fp, #4294967295
9001ff20:	441c      	add	r4, r3
9001ff22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ff24:	441e      	add	r6, r3
9001ff26:	e647      	b.n	9001fbb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
9001ff28:	2800      	cmp	r0, #0
9001ff2a:	f43f aedf 	beq.w	9001fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001ff2e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
9001ff32:	9109      	str	r1, [sp, #36]	; 0x24
9001ff34:	0e09      	lsrs	r1, r1, #24
9001ff36:	9112      	str	r1, [sp, #72]	; 0x48
9001ff38:	e6d8      	b.n	9001fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001ff3a:	b01d      	add	sp, #116	; 0x74
9001ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ff40 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
9001ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ff44:	b085      	sub	sp, #20
9001ff46:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9001ff4a:	9102      	str	r1, [sp, #8]
9001ff4c:	2c00      	cmp	r4, #0
9001ff4e:	fb04 7103 	mla	r1, r4, r3, r7
9001ff52:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9001ff56:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001ff5a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9001ff5e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9001ff62:	f2c0 810c 	blt.w	9002017e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9001ff66:	45a6      	cmp	lr, r4
9001ff68:	f340 8109 	ble.w	9002017e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9001ff6c:	2f00      	cmp	r7, #0
9001ff6e:	f2c0 8104 	blt.w	9002017a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9001ff72:	42bb      	cmp	r3, r7
9001ff74:	f340 8101 	ble.w	9002017a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9001ff78:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9001ff7c:	1c7a      	adds	r2, r7, #1
9001ff7e:	f100 8101 	bmi.w	90020184 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9001ff82:	4293      	cmp	r3, r2
9001ff84:	f340 80fe 	ble.w	90020184 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9001ff88:	2e00      	cmp	r6, #0
9001ff8a:	f000 80fd 	beq.w	90020188 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9001ff8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
9001ff92:	3401      	adds	r4, #1
9001ff94:	f100 80fc 	bmi.w	90020190 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9001ff98:	45a6      	cmp	lr, r4
9001ff9a:	f340 80f9 	ble.w	90020190 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9001ff9e:	2800      	cmp	r0, #0
9001ffa0:	f000 80f9 	beq.w	90020196 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
9001ffa4:	2f00      	cmp	r7, #0
9001ffa6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9001ffaa:	f2c0 80ef 	blt.w	9002018c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9001ffae:	42bb      	cmp	r3, r7
9001ffb0:	f340 80ec 	ble.w	9002018c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9001ffb4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9001ffb8:	3701      	adds	r7, #1
9001ffba:	f100 80ef 	bmi.w	9002019c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9001ffbe:	42bb      	cmp	r3, r7
9001ffc0:	f340 80ec 	ble.w	9002019c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9001ffc4:	2e00      	cmp	r6, #0
9001ffc6:	f000 80eb 	beq.w	900201a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9001ffca:	6852      	ldr	r2, [r2, #4]
9001ffcc:	b2b6      	uxth	r6, r6
9001ffce:	b280      	uxth	r0, r0
9001ffd0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001ffd4:	fb00 fe06 	mul.w	lr, r0, r6
9001ffd8:	0136      	lsls	r6, r6, #4
9001ffda:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001ffde:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001ffe2:	eba6 070e 	sub.w	r7, r6, lr
9001ffe6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001ffea:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001ffee:	b280      	uxth	r0, r0
9001fff0:	b2bf      	uxth	r7, r7
9001fff2:	1a1b      	subs	r3, r3, r0
9001fff4:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001fff8:	fb07 f60a 	mul.w	r6, r7, sl
9001fffc:	b29b      	uxth	r3, r3
9001fffe:	fb0b 6603 	mla	r6, fp, r3, r6
90020002:	fb00 6609 	mla	r6, r0, r9, r6
90020006:	fb0e 6608 	mla	r6, lr, r8, r6
9002000a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002000e:	9600      	str	r6, [sp, #0]
90020010:	2e00      	cmp	r6, #0
90020012:	f000 80af 	beq.w	90020174 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90020016:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002001a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002001e:	9e02      	ldr	r6, [sp, #8]
90020020:	fb0b fc0c 	mul.w	ip, fp, ip
90020024:	fb0b f505 	mul.w	r5, fp, r5
90020028:	8836      	ldrh	r6, [r6, #0]
9002002a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002002e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020032:	9501      	str	r5, [sp, #4]
90020034:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90020038:	44dc      	add	ip, fp
9002003a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002003e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90020042:	9503      	str	r5, [sp, #12]
90020044:	9d01      	ldr	r5, [sp, #4]
90020046:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002004a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002004e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90020052:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020056:	fb0a fc0c 	mul.w	ip, sl, ip
9002005a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002005e:	fb0a fa01 	mul.w	sl, sl, r1
90020062:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020066:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002006a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002006e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020072:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020076:	4465      	add	r5, ip
90020078:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002007c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90020080:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020084:	fb09 fc0c 	mul.w	ip, r9, ip
90020088:	0a2d      	lsrs	r5, r5, #8
9002008a:	fb09 f904 	mul.w	r9, r9, r4
9002008e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020092:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020096:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002009a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9002009e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900200a2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900200a6:	437d      	muls	r5, r7
900200a8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900200ac:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900200b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900200b4:	4461      	add	r1, ip
900200b6:	fb08 f404 	mul.w	r4, r8, r4
900200ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
900200be:	fb08 f802 	mul.w	r8, r8, r2
900200c2:	0a09      	lsrs	r1, r1, #8
900200c4:	0a22      	lsrs	r2, r4, #8
900200c6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900200ca:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900200ce:	fb07 f70a 	mul.w	r7, r7, sl
900200d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900200d6:	4414      	add	r4, r2
900200d8:	f508 7280 	add.w	r2, r8, #256	; 0x100
900200dc:	0a24      	lsrs	r4, r4, #8
900200de:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900200e2:	9a03      	ldr	r2, [sp, #12]
900200e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900200e8:	fb02 5503 	mla	r5, r2, r3, r5
900200ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
900200f0:	fb04 540e 	mla	r4, r4, lr, r5
900200f4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900200f8:	fb01 4100 	mla	r1, r1, r0, r4
900200fc:	0a09      	lsrs	r1, r1, #8
900200fe:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90020102:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90020106:	fb03 7101 	mla	r1, r3, r1, r7
9002010a:	9b00      	ldr	r3, [sp, #0]
9002010c:	fb0e 1e08 	mla	lr, lr, r8, r1
90020110:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90020114:	43da      	mvns	r2, r3
90020116:	1233      	asrs	r3, r6, #8
90020118:	fb00 e101 	mla	r1, r0, r1, lr
9002011c:	10f0      	asrs	r0, r6, #3
9002011e:	b2d2      	uxtb	r2, r2
90020120:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90020124:	0a09      	lsrs	r1, r1, #8
90020126:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002012a:	00f6      	lsls	r6, r6, #3
9002012c:	4353      	muls	r3, r2
9002012e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020132:	4350      	muls	r0, r2
90020134:	b2f6      	uxtb	r6, r6
90020136:	4321      	orrs	r1, r4
90020138:	4356      	muls	r6, r2
9002013a:	1c5a      	adds	r2, r3, #1
9002013c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020140:	0c0b      	lsrs	r3, r1, #16
90020142:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020146:	1c42      	adds	r2, r0, #1
90020148:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002014c:	0a0a      	lsrs	r2, r1, #8
9002014e:	021b      	lsls	r3, r3, #8
90020150:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90020154:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90020158:	00d2      	lsls	r2, r2, #3
9002015a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002015e:	4313      	orrs	r3, r2
90020160:	1c72      	adds	r2, r6, #1
90020162:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90020166:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002016a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002016e:	4319      	orrs	r1, r3
90020170:	9b02      	ldr	r3, [sp, #8]
90020172:	8019      	strh	r1, [r3, #0]
90020174:	b005      	add	sp, #20
90020176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002017a:	2500      	movs	r5, #0
9002017c:	e6fe      	b.n	9001ff7c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9002017e:	2100      	movs	r1, #0
90020180:	460d      	mov	r5, r1
90020182:	e706      	b.n	9001ff92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90020184:	2100      	movs	r1, #0
90020186:	e704      	b.n	9001ff92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90020188:	4631      	mov	r1, r6
9002018a:	e702      	b.n	9001ff92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002018c:	2400      	movs	r4, #0
9002018e:	e713      	b.n	9001ffb8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90020190:	2200      	movs	r2, #0
90020192:	4614      	mov	r4, r2
90020194:	e71a      	b.n	9001ffcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90020196:	4602      	mov	r2, r0
90020198:	4604      	mov	r4, r0
9002019a:	e717      	b.n	9001ffcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002019c:	2200      	movs	r2, #0
9002019e:	e715      	b.n	9001ffcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900201a0:	4632      	mov	r2, r6
900201a2:	e713      	b.n	9001ffcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

900201a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900201a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900201a8:	b09b      	sub	sp, #108	; 0x6c
900201aa:	9218      	str	r2, [sp, #96]	; 0x60
900201ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900201ae:	9019      	str	r0, [sp, #100]	; 0x64
900201b0:	9116      	str	r1, [sp, #88]	; 0x58
900201b2:	6850      	ldr	r0, [r2, #4]
900201b4:	9307      	str	r3, [sp, #28]
900201b6:	6812      	ldr	r2, [r2, #0]
900201b8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900201bc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900201c0:	fb00 1303 	mla	r3, r0, r3, r1
900201c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900201c8:	930a      	str	r3, [sp, #40]	; 0x28
900201ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900201cc:	681b      	ldr	r3, [r3, #0]
900201ce:	930f      	str	r3, [sp, #60]	; 0x3c
900201d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
900201d2:	2b00      	cmp	r3, #0
900201d4:	dc03      	bgt.n	900201de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900201d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900201d8:	2b00      	cmp	r3, #0
900201da:	f340 8387 	ble.w	900208ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900201de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900201e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900201e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900201e8:	1e48      	subs	r0, r1, #1
900201ea:	1e57      	subs	r7, r2, #1
900201ec:	9b07      	ldr	r3, [sp, #28]
900201ee:	2b00      	cmp	r3, #0
900201f0:	f340 8166 	ble.w	900204c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900201f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
900201f8:	ea4f 4326 	mov.w	r3, r6, asr #16
900201fc:	d406      	bmi.n	9002020c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900201fe:	4584      	cmp	ip, r0
90020200:	da04      	bge.n	9002020c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90020202:	2b00      	cmp	r3, #0
90020204:	db02      	blt.n	9002020c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90020206:	42bb      	cmp	r3, r7
90020208:	f2c0 815b 	blt.w	900204c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9002020c:	f11c 0c01 	adds.w	ip, ip, #1
90020210:	f100 814b 	bmi.w	900204aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90020214:	4561      	cmp	r1, ip
90020216:	f2c0 8148 	blt.w	900204aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002021a:	3301      	adds	r3, #1
9002021c:	f100 8145 	bmi.w	900204aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90020220:	429a      	cmp	r2, r3
90020222:	f2c0 8142 	blt.w	900204aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90020226:	9b07      	ldr	r3, [sp, #28]
90020228:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002022a:	9317      	str	r3, [sp, #92]	; 0x5c
9002022c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002022e:	2b00      	cmp	r3, #0
90020230:	f340 8165 	ble.w	900204fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90020234:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90020236:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002023a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002023c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90020240:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020244:	1422      	asrs	r2, r4, #16
90020246:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002024a:	689b      	ldr	r3, [r3, #8]
9002024c:	f100 81d5 	bmi.w	900205fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90020250:	f103 38ff 	add.w	r8, r3, #4294967295
90020254:	4542      	cmp	r2, r8
90020256:	f280 81d0 	bge.w	900205fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002025a:	f1bc 0f00 	cmp.w	ip, #0
9002025e:	f2c0 81cc 	blt.w	900205fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90020262:	f10e 38ff 	add.w	r8, lr, #4294967295
90020266:	45c4      	cmp	ip, r8
90020268:	f280 81c7 	bge.w	900205fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002026c:	b21b      	sxth	r3, r3
9002026e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90020270:	fb0c 2203 	mla	r2, ip, r3, r2
90020274:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020278:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002027c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020280:	2900      	cmp	r1, #0
90020282:	f000 8182 	beq.w	9002058a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90020286:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002028a:	950b      	str	r5, [sp, #44]	; 0x2c
9002028c:	0e2d      	lsrs	r5, r5, #24
9002028e:	9512      	str	r5, [sp, #72]	; 0x48
90020290:	b180      	cbz	r0, 900202b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90020292:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90020296:	3b01      	subs	r3, #1
90020298:	009b      	lsls	r3, r3, #2
9002029a:	3304      	adds	r3, #4
9002029c:	eb08 0c03 	add.w	ip, r8, r3
900202a0:	f858 3003 	ldr.w	r3, [r8, r3]
900202a4:	9308      	str	r3, [sp, #32]
900202a6:	0e1b      	lsrs	r3, r3, #24
900202a8:	9310      	str	r3, [sp, #64]	; 0x40
900202aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
900202ae:	930c      	str	r3, [sp, #48]	; 0x30
900202b0:	0e1b      	lsrs	r3, r3, #24
900202b2:	9313      	str	r3, [sp, #76]	; 0x4c
900202b4:	b289      	uxth	r1, r1
900202b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900202b8:	b280      	uxth	r0, r0
900202ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
900202bc:	fb01 f900 	mul.w	r9, r1, r0
900202c0:	0109      	lsls	r1, r1, #4
900202c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900202c6:	eba1 0809 	sub.w	r8, r1, r9
900202ca:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900202ce:	b280      	uxth	r0, r0
900202d0:	fa1f f888 	uxth.w	r8, r8
900202d4:	1a09      	subs	r1, r1, r0
900202d6:	fb08 f303 	mul.w	r3, r8, r3
900202da:	b289      	uxth	r1, r1
900202dc:	fb01 330e 	mla	r3, r1, lr, r3
900202e0:	fb00 3305 	mla	r3, r0, r5, r3
900202e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900202e6:	fb09 3305 	mla	r3, r9, r5, r3
900202ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
900202ee:	2b00      	cmp	r3, #0
900202f0:	f000 80d2 	beq.w	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900202f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900202f8:	d01b      	beq.n	90020332 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900202fa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900202fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020302:	fb0e fa0a 	mul.w	sl, lr, sl
90020306:	fb0e fe02 	mul.w	lr, lr, r2
9002030a:	ea4f 221a 	mov.w	r2, sl, lsr #8
9002030e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90020312:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90020316:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002031a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9002031e:	4452      	add	r2, sl
90020320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020324:	0a12      	lsrs	r2, r2, #8
90020326:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002032a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002032e:	ea42 020c 	orr.w	r2, r2, ip
90020332:	9d12      	ldr	r5, [sp, #72]	; 0x48
90020334:	2dff      	cmp	r5, #255	; 0xff
90020336:	d021      	beq.n	9002037c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90020338:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002033a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002033e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90020340:	fb05 fb0b 	mul.w	fp, r5, fp
90020344:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90020346:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002034a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002034c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020350:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020354:	fb05 fa0a 	mul.w	sl, r5, sl
90020358:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002035c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020360:	44de      	add	lr, fp
90020362:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002036a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002036e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020376:	ea4e 050a 	orr.w	r5, lr, sl
9002037a:	950b      	str	r5, [sp, #44]	; 0x2c
9002037c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002037e:	2dff      	cmp	r5, #255	; 0xff
90020380:	d021      	beq.n	900203c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90020382:	9d08      	ldr	r5, [sp, #32]
90020384:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020388:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002038a:	fb05 fb0b 	mul.w	fp, r5, fp
9002038e:	9d08      	ldr	r5, [sp, #32]
90020390:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90020394:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020396:	fb05 fa0e 	mul.w	sl, r5, lr
9002039a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002039e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900203a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900203a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900203aa:	44de      	add	lr, fp
900203ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900203b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900203b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900203b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900203bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900203c0:	ea4e 050a 	orr.w	r5, lr, sl
900203c4:	9508      	str	r5, [sp, #32]
900203c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900203c8:	2dff      	cmp	r5, #255	; 0xff
900203ca:	d021      	beq.n	90020410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900203cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900203ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900203d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900203d4:	fb05 fb0b 	mul.w	fp, r5, fp
900203d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900203da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900203de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900203e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900203e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900203e8:	fb05 fa0a 	mul.w	sl, r5, sl
900203ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900203f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900203f4:	44de      	add	lr, fp
900203f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900203fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900203fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020402:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020406:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002040a:	ea4e 050a 	orr.w	r5, lr, sl
9002040e:	950c      	str	r5, [sp, #48]	; 0x30
90020410:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90020412:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90020416:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002041a:	2bff      	cmp	r3, #255	; 0xff
9002041c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020420:	9d08      	ldr	r5, [sp, #32]
90020422:	fb08 fc0c 	mul.w	ip, r8, ip
90020426:	fb01 cc0e 	mla	ip, r1, lr, ip
9002042a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002042e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020430:	fb00 cc0e 	mla	ip, r0, lr, ip
90020434:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020438:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002043a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002043e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90020442:	fb08 f80e 	mul.w	r8, r8, lr
90020446:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002044a:	fb01 8202 	mla	r2, r1, r2, r8
9002044e:	9908      	ldr	r1, [sp, #32]
90020450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020454:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90020458:	990c      	ldr	r1, [sp, #48]	; 0x30
9002045a:	fb00 220a 	mla	r2, r0, sl, r2
9002045e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90020462:	fb09 2900 	mla	r9, r9, r0, r2
90020466:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002046a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002046e:	ea4c 0c09 	orr.w	ip, ip, r9
90020472:	ea4f 221c 	mov.w	r2, ip, lsr #8
90020476:	f040 8091 	bne.w	9002059c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9002047a:	ea4f 135c 	mov.w	r3, ip, lsr #5
9002047e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90020482:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020486:	f022 0207 	bic.w	r2, r2, #7
9002048a:	431a      	orrs	r2, r3
9002048c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90020490:	ea4c 0c02 	orr.w	ip, ip, r2
90020494:	f8a7 c000 	strh.w	ip, [r7]
90020498:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002049a:	3702      	adds	r7, #2
9002049c:	441c      	add	r4, r3
9002049e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900204a0:	441e      	add	r6, r3
900204a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900204a4:	3b01      	subs	r3, #1
900204a6:	9317      	str	r3, [sp, #92]	; 0x5c
900204a8:	e6c0      	b.n	9002022c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
900204aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900204ac:	441c      	add	r4, r3
900204ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900204b0:	441e      	add	r6, r3
900204b2:	9b07      	ldr	r3, [sp, #28]
900204b4:	3b01      	subs	r3, #1
900204b6:	9307      	str	r3, [sp, #28]
900204b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900204ba:	3302      	adds	r3, #2
900204bc:	930a      	str	r3, [sp, #40]	; 0x28
900204be:	e695      	b.n	900201ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900204c0:	d024      	beq.n	9002050c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
900204c2:	9b07      	ldr	r3, [sp, #28]
900204c4:	9827      	ldr	r0, [sp, #156]	; 0x9c
900204c6:	3b01      	subs	r3, #1
900204c8:	fb00 4003 	mla	r0, r0, r3, r4
900204cc:	1400      	asrs	r0, r0, #16
900204ce:	f53f aeaa 	bmi.w	90020226 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900204d2:	3901      	subs	r1, #1
900204d4:	4288      	cmp	r0, r1
900204d6:	f6bf aea6 	bge.w	90020226 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900204da:	9928      	ldr	r1, [sp, #160]	; 0xa0
900204dc:	fb01 6303 	mla	r3, r1, r3, r6
900204e0:	141b      	asrs	r3, r3, #16
900204e2:	f53f aea0 	bmi.w	90020226 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900204e6:	3a01      	subs	r2, #1
900204e8:	4293      	cmp	r3, r2
900204ea:	f6bf ae9c 	bge.w	90020226 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900204ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
900204f2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
900204f6:	f1bb 0f00 	cmp.w	fp, #0
900204fa:	f300 809a 	bgt.w	90020632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900204fe:	9b07      	ldr	r3, [sp, #28]
90020500:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020506:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002050a:	930a      	str	r3, [sp, #40]	; 0x28
9002050c:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002050e:	2b00      	cmp	r3, #0
90020510:	f340 81ec 	ble.w	900208ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90020514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020518:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002051a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002051e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020522:	eef0 6a62 	vmov.f32	s13, s5
90020526:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002052a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002052e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020532:	ee16 4a90 	vmov	r4, s13
90020536:	eef0 6a43 	vmov.f32	s13, s6
9002053a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002053e:	ee16 6a90 	vmov	r6, s13
90020542:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020546:	ee61 7a27 	vmul.f32	s15, s2, s15
9002054a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002054e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002055a:	ee12 2a90 	vmov	r2, s5
9002055e:	eef0 2a47 	vmov.f32	s5, s14
90020562:	fb92 f3f3 	sdiv	r3, r2, r3
90020566:	ee13 2a10 	vmov	r2, s6
9002056a:	9327      	str	r3, [sp, #156]	; 0x9c
9002056c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002056e:	eeb0 3a67 	vmov.f32	s6, s15
90020572:	fb92 f3f3 	sdiv	r3, r2, r3
90020576:	9328      	str	r3, [sp, #160]	; 0xa0
90020578:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002057a:	9a18      	ldr	r2, [sp, #96]	; 0x60
9002057c:	3b01      	subs	r3, #1
9002057e:	9316      	str	r3, [sp, #88]	; 0x58
90020580:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020582:	bf08      	it	eq
90020584:	4613      	moveq	r3, r2
90020586:	9307      	str	r3, [sp, #28]
90020588:	e622      	b.n	900201d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
9002058a:	2800      	cmp	r0, #0
9002058c:	f43f ae92 	beq.w	900202b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90020590:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90020594:	9308      	str	r3, [sp, #32]
90020596:	0e1b      	lsrs	r3, r3, #24
90020598:	9310      	str	r3, [sp, #64]	; 0x40
9002059a:	e68b      	b.n	900202b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9002059c:	8839      	ldrh	r1, [r7, #0]
9002059e:	43db      	mvns	r3, r3
900205a0:	4dd4      	ldr	r5, [pc, #848]	; (900208f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900205a2:	ea4f 2e21 	mov.w	lr, r1, asr #8
900205a6:	fa5f f883 	uxtb.w	r8, r3
900205aa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900205ae:	10c8      	asrs	r0, r1, #3
900205b0:	00cb      	lsls	r3, r1, #3
900205b2:	fb0e fe08 	mul.w	lr, lr, r8
900205b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900205ba:	b2db      	uxtb	r3, r3
900205bc:	f10e 0101 	add.w	r1, lr, #1
900205c0:	fb00 f008 	mul.w	r0, r0, r8
900205c4:	fb03 f308 	mul.w	r3, r3, r8
900205c8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
900205cc:	ea4f 411c 	mov.w	r1, ip, lsr #16
900205d0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
900205d4:	f100 0e01 	add.w	lr, r0, #1
900205d8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
900205dc:	b2c9      	uxtb	r1, r1
900205de:	eb02 2210 	add.w	r2, r2, r0, lsr #8
900205e2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
900205e6:	00d2      	lsls	r2, r2, #3
900205e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900205ec:	430a      	orrs	r2, r1
900205ee:	1c59      	adds	r1, r3, #1
900205f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900205f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900205f8:	e748      	b.n	9002048c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
900205fa:	f112 0801 	adds.w	r8, r2, #1
900205fe:	f53f af4b 	bmi.w	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90020602:	4543      	cmp	r3, r8
90020604:	f6ff af48 	blt.w	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90020608:	f11c 0801 	adds.w	r8, ip, #1
9002060c:	f53f af44 	bmi.w	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90020610:	45c6      	cmp	lr, r8
90020612:	f6ff af41 	blt.w	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90020616:	b21b      	sxth	r3, r3
90020618:	e9cd 2c01 	strd	r2, ip, [sp, #4]
9002061c:	fa0f f28e 	sxth.w	r2, lr
90020620:	e9cd 1003 	strd	r1, r0, [sp, #12]
90020624:	9200      	str	r2, [sp, #0]
90020626:	4639      	mov	r1, r7
90020628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002062a:	9819      	ldr	r0, [sp, #100]	; 0x64
9002062c:	f7ff fc88 	bl	9001ff40 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90020630:	e732      	b.n	90020498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90020632:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90020634:	1421      	asrs	r1, r4, #16
90020636:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90020638:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002063c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90020640:	1433      	asrs	r3, r6, #16
90020642:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020646:	fb07 1303 	mla	r3, r7, r3, r1
9002064a:	990f      	ldr	r1, [sp, #60]	; 0x3c
9002064c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90020650:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90020654:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90020658:	2a00      	cmp	r2, #0
9002065a:	f000 8108 	beq.w	9002086e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
9002065e:	684d      	ldr	r5, [r1, #4]
90020660:	950d      	str	r5, [sp, #52]	; 0x34
90020662:	0e2d      	lsrs	r5, r5, #24
90020664:	9514      	str	r5, [sp, #80]	; 0x50
90020666:	b178      	cbz	r0, 90020688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020668:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
9002066c:	3f01      	subs	r7, #1
9002066e:	00bf      	lsls	r7, r7, #2
90020670:	3704      	adds	r7, #4
90020672:	eb01 0e07 	add.w	lr, r1, r7
90020676:	59c9      	ldr	r1, [r1, r7]
90020678:	9109      	str	r1, [sp, #36]	; 0x24
9002067a:	0e09      	lsrs	r1, r1, #24
9002067c:	9111      	str	r1, [sp, #68]	; 0x44
9002067e:	f8de 1004 	ldr.w	r1, [lr, #4]
90020682:	910e      	str	r1, [sp, #56]	; 0x38
90020684:	0e09      	lsrs	r1, r1, #24
90020686:	9115      	str	r1, [sp, #84]	; 0x54
90020688:	b292      	uxth	r2, r2
9002068a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002068c:	b280      	uxth	r0, r0
9002068e:	fb02 f900 	mul.w	r9, r2, r0
90020692:	0112      	lsls	r2, r2, #4
90020694:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90020698:	eba2 0e09 	sub.w	lr, r2, r9
9002069c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
900206a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
900206a2:	b280      	uxth	r0, r0
900206a4:	fa1f fe8e 	uxth.w	lr, lr
900206a8:	1a09      	subs	r1, r1, r0
900206aa:	fb0e f202 	mul.w	r2, lr, r2
900206ae:	b289      	uxth	r1, r1
900206b0:	fb01 220c 	mla	r2, r1, ip, r2
900206b4:	fb00 2205 	mla	r2, r0, r5, r2
900206b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
900206ba:	fb09 2205 	mla	r2, r9, r5, r2
900206be:	f3c2 2207 	ubfx	r2, r2, #8, #8
900206c2:	2a00      	cmp	r2, #0
900206c4:	f000 80ca 	beq.w	9002085c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900206c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900206cc:	d019      	beq.n	90020702 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
900206ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900206d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900206d6:	fb0c fa0a 	mul.w	sl, ip, sl
900206da:	fb0c fc03 	mul.w	ip, ip, r3
900206de:	ea4f 231a 	mov.w	r3, sl, lsr #8
900206e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900206e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900206ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900206ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900206f2:	4453      	add	r3, sl
900206f4:	0a3f      	lsrs	r7, r7, #8
900206f6:	0a1b      	lsrs	r3, r3, #8
900206f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900206fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90020700:	433b      	orrs	r3, r7
90020702:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020704:	2dff      	cmp	r5, #255	; 0xff
90020706:	d020      	beq.n	9002074a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90020708:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002070a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002070e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020710:	436f      	muls	r7, r5
90020712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020714:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90020718:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002071c:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002071e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90020722:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020726:	fb05 fa0a 	mul.w	sl, r5, sl
9002072a:	44bc      	add	ip, r7
9002072c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90020730:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020734:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90020738:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002073c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020740:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020744:	ea4c 050a 	orr.w	r5, ip, sl
90020748:	950d      	str	r5, [sp, #52]	; 0x34
9002074a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002074c:	2dff      	cmp	r5, #255	; 0xff
9002074e:	d020      	beq.n	90020792 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90020750:	9d09      	ldr	r5, [sp, #36]	; 0x24
90020752:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90020756:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020758:	436f      	muls	r7, r5
9002075a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002075c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90020760:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020762:	fb05 fa0c 	mul.w	sl, r5, ip
90020766:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002076a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002076e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020772:	44bc      	add	ip, r7
90020774:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90020778:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002077c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020780:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020784:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020788:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002078c:	ea4c 050a 	orr.w	r5, ip, sl
90020790:	9509      	str	r5, [sp, #36]	; 0x24
90020792:	9d15      	ldr	r5, [sp, #84]	; 0x54
90020794:	2dff      	cmp	r5, #255	; 0xff
90020796:	d020      	beq.n	900207da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90020798:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002079a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002079e:	9d15      	ldr	r5, [sp, #84]	; 0x54
900207a0:	436f      	muls	r7, r5
900207a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900207a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900207a8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900207ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
900207ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900207b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900207b6:	fb05 fa0a 	mul.w	sl, r5, sl
900207ba:	44bc      	add	ip, r7
900207bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900207c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900207c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900207c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900207cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900207d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900207d4:	ea4c 050a 	orr.w	r5, ip, sl
900207d8:	950e      	str	r5, [sp, #56]	; 0x38
900207da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900207dc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900207e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900207e4:	2aff      	cmp	r2, #255	; 0xff
900207e6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900207ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
900207ec:	fb0e f707 	mul.w	r7, lr, r7
900207f0:	fb01 770c 	mla	r7, r1, ip, r7
900207f4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900207f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900207fa:	fb00 770c 	mla	r7, r0, ip, r7
900207fe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020802:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020804:	fb09 770c 	mla	r7, r9, ip, r7
90020808:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002080c:	fb0e fe0c 	mul.w	lr, lr, ip
90020810:	ea4f 2717 	mov.w	r7, r7, lsr #8
90020814:	fb01 e303 	mla	r3, r1, r3, lr
90020818:	9909      	ldr	r1, [sp, #36]	; 0x24
9002081a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9002081e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90020822:	990e      	ldr	r1, [sp, #56]	; 0x38
90020824:	fb00 330a 	mla	r3, r0, sl, r3
90020828:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9002082c:	fb09 3c0c 	mla	ip, r9, ip, r3
90020830:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020834:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90020838:	ea47 070c 	orr.w	r7, r7, ip
9002083c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90020840:	d11e      	bne.n	90020880 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90020842:	097a      	lsrs	r2, r7, #5
90020844:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90020848:	f3c7 07c4 	ubfx	r7, r7, #3, #5
9002084c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020850:	f023 0307 	bic.w	r3, r3, #7
90020854:	4313      	orrs	r3, r2
90020856:	431f      	orrs	r7, r3
90020858:	f8a8 7000 	strh.w	r7, [r8]
9002085c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002085e:	f108 0802 	add.w	r8, r8, #2
90020862:	f10b 3bff 	add.w	fp, fp, #4294967295
90020866:	441c      	add	r4, r3
90020868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002086a:	441e      	add	r6, r3
9002086c:	e643      	b.n	900204f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
9002086e:	2800      	cmp	r0, #0
90020870:	f43f af0a 	beq.w	90020688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020874:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90020878:	9109      	str	r1, [sp, #36]	; 0x24
9002087a:	0e09      	lsrs	r1, r1, #24
9002087c:	9111      	str	r1, [sp, #68]	; 0x44
9002087e:	e703      	b.n	90020688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020880:	f8b8 1000 	ldrh.w	r1, [r8]
90020884:	43d2      	mvns	r2, r2
90020886:	ea4f 2c21 	mov.w	ip, r1, asr #8
9002088a:	fa5f fe82 	uxtb.w	lr, r2
9002088e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020892:	10c8      	asrs	r0, r1, #3
90020894:	00ca      	lsls	r2, r1, #3
90020896:	fb0c fc0e 	mul.w	ip, ip, lr
9002089a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002089e:	b2d2      	uxtb	r2, r2
900208a0:	f10c 0101 	add.w	r1, ip, #1
900208a4:	fb00 f00e 	mul.w	r0, r0, lr
900208a8:	fb02 f20e 	mul.w	r2, r2, lr
900208ac:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900208b0:	0c39      	lsrs	r1, r7, #16
900208b2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900208b6:	490f      	ldr	r1, [pc, #60]	; (900208f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900208b8:	fa5f fc8c 	uxtb.w	ip, ip
900208bc:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
900208c0:	1c41      	adds	r1, r0, #1
900208c2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900208c6:	1c51      	adds	r1, r2, #1
900208c8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900208cc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900208d0:	00c0      	lsls	r0, r0, #3
900208d2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
900208d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900208da:	f3c7 07c4 	ubfx	r7, r7, #3, #5
900208de:	ea4c 0c00 	orr.w	ip, ip, r0
900208e2:	ea47 0c0c 	orr.w	ip, r7, ip
900208e6:	f8a8 c000 	strh.w	ip, [r8]
900208ea:	e7b7      	b.n	9002085c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900208ec:	b01b      	add	sp, #108	; 0x6c
900208ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900208f2:	bf00      	nop
900208f4:	fffff800 	.word	0xfffff800

900208f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
900208f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900208fc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90020900:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90020904:	2d00      	cmp	r5, #0
90020906:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002090a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002090e:	fb05 0e03 	mla	lr, r5, r3, r0
90020912:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90020916:	f2c0 808c 	blt.w	90020a32 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
9002091a:	45a9      	cmp	r9, r5
9002091c:	f340 8089 	ble.w	90020a32 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90020920:	2800      	cmp	r0, #0
90020922:	f2c0 8084 	blt.w	90020a2e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90020926:	4580      	cmp	r8, r0
90020928:	f340 8081 	ble.w	90020a2e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
9002092c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90020930:	f01e 0f01 	tst.w	lr, #1
90020934:	5d16      	ldrb	r6, [r2, r4]
90020936:	bf0c      	ite	eq
90020938:	f006 060f 	andeq.w	r6, r6, #15
9002093c:	1136      	asrne	r6, r6, #4
9002093e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90020942:	b2f6      	uxtb	r6, r6
90020944:	1c44      	adds	r4, r0, #1
90020946:	d477      	bmi.n	90020a38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90020948:	45a0      	cmp	r8, r4
9002094a:	dd75      	ble.n	90020a38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
9002094c:	2f00      	cmp	r7, #0
9002094e:	d075      	beq.n	90020a3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90020950:	f10e 0a01 	add.w	sl, lr, #1
90020954:	ea4f 045a 	mov.w	r4, sl, lsr #1
90020958:	f01a 0f01 	tst.w	sl, #1
9002095c:	5d14      	ldrb	r4, [r2, r4]
9002095e:	bf0c      	ite	eq
90020960:	f004 040f 	andeq.w	r4, r4, #15
90020964:	1124      	asrne	r4, r4, #4
90020966:	eb04 1404 	add.w	r4, r4, r4, lsl #4
9002096a:	b2e4      	uxtb	r4, r4
9002096c:	3501      	adds	r5, #1
9002096e:	d469      	bmi.n	90020a44 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90020970:	45a9      	cmp	r9, r5
90020972:	dd67      	ble.n	90020a44 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90020974:	f1bc 0f00 	cmp.w	ip, #0
90020978:	d067      	beq.n	90020a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
9002097a:	2800      	cmp	r0, #0
9002097c:	db60      	blt.n	90020a40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
9002097e:	4580      	cmp	r8, r0
90020980:	dd5e      	ble.n	90020a40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90020982:	eb03 090e 	add.w	r9, r3, lr
90020986:	ea4f 0559 	mov.w	r5, r9, lsr #1
9002098a:	f019 0f01 	tst.w	r9, #1
9002098e:	5d55      	ldrb	r5, [r2, r5]
90020990:	bf0c      	ite	eq
90020992:	f005 050f 	andeq.w	r5, r5, #15
90020996:	112d      	asrne	r5, r5, #4
90020998:	eb05 1505 	add.w	r5, r5, r5, lsl #4
9002099c:	b2ed      	uxtb	r5, r5
9002099e:	3001      	adds	r0, #1
900209a0:	d456      	bmi.n	90020a50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900209a2:	4580      	cmp	r8, r0
900209a4:	dd54      	ble.n	90020a50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900209a6:	2f00      	cmp	r7, #0
900209a8:	d054      	beq.n	90020a54 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
900209aa:	3301      	adds	r3, #1
900209ac:	449e      	add	lr, r3
900209ae:	ea4f 035e 	mov.w	r3, lr, lsr #1
900209b2:	f01e 0f01 	tst.w	lr, #1
900209b6:	5cd0      	ldrb	r0, [r2, r3]
900209b8:	bf0c      	ite	eq
900209ba:	f000 000f 	andeq.w	r0, r0, #15
900209be:	1100      	asrne	r0, r0, #4
900209c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900209c4:	b2c3      	uxtb	r3, r0
900209c6:	b2ba      	uxth	r2, r7
900209c8:	fa1f fc8c 	uxth.w	ip, ip
900209cc:	fb02 f00c 	mul.w	r0, r2, ip
900209d0:	0112      	lsls	r2, r2, #4
900209d2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900209d6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900209da:	1a12      	subs	r2, r2, r0
900209dc:	fa1f fc8c 	uxth.w	ip, ip
900209e0:	b292      	uxth	r2, r2
900209e2:	eba7 070c 	sub.w	r7, r7, ip
900209e6:	4362      	muls	r2, r4
900209e8:	b2bf      	uxth	r7, r7
900209ea:	fb06 2207 	mla	r2, r6, r7, r2
900209ee:	fb0c 2505 	mla	r5, ip, r5, r2
900209f2:	fb00 5303 	mla	r3, r0, r3, r5
900209f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
900209fa:	b1b3      	cbz	r3, 90020a2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900209fc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90020a00:	435a      	muls	r2, r3
90020a02:	1c53      	adds	r3, r2, #1
90020a04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020a08:	4a2d      	ldr	r2, [pc, #180]	; (90020ac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90020a0a:	121b      	asrs	r3, r3, #8
90020a0c:	6812      	ldr	r2, [r2, #0]
90020a0e:	2bff      	cmp	r3, #255	; 0xff
90020a10:	ea4f 2612 	mov.w	r6, r2, lsr #8
90020a14:	d120      	bne.n	90020a58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90020a16:	0950      	lsrs	r0, r2, #5
90020a18:	4b2a      	ldr	r3, [pc, #168]	; (90020ac4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90020a1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020a1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020a22:	4033      	ands	r3, r6
90020a24:	4318      	orrs	r0, r3
90020a26:	4302      	orrs	r2, r0
90020a28:	800a      	strh	r2, [r1, #0]
90020a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020a2e:	2600      	movs	r6, #0
90020a30:	e788      	b.n	90020944 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90020a32:	2400      	movs	r4, #0
90020a34:	4626      	mov	r6, r4
90020a36:	e799      	b.n	9002096c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90020a38:	2400      	movs	r4, #0
90020a3a:	e797      	b.n	9002096c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90020a3c:	463c      	mov	r4, r7
90020a3e:	e795      	b.n	9002096c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90020a40:	2500      	movs	r5, #0
90020a42:	e7ac      	b.n	9002099e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90020a44:	2300      	movs	r3, #0
90020a46:	461d      	mov	r5, r3
90020a48:	e7bd      	b.n	900209c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020a4a:	4663      	mov	r3, ip
90020a4c:	4665      	mov	r5, ip
90020a4e:	e7ba      	b.n	900209c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020a50:	2300      	movs	r3, #0
90020a52:	e7b8      	b.n	900209c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020a54:	463b      	mov	r3, r7
90020a56:	e7b6      	b.n	900209c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020a58:	880d      	ldrh	r5, [r1, #0]
90020a5a:	b29f      	uxth	r7, r3
90020a5c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90020a60:	43db      	mvns	r3, r3
90020a62:	122c      	asrs	r4, r5, #8
90020a64:	fb10 f007 	smulbb	r0, r0, r7
90020a68:	b2db      	uxtb	r3, r3
90020a6a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90020a6e:	b2f6      	uxtb	r6, r6
90020a70:	b2d2      	uxtb	r2, r2
90020a72:	fb04 0403 	mla	r4, r4, r3, r0
90020a76:	10e8      	asrs	r0, r5, #3
90020a78:	fb12 f207 	smulbb	r2, r2, r7
90020a7c:	00ed      	lsls	r5, r5, #3
90020a7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90020a82:	b2a4      	uxth	r4, r4
90020a84:	fb16 f607 	smulbb	r6, r6, r7
90020a88:	b2ed      	uxtb	r5, r5
90020a8a:	fb00 6603 	mla	r6, r0, r3, r6
90020a8e:	fb05 2303 	mla	r3, r5, r3, r2
90020a92:	b2b0      	uxth	r0, r6
90020a94:	b29a      	uxth	r2, r3
90020a96:	1c63      	adds	r3, r4, #1
90020a98:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90020a9c:	1c53      	adds	r3, r2, #1
90020a9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020aa2:	1c42      	adds	r2, r0, #1
90020aa4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90020aa8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90020aac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020ab0:	0940      	lsrs	r0, r0, #5
90020ab2:	4323      	orrs	r3, r4
90020ab4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020ab8:	4303      	orrs	r3, r0
90020aba:	800b      	strh	r3, [r1, #0]
90020abc:	e7b5      	b.n	90020a2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90020abe:	bf00      	nop
90020ac0:	24026214 	.word	0x24026214
90020ac4:	00fff800 	.word	0x00fff800

90020ac8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020acc:	b097      	sub	sp, #92	; 0x5c
90020ace:	9214      	str	r2, [sp, #80]	; 0x50
90020ad0:	9309      	str	r3, [sp, #36]	; 0x24
90020ad2:	9a25      	ldr	r2, [sp, #148]	; 0x94
90020ad4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90020ad8:	9015      	str	r0, [sp, #84]	; 0x54
90020ada:	910d      	str	r1, [sp, #52]	; 0x34
90020adc:	6850      	ldr	r0, [r2, #4]
90020ade:	930f      	str	r3, [sp, #60]	; 0x3c
90020ae0:	6812      	ldr	r2, [r2, #0]
90020ae2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90020ae6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90020aea:	fb00 1303 	mla	r3, r0, r3, r1
90020aee:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90020af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90020af4:	689b      	ldr	r3, [r3, #8]
90020af6:	3301      	adds	r3, #1
90020af8:	f023 0301 	bic.w	r3, r3, #1
90020afc:	930a      	str	r3, [sp, #40]	; 0x28
90020afe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90020b00:	681f      	ldr	r7, [r3, #0]
90020b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020b04:	2b00      	cmp	r3, #0
90020b06:	dc03      	bgt.n	90020b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90020b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
90020b0a:	2b00      	cmp	r3, #0
90020b0c:	f340 8289 	ble.w	90021022 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90020b10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90020b12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020b16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020b1a:	1e48      	subs	r0, r1, #1
90020b1c:	f102 3cff 	add.w	ip, r2, #4294967295
90020b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b22:	2b00      	cmp	r3, #0
90020b24:	f340 80c5 	ble.w	90020cb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90020b28:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020b2c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020b30:	d406      	bmi.n	90020b40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90020b32:	4586      	cmp	lr, r0
90020b34:	da04      	bge.n	90020b40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90020b36:	2b00      	cmp	r3, #0
90020b38:	db02      	blt.n	90020b40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90020b3a:	4563      	cmp	r3, ip
90020b3c:	f2c0 80ba 	blt.w	90020cb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90020b40:	f11e 0e01 	adds.w	lr, lr, #1
90020b44:	f100 80ab 	bmi.w	90020c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020b48:	4571      	cmp	r1, lr
90020b4a:	f2c0 80a8 	blt.w	90020c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020b4e:	3301      	adds	r3, #1
90020b50:	f100 80a5 	bmi.w	90020c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020b54:	429a      	cmp	r2, r3
90020b56:	f2c0 80a2 	blt.w	90020c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b5c:	46c8      	mov	r8, r9
90020b5e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90020b62:	930e      	str	r3, [sp, #56]	; 0x38
90020b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020b66:	2b00      	cmp	r3, #0
90020b68:	f340 80c4 	ble.w	90020cf4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90020b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90020b6e:	1430      	asrs	r0, r6, #16
90020b70:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020b74:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020b78:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90020b7c:	1423      	asrs	r3, r4, #16
90020b7e:	f100 814f 	bmi.w	90020e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020b82:	f10c 3bff 	add.w	fp, ip, #4294967295
90020b86:	455b      	cmp	r3, fp
90020b88:	f280 814a 	bge.w	90020e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020b8c:	2800      	cmp	r0, #0
90020b8e:	f2c0 8147 	blt.w	90020e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020b92:	f10e 3bff 	add.w	fp, lr, #4294967295
90020b96:	4558      	cmp	r0, fp
90020b98:	f280 8142 	bge.w	90020e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020b9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90020b9e:	fb00 3305 	mla	r3, r0, r5, r3
90020ba2:	0858      	lsrs	r0, r3, #1
90020ba4:	07dd      	lsls	r5, r3, #31
90020ba6:	f817 c000 	ldrb.w	ip, [r7, r0]
90020baa:	bf54      	ite	pl
90020bac:	f00c 0c0f 	andpl.w	ip, ip, #15
90020bb0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020bb4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020bb8:	fa5f fc8c 	uxtb.w	ip, ip
90020bbc:	2a00      	cmp	r2, #0
90020bbe:	f000 80dd 	beq.w	90020d7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90020bc2:	1c58      	adds	r0, r3, #1
90020bc4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90020bc8:	07c0      	lsls	r0, r0, #31
90020bca:	f817 e00e 	ldrb.w	lr, [r7, lr]
90020bce:	bf54      	ite	pl
90020bd0:	f00e 0e0f 	andpl.w	lr, lr, #15
90020bd4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90020bd8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90020bdc:	fa5f f08e 	uxtb.w	r0, lr
90020be0:	9010      	str	r0, [sp, #64]	; 0x40
90020be2:	b1d9      	cbz	r1, 90020c1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90020be4:	4453      	add	r3, sl
90020be6:	0858      	lsrs	r0, r3, #1
90020be8:	07dd      	lsls	r5, r3, #31
90020bea:	f103 0301 	add.w	r3, r3, #1
90020bee:	5c38      	ldrb	r0, [r7, r0]
90020bf0:	bf54      	ite	pl
90020bf2:	f000 000f 	andpl.w	r0, r0, #15
90020bf6:	1100      	asrmi	r0, r0, #4
90020bf8:	07dd      	lsls	r5, r3, #31
90020bfa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90020bfe:	b2c0      	uxtb	r0, r0
90020c00:	900b      	str	r0, [sp, #44]	; 0x2c
90020c02:	ea4f 0053 	mov.w	r0, r3, lsr #1
90020c06:	f817 e000 	ldrb.w	lr, [r7, r0]
90020c0a:	bf54      	ite	pl
90020c0c:	f00e 030f 	andpl.w	r3, lr, #15
90020c10:	ea4f 132e 	movmi.w	r3, lr, asr #4
90020c14:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90020c18:	b2db      	uxtb	r3, r3
90020c1a:	9311      	str	r3, [sp, #68]	; 0x44
90020c1c:	b292      	uxth	r2, r2
90020c1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020c20:	b289      	uxth	r1, r1
90020c22:	fb02 f301 	mul.w	r3, r2, r1
90020c26:	0112      	lsls	r2, r2, #4
90020c28:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90020c2c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90020c30:	1ad2      	subs	r2, r2, r3
90020c32:	b289      	uxth	r1, r1
90020c34:	b292      	uxth	r2, r2
90020c36:	1a40      	subs	r0, r0, r1
90020c38:	436a      	muls	r2, r5
90020c3a:	b280      	uxth	r0, r0
90020c3c:	fb0c 2c00 	mla	ip, ip, r0, r2
90020c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020c42:	fb01 c102 	mla	r1, r1, r2, ip
90020c46:	9a11      	ldr	r2, [sp, #68]	; 0x44
90020c48:	fb03 1302 	mla	r3, r3, r2, r1
90020c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90020c50:	b1db      	cbz	r3, 90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020c54:	4353      	muls	r3, r2
90020c56:	1c5a      	adds	r2, r3, #1
90020c58:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020c5c:	4ac6      	ldr	r2, [pc, #792]	; (90020f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90020c5e:	121b      	asrs	r3, r3, #8
90020c60:	6812      	ldr	r2, [r2, #0]
90020c62:	2bff      	cmp	r3, #255	; 0xff
90020c64:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90020c68:	f040 8099 	bne.w	90020d9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90020c6c:	0953      	lsrs	r3, r2, #5
90020c6e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90020c72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020c76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020c7a:	f02c 0c07 	bic.w	ip, ip, #7
90020c7e:	ea43 0c0c 	orr.w	ip, r3, ip
90020c82:	ea4c 0202 	orr.w	r2, ip, r2
90020c86:	f8a8 2000 	strh.w	r2, [r8]
90020c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90020c8c:	f108 0802 	add.w	r8, r8, #2
90020c90:	441c      	add	r4, r3
90020c92:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020c94:	441e      	add	r6, r3
90020c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020c98:	3b01      	subs	r3, #1
90020c9a:	930e      	str	r3, [sp, #56]	; 0x38
90020c9c:	e762      	b.n	90020b64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90020c9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90020ca0:	f109 0902 	add.w	r9, r9, #2
90020ca4:	441c      	add	r4, r3
90020ca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020ca8:	441e      	add	r6, r3
90020caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020cac:	3b01      	subs	r3, #1
90020cae:	9309      	str	r3, [sp, #36]	; 0x24
90020cb0:	e736      	b.n	90020b20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020cb2:	d024      	beq.n	90020cfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90020cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020cb6:	9823      	ldr	r0, [sp, #140]	; 0x8c
90020cb8:	3b01      	subs	r3, #1
90020cba:	fb00 4003 	mla	r0, r0, r3, r4
90020cbe:	1400      	asrs	r0, r0, #16
90020cc0:	f53f af4b 	bmi.w	90020b5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020cc4:	3901      	subs	r1, #1
90020cc6:	4288      	cmp	r0, r1
90020cc8:	f6bf af47 	bge.w	90020b5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020ccc:	9924      	ldr	r1, [sp, #144]	; 0x90
90020cce:	fb01 6303 	mla	r3, r1, r3, r6
90020cd2:	141b      	asrs	r3, r3, #16
90020cd4:	f53f af41 	bmi.w	90020b5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020cd8:	3a01      	subs	r2, #1
90020cda:	4293      	cmp	r3, r2
90020cdc:	f6bf af3d 	bge.w	90020b5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020ce0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90020ce4:	46c8      	mov	r8, r9
90020ce6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90020cea:	930e      	str	r3, [sp, #56]	; 0x38
90020cec:	f1bb 0f00 	cmp.w	fp, #0
90020cf0:	f300 80b7 	bgt.w	90020e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90020cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020cf6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020cfa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90020cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020d00:	2b00      	cmp	r3, #0
90020d02:	f340 818e 	ble.w	90021022 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90020d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020d0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020d0c:	ee30 0a04 	vadd.f32	s0, s0, s8
90020d10:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020d14:	eef0 6a62 	vmov.f32	s13, s5
90020d18:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020d1c:	ee31 1a05 	vadd.f32	s2, s2, s10
90020d20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020d24:	ee16 4a90 	vmov	r4, s13
90020d28:	eef0 6a43 	vmov.f32	s13, s6
90020d2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020d30:	ee16 6a90 	vmov	r6, s13
90020d34:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020d38:	ee61 7a27 	vmul.f32	s15, s2, s15
90020d3c:	ee77 2a62 	vsub.f32	s5, s14, s5
90020d40:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020d44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020d48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020d4c:	ee12 2a90 	vmov	r2, s5
90020d50:	eef0 2a47 	vmov.f32	s5, s14
90020d54:	fb92 f3f3 	sdiv	r3, r2, r3
90020d58:	ee13 2a10 	vmov	r2, s6
90020d5c:	9323      	str	r3, [sp, #140]	; 0x8c
90020d5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020d60:	eeb0 3a67 	vmov.f32	s6, s15
90020d64:	fb92 f3f3 	sdiv	r3, r2, r3
90020d68:	9324      	str	r3, [sp, #144]	; 0x90
90020d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90020d6e:	3b01      	subs	r3, #1
90020d70:	930d      	str	r3, [sp, #52]	; 0x34
90020d72:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020d74:	bf08      	it	eq
90020d76:	4613      	moveq	r3, r2
90020d78:	9309      	str	r3, [sp, #36]	; 0x24
90020d7a:	e6c2      	b.n	90020b02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90020d7c:	2900      	cmp	r1, #0
90020d7e:	f43f af4d 	beq.w	90020c1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90020d82:	eb0a 0003 	add.w	r0, sl, r3
90020d86:	0843      	lsrs	r3, r0, #1
90020d88:	07c0      	lsls	r0, r0, #31
90020d8a:	5cfb      	ldrb	r3, [r7, r3]
90020d8c:	bf54      	ite	pl
90020d8e:	f003 030f 	andpl.w	r3, r3, #15
90020d92:	111b      	asrmi	r3, r3, #4
90020d94:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90020d98:	b2db      	uxtb	r3, r3
90020d9a:	930b      	str	r3, [sp, #44]	; 0x2c
90020d9c:	e73e      	b.n	90020c1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90020d9e:	f8b8 e000 	ldrh.w	lr, [r8]
90020da2:	fa1f fb83 	uxth.w	fp, r3
90020da6:	f3c2 4107 	ubfx	r1, r2, #16, #8
90020daa:	43db      	mvns	r3, r3
90020dac:	ea4f 202e 	mov.w	r0, lr, asr #8
90020db0:	fb11 f10b 	smulbb	r1, r1, fp
90020db4:	b2db      	uxtb	r3, r3
90020db6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020dba:	fa5f fc8c 	uxtb.w	ip, ip
90020dbe:	b2d2      	uxtb	r2, r2
90020dc0:	fb00 1003 	mla	r0, r0, r3, r1
90020dc4:	ea4f 01ee 	mov.w	r1, lr, asr #3
90020dc8:	fb1c fc0b 	smulbb	ip, ip, fp
90020dcc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020dd0:	b280      	uxth	r0, r0
90020dd2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020dd6:	fb12 fb0b 	smulbb	fp, r2, fp
90020dda:	fa5f fe8e 	uxtb.w	lr, lr
90020dde:	fb01 cc03 	mla	ip, r1, r3, ip
90020de2:	fb0e bb03 	mla	fp, lr, r3, fp
90020de6:	1c43      	adds	r3, r0, #1
90020de8:	fa1f fc8c 	uxth.w	ip, ip
90020dec:	fa1f fb8b 	uxth.w	fp, fp
90020df0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90020df4:	f10c 0101 	add.w	r1, ip, #1
90020df8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
90020dfc:	f10b 0001 	add.w	r0, fp, #1
90020e00:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90020e04:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90020e08:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020e0c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90020e10:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020e14:	4318      	orrs	r0, r3
90020e16:	ea40 000c 	orr.w	r0, r0, ip
90020e1a:	f8a8 0000 	strh.w	r0, [r8]
90020e1e:	e734      	b.n	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e20:	f113 0b01 	adds.w	fp, r3, #1
90020e24:	f53f af31 	bmi.w	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e28:	45dc      	cmp	ip, fp
90020e2a:	f6ff af2e 	blt.w	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e2e:	f110 0b01 	adds.w	fp, r0, #1
90020e32:	f53f af2a 	bmi.w	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e36:	45de      	cmp	lr, fp
90020e38:	f6ff af27 	blt.w	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e3c:	9302      	str	r3, [sp, #8]
90020e3e:	fa0f f38e 	sxth.w	r3, lr
90020e42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90020e44:	9301      	str	r3, [sp, #4]
90020e46:	fa0f f38c 	sxth.w	r3, ip
90020e4a:	e9cd 0203 	strd	r0, r2, [sp, #12]
90020e4e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90020e52:	9300      	str	r3, [sp, #0]
90020e54:	463a      	mov	r2, r7
90020e56:	4653      	mov	r3, sl
90020e58:	4641      	mov	r1, r8
90020e5a:	9815      	ldr	r0, [sp, #84]	; 0x54
90020e5c:	f7ff fd4c 	bl	900208f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90020e60:	e713      	b.n	90020c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020e62:	1422      	asrs	r2, r4, #16
90020e64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90020e66:	1433      	asrs	r3, r6, #16
90020e68:	f3c4 3103 	ubfx	r1, r4, #12, #4
90020e6c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020e70:	fb05 2303 	mla	r3, r5, r3, r2
90020e74:	085a      	lsrs	r2, r3, #1
90020e76:	07dd      	lsls	r5, r3, #31
90020e78:	5cba      	ldrb	r2, [r7, r2]
90020e7a:	bf54      	ite	pl
90020e7c:	f002 020f 	andpl.w	r2, r2, #15
90020e80:	1112      	asrmi	r2, r2, #4
90020e82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90020e86:	b2d2      	uxtb	r2, r2
90020e88:	2900      	cmp	r1, #0
90020e8a:	d077      	beq.n	90020f7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90020e8c:	f103 0e01 	add.w	lr, r3, #1
90020e90:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90020e94:	f01e 0f01 	tst.w	lr, #1
90020e98:	f817 c00c 	ldrb.w	ip, [r7, ip]
90020e9c:	bf0c      	ite	eq
90020e9e:	f00c 0c0f 	andeq.w	ip, ip, #15
90020ea2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90020ea6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020eaa:	fa5f f58c 	uxtb.w	r5, ip
90020eae:	9512      	str	r5, [sp, #72]	; 0x48
90020eb0:	b308      	cbz	r0, 90020ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020eb2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020eb4:	442b      	add	r3, r5
90020eb6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90020eba:	07dd      	lsls	r5, r3, #31
90020ebc:	f103 0301 	add.w	r3, r3, #1
90020ec0:	f817 c00c 	ldrb.w	ip, [r7, ip]
90020ec4:	bf54      	ite	pl
90020ec6:	f00c 0c0f 	andpl.w	ip, ip, #15
90020eca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020ece:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020ed2:	fa5f f58c 	uxtb.w	r5, ip
90020ed6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90020eda:	950c      	str	r5, [sp, #48]	; 0x30
90020edc:	07dd      	lsls	r5, r3, #31
90020ede:	f817 c00c 	ldrb.w	ip, [r7, ip]
90020ee2:	bf54      	ite	pl
90020ee4:	f00c 0c0f 	andpl.w	ip, ip, #15
90020ee8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020eec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020ef0:	fa5f f38c 	uxtb.w	r3, ip
90020ef4:	9313      	str	r3, [sp, #76]	; 0x4c
90020ef6:	b289      	uxth	r1, r1
90020ef8:	9d12      	ldr	r5, [sp, #72]	; 0x48
90020efa:	b280      	uxth	r0, r0
90020efc:	fb01 f300 	mul.w	r3, r1, r0
90020f00:	0109      	lsls	r1, r1, #4
90020f02:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90020f06:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
90020f0a:	1ac9      	subs	r1, r1, r3
90020f0c:	b280      	uxth	r0, r0
90020f0e:	b289      	uxth	r1, r1
90020f10:	ebac 0c00 	sub.w	ip, ip, r0
90020f14:	4369      	muls	r1, r5
90020f16:	fa1f fc8c 	uxth.w	ip, ip
90020f1a:	fb02 120c 	mla	r2, r2, ip, r1
90020f1e:	990c      	ldr	r1, [sp, #48]	; 0x30
90020f20:	fb00 2001 	mla	r0, r0, r1, r2
90020f24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90020f26:	fb03 0302 	mla	r3, r3, r2, r0
90020f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
90020f2e:	b1d3      	cbz	r3, 90020f66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90020f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020f32:	4353      	muls	r3, r2
90020f34:	1c5a      	adds	r2, r3, #1
90020f36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020f3a:	4a0f      	ldr	r2, [pc, #60]	; (90020f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90020f3c:	121b      	asrs	r3, r3, #8
90020f3e:	6812      	ldr	r2, [r2, #0]
90020f40:	2bff      	cmp	r3, #255	; 0xff
90020f42:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90020f46:	d12d      	bne.n	90020fa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90020f48:	0953      	lsrs	r3, r2, #5
90020f4a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90020f4e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020f52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020f56:	f02c 0c07 	bic.w	ip, ip, #7
90020f5a:	ea43 0c0c 	orr.w	ip, r3, ip
90020f5e:	ea4c 0202 	orr.w	r2, ip, r2
90020f62:	f8a8 2000 	strh.w	r2, [r8]
90020f66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90020f68:	f108 0802 	add.w	r8, r8, #2
90020f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
90020f70:	441c      	add	r4, r3
90020f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020f74:	441e      	add	r6, r3
90020f76:	e6b9      	b.n	90020cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90020f78:	24026214 	.word	0x24026214
90020f7c:	2800      	cmp	r0, #0
90020f7e:	d0ba      	beq.n	90020ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020f80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020f82:	442b      	add	r3, r5
90020f84:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90020f88:	07db      	lsls	r3, r3, #31
90020f8a:	f817 c00c 	ldrb.w	ip, [r7, ip]
90020f8e:	bf54      	ite	pl
90020f90:	f00c 0c0f 	andpl.w	ip, ip, #15
90020f94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020f98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020f9c:	fa5f f38c 	uxtb.w	r3, ip
90020fa0:	930c      	str	r3, [sp, #48]	; 0x30
90020fa2:	e7a8      	b.n	90020ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020fa4:	f8b8 e000 	ldrh.w	lr, [r8]
90020fa8:	fa1f fa83 	uxth.w	sl, r3
90020fac:	f3c2 4107 	ubfx	r1, r2, #16, #8
90020fb0:	43db      	mvns	r3, r3
90020fb2:	ea4f 202e 	mov.w	r0, lr, asr #8
90020fb6:	fb11 f10a 	smulbb	r1, r1, sl
90020fba:	b2db      	uxtb	r3, r3
90020fbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020fc0:	b2d2      	uxtb	r2, r2
90020fc2:	fa5f fc8c 	uxtb.w	ip, ip
90020fc6:	fb00 1003 	mla	r0, r0, r3, r1
90020fca:	ea4f 01ee 	mov.w	r1, lr, asr #3
90020fce:	fb12 f20a 	smulbb	r2, r2, sl
90020fd2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020fd6:	b280      	uxth	r0, r0
90020fd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020fdc:	fb1c fc0a 	smulbb	ip, ip, sl
90020fe0:	fa5f fe8e 	uxtb.w	lr, lr
90020fe4:	fb0e 2203 	mla	r2, lr, r3, r2
90020fe8:	fb01 cc03 	mla	ip, r1, r3, ip
90020fec:	1c43      	adds	r3, r0, #1
90020fee:	b292      	uxth	r2, r2
90020ff0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90020ff4:	1c51      	adds	r1, r2, #1
90020ff6:	fa1f fc8c 	uxth.w	ip, ip
90020ffa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90020ffe:	eb01 2112 	add.w	r1, r1, r2, lsr #8
90021002:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90021006:	4308      	orrs	r0, r1
90021008:	f10c 0101 	add.w	r1, ip, #1
9002100c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021010:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90021014:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90021018:	ea40 000c 	orr.w	r0, r0, ip
9002101c:	f8a8 0000 	strh.w	r0, [r8]
90021020:	e7a1      	b.n	90020f66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90021022:	b017      	add	sp, #92	; 0x5c
90021024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021028 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90021028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002102c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90021030:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021034:	2d00      	cmp	r5, #0
90021036:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002103a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002103e:	fb05 0e03 	mla	lr, r5, r3, r0
90021042:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90021046:	f2c0 80b0 	blt.w	900211aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002104a:	45a9      	cmp	r9, r5
9002104c:	f340 80ad 	ble.w	900211aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90021050:	2800      	cmp	r0, #0
90021052:	f2c0 80a8 	blt.w	900211a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90021056:	4580      	cmp	r8, r0
90021058:	f340 80a5 	ble.w	900211a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002105c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021060:	f01e 0f01 	tst.w	lr, #1
90021064:	5d16      	ldrb	r6, [r2, r4]
90021066:	bf0c      	ite	eq
90021068:	f006 060f 	andeq.w	r6, r6, #15
9002106c:	1136      	asrne	r6, r6, #4
9002106e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021072:	b2f6      	uxtb	r6, r6
90021074:	1c44      	adds	r4, r0, #1
90021076:	f100 809b 	bmi.w	900211b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002107a:	45a0      	cmp	r8, r4
9002107c:	f340 8098 	ble.w	900211b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90021080:	2f00      	cmp	r7, #0
90021082:	f000 8097 	beq.w	900211b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90021086:	f10e 0a01 	add.w	sl, lr, #1
9002108a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002108e:	f01a 0f01 	tst.w	sl, #1
90021092:	5d14      	ldrb	r4, [r2, r4]
90021094:	bf0c      	ite	eq
90021096:	f004 040f 	andeq.w	r4, r4, #15
9002109a:	1124      	asrne	r4, r4, #4
9002109c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900210a0:	b2e4      	uxtb	r4, r4
900210a2:	3501      	adds	r5, #1
900210a4:	f100 808a 	bmi.w	900211bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900210a8:	45a9      	cmp	r9, r5
900210aa:	f340 8087 	ble.w	900211bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900210ae:	f1bc 0f00 	cmp.w	ip, #0
900210b2:	f000 8086 	beq.w	900211c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
900210b6:	2800      	cmp	r0, #0
900210b8:	db7e      	blt.n	900211b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900210ba:	4580      	cmp	r8, r0
900210bc:	dd7c      	ble.n	900211b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900210be:	eb03 090e 	add.w	r9, r3, lr
900210c2:	ea4f 0559 	mov.w	r5, r9, lsr #1
900210c6:	f019 0f01 	tst.w	r9, #1
900210ca:	5d55      	ldrb	r5, [r2, r5]
900210cc:	bf0c      	ite	eq
900210ce:	f005 050f 	andeq.w	r5, r5, #15
900210d2:	112d      	asrne	r5, r5, #4
900210d4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900210d8:	b2ed      	uxtb	r5, r5
900210da:	3001      	adds	r0, #1
900210dc:	d474      	bmi.n	900211c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900210de:	4580      	cmp	r8, r0
900210e0:	dd72      	ble.n	900211c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900210e2:	2f00      	cmp	r7, #0
900210e4:	d072      	beq.n	900211cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
900210e6:	3301      	adds	r3, #1
900210e8:	449e      	add	lr, r3
900210ea:	ea4f 035e 	mov.w	r3, lr, lsr #1
900210ee:	f01e 0f01 	tst.w	lr, #1
900210f2:	5cd0      	ldrb	r0, [r2, r3]
900210f4:	bf0c      	ite	eq
900210f6:	f000 000f 	andeq.w	r0, r0, #15
900210fa:	1100      	asrne	r0, r0, #4
900210fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021100:	b2c3      	uxtb	r3, r0
90021102:	b2ba      	uxth	r2, r7
90021104:	fa1f fc8c 	uxth.w	ip, ip
90021108:	fb02 f00c 	mul.w	r0, r2, ip
9002110c:	0112      	lsls	r2, r2, #4
9002110e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021112:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90021116:	1a12      	subs	r2, r2, r0
90021118:	fa1f fc8c 	uxth.w	ip, ip
9002111c:	b292      	uxth	r2, r2
9002111e:	eba7 070c 	sub.w	r7, r7, ip
90021122:	4362      	muls	r2, r4
90021124:	b2bf      	uxth	r7, r7
90021126:	fb06 2207 	mla	r2, r6, r7, r2
9002112a:	fb0c 2505 	mla	r5, ip, r5, r2
9002112e:	fb00 5303 	mla	r3, r0, r3, r5
90021132:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021136:	b3a3      	cbz	r3, 900211a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90021138:	4a25      	ldr	r2, [pc, #148]	; (900211d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002113a:	880e      	ldrh	r6, [r1, #0]
9002113c:	6815      	ldr	r5, [r2, #0]
9002113e:	b29a      	uxth	r2, r3
90021140:	1234      	asrs	r4, r6, #8
90021142:	43db      	mvns	r3, r3
90021144:	f3c5 4007 	ubfx	r0, r5, #16, #8
90021148:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002114c:	b2db      	uxtb	r3, r3
9002114e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90021152:	fb10 f002 	smulbb	r0, r0, r2
90021156:	b2ed      	uxtb	r5, r5
90021158:	fb17 f702 	smulbb	r7, r7, r2
9002115c:	fb04 0403 	mla	r4, r4, r3, r0
90021160:	10f0      	asrs	r0, r6, #3
90021162:	fb15 f202 	smulbb	r2, r5, r2
90021166:	00f6      	lsls	r6, r6, #3
90021168:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002116c:	b2a4      	uxth	r4, r4
9002116e:	b2f6      	uxtb	r6, r6
90021170:	fb00 7003 	mla	r0, r0, r3, r7
90021174:	fb06 2303 	mla	r3, r6, r3, r2
90021178:	b280      	uxth	r0, r0
9002117a:	b29a      	uxth	r2, r3
9002117c:	1c63      	adds	r3, r4, #1
9002117e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90021182:	1c53      	adds	r3, r2, #1
90021184:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021188:	1c42      	adds	r2, r0, #1
9002118a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9002118e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021192:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021196:	0940      	lsrs	r0, r0, #5
90021198:	4323      	orrs	r3, r4
9002119a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002119e:	4303      	orrs	r3, r0
900211a0:	800b      	strh	r3, [r1, #0]
900211a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900211a6:	2600      	movs	r6, #0
900211a8:	e764      	b.n	90021074 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
900211aa:	2400      	movs	r4, #0
900211ac:	4626      	mov	r6, r4
900211ae:	e778      	b.n	900210a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900211b0:	2400      	movs	r4, #0
900211b2:	e776      	b.n	900210a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900211b4:	463c      	mov	r4, r7
900211b6:	e774      	b.n	900210a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900211b8:	2500      	movs	r5, #0
900211ba:	e78e      	b.n	900210da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
900211bc:	2300      	movs	r3, #0
900211be:	461d      	mov	r5, r3
900211c0:	e79f      	b.n	90021102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900211c2:	4663      	mov	r3, ip
900211c4:	4665      	mov	r5, ip
900211c6:	e79c      	b.n	90021102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900211c8:	2300      	movs	r3, #0
900211ca:	e79a      	b.n	90021102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900211cc:	463b      	mov	r3, r7
900211ce:	e798      	b.n	90021102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900211d0:	24026214 	.word	0x24026214

900211d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900211d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900211d8:	b093      	sub	sp, #76	; 0x4c
900211da:	461d      	mov	r5, r3
900211dc:	920c      	str	r2, [sp, #48]	; 0x30
900211de:	9a21      	ldr	r2, [sp, #132]	; 0x84
900211e0:	9011      	str	r0, [sp, #68]	; 0x44
900211e2:	9107      	str	r1, [sp, #28]
900211e4:	6850      	ldr	r0, [r2, #4]
900211e6:	6812      	ldr	r2, [r2, #0]
900211e8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900211ec:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900211f0:	fb00 1303 	mla	r3, r0, r3, r1
900211f4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900211f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900211fa:	689b      	ldr	r3, [r3, #8]
900211fc:	3301      	adds	r3, #1
900211fe:	f023 0301 	bic.w	r3, r3, #1
90021202:	9306      	str	r3, [sp, #24]
90021204:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021206:	681f      	ldr	r7, [r3, #0]
90021208:	9b07      	ldr	r3, [sp, #28]
9002120a:	2b00      	cmp	r3, #0
9002120c:	dc03      	bgt.n	90021216 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9002120e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021210:	2b00      	cmp	r3, #0
90021212:	f340 8267 	ble.w	900216e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90021216:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021218:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002121c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021220:	1e48      	subs	r0, r1, #1
90021222:	f102 3cff 	add.w	ip, r2, #4294967295
90021226:	2d00      	cmp	r5, #0
90021228:	f340 80b7 	ble.w	9002139a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002122c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90021230:	ea4f 4326 	mov.w	r3, r6, asr #16
90021234:	d406      	bmi.n	90021244 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90021236:	4586      	cmp	lr, r0
90021238:	da04      	bge.n	90021244 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002123a:	2b00      	cmp	r3, #0
9002123c:	db02      	blt.n	90021244 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002123e:	4563      	cmp	r3, ip
90021240:	f2c0 80ac 	blt.w	9002139c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90021244:	f11e 0e01 	adds.w	lr, lr, #1
90021248:	f100 809f 	bmi.w	9002138a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002124c:	4571      	cmp	r1, lr
9002124e:	f2c0 809c 	blt.w	9002138a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90021252:	3301      	adds	r3, #1
90021254:	f100 8099 	bmi.w	9002138a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90021258:	429a      	cmp	r2, r3
9002125a:	f2c0 8096 	blt.w	9002138a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002125e:	46c8      	mov	r8, r9
90021260:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90021264:	9509      	str	r5, [sp, #36]	; 0x24
90021266:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021268:	2b00      	cmp	r3, #0
9002126a:	f340 80b5 	ble.w	900213d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002126e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90021272:	1430      	asrs	r0, r6, #16
90021274:	f3c6 3103 	ubfx	r1, r6, #12, #4
90021278:	9308      	str	r3, [sp, #32]
9002127a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002127c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90021280:	1423      	asrs	r3, r4, #16
90021282:	f100 813f 	bmi.w	90021504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90021286:	f10c 3bff 	add.w	fp, ip, #4294967295
9002128a:	455b      	cmp	r3, fp
9002128c:	f280 813a 	bge.w	90021504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90021290:	2800      	cmp	r0, #0
90021292:	f2c0 8137 	blt.w	90021504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90021296:	f10e 3bff 	add.w	fp, lr, #4294967295
9002129a:	4558      	cmp	r0, fp
9002129c:	f280 8132 	bge.w	90021504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900212a0:	9a06      	ldr	r2, [sp, #24]
900212a2:	fb00 3302 	mla	r3, r0, r2, r3
900212a6:	0858      	lsrs	r0, r3, #1
900212a8:	07da      	lsls	r2, r3, #31
900212aa:	9a08      	ldr	r2, [sp, #32]
900212ac:	f817 c000 	ldrb.w	ip, [r7, r0]
900212b0:	bf54      	ite	pl
900212b2:	f00c 0c0f 	andpl.w	ip, ip, #15
900212b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900212ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900212be:	fa5f fc8c 	uxtb.w	ip, ip
900212c2:	2a00      	cmp	r2, #0
900212c4:	f000 80cc 	beq.w	90021460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900212c8:	1c58      	adds	r0, r3, #1
900212ca:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900212ce:	07c0      	lsls	r0, r0, #31
900212d0:	f817 e00e 	ldrb.w	lr, [r7, lr]
900212d4:	bf54      	ite	pl
900212d6:	f00e 0e0f 	andpl.w	lr, lr, #15
900212da:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900212de:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900212e2:	fa5f fe8e 	uxtb.w	lr, lr
900212e6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900212ea:	b1b9      	cbz	r1, 9002131c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900212ec:	4453      	add	r3, sl
900212ee:	0858      	lsrs	r0, r3, #1
900212f0:	07da      	lsls	r2, r3, #31
900212f2:	5c38      	ldrb	r0, [r7, r0]
900212f4:	bf54      	ite	pl
900212f6:	f000 000f 	andpl.w	r0, r0, #15
900212fa:	1100      	asrmi	r0, r0, #4
900212fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021300:	b2c0      	uxtb	r0, r0
90021302:	900a      	str	r0, [sp, #40]	; 0x28
90021304:	1c58      	adds	r0, r3, #1
90021306:	0843      	lsrs	r3, r0, #1
90021308:	07c2      	lsls	r2, r0, #31
9002130a:	5cfb      	ldrb	r3, [r7, r3]
9002130c:	bf54      	ite	pl
9002130e:	f003 030f 	andpl.w	r3, r3, #15
90021312:	111b      	asrmi	r3, r3, #4
90021314:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90021318:	b2db      	uxtb	r3, r3
9002131a:	930e      	str	r3, [sp, #56]	; 0x38
9002131c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90021320:	b289      	uxth	r1, r1
90021322:	fb02 f301 	mul.w	r3, r2, r1
90021326:	0112      	lsls	r2, r2, #4
90021328:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002132c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90021330:	1ad2      	subs	r2, r2, r3
90021332:	b289      	uxth	r1, r1
90021334:	b292      	uxth	r2, r2
90021336:	1a40      	subs	r0, r0, r1
90021338:	fa1f fe80 	uxth.w	lr, r0
9002133c:	980d      	ldr	r0, [sp, #52]	; 0x34
9002133e:	4342      	muls	r2, r0
90021340:	fb0c 2c0e 	mla	ip, ip, lr, r2
90021344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021346:	fb01 c102 	mla	r1, r1, r2, ip
9002134a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9002134c:	fb03 1302 	mla	r3, r3, r2, r1
90021350:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021354:	2bff      	cmp	r3, #255	; 0xff
90021356:	f040 8094 	bne.w	90021482 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002135a:	4bbf      	ldr	r3, [pc, #764]	; (90021658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002135c:	681a      	ldr	r2, [r3, #0]
9002135e:	4bbf      	ldr	r3, [pc, #764]	; (9002165c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90021360:	0951      	lsrs	r1, r2, #5
90021362:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90021366:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002136a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002136e:	430b      	orrs	r3, r1
90021370:	4313      	orrs	r3, r2
90021372:	f8a8 3000 	strh.w	r3, [r8]
90021376:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021378:	f108 0802 	add.w	r8, r8, #2
9002137c:	441c      	add	r4, r3
9002137e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021380:	441e      	add	r6, r3
90021382:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021384:	3b01      	subs	r3, #1
90021386:	9309      	str	r3, [sp, #36]	; 0x24
90021388:	e76d      	b.n	90021266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002138a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002138c:	3d01      	subs	r5, #1
9002138e:	f109 0902 	add.w	r9, r9, #2
90021392:	441c      	add	r4, r3
90021394:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021396:	441e      	add	r6, r3
90021398:	e745      	b.n	90021226 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002139a:	d021      	beq.n	900213e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9002139c:	1e6b      	subs	r3, r5, #1
9002139e:	981f      	ldr	r0, [sp, #124]	; 0x7c
900213a0:	fb00 4003 	mla	r0, r0, r3, r4
900213a4:	1400      	asrs	r0, r0, #16
900213a6:	f53f af5a 	bmi.w	9002125e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900213aa:	3901      	subs	r1, #1
900213ac:	4288      	cmp	r0, r1
900213ae:	f6bf af56 	bge.w	9002125e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900213b2:	9920      	ldr	r1, [sp, #128]	; 0x80
900213b4:	fb01 6303 	mla	r3, r1, r3, r6
900213b8:	141b      	asrs	r3, r3, #16
900213ba:	f53f af50 	bmi.w	9002125e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900213be:	3a01      	subs	r2, #1
900213c0:	4293      	cmp	r3, r2
900213c2:	f6bf af4c 	bge.w	9002125e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900213c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900213ca:	46a8      	mov	r8, r5
900213cc:	46ce      	mov	lr, r9
900213ce:	9308      	str	r3, [sp, #32]
900213d0:	f1b8 0f00 	cmp.w	r8, #0
900213d4:	f300 80b6 	bgt.w	90021544 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900213d8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900213dc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900213e0:	9b07      	ldr	r3, [sp, #28]
900213e2:	2b00      	cmp	r3, #0
900213e4:	f340 817e 	ble.w	900216e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900213e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900213ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900213ee:	ee30 0a04 	vadd.f32	s0, s0, s8
900213f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900213f6:	eef0 6a62 	vmov.f32	s13, s5
900213fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
900213fe:	ee31 1a05 	vadd.f32	s2, s2, s10
90021402:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021406:	ee16 4a90 	vmov	r4, s13
9002140a:	eef0 6a43 	vmov.f32	s13, s6
9002140e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021412:	ee16 6a90 	vmov	r6, s13
90021416:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002141a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002141e:	ee77 2a62 	vsub.f32	s5, s14, s5
90021422:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021426:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002142a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002142e:	ee12 2a90 	vmov	r2, s5
90021432:	eef0 2a47 	vmov.f32	s5, s14
90021436:	fb92 f3f3 	sdiv	r3, r2, r3
9002143a:	ee13 2a10 	vmov	r2, s6
9002143e:	931f      	str	r3, [sp, #124]	; 0x7c
90021440:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021442:	eeb0 3a67 	vmov.f32	s6, s15
90021446:	fb92 f3f3 	sdiv	r3, r2, r3
9002144a:	9320      	str	r3, [sp, #128]	; 0x80
9002144c:	9b07      	ldr	r3, [sp, #28]
9002144e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90021450:	3b01      	subs	r3, #1
90021452:	9307      	str	r3, [sp, #28]
90021454:	bf08      	it	eq
90021456:	4615      	moveq	r5, r2
90021458:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002145a:	bf18      	it	ne
9002145c:	461d      	movne	r5, r3
9002145e:	e6d3      	b.n	90021208 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90021460:	2900      	cmp	r1, #0
90021462:	f43f af5b 	beq.w	9002131c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90021466:	eb0a 0003 	add.w	r0, sl, r3
9002146a:	0843      	lsrs	r3, r0, #1
9002146c:	07c0      	lsls	r0, r0, #31
9002146e:	5cfb      	ldrb	r3, [r7, r3]
90021470:	bf54      	ite	pl
90021472:	f003 030f 	andpl.w	r3, r3, #15
90021476:	111b      	asrmi	r3, r3, #4
90021478:	eb03 1303 	add.w	r3, r3, r3, lsl #4
9002147c:	b2db      	uxtb	r3, r3
9002147e:	930a      	str	r3, [sp, #40]	; 0x28
90021480:	e74c      	b.n	9002131c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90021482:	2b00      	cmp	r3, #0
90021484:	f43f af77 	beq.w	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021488:	4a73      	ldr	r2, [pc, #460]	; (90021658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002148a:	fa1f fe83 	uxth.w	lr, r3
9002148e:	f8b8 c000 	ldrh.w	ip, [r8]
90021492:	43db      	mvns	r3, r3
90021494:	6810      	ldr	r0, [r2, #0]
90021496:	ea4f 212c 	mov.w	r1, ip, asr #8
9002149a:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002149e:	b2db      	uxtb	r3, r3
900214a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900214a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
900214a8:	fb12 f20e 	smulbb	r2, r2, lr
900214ac:	b2c0      	uxtb	r0, r0
900214ae:	fb1b fb0e 	smulbb	fp, fp, lr
900214b2:	fb01 2103 	mla	r1, r1, r3, r2
900214b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
900214ba:	fb10 fe0e 	smulbb	lr, r0, lr
900214be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900214c2:	b289      	uxth	r1, r1
900214c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900214c8:	fa5f fc8c 	uxtb.w	ip, ip
900214cc:	fb02 b203 	mla	r2, r2, r3, fp
900214d0:	1c48      	adds	r0, r1, #1
900214d2:	fb0c e303 	mla	r3, ip, r3, lr
900214d6:	b292      	uxth	r2, r2
900214d8:	b29b      	uxth	r3, r3
900214da:	eb00 2111 	add.w	r1, r0, r1, lsr #8
900214de:	f102 0b01 	add.w	fp, r2, #1
900214e2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
900214e6:	1c59      	adds	r1, r3, #1
900214e8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900214ec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900214f0:	0952      	lsrs	r2, r2, #5
900214f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900214f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900214fa:	4301      	orrs	r1, r0
900214fc:	4311      	orrs	r1, r2
900214fe:	f8a8 1000 	strh.w	r1, [r8]
90021502:	e738      	b.n	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021504:	f113 0b01 	adds.w	fp, r3, #1
90021508:	f53f af35 	bmi.w	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002150c:	45dc      	cmp	ip, fp
9002150e:	f6ff af32 	blt.w	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021512:	f110 0b01 	adds.w	fp, r0, #1
90021516:	f53f af2e 	bmi.w	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002151a:	45de      	cmp	lr, fp
9002151c:	f6ff af2b 	blt.w	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021520:	9302      	str	r3, [sp, #8]
90021522:	fa0f f38e 	sxth.w	r3, lr
90021526:	9a08      	ldr	r2, [sp, #32]
90021528:	9301      	str	r3, [sp, #4]
9002152a:	fa0f f38c 	sxth.w	r3, ip
9002152e:	9105      	str	r1, [sp, #20]
90021530:	4641      	mov	r1, r8
90021532:	9300      	str	r3, [sp, #0]
90021534:	4653      	mov	r3, sl
90021536:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002153a:	463a      	mov	r2, r7
9002153c:	9811      	ldr	r0, [sp, #68]	; 0x44
9002153e:	f7ff fd73 	bl	90021028 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90021542:	e718      	b.n	90021376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021544:	1422      	asrs	r2, r4, #16
90021546:	9906      	ldr	r1, [sp, #24]
90021548:	1433      	asrs	r3, r6, #16
9002154a:	f3c4 3003 	ubfx	r0, r4, #12, #4
9002154e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90021552:	fb01 2303 	mla	r3, r1, r3, r2
90021556:	085a      	lsrs	r2, r3, #1
90021558:	07d9      	lsls	r1, r3, #31
9002155a:	5cba      	ldrb	r2, [r7, r2]
9002155c:	bf54      	ite	pl
9002155e:	f002 020f 	andpl.w	r2, r2, #15
90021562:	1112      	asrmi	r2, r2, #4
90021564:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90021568:	b2d2      	uxtb	r2, r2
9002156a:	2800      	cmp	r0, #0
9002156c:	d063      	beq.n	90021636 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
9002156e:	f103 0a01 	add.w	sl, r3, #1
90021572:	ea4f 015a 	mov.w	r1, sl, lsr #1
90021576:	f01a 0f01 	tst.w	sl, #1
9002157a:	5c79      	ldrb	r1, [r7, r1]
9002157c:	bf0c      	ite	eq
9002157e:	f001 010f 	andeq.w	r1, r1, #15
90021582:	1109      	asrne	r1, r1, #4
90021584:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90021588:	b2c9      	uxtb	r1, r1
9002158a:	910f      	str	r1, [sp, #60]	; 0x3c
9002158c:	f1bc 0f00 	cmp.w	ip, #0
90021590:	d01a      	beq.n	900215c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90021592:	9908      	ldr	r1, [sp, #32]
90021594:	440b      	add	r3, r1
90021596:	0859      	lsrs	r1, r3, #1
90021598:	f013 0f01 	tst.w	r3, #1
9002159c:	f103 0301 	add.w	r3, r3, #1
900215a0:	5c79      	ldrb	r1, [r7, r1]
900215a2:	bf0c      	ite	eq
900215a4:	f001 010f 	andeq.w	r1, r1, #15
900215a8:	1109      	asrne	r1, r1, #4
900215aa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900215ae:	b2c9      	uxtb	r1, r1
900215b0:	910b      	str	r1, [sp, #44]	; 0x2c
900215b2:	0859      	lsrs	r1, r3, #1
900215b4:	07db      	lsls	r3, r3, #31
900215b6:	5c79      	ldrb	r1, [r7, r1]
900215b8:	bf54      	ite	pl
900215ba:	f001 010f 	andpl.w	r1, r1, #15
900215be:	1109      	asrmi	r1, r1, #4
900215c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900215c4:	b2c9      	uxtb	r1, r1
900215c6:	9110      	str	r1, [sp, #64]	; 0x40
900215c8:	b280      	uxth	r0, r0
900215ca:	fa1f fc8c 	uxth.w	ip, ip
900215ce:	fb00 f30c 	mul.w	r3, r0, ip
900215d2:	0100      	lsls	r0, r0, #4
900215d4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
900215d8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
900215dc:	1ac0      	subs	r0, r0, r3
900215de:	fa1f fc8c 	uxth.w	ip, ip
900215e2:	b280      	uxth	r0, r0
900215e4:	eba1 010c 	sub.w	r1, r1, ip
900215e8:	fa1f fa81 	uxth.w	sl, r1
900215ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
900215ee:	4348      	muls	r0, r1
900215f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900215f2:	fb02 020a 	mla	r2, r2, sl, r0
900215f6:	fb0c 2c01 	mla	ip, ip, r1, r2
900215fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
900215fc:	fb03 c302 	mla	r3, r3, r2, ip
90021600:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021604:	2bff      	cmp	r3, #255	; 0xff
90021606:	d12b      	bne.n	90021660 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90021608:	4b13      	ldr	r3, [pc, #76]	; (90021658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002160a:	681a      	ldr	r2, [r3, #0]
9002160c:	4b13      	ldr	r3, [pc, #76]	; (9002165c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
9002160e:	0951      	lsrs	r1, r2, #5
90021610:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90021614:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021618:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002161c:	430b      	orrs	r3, r1
9002161e:	4313      	orrs	r3, r2
90021620:	f8ae 3000 	strh.w	r3, [lr]
90021624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021626:	f10e 0e02 	add.w	lr, lr, #2
9002162a:	f108 38ff 	add.w	r8, r8, #4294967295
9002162e:	441c      	add	r4, r3
90021630:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021632:	441e      	add	r6, r3
90021634:	e6cc      	b.n	900213d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90021636:	f1bc 0f00 	cmp.w	ip, #0
9002163a:	d0c5      	beq.n	900215c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
9002163c:	9908      	ldr	r1, [sp, #32]
9002163e:	440b      	add	r3, r1
90021640:	0859      	lsrs	r1, r3, #1
90021642:	07db      	lsls	r3, r3, #31
90021644:	5c79      	ldrb	r1, [r7, r1]
90021646:	bf54      	ite	pl
90021648:	f001 010f 	andpl.w	r1, r1, #15
9002164c:	1109      	asrmi	r1, r1, #4
9002164e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90021652:	b2c9      	uxtb	r1, r1
90021654:	910b      	str	r1, [sp, #44]	; 0x2c
90021656:	e7b7      	b.n	900215c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90021658:	24026214 	.word	0x24026214
9002165c:	fffff800 	.word	0xfffff800
90021660:	2b00      	cmp	r3, #0
90021662:	d0df      	beq.n	90021624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90021664:	4a21      	ldr	r2, [pc, #132]	; (900216ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90021666:	fa1f fa83 	uxth.w	sl, r3
9002166a:	f8be c000 	ldrh.w	ip, [lr]
9002166e:	43db      	mvns	r3, r3
90021670:	6810      	ldr	r0, [r2, #0]
90021672:	ea4f 212c 	mov.w	r1, ip, asr #8
90021676:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002167a:	b2db      	uxtb	r3, r3
9002167c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021680:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90021684:	fb12 f20a 	smulbb	r2, r2, sl
90021688:	b2c0      	uxtb	r0, r0
9002168a:	fb1b fb0a 	smulbb	fp, fp, sl
9002168e:	fb01 2103 	mla	r1, r1, r3, r2
90021692:	ea4f 02ec 	mov.w	r2, ip, asr #3
90021696:	fb10 f00a 	smulbb	r0, r0, sl
9002169a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002169e:	b289      	uxth	r1, r1
900216a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900216a4:	fa5f fc8c 	uxtb.w	ip, ip
900216a8:	fb02 b203 	mla	r2, r2, r3, fp
900216ac:	fb0c 0003 	mla	r0, ip, r3, r0
900216b0:	1c4b      	adds	r3, r1, #1
900216b2:	b292      	uxth	r2, r2
900216b4:	b280      	uxth	r0, r0
900216b6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900216ba:	f100 0b01 	add.w	fp, r0, #1
900216be:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900216c2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
900216c6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
900216ca:	ea4b 0101 	orr.w	r1, fp, r1
900216ce:	f102 0b01 	add.w	fp, r2, #1
900216d2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900216d6:	0952      	lsrs	r2, r2, #5
900216d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900216dc:	4311      	orrs	r1, r2
900216de:	f8ae 1000 	strh.w	r1, [lr]
900216e2:	e79f      	b.n	90021624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
900216e4:	b013      	add	sp, #76	; 0x4c
900216e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900216ea:	bf00      	nop
900216ec:	24026214 	.word	0x24026214

900216f0 <CRC_Lock>:
900216f0:	4a20      	ldr	r2, [pc, #128]	; (90021774 <CRC_Lock+0x84>)
900216f2:	b530      	push	{r4, r5, lr}
900216f4:	6813      	ldr	r3, [r2, #0]
900216f6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
900216fa:	f24c 2540 	movw	r5, #49728	; 0xc240
900216fe:	f023 0301 	bic.w	r3, r3, #1
90021702:	6013      	str	r3, [r2, #0]
90021704:	4b1c      	ldr	r3, [pc, #112]	; (90021778 <CRC_Lock+0x88>)
90021706:	681a      	ldr	r2, [r3, #0]
90021708:	4022      	ands	r2, r4
9002170a:	42aa      	cmp	r2, r5
9002170c:	d005      	beq.n	9002171a <CRC_Lock+0x2a>
9002170e:	681b      	ldr	r3, [r3, #0]
90021710:	f24c 2270 	movw	r2, #49776	; 0xc270
90021714:	4023      	ands	r3, r4
90021716:	4293      	cmp	r3, r2
90021718:	d124      	bne.n	90021764 <CRC_Lock+0x74>
9002171a:	4b18      	ldr	r3, [pc, #96]	; (9002177c <CRC_Lock+0x8c>)
9002171c:	681b      	ldr	r3, [r3, #0]
9002171e:	bb0b      	cbnz	r3, 90021764 <CRC_Lock+0x74>
90021720:	4b17      	ldr	r3, [pc, #92]	; (90021780 <CRC_Lock+0x90>)
90021722:	681a      	ldr	r2, [r3, #0]
90021724:	f3c2 020b 	ubfx	r2, r2, #0, #12
90021728:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
9002172c:	d00d      	beq.n	9002174a <CRC_Lock+0x5a>
9002172e:	681a      	ldr	r2, [r3, #0]
90021730:	f240 4483 	movw	r4, #1155	; 0x483
90021734:	f3c2 020b 	ubfx	r2, r2, #0, #12
90021738:	42a2      	cmp	r2, r4
9002173a:	d006      	beq.n	9002174a <CRC_Lock+0x5a>
9002173c:	681b      	ldr	r3, [r3, #0]
9002173e:	f240 4285 	movw	r2, #1157	; 0x485
90021742:	f3c3 030b 	ubfx	r3, r3, #0, #12
90021746:	4293      	cmp	r3, r2
90021748:	d10c      	bne.n	90021764 <CRC_Lock+0x74>
9002174a:	4b0e      	ldr	r3, [pc, #56]	; (90021784 <CRC_Lock+0x94>)
9002174c:	2201      	movs	r2, #1
9002174e:	601a      	str	r2, [r3, #0]
90021750:	681a      	ldr	r2, [r3, #0]
90021752:	2a00      	cmp	r2, #0
90021754:	d1fc      	bne.n	90021750 <CRC_Lock+0x60>
90021756:	4b0c      	ldr	r3, [pc, #48]	; (90021788 <CRC_Lock+0x98>)
90021758:	6018      	str	r0, [r3, #0]
9002175a:	6818      	ldr	r0, [r3, #0]
9002175c:	1a43      	subs	r3, r0, r1
9002175e:	4258      	negs	r0, r3
90021760:	4158      	adcs	r0, r3
90021762:	bd30      	pop	{r4, r5, pc}
90021764:	4b09      	ldr	r3, [pc, #36]	; (9002178c <CRC_Lock+0x9c>)
90021766:	2201      	movs	r2, #1
90021768:	601a      	str	r2, [r3, #0]
9002176a:	681a      	ldr	r2, [r3, #0]
9002176c:	2a00      	cmp	r2, #0
9002176e:	d1fc      	bne.n	9002176a <CRC_Lock+0x7a>
90021770:	4b07      	ldr	r3, [pc, #28]	; (90021790 <CRC_Lock+0xa0>)
90021772:	e7f1      	b.n	90021758 <CRC_Lock+0x68>
90021774:	e0002000 	.word	0xe0002000
90021778:	e000ed00 	.word	0xe000ed00
9002177c:	e0042000 	.word	0xe0042000
90021780:	5c001000 	.word	0x5c001000
90021784:	58024c08 	.word	0x58024c08
90021788:	58024c00 	.word	0x58024c00
9002178c:	40023008 	.word	0x40023008
90021790:	40023000 	.word	0x40023000

90021794 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90021794:	6101      	str	r1, [r0, #16]
90021796:	4770      	bx	lr

90021798 <_ZN8touchgfx8Gestures4tickEv>:
90021798:	7b83      	ldrb	r3, [r0, #14]
9002179a:	b14b      	cbz	r3, 900217b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
9002179c:	8903      	ldrh	r3, [r0, #8]
9002179e:	3301      	adds	r3, #1
900217a0:	b29b      	uxth	r3, r3
900217a2:	2b07      	cmp	r3, #7
900217a4:	8103      	strh	r3, [r0, #8]
900217a6:	bf81      	itttt	hi
900217a8:	2300      	movhi	r3, #0
900217aa:	8143      	strhhi	r3, [r0, #10]
900217ac:	8183      	strhhi	r3, [r0, #12]
900217ae:	7383      	strbhi	r3, [r0, #14]
900217b0:	4770      	bx	lr
	...

900217b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
900217b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900217b8:	4698      	mov	r8, r3
900217ba:	8883      	ldrh	r3, [r0, #4]
900217bc:	4604      	mov	r4, r0
900217be:	4617      	mov	r7, r2
900217c0:	f8ad 3006 	strh.w	r3, [sp, #6]
900217c4:	eba8 0303 	sub.w	r3, r8, r3
900217c8:	4a19      	ldr	r2, [pc, #100]	; (90021830 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
900217ca:	460e      	mov	r6, r1
900217cc:	b21b      	sxth	r3, r3
900217ce:	88c1      	ldrh	r1, [r0, #6]
900217d0:	9200      	str	r2, [sp, #0]
900217d2:	2000      	movs	r0, #0
900217d4:	2b00      	cmp	r3, #0
900217d6:	8aa2      	ldrh	r2, [r4, #20]
900217d8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
900217dc:	bfb8      	it	lt
900217de:	425b      	neglt	r3, r3
900217e0:	f88d 0004 	strb.w	r0, [sp, #4]
900217e4:	f8ad 1008 	strh.w	r1, [sp, #8]
900217e8:	b21b      	sxth	r3, r3
900217ea:	f8ad 800a 	strh.w	r8, [sp, #10]
900217ee:	f8ad 500c 	strh.w	r5, [sp, #12]
900217f2:	4293      	cmp	r3, r2
900217f4:	dc07      	bgt.n	90021806 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
900217f6:	1a69      	subs	r1, r5, r1
900217f8:	b209      	sxth	r1, r1
900217fa:	2900      	cmp	r1, #0
900217fc:	bfb8      	it	lt
900217fe:	4249      	neglt	r1, r1
90021800:	b209      	sxth	r1, r1
90021802:	428a      	cmp	r2, r1
90021804:	da10      	bge.n	90021828 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90021806:	6920      	ldr	r0, [r4, #16]
90021808:	4669      	mov	r1, sp
9002180a:	eba8 0606 	sub.w	r6, r8, r6
9002180e:	1bef      	subs	r7, r5, r7
90021810:	6803      	ldr	r3, [r0, #0]
90021812:	685b      	ldr	r3, [r3, #4]
90021814:	4798      	blx	r3
90021816:	2300      	movs	r3, #0
90021818:	2001      	movs	r0, #1
9002181a:	8166      	strh	r6, [r4, #10]
9002181c:	8123      	strh	r3, [r4, #8]
9002181e:	81a7      	strh	r7, [r4, #12]
90021820:	f8a4 8004 	strh.w	r8, [r4, #4]
90021824:	80e5      	strh	r5, [r4, #6]
90021826:	73a0      	strb	r0, [r4, #14]
90021828:	b004      	add	sp, #16
9002182a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002182e:	bf00      	nop
90021830:	900258e4 	.word	0x900258e4

90021834 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90021834:	b5f0      	push	{r4, r5, r6, r7, lr}
90021836:	461e      	mov	r6, r3
90021838:	1e4b      	subs	r3, r1, #1
9002183a:	b085      	sub	sp, #20
9002183c:	4604      	mov	r4, r0
9002183e:	2b01      	cmp	r3, #1
90021840:	460d      	mov	r5, r1
90021842:	4617      	mov	r7, r2
90021844:	d84b      	bhi.n	900218de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90021846:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9002184a:	1cd3      	adds	r3, r2, #3
9002184c:	b29b      	uxth	r3, r3
9002184e:	2b06      	cmp	r3, #6
90021850:	d916      	bls.n	90021880 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90021852:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 900218f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90021856:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002185a:	f8cd c004 	str.w	ip, [sp, #4]
9002185e:	f04f 0c00 	mov.w	ip, #0
90021862:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90021866:	6900      	ldr	r0, [r0, #16]
90021868:	f8ad 100c 	strh.w	r1, [sp, #12]
9002186c:	a901      	add	r1, sp, #4
9002186e:	f88d c008 	strb.w	ip, [sp, #8]
90021872:	f8ad 200a 	strh.w	r2, [sp, #10]
90021876:	f8ad 300e 	strh.w	r3, [sp, #14]
9002187a:	6803      	ldr	r3, [r0, #0]
9002187c:	689b      	ldr	r3, [r3, #8]
9002187e:	4798      	blx	r3
90021880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021884:	1cd3      	adds	r3, r2, #3
90021886:	b29b      	uxth	r3, r3
90021888:	2b06      	cmp	r3, #6
9002188a:	d916      	bls.n	900218ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002188c:	f8df c064 	ldr.w	ip, [pc, #100]	; 900218f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90021890:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90021894:	f8cd c004 	str.w	ip, [sp, #4]
90021898:	f04f 0c01 	mov.w	ip, #1
9002189c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900218a0:	6920      	ldr	r0, [r4, #16]
900218a2:	f8ad 100c 	strh.w	r1, [sp, #12]
900218a6:	a901      	add	r1, sp, #4
900218a8:	f88d c008 	strb.w	ip, [sp, #8]
900218ac:	f8ad 200a 	strh.w	r2, [sp, #10]
900218b0:	f8ad 300e 	strh.w	r3, [sp, #14]
900218b4:	6803      	ldr	r3, [r0, #0]
900218b6:	689b      	ldr	r3, [r3, #8]
900218b8:	4798      	blx	r3
900218ba:	4b0d      	ldr	r3, [pc, #52]	; (900218f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
900218bc:	a901      	add	r1, sp, #4
900218be:	6920      	ldr	r0, [r4, #16]
900218c0:	9301      	str	r3, [sp, #4]
900218c2:	2300      	movs	r3, #0
900218c4:	f88d 5008 	strb.w	r5, [sp, #8]
900218c8:	f8ad 700a 	strh.w	r7, [sp, #10]
900218cc:	f8ad 600c 	strh.w	r6, [sp, #12]
900218d0:	f8ad 300e 	strh.w	r3, [sp, #14]
900218d4:	6803      	ldr	r3, [r0, #0]
900218d6:	681b      	ldr	r3, [r3, #0]
900218d8:	4798      	blx	r3
900218da:	b005      	add	sp, #20
900218dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
900218de:	2900      	cmp	r1, #0
900218e0:	d1eb      	bne.n	900218ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900218e2:	80a2      	strh	r2, [r4, #4]
900218e4:	80c6      	strh	r6, [r0, #6]
900218e6:	60a1      	str	r1, [r4, #8]
900218e8:	81a1      	strh	r1, [r4, #12]
900218ea:	73a1      	strb	r1, [r4, #14]
900218ec:	e7e5      	b.n	900218ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900218ee:	bf00      	nop
900218f0:	900258d0 	.word	0x900258d0
900218f4:	900258f8 	.word	0x900258f8

900218f8 <__aeabi_atexit>:
900218f8:	460b      	mov	r3, r1
900218fa:	4601      	mov	r1, r0
900218fc:	4618      	mov	r0, r3
900218fe:	f000 b90f 	b.w	90021b20 <__cxa_atexit>

90021902 <_ZdlPvj>:
90021902:	f000 b812 	b.w	9002192a <_ZdlPv>

90021906 <__cxa_guard_acquire>:
90021906:	6803      	ldr	r3, [r0, #0]
90021908:	07db      	lsls	r3, r3, #31
9002190a:	d406      	bmi.n	9002191a <__cxa_guard_acquire+0x14>
9002190c:	7843      	ldrb	r3, [r0, #1]
9002190e:	b103      	cbz	r3, 90021912 <__cxa_guard_acquire+0xc>
90021910:	deff      	udf	#255	; 0xff
90021912:	2301      	movs	r3, #1
90021914:	7043      	strb	r3, [r0, #1]
90021916:	4618      	mov	r0, r3
90021918:	4770      	bx	lr
9002191a:	2000      	movs	r0, #0
9002191c:	4770      	bx	lr

9002191e <__cxa_guard_release>:
9002191e:	2301      	movs	r3, #1
90021920:	6003      	str	r3, [r0, #0]
90021922:	4770      	bx	lr

90021924 <__cxa_pure_virtual>:
90021924:	b508      	push	{r3, lr}
90021926:	f000 f80f 	bl	90021948 <_ZSt9terminatev>

9002192a <_ZdlPv>:
9002192a:	f000 b845 	b.w	900219b8 <free>

9002192e <_ZN10__cxxabiv111__terminateEPFvvE>:
9002192e:	b508      	push	{r3, lr}
90021930:	4780      	blx	r0
90021932:	f000 f80e 	bl	90021952 <abort>
	...

90021938 <_ZSt13get_terminatev>:
90021938:	4b02      	ldr	r3, [pc, #8]	; (90021944 <_ZSt13get_terminatev+0xc>)
9002193a:	6818      	ldr	r0, [r3, #0]
9002193c:	f3bf 8f5b 	dmb	ish
90021940:	4770      	bx	lr
90021942:	bf00      	nop
90021944:	240000dc 	.word	0x240000dc

90021948 <_ZSt9terminatev>:
90021948:	b508      	push	{r3, lr}
9002194a:	f7ff fff5 	bl	90021938 <_ZSt13get_terminatev>
9002194e:	f7ff ffee 	bl	9002192e <_ZN10__cxxabiv111__terminateEPFvvE>

90021952 <abort>:
90021952:	b508      	push	{r3, lr}
90021954:	2006      	movs	r0, #6
90021956:	f000 fadf 	bl	90021f18 <raise>
9002195a:	2001      	movs	r0, #1
9002195c:	f7e3 f9ac 	bl	90004cb8 <_exit>

90021960 <__assert_func>:
90021960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90021962:	4614      	mov	r4, r2
90021964:	461a      	mov	r2, r3
90021966:	4b09      	ldr	r3, [pc, #36]	; (9002198c <__assert_func+0x2c>)
90021968:	681b      	ldr	r3, [r3, #0]
9002196a:	4605      	mov	r5, r0
9002196c:	68d8      	ldr	r0, [r3, #12]
9002196e:	b14c      	cbz	r4, 90021984 <__assert_func+0x24>
90021970:	4b07      	ldr	r3, [pc, #28]	; (90021990 <__assert_func+0x30>)
90021972:	9100      	str	r1, [sp, #0]
90021974:	e9cd 3401 	strd	r3, r4, [sp, #4]
90021978:	4906      	ldr	r1, [pc, #24]	; (90021994 <__assert_func+0x34>)
9002197a:	462b      	mov	r3, r5
9002197c:	f000 f982 	bl	90021c84 <fiprintf>
90021980:	f7ff ffe7 	bl	90021952 <abort>
90021984:	4b04      	ldr	r3, [pc, #16]	; (90021998 <__assert_func+0x38>)
90021986:	461c      	mov	r4, r3
90021988:	e7f3      	b.n	90021972 <__assert_func+0x12>
9002198a:	bf00      	nop
9002198c:	24000138 	.word	0x24000138
90021990:	90025bc0 	.word	0x90025bc0
90021994:	90025bcd 	.word	0x90025bcd
90021998:	90025bfb 	.word	0x90025bfb

9002199c <atexit>:
9002199c:	2300      	movs	r3, #0
9002199e:	4601      	mov	r1, r0
900219a0:	461a      	mov	r2, r3
900219a2:	4618      	mov	r0, r3
900219a4:	f000 bb66 	b.w	90022074 <__register_exitproc>

900219a8 <malloc>:
900219a8:	4b02      	ldr	r3, [pc, #8]	; (900219b4 <malloc+0xc>)
900219aa:	4601      	mov	r1, r0
900219ac:	6818      	ldr	r0, [r3, #0]
900219ae:	f000 b82b 	b.w	90021a08 <_malloc_r>
900219b2:	bf00      	nop
900219b4:	24000138 	.word	0x24000138

900219b8 <free>:
900219b8:	4b02      	ldr	r3, [pc, #8]	; (900219c4 <free+0xc>)
900219ba:	4601      	mov	r1, r0
900219bc:	6818      	ldr	r0, [r3, #0]
900219be:	f000 bbb7 	b.w	90022130 <_free_r>
900219c2:	bf00      	nop
900219c4:	24000138 	.word	0x24000138

900219c8 <sbrk_aligned>:
900219c8:	b570      	push	{r4, r5, r6, lr}
900219ca:	4e0e      	ldr	r6, [pc, #56]	; (90021a04 <sbrk_aligned+0x3c>)
900219cc:	460c      	mov	r4, r1
900219ce:	6831      	ldr	r1, [r6, #0]
900219d0:	4605      	mov	r5, r0
900219d2:	b911      	cbnz	r1, 900219da <sbrk_aligned+0x12>
900219d4:	f000 faf0 	bl	90021fb8 <_sbrk_r>
900219d8:	6030      	str	r0, [r6, #0]
900219da:	4621      	mov	r1, r4
900219dc:	4628      	mov	r0, r5
900219de:	f000 faeb 	bl	90021fb8 <_sbrk_r>
900219e2:	1c43      	adds	r3, r0, #1
900219e4:	d00a      	beq.n	900219fc <sbrk_aligned+0x34>
900219e6:	1cc4      	adds	r4, r0, #3
900219e8:	f024 0403 	bic.w	r4, r4, #3
900219ec:	42a0      	cmp	r0, r4
900219ee:	d007      	beq.n	90021a00 <sbrk_aligned+0x38>
900219f0:	1a21      	subs	r1, r4, r0
900219f2:	4628      	mov	r0, r5
900219f4:	f000 fae0 	bl	90021fb8 <_sbrk_r>
900219f8:	3001      	adds	r0, #1
900219fa:	d101      	bne.n	90021a00 <sbrk_aligned+0x38>
900219fc:	f04f 34ff 	mov.w	r4, #4294967295
90021a00:	4620      	mov	r0, r4
90021a02:	bd70      	pop	{r4, r5, r6, pc}
90021a04:	2402630c 	.word	0x2402630c

90021a08 <_malloc_r>:
90021a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90021a0c:	1ccd      	adds	r5, r1, #3
90021a0e:	f025 0503 	bic.w	r5, r5, #3
90021a12:	3508      	adds	r5, #8
90021a14:	2d0c      	cmp	r5, #12
90021a16:	bf38      	it	cc
90021a18:	250c      	movcc	r5, #12
90021a1a:	2d00      	cmp	r5, #0
90021a1c:	4607      	mov	r7, r0
90021a1e:	db01      	blt.n	90021a24 <_malloc_r+0x1c>
90021a20:	42a9      	cmp	r1, r5
90021a22:	d905      	bls.n	90021a30 <_malloc_r+0x28>
90021a24:	230c      	movs	r3, #12
90021a26:	603b      	str	r3, [r7, #0]
90021a28:	2600      	movs	r6, #0
90021a2a:	4630      	mov	r0, r6
90021a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90021a30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90021b04 <_malloc_r+0xfc>
90021a34:	f000 f868 	bl	90021b08 <__malloc_lock>
90021a38:	f8d8 3000 	ldr.w	r3, [r8]
90021a3c:	461c      	mov	r4, r3
90021a3e:	bb5c      	cbnz	r4, 90021a98 <_malloc_r+0x90>
90021a40:	4629      	mov	r1, r5
90021a42:	4638      	mov	r0, r7
90021a44:	f7ff ffc0 	bl	900219c8 <sbrk_aligned>
90021a48:	1c43      	adds	r3, r0, #1
90021a4a:	4604      	mov	r4, r0
90021a4c:	d155      	bne.n	90021afa <_malloc_r+0xf2>
90021a4e:	f8d8 4000 	ldr.w	r4, [r8]
90021a52:	4626      	mov	r6, r4
90021a54:	2e00      	cmp	r6, #0
90021a56:	d145      	bne.n	90021ae4 <_malloc_r+0xdc>
90021a58:	2c00      	cmp	r4, #0
90021a5a:	d048      	beq.n	90021aee <_malloc_r+0xe6>
90021a5c:	6823      	ldr	r3, [r4, #0]
90021a5e:	4631      	mov	r1, r6
90021a60:	4638      	mov	r0, r7
90021a62:	eb04 0903 	add.w	r9, r4, r3
90021a66:	f000 faa7 	bl	90021fb8 <_sbrk_r>
90021a6a:	4581      	cmp	r9, r0
90021a6c:	d13f      	bne.n	90021aee <_malloc_r+0xe6>
90021a6e:	6821      	ldr	r1, [r4, #0]
90021a70:	1a6d      	subs	r5, r5, r1
90021a72:	4629      	mov	r1, r5
90021a74:	4638      	mov	r0, r7
90021a76:	f7ff ffa7 	bl	900219c8 <sbrk_aligned>
90021a7a:	3001      	adds	r0, #1
90021a7c:	d037      	beq.n	90021aee <_malloc_r+0xe6>
90021a7e:	6823      	ldr	r3, [r4, #0]
90021a80:	442b      	add	r3, r5
90021a82:	6023      	str	r3, [r4, #0]
90021a84:	f8d8 3000 	ldr.w	r3, [r8]
90021a88:	2b00      	cmp	r3, #0
90021a8a:	d038      	beq.n	90021afe <_malloc_r+0xf6>
90021a8c:	685a      	ldr	r2, [r3, #4]
90021a8e:	42a2      	cmp	r2, r4
90021a90:	d12b      	bne.n	90021aea <_malloc_r+0xe2>
90021a92:	2200      	movs	r2, #0
90021a94:	605a      	str	r2, [r3, #4]
90021a96:	e00f      	b.n	90021ab8 <_malloc_r+0xb0>
90021a98:	6822      	ldr	r2, [r4, #0]
90021a9a:	1b52      	subs	r2, r2, r5
90021a9c:	d41f      	bmi.n	90021ade <_malloc_r+0xd6>
90021a9e:	2a0b      	cmp	r2, #11
90021aa0:	d917      	bls.n	90021ad2 <_malloc_r+0xca>
90021aa2:	1961      	adds	r1, r4, r5
90021aa4:	42a3      	cmp	r3, r4
90021aa6:	6025      	str	r5, [r4, #0]
90021aa8:	bf18      	it	ne
90021aaa:	6059      	strne	r1, [r3, #4]
90021aac:	6863      	ldr	r3, [r4, #4]
90021aae:	bf08      	it	eq
90021ab0:	f8c8 1000 	streq.w	r1, [r8]
90021ab4:	5162      	str	r2, [r4, r5]
90021ab6:	604b      	str	r3, [r1, #4]
90021ab8:	4638      	mov	r0, r7
90021aba:	f104 060b 	add.w	r6, r4, #11
90021abe:	f000 f829 	bl	90021b14 <__malloc_unlock>
90021ac2:	f026 0607 	bic.w	r6, r6, #7
90021ac6:	1d23      	adds	r3, r4, #4
90021ac8:	1af2      	subs	r2, r6, r3
90021aca:	d0ae      	beq.n	90021a2a <_malloc_r+0x22>
90021acc:	1b9b      	subs	r3, r3, r6
90021ace:	50a3      	str	r3, [r4, r2]
90021ad0:	e7ab      	b.n	90021a2a <_malloc_r+0x22>
90021ad2:	42a3      	cmp	r3, r4
90021ad4:	6862      	ldr	r2, [r4, #4]
90021ad6:	d1dd      	bne.n	90021a94 <_malloc_r+0x8c>
90021ad8:	f8c8 2000 	str.w	r2, [r8]
90021adc:	e7ec      	b.n	90021ab8 <_malloc_r+0xb0>
90021ade:	4623      	mov	r3, r4
90021ae0:	6864      	ldr	r4, [r4, #4]
90021ae2:	e7ac      	b.n	90021a3e <_malloc_r+0x36>
90021ae4:	4634      	mov	r4, r6
90021ae6:	6876      	ldr	r6, [r6, #4]
90021ae8:	e7b4      	b.n	90021a54 <_malloc_r+0x4c>
90021aea:	4613      	mov	r3, r2
90021aec:	e7cc      	b.n	90021a88 <_malloc_r+0x80>
90021aee:	230c      	movs	r3, #12
90021af0:	603b      	str	r3, [r7, #0]
90021af2:	4638      	mov	r0, r7
90021af4:	f000 f80e 	bl	90021b14 <__malloc_unlock>
90021af8:	e797      	b.n	90021a2a <_malloc_r+0x22>
90021afa:	6025      	str	r5, [r4, #0]
90021afc:	e7dc      	b.n	90021ab8 <_malloc_r+0xb0>
90021afe:	605b      	str	r3, [r3, #4]
90021b00:	deff      	udf	#255	; 0xff
90021b02:	bf00      	nop
90021b04:	24026308 	.word	0x24026308

90021b08 <__malloc_lock>:
90021b08:	4801      	ldr	r0, [pc, #4]	; (90021b10 <__malloc_lock+0x8>)
90021b0a:	f000 baa2 	b.w	90022052 <__retarget_lock_acquire_recursive>
90021b0e:	bf00      	nop
90021b10:	24026451 	.word	0x24026451

90021b14 <__malloc_unlock>:
90021b14:	4801      	ldr	r0, [pc, #4]	; (90021b1c <__malloc_unlock+0x8>)
90021b16:	f000 ba9d 	b.w	90022054 <__retarget_lock_release_recursive>
90021b1a:	bf00      	nop
90021b1c:	24026451 	.word	0x24026451

90021b20 <__cxa_atexit>:
90021b20:	b510      	push	{r4, lr}
90021b22:	4c05      	ldr	r4, [pc, #20]	; (90021b38 <__cxa_atexit+0x18>)
90021b24:	4613      	mov	r3, r2
90021b26:	b12c      	cbz	r4, 90021b34 <__cxa_atexit+0x14>
90021b28:	460a      	mov	r2, r1
90021b2a:	4601      	mov	r1, r0
90021b2c:	2002      	movs	r0, #2
90021b2e:	f000 faa1 	bl	90022074 <__register_exitproc>
90021b32:	bd10      	pop	{r4, pc}
90021b34:	4620      	mov	r0, r4
90021b36:	e7fc      	b.n	90021b32 <__cxa_atexit+0x12>
90021b38:	90022075 	.word	0x90022075

90021b3c <std>:
90021b3c:	2300      	movs	r3, #0
90021b3e:	b510      	push	{r4, lr}
90021b40:	4604      	mov	r4, r0
90021b42:	e9c0 3300 	strd	r3, r3, [r0]
90021b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
90021b4a:	6083      	str	r3, [r0, #8]
90021b4c:	8181      	strh	r1, [r0, #12]
90021b4e:	6643      	str	r3, [r0, #100]	; 0x64
90021b50:	81c2      	strh	r2, [r0, #14]
90021b52:	6183      	str	r3, [r0, #24]
90021b54:	4619      	mov	r1, r3
90021b56:	2208      	movs	r2, #8
90021b58:	305c      	adds	r0, #92	; 0x5c
90021b5a:	f000 f99b 	bl	90021e94 <memset>
90021b5e:	4b0d      	ldr	r3, [pc, #52]	; (90021b94 <std+0x58>)
90021b60:	6263      	str	r3, [r4, #36]	; 0x24
90021b62:	4b0d      	ldr	r3, [pc, #52]	; (90021b98 <std+0x5c>)
90021b64:	62a3      	str	r3, [r4, #40]	; 0x28
90021b66:	4b0d      	ldr	r3, [pc, #52]	; (90021b9c <std+0x60>)
90021b68:	62e3      	str	r3, [r4, #44]	; 0x2c
90021b6a:	4b0d      	ldr	r3, [pc, #52]	; (90021ba0 <std+0x64>)
90021b6c:	6323      	str	r3, [r4, #48]	; 0x30
90021b6e:	4b0d      	ldr	r3, [pc, #52]	; (90021ba4 <std+0x68>)
90021b70:	6224      	str	r4, [r4, #32]
90021b72:	429c      	cmp	r4, r3
90021b74:	d006      	beq.n	90021b84 <std+0x48>
90021b76:	f103 0268 	add.w	r2, r3, #104	; 0x68
90021b7a:	4294      	cmp	r4, r2
90021b7c:	d002      	beq.n	90021b84 <std+0x48>
90021b7e:	33d0      	adds	r3, #208	; 0xd0
90021b80:	429c      	cmp	r4, r3
90021b82:	d105      	bne.n	90021b90 <std+0x54>
90021b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
90021b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90021b8c:	f000 ba60 	b.w	90022050 <__retarget_lock_init_recursive>
90021b90:	bd10      	pop	{r4, pc}
90021b92:	bf00      	nop
90021b94:	90021ce5 	.word	0x90021ce5
90021b98:	90021d07 	.word	0x90021d07
90021b9c:	90021d3f 	.word	0x90021d3f
90021ba0:	90021d63 	.word	0x90021d63
90021ba4:	24026310 	.word	0x24026310

90021ba8 <stdio_exit_handler>:
90021ba8:	4a02      	ldr	r2, [pc, #8]	; (90021bb4 <stdio_exit_handler+0xc>)
90021baa:	4903      	ldr	r1, [pc, #12]	; (90021bb8 <stdio_exit_handler+0x10>)
90021bac:	4803      	ldr	r0, [pc, #12]	; (90021bbc <stdio_exit_handler+0x14>)
90021bae:	f000 b87b 	b.w	90021ca8 <_fwalk_sglue>
90021bb2:	bf00      	nop
90021bb4:	240000e0 	.word	0x240000e0
90021bb8:	9002287d 	.word	0x9002287d
90021bbc:	240000ec 	.word	0x240000ec

90021bc0 <cleanup_stdio>:
90021bc0:	6841      	ldr	r1, [r0, #4]
90021bc2:	4b0c      	ldr	r3, [pc, #48]	; (90021bf4 <cleanup_stdio+0x34>)
90021bc4:	4299      	cmp	r1, r3
90021bc6:	b510      	push	{r4, lr}
90021bc8:	4604      	mov	r4, r0
90021bca:	d001      	beq.n	90021bd0 <cleanup_stdio+0x10>
90021bcc:	f000 fe56 	bl	9002287c <_fflush_r>
90021bd0:	68a1      	ldr	r1, [r4, #8]
90021bd2:	4b09      	ldr	r3, [pc, #36]	; (90021bf8 <cleanup_stdio+0x38>)
90021bd4:	4299      	cmp	r1, r3
90021bd6:	d002      	beq.n	90021bde <cleanup_stdio+0x1e>
90021bd8:	4620      	mov	r0, r4
90021bda:	f000 fe4f 	bl	9002287c <_fflush_r>
90021bde:	68e1      	ldr	r1, [r4, #12]
90021be0:	4b06      	ldr	r3, [pc, #24]	; (90021bfc <cleanup_stdio+0x3c>)
90021be2:	4299      	cmp	r1, r3
90021be4:	d004      	beq.n	90021bf0 <cleanup_stdio+0x30>
90021be6:	4620      	mov	r0, r4
90021be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90021bec:	f000 be46 	b.w	9002287c <_fflush_r>
90021bf0:	bd10      	pop	{r4, pc}
90021bf2:	bf00      	nop
90021bf4:	24026310 	.word	0x24026310
90021bf8:	24026378 	.word	0x24026378
90021bfc:	240263e0 	.word	0x240263e0

90021c00 <global_stdio_init.part.0>:
90021c00:	b510      	push	{r4, lr}
90021c02:	4b0b      	ldr	r3, [pc, #44]	; (90021c30 <global_stdio_init.part.0+0x30>)
90021c04:	4c0b      	ldr	r4, [pc, #44]	; (90021c34 <global_stdio_init.part.0+0x34>)
90021c06:	4a0c      	ldr	r2, [pc, #48]	; (90021c38 <global_stdio_init.part.0+0x38>)
90021c08:	601a      	str	r2, [r3, #0]
90021c0a:	4620      	mov	r0, r4
90021c0c:	2200      	movs	r2, #0
90021c0e:	2104      	movs	r1, #4
90021c10:	f7ff ff94 	bl	90021b3c <std>
90021c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
90021c18:	2201      	movs	r2, #1
90021c1a:	2109      	movs	r1, #9
90021c1c:	f7ff ff8e 	bl	90021b3c <std>
90021c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90021c24:	2202      	movs	r2, #2
90021c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90021c2a:	2112      	movs	r1, #18
90021c2c:	f7ff bf86 	b.w	90021b3c <std>
90021c30:	24026448 	.word	0x24026448
90021c34:	24026310 	.word	0x24026310
90021c38:	90021ba9 	.word	0x90021ba9

90021c3c <__sfp_lock_acquire>:
90021c3c:	4801      	ldr	r0, [pc, #4]	; (90021c44 <__sfp_lock_acquire+0x8>)
90021c3e:	f000 ba08 	b.w	90022052 <__retarget_lock_acquire_recursive>
90021c42:	bf00      	nop
90021c44:	24026452 	.word	0x24026452

90021c48 <__sfp_lock_release>:
90021c48:	4801      	ldr	r0, [pc, #4]	; (90021c50 <__sfp_lock_release+0x8>)
90021c4a:	f000 ba03 	b.w	90022054 <__retarget_lock_release_recursive>
90021c4e:	bf00      	nop
90021c50:	24026452 	.word	0x24026452

90021c54 <__sinit>:
90021c54:	b510      	push	{r4, lr}
90021c56:	4604      	mov	r4, r0
90021c58:	f7ff fff0 	bl	90021c3c <__sfp_lock_acquire>
90021c5c:	6a23      	ldr	r3, [r4, #32]
90021c5e:	b11b      	cbz	r3, 90021c68 <__sinit+0x14>
90021c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90021c64:	f7ff bff0 	b.w	90021c48 <__sfp_lock_release>
90021c68:	4b04      	ldr	r3, [pc, #16]	; (90021c7c <__sinit+0x28>)
90021c6a:	6223      	str	r3, [r4, #32]
90021c6c:	4b04      	ldr	r3, [pc, #16]	; (90021c80 <__sinit+0x2c>)
90021c6e:	681b      	ldr	r3, [r3, #0]
90021c70:	2b00      	cmp	r3, #0
90021c72:	d1f5      	bne.n	90021c60 <__sinit+0xc>
90021c74:	f7ff ffc4 	bl	90021c00 <global_stdio_init.part.0>
90021c78:	e7f2      	b.n	90021c60 <__sinit+0xc>
90021c7a:	bf00      	nop
90021c7c:	90021bc1 	.word	0x90021bc1
90021c80:	24026448 	.word	0x24026448

90021c84 <fiprintf>:
90021c84:	b40e      	push	{r1, r2, r3}
90021c86:	b503      	push	{r0, r1, lr}
90021c88:	4601      	mov	r1, r0
90021c8a:	ab03      	add	r3, sp, #12
90021c8c:	4805      	ldr	r0, [pc, #20]	; (90021ca4 <fiprintf+0x20>)
90021c8e:	f853 2b04 	ldr.w	r2, [r3], #4
90021c92:	6800      	ldr	r0, [r0, #0]
90021c94:	9301      	str	r3, [sp, #4]
90021c96:	f000 fac1 	bl	9002221c <_vfiprintf_r>
90021c9a:	b002      	add	sp, #8
90021c9c:	f85d eb04 	ldr.w	lr, [sp], #4
90021ca0:	b003      	add	sp, #12
90021ca2:	4770      	bx	lr
90021ca4:	24000138 	.word	0x24000138

90021ca8 <_fwalk_sglue>:
90021ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90021cac:	4607      	mov	r7, r0
90021cae:	4688      	mov	r8, r1
90021cb0:	4614      	mov	r4, r2
90021cb2:	2600      	movs	r6, #0
90021cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90021cb8:	f1b9 0901 	subs.w	r9, r9, #1
90021cbc:	d505      	bpl.n	90021cca <_fwalk_sglue+0x22>
90021cbe:	6824      	ldr	r4, [r4, #0]
90021cc0:	2c00      	cmp	r4, #0
90021cc2:	d1f7      	bne.n	90021cb4 <_fwalk_sglue+0xc>
90021cc4:	4630      	mov	r0, r6
90021cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90021cca:	89ab      	ldrh	r3, [r5, #12]
90021ccc:	2b01      	cmp	r3, #1
90021cce:	d907      	bls.n	90021ce0 <_fwalk_sglue+0x38>
90021cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90021cd4:	3301      	adds	r3, #1
90021cd6:	d003      	beq.n	90021ce0 <_fwalk_sglue+0x38>
90021cd8:	4629      	mov	r1, r5
90021cda:	4638      	mov	r0, r7
90021cdc:	47c0      	blx	r8
90021cde:	4306      	orrs	r6, r0
90021ce0:	3568      	adds	r5, #104	; 0x68
90021ce2:	e7e9      	b.n	90021cb8 <_fwalk_sglue+0x10>

90021ce4 <__sread>:
90021ce4:	b510      	push	{r4, lr}
90021ce6:	460c      	mov	r4, r1
90021ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90021cec:	f000 f93e 	bl	90021f6c <_read_r>
90021cf0:	2800      	cmp	r0, #0
90021cf2:	bfab      	itete	ge
90021cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90021cf6:	89a3      	ldrhlt	r3, [r4, #12]
90021cf8:	181b      	addge	r3, r3, r0
90021cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90021cfe:	bfac      	ite	ge
90021d00:	6563      	strge	r3, [r4, #84]	; 0x54
90021d02:	81a3      	strhlt	r3, [r4, #12]
90021d04:	bd10      	pop	{r4, pc}

90021d06 <__swrite>:
90021d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90021d0a:	461f      	mov	r7, r3
90021d0c:	898b      	ldrh	r3, [r1, #12]
90021d0e:	05db      	lsls	r3, r3, #23
90021d10:	4605      	mov	r5, r0
90021d12:	460c      	mov	r4, r1
90021d14:	4616      	mov	r6, r2
90021d16:	d505      	bpl.n	90021d24 <__swrite+0x1e>
90021d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90021d1c:	2302      	movs	r3, #2
90021d1e:	2200      	movs	r2, #0
90021d20:	f000 f912 	bl	90021f48 <_lseek_r>
90021d24:	89a3      	ldrh	r3, [r4, #12]
90021d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90021d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90021d2e:	81a3      	strh	r3, [r4, #12]
90021d30:	4632      	mov	r2, r6
90021d32:	463b      	mov	r3, r7
90021d34:	4628      	mov	r0, r5
90021d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90021d3a:	f000 b94d 	b.w	90021fd8 <_write_r>

90021d3e <__sseek>:
90021d3e:	b510      	push	{r4, lr}
90021d40:	460c      	mov	r4, r1
90021d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90021d46:	f000 f8ff 	bl	90021f48 <_lseek_r>
90021d4a:	1c43      	adds	r3, r0, #1
90021d4c:	89a3      	ldrh	r3, [r4, #12]
90021d4e:	bf15      	itete	ne
90021d50:	6560      	strne	r0, [r4, #84]	; 0x54
90021d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90021d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90021d5a:	81a3      	strheq	r3, [r4, #12]
90021d5c:	bf18      	it	ne
90021d5e:	81a3      	strhne	r3, [r4, #12]
90021d60:	bd10      	pop	{r4, pc}

90021d62 <__sclose>:
90021d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90021d66:	f000 b8df 	b.w	90021f28 <_close_r>

90021d6a <__swbuf_r>:
90021d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90021d6c:	460e      	mov	r6, r1
90021d6e:	4614      	mov	r4, r2
90021d70:	4605      	mov	r5, r0
90021d72:	b118      	cbz	r0, 90021d7c <__swbuf_r+0x12>
90021d74:	6a03      	ldr	r3, [r0, #32]
90021d76:	b90b      	cbnz	r3, 90021d7c <__swbuf_r+0x12>
90021d78:	f7ff ff6c 	bl	90021c54 <__sinit>
90021d7c:	69a3      	ldr	r3, [r4, #24]
90021d7e:	60a3      	str	r3, [r4, #8]
90021d80:	89a3      	ldrh	r3, [r4, #12]
90021d82:	071a      	lsls	r2, r3, #28
90021d84:	d525      	bpl.n	90021dd2 <__swbuf_r+0x68>
90021d86:	6923      	ldr	r3, [r4, #16]
90021d88:	b31b      	cbz	r3, 90021dd2 <__swbuf_r+0x68>
90021d8a:	6823      	ldr	r3, [r4, #0]
90021d8c:	6922      	ldr	r2, [r4, #16]
90021d8e:	1a98      	subs	r0, r3, r2
90021d90:	6963      	ldr	r3, [r4, #20]
90021d92:	b2f6      	uxtb	r6, r6
90021d94:	4283      	cmp	r3, r0
90021d96:	4637      	mov	r7, r6
90021d98:	dc04      	bgt.n	90021da4 <__swbuf_r+0x3a>
90021d9a:	4621      	mov	r1, r4
90021d9c:	4628      	mov	r0, r5
90021d9e:	f000 fd6d 	bl	9002287c <_fflush_r>
90021da2:	b9e0      	cbnz	r0, 90021dde <__swbuf_r+0x74>
90021da4:	68a3      	ldr	r3, [r4, #8]
90021da6:	3b01      	subs	r3, #1
90021da8:	60a3      	str	r3, [r4, #8]
90021daa:	6823      	ldr	r3, [r4, #0]
90021dac:	1c5a      	adds	r2, r3, #1
90021dae:	6022      	str	r2, [r4, #0]
90021db0:	701e      	strb	r6, [r3, #0]
90021db2:	6962      	ldr	r2, [r4, #20]
90021db4:	1c43      	adds	r3, r0, #1
90021db6:	429a      	cmp	r2, r3
90021db8:	d004      	beq.n	90021dc4 <__swbuf_r+0x5a>
90021dba:	89a3      	ldrh	r3, [r4, #12]
90021dbc:	07db      	lsls	r3, r3, #31
90021dbe:	d506      	bpl.n	90021dce <__swbuf_r+0x64>
90021dc0:	2e0a      	cmp	r6, #10
90021dc2:	d104      	bne.n	90021dce <__swbuf_r+0x64>
90021dc4:	4621      	mov	r1, r4
90021dc6:	4628      	mov	r0, r5
90021dc8:	f000 fd58 	bl	9002287c <_fflush_r>
90021dcc:	b938      	cbnz	r0, 90021dde <__swbuf_r+0x74>
90021dce:	4638      	mov	r0, r7
90021dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90021dd2:	4621      	mov	r1, r4
90021dd4:	4628      	mov	r0, r5
90021dd6:	f000 f805 	bl	90021de4 <__swsetup_r>
90021dda:	2800      	cmp	r0, #0
90021ddc:	d0d5      	beq.n	90021d8a <__swbuf_r+0x20>
90021dde:	f04f 37ff 	mov.w	r7, #4294967295
90021de2:	e7f4      	b.n	90021dce <__swbuf_r+0x64>

90021de4 <__swsetup_r>:
90021de4:	b538      	push	{r3, r4, r5, lr}
90021de6:	4b2a      	ldr	r3, [pc, #168]	; (90021e90 <__swsetup_r+0xac>)
90021de8:	4605      	mov	r5, r0
90021dea:	6818      	ldr	r0, [r3, #0]
90021dec:	460c      	mov	r4, r1
90021dee:	b118      	cbz	r0, 90021df8 <__swsetup_r+0x14>
90021df0:	6a03      	ldr	r3, [r0, #32]
90021df2:	b90b      	cbnz	r3, 90021df8 <__swsetup_r+0x14>
90021df4:	f7ff ff2e 	bl	90021c54 <__sinit>
90021df8:	89a3      	ldrh	r3, [r4, #12]
90021dfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021dfe:	0718      	lsls	r0, r3, #28
90021e00:	d422      	bmi.n	90021e48 <__swsetup_r+0x64>
90021e02:	06d9      	lsls	r1, r3, #27
90021e04:	d407      	bmi.n	90021e16 <__swsetup_r+0x32>
90021e06:	2309      	movs	r3, #9
90021e08:	602b      	str	r3, [r5, #0]
90021e0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90021e0e:	81a3      	strh	r3, [r4, #12]
90021e10:	f04f 30ff 	mov.w	r0, #4294967295
90021e14:	e034      	b.n	90021e80 <__swsetup_r+0x9c>
90021e16:	0758      	lsls	r0, r3, #29
90021e18:	d512      	bpl.n	90021e40 <__swsetup_r+0x5c>
90021e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
90021e1c:	b141      	cbz	r1, 90021e30 <__swsetup_r+0x4c>
90021e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
90021e22:	4299      	cmp	r1, r3
90021e24:	d002      	beq.n	90021e2c <__swsetup_r+0x48>
90021e26:	4628      	mov	r0, r5
90021e28:	f000 f982 	bl	90022130 <_free_r>
90021e2c:	2300      	movs	r3, #0
90021e2e:	6363      	str	r3, [r4, #52]	; 0x34
90021e30:	89a3      	ldrh	r3, [r4, #12]
90021e32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90021e36:	81a3      	strh	r3, [r4, #12]
90021e38:	2300      	movs	r3, #0
90021e3a:	6063      	str	r3, [r4, #4]
90021e3c:	6923      	ldr	r3, [r4, #16]
90021e3e:	6023      	str	r3, [r4, #0]
90021e40:	89a3      	ldrh	r3, [r4, #12]
90021e42:	f043 0308 	orr.w	r3, r3, #8
90021e46:	81a3      	strh	r3, [r4, #12]
90021e48:	6923      	ldr	r3, [r4, #16]
90021e4a:	b94b      	cbnz	r3, 90021e60 <__swsetup_r+0x7c>
90021e4c:	89a3      	ldrh	r3, [r4, #12]
90021e4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
90021e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90021e56:	d003      	beq.n	90021e60 <__swsetup_r+0x7c>
90021e58:	4621      	mov	r1, r4
90021e5a:	4628      	mov	r0, r5
90021e5c:	f000 fd5c 	bl	90022918 <__smakebuf_r>
90021e60:	89a0      	ldrh	r0, [r4, #12]
90021e62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021e66:	f010 0301 	ands.w	r3, r0, #1
90021e6a:	d00a      	beq.n	90021e82 <__swsetup_r+0x9e>
90021e6c:	2300      	movs	r3, #0
90021e6e:	60a3      	str	r3, [r4, #8]
90021e70:	6963      	ldr	r3, [r4, #20]
90021e72:	425b      	negs	r3, r3
90021e74:	61a3      	str	r3, [r4, #24]
90021e76:	6923      	ldr	r3, [r4, #16]
90021e78:	b943      	cbnz	r3, 90021e8c <__swsetup_r+0xa8>
90021e7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90021e7e:	d1c4      	bne.n	90021e0a <__swsetup_r+0x26>
90021e80:	bd38      	pop	{r3, r4, r5, pc}
90021e82:	0781      	lsls	r1, r0, #30
90021e84:	bf58      	it	pl
90021e86:	6963      	ldrpl	r3, [r4, #20]
90021e88:	60a3      	str	r3, [r4, #8]
90021e8a:	e7f4      	b.n	90021e76 <__swsetup_r+0x92>
90021e8c:	2000      	movs	r0, #0
90021e8e:	e7f7      	b.n	90021e80 <__swsetup_r+0x9c>
90021e90:	24000138 	.word	0x24000138

90021e94 <memset>:
90021e94:	4402      	add	r2, r0
90021e96:	4603      	mov	r3, r0
90021e98:	4293      	cmp	r3, r2
90021e9a:	d100      	bne.n	90021e9e <memset+0xa>
90021e9c:	4770      	bx	lr
90021e9e:	f803 1b01 	strb.w	r1, [r3], #1
90021ea2:	e7f9      	b.n	90021e98 <memset+0x4>

90021ea4 <strncmp>:
90021ea4:	b510      	push	{r4, lr}
90021ea6:	b16a      	cbz	r2, 90021ec4 <strncmp+0x20>
90021ea8:	3901      	subs	r1, #1
90021eaa:	1884      	adds	r4, r0, r2
90021eac:	f810 2b01 	ldrb.w	r2, [r0], #1
90021eb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
90021eb4:	429a      	cmp	r2, r3
90021eb6:	d103      	bne.n	90021ec0 <strncmp+0x1c>
90021eb8:	42a0      	cmp	r0, r4
90021eba:	d001      	beq.n	90021ec0 <strncmp+0x1c>
90021ebc:	2a00      	cmp	r2, #0
90021ebe:	d1f5      	bne.n	90021eac <strncmp+0x8>
90021ec0:	1ad0      	subs	r0, r2, r3
90021ec2:	bd10      	pop	{r4, pc}
90021ec4:	4610      	mov	r0, r2
90021ec6:	e7fc      	b.n	90021ec2 <strncmp+0x1e>

90021ec8 <_raise_r>:
90021ec8:	291f      	cmp	r1, #31
90021eca:	b538      	push	{r3, r4, r5, lr}
90021ecc:	4604      	mov	r4, r0
90021ece:	460d      	mov	r5, r1
90021ed0:	d904      	bls.n	90021edc <_raise_r+0x14>
90021ed2:	2316      	movs	r3, #22
90021ed4:	6003      	str	r3, [r0, #0]
90021ed6:	f04f 30ff 	mov.w	r0, #4294967295
90021eda:	bd38      	pop	{r3, r4, r5, pc}
90021edc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90021ede:	b112      	cbz	r2, 90021ee6 <_raise_r+0x1e>
90021ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90021ee4:	b94b      	cbnz	r3, 90021efa <_raise_r+0x32>
90021ee6:	4620      	mov	r0, r4
90021ee8:	f000 f864 	bl	90021fb4 <_getpid_r>
90021eec:	462a      	mov	r2, r5
90021eee:	4601      	mov	r1, r0
90021ef0:	4620      	mov	r0, r4
90021ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90021ef6:	f000 b84b 	b.w	90021f90 <_kill_r>
90021efa:	2b01      	cmp	r3, #1
90021efc:	d00a      	beq.n	90021f14 <_raise_r+0x4c>
90021efe:	1c59      	adds	r1, r3, #1
90021f00:	d103      	bne.n	90021f0a <_raise_r+0x42>
90021f02:	2316      	movs	r3, #22
90021f04:	6003      	str	r3, [r0, #0]
90021f06:	2001      	movs	r0, #1
90021f08:	e7e7      	b.n	90021eda <_raise_r+0x12>
90021f0a:	2400      	movs	r4, #0
90021f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90021f10:	4628      	mov	r0, r5
90021f12:	4798      	blx	r3
90021f14:	2000      	movs	r0, #0
90021f16:	e7e0      	b.n	90021eda <_raise_r+0x12>

90021f18 <raise>:
90021f18:	4b02      	ldr	r3, [pc, #8]	; (90021f24 <raise+0xc>)
90021f1a:	4601      	mov	r1, r0
90021f1c:	6818      	ldr	r0, [r3, #0]
90021f1e:	f7ff bfd3 	b.w	90021ec8 <_raise_r>
90021f22:	bf00      	nop
90021f24:	24000138 	.word	0x24000138

90021f28 <_close_r>:
90021f28:	b538      	push	{r3, r4, r5, lr}
90021f2a:	4d06      	ldr	r5, [pc, #24]	; (90021f44 <_close_r+0x1c>)
90021f2c:	2300      	movs	r3, #0
90021f2e:	4604      	mov	r4, r0
90021f30:	4608      	mov	r0, r1
90021f32:	602b      	str	r3, [r5, #0]
90021f34:	f7e2 fee2 	bl	90004cfc <_close>
90021f38:	1c43      	adds	r3, r0, #1
90021f3a:	d102      	bne.n	90021f42 <_close_r+0x1a>
90021f3c:	682b      	ldr	r3, [r5, #0]
90021f3e:	b103      	cbz	r3, 90021f42 <_close_r+0x1a>
90021f40:	6023      	str	r3, [r4, #0]
90021f42:	bd38      	pop	{r3, r4, r5, pc}
90021f44:	2402644c 	.word	0x2402644c

90021f48 <_lseek_r>:
90021f48:	b538      	push	{r3, r4, r5, lr}
90021f4a:	4d07      	ldr	r5, [pc, #28]	; (90021f68 <_lseek_r+0x20>)
90021f4c:	4604      	mov	r4, r0
90021f4e:	4608      	mov	r0, r1
90021f50:	4611      	mov	r1, r2
90021f52:	2200      	movs	r2, #0
90021f54:	602a      	str	r2, [r5, #0]
90021f56:	461a      	mov	r2, r3
90021f58:	f7e2 fedc 	bl	90004d14 <_lseek>
90021f5c:	1c43      	adds	r3, r0, #1
90021f5e:	d102      	bne.n	90021f66 <_lseek_r+0x1e>
90021f60:	682b      	ldr	r3, [r5, #0]
90021f62:	b103      	cbz	r3, 90021f66 <_lseek_r+0x1e>
90021f64:	6023      	str	r3, [r4, #0]
90021f66:	bd38      	pop	{r3, r4, r5, pc}
90021f68:	2402644c 	.word	0x2402644c

90021f6c <_read_r>:
90021f6c:	b538      	push	{r3, r4, r5, lr}
90021f6e:	4d07      	ldr	r5, [pc, #28]	; (90021f8c <_read_r+0x20>)
90021f70:	4604      	mov	r4, r0
90021f72:	4608      	mov	r0, r1
90021f74:	4611      	mov	r1, r2
90021f76:	2200      	movs	r2, #0
90021f78:	602a      	str	r2, [r5, #0]
90021f7a:	461a      	mov	r2, r3
90021f7c:	f7e2 fea2 	bl	90004cc4 <_read>
90021f80:	1c43      	adds	r3, r0, #1
90021f82:	d102      	bne.n	90021f8a <_read_r+0x1e>
90021f84:	682b      	ldr	r3, [r5, #0]
90021f86:	b103      	cbz	r3, 90021f8a <_read_r+0x1e>
90021f88:	6023      	str	r3, [r4, #0]
90021f8a:	bd38      	pop	{r3, r4, r5, pc}
90021f8c:	2402644c 	.word	0x2402644c

90021f90 <_kill_r>:
90021f90:	b538      	push	{r3, r4, r5, lr}
90021f92:	4d07      	ldr	r5, [pc, #28]	; (90021fb0 <_kill_r+0x20>)
90021f94:	2300      	movs	r3, #0
90021f96:	4604      	mov	r4, r0
90021f98:	4608      	mov	r0, r1
90021f9a:	4611      	mov	r1, r2
90021f9c:	602b      	str	r3, [r5, #0]
90021f9e:	f7e2 fe81 	bl	90004ca4 <_kill>
90021fa2:	1c43      	adds	r3, r0, #1
90021fa4:	d102      	bne.n	90021fac <_kill_r+0x1c>
90021fa6:	682b      	ldr	r3, [r5, #0]
90021fa8:	b103      	cbz	r3, 90021fac <_kill_r+0x1c>
90021faa:	6023      	str	r3, [r4, #0]
90021fac:	bd38      	pop	{r3, r4, r5, pc}
90021fae:	bf00      	nop
90021fb0:	2402644c 	.word	0x2402644c

90021fb4 <_getpid_r>:
90021fb4:	f7e2 be74 	b.w	90004ca0 <_getpid>

90021fb8 <_sbrk_r>:
90021fb8:	b538      	push	{r3, r4, r5, lr}
90021fba:	4d06      	ldr	r5, [pc, #24]	; (90021fd4 <_sbrk_r+0x1c>)
90021fbc:	2300      	movs	r3, #0
90021fbe:	4604      	mov	r4, r0
90021fc0:	4608      	mov	r0, r1
90021fc2:	602b      	str	r3, [r5, #0]
90021fc4:	f7e2 fea8 	bl	90004d18 <_sbrk>
90021fc8:	1c43      	adds	r3, r0, #1
90021fca:	d102      	bne.n	90021fd2 <_sbrk_r+0x1a>
90021fcc:	682b      	ldr	r3, [r5, #0]
90021fce:	b103      	cbz	r3, 90021fd2 <_sbrk_r+0x1a>
90021fd0:	6023      	str	r3, [r4, #0]
90021fd2:	bd38      	pop	{r3, r4, r5, pc}
90021fd4:	2402644c 	.word	0x2402644c

90021fd8 <_write_r>:
90021fd8:	b538      	push	{r3, r4, r5, lr}
90021fda:	4d07      	ldr	r5, [pc, #28]	; (90021ff8 <_write_r+0x20>)
90021fdc:	4604      	mov	r4, r0
90021fde:	4608      	mov	r0, r1
90021fe0:	4611      	mov	r1, r2
90021fe2:	2200      	movs	r2, #0
90021fe4:	602a      	str	r2, [r5, #0]
90021fe6:	461a      	mov	r2, r3
90021fe8:	f7e2 fe7a 	bl	90004ce0 <_write>
90021fec:	1c43      	adds	r3, r0, #1
90021fee:	d102      	bne.n	90021ff6 <_write_r+0x1e>
90021ff0:	682b      	ldr	r3, [r5, #0]
90021ff2:	b103      	cbz	r3, 90021ff6 <_write_r+0x1e>
90021ff4:	6023      	str	r3, [r4, #0]
90021ff6:	bd38      	pop	{r3, r4, r5, pc}
90021ff8:	2402644c 	.word	0x2402644c

90021ffc <__errno>:
90021ffc:	4b01      	ldr	r3, [pc, #4]	; (90022004 <__errno+0x8>)
90021ffe:	6818      	ldr	r0, [r3, #0]
90022000:	4770      	bx	lr
90022002:	bf00      	nop
90022004:	24000138 	.word	0x24000138

90022008 <__libc_init_array>:
90022008:	b570      	push	{r4, r5, r6, lr}
9002200a:	4d0d      	ldr	r5, [pc, #52]	; (90022040 <__libc_init_array+0x38>)
9002200c:	4c0d      	ldr	r4, [pc, #52]	; (90022044 <__libc_init_array+0x3c>)
9002200e:	1b64      	subs	r4, r4, r5
90022010:	10a4      	asrs	r4, r4, #2
90022012:	2600      	movs	r6, #0
90022014:	42a6      	cmp	r6, r4
90022016:	d109      	bne.n	9002202c <__libc_init_array+0x24>
90022018:	4d0b      	ldr	r5, [pc, #44]	; (90022048 <__libc_init_array+0x40>)
9002201a:	4c0c      	ldr	r4, [pc, #48]	; (9002204c <__libc_init_array+0x44>)
9002201c:	f000 fcda 	bl	900229d4 <_init>
90022020:	1b64      	subs	r4, r4, r5
90022022:	10a4      	asrs	r4, r4, #2
90022024:	2600      	movs	r6, #0
90022026:	42a6      	cmp	r6, r4
90022028:	d105      	bne.n	90022036 <__libc_init_array+0x2e>
9002202a:	bd70      	pop	{r4, r5, r6, pc}
9002202c:	f855 3b04 	ldr.w	r3, [r5], #4
90022030:	4798      	blx	r3
90022032:	3601      	adds	r6, #1
90022034:	e7ee      	b.n	90022014 <__libc_init_array+0xc>
90022036:	f855 3b04 	ldr.w	r3, [r5], #4
9002203a:	4798      	blx	r3
9002203c:	3601      	adds	r6, #1
9002203e:	e7f2      	b.n	90022026 <__libc_init_array+0x1e>
90022040:	90025dec 	.word	0x90025dec
90022044:	90025dec 	.word	0x90025dec
90022048:	90025dec 	.word	0x90025dec
9002204c:	90025e08 	.word	0x90025e08

90022050 <__retarget_lock_init_recursive>:
90022050:	4770      	bx	lr

90022052 <__retarget_lock_acquire_recursive>:
90022052:	4770      	bx	lr

90022054 <__retarget_lock_release_recursive>:
90022054:	4770      	bx	lr

90022056 <memcpy>:
90022056:	440a      	add	r2, r1
90022058:	4291      	cmp	r1, r2
9002205a:	f100 33ff 	add.w	r3, r0, #4294967295
9002205e:	d100      	bne.n	90022062 <memcpy+0xc>
90022060:	4770      	bx	lr
90022062:	b510      	push	{r4, lr}
90022064:	f811 4b01 	ldrb.w	r4, [r1], #1
90022068:	f803 4f01 	strb.w	r4, [r3, #1]!
9002206c:	4291      	cmp	r1, r2
9002206e:	d1f9      	bne.n	90022064 <memcpy+0xe>
90022070:	bd10      	pop	{r4, pc}
	...

90022074 <__register_exitproc>:
90022074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022078:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 9002212c <__register_exitproc+0xb8>
9002207c:	4606      	mov	r6, r0
9002207e:	f8d8 0000 	ldr.w	r0, [r8]
90022082:	461f      	mov	r7, r3
90022084:	460d      	mov	r5, r1
90022086:	4691      	mov	r9, r2
90022088:	f7ff ffe3 	bl	90022052 <__retarget_lock_acquire_recursive>
9002208c:	4b23      	ldr	r3, [pc, #140]	; (9002211c <__register_exitproc+0xa8>)
9002208e:	681c      	ldr	r4, [r3, #0]
90022090:	b934      	cbnz	r4, 900220a0 <__register_exitproc+0x2c>
90022092:	4c23      	ldr	r4, [pc, #140]	; (90022120 <__register_exitproc+0xac>)
90022094:	601c      	str	r4, [r3, #0]
90022096:	4b23      	ldr	r3, [pc, #140]	; (90022124 <__register_exitproc+0xb0>)
90022098:	b113      	cbz	r3, 900220a0 <__register_exitproc+0x2c>
9002209a:	681b      	ldr	r3, [r3, #0]
9002209c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
900220a0:	6863      	ldr	r3, [r4, #4]
900220a2:	2b1f      	cmp	r3, #31
900220a4:	dd07      	ble.n	900220b6 <__register_exitproc+0x42>
900220a6:	f8d8 0000 	ldr.w	r0, [r8]
900220aa:	f7ff ffd3 	bl	90022054 <__retarget_lock_release_recursive>
900220ae:	f04f 30ff 	mov.w	r0, #4294967295
900220b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900220b6:	b32e      	cbz	r6, 90022104 <__register_exitproc+0x90>
900220b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
900220bc:	b968      	cbnz	r0, 900220da <__register_exitproc+0x66>
900220be:	4b1a      	ldr	r3, [pc, #104]	; (90022128 <__register_exitproc+0xb4>)
900220c0:	2b00      	cmp	r3, #0
900220c2:	d0f0      	beq.n	900220a6 <__register_exitproc+0x32>
900220c4:	f44f 7084 	mov.w	r0, #264	; 0x108
900220c8:	f7ff fc6e 	bl	900219a8 <malloc>
900220cc:	2800      	cmp	r0, #0
900220ce:	d0ea      	beq.n	900220a6 <__register_exitproc+0x32>
900220d0:	2300      	movs	r3, #0
900220d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
900220d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
900220da:	6863      	ldr	r3, [r4, #4]
900220dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
900220e0:	2201      	movs	r2, #1
900220e2:	409a      	lsls	r2, r3
900220e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
900220e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
900220ec:	4313      	orrs	r3, r2
900220ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
900220f2:	2e02      	cmp	r6, #2
900220f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
900220f8:	bf02      	ittt	eq
900220fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
900220fe:	4313      	orreq	r3, r2
90022100:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90022104:	6863      	ldr	r3, [r4, #4]
90022106:	f8d8 0000 	ldr.w	r0, [r8]
9002210a:	1c5a      	adds	r2, r3, #1
9002210c:	3302      	adds	r3, #2
9002210e:	6062      	str	r2, [r4, #4]
90022110:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90022114:	f7ff ff9e 	bl	90022054 <__retarget_lock_release_recursive>
90022118:	2000      	movs	r0, #0
9002211a:	e7ca      	b.n	900220b2 <__register_exitproc+0x3e>
9002211c:	240264e0 	.word	0x240264e0
90022120:	24026454 	.word	0x24026454
90022124:	90025bfc 	.word	0x90025bfc
90022128:	900219a9 	.word	0x900219a9
9002212c:	2400013c 	.word	0x2400013c

90022130 <_free_r>:
90022130:	b537      	push	{r0, r1, r2, r4, r5, lr}
90022132:	2900      	cmp	r1, #0
90022134:	d044      	beq.n	900221c0 <_free_r+0x90>
90022136:	f851 3c04 	ldr.w	r3, [r1, #-4]
9002213a:	9001      	str	r0, [sp, #4]
9002213c:	2b00      	cmp	r3, #0
9002213e:	f1a1 0404 	sub.w	r4, r1, #4
90022142:	bfb8      	it	lt
90022144:	18e4      	addlt	r4, r4, r3
90022146:	f7ff fcdf 	bl	90021b08 <__malloc_lock>
9002214a:	4a1e      	ldr	r2, [pc, #120]	; (900221c4 <_free_r+0x94>)
9002214c:	9801      	ldr	r0, [sp, #4]
9002214e:	6813      	ldr	r3, [r2, #0]
90022150:	b933      	cbnz	r3, 90022160 <_free_r+0x30>
90022152:	6063      	str	r3, [r4, #4]
90022154:	6014      	str	r4, [r2, #0]
90022156:	b003      	add	sp, #12
90022158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9002215c:	f7ff bcda 	b.w	90021b14 <__malloc_unlock>
90022160:	42a3      	cmp	r3, r4
90022162:	d908      	bls.n	90022176 <_free_r+0x46>
90022164:	6825      	ldr	r5, [r4, #0]
90022166:	1961      	adds	r1, r4, r5
90022168:	428b      	cmp	r3, r1
9002216a:	bf01      	itttt	eq
9002216c:	6819      	ldreq	r1, [r3, #0]
9002216e:	685b      	ldreq	r3, [r3, #4]
90022170:	1949      	addeq	r1, r1, r5
90022172:	6021      	streq	r1, [r4, #0]
90022174:	e7ed      	b.n	90022152 <_free_r+0x22>
90022176:	461a      	mov	r2, r3
90022178:	685b      	ldr	r3, [r3, #4]
9002217a:	b10b      	cbz	r3, 90022180 <_free_r+0x50>
9002217c:	42a3      	cmp	r3, r4
9002217e:	d9fa      	bls.n	90022176 <_free_r+0x46>
90022180:	6811      	ldr	r1, [r2, #0]
90022182:	1855      	adds	r5, r2, r1
90022184:	42a5      	cmp	r5, r4
90022186:	d10b      	bne.n	900221a0 <_free_r+0x70>
90022188:	6824      	ldr	r4, [r4, #0]
9002218a:	4421      	add	r1, r4
9002218c:	1854      	adds	r4, r2, r1
9002218e:	42a3      	cmp	r3, r4
90022190:	6011      	str	r1, [r2, #0]
90022192:	d1e0      	bne.n	90022156 <_free_r+0x26>
90022194:	681c      	ldr	r4, [r3, #0]
90022196:	685b      	ldr	r3, [r3, #4]
90022198:	6053      	str	r3, [r2, #4]
9002219a:	440c      	add	r4, r1
9002219c:	6014      	str	r4, [r2, #0]
9002219e:	e7da      	b.n	90022156 <_free_r+0x26>
900221a0:	d902      	bls.n	900221a8 <_free_r+0x78>
900221a2:	230c      	movs	r3, #12
900221a4:	6003      	str	r3, [r0, #0]
900221a6:	e7d6      	b.n	90022156 <_free_r+0x26>
900221a8:	6825      	ldr	r5, [r4, #0]
900221aa:	1961      	adds	r1, r4, r5
900221ac:	428b      	cmp	r3, r1
900221ae:	bf04      	itt	eq
900221b0:	6819      	ldreq	r1, [r3, #0]
900221b2:	685b      	ldreq	r3, [r3, #4]
900221b4:	6063      	str	r3, [r4, #4]
900221b6:	bf04      	itt	eq
900221b8:	1949      	addeq	r1, r1, r5
900221ba:	6021      	streq	r1, [r4, #0]
900221bc:	6054      	str	r4, [r2, #4]
900221be:	e7ca      	b.n	90022156 <_free_r+0x26>
900221c0:	b003      	add	sp, #12
900221c2:	bd30      	pop	{r4, r5, pc}
900221c4:	24026308 	.word	0x24026308

900221c8 <__sfputc_r>:
900221c8:	6893      	ldr	r3, [r2, #8]
900221ca:	3b01      	subs	r3, #1
900221cc:	2b00      	cmp	r3, #0
900221ce:	b410      	push	{r4}
900221d0:	6093      	str	r3, [r2, #8]
900221d2:	da08      	bge.n	900221e6 <__sfputc_r+0x1e>
900221d4:	6994      	ldr	r4, [r2, #24]
900221d6:	42a3      	cmp	r3, r4
900221d8:	db01      	blt.n	900221de <__sfputc_r+0x16>
900221da:	290a      	cmp	r1, #10
900221dc:	d103      	bne.n	900221e6 <__sfputc_r+0x1e>
900221de:	f85d 4b04 	ldr.w	r4, [sp], #4
900221e2:	f7ff bdc2 	b.w	90021d6a <__swbuf_r>
900221e6:	6813      	ldr	r3, [r2, #0]
900221e8:	1c58      	adds	r0, r3, #1
900221ea:	6010      	str	r0, [r2, #0]
900221ec:	7019      	strb	r1, [r3, #0]
900221ee:	4608      	mov	r0, r1
900221f0:	f85d 4b04 	ldr.w	r4, [sp], #4
900221f4:	4770      	bx	lr

900221f6 <__sfputs_r>:
900221f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900221f8:	4606      	mov	r6, r0
900221fa:	460f      	mov	r7, r1
900221fc:	4614      	mov	r4, r2
900221fe:	18d5      	adds	r5, r2, r3
90022200:	42ac      	cmp	r4, r5
90022202:	d101      	bne.n	90022208 <__sfputs_r+0x12>
90022204:	2000      	movs	r0, #0
90022206:	e007      	b.n	90022218 <__sfputs_r+0x22>
90022208:	f814 1b01 	ldrb.w	r1, [r4], #1
9002220c:	463a      	mov	r2, r7
9002220e:	4630      	mov	r0, r6
90022210:	f7ff ffda 	bl	900221c8 <__sfputc_r>
90022214:	1c43      	adds	r3, r0, #1
90022216:	d1f3      	bne.n	90022200 <__sfputs_r+0xa>
90022218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9002221c <_vfiprintf_r>:
9002221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022220:	460d      	mov	r5, r1
90022222:	b09d      	sub	sp, #116	; 0x74
90022224:	4614      	mov	r4, r2
90022226:	4698      	mov	r8, r3
90022228:	4606      	mov	r6, r0
9002222a:	b118      	cbz	r0, 90022234 <_vfiprintf_r+0x18>
9002222c:	6a03      	ldr	r3, [r0, #32]
9002222e:	b90b      	cbnz	r3, 90022234 <_vfiprintf_r+0x18>
90022230:	f7ff fd10 	bl	90021c54 <__sinit>
90022234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90022236:	07d9      	lsls	r1, r3, #31
90022238:	d405      	bmi.n	90022246 <_vfiprintf_r+0x2a>
9002223a:	89ab      	ldrh	r3, [r5, #12]
9002223c:	059a      	lsls	r2, r3, #22
9002223e:	d402      	bmi.n	90022246 <_vfiprintf_r+0x2a>
90022240:	6da8      	ldr	r0, [r5, #88]	; 0x58
90022242:	f7ff ff06 	bl	90022052 <__retarget_lock_acquire_recursive>
90022246:	89ab      	ldrh	r3, [r5, #12]
90022248:	071b      	lsls	r3, r3, #28
9002224a:	d501      	bpl.n	90022250 <_vfiprintf_r+0x34>
9002224c:	692b      	ldr	r3, [r5, #16]
9002224e:	b99b      	cbnz	r3, 90022278 <_vfiprintf_r+0x5c>
90022250:	4629      	mov	r1, r5
90022252:	4630      	mov	r0, r6
90022254:	f7ff fdc6 	bl	90021de4 <__swsetup_r>
90022258:	b170      	cbz	r0, 90022278 <_vfiprintf_r+0x5c>
9002225a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002225c:	07dc      	lsls	r4, r3, #31
9002225e:	d504      	bpl.n	9002226a <_vfiprintf_r+0x4e>
90022260:	f04f 30ff 	mov.w	r0, #4294967295
90022264:	b01d      	add	sp, #116	; 0x74
90022266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002226a:	89ab      	ldrh	r3, [r5, #12]
9002226c:	0598      	lsls	r0, r3, #22
9002226e:	d4f7      	bmi.n	90022260 <_vfiprintf_r+0x44>
90022270:	6da8      	ldr	r0, [r5, #88]	; 0x58
90022272:	f7ff feef 	bl	90022054 <__retarget_lock_release_recursive>
90022276:	e7f3      	b.n	90022260 <_vfiprintf_r+0x44>
90022278:	2300      	movs	r3, #0
9002227a:	9309      	str	r3, [sp, #36]	; 0x24
9002227c:	2320      	movs	r3, #32
9002227e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90022282:	f8cd 800c 	str.w	r8, [sp, #12]
90022286:	2330      	movs	r3, #48	; 0x30
90022288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9002243c <_vfiprintf_r+0x220>
9002228c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90022290:	f04f 0901 	mov.w	r9, #1
90022294:	4623      	mov	r3, r4
90022296:	469a      	mov	sl, r3
90022298:	f813 2b01 	ldrb.w	r2, [r3], #1
9002229c:	b10a      	cbz	r2, 900222a2 <_vfiprintf_r+0x86>
9002229e:	2a25      	cmp	r2, #37	; 0x25
900222a0:	d1f9      	bne.n	90022296 <_vfiprintf_r+0x7a>
900222a2:	ebba 0b04 	subs.w	fp, sl, r4
900222a6:	d00b      	beq.n	900222c0 <_vfiprintf_r+0xa4>
900222a8:	465b      	mov	r3, fp
900222aa:	4622      	mov	r2, r4
900222ac:	4629      	mov	r1, r5
900222ae:	4630      	mov	r0, r6
900222b0:	f7ff ffa1 	bl	900221f6 <__sfputs_r>
900222b4:	3001      	adds	r0, #1
900222b6:	f000 80a9 	beq.w	9002240c <_vfiprintf_r+0x1f0>
900222ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
900222bc:	445a      	add	r2, fp
900222be:	9209      	str	r2, [sp, #36]	; 0x24
900222c0:	f89a 3000 	ldrb.w	r3, [sl]
900222c4:	2b00      	cmp	r3, #0
900222c6:	f000 80a1 	beq.w	9002240c <_vfiprintf_r+0x1f0>
900222ca:	2300      	movs	r3, #0
900222cc:	f04f 32ff 	mov.w	r2, #4294967295
900222d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
900222d4:	f10a 0a01 	add.w	sl, sl, #1
900222d8:	9304      	str	r3, [sp, #16]
900222da:	9307      	str	r3, [sp, #28]
900222dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900222e0:	931a      	str	r3, [sp, #104]	; 0x68
900222e2:	4654      	mov	r4, sl
900222e4:	2205      	movs	r2, #5
900222e6:	f814 1b01 	ldrb.w	r1, [r4], #1
900222ea:	4854      	ldr	r0, [pc, #336]	; (9002243c <_vfiprintf_r+0x220>)
900222ec:	f7dd fff8 	bl	900002e0 <memchr>
900222f0:	9a04      	ldr	r2, [sp, #16]
900222f2:	b9d8      	cbnz	r0, 9002232c <_vfiprintf_r+0x110>
900222f4:	06d1      	lsls	r1, r2, #27
900222f6:	bf44      	itt	mi
900222f8:	2320      	movmi	r3, #32
900222fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900222fe:	0713      	lsls	r3, r2, #28
90022300:	bf44      	itt	mi
90022302:	232b      	movmi	r3, #43	; 0x2b
90022304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90022308:	f89a 3000 	ldrb.w	r3, [sl]
9002230c:	2b2a      	cmp	r3, #42	; 0x2a
9002230e:	d015      	beq.n	9002233c <_vfiprintf_r+0x120>
90022310:	9a07      	ldr	r2, [sp, #28]
90022312:	4654      	mov	r4, sl
90022314:	2000      	movs	r0, #0
90022316:	f04f 0c0a 	mov.w	ip, #10
9002231a:	4621      	mov	r1, r4
9002231c:	f811 3b01 	ldrb.w	r3, [r1], #1
90022320:	3b30      	subs	r3, #48	; 0x30
90022322:	2b09      	cmp	r3, #9
90022324:	d94d      	bls.n	900223c2 <_vfiprintf_r+0x1a6>
90022326:	b1b0      	cbz	r0, 90022356 <_vfiprintf_r+0x13a>
90022328:	9207      	str	r2, [sp, #28]
9002232a:	e014      	b.n	90022356 <_vfiprintf_r+0x13a>
9002232c:	eba0 0308 	sub.w	r3, r0, r8
90022330:	fa09 f303 	lsl.w	r3, r9, r3
90022334:	4313      	orrs	r3, r2
90022336:	9304      	str	r3, [sp, #16]
90022338:	46a2      	mov	sl, r4
9002233a:	e7d2      	b.n	900222e2 <_vfiprintf_r+0xc6>
9002233c:	9b03      	ldr	r3, [sp, #12]
9002233e:	1d19      	adds	r1, r3, #4
90022340:	681b      	ldr	r3, [r3, #0]
90022342:	9103      	str	r1, [sp, #12]
90022344:	2b00      	cmp	r3, #0
90022346:	bfbb      	ittet	lt
90022348:	425b      	neglt	r3, r3
9002234a:	f042 0202 	orrlt.w	r2, r2, #2
9002234e:	9307      	strge	r3, [sp, #28]
90022350:	9307      	strlt	r3, [sp, #28]
90022352:	bfb8      	it	lt
90022354:	9204      	strlt	r2, [sp, #16]
90022356:	7823      	ldrb	r3, [r4, #0]
90022358:	2b2e      	cmp	r3, #46	; 0x2e
9002235a:	d10c      	bne.n	90022376 <_vfiprintf_r+0x15a>
9002235c:	7863      	ldrb	r3, [r4, #1]
9002235e:	2b2a      	cmp	r3, #42	; 0x2a
90022360:	d134      	bne.n	900223cc <_vfiprintf_r+0x1b0>
90022362:	9b03      	ldr	r3, [sp, #12]
90022364:	1d1a      	adds	r2, r3, #4
90022366:	681b      	ldr	r3, [r3, #0]
90022368:	9203      	str	r2, [sp, #12]
9002236a:	2b00      	cmp	r3, #0
9002236c:	bfb8      	it	lt
9002236e:	f04f 33ff 	movlt.w	r3, #4294967295
90022372:	3402      	adds	r4, #2
90022374:	9305      	str	r3, [sp, #20]
90022376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9002244c <_vfiprintf_r+0x230>
9002237a:	7821      	ldrb	r1, [r4, #0]
9002237c:	2203      	movs	r2, #3
9002237e:	4650      	mov	r0, sl
90022380:	f7dd ffae 	bl	900002e0 <memchr>
90022384:	b138      	cbz	r0, 90022396 <_vfiprintf_r+0x17a>
90022386:	9b04      	ldr	r3, [sp, #16]
90022388:	eba0 000a 	sub.w	r0, r0, sl
9002238c:	2240      	movs	r2, #64	; 0x40
9002238e:	4082      	lsls	r2, r0
90022390:	4313      	orrs	r3, r2
90022392:	3401      	adds	r4, #1
90022394:	9304      	str	r3, [sp, #16]
90022396:	f814 1b01 	ldrb.w	r1, [r4], #1
9002239a:	4829      	ldr	r0, [pc, #164]	; (90022440 <_vfiprintf_r+0x224>)
9002239c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900223a0:	2206      	movs	r2, #6
900223a2:	f7dd ff9d 	bl	900002e0 <memchr>
900223a6:	2800      	cmp	r0, #0
900223a8:	d03f      	beq.n	9002242a <_vfiprintf_r+0x20e>
900223aa:	4b26      	ldr	r3, [pc, #152]	; (90022444 <_vfiprintf_r+0x228>)
900223ac:	bb1b      	cbnz	r3, 900223f6 <_vfiprintf_r+0x1da>
900223ae:	9b03      	ldr	r3, [sp, #12]
900223b0:	3307      	adds	r3, #7
900223b2:	f023 0307 	bic.w	r3, r3, #7
900223b6:	3308      	adds	r3, #8
900223b8:	9303      	str	r3, [sp, #12]
900223ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
900223bc:	443b      	add	r3, r7
900223be:	9309      	str	r3, [sp, #36]	; 0x24
900223c0:	e768      	b.n	90022294 <_vfiprintf_r+0x78>
900223c2:	fb0c 3202 	mla	r2, ip, r2, r3
900223c6:	460c      	mov	r4, r1
900223c8:	2001      	movs	r0, #1
900223ca:	e7a6      	b.n	9002231a <_vfiprintf_r+0xfe>
900223cc:	2300      	movs	r3, #0
900223ce:	3401      	adds	r4, #1
900223d0:	9305      	str	r3, [sp, #20]
900223d2:	4619      	mov	r1, r3
900223d4:	f04f 0c0a 	mov.w	ip, #10
900223d8:	4620      	mov	r0, r4
900223da:	f810 2b01 	ldrb.w	r2, [r0], #1
900223de:	3a30      	subs	r2, #48	; 0x30
900223e0:	2a09      	cmp	r2, #9
900223e2:	d903      	bls.n	900223ec <_vfiprintf_r+0x1d0>
900223e4:	2b00      	cmp	r3, #0
900223e6:	d0c6      	beq.n	90022376 <_vfiprintf_r+0x15a>
900223e8:	9105      	str	r1, [sp, #20]
900223ea:	e7c4      	b.n	90022376 <_vfiprintf_r+0x15a>
900223ec:	fb0c 2101 	mla	r1, ip, r1, r2
900223f0:	4604      	mov	r4, r0
900223f2:	2301      	movs	r3, #1
900223f4:	e7f0      	b.n	900223d8 <_vfiprintf_r+0x1bc>
900223f6:	ab03      	add	r3, sp, #12
900223f8:	9300      	str	r3, [sp, #0]
900223fa:	462a      	mov	r2, r5
900223fc:	4b12      	ldr	r3, [pc, #72]	; (90022448 <_vfiprintf_r+0x22c>)
900223fe:	a904      	add	r1, sp, #16
90022400:	4630      	mov	r0, r6
90022402:	f3af 8000 	nop.w
90022406:	4607      	mov	r7, r0
90022408:	1c78      	adds	r0, r7, #1
9002240a:	d1d6      	bne.n	900223ba <_vfiprintf_r+0x19e>
9002240c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002240e:	07d9      	lsls	r1, r3, #31
90022410:	d405      	bmi.n	9002241e <_vfiprintf_r+0x202>
90022412:	89ab      	ldrh	r3, [r5, #12]
90022414:	059a      	lsls	r2, r3, #22
90022416:	d402      	bmi.n	9002241e <_vfiprintf_r+0x202>
90022418:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002241a:	f7ff fe1b 	bl	90022054 <__retarget_lock_release_recursive>
9002241e:	89ab      	ldrh	r3, [r5, #12]
90022420:	065b      	lsls	r3, r3, #25
90022422:	f53f af1d 	bmi.w	90022260 <_vfiprintf_r+0x44>
90022426:	9809      	ldr	r0, [sp, #36]	; 0x24
90022428:	e71c      	b.n	90022264 <_vfiprintf_r+0x48>
9002242a:	ab03      	add	r3, sp, #12
9002242c:	9300      	str	r3, [sp, #0]
9002242e:	462a      	mov	r2, r5
90022430:	4b05      	ldr	r3, [pc, #20]	; (90022448 <_vfiprintf_r+0x22c>)
90022432:	a904      	add	r1, sp, #16
90022434:	4630      	mov	r0, r6
90022436:	f000 f879 	bl	9002252c <_printf_i>
9002243a:	e7e4      	b.n	90022406 <_vfiprintf_r+0x1ea>
9002243c:	90025c00 	.word	0x90025c00
90022440:	90025c0a 	.word	0x90025c0a
90022444:	00000000 	.word	0x00000000
90022448:	900221f7 	.word	0x900221f7
9002244c:	90025c06 	.word	0x90025c06

90022450 <_printf_common>:
90022450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90022454:	4616      	mov	r6, r2
90022456:	4699      	mov	r9, r3
90022458:	688a      	ldr	r2, [r1, #8]
9002245a:	690b      	ldr	r3, [r1, #16]
9002245c:	f8dd 8020 	ldr.w	r8, [sp, #32]
90022460:	4293      	cmp	r3, r2
90022462:	bfb8      	it	lt
90022464:	4613      	movlt	r3, r2
90022466:	6033      	str	r3, [r6, #0]
90022468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9002246c:	4607      	mov	r7, r0
9002246e:	460c      	mov	r4, r1
90022470:	b10a      	cbz	r2, 90022476 <_printf_common+0x26>
90022472:	3301      	adds	r3, #1
90022474:	6033      	str	r3, [r6, #0]
90022476:	6823      	ldr	r3, [r4, #0]
90022478:	0699      	lsls	r1, r3, #26
9002247a:	bf42      	ittt	mi
9002247c:	6833      	ldrmi	r3, [r6, #0]
9002247e:	3302      	addmi	r3, #2
90022480:	6033      	strmi	r3, [r6, #0]
90022482:	6825      	ldr	r5, [r4, #0]
90022484:	f015 0506 	ands.w	r5, r5, #6
90022488:	d106      	bne.n	90022498 <_printf_common+0x48>
9002248a:	f104 0a19 	add.w	sl, r4, #25
9002248e:	68e3      	ldr	r3, [r4, #12]
90022490:	6832      	ldr	r2, [r6, #0]
90022492:	1a9b      	subs	r3, r3, r2
90022494:	42ab      	cmp	r3, r5
90022496:	dc26      	bgt.n	900224e6 <_printf_common+0x96>
90022498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9002249c:	1e13      	subs	r3, r2, #0
9002249e:	6822      	ldr	r2, [r4, #0]
900224a0:	bf18      	it	ne
900224a2:	2301      	movne	r3, #1
900224a4:	0692      	lsls	r2, r2, #26
900224a6:	d42b      	bmi.n	90022500 <_printf_common+0xb0>
900224a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
900224ac:	4649      	mov	r1, r9
900224ae:	4638      	mov	r0, r7
900224b0:	47c0      	blx	r8
900224b2:	3001      	adds	r0, #1
900224b4:	d01e      	beq.n	900224f4 <_printf_common+0xa4>
900224b6:	6823      	ldr	r3, [r4, #0]
900224b8:	6922      	ldr	r2, [r4, #16]
900224ba:	f003 0306 	and.w	r3, r3, #6
900224be:	2b04      	cmp	r3, #4
900224c0:	bf02      	ittt	eq
900224c2:	68e5      	ldreq	r5, [r4, #12]
900224c4:	6833      	ldreq	r3, [r6, #0]
900224c6:	1aed      	subeq	r5, r5, r3
900224c8:	68a3      	ldr	r3, [r4, #8]
900224ca:	bf0c      	ite	eq
900224cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
900224d0:	2500      	movne	r5, #0
900224d2:	4293      	cmp	r3, r2
900224d4:	bfc4      	itt	gt
900224d6:	1a9b      	subgt	r3, r3, r2
900224d8:	18ed      	addgt	r5, r5, r3
900224da:	2600      	movs	r6, #0
900224dc:	341a      	adds	r4, #26
900224de:	42b5      	cmp	r5, r6
900224e0:	d11a      	bne.n	90022518 <_printf_common+0xc8>
900224e2:	2000      	movs	r0, #0
900224e4:	e008      	b.n	900224f8 <_printf_common+0xa8>
900224e6:	2301      	movs	r3, #1
900224e8:	4652      	mov	r2, sl
900224ea:	4649      	mov	r1, r9
900224ec:	4638      	mov	r0, r7
900224ee:	47c0      	blx	r8
900224f0:	3001      	adds	r0, #1
900224f2:	d103      	bne.n	900224fc <_printf_common+0xac>
900224f4:	f04f 30ff 	mov.w	r0, #4294967295
900224f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900224fc:	3501      	adds	r5, #1
900224fe:	e7c6      	b.n	9002248e <_printf_common+0x3e>
90022500:	18e1      	adds	r1, r4, r3
90022502:	1c5a      	adds	r2, r3, #1
90022504:	2030      	movs	r0, #48	; 0x30
90022506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9002250a:	4422      	add	r2, r4
9002250c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90022510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90022514:	3302      	adds	r3, #2
90022516:	e7c7      	b.n	900224a8 <_printf_common+0x58>
90022518:	2301      	movs	r3, #1
9002251a:	4622      	mov	r2, r4
9002251c:	4649      	mov	r1, r9
9002251e:	4638      	mov	r0, r7
90022520:	47c0      	blx	r8
90022522:	3001      	adds	r0, #1
90022524:	d0e6      	beq.n	900224f4 <_printf_common+0xa4>
90022526:	3601      	adds	r6, #1
90022528:	e7d9      	b.n	900224de <_printf_common+0x8e>
	...

9002252c <_printf_i>:
9002252c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90022530:	7e0f      	ldrb	r7, [r1, #24]
90022532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90022534:	2f78      	cmp	r7, #120	; 0x78
90022536:	4691      	mov	r9, r2
90022538:	4680      	mov	r8, r0
9002253a:	460c      	mov	r4, r1
9002253c:	469a      	mov	sl, r3
9002253e:	f101 0243 	add.w	r2, r1, #67	; 0x43
90022542:	d807      	bhi.n	90022554 <_printf_i+0x28>
90022544:	2f62      	cmp	r7, #98	; 0x62
90022546:	d80a      	bhi.n	9002255e <_printf_i+0x32>
90022548:	2f00      	cmp	r7, #0
9002254a:	f000 80d4 	beq.w	900226f6 <_printf_i+0x1ca>
9002254e:	2f58      	cmp	r7, #88	; 0x58
90022550:	f000 80c0 	beq.w	900226d4 <_printf_i+0x1a8>
90022554:	f104 0542 	add.w	r5, r4, #66	; 0x42
90022558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9002255c:	e03a      	b.n	900225d4 <_printf_i+0xa8>
9002255e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90022562:	2b15      	cmp	r3, #21
90022564:	d8f6      	bhi.n	90022554 <_printf_i+0x28>
90022566:	a101      	add	r1, pc, #4	; (adr r1, 9002256c <_printf_i+0x40>)
90022568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9002256c:	900225c5 	.word	0x900225c5
90022570:	900225d9 	.word	0x900225d9
90022574:	90022555 	.word	0x90022555
90022578:	90022555 	.word	0x90022555
9002257c:	90022555 	.word	0x90022555
90022580:	90022555 	.word	0x90022555
90022584:	900225d9 	.word	0x900225d9
90022588:	90022555 	.word	0x90022555
9002258c:	90022555 	.word	0x90022555
90022590:	90022555 	.word	0x90022555
90022594:	90022555 	.word	0x90022555
90022598:	900226dd 	.word	0x900226dd
9002259c:	90022605 	.word	0x90022605
900225a0:	90022697 	.word	0x90022697
900225a4:	90022555 	.word	0x90022555
900225a8:	90022555 	.word	0x90022555
900225ac:	900226ff 	.word	0x900226ff
900225b0:	90022555 	.word	0x90022555
900225b4:	90022605 	.word	0x90022605
900225b8:	90022555 	.word	0x90022555
900225bc:	90022555 	.word	0x90022555
900225c0:	9002269f 	.word	0x9002269f
900225c4:	682b      	ldr	r3, [r5, #0]
900225c6:	1d1a      	adds	r2, r3, #4
900225c8:	681b      	ldr	r3, [r3, #0]
900225ca:	602a      	str	r2, [r5, #0]
900225cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
900225d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
900225d4:	2301      	movs	r3, #1
900225d6:	e09f      	b.n	90022718 <_printf_i+0x1ec>
900225d8:	6820      	ldr	r0, [r4, #0]
900225da:	682b      	ldr	r3, [r5, #0]
900225dc:	0607      	lsls	r7, r0, #24
900225de:	f103 0104 	add.w	r1, r3, #4
900225e2:	6029      	str	r1, [r5, #0]
900225e4:	d501      	bpl.n	900225ea <_printf_i+0xbe>
900225e6:	681e      	ldr	r6, [r3, #0]
900225e8:	e003      	b.n	900225f2 <_printf_i+0xc6>
900225ea:	0646      	lsls	r6, r0, #25
900225ec:	d5fb      	bpl.n	900225e6 <_printf_i+0xba>
900225ee:	f9b3 6000 	ldrsh.w	r6, [r3]
900225f2:	2e00      	cmp	r6, #0
900225f4:	da03      	bge.n	900225fe <_printf_i+0xd2>
900225f6:	232d      	movs	r3, #45	; 0x2d
900225f8:	4276      	negs	r6, r6
900225fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900225fe:	485a      	ldr	r0, [pc, #360]	; (90022768 <_printf_i+0x23c>)
90022600:	230a      	movs	r3, #10
90022602:	e012      	b.n	9002262a <_printf_i+0xfe>
90022604:	682b      	ldr	r3, [r5, #0]
90022606:	6820      	ldr	r0, [r4, #0]
90022608:	1d19      	adds	r1, r3, #4
9002260a:	6029      	str	r1, [r5, #0]
9002260c:	0605      	lsls	r5, r0, #24
9002260e:	d501      	bpl.n	90022614 <_printf_i+0xe8>
90022610:	681e      	ldr	r6, [r3, #0]
90022612:	e002      	b.n	9002261a <_printf_i+0xee>
90022614:	0641      	lsls	r1, r0, #25
90022616:	d5fb      	bpl.n	90022610 <_printf_i+0xe4>
90022618:	881e      	ldrh	r6, [r3, #0]
9002261a:	4853      	ldr	r0, [pc, #332]	; (90022768 <_printf_i+0x23c>)
9002261c:	2f6f      	cmp	r7, #111	; 0x6f
9002261e:	bf0c      	ite	eq
90022620:	2308      	moveq	r3, #8
90022622:	230a      	movne	r3, #10
90022624:	2100      	movs	r1, #0
90022626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9002262a:	6865      	ldr	r5, [r4, #4]
9002262c:	60a5      	str	r5, [r4, #8]
9002262e:	2d00      	cmp	r5, #0
90022630:	bfa2      	ittt	ge
90022632:	6821      	ldrge	r1, [r4, #0]
90022634:	f021 0104 	bicge.w	r1, r1, #4
90022638:	6021      	strge	r1, [r4, #0]
9002263a:	b90e      	cbnz	r6, 90022640 <_printf_i+0x114>
9002263c:	2d00      	cmp	r5, #0
9002263e:	d04b      	beq.n	900226d8 <_printf_i+0x1ac>
90022640:	4615      	mov	r5, r2
90022642:	fbb6 f1f3 	udiv	r1, r6, r3
90022646:	fb03 6711 	mls	r7, r3, r1, r6
9002264a:	5dc7      	ldrb	r7, [r0, r7]
9002264c:	f805 7d01 	strb.w	r7, [r5, #-1]!
90022650:	4637      	mov	r7, r6
90022652:	42bb      	cmp	r3, r7
90022654:	460e      	mov	r6, r1
90022656:	d9f4      	bls.n	90022642 <_printf_i+0x116>
90022658:	2b08      	cmp	r3, #8
9002265a:	d10b      	bne.n	90022674 <_printf_i+0x148>
9002265c:	6823      	ldr	r3, [r4, #0]
9002265e:	07de      	lsls	r6, r3, #31
90022660:	d508      	bpl.n	90022674 <_printf_i+0x148>
90022662:	6923      	ldr	r3, [r4, #16]
90022664:	6861      	ldr	r1, [r4, #4]
90022666:	4299      	cmp	r1, r3
90022668:	bfde      	ittt	le
9002266a:	2330      	movle	r3, #48	; 0x30
9002266c:	f805 3c01 	strble.w	r3, [r5, #-1]
90022670:	f105 35ff 	addle.w	r5, r5, #4294967295
90022674:	1b52      	subs	r2, r2, r5
90022676:	6122      	str	r2, [r4, #16]
90022678:	f8cd a000 	str.w	sl, [sp]
9002267c:	464b      	mov	r3, r9
9002267e:	aa03      	add	r2, sp, #12
90022680:	4621      	mov	r1, r4
90022682:	4640      	mov	r0, r8
90022684:	f7ff fee4 	bl	90022450 <_printf_common>
90022688:	3001      	adds	r0, #1
9002268a:	d14a      	bne.n	90022722 <_printf_i+0x1f6>
9002268c:	f04f 30ff 	mov.w	r0, #4294967295
90022690:	b004      	add	sp, #16
90022692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90022696:	6823      	ldr	r3, [r4, #0]
90022698:	f043 0320 	orr.w	r3, r3, #32
9002269c:	6023      	str	r3, [r4, #0]
9002269e:	4833      	ldr	r0, [pc, #204]	; (9002276c <_printf_i+0x240>)
900226a0:	2778      	movs	r7, #120	; 0x78
900226a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
900226a6:	6823      	ldr	r3, [r4, #0]
900226a8:	6829      	ldr	r1, [r5, #0]
900226aa:	061f      	lsls	r7, r3, #24
900226ac:	f851 6b04 	ldr.w	r6, [r1], #4
900226b0:	d402      	bmi.n	900226b8 <_printf_i+0x18c>
900226b2:	065f      	lsls	r7, r3, #25
900226b4:	bf48      	it	mi
900226b6:	b2b6      	uxthmi	r6, r6
900226b8:	07df      	lsls	r7, r3, #31
900226ba:	bf48      	it	mi
900226bc:	f043 0320 	orrmi.w	r3, r3, #32
900226c0:	6029      	str	r1, [r5, #0]
900226c2:	bf48      	it	mi
900226c4:	6023      	strmi	r3, [r4, #0]
900226c6:	b91e      	cbnz	r6, 900226d0 <_printf_i+0x1a4>
900226c8:	6823      	ldr	r3, [r4, #0]
900226ca:	f023 0320 	bic.w	r3, r3, #32
900226ce:	6023      	str	r3, [r4, #0]
900226d0:	2310      	movs	r3, #16
900226d2:	e7a7      	b.n	90022624 <_printf_i+0xf8>
900226d4:	4824      	ldr	r0, [pc, #144]	; (90022768 <_printf_i+0x23c>)
900226d6:	e7e4      	b.n	900226a2 <_printf_i+0x176>
900226d8:	4615      	mov	r5, r2
900226da:	e7bd      	b.n	90022658 <_printf_i+0x12c>
900226dc:	682b      	ldr	r3, [r5, #0]
900226de:	6826      	ldr	r6, [r4, #0]
900226e0:	6961      	ldr	r1, [r4, #20]
900226e2:	1d18      	adds	r0, r3, #4
900226e4:	6028      	str	r0, [r5, #0]
900226e6:	0635      	lsls	r5, r6, #24
900226e8:	681b      	ldr	r3, [r3, #0]
900226ea:	d501      	bpl.n	900226f0 <_printf_i+0x1c4>
900226ec:	6019      	str	r1, [r3, #0]
900226ee:	e002      	b.n	900226f6 <_printf_i+0x1ca>
900226f0:	0670      	lsls	r0, r6, #25
900226f2:	d5fb      	bpl.n	900226ec <_printf_i+0x1c0>
900226f4:	8019      	strh	r1, [r3, #0]
900226f6:	2300      	movs	r3, #0
900226f8:	6123      	str	r3, [r4, #16]
900226fa:	4615      	mov	r5, r2
900226fc:	e7bc      	b.n	90022678 <_printf_i+0x14c>
900226fe:	682b      	ldr	r3, [r5, #0]
90022700:	1d1a      	adds	r2, r3, #4
90022702:	602a      	str	r2, [r5, #0]
90022704:	681d      	ldr	r5, [r3, #0]
90022706:	6862      	ldr	r2, [r4, #4]
90022708:	2100      	movs	r1, #0
9002270a:	4628      	mov	r0, r5
9002270c:	f7dd fde8 	bl	900002e0 <memchr>
90022710:	b108      	cbz	r0, 90022716 <_printf_i+0x1ea>
90022712:	1b40      	subs	r0, r0, r5
90022714:	6060      	str	r0, [r4, #4]
90022716:	6863      	ldr	r3, [r4, #4]
90022718:	6123      	str	r3, [r4, #16]
9002271a:	2300      	movs	r3, #0
9002271c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90022720:	e7aa      	b.n	90022678 <_printf_i+0x14c>
90022722:	6923      	ldr	r3, [r4, #16]
90022724:	462a      	mov	r2, r5
90022726:	4649      	mov	r1, r9
90022728:	4640      	mov	r0, r8
9002272a:	47d0      	blx	sl
9002272c:	3001      	adds	r0, #1
9002272e:	d0ad      	beq.n	9002268c <_printf_i+0x160>
90022730:	6823      	ldr	r3, [r4, #0]
90022732:	079b      	lsls	r3, r3, #30
90022734:	d413      	bmi.n	9002275e <_printf_i+0x232>
90022736:	68e0      	ldr	r0, [r4, #12]
90022738:	9b03      	ldr	r3, [sp, #12]
9002273a:	4298      	cmp	r0, r3
9002273c:	bfb8      	it	lt
9002273e:	4618      	movlt	r0, r3
90022740:	e7a6      	b.n	90022690 <_printf_i+0x164>
90022742:	2301      	movs	r3, #1
90022744:	4632      	mov	r2, r6
90022746:	4649      	mov	r1, r9
90022748:	4640      	mov	r0, r8
9002274a:	47d0      	blx	sl
9002274c:	3001      	adds	r0, #1
9002274e:	d09d      	beq.n	9002268c <_printf_i+0x160>
90022750:	3501      	adds	r5, #1
90022752:	68e3      	ldr	r3, [r4, #12]
90022754:	9903      	ldr	r1, [sp, #12]
90022756:	1a5b      	subs	r3, r3, r1
90022758:	42ab      	cmp	r3, r5
9002275a:	dcf2      	bgt.n	90022742 <_printf_i+0x216>
9002275c:	e7eb      	b.n	90022736 <_printf_i+0x20a>
9002275e:	2500      	movs	r5, #0
90022760:	f104 0619 	add.w	r6, r4, #25
90022764:	e7f5      	b.n	90022752 <_printf_i+0x226>
90022766:	bf00      	nop
90022768:	90025c11 	.word	0x90025c11
9002276c:	90025c22 	.word	0x90025c22

90022770 <__sflush_r>:
90022770:	898a      	ldrh	r2, [r1, #12]
90022772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90022776:	4605      	mov	r5, r0
90022778:	0710      	lsls	r0, r2, #28
9002277a:	460c      	mov	r4, r1
9002277c:	d458      	bmi.n	90022830 <__sflush_r+0xc0>
9002277e:	684b      	ldr	r3, [r1, #4]
90022780:	2b00      	cmp	r3, #0
90022782:	dc05      	bgt.n	90022790 <__sflush_r+0x20>
90022784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90022786:	2b00      	cmp	r3, #0
90022788:	dc02      	bgt.n	90022790 <__sflush_r+0x20>
9002278a:	2000      	movs	r0, #0
9002278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90022792:	2e00      	cmp	r6, #0
90022794:	d0f9      	beq.n	9002278a <__sflush_r+0x1a>
90022796:	2300      	movs	r3, #0
90022798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9002279c:	682f      	ldr	r7, [r5, #0]
9002279e:	6a21      	ldr	r1, [r4, #32]
900227a0:	602b      	str	r3, [r5, #0]
900227a2:	d032      	beq.n	9002280a <__sflush_r+0x9a>
900227a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
900227a6:	89a3      	ldrh	r3, [r4, #12]
900227a8:	075a      	lsls	r2, r3, #29
900227aa:	d505      	bpl.n	900227b8 <__sflush_r+0x48>
900227ac:	6863      	ldr	r3, [r4, #4]
900227ae:	1ac0      	subs	r0, r0, r3
900227b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
900227b2:	b10b      	cbz	r3, 900227b8 <__sflush_r+0x48>
900227b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
900227b6:	1ac0      	subs	r0, r0, r3
900227b8:	2300      	movs	r3, #0
900227ba:	4602      	mov	r2, r0
900227bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900227be:	6a21      	ldr	r1, [r4, #32]
900227c0:	4628      	mov	r0, r5
900227c2:	47b0      	blx	r6
900227c4:	1c43      	adds	r3, r0, #1
900227c6:	89a3      	ldrh	r3, [r4, #12]
900227c8:	d106      	bne.n	900227d8 <__sflush_r+0x68>
900227ca:	6829      	ldr	r1, [r5, #0]
900227cc:	291d      	cmp	r1, #29
900227ce:	d82b      	bhi.n	90022828 <__sflush_r+0xb8>
900227d0:	4a29      	ldr	r2, [pc, #164]	; (90022878 <__sflush_r+0x108>)
900227d2:	410a      	asrs	r2, r1
900227d4:	07d6      	lsls	r6, r2, #31
900227d6:	d427      	bmi.n	90022828 <__sflush_r+0xb8>
900227d8:	2200      	movs	r2, #0
900227da:	6062      	str	r2, [r4, #4]
900227dc:	04d9      	lsls	r1, r3, #19
900227de:	6922      	ldr	r2, [r4, #16]
900227e0:	6022      	str	r2, [r4, #0]
900227e2:	d504      	bpl.n	900227ee <__sflush_r+0x7e>
900227e4:	1c42      	adds	r2, r0, #1
900227e6:	d101      	bne.n	900227ec <__sflush_r+0x7c>
900227e8:	682b      	ldr	r3, [r5, #0]
900227ea:	b903      	cbnz	r3, 900227ee <__sflush_r+0x7e>
900227ec:	6560      	str	r0, [r4, #84]	; 0x54
900227ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
900227f0:	602f      	str	r7, [r5, #0]
900227f2:	2900      	cmp	r1, #0
900227f4:	d0c9      	beq.n	9002278a <__sflush_r+0x1a>
900227f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
900227fa:	4299      	cmp	r1, r3
900227fc:	d002      	beq.n	90022804 <__sflush_r+0x94>
900227fe:	4628      	mov	r0, r5
90022800:	f7ff fc96 	bl	90022130 <_free_r>
90022804:	2000      	movs	r0, #0
90022806:	6360      	str	r0, [r4, #52]	; 0x34
90022808:	e7c0      	b.n	9002278c <__sflush_r+0x1c>
9002280a:	2301      	movs	r3, #1
9002280c:	4628      	mov	r0, r5
9002280e:	47b0      	blx	r6
90022810:	1c41      	adds	r1, r0, #1
90022812:	d1c8      	bne.n	900227a6 <__sflush_r+0x36>
90022814:	682b      	ldr	r3, [r5, #0]
90022816:	2b00      	cmp	r3, #0
90022818:	d0c5      	beq.n	900227a6 <__sflush_r+0x36>
9002281a:	2b1d      	cmp	r3, #29
9002281c:	d001      	beq.n	90022822 <__sflush_r+0xb2>
9002281e:	2b16      	cmp	r3, #22
90022820:	d101      	bne.n	90022826 <__sflush_r+0xb6>
90022822:	602f      	str	r7, [r5, #0]
90022824:	e7b1      	b.n	9002278a <__sflush_r+0x1a>
90022826:	89a3      	ldrh	r3, [r4, #12]
90022828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002282c:	81a3      	strh	r3, [r4, #12]
9002282e:	e7ad      	b.n	9002278c <__sflush_r+0x1c>
90022830:	690f      	ldr	r7, [r1, #16]
90022832:	2f00      	cmp	r7, #0
90022834:	d0a9      	beq.n	9002278a <__sflush_r+0x1a>
90022836:	0793      	lsls	r3, r2, #30
90022838:	680e      	ldr	r6, [r1, #0]
9002283a:	bf08      	it	eq
9002283c:	694b      	ldreq	r3, [r1, #20]
9002283e:	600f      	str	r7, [r1, #0]
90022840:	bf18      	it	ne
90022842:	2300      	movne	r3, #0
90022844:	eba6 0807 	sub.w	r8, r6, r7
90022848:	608b      	str	r3, [r1, #8]
9002284a:	f1b8 0f00 	cmp.w	r8, #0
9002284e:	dd9c      	ble.n	9002278a <__sflush_r+0x1a>
90022850:	6a21      	ldr	r1, [r4, #32]
90022852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90022854:	4643      	mov	r3, r8
90022856:	463a      	mov	r2, r7
90022858:	4628      	mov	r0, r5
9002285a:	47b0      	blx	r6
9002285c:	2800      	cmp	r0, #0
9002285e:	dc06      	bgt.n	9002286e <__sflush_r+0xfe>
90022860:	89a3      	ldrh	r3, [r4, #12]
90022862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90022866:	81a3      	strh	r3, [r4, #12]
90022868:	f04f 30ff 	mov.w	r0, #4294967295
9002286c:	e78e      	b.n	9002278c <__sflush_r+0x1c>
9002286e:	4407      	add	r7, r0
90022870:	eba8 0800 	sub.w	r8, r8, r0
90022874:	e7e9      	b.n	9002284a <__sflush_r+0xda>
90022876:	bf00      	nop
90022878:	dfbffffe 	.word	0xdfbffffe

9002287c <_fflush_r>:
9002287c:	b538      	push	{r3, r4, r5, lr}
9002287e:	690b      	ldr	r3, [r1, #16]
90022880:	4605      	mov	r5, r0
90022882:	460c      	mov	r4, r1
90022884:	b913      	cbnz	r3, 9002288c <_fflush_r+0x10>
90022886:	2500      	movs	r5, #0
90022888:	4628      	mov	r0, r5
9002288a:	bd38      	pop	{r3, r4, r5, pc}
9002288c:	b118      	cbz	r0, 90022896 <_fflush_r+0x1a>
9002288e:	6a03      	ldr	r3, [r0, #32]
90022890:	b90b      	cbnz	r3, 90022896 <_fflush_r+0x1a>
90022892:	f7ff f9df 	bl	90021c54 <__sinit>
90022896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9002289a:	2b00      	cmp	r3, #0
9002289c:	d0f3      	beq.n	90022886 <_fflush_r+0xa>
9002289e:	6e62      	ldr	r2, [r4, #100]	; 0x64
900228a0:	07d0      	lsls	r0, r2, #31
900228a2:	d404      	bmi.n	900228ae <_fflush_r+0x32>
900228a4:	0599      	lsls	r1, r3, #22
900228a6:	d402      	bmi.n	900228ae <_fflush_r+0x32>
900228a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
900228aa:	f7ff fbd2 	bl	90022052 <__retarget_lock_acquire_recursive>
900228ae:	4628      	mov	r0, r5
900228b0:	4621      	mov	r1, r4
900228b2:	f7ff ff5d 	bl	90022770 <__sflush_r>
900228b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
900228b8:	07da      	lsls	r2, r3, #31
900228ba:	4605      	mov	r5, r0
900228bc:	d4e4      	bmi.n	90022888 <_fflush_r+0xc>
900228be:	89a3      	ldrh	r3, [r4, #12]
900228c0:	059b      	lsls	r3, r3, #22
900228c2:	d4e1      	bmi.n	90022888 <_fflush_r+0xc>
900228c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
900228c6:	f7ff fbc5 	bl	90022054 <__retarget_lock_release_recursive>
900228ca:	e7dd      	b.n	90022888 <_fflush_r+0xc>

900228cc <__swhatbuf_r>:
900228cc:	b570      	push	{r4, r5, r6, lr}
900228ce:	460c      	mov	r4, r1
900228d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900228d4:	2900      	cmp	r1, #0
900228d6:	b096      	sub	sp, #88	; 0x58
900228d8:	4615      	mov	r5, r2
900228da:	461e      	mov	r6, r3
900228dc:	da0d      	bge.n	900228fa <__swhatbuf_r+0x2e>
900228de:	89a3      	ldrh	r3, [r4, #12]
900228e0:	f013 0f80 	tst.w	r3, #128	; 0x80
900228e4:	f04f 0100 	mov.w	r1, #0
900228e8:	bf0c      	ite	eq
900228ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
900228ee:	2340      	movne	r3, #64	; 0x40
900228f0:	2000      	movs	r0, #0
900228f2:	6031      	str	r1, [r6, #0]
900228f4:	602b      	str	r3, [r5, #0]
900228f6:	b016      	add	sp, #88	; 0x58
900228f8:	bd70      	pop	{r4, r5, r6, pc}
900228fa:	466a      	mov	r2, sp
900228fc:	f000 f848 	bl	90022990 <_fstat_r>
90022900:	2800      	cmp	r0, #0
90022902:	dbec      	blt.n	900228de <__swhatbuf_r+0x12>
90022904:	9901      	ldr	r1, [sp, #4]
90022906:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
9002290a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
9002290e:	4259      	negs	r1, r3
90022910:	4159      	adcs	r1, r3
90022912:	f44f 6380 	mov.w	r3, #1024	; 0x400
90022916:	e7eb      	b.n	900228f0 <__swhatbuf_r+0x24>

90022918 <__smakebuf_r>:
90022918:	898b      	ldrh	r3, [r1, #12]
9002291a:	b573      	push	{r0, r1, r4, r5, r6, lr}
9002291c:	079d      	lsls	r5, r3, #30
9002291e:	4606      	mov	r6, r0
90022920:	460c      	mov	r4, r1
90022922:	d507      	bpl.n	90022934 <__smakebuf_r+0x1c>
90022924:	f104 0347 	add.w	r3, r4, #71	; 0x47
90022928:	6023      	str	r3, [r4, #0]
9002292a:	6123      	str	r3, [r4, #16]
9002292c:	2301      	movs	r3, #1
9002292e:	6163      	str	r3, [r4, #20]
90022930:	b002      	add	sp, #8
90022932:	bd70      	pop	{r4, r5, r6, pc}
90022934:	ab01      	add	r3, sp, #4
90022936:	466a      	mov	r2, sp
90022938:	f7ff ffc8 	bl	900228cc <__swhatbuf_r>
9002293c:	9900      	ldr	r1, [sp, #0]
9002293e:	4605      	mov	r5, r0
90022940:	4630      	mov	r0, r6
90022942:	f7ff f861 	bl	90021a08 <_malloc_r>
90022946:	b948      	cbnz	r0, 9002295c <__smakebuf_r+0x44>
90022948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9002294c:	059a      	lsls	r2, r3, #22
9002294e:	d4ef      	bmi.n	90022930 <__smakebuf_r+0x18>
90022950:	f023 0303 	bic.w	r3, r3, #3
90022954:	f043 0302 	orr.w	r3, r3, #2
90022958:	81a3      	strh	r3, [r4, #12]
9002295a:	e7e3      	b.n	90022924 <__smakebuf_r+0xc>
9002295c:	89a3      	ldrh	r3, [r4, #12]
9002295e:	6020      	str	r0, [r4, #0]
90022960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90022964:	81a3      	strh	r3, [r4, #12]
90022966:	9b00      	ldr	r3, [sp, #0]
90022968:	6163      	str	r3, [r4, #20]
9002296a:	9b01      	ldr	r3, [sp, #4]
9002296c:	6120      	str	r0, [r4, #16]
9002296e:	b15b      	cbz	r3, 90022988 <__smakebuf_r+0x70>
90022970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90022974:	4630      	mov	r0, r6
90022976:	f000 f81d 	bl	900229b4 <_isatty_r>
9002297a:	b128      	cbz	r0, 90022988 <__smakebuf_r+0x70>
9002297c:	89a3      	ldrh	r3, [r4, #12]
9002297e:	f023 0303 	bic.w	r3, r3, #3
90022982:	f043 0301 	orr.w	r3, r3, #1
90022986:	81a3      	strh	r3, [r4, #12]
90022988:	89a3      	ldrh	r3, [r4, #12]
9002298a:	431d      	orrs	r5, r3
9002298c:	81a5      	strh	r5, [r4, #12]
9002298e:	e7cf      	b.n	90022930 <__smakebuf_r+0x18>

90022990 <_fstat_r>:
90022990:	b538      	push	{r3, r4, r5, lr}
90022992:	4d07      	ldr	r5, [pc, #28]	; (900229b0 <_fstat_r+0x20>)
90022994:	2300      	movs	r3, #0
90022996:	4604      	mov	r4, r0
90022998:	4608      	mov	r0, r1
9002299a:	4611      	mov	r1, r2
9002299c:	602b      	str	r3, [r5, #0]
9002299e:	f7e2 f9b1 	bl	90004d04 <_fstat>
900229a2:	1c43      	adds	r3, r0, #1
900229a4:	d102      	bne.n	900229ac <_fstat_r+0x1c>
900229a6:	682b      	ldr	r3, [r5, #0]
900229a8:	b103      	cbz	r3, 900229ac <_fstat_r+0x1c>
900229aa:	6023      	str	r3, [r4, #0]
900229ac:	bd38      	pop	{r3, r4, r5, pc}
900229ae:	bf00      	nop
900229b0:	2402644c 	.word	0x2402644c

900229b4 <_isatty_r>:
900229b4:	b538      	push	{r3, r4, r5, lr}
900229b6:	4d06      	ldr	r5, [pc, #24]	; (900229d0 <_isatty_r+0x1c>)
900229b8:	2300      	movs	r3, #0
900229ba:	4604      	mov	r4, r0
900229bc:	4608      	mov	r0, r1
900229be:	602b      	str	r3, [r5, #0]
900229c0:	f7e2 f9a6 	bl	90004d10 <_isatty>
900229c4:	1c43      	adds	r3, r0, #1
900229c6:	d102      	bne.n	900229ce <_isatty_r+0x1a>
900229c8:	682b      	ldr	r3, [r5, #0]
900229ca:	b103      	cbz	r3, 900229ce <_isatty_r+0x1a>
900229cc:	6023      	str	r3, [r4, #0]
900229ce:	bd38      	pop	{r3, r4, r5, pc}
900229d0:	2402644c 	.word	0x2402644c

900229d4 <_init>:
900229d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900229d6:	bf00      	nop
900229d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
900229da:	bc08      	pop	{r3}
900229dc:	469e      	mov	lr, r3
900229de:	4770      	bx	lr

900229e0 <_fini>:
900229e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900229e2:	bf00      	nop
900229e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
900229e6:	bc08      	pop	{r3}
900229e8:	469e      	mov	lr, r3
900229ea:	4770      	bx	lr
