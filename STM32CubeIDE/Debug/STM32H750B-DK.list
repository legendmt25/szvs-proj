
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00027f74  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000041a4  90028214  90028214  00048214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  9002c3b8  9002c3b8  0004c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002c570  9002c570  00b30d94  2**0
                  CONTENTS
  6 .ARM          00000000  9002c570  9002c570  00b30d94  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002c570  9002c570  00b30d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002c570  9002c570  0004c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002c58c  9002c58c  0004c58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  9002c594  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002c6d4  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00022a3c  24005b40  900320d4  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  2402857c  900320d4  0005857c  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00b30d94  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002198  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000dc  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 00aceb20  90202274  90202274  00062274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  00b40000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  00b40000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  00b30dc2  2**0
                  CONTENTS, READONLY
 21 .debug_line   0007ced8  00000000  00000000  00b30e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00badd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000fda99  00000000  00000000  00baddc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 000187fd  00000000  00000000  00cab860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003788  00000000  00000000  00cc4060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001a3268  00000000  00000000  00cc77e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00007aa7  00000000  00000000  00e6aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004a1cf  00000000  00000000  00e724f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000b230  00000000  00000000  00ebc6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0003cd41  00000000  00000000  00ec78f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	900281fc 	.word	0x900281fc

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	900281fc 	.word	0x900281fc

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr
	...

90000300 <memchr>:
90000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000304:	2a10      	cmp	r2, #16
90000306:	db2b      	blt.n	90000360 <memchr+0x60>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	d008      	beq.n	90000320 <memchr+0x20>
9000030e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000312:	3a01      	subs	r2, #1
90000314:	428b      	cmp	r3, r1
90000316:	d02d      	beq.n	90000374 <memchr+0x74>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	b342      	cbz	r2, 90000370 <memchr+0x70>
9000031e:	d1f6      	bne.n	9000030e <memchr+0xe>
90000320:	b4f0      	push	{r4, r5, r6, r7}
90000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000032a:	f022 0407 	bic.w	r4, r2, #7
9000032e:	f07f 0700 	mvns.w	r7, #0
90000332:	2300      	movs	r3, #0
90000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000338:	3c08      	subs	r4, #8
9000033a:	ea85 0501 	eor.w	r5, r5, r1
9000033e:	ea86 0601 	eor.w	r6, r6, r1
90000342:	fa85 f547 	uadd8	r5, r5, r7
90000346:	faa3 f587 	sel	r5, r3, r7
9000034a:	fa86 f647 	uadd8	r6, r6, r7
9000034e:	faa5 f687 	sel	r6, r5, r7
90000352:	b98e      	cbnz	r6, 90000378 <memchr+0x78>
90000354:	d1ee      	bne.n	90000334 <memchr+0x34>
90000356:	bcf0      	pop	{r4, r5, r6, r7}
90000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000035c:	f002 0207 	and.w	r2, r2, #7
90000360:	b132      	cbz	r2, 90000370 <memchr+0x70>
90000362:	f810 3b01 	ldrb.w	r3, [r0], #1
90000366:	3a01      	subs	r2, #1
90000368:	ea83 0301 	eor.w	r3, r3, r1
9000036c:	b113      	cbz	r3, 90000374 <memchr+0x74>
9000036e:	d1f8      	bne.n	90000362 <memchr+0x62>
90000370:	2000      	movs	r0, #0
90000372:	4770      	bx	lr
90000374:	3801      	subs	r0, #1
90000376:	4770      	bx	lr
90000378:	2d00      	cmp	r5, #0
9000037a:	bf06      	itte	eq
9000037c:	4635      	moveq	r5, r6
9000037e:	3803      	subeq	r0, #3
90000380:	3807      	subne	r0, #7
90000382:	f015 0f01 	tst.w	r5, #1
90000386:	d107      	bne.n	90000398 <memchr+0x98>
90000388:	3001      	adds	r0, #1
9000038a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000038e:	bf02      	ittt	eq
90000390:	3001      	addeq	r0, #1
90000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000396:	3001      	addeq	r0, #1
90000398:	bcf0      	pop	{r4, r5, r6, r7}
9000039a:	3801      	subs	r0, #1
9000039c:	4770      	bx	lr
9000039e:	bf00      	nop

900003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900003a6:	e003      	b.n	900003b0 <LoopCopyDataInit>

900003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900003a8:	4b0c      	ldr	r3, [pc, #48]	; (900003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900003ae:	3104      	adds	r1, #4

900003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900003b0:	480b      	ldr	r0, [pc, #44]	; (900003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900003b2:	4b0c      	ldr	r3, [pc, #48]	; (900003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900003b8:	d3f6      	bcc.n	900003a8 <CopyDataInit>
  ldr  r2, =_sbss
900003ba:	4a0b      	ldr	r2, [pc, #44]	; (900003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900003bc:	e002      	b.n	900003c4 <LoopFillZerobss>

900003be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003c0:	f842 3b04 	str.w	r3, [r2], #4

900003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003c4:	4b09      	ldr	r3, [pc, #36]	; (900003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003c8:	d3f9      	bcc.n	900003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003ca:	f008 ffbf 	bl	9000934c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ce:	f027 fa2f 	bl	90027830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003d2:	f003 ff85 	bl	900042e0 <main>
  bx  lr    
900003d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003dc:	9002c594 	.word	0x9002c594
  ldr  r0, =_sdata
900003e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003e4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003e8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003ec:	2402857c 	.word	0x2402857c

900003f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003f0:	e7fe      	b.n	900003f0 <ADC3_IRQHandler>
	...

900003f4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003f4:	4770      	bx	lr
900003f6:	bf00      	nop

900003f8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003f8:	4770      	bx	lr
900003fa:	bf00      	nop

900003fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003fc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003fe:	f001 ff25 	bl	9000224c <touchgfx_components_init>
  touchgfx_init();
}
90000402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
90000406:	f001 bea7 	b.w	90002158 <touchgfx_init>
9000040a:	bf00      	nop

9000040c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
9000040c:	f001 bf20 	b.w	90002250 <touchgfx_taskEntry>

90000410 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000410:	6840      	ldr	r0, [r0, #4]
    }
90000412:	4770      	bx	lr

90000414 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
90000414:	6041      	str	r1, [r0, #4]
    }
90000416:	4770      	bx	lr

90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000418:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000041c:	4b08      	ldr	r3, [pc, #32]	; (90000440 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
9000041e:	4a09      	ldr	r2, [pc, #36]	; (90000444 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000420:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000424:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000428:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000042c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000430:	430a      	orrs	r2, r1
90000432:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000436:	681a      	ldr	r2, [r3, #0]
90000438:	f042 0201 	orr.w	r2, r2, #1
9000043c:	601a      	str	r2, [r3, #0]
}
9000043e:	4770      	bx	lr
90000440:	e0001000 	.word	0xe0001000
90000444:	c5acce55 	.word	0xc5acce55

90000448 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000448:	1a51      	subs	r1, r2, r1
9000044a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000044e:	fbb1 f0f3 	udiv	r0, r1, r3
90000452:	4770      	bx	lr

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000454:	4b01      	ldr	r3, [pc, #4]	; (9000045c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000456:	6858      	ldr	r0, [r3, #4]
}
90000458:	4770      	bx	lr
9000045a:	bf00      	nop
9000045c:	e0001000 	.word	0xe0001000

90000460 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000460:	4770      	bx	lr
90000462:	bf00      	nop

90000464 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000464:	b510      	push	{r4, lr}
90000466:	4604      	mov	r4, r0
90000468:	210c      	movs	r1, #12
9000046a:	f026 fe44 	bl	900270f6 <_ZdlPvj>
9000046e:	4620      	mov	r0, r4
90000470:	bd10      	pop	{r4, pc}
90000472:	bf00      	nop

90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000474:	6803      	ldr	r3, [r0, #0]
90000476:	4a0c      	ldr	r2, [pc, #48]	; (900004a8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000478:	691b      	ldr	r3, [r3, #16]
{
9000047a:	b510      	push	{r4, lr}
9000047c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000047e:	b149      	cbz	r1, 90000494 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4293      	cmp	r3, r2
90000482:	d10d      	bne.n	900004a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000484:	4b09      	ldr	r3, [pc, #36]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000486:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000488:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000048a:	6863      	ldr	r3, [r4, #4]
9000048c:	1a9b      	subs	r3, r3, r2
9000048e:	4403      	add	r3, r0
90000490:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000492:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000494:	4293      	cmp	r3, r2
90000496:	d105      	bne.n	900004a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000498:	4b04      	ldr	r3, [pc, #16]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000049a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000049c:	60a0      	str	r0, [r4, #8]
}
9000049e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
900004a0:	4798      	blx	r3
900004a2:	e7f1      	b.n	90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
900004a4:	4798      	blx	r3
900004a6:	e7f9      	b.n	9000049c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
900004a8:	90000455 	.word	0x90000455
900004ac:	e0001000 	.word	0xe0001000

900004b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
900004b0:	4770      	bx	lr
900004b2:	bf00      	nop
900004b4:	0000      	movs	r0, r0
	...

900004b8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900004b8:	b500      	push	{lr}
900004ba:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900004bc:	2208      	movs	r2, #8
900004be:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004c0:	2000      	movs	r0, #0
900004c2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004e0 <_ZN20STM32TouchController4initEv+0x28>
900004c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004cc:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004d0:	f008 fe4a 	bl	90009168 <BSP_TS_Init>
}
900004d4:	b005      	add	sp, #20
900004d6:	f85d fb04 	ldr.w	pc, [sp], #4
900004da:	bf00      	nop
900004dc:	f3af 8000 	nop.w
900004e0:	000001e0 	.word	0x000001e0
900004e4:	00000110 	.word	0x00000110

900004e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004e8:	b530      	push	{r4, r5, lr}
900004ea:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004ec:	2000      	movs	r0, #0
{
900004ee:	460d      	mov	r5, r1
900004f0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004f2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004f4:	9001      	str	r0, [sp, #4]
900004f6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004fa:	f008 fec3 	bl	90009284 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004fe:	9801      	ldr	r0, [sp, #4]
90000500:	b120      	cbz	r0, 9000050c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
90000502:	2001      	movs	r0, #1
        y = TS_State.TouchY;
90000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
90000508:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
9000050a:	6023      	str	r3, [r4, #0]
    }

    return false;
}
9000050c:	b005      	add	sp, #20
9000050e:	bd30      	pop	{r4, r5, pc}

90000510 <_ZN20STM32TouchControllerD0Ev>:
90000510:	b510      	push	{r4, lr}
90000512:	4604      	mov	r4, r0
90000514:	2104      	movs	r1, #4
90000516:	f026 fdee 	bl	900270f6 <_ZdlPvj>
9000051a:	4620      	mov	r0, r4
9000051c:	bd10      	pop	{r4, pc}
9000051e:	bf00      	nop

90000520 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000520:	2108      	movs	r1, #8
90000522:	4810      	ldr	r0, [pc, #64]	; (90000564 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000524:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000526:	f009 fc13 	bl	90009d50 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b0e      	ldr	r3, [pc, #56]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000532:	2180      	movs	r1, #128	; 0x80
90000534:	480d      	ldr	r0, [pc, #52]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000536:	f009 fc0b 	bl	90009d50 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b0a      	ldr	r3, [pc, #40]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000542:	2140      	movs	r1, #64	; 0x40
90000544:	4809      	ldr	r0, [pc, #36]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000546:	f009 fc03 	bl	90009d50 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000054a:	2801      	cmp	r0, #1
9000054c:	d101      	bne.n	90000552 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000054e:	4b06      	ldr	r3, [pc, #24]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000550:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000552:	2140      	movs	r1, #64	; 0x40
90000554:	4806      	ldr	r0, [pc, #24]	; (90000570 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000556:	f009 fbfb 	bl	90009d50 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000055a:	2801      	cmp	r0, #1
9000055c:	d101      	bne.n	90000562 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000055e:	4b02      	ldr	r3, [pc, #8]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000560:	60d8      	str	r0, [r3, #12]
}
90000562:	bd08      	pop	{r3, pc}
90000564:	58021800 	.word	0x58021800
90000568:	24005b5c 	.word	0x24005b5c
9000056c:	58020400 	.word	0x58020400
90000570:	58020000 	.word	0x58020000

90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000574:	2803      	cmp	r0, #3
90000576:	d827      	bhi.n	900005c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000578:	e8df f000 	tbb	[pc, r0]
9000057c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000580:	4b12      	ldr	r3, [pc, #72]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000582:	2140      	movs	r1, #64	; 0x40
90000584:	4812      	ldr	r0, [pc, #72]	; (900005d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000586:	68da      	ldr	r2, [r3, #12]
90000588:	fab2 f282 	clz	r2, r2
9000058c:	0952      	lsrs	r2, r2, #5
9000058e:	f009 bbe5 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000592:	4b0e      	ldr	r3, [pc, #56]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000594:	2140      	movs	r1, #64	; 0x40
90000596:	480f      	ldr	r0, [pc, #60]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000598:	689a      	ldr	r2, [r3, #8]
9000059a:	fab2 f282 	clz	r2, r2
9000059e:	0952      	lsrs	r2, r2, #5
900005a0:	f009 bbdc 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
900005a4:	4b09      	ldr	r3, [pc, #36]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005a6:	2180      	movs	r1, #128	; 0x80
900005a8:	480a      	ldr	r0, [pc, #40]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
900005aa:	685a      	ldr	r2, [r3, #4]
900005ac:	fab2 f282 	clz	r2, r2
900005b0:	0952      	lsrs	r2, r2, #5
900005b2:	f009 bbd3 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
900005b6:	4b05      	ldr	r3, [pc, #20]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005b8:	2108      	movs	r1, #8
900005ba:	4807      	ldr	r0, [pc, #28]	; (900005d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900005bc:	681a      	ldr	r2, [r3, #0]
900005be:	fab2 f282 	clz	r2, r2
900005c2:	0952      	lsrs	r2, r2, #5
900005c4:	f009 bbca 	b.w	90009d5c <HAL_GPIO_WritePin>
}
900005c8:	4770      	bx	lr
900005ca:	bf00      	nop
900005cc:	24005b5c 	.word	0x24005b5c
900005d0:	58020000 	.word	0x58020000
900005d4:	58020400 	.word	0x58020400
900005d8:	58021800 	.word	0x58021800

900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005dc:	2803      	cmp	r0, #3
900005de:	d827      	bhi.n	90000630 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005e0:	e8df f000 	tbb	[pc, r0]
900005e4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005e8:	4b12      	ldr	r3, [pc, #72]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ea:	2140      	movs	r1, #64	; 0x40
900005ec:	4812      	ldr	r0, [pc, #72]	; (90000638 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ee:	68da      	ldr	r2, [r3, #12]
900005f0:	3a00      	subs	r2, #0
900005f2:	bf18      	it	ne
900005f4:	2201      	movne	r2, #1
900005f6:	f009 bbb1 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005fa:	4b0e      	ldr	r3, [pc, #56]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005fc:	2140      	movs	r1, #64	; 0x40
900005fe:	480f      	ldr	r0, [pc, #60]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000600:	689a      	ldr	r2, [r3, #8]
90000602:	3a00      	subs	r2, #0
90000604:	bf18      	it	ne
90000606:	2201      	movne	r2, #1
90000608:	f009 bba8 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
9000060c:	4b09      	ldr	r3, [pc, #36]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
9000060e:	2180      	movs	r1, #128	; 0x80
90000610:	480a      	ldr	r0, [pc, #40]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000612:	685a      	ldr	r2, [r3, #4]
90000614:	3a00      	subs	r2, #0
90000616:	bf18      	it	ne
90000618:	2201      	movne	r2, #1
9000061a:	f009 bb9f 	b.w	90009d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
9000061e:	4b05      	ldr	r3, [pc, #20]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000620:	2108      	movs	r1, #8
90000622:	4807      	ldr	r0, [pc, #28]	; (90000640 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000624:	681a      	ldr	r2, [r3, #0]
90000626:	3a00      	subs	r2, #0
90000628:	bf18      	it	ne
9000062a:	2201      	movne	r2, #1
9000062c:	f009 bb96 	b.w	90009d5c <HAL_GPIO_WritePin>
}
90000630:	4770      	bx	lr
90000632:	bf00      	nop
90000634:	24005b5c 	.word	0x24005b5c
90000638:	58020000 	.word	0x58020000
9000063c:	58020400 	.word	0x58020400
90000640:	58021800 	.word	0x58021800

90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000644:	2803      	cmp	r0, #3
90000646:	d813      	bhi.n	90000670 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000648:	e8df f000 	tbb	[pc, r0]
9000064c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000650:	2140      	movs	r1, #64	; 0x40
90000652:	4808      	ldr	r0, [pc, #32]	; (90000674 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000654:	f009 bb86 	b.w	90009d64 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000658:	2140      	movs	r1, #64	; 0x40
9000065a:	4807      	ldr	r0, [pc, #28]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000065c:	f009 bb82 	b.w	90009d64 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000660:	2180      	movs	r1, #128	; 0x80
90000662:	4805      	ldr	r0, [pc, #20]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000664:	f009 bb7e 	b.w	90009d64 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000668:	2108      	movs	r1, #8
9000066a:	4804      	ldr	r0, [pc, #16]	; (9000067c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000066c:	f009 bb7a 	b.w	90009d64 <HAL_GPIO_TogglePin>
}
90000670:	4770      	bx	lr
90000672:	bf00      	nop
90000674:	58020000 	.word	0x58020000
90000678:	58020400 	.word	0x58020400
9000067c:	58021800 	.word	0x58021800

90000680 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000680:	2000      	movs	r0, #0
90000682:	4770      	bx	lr

90000684 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000684:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000686:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000068a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000068e:	4770      	bx	lr

90000690 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000690:	2000      	movs	r0, #0
90000692:	4770      	bx	lr

90000694 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000694:	1e0a      	subs	r2, r1, #0
90000696:	4b03      	ldr	r3, [pc, #12]	; (900006a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000698:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000069a:	bf18      	it	ne
9000069c:	2201      	movne	r2, #1
9000069e:	701a      	strb	r2, [r3, #0]
    }
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop
900006a4:	24028193 	.word	0x24028193

900006a8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900006a8:	2000      	movs	r0, #0
900006aa:	4770      	bx	lr

900006ac <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900006ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
900006ae:	4608      	mov	r0, r1
        if (taskDelayFunc)
900006b0:	b103      	cbz	r3, 900006b4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900006b2:	4718      	bx	r3
        }
    }
900006b4:	4770      	bx	lr
900006b6:	bf00      	nop

900006b8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900006b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
900006bc:	4770      	bx	lr
900006be:	bf00      	nop

900006c0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006c0:	4770      	bx	lr
900006c2:	bf00      	nop

900006c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006c4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c6:	4b09      	ldr	r3, [pc, #36]	; (900006ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006c8:	881b      	ldrh	r3, [r3, #0]
900006ca:	428b      	cmp	r3, r1
900006cc:	d808      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ce:	4b08      	ldr	r3, [pc, #32]	; (900006f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006d0:	881b      	ldrh	r3, [r3, #0]
900006d2:	4293      	cmp	r3, r2
900006d4:	d804      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006d6:	4807      	ldr	r0, [pc, #28]	; (900006f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006d8:	4b07      	ldr	r3, [pc, #28]	; (900006f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006da:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006dc:	801a      	strh	r2, [r3, #0]
    }
900006de:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006e0:	4b06      	ldr	r3, [pc, #24]	; (900006fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006e2:	219e      	movs	r1, #158	; 0x9e
900006e4:	4a06      	ldr	r2, [pc, #24]	; (90000700 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006e6:	4807      	ldr	r0, [pc, #28]	; (90000704 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006e8:	f026 fd34 	bl	90027154 <__assert_func>
900006ec:	24028188 	.word	0x24028188
900006f0:	2402818a 	.word	0x2402818a
900006f4:	2402818e 	.word	0x2402818e
900006f8:	24028190 	.word	0x24028190
900006fc:	90028294 	.word	0x90028294
90000700:	900282f8 	.word	0x900282f8
90000704:	9002833c 	.word	0x9002833c

90000708 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90000708:	b510      	push	{r4, lr}
9000070a:	4604      	mov	r4, r0
        swapFrameBuffers();
9000070c:	f012 ff8a 	bl	90013624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000710:	6823      	ldr	r3, [r4, #0]
90000712:	4620      	mov	r0, r4
90000714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
90000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
9000071c:	4718      	bx	r3
9000071e:	bf00      	nop

90000720 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000720:	f001 be8e 	b.w	90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000724 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000724:	f001 be92 	b.w	9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000728 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000728:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000072a:	f001 ff51 	bl	900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000072e:	4812      	ldr	r0, [pc, #72]	; (90000778 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000730:	2300      	movs	r3, #0
90000732:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000736:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000073a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000742:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000746:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000074a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000074e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000752:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000754:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000758:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000075a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000075e:	1c5a      	adds	r2, r3, #1
90000760:	d1f8      	bne.n	90000754 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000762:	f1ac 0c20 	sub.w	ip, ip, #32
90000766:	f11c 0f20 	cmn.w	ip, #32
9000076a:	d1f0      	bne.n	9000074e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000770:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000774:	bd10      	pop	{r4, pc}
90000776:	bf00      	nop
90000778:	e000ed00 	.word	0xe000ed00

9000077c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000077c:	f001 be3c 	b.w	900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000780 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000780:	f002 b84c 	b.w	9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000784 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000784:	f002 b836 	b.w	900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000788 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000788:	f001 be40 	b.w	9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000078c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000078c:	f012 b9a2 	b.w	90012ad4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000790 <_ZN11TouchGFXHALD0Ev>:
90000790:	b510      	push	{r4, lr}
90000792:	4604      	mov	r4, r0
90000794:	2188      	movs	r1, #136	; 0x88
90000796:	f026 fcae 	bl	900270f6 <_ZdlPvj>
9000079a:	4620      	mov	r0, r4
9000079c:	bd10      	pop	{r4, pc}
9000079e:	bf00      	nop

900007a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
900007a0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
900007a4:	b11b      	cbz	r3, 900007ae <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
900007a6:	6840      	ldr	r0, [r0, #4]
900007a8:	6803      	ldr	r3, [r0, #0]
900007aa:	681b      	ldr	r3, [r3, #0]
900007ac:	4718      	bx	r3
    }
900007ae:	4618      	mov	r0, r3
900007b0:	4770      	bx	lr
900007b2:	bf00      	nop

900007b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
900007b4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
900007b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
900007bc:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
900007be:	4b0b      	ldr	r3, [pc, #44]	; (900007ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007c0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007c2:	d00b      	beq.n	900007dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007c4:	b94a      	cbnz	r2, 900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007c6:	4a0a      	ldr	r2, [pc, #40]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007c8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007cc:	4909      	ldr	r1, [pc, #36]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ce:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007d0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007d6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d8:	8013      	strh	r3, [r2, #0]
        }
    }
900007da:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007dc:	2a00      	cmp	r2, #0
900007de:	d0fc      	beq.n	900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007e0:	4a03      	ldr	r2, [pc, #12]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007e2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007e6:	4903      	ldr	r1, [pc, #12]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007e8:	e7f1      	b.n	900007ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ea:	bf00      	nop
900007ec:	2402818c 	.word	0x2402818c
900007f0:	2402818a 	.word	0x2402818a
900007f4:	24028188 	.word	0x24028188

900007f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007f8:	6840      	ldr	r0, [r0, #4]
900007fa:	4a04      	ldr	r2, [pc, #16]	; (9000080c <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007fc:	6803      	ldr	r3, [r0, #0]
900007fe:	699b      	ldr	r3, [r3, #24]
90000800:	4293      	cmp	r3, r2
90000802:	d101      	bne.n	90000808 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000804:	2000      	movs	r0, #0
90000806:	4770      	bx	lr
        return dma.getDMAType();
90000808:	4718      	bx	r3
9000080a:	bf00      	nop
9000080c:	90000681 	.word	0x90000681

90000810 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000810:	b1a9      	cbz	r1, 9000083e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000812:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000814:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000816:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000818:	bf18      	it	ne
9000081a:	2201      	movne	r2, #1
9000081c:	490c      	ldr	r1, [pc, #48]	; (90000850 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
9000081e:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000820:	6802      	ldr	r2, [r0, #0]
90000822:	490c      	ldr	r1, [pc, #48]	; (90000854 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000824:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000828:	428a      	cmp	r2, r1
9000082a:	d106      	bne.n	9000083a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000082c:	1e19      	subs	r1, r3, #0
9000082e:	4a0a      	ldr	r2, [pc, #40]	; (90000858 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000830:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000832:	bf18      	it	ne
90000834:	2101      	movne	r1, #1
90000836:	7011      	strb	r1, [r2, #0]
90000838:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000083a:	4619      	mov	r1, r3
9000083c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000083e:	4b07      	ldr	r3, [pc, #28]	; (9000085c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000840:	f240 21d2 	movw	r1, #722	; 0x2d2
90000844:	4a06      	ldr	r2, [pc, #24]	; (90000860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000846:	4807      	ldr	r0, [pc, #28]	; (90000864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000848:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000084a:	f026 fc83 	bl	90027154 <__assert_func>
9000084e:	bf00      	nop
90000850:	24028192 	.word	0x24028192
90000854:	90000695 	.word	0x90000695
90000858:	24028193 	.word	0x24028193
9000085c:	90028384 	.word	0x90028384
90000860:	900283bc 	.word	0x900283bc
90000864:	9002833c 	.word	0x9002833c

90000868 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000868:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000086a:	6803      	ldr	r3, [r0, #0]
{
9000086c:	4604      	mov	r4, r0
9000086e:	4d17      	ldr	r5, [pc, #92]	; (900008cc <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000874:	4798      	blx	r3
    enableInterrupts();
90000876:	6823      	ldr	r3, [r4, #0]
90000878:	4620      	mov	r0, r4
9000087a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000087c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000087e:	f001 f8bb 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000882:	6823      	ldr	r3, [r4, #0]
90000884:	4620      	mov	r0, r4
90000886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000888:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000088a:	2201      	movs	r2, #1
9000088c:	2104      	movs	r1, #4
9000088e:	4810      	ldr	r0, [pc, #64]	; (900008d0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000890:	f009 fa64 	bl	90009d5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000894:	2201      	movs	r2, #1
90000896:	2180      	movs	r1, #128	; 0x80
90000898:	480e      	ldr	r0, [pc, #56]	; (900008d4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000089a:	f009 fa5f 	bl	90009d5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000089e:	2201      	movs	r2, #1
900008a0:	480d      	ldr	r0, [pc, #52]	; (900008d8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
900008a2:	4611      	mov	r1, r2
900008a4:	f009 fa5a 	bl	90009d5c <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
900008a8:	f001 f8a6 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
900008ac:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
900008ae:	4620      	mov	r0, r4
900008b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900008b2:	42ab      	cmp	r3, r5
900008b4:	d107      	bne.n	900008c6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
900008b6:	f012 feb5 	bl	90013624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900008ba:	6823      	ldr	r3, [r4, #0]
900008bc:	4620      	mov	r0, r4
900008be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008c2:	4798      	blx	r3
    }
900008c4:	e7f0      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008c6:	4798      	blx	r3
900008c8:	e7ee      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008ca:	bf00      	nop
900008cc:	90000709 	.word	0x90000709
900008d0:	58020000 	.word	0x58020000
900008d4:	58020c00 	.word	0x58020c00
900008d8:	58022800 	.word	0x58022800

900008dc <_ZN11TouchGFXHAL10initializeEv>:
{
900008dc:	b538      	push	{r3, r4, r5, lr}
900008de:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008e0:	f001 ffa6 	bl	90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008e4:	4817      	ldr	r0, [pc, #92]	; (90000944 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008e6:	6823      	ldr	r3, [r4, #0]
900008e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ea:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008f0:	4285      	cmp	r5, r0
900008f2:	d119      	bne.n	90000928 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008f4:	b1f9      	cbz	r1, 90000936 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008f6:	3a00      	subs	r2, #0
900008f8:	4913      	ldr	r1, [pc, #76]	; (90000948 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008fe:	bf18      	it	ne
90000900:	2201      	movne	r2, #1
90000902:	4812      	ldr	r0, [pc, #72]	; (9000094c <_ZN11TouchGFXHAL10initializeEv+0x70>)
90000904:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000906:	4912      	ldr	r1, [pc, #72]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000908:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
9000090a:	d111      	bne.n	90000930 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000090c:	4b11      	ldr	r3, [pc, #68]	; (90000954 <_ZN11TouchGFXHAL10initializeEv+0x78>)
9000090e:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000910:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000912:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000914:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000918:	4628      	mov	r0, r5
9000091a:	f7ff fd7d 	bl	90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
9000091e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000920:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000922:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000926:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000928:	4b09      	ldr	r3, [pc, #36]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000092a:	4620      	mov	r0, r4
9000092c:	47a8      	blx	r5
9000092e:	e7f1      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000930:	4620      	mov	r0, r4
90000932:	4798      	blx	r3
90000934:	e7ee      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000936:	4b08      	ldr	r3, [pc, #32]	; (90000958 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000938:	f240 21d2 	movw	r1, #722	; 0x2d2
9000093c:	4a07      	ldr	r2, [pc, #28]	; (9000095c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000093e:	4808      	ldr	r0, [pc, #32]	; (90000960 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000940:	f026 fc08 	bl	90027154 <__assert_func>
90000944:	90000811 	.word	0x90000811
90000948:	90000695 	.word	0x90000695
9000094c:	24028192 	.word	0x24028192
90000950:	d0000000 	.word	0xd0000000
90000954:	24028193 	.word	0x24028193
90000958:	90028384 	.word	0x90028384
9000095c:	900283bc 	.word	0x900283bc
90000960:	9002833c 	.word	0x9002833c

90000964 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000964:	b508      	push	{r3, lr}
        return instance;
90000966:	4b07      	ldr	r3, [pc, #28]	; (90000984 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000968:	b128      	cbz	r0, 90000976 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000096a:	6818      	ldr	r0, [r3, #0]
9000096c:	2101      	movs	r1, #1
9000096e:	f012 fe73 	bl	90013658 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000972:	2001      	movs	r0, #1
90000974:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000976:	4601      	mov	r1, r0
90000978:	6818      	ldr	r0, [r3, #0]
9000097a:	f012 fe6d 	bl	90013658 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000097e:	2001      	movs	r0, #1
90000980:	bd08      	pop	{r3, pc}
90000982:	bf00      	nop
90000984:	24028194 	.word	0x24028194

90000988 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000988:	6940      	ldr	r0, [r0, #20]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000098c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000990:	4770      	bx	lr
90000992:	bf00      	nop

90000994 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000994:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000996:	b10b      	cbz	r3, 9000099c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000998:	2001      	movs	r0, #1
}
9000099a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000099c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000099e:	3800      	subs	r0, #0
900009a0:	bf18      	it	ne
900009a2:	2001      	movne	r0, #1
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop

900009a8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
900009a8:	6880      	ldr	r0, [r0, #8]
900009aa:	4770      	bx	lr

900009ac <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
900009ac:	4770      	bx	lr
900009ae:	bf00      	nop

900009b0 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
900009b0:	3004      	adds	r0, #4
{
900009b2:	468c      	mov	ip, r1
    *data = videoInfo;
900009b4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
900009b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
900009ba:	4770      	bx	lr

900009bc <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
900009bc:	4770      	bx	lr
900009be:	bf00      	nop

900009c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009c0:	b508      	push	{r3, lr}
    assert(0);
900009c2:	4a03      	ldr	r2, [pc, #12]	; (900009d0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009c4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009c8:	4b02      	ldr	r3, [pc, #8]	; (900009d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009ca:	4803      	ldr	r0, [pc, #12]	; (900009d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009cc:	f026 fbc2 	bl	90027154 <__assert_func>
900009d0:	900284e8 	.word	0x900284e8
900009d4:	900284e4 	.word	0x900284e4
900009d8:	90028544 	.word	0x90028544

900009dc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009dc:	b510      	push	{r4, lr}
900009de:	4604      	mov	r4, r0
900009e0:	2148      	movs	r1, #72	; 0x48
900009e2:	f026 fb88 	bl	900270f6 <_ZdlPvj>
900009e6:	4620      	mov	r0, r4
900009e8:	bd10      	pop	{r4, pc}
900009ea:	bf00      	nop

900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009f0:	b085      	sub	sp, #20
900009f2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f4:	4c65      	ldr	r4, [pc, #404]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009f6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f8:	2002      	movs	r0, #2
900009fa:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009fc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009fe:	0705      	lsls	r5, r0, #28
90000a00:	d003      	beq.n	90000a0a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000a02:	f020 000f 	bic.w	r0, r0, #15
90000a06:	4c61      	ldr	r4, [pc, #388]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000a08:	3010      	adds	r0, #16
90000a0a:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0c:	0900      	lsrs	r0, r0, #4
90000a0e:	4c5f      	ldr	r4, [pc, #380]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
90000a10:	2700      	movs	r7, #0
90000a12:	4e5f      	ldr	r6, [pc, #380]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a14:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a1a:	4d5e      	ldr	r5, [pc, #376]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a1c:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
90000a1e:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000bc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a24:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a26:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a28:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a2c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a2e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a30:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a34:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a36:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a38:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a3c:	616f      	str	r7, [r5, #20]
90000a3e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000bc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a42:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a44:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a48:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a4c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a4e:	4852      	ldr	r0, [pc, #328]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a50:	4c52      	ldr	r4, [pc, #328]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a52:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a54:	4b52      	ldr	r3, [pc, #328]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a56:	4853      	ldr	r0, [pc, #332]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a58:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a5a:	4b53      	ldr	r3, [pc, #332]	; (90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a5c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a60:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a62:	4b52      	ldr	r3, [pc, #328]	; (90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a64:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a66:	4b52      	ldr	r3, [pc, #328]	; (90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a68:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a6e:	4b51      	ldr	r3, [pc, #324]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a70:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a72:	2301      	movs	r3, #1
90000a74:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a78:	686b      	ldr	r3, [r5, #4]
90000a7a:	f00a fa9f 	bl	9000afbc <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a7e:	f8d9 3000 	ldr.w	r3, [r9]
90000a82:	b11b      	cbz	r3, 90000a8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a84:	4b4c      	ldr	r3, [pc, #304]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a86:	681b      	ldr	r3, [r3, #0]
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d17d      	bne.n	90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a8c:	f8d8 3000 	ldr.w	r3, [r8]
90000a90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a94:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a98:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a9c:	2901      	cmp	r1, #1
90000a9e:	d042      	beq.n	90000b26 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000aa0:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d029      	beq.n	90000afa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000aa6:	6833      	ldr	r3, [r6, #0]
90000aa8:	b9c3      	cbnz	r3, 90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000aaa:	f8db 3000 	ldr.w	r3, [fp]
90000aae:	fab3 f383 	clz	r3, r3
90000ab2:	095b      	lsrs	r3, r3, #5
90000ab4:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ab6:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ab8:	6823      	ldr	r3, [r4, #0]
90000aba:	2b02      	cmp	r3, #2
90000abc:	d013      	beq.n	90000ae6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000abe:	6823      	ldr	r3, [r4, #0]
90000ac0:	2b01      	cmp	r3, #1
90000ac2:	d1dc      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000ac4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000ac6:	4a3c      	ldr	r2, [pc, #240]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000ac8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000acc:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ad0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ad4:	6013      	str	r3, [r2, #0]
}
90000ad6:	b005      	add	sp, #20
90000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000adc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ade:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ae0:	6823      	ldr	r3, [r4, #0]
90000ae2:	2b02      	cmp	r3, #2
90000ae4:	d1eb      	bne.n	90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ae6:	4b35      	ldr	r3, [pc, #212]	; (90000bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ae8:	f04f 31ff 	mov.w	r1, #4294967295
90000aec:	6818      	ldr	r0, [r3, #0]
90000aee:	f00d ff2f 	bl	9000e950 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000af2:	6823      	ldr	r3, [r4, #0]
90000af4:	2b01      	cmp	r3, #1
90000af6:	d1c2      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000af8:	e7e4      	b.n	90000ac4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000afa:	4b29      	ldr	r3, [pc, #164]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000afc:	681b      	ldr	r3, [r3, #0]
90000afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000b02:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b06:	2b00      	cmp	r3, #0
90000b08:	d1cd      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000b0a:	f8d8 3000 	ldr.w	r3, [r8]
90000b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000b12:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b16:	2b00      	cmp	r3, #0
90000b18:	d1c5      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b1a:	2102      	movs	r1, #2
90000b1c:	4821      	ldr	r0, [pc, #132]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000b1e:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b20:	f00a fb94 	bl	9000b24c <HAL_JPEG_Resume>
90000b24:	e7bf      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b26:	f8db 1000 	ldr.w	r1, [fp]
90000b2a:	2901      	cmp	r1, #1
90000b2c:	d1b8      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b2e:	3301      	adds	r3, #1
      };
90000b30:	4920      	ldr	r1, [pc, #128]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b32:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b36:	2b01      	cmp	r3, #1
      };
90000b38:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b3c:	bf88      	it	hi
90000b3e:	463b      	movhi	r3, r7
90000b40:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b44:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b48:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b4a:	3302      	adds	r3, #2
90000b4c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b50:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b54:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b56:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b58:	fbb1 f3f0 	udiv	r3, r1, r0
90000b5c:	fb00 1113 	mls	r1, r0, r3, r1
90000b60:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b62:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b66:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b6a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b6c:	4911      	ldr	r1, [pc, #68]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b6e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b72:	4a06      	ldr	r2, [pc, #24]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b74:	680b      	ldr	r3, [r1, #0]
90000b76:	68d2      	ldr	r2, [r2, #12]
90000b78:	4413      	add	r3, r2
90000b7a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b7c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b7e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b82:	691b      	ldr	r3, [r3, #16]
90000b84:	4798      	blx	r3
90000b86:	e78b      	b.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b88:	2301      	movs	r3, #1
90000b8a:	e794      	b.n	90000ab6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b8c:	24005ba0 	.word	0x24005ba0
90000b90:	24005b9c 	.word	0x24005b9c
90000b94:	24000004 	.word	0x24000004
90000b98:	24005b74 	.word	0x24005b74
90000b9c:	24005b8c 	.word	0x24005b8c
90000ba0:	24005b88 	.word	0x24005b88
90000ba4:	2400ce30 	.word	0x2400ce30
90000ba8:	24005b7c 	.word	0x24005b7c
90000bac:	24005b78 	.word	0x24005b78
90000bb0:	24005b80 	.word	0x24005b80
90000bb4:	24005b94 	.word	0x24005b94
90000bb8:	24005b6c 	.word	0x24005b6c
90000bbc:	24005bd8 	.word	0x24005bd8
90000bc0:	24005b70 	.word	0x24005b70
90000bc4:	24005b84 	.word	0x24005b84
90000bc8:	24005b90 	.word	0x24005b90
90000bcc:	24005bb4 	.word	0x24005bb4

90000bd0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bd2:	6803      	ldr	r3, [r0, #0]
90000bd4:	2901      	cmp	r1, #1
90000bd6:	4e2a      	ldr	r6, [pc, #168]	; (90000c80 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bd8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bdc:	bf38      	it	cc
90000bde:	2101      	movcc	r1, #1
90000be0:	42b3      	cmp	r3, r6
90000be2:	460d      	mov	r5, r1
90000be4:	d138      	bne.n	90000c58 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000be6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000be8:	4299      	cmp	r1, r3
90000bea:	d82a      	bhi.n	90000c42 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bec:	1e6b      	subs	r3, r5, #1
90000bee:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bf2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bf6:	b350      	cbz	r0, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bfa:	2b0f      	cmp	r3, #15
90000bfc:	d937      	bls.n	90000c6e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bfe:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000c00:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000c04:	68db      	ldr	r3, [r3, #12]
90000c06:	4631      	mov	r1, r6
90000c08:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c0c:	2210      	movs	r2, #16
90000c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c10:	6803      	ldr	r3, [r0, #0]
90000c12:	691b      	ldr	r3, [r3, #16]
90000c14:	4798      	blx	r3
90000c16:	b1b0      	cbz	r0, 90000c46 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c1a:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c1c:	b1bb      	cbz	r3, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c20:	7a93      	ldrb	r3, [r2, #10]
90000c22:	7a51      	ldrb	r1, [r2, #9]
90000c24:	041b      	lsls	r3, r3, #16
90000c26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c2a:	7a11      	ldrb	r1, [r2, #8]
90000c2c:	7ad2      	ldrb	r2, [r2, #11]
90000c2e:	430b      	orrs	r3, r1
90000c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c34:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c36:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c38:	3a04      	subs	r2, #4
90000c3a:	441a      	add	r2, r3
90000c3c:	61a2      	str	r2, [r4, #24]
}
90000c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c40:	68a3      	ldr	r3, [r4, #8]
{
90000c42:	461d      	mov	r5, r3
90000c44:	e7d2      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c46:	230d      	movs	r3, #13
90000c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c4c:	e7e4      	b.n	90000c18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c4e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c54:	58d3      	ldr	r3, [r2, r3]
90000c56:	e7ed      	b.n	90000c34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c58:	4798      	blx	r3
90000c5a:	4285      	cmp	r5, r0
90000c5c:	d9c6      	bls.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c5e:	6823      	ldr	r3, [r4, #0]
90000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c62:	42b3      	cmp	r3, r6
90000c64:	d0ec      	beq.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c66:	4620      	mov	r0, r4
90000c68:	4798      	blx	r3
90000c6a:	4605      	mov	r5, r0
90000c6c:	e7be      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c6e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c70:	4b04      	ldr	r3, [pc, #16]	; (90000c84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c72:	4a05      	ldr	r2, [pc, #20]	; (90000c88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c74:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c7a:	4804      	ldr	r0, [pc, #16]	; (90000c8c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c7c:	f026 fa6a 	bl	90027154 <__assert_func>
90000c80:	900009a9 	.word	0x900009a9
90000c84:	900285a0 	.word	0x900285a0
90000c88:	900285b4 	.word	0x900285b4
90000c8c:	90028544 	.word	0x90028544

90000c90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c94:	4604      	mov	r4, r0
    if (reader != 0)
90000c96:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c98:	b083      	sub	sp, #12
90000c9a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c9c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c9e:	2800      	cmp	r0, #0
90000ca0:	f000 80e4 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000ca6:	2b07      	cmp	r3, #7
90000ca8:	f240 80e7 	bls.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cac:	6803      	ldr	r3, [r0, #0]
90000cae:	4631      	mov	r1, r6
90000cb0:	68db      	ldr	r3, [r3, #12]
90000cb2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000cb6:	2208      	movs	r2, #8
90000cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000cba:	6803      	ldr	r3, [r0, #0]
90000cbc:	691b      	ldr	r3, [r3, #16]
90000cbe:	4798      	blx	r3
90000cc0:	2800      	cmp	r0, #0
90000cc2:	f000 80cf 	beq.w	90000e64 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cc6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000cc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cca:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000ccc:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cce:	2800      	cmp	r0, #0
90000cd0:	f000 80dc 	beq.w	90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cd4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cd6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cd8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cdc:	18b1      	adds	r1, r6, r2
90000cde:	5cb2      	ldrb	r2, [r6, r2]
90000ce0:	788e      	ldrb	r6, [r1, #2]
90000ce2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000ce6:	0436      	lsls	r6, r6, #16
90000ce8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000cec:	4316      	orrs	r6, r2
90000cee:	78ca      	ldrb	r2, [r1, #3]
90000cf0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cf4:	42b3      	cmp	r3, r6
90000cf6:	f0c0 80c0 	bcc.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cfa:	6803      	ldr	r3, [r0, #0]
90000cfc:	4639      	mov	r1, r7
90000cfe:	68db      	ldr	r3, [r3, #12]
90000d00:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000d02:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000d04:	4632      	mov	r2, r6
90000d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000d08:	6803      	ldr	r3, [r0, #0]
90000d0a:	691b      	ldr	r3, [r3, #16]
90000d0c:	4798      	blx	r3
90000d0e:	b910      	cbnz	r0, 90000d16 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000d10:	230d      	movs	r3, #13
90000d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000d18:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000d1a:	2d00      	cmp	r5, #0
90000d1c:	d053      	beq.n	90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1e:	4a5c      	ldr	r2, [pc, #368]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d20:	4b5c      	ldr	r3, [pc, #368]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d22:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d24:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d26:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d2c:	4d5a      	ldr	r5, [pc, #360]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d2e:	4f5b      	ldr	r7, [pc, #364]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d30:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d32:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d34:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d36:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d38:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d3a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d3c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d3e:	4a58      	ldr	r2, [pc, #352]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d40:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000ecc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d44:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d46:	4a57      	ldr	r2, [pc, #348]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d48:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000ed0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d4c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d4e:	4a56      	ldr	r2, [pc, #344]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d50:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d54:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d56:	4a55      	ldr	r2, [pc, #340]	; (90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d58:	4855      	ldr	r0, [pc, #340]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d5a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d5c:	4a55      	ldr	r2, [pc, #340]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d5e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000ed4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d62:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d64:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d6a:	4e53      	ldr	r6, [pc, #332]	; (90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d6c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d70:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d72:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000ed8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d76:	f00a f921 	bl	9000afbc <HAL_JPEG_Decode_DMA>
    return 0;
90000d7a:	e008      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d7c:	f8da 3000 	ldr.w	r3, [sl]
90000d80:	fab3 f383 	clz	r3, r3
90000d84:	095b      	lsrs	r3, r3, #5
90000d86:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d88:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d8a:	6833      	ldr	r3, [r6, #0]
90000d8c:	b9db      	cbnz	r3, 90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d8e:	f8d9 3000 	ldr.w	r3, [r9]
90000d92:	b11b      	cbz	r3, 90000d9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d94:	4b49      	ldr	r3, [pc, #292]	; (90000ebc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d96:	681b      	ldr	r3, [r3, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d161      	bne.n	90000e60 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d9c:	f8d8 3000 	ldr.w	r3, [r8]
90000da0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000da4:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000da8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000dac:	2901      	cmp	r1, #1
90000dae:	d024      	beq.n	90000dfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000db0:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000db2:	2b01      	cmp	r3, #1
90000db4:	d00b      	beq.n	90000dce <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000db6:	683b      	ldr	r3, [r7, #0]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d0df      	beq.n	90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000dbc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000dbe:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000dc0:	6833      	ldr	r3, [r6, #0]
90000dc2:	2b00      	cmp	r3, #0
90000dc4:	d0e3      	beq.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000dc6:	2001      	movs	r0, #1
90000dc8:	b003      	add	sp, #12
90000dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dce:	4b34      	ldr	r3, [pc, #208]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dd0:	681b      	ldr	r3, [r3, #0]
90000dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000dd6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dda:	2b00      	cmp	r3, #0
90000ddc:	d1eb      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dde:	f8d8 3000 	ldr.w	r3, [r8]
90000de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000de6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dea:	2b00      	cmp	r3, #0
90000dec:	d1e3      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dee:	2102      	movs	r1, #2
90000df0:	482f      	ldr	r0, [pc, #188]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000df2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000df4:	f00a fa2a 	bl	9000b24c <HAL_JPEG_Resume>
90000df8:	e7dd      	b.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dfa:	f8da 1000 	ldr.w	r1, [sl]
90000dfe:	2901      	cmp	r1, #1
90000e00:	d1d6      	bne.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000e02:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000e06:	3301      	adds	r3, #1
      };
90000e08:	482a      	ldr	r0, [pc, #168]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000e0a:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000e0e:	2b01      	cmp	r3, #1
      };
90000e10:	f8d0 e000 	ldr.w	lr, [r0]
90000e14:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000e18:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000e1c:	bf88      	it	hi
90000e1e:	2300      	movhi	r3, #0
90000e20:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e24:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e28:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e2c:	2300      	movs	r3, #0
90000e2e:	604a      	str	r2, [r1, #4]
      count_++;
90000e30:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e34:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e38:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e3a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e3e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e42:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e46:	4912      	ldr	r1, [pc, #72]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e48:	481a      	ldr	r0, [pc, #104]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e4a:	68c9      	ldr	r1, [r1, #12]
90000e4c:	6802      	ldr	r2, [r0, #0]
90000e4e:	440a      	add	r2, r1
90000e50:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e52:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e54:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e58:	6803      	ldr	r3, [r0, #0]
90000e5a:	691b      	ldr	r3, [r3, #16]
90000e5c:	4798      	blx	r3
90000e5e:	e7a7      	b.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e60:	2301      	movs	r3, #1
90000e62:	e791      	b.n	90000d88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e64:	230d      	movs	r3, #13
90000e66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e6a:	e72c      	b.n	90000cc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e70:	f106 0308 	add.w	r3, r6, #8
90000e74:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e76:	4419      	add	r1, r3
90000e78:	e74f      	b.n	90000d1a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e7a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e7c:	4b10      	ldr	r3, [pc, #64]	; (90000ec0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e7e:	4a11      	ldr	r2, [pc, #68]	; (90000ec4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e80:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e86:	4810      	ldr	r0, [pc, #64]	; (90000ec8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e88:	f026 f964 	bl	90027154 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e8c:	463e      	mov	r6, r7
90000e8e:	e7ee      	b.n	90000e6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e90:	24005ba0 	.word	0x24005ba0
90000e94:	24005b74 	.word	0x24005b74
90000e98:	24000004 	.word	0x24000004
90000e9c:	24005b9c 	.word	0x24005b9c
90000ea0:	24005b88 	.word	0x24005b88
90000ea4:	24005b7c 	.word	0x24005b7c
90000ea8:	24005b78 	.word	0x24005b78
90000eac:	24005b80 	.word	0x24005b80
90000eb0:	2400ce30 	.word	0x2400ce30
90000eb4:	24005b94 	.word	0x24005b94
90000eb8:	24005b8c 	.word	0x24005b8c
90000ebc:	24005b6c 	.word	0x24005b6c
90000ec0:	900285a0 	.word	0x900285a0
90000ec4:	900285b4 	.word	0x900285b4
90000ec8:	90028544 	.word	0x90028544
90000ecc:	24005b84 	.word	0x24005b84
90000ed0:	24005b70 	.word	0x24005b70
90000ed4:	24005b90 	.word	0x24005b90
90000ed8:	24005bb4 	.word	0x24005bb4

90000edc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000edc:	6943      	ldr	r3, [r0, #20]
{
90000ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ee2:	2b00      	cmp	r3, #0
90000ee4:	f000 8098 	beq.w	90001018 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ee8:	4605      	mov	r5, r0
    if (reader != 0)
90000eea:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000eec:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000eee:	2800      	cmp	r0, #0
90000ef0:	f000 8082 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ef4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ef6:	2b07      	cmp	r3, #7
90000ef8:	f240 8083 	bls.w	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000efc:	6803      	ldr	r3, [r0, #0]
90000efe:	4621      	mov	r1, r4
90000f00:	68db      	ldr	r3, [r3, #12]
90000f02:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f04:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f06:	2208      	movs	r2, #8
90000f08:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f0a:	6803      	ldr	r3, [r0, #0]
90000f0c:	691b      	ldr	r3, [r3, #16]
90000f0e:	4798      	blx	r3
90000f10:	2800      	cmp	r0, #0
90000f12:	d06d      	beq.n	90000ff0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f14:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f18:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000f1a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f1c:	2800      	cmp	r0, #0
90000f1e:	d06d      	beq.n	90000ffc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f20:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f22:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f24:	18a1      	adds	r1, r4, r2
90000f26:	5ca2      	ldrb	r2, [r4, r2]
90000f28:	788c      	ldrb	r4, [r1, #2]
90000f2a:	784e      	ldrb	r6, [r1, #1]
90000f2c:	0424      	lsls	r4, r4, #16
90000f2e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f32:	4314      	orrs	r4, r2
90000f34:	78ca      	ldrb	r2, [r1, #3]
90000f36:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f3a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f3c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f40:	e039      	b.n	90000fb6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f42:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f44:	2b07      	cmp	r3, #7
90000f46:	d95c      	bls.n	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f48:	6803      	ldr	r3, [r0, #0]
90000f4a:	4621      	mov	r1, r4
90000f4c:	68db      	ldr	r3, [r3, #12]
90000f4e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f50:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f52:	2208      	movs	r2, #8
90000f54:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f56:	6803      	ldr	r3, [r0, #0]
90000f58:	691b      	ldr	r3, [r3, #16]
90000f5a:	4798      	blx	r3
90000f5c:	b908      	cbnz	r0, 90000f62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f5e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f62:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f64:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f66:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f68:	2800      	cmp	r0, #0
90000f6a:	d053      	beq.n	90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f6c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f70:	188b      	adds	r3, r1, r2
90000f72:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f74:	799c      	ldrb	r4, [r3, #6]
90000f76:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f7a:	0424      	lsls	r4, r4, #16
90000f7c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f80:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f84:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f88:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f8c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f90:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f94:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f96:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f9a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f9e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000fa2:	f246 3264 	movw	r2, #25444	; 0x6364
90000fa6:	42b1      	cmp	r1, r6
90000fa8:	bf08      	it	eq
90000faa:	4293      	cmpeq	r3, r2
90000fac:	bf0c      	ite	eq
90000fae:	2101      	moveq	r1, #1
90000fb0:	2100      	movne	r1, #0
90000fb2:	d01a      	beq.n	90000fea <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000fb4:	69ab      	ldr	r3, [r5, #24]
90000fb6:	441c      	add	r4, r3
90000fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000fba:	f104 0208 	add.w	r2, r4, #8
90000fbe:	429a      	cmp	r2, r3
90000fc0:	d20e      	bcs.n	90000fe0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fc2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc4:	3409      	adds	r4, #9
        frameNumber++;
90000fc6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc8:	f024 0401 	bic.w	r4, r4, #1
90000fcc:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fd0:	2800      	cmp	r0, #0
90000fd2:	d1b6      	bne.n	90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fd6:	191a      	adds	r2, r3, r4
90000fd8:	5b19      	ldrh	r1, [r3, r4]
90000fda:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6854      	ldr	r4, [r2, #4]
90000fde:	e7e0      	b.n	90000fa2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fe0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fe2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fe4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fe6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fea:	4608      	mov	r0, r1
90000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000ff0:	230d      	movs	r3, #13
90000ff2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000ff6:	e78d      	b.n	90000f14 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ff8:	1d22      	adds	r2, r4, #4
90000ffa:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000ffc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000ffe:	588c      	ldr	r4, [r1, r2]
90001000:	e79b      	b.n	90000f3a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001002:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001004:	4b07      	ldr	r3, [pc, #28]	; (90001024 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90001006:	4a08      	ldr	r2, [pc, #32]	; (90001028 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90001008:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000100a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
9000100e:	4807      	ldr	r0, [pc, #28]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001010:	f026 f8a0 	bl	90027154 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90001014:	4614      	mov	r4, r2
90001016:	e7dd      	b.n	90000fd4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	4b05      	ldr	r3, [pc, #20]	; (90001030 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
9000101a:	21ec      	movs	r1, #236	; 0xec
9000101c:	4a05      	ldr	r2, [pc, #20]	; (90001034 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
9000101e:	4803      	ldr	r0, [pc, #12]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001020:	f026 f898 	bl	90027154 <__assert_func>
90001024:	900285a0 	.word	0x900285a0
90001028:	900285b4 	.word	0x900285b4
9000102c:	90028544 	.word	0x90028544
90001030:	900285f8 	.word	0x900285f8
90001034:	90028644 	.word	0x90028644

90001038 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001038:	6943      	ldr	r3, [r0, #20]
{
9000103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000103e:	2b00      	cmp	r3, #0
90001040:	f000 809b 	beq.w	9000117a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001044:	4604      	mov	r4, r0
    if (reader != 0)
90001046:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001048:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000104a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000104c:	2800      	cmp	r0, #0
9000104e:	d061      	beq.n	90001114 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001052:	2b07      	cmp	r3, #7
90001054:	f240 8097 	bls.w	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001058:	6803      	ldr	r3, [r0, #0]
9000105a:	4629      	mov	r1, r5
9000105c:	68db      	ldr	r3, [r3, #12]
9000105e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001060:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001062:	2208      	movs	r2, #8
90001064:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001066:	6803      	ldr	r3, [r0, #0]
90001068:	691b      	ldr	r3, [r3, #16]
9000106a:	4798      	blx	r3
9000106c:	2800      	cmp	r0, #0
9000106e:	d04c      	beq.n	9000110a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001072:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001074:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001076:	2800      	cmp	r0, #0
90001078:	d04b      	beq.n	90001112 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000107a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000107e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001080:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001082:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001086:	1b52      	subs	r2, r2, r5
90001088:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000108a:	eb03 0e0c 	add.w	lr, r3, ip
9000108e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 0805 	add.w	r8, r3, r5
90001096:	f813 c005 	ldrb.w	ip, [r3, r5]
9000109a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000109e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010a2:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900010a6:	f89e 5002 	ldrb.w	r5, [lr, #2]
900010aa:	f89e e003 	ldrb.w	lr, [lr, #3]
900010ae:	042d      	lsls	r5, r5, #16
900010b0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900010b4:	433d      	orrs	r5, r7
900010b6:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010ba:	eb03 0e02 	add.w	lr, r3, r2
900010be:	5c9b      	ldrb	r3, [r3, r2]
900010c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010c8:	194a      	adds	r2, r1, r5
900010ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010cc:	f102 0e08 	add.w	lr, r2, #8
900010d0:	45be      	cmp	lr, r7
900010d2:	d213      	bcs.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010d4:	f243 0730 	movw	r7, #12336	; 0x3030
900010d8:	45bc      	cmp	ip, r7
900010da:	d124      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010dc:	f246 3764 	movw	r7, #25444	; 0x6364
900010e0:	42bb      	cmp	r3, r7
900010e2:	d120      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010e4:	bb1d      	cbnz	r5, 9000112e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010e6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010e8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ec:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010f0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010f2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010f4:	d002      	beq.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010f6:	2001      	movs	r0, #1
}
900010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010fc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010fe:	6a23      	ldr	r3, [r4, #32]
90001100:	2000      	movs	r0, #0
90001102:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
90001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
9000110a:	230d      	movs	r3, #13
9000110c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90001110:	e7ae      	b.n	90001070 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001112:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
90001114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
90001116:	4629      	mov	r1, r5
90001118:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
9000111a:	f832 c005 	ldrh.w	ip, [r2, r5]
9000111e:	442a      	add	r2, r5
90001120:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001122:	6855      	ldr	r5, [r2, #4]
90001124:	e7d0      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001126:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001128:	2d00      	cmp	r5, #0
9000112a:	d1dd      	bne.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000112c:	e7db      	b.n	900010e6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000112e:	f101 0708 	add.w	r7, r1, #8
90001132:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001134:	b1f0      	cbz	r0, 90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001138:	429d      	cmp	r5, r3
9000113a:	d824      	bhi.n	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000113c:	6803      	ldr	r3, [r0, #0]
9000113e:	4639      	mov	r1, r7
90001140:	68db      	ldr	r3, [r3, #12]
90001142:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001144:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001146:	462a      	mov	r2, r5
90001148:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000114a:	6803      	ldr	r3, [r0, #0]
9000114c:	691b      	ldr	r3, [r3, #16]
9000114e:	4798      	blx	r3
90001150:	b910      	cbnz	r0, 90001158 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001152:	230d      	movs	r3, #13
90001154:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000115a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000115c:	b126      	cbz	r6, 90001168 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000115e:	4633      	mov	r3, r6
90001160:	462a      	mov	r2, r5
90001162:	4620      	mov	r0, r4
90001164:	f7ff fc42 	bl	900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001168:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000116c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000116e:	442a      	add	r2, r5
            frameNumber++;
90001170:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001172:	e7b9      	b.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001174:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001176:	4439      	add	r1, r7
90001178:	e7f0      	b.n	9000115c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000117a:	4b07      	ldr	r3, [pc, #28]	; (90001198 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000117c:	21b8      	movs	r1, #184	; 0xb8
9000117e:	4a07      	ldr	r2, [pc, #28]	; (9000119c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001180:	4807      	ldr	r0, [pc, #28]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001182:	f025 ffe7 	bl	90027154 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001186:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001188:	4b06      	ldr	r3, [pc, #24]	; (900011a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000118a:	4a07      	ldr	r2, [pc, #28]	; (900011a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000118c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000118e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001192:	4803      	ldr	r0, [pc, #12]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001194:	f025 ffde 	bl	90027154 <__assert_func>
90001198:	900285f8 	.word	0x900285f8
9000119c:	90028678 	.word	0x90028678
900011a0:	90028544 	.word	0x90028544
900011a4:	900285a0 	.word	0x900285a0
900011a8:	900285b4 	.word	0x900285b4

900011ac <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011ac:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011ae:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b0:	4b0f      	ldr	r3, [pc, #60]	; (900011f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011b2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b4:	6003      	str	r3, [r0, #0]
900011b6:	63c5      	str	r5, [r0, #60]	; 0x3c
900011b8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011c4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011c8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011cc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011d0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011d8:	f002 fa9a 	bl	90003710 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011dc:	462a      	mov	r2, r5
900011de:	4629      	mov	r1, r5
900011e0:	2001      	movs	r0, #1
900011e2:	f00d fb65 	bl	9000e8b0 <osSemaphoreNew>
900011e6:	4b03      	ldr	r3, [pc, #12]	; (900011f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011e8:	4602      	mov	r2, r0
}
900011ea:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011ec:	601a      	str	r2, [r3, #0]
}
900011ee:	bd38      	pop	{r3, r4, r5, pc}
900011f0:	900287f8 	.word	0x900287f8
900011f4:	24005bd8 	.word	0x24005bd8

900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011fc:	2100      	movs	r1, #0
    if (reader != 0)
900011fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
90001200:	b083      	sub	sp, #12
90001202:	4605      	mov	r5, r0
    currentMovieOffset = 0;
90001204:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
90001206:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
9000120a:	2e00      	cmp	r6, #0
9000120c:	f000 81aa 	beq.w	90001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
90001210:	6b83      	ldr	r3, [r0, #56]	; 0x38
90001212:	2b47      	cmp	r3, #71	; 0x47
90001214:	f240 8202 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001218:	6833      	ldr	r3, [r6, #0]
9000121a:	4630      	mov	r0, r6
9000121c:	68db      	ldr	r3, [r3, #12]
9000121e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001220:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001222:	2248      	movs	r2, #72	; 0x48
90001224:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001226:	6803      	ldr	r3, [r0, #0]
90001228:	691b      	ldr	r3, [r3, #16]
9000122a:	4798      	blx	r3
9000122c:	2800      	cmp	r0, #0
9000122e:	f000 80ce 	beq.w	900013ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001232:	2300      	movs	r3, #0
    if (reader != 0)
90001234:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001236:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001238:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000123a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000123c:	2e00      	cmp	r6, #0
9000123e:	f000 8192 	beq.w	90001566 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001242:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001246:	2204      	movs	r2, #4
90001248:	49be      	ldr	r1, [pc, #760]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000124a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000124e:	4658      	mov	r0, fp
90001250:	f026 fa3c 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001254:	2800      	cmp	r0, #0
90001256:	f040 81ea 	bne.w	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000125a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000125e:	2204      	movs	r2, #4
90001260:	49b9      	ldr	r1, [pc, #740]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001262:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001264:	4440      	add	r0, r8
90001266:	f026 fa31 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000126a:	2800      	cmp	r0, #0
9000126c:	f040 81fa 	bne.w	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001270:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001274:	2204      	movs	r2, #4
90001276:	49b5      	ldr	r1, [pc, #724]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001278:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000127c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001280:	f026 fa24 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001284:	9001      	str	r0, [sp, #4]
90001286:	2800      	cmp	r0, #0
90001288:	f040 81e2 	bne.w	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000128c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001290:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001294:	0424      	lsls	r4, r4, #16
90001296:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000129a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000129e:	f89b 2010 	ldrb.w	r2, [fp, #16]
900012a2:	4314      	orrs	r4, r2
    assert(aviListSize);
900012a4:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
900012a8:	f000 81cb 	beq.w	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900012ac:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a7      	ldr	r1, [pc, #668]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
900012b4:	4440      	add	r0, r8
900012b6:	f026 fa09 	bl	900276cc <strncmp>
    if (compare(offset, "hdrl", 4))
900012ba:	2800      	cmp	r0, #0
900012bc:	f000 808b 	beq.w	900013d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012c0:	2306      	movs	r3, #6
        foundFrame = false;
900012c2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012c6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ce:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012d0:	2204      	movs	r2, #4
900012d2:	49a0      	ldr	r1, [pc, #640]	; (90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012d4:	f026 f9fa 	bl	900276cc <strncmp>
    if (compare(offset, "avih", 4))
900012d8:	2800      	cmp	r0, #0
900012da:	f000 8085 	beq.w	900013e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012de:	2307      	movs	r3, #7
900012e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012e4:	4454      	add	r4, sl
900012e6:	3408      	adds	r4, #8
    if (reader != 0)
900012e8:	f1b9 0f00 	cmp.w	r9, #0
900012ec:	d015      	beq.n	9000131a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012f0:	2b0b      	cmp	r3, #11
900012f2:	f240 8193 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012f6:	f8d9 3000 	ldr.w	r3, [r9]
900012fa:	4621      	mov	r1, r4
900012fc:	4648      	mov	r0, r9
900012fe:	68db      	ldr	r3, [r3, #12]
90001300:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001302:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001304:	220c      	movs	r2, #12
90001306:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001308:	6803      	ldr	r3, [r0, #0]
9000130a:	691b      	ldr	r3, [r3, #16]
9000130c:	4798      	blx	r3
9000130e:	b910      	cbnz	r0, 90001316 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
90001310:	230d      	movs	r3, #13
90001312:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001316:	6b2e      	ldr	r6, [r5, #48]	; 0x30
90001318:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
9000131a:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
9000131e:	4f8e      	ldr	r7, [pc, #568]	; (90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001320:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001324:	2e00      	cmp	r6, #0
90001326:	d041      	beq.n	900013ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000132a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000132c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000132e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001330:	eba8 0303 	sub.w	r3, r8, r3
90001334:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001336:	f026 f9c9 	bl	900276cc <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000133a:	2800      	cmp	r0, #0
9000133c:	d03e      	beq.n	900013bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000133e:	f1b9 0f00 	cmp.w	r9, #0
90001342:	d13e      	bne.n	900013c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001344:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001346:	42a3      	cmp	r3, r4
90001348:	f240 80a7 	bls.w	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000134c:	3404      	adds	r4, #4
    if (reader != 0)
9000134e:	2e00      	cmp	r6, #0
90001350:	d046      	beq.n	900013e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001352:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001354:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001358:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000135a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000135c:	eb01 0204 	add.w	r2, r1, r4
90001360:	5d09      	ldrb	r1, [r1, r4]
90001362:	7894      	ldrb	r4, [r2, #2]
90001364:	7850      	ldrb	r0, [r2, #1]
90001366:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000136a:	78d2      	ldrb	r2, [r2, #3]
9000136c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001370:	ea44 0401 	orr.w	r4, r4, r1
90001374:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001378:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000137a:	f240 814f 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000137e:	6833      	ldr	r3, [r6, #0]
90001380:	4621      	mov	r1, r4
90001382:	4630      	mov	r0, r6
90001384:	68db      	ldr	r3, [r3, #12]
90001386:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001388:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000138a:	220c      	movs	r2, #12
9000138c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000138e:	6803      	ldr	r3, [r0, #0]
90001390:	691b      	ldr	r3, [r3, #16]
90001392:	4798      	blx	r3
90001394:	b910      	cbnz	r0, 9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001396:	230d      	movs	r3, #13
90001398:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000139c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139e:	f104 0808 	add.w	r8, r4, #8
900013a2:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900013a6:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900013a8:	2e00      	cmp	r6, #0
900013aa:	d1bd      	bne.n	90001328 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
900013ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013ae:	2204      	movs	r2, #4
900013b0:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
900013b2:	4440      	add	r0, r8
    return strncmp(src, str, num);
900013b4:	f026 f98a 	bl	900276cc <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013b8:	2800      	cmp	r0, #0
900013ba:	d1c0      	bne.n	9000133e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
900013bc:	f1b9 0f00 	cmp.w	r9, #0
900013c0:	d06b      	beq.n	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013c2:	230a      	movs	r3, #10
900013c4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013c8:	b003      	add	sp, #12
900013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ce:	230d      	movs	r3, #13
900013d0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013d4:	e72d      	b.n	90001232 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013d6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013da:	f04f 0b01 	mov.w	fp, #1
900013de:	e776      	b.n	900012ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013e2:	591c      	ldr	r4, [r3, r4]
900013e4:	4444      	add	r4, r8
    return movieData + offset;
900013e6:	e79b      	b.n	90001320 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013e8:	f1bb 0f00 	cmp.w	fp, #0
900013ec:	f43f af7a 	beq.w	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013f0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013f4:	f1b9 0f00 	cmp.w	r9, #0
900013f8:	f000 80f4 	beq.w	900015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	1ac9      	subs	r1, r1, r3
90001402:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001406:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000140a:	f812 8001 	ldrb.w	r8, [r2, r1]
9000140e:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
90001412:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
90001416:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
9000141a:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141c:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001420:	4439      	add	r1, r7
90001422:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001424:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001428:	f89e e003 	ldrb.w	lr, [lr, #3]
9000142c:	041b      	lsls	r3, r3, #16
9000142e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001432:	ea43 0308 	orr.w	r3, r3, r8
90001436:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000143a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000143e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001442:	099b      	lsrs	r3, r3, #6
90001444:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001446:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000144a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	f812 e000 	ldrb.w	lr, [r2, r0]
90001454:	f89c c003 	ldrb.w	ip, [ip, #3]
90001458:	1850      	adds	r0, r2, r1
9000145a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000145e:	ea43 030e 	orr.w	r3, r3, lr
90001462:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001466:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001468:	7883      	ldrb	r3, [r0, #2]
9000146a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000146e:	041b      	lsls	r3, r3, #16
90001470:	5c51      	ldrb	r1, [r2, r1]
90001472:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001476:	430b      	orrs	r3, r1
90001478:	78c1      	ldrb	r1, [r0, #3]
9000147a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000147e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001480:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001482:	788b      	ldrb	r3, [r1, #2]
90001484:	7848      	ldrb	r0, [r1, #1]
90001486:	041b      	lsls	r3, r3, #16
90001488:	5dd2      	ldrb	r2, [r2, r7]
9000148a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000148e:	4313      	orrs	r3, r2
90001490:	78ca      	ldrb	r2, [r1, #3]
90001492:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001496:	612b      	str	r3, [r5, #16]
90001498:	e724      	b.n	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000149a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000149e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900014a0:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
900014a2:	2e00      	cmp	r6, #0
900014a4:	f000 80b2 	beq.w	9000160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
900014a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
900014aa:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
900014ac:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f104 0c02 	add.w	ip, r4, #2
900014b4:	1c67      	adds	r7, r4, #1
900014b6:	f811 e004 	ldrb.w	lr, [r1, r4]
900014ba:	1ce0      	adds	r0, r4, #3
900014bc:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014c0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014c2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014c6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014ca:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ce:	ea43 030e 	orr.w	r3, r3, lr
900014d2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014d6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014da:	4443      	add	r3, r8
900014dc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014de:	f811 300c 	ldrb.w	r3, [r1, ip]
900014e2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014e6:	5d0f      	ldrb	r7, [r1, r4]
900014e8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014ec:	5c09      	ldrb	r1, [r1, r0]
900014ee:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014f2:	ea44 0407 	orr.w	r4, r4, r7
900014f6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014fa:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014fc:	f240 808e 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001500:	6833      	ldr	r3, [r6, #0]
90001502:	4621      	mov	r1, r4
90001504:	4630      	mov	r0, r6
90001506:	68db      	ldr	r3, [r3, #12]
90001508:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000150a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000150c:	2204      	movs	r2, #4
9000150e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001510:	6803      	ldr	r3, [r0, #0]
90001512:	691b      	ldr	r3, [r3, #16]
90001514:	4798      	blx	r3
90001516:	2800      	cmp	r0, #0
90001518:	d05a      	beq.n	900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
9000151a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000151c:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000151e:	2b00      	cmp	r3, #0
90001520:	f000 80aa 	beq.w	90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001524:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001526:	2204      	movs	r2, #4
90001528:	490c      	ldr	r1, [pc, #48]	; (9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000152a:	f026 f8cf 	bl	900276cc <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000152e:	2800      	cmp	r0, #0
90001530:	d166      	bne.n	90001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001532:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001534:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001536:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001538:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000153a:	622b      	str	r3, [r5, #32]
}
9000153c:	b003      	add	sp, #12
9000153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001542:	bf00      	nop
90001544:	900286d4 	.word	0x900286d4
90001548:	9002878c 	.word	0x9002878c
9000154c:	90028784 	.word	0x90028784
90001550:	9002877c 	.word	0x9002877c
90001554:	90028764 	.word	0x90028764
90001558:	9002876c 	.word	0x9002876c
9000155c:	90028774 	.word	0x90028774
90001560:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001564:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001566:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000156a:	2204      	movs	r2, #4
9000156c:	4944      	ldr	r1, [pc, #272]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000156e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001572:	4620      	mov	r0, r4
90001574:	f026 f8aa 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001578:	2800      	cmp	r0, #0
9000157a:	d158      	bne.n	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000157c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001580:	2204      	movs	r2, #4
90001582:	4940      	ldr	r1, [pc, #256]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001584:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001586:	4440      	add	r0, r8
90001588:	f026 f8a0 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000158c:	2800      	cmp	r0, #0
9000158e:	d169      	bne.n	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001590:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	493c      	ldr	r1, [pc, #240]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001598:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000159c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
900015a0:	f026 f894 	bl	900276cc <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
900015a4:	4683      	mov	fp, r0
900015a6:	2800      	cmp	r0, #0
900015a8:	d152      	bne.n	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015aa:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015ac:	2c00      	cmp	r4, #0
900015ae:	d048      	beq.n	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900015b0:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015b4:	2204      	movs	r2, #4
900015b6:	4935      	ldr	r1, [pc, #212]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
900015b8:	4440      	add	r0, r8
900015ba:	f026 f887 	bl	900276cc <strncmp>
    if (compare(offset, "hdrl", 4))
900015be:	b958      	cbnz	r0, 900015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015c0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015c4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c8:	4440      	add	r0, r8
900015ca:	f04f 0900 	mov.w	r9, #0
900015ce:	e67f      	b.n	900012d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015d0:	230d      	movs	r3, #13
900015d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015d6:	e7a0      	b.n	9000151a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d8:	2306      	movs	r3, #6
    offset += 4;
900015da:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015e2:	e7f1      	b.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015e6:	585a      	ldr	r2, [r3, r1]
900015e8:	443b      	add	r3, r7
900015ea:	4929      	ldr	r1, [pc, #164]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015ec:	fba1 1202 	umull	r1, r2, r1, r2
900015f0:	0992      	lsrs	r2, r2, #6
900015f2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015f6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015fa:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015fe:	e74a      	b.n	90001496 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
90001600:	230b      	movs	r3, #11
90001602:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
90001606:	b003      	add	sp, #12
90001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000160c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000160e:	5903      	ldr	r3, [r0, r4]
90001610:	4443      	add	r3, r8
90001612:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
90001614:	5904      	ldr	r4, [r0, r4]
90001616:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
90001618:	4420      	add	r0, r4
9000161a:	e784      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000161e:	4b1d      	ldr	r3, [pc, #116]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001620:	4a1d      	ldr	r2, [pc, #116]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001622:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001624:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001628:	481c      	ldr	r0, [pc, #112]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162a:	f025 fd93 	bl	90027154 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000162e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001630:	4b1b      	ldr	r3, [pc, #108]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001632:	4a1c      	ldr	r2, [pc, #112]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001634:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001638:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000163c:	4817      	ldr	r0, [pc, #92]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000163e:	f025 fd89 	bl	90027154 <__assert_func>
    assert(aviListSize);
90001642:	4b19      	ldr	r3, [pc, #100]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001644:	f240 1149 	movw	r1, #329	; 0x149
90001648:	4a16      	ldr	r2, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	4814      	ldr	r0, [pc, #80]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000164c:	f025 fd82 	bl	90027154 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001650:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001652:	4b16      	ldr	r3, [pc, #88]	; (900016ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001654:	4a13      	ldr	r2, [pc, #76]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001656:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000165a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000165e:	480f      	ldr	r0, [pc, #60]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001660:	f025 fd78 	bl	90027154 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001664:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001666:	4b12      	ldr	r3, [pc, #72]	; (900016b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001668:	4a0e      	ldr	r2, [pc, #56]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000166a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000166e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001672:	480a      	ldr	r0, [pc, #40]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001674:	f025 fd6e 	bl	90027154 <__assert_func>
        src = (const char*)movieData + offset;
90001678:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000167a:	4420      	add	r0, r4
9000167c:	e753      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000167e:	bf00      	nop
90001680:	900286d4 	.word	0x900286d4
90001684:	9002878c 	.word	0x9002878c
90001688:	90028784 	.word	0x90028784
9000168c:	9002877c 	.word	0x9002877c
90001690:	10624dd3 	.word	0x10624dd3
90001694:	900285a0 	.word	0x900285a0
90001698:	900285b4 	.word	0x900285b4
9000169c:	90028544 	.word	0x90028544
900016a0:	900286dc 	.word	0x900286dc
900016a4:	900286f8 	.word	0x900286f8
900016a8:	90028758 	.word	0x90028758
900016ac:	90028740 	.word	0x90028740
900016b0:	90028728 	.word	0x90028728

900016b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016b4:	b410      	push	{r4}
    reader = 0; //not using reader
900016b6:	2400      	movs	r4, #0
    movieLength = length;
900016b8:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016bc:	6304      	str	r4, [r0, #48]	; 0x30
}
900016be:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016c2:	f7ff bd99 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016c6:	bf00      	nop

900016c8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016ca:	680b      	ldr	r3, [r1, #0]
{
900016cc:	4604      	mov	r4, r0
    movieData = 0;
900016ce:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016d0:	4608      	mov	r0, r1
900016d2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016d4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d8:	4798      	blx	r3
900016da:	4603      	mov	r3, r0
    readVideoHeader();
900016dc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016de:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016e4:	f7ff bd88 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e8 <HAL_JPEG_InfoReadyCallback>:
{
900016e8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ea:	684b      	ldr	r3, [r1, #4]
{
900016ec:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ee:	2b01      	cmp	r3, #1
900016f0:	d01a      	beq.n	90001728 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016f2:	2b02      	cmp	r3, #2
900016f4:	d010      	beq.n	90001718 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016f6:	b94b      	cbnz	r3, 9000170c <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	0759      	lsls	r1, r3, #29
900016fc:	d12f      	bne.n	9000175e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016fe:	6883      	ldr	r3, [r0, #8]
90001700:	075a      	lsls	r2, r3, #29
90001702:	d003      	beq.n	9000170c <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
90001704:	f023 0307 	bic.w	r3, r3, #7
90001708:	3308      	adds	r3, #8
9000170a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000170c:	4a1a      	ldr	r2, [pc, #104]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
9000170e:	491b      	ldr	r1, [pc, #108]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001710:	f010 fe8a 	bl	90012428 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001714:	bb40      	cbnz	r0, 90001768 <HAL_JPEG_InfoReadyCallback+0x80>
}
90001716:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001718:	68cb      	ldr	r3, [r1, #12]
9000171a:	071a      	lsls	r2, r3, #28
9000171c:	d0ef      	beq.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000171e:	f023 030f 	bic.w	r3, r3, #15
90001722:	3310      	adds	r3, #16
90001724:	60cb      	str	r3, [r1, #12]
90001726:	e7ea      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001728:	68cb      	ldr	r3, [r1, #12]
9000172a:	071a      	lsls	r2, r3, #28
9000172c:	d003      	beq.n	90001736 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000172e:	f023 030f 	bic.w	r3, r3, #15
90001732:	3310      	adds	r3, #16
90001734:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001736:	6883      	ldr	r3, [r0, #8]
90001738:	0719      	lsls	r1, r3, #28
9000173a:	d003      	beq.n	90001744 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000173c:	f023 030f 	bic.w	r3, r3, #15
90001740:	3310      	adds	r3, #16
90001742:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001744:	4a0c      	ldr	r2, [pc, #48]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
90001746:	490d      	ldr	r1, [pc, #52]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001748:	f001 ff56 	bl	900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000174c:	2800      	cmp	r0, #0
9000174e:	d0e2      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001750:	4b0b      	ldr	r3, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
90001752:	f240 212e 	movw	r1, #558	; 0x22e
90001756:	4a0b      	ldr	r2, [pc, #44]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001758:	480b      	ldr	r0, [pc, #44]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000175a:	f025 fcfb 	bl	90027154 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000175e:	f023 0307 	bic.w	r3, r3, #7
90001762:	3308      	adds	r3, #8
90001764:	60c3      	str	r3, [r0, #12]
90001766:	e7ca      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001768:	4b05      	ldr	r3, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
9000176a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000176e:	4a05      	ldr	r2, [pc, #20]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001770:	4805      	ldr	r0, [pc, #20]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001772:	f025 fcef 	bl	90027154 <__assert_func>
90001776:	bf00      	nop
90001778:	24005b98 	.word	0x24005b98
9000177c:	24005bd4 	.word	0x24005bd4
90001780:	90028794 	.word	0x90028794
90001784:	900287a8 	.word	0x900287a8
90001788:	90028544 	.word	0x90028544

9000178c <HAL_JPEG_GetDataCallback>:
{
9000178c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000178e:	4c0c      	ldr	r4, [pc, #48]	; (900017c0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001790:	4a0c      	ldr	r2, [pc, #48]	; (900017c4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001792:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001794:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001796:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001798:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000179a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000179c:	d302      	bcc.n	900017a4 <HAL_JPEG_GetDataCallback+0x18>
}
9000179e:	f85d 4b04 	ldr.w	r4, [sp], #4
900017a2:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
900017a4:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4b08      	ldr	r3, [pc, #32]	; (900017c8 <HAL_JPEG_GetDataCallback+0x3c>)
900017a8:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ae:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b0:	bf28      	it	cs
900017b2:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ba:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017bc:	f009 bc78 	b.w	9000b0b0 <HAL_JPEG_ConfigInputBuffer>
900017c0:	24005b7c 	.word	0x24005b7c
900017c4:	24005b80 	.word	0x24005b80
900017c8:	24005b78 	.word	0x24005b78

900017cc <HAL_JPEG_DataReadyCallback>:
{
900017cc:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ce:	4e1e      	ldr	r6, [pc, #120]	; (90001848 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017d0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d2:	2001      	movs	r0, #1
900017d4:	4c1d      	ldr	r4, [pc, #116]	; (9000184c <HAL_JPEG_DataReadyCallback+0x80>)
900017d6:	6833      	ldr	r3, [r6, #0]
900017d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017dc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017de:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ea:	d91a      	bls.n	90001822 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017ec:	2200      	movs	r2, #0
900017ee:	4613      	mov	r3, r2
900017f0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017f6:	005a      	lsls	r2, r3, #1
900017f8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017fc:	b9c9      	cbnz	r1, 90001832 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017fe:	4914      	ldr	r1, [pc, #80]	; (90001850 <HAL_JPEG_DataReadyCallback+0x84>)
90001800:	4413      	add	r3, r2
90001802:	4628      	mov	r0, r5
90001804:	68ca      	ldr	r2, [r1, #12]
90001806:	eb04 0483 	add.w	r4, r4, r3, lsl #2
9000180a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9000180e:	6861      	ldr	r1, [r4, #4]
90001810:	01d2      	lsls	r2, r2, #7
90001812:	f009 fc51 	bl	9000b0b8 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
90001816:	4b0f      	ldr	r3, [pc, #60]	; (90001854 <HAL_JPEG_DataReadyCallback+0x88>)
}
90001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
9000181c:	6818      	ldr	r0, [r3, #0]
9000181e:	f00d b8cb 	b.w	9000e9b8 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001822:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001826:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001828:	005a      	lsls	r2, r3, #1
9000182a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000182e:	2900      	cmp	r1, #0
90001830:	d0e5      	beq.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001832:	2102      	movs	r1, #2
90001834:	4628      	mov	r0, r5
90001836:	f009 fc03 	bl	9000b040 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000183a:	4a07      	ldr	r2, [pc, #28]	; (90001858 <HAL_JPEG_DataReadyCallback+0x8c>)
9000183c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000183e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001840:	6011      	str	r1, [r2, #0]
90001842:	fa03 f201 	lsl.w	r2, r3, r1
90001846:	e7da      	b.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
90001848:	24005b88 	.word	0x24005b88
9000184c:	24000004 	.word	0x24000004
90001850:	24005ba0 	.word	0x24005ba0
90001854:	24005bd8 	.word	0x24005bd8
90001858:	24005b9c 	.word	0x24005b9c

9000185c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000185c:	b672      	cpsid	i
  while (1)
9000185e:	e7fe      	b.n	9000185e <HAL_JPEG_ErrorCallback+0x2>

90001860 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001860:	4b01      	ldr	r3, [pc, #4]	; (90001868 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001862:	2201      	movs	r2, #1
90001864:	601a      	str	r2, [r3, #0]
}
90001866:	4770      	bx	lr
90001868:	24005b90 	.word	0x24005b90

9000186c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000186c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	491b      	ldr	r1, [pc, #108]	; (900018dc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001870:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001872:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001874:	4c1a      	ldr	r4, [pc, #104]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001876:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001878:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187c:	4e19      	ldr	r6, [pc, #100]	; (900018e4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001882:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001886:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001888:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188e:	68cb      	ldr	r3, [r1, #12]
90001890:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001894:	690e      	ldr	r6, [r1, #16]
90001896:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000189a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000189c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
900018a0:	d317      	bcc.n	900018d2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018a2:	6889      	ldr	r1, [r1, #8]
900018a4:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a8:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018aa:	490f      	ldr	r1, [pc, #60]	; (900018e8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ac:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018b2:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b4:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018b6:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ba:	4411      	add	r1, r2
900018bc:	4a08      	ldr	r2, [pc, #32]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
900018be:	4461      	add	r1, ip
900018c0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018c2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c4:	4909      	ldr	r1, [pc, #36]	; (900018ec <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	4b0a      	ldr	r3, [pc, #40]	; (900018f0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018ca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018cc:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ce:	6013      	str	r3, [r2, #0]
}
900018d0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018d2:	0519      	lsls	r1, r3, #20
900018d4:	f041 0110 	orr.w	r1, r1, #16
900018d8:	6461      	str	r1, [r4, #68]	; 0x44
900018da:	e7e6      	b.n	900018aa <DMA2D_CopyBuffer+0x3e>
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	52001000 	.word	0x52001000
900018e4:	24005b98 	.word	0x24005b98
900018e8:	24005b74 	.word	0x24005b74
900018ec:	ff09000b 	.word	0xff09000b
900018f0:	00010201 	.word	0x00010201

900018f4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018f4:	2200      	movs	r2, #0
900018f6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f8:	490b      	ldr	r1, [pc, #44]	; (90001928 <DMA2D_ExternalJobCompleted+0x34>)
900018fa:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018fc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018fe:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
90001900:	b911      	cbnz	r1, 90001908 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
90001902:	4b0a      	ldr	r3, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x38>)
90001904:	2201      	movs	r2, #1
90001906:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001908:	4b09      	ldr	r3, [pc, #36]	; (90001930 <DMA2D_ExternalJobCompleted+0x3c>)
9000190a:	490a      	ldr	r1, [pc, #40]	; (90001934 <DMA2D_ExternalJobCompleted+0x40>)
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	68c9      	ldr	r1, [r1, #12]
90001910:	6802      	ldr	r2, [r0, #0]
90001912:	1a5b      	subs	r3, r3, r1
90001914:	429a      	cmp	r2, r3
90001916:	d302      	bcc.n	9000191e <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001918:	4b07      	ldr	r3, [pc, #28]	; (90001938 <DMA2D_ExternalJobCompleted+0x44>)
9000191a:	2201      	movs	r2, #1
9000191c:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
9000191e:	4b07      	ldr	r3, [pc, #28]	; (9000193c <DMA2D_ExternalJobCompleted+0x48>)
90001920:	6818      	ldr	r0, [r3, #0]
90001922:	f00d b849 	b.w	9000e9b8 <osSemaphoreRelease>
90001926:	bf00      	nop
90001928:	24005bb4 	.word	0x24005bb4
9000192c:	24005b70 	.word	0x24005b70
90001930:	24005b98 	.word	0x24005b98
90001934:	24005ba0 	.word	0x24005ba0
90001938:	24005b6c 	.word	0x24005b6c
9000193c:	24005bd8 	.word	0x24005bd8

90001940 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001940:	4b03      	ldr	r3, [pc, #12]	; (90001950 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001942:	2200      	movs	r2, #0
90001944:	2102      	movs	r1, #2
90001946:	60da      	str	r2, [r3, #12]
90001948:	6019      	str	r1, [r3, #0]
9000194a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000194e:	4770      	bx	lr
90001950:	24005bb4 	.word	0x24005bb4

90001954 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001954:	2101      	movs	r1, #1
90001956:	2200      	movs	r2, #0
{
90001958:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000195a:	4608      	mov	r0, r1
9000195c:	f00c ffa8 	bl	9000e8b0 <osSemaphoreNew>
90001960:	4b0b      	ldr	r3, [pc, #44]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001962:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001964:	b140      	cbz	r0, 90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001966:	2200      	movs	r2, #0
90001968:	2104      	movs	r1, #4
9000196a:	2001      	movs	r0, #1
9000196c:	f00d f850 	bl	9000ea10 <osMessageQueueNew>
90001970:	4b08      	ldr	r3, [pc, #32]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001972:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001974:	b130      	cbz	r0, 90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001976:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001978:	4b07      	ldr	r3, [pc, #28]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000197a:	2128      	movs	r1, #40	; 0x28
9000197c:	4a07      	ldr	r2, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000197e:	4808      	ldr	r0, [pc, #32]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001980:	f025 fbe8 	bl	90027154 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001984:	4b07      	ldr	r3, [pc, #28]	; (900019a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001986:	212c      	movs	r1, #44	; 0x2c
90001988:	4a04      	ldr	r2, [pc, #16]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000198a:	4805      	ldr	r0, [pc, #20]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000198c:	f025 fbe2 	bl	90027154 <__assert_func>
90001990:	24005be0 	.word	0x24005be0
90001994:	24005bdc 	.word	0x24005bdc
90001998:	90028834 	.word	0x90028834
9000199c:	90028880 	.word	0x90028880
900019a0:	900288b0 	.word	0x900288b0
900019a4:	90028904 	.word	0x90028904

900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a8:	4b02      	ldr	r3, [pc, #8]	; (900019b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019aa:	f04f 31ff 	mov.w	r1, #4294967295
900019ae:	6818      	ldr	r0, [r3, #0]
900019b0:	f00c bfce 	b.w	9000e950 <osSemaphoreAcquire>
900019b4:	24005be0 	.word	0x24005be0

900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b8:	4b01      	ldr	r3, [pc, #4]	; (900019c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019ba:	6818      	ldr	r0, [r3, #0]
900019bc:	f00c bffc 	b.w	9000e9b8 <osSemaphoreRelease>
900019c0:	24005be0 	.word	0x24005be0

900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019c4:	4b02      	ldr	r3, [pc, #8]	; (900019d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019c6:	2100      	movs	r1, #0
900019c8:	6818      	ldr	r0, [r3, #0]
900019ca:	f00c bfc1 	b.w	9000e950 <osSemaphoreAcquire>
900019ce:	bf00      	nop
900019d0:	24005be0 	.word	0x24005be0

900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019d4:	4b01      	ldr	r3, [pc, #4]	; (900019dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019d6:	6818      	ldr	r0, [r3, #0]
900019d8:	f00c bfee 	b.w	9000e9b8 <osSemaphoreRelease>
900019dc:	24005be0 	.word	0x24005be0

900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019e0:	4803      	ldr	r0, [pc, #12]	; (900019f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019e2:	2300      	movs	r3, #0
900019e4:	4903      	ldr	r1, [pc, #12]	; (900019f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019e6:	461a      	mov	r2, r3
900019e8:	6800      	ldr	r0, [r0, #0]
900019ea:	f00d b84f 	b.w	9000ea8c <osMessageQueuePut>
900019ee:	bf00      	nop
900019f0:	24005bdc 	.word	0x24005bdc
900019f4:	2400001c 	.word	0x2400001c

900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fa:	2300      	movs	r3, #0
{
900019fc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fe:	4c07      	ldr	r4, [pc, #28]	; (90001a1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001a00:	461a      	mov	r2, r3
90001a02:	a901      	add	r1, sp, #4
90001a04:	6820      	ldr	r0, [r4, #0]
90001a06:	f00d f883 	bl	9000eb10 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a0a:	f04f 33ff 	mov.w	r3, #4294967295
90001a0e:	2200      	movs	r2, #0
90001a10:	a901      	add	r1, sp, #4
90001a12:	6820      	ldr	r0, [r4, #0]
90001a14:	f00d f87c 	bl	9000eb10 <osMessageQueueGet>
}
90001a18:	b002      	add	sp, #8
90001a1a:	bd10      	pop	{r4, pc}
90001a1c:	24005bdc 	.word	0x24005bdc

90001a20 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a20:	6803      	ldr	r3, [r0, #0]
90001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a24:	4718      	bx	r3
90001a26:	bf00      	nop

90001a28 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a28:	2001      	movs	r0, #1
90001a2a:	4770      	bx	lr

90001a2c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a2c:	4905      	ldr	r1, [pc, #20]	; (90001a44 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a32:	4b05      	ldr	r3, [pc, #20]	; (90001a48 <_ZN8STM32DMAD1Ev+0x1c>)
90001a34:	6001      	str	r1, [r0, #0]
90001a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a3e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a42:	4770      	bx	lr
90001a44:	90028ab0 	.word	0x90028ab0
90001a48:	e000e100 	.word	0xe000e100

90001a4c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4c:	4b0f      	ldr	r3, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a4e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a50:	490f      	ldr	r1, [pc, #60]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a56:	480f      	ldr	r0, [pc, #60]	; (90001a94 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a58:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a5c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a66:	f002 0210 	and.w	r2, r2, #16
90001a6a:	9201      	str	r2, [sp, #4]
90001a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f042 0210 	orr.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a78:	f022 0210 	bic.w	r2, r2, #16
90001a7c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a7e:	4b06      	ldr	r3, [pc, #24]	; (90001a98 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a84:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a86:	b002      	add	sp, #8
90001a88:	4770      	bx	lr
90001a8a:	bf00      	nop
90001a8c:	58024400 	.word	0x58024400
90001a90:	2400cdc8 	.word	0x2400cdc8
90001a94:	90001e45 	.word	0x90001e45
90001a98:	e000e100 	.word	0xe000e100

90001a9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a9c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001aa0:	4770      	bx	lr
90001aa2:	bf00      	nop

90001aa4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001aa4:	4909      	ldr	r1, [pc, #36]	; (90001acc <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aaa:	4b09      	ldr	r3, [pc, #36]	; (90001ad0 <_ZN8STM32DMAD0Ev+0x2c>)
90001aac:	b510      	push	{r4, lr}
90001aae:	6001      	str	r1, [r0, #0]
90001ab0:	4604      	mov	r4, r0
90001ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001aba:	f3bf 8f6f 	isb	sy
}
90001abe:	f640 51a8 	movw	r1, #3496	; 0xda8
90001ac2:	f025 fb18 	bl	900270f6 <_ZdlPvj>
90001ac6:	4620      	mov	r0, r4
90001ac8:	bd10      	pop	{r4, pc}
90001aca:	bf00      	nop
90001acc:	90028ab0 	.word	0x90028ab0
90001ad0:	e000e100 	.word	0xe000e100

90001ad4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ad4:	b510      	push	{r4, lr}
90001ad6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad8:	f04f 31ff 	mov.w	r1, #4294967295
90001adc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ae0:	f00c fea0 	bl	9000e824 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ae4:	6860      	ldr	r0, [r4, #4]
90001ae6:	6803      	ldr	r3, [r0, #0]
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	4798      	blx	r3
90001aec:	b978      	cbnz	r0, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001aee:	7a63      	ldrb	r3, [r4, #9]
90001af0:	b16b      	cbz	r3, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001af2:	7a23      	ldrb	r3, [r4, #8]
90001af4:	b92b      	cbnz	r3, 90001b02 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001af6:	6822      	ldr	r2, [r4, #0]
90001af8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001afa:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001afe:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001b00:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b0a:	f00c beaf 	b.w	9000e86c <osMutexRelease>
      return count_ == 0;
90001b0e:	4b0b      	ldr	r3, [pc, #44]	; (90001b3c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b10:	68da      	ldr	r2, [r3, #12]
90001b12:	2a00      	cmp	r2, #0
90001b14:	d0f5      	beq.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
90001b16:	7a22      	ldrb	r2, [r4, #8]
90001b18:	2a00      	cmp	r2, #0
90001b1a:	d1f2      	bne.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b1c:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b1e:	2201      	movs	r2, #1
      return buffer_[head_];
90001b20:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b22:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b26:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b2c:	f7ff fe9e 	bl	9000186c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b38:	f00c be98 	b.w	9000e86c <osMutexRelease>
90001b3c:	24005bb4 	.word	0x24005bb4

90001b40 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b40:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b42:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b46:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b48:	b943      	cbnz	r3, 90001b5c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b4a:	6803      	ldr	r3, [r0, #0]
90001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b4e:	4798      	blx	r3
      return count_ == 0;
90001b50:	4b15      	ldr	r3, [pc, #84]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b52:	68da      	ldr	r2, [r3, #12]
90001b54:	b10a      	cbz	r2, 90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b56:	7a22      	ldrb	r2, [r4, #8]
90001b58:	b1d2      	cbz	r2, 90001b90 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b5a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b5c:	4b12      	ldr	r3, [pc, #72]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b5e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b60:	2a00      	cmp	r2, #0
90001b62:	d0fa      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b64:	7a01      	ldrb	r1, [r0, #8]
90001b66:	2900      	cmp	r1, #0
90001b68:	d0f7      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b6a:	2100      	movs	r1, #0
      count_--;
90001b6c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b6e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b72:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b74:	1c41      	adds	r1, r0, #1
      count_--;
90001b76:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b78:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b7a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b7e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b86:	6059      	str	r1, [r3, #4]
    }
90001b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b8c:	f7ff beb2 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b90:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b92:	2201      	movs	r2, #1
      return buffer_[head_];
90001b94:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b96:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b9a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001ba4:	f7ff be62 	b.w	9000186c <DMA2D_CopyBuffer>
90001ba8:	24005bb4 	.word	0x24005bb4

90001bac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001bac:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001bae:	7f8b      	ldrb	r3, [r1, #30]
90001bb0:	2b0a      	cmp	r3, #10
90001bb2:	d83e      	bhi.n	90001c32 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bb4:	e8df f003 	tbb	[pc, r3]
90001bb8:	3d2a063b 	.word	0x3d2a063b
90001bbc:	063d3d3d 	.word	0x063d3d3d
90001bc0:	0606      	.short	0x0606
90001bc2:	06          	.byte	0x06
90001bc3:	00          	.byte	0x00
90001bc4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bca:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bce:	4b1c      	ldr	r3, [pc, #112]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bda:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bdc:	6908      	ldr	r0, [r1, #16]
90001bde:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001be0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001be2:	680d      	ldr	r5, [r1, #0]
90001be4:	2d08      	cmp	r5, #8
90001be6:	d013      	beq.n	90001c10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bea:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bec:	4c15      	ldr	r4, [pc, #84]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bee:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bf0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bf2:	0a0a      	lsrs	r2, r1, #8
90001bf4:	0948      	lsrs	r0, r1, #5
90001bf6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001c02:	4302      	orrs	r2, r0
90001c04:	430a      	orrs	r2, r1
90001c06:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c08:	601c      	str	r4, [r3, #0]
    }
}
90001c0a:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c0c:	2400      	movs	r4, #0
90001c0e:	e7da      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c10:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c14:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c16:	4a0c      	ldr	r2, [pc, #48]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c18:	7f0c      	ldrb	r4, [r1, #28]
90001c1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c1e:	4c0b      	ldr	r4, [pc, #44]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c20:	61da      	str	r2, [r3, #28]
90001c22:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c24:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c26:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c28:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c2a:	601c      	str	r4, [r3, #0]
}
90001c2c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c2e:	2402      	movs	r4, #2
90001c30:	e7c9      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c32:	4b07      	ldr	r3, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c34:	2188      	movs	r1, #136	; 0x88
90001c36:	4a07      	ldr	r2, [pc, #28]	; (90001c54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c38:	4807      	ldr	r0, [pc, #28]	; (90001c58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c3a:	f025 fa8b 	bl	90027154 <__assert_func>
90001c3e:	bf00      	nop
90001c40:	52001000 	.word	0x52001000
90001c44:	00030201 	.word	0x00030201
90001c48:	00010009 	.word	0x00010009
90001c4c:	00020201 	.word	0x00020201
90001c50:	90028948 	.word	0x90028948
90001c54:	90028964 	.word	0x90028964
90001c58:	900289b0 	.word	0x900289b0

90001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c5e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c62:	f1be 0f0b 	cmp.w	lr, #11
90001c66:	f200 80c1 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c6a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c6e:	0063      	.short	0x0063
90001c70:	004c0065 	.word	0x004c0065
90001c74:	00bf00bf 	.word	0x00bf00bf
90001c78:	00bf00bf 	.word	0x00bf00bf
90001c7c:	000c000c 	.word	0x000c000c
90001c80:	000c000c 	.word	0x000c000c
90001c84:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c86:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c88:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c8c:	f1bc 0f0b 	cmp.w	ip, #11
90001c90:	f200 80ac 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c94:	e8df f00c 	tbb	[pc, ip]
90001c98:	aa0e4b52 	.word	0xaa0e4b52
90001c9c:	06aaaaaa 	.word	0x06aaaaaa
90001ca0:	06060606 	.word	0x06060606
    switch (format)
90001ca4:	f1ac 0307 	sub.w	r3, ip, #7
90001ca8:	2b03      	cmp	r3, #3
90001caa:	f200 80a5 	bhi.w	90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001cae:	2605      	movs	r6, #5
90001cb0:	2701      	movs	r7, #1
90001cb2:	e001      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cb4:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cb6:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	8a8b      	ldrh	r3, [r1, #20]
90001cba:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cbc:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbe:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc8:	4b52      	ldr	r3, [pc, #328]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cca:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ccc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cce:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cd2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cd4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cd6:	6908      	ldr	r0, [r1, #16]
90001cd8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cda:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cdc:	680a      	ldr	r2, [r1, #0]
90001cde:	2a80      	cmp	r2, #128	; 0x80
90001ce0:	d03b      	beq.n	90001d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001ce2:	d812      	bhi.n	90001d0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001ce4:	2a20      	cmp	r2, #32
90001ce6:	d02c      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce8:	2a40      	cmp	r2, #64	; 0x40
90001cea:	d02a      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cec:	2a04      	cmp	r2, #4
90001cee:	d169      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cf2:	4949      	ldr	r1, [pc, #292]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cfc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cfe:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d00:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d02:	6019      	str	r1, [r3, #0]
}
90001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001d06:	2500      	movs	r5, #0
90001d08:	e7be      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d0e:	d067      	beq.n	90001de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d14:	d156      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d16:	7f0c      	ldrb	r4, [r1, #28]
90001d18:	4a40      	ldr	r2, [pc, #256]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d1e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d20:	4a3d      	ldr	r2, [pc, #244]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d22:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d24:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d26:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d28:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d2a:	601a      	str	r2, [r3, #0]
}
90001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d2e:	2601      	movs	r6, #1
90001d30:	4637      	mov	r7, r6
90001d32:	e7c1      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d34:	2502      	movs	r5, #2
90001d36:	e7a7      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d38:	2501      	movs	r5, #1
90001d3a:	e7a5      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d3c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d3e:	4637      	mov	r7, r6
90001d40:	e7ba      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d42:	7f0b      	ldrb	r3, [r1, #28]
90001d44:	4a33      	ldr	r2, [pc, #204]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d46:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d4e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d50:	4b31      	ldr	r3, [pc, #196]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d52:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d54:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d56:	6013      	str	r3, [r2, #0]
}
90001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d5a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d5c:	1d14      	adds	r4, r2, #4
90001d5e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d60:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d62:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d64:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d68:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d6c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d6e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d70:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d72:	b9b1      	cbnz	r1, 90001da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d74:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d76:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d78:	69d8      	ldr	r0, [r3, #28]
90001d7a:	4a29      	ldr	r2, [pc, #164]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d7c:	3901      	subs	r1, #1
90001d7e:	4002      	ands	r2, r0
90001d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d84:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d86:	4a23      	ldr	r2, [pc, #140]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	f043 0320 	orr.w	r3, r3, #32
90001d8e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d90:	69d3      	ldr	r3, [r2, #28]
90001d92:	069b      	lsls	r3, r3, #26
90001d94:	d4fc      	bmi.n	90001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d96:	2310      	movs	r3, #16
90001d98:	6093      	str	r3, [r2, #8]
            if(blend)
90001d9a:	b324      	cbz	r4, 90001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d9c:	4b1e      	ldr	r3, [pc, #120]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d9e:	6013      	str	r3, [r2, #0]
}
90001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001da2:	2901      	cmp	r1, #1
90001da4:	d12e      	bne.n	90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da6:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da8:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001daa:	69d8      	ldr	r0, [r3, #28]
90001dac:	4a1c      	ldr	r2, [pc, #112]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001dae:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001db2:	bf18      	it	ne
90001db4:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001db6:	4002      	ands	r2, r0
90001db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001dbc:	f042 0210 	orr.w	r2, r2, #16
90001dc0:	61da      	str	r2, [r3, #28]
                break;
90001dc2:	e7e0      	b.n	90001d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dc6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc8:	4b12      	ldr	r3, [pc, #72]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dca:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dce:	bf14      	ite	ne
90001dd0:	4a14      	ldrne	r2, [pc, #80]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dda:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001ddc:	601a      	str	r2, [r3, #0]
}
90001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001de0:	7f0c      	ldrb	r4, [r1, #28]
90001de2:	4a11      	ldr	r2, [pc, #68]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001de4:	e799      	b.n	90001d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001de6:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de8:	6013      	str	r3, [r2, #0]
}
90001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dec:	4b0f      	ldr	r3, [pc, #60]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dee:	2167      	movs	r1, #103	; 0x67
90001df0:	4a0f      	ldr	r2, [pc, #60]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001df2:	4810      	ldr	r0, [pc, #64]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df4:	f025 f9ae 	bl	90027154 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df8:	4b0c      	ldr	r3, [pc, #48]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dfa:	2188      	movs	r1, #136	; 0x88
90001dfc:	4a0e      	ldr	r2, [pc, #56]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dfe:	480d      	ldr	r0, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e00:	f025 f9a8 	bl	90027154 <__assert_func>
                assert(0 && "Unsupported format");
90001e04:	4b0d      	ldr	r3, [pc, #52]	; (90001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001e06:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e0a:	4a0d      	ldr	r2, [pc, #52]	; (90001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e0c:	4809      	ldr	r0, [pc, #36]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e0e:	f025 f9a1 	bl	90027154 <__assert_func>
90001e12:	bf00      	nop
90001e14:	52001000 	.word	0x52001000
90001e18:	00020201 	.word	0x00020201
90001e1c:	00020009 	.word	0x00020009
90001e20:	ffff00ef 	.word	0xffff00ef
90001e24:	00010201 	.word	0x00010201
90001e28:	0002000a 	.word	0x0002000a
90001e2c:	90028948 	.word	0x90028948
90001e30:	90028a00 	.word	0x90028a00
90001e34:	900289b0 	.word	0x900289b0
90001e38:	90028964 	.word	0x90028964
90001e3c:	90028a4c 	.word	0x90028a4c
90001e40:	90028a68 	.word	0x90028a68

90001e44 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e44:	4b1f      	ldr	r3, [pc, #124]	; (90001ec4 <DMA2D_XferCpltCallback+0x80>)
90001e46:	4920      	ldr	r1, [pc, #128]	; (90001ec8 <DMA2D_XferCpltCallback+0x84>)
90001e48:	681b      	ldr	r3, [r3, #0]
    {
90001e4a:	b570      	push	{r4, r5, r6, lr}
90001e4c:	685c      	ldr	r4, [r3, #4]
90001e4e:	6823      	ldr	r3, [r4, #0]
90001e50:	695a      	ldr	r2, [r3, #20]
90001e52:	428a      	cmp	r2, r1
90001e54:	d125      	bne.n	90001ea2 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e56:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e5a:	b942      	cbnz	r2, 90001e6e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e5e:	4620      	mov	r0, r4
90001e60:	4798      	blx	r3
      return count_ == 0;
90001e62:	4b1a      	ldr	r3, [pc, #104]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e64:	68da      	ldr	r2, [r3, #12]
90001e66:	b10a      	cbz	r2, 90001e6c <DMA2D_XferCpltCallback+0x28>
90001e68:	7a22      	ldrb	r2, [r4, #8]
90001e6a:	b1f2      	cbz	r2, 90001eaa <DMA2D_XferCpltCallback+0x66>
    }
90001e6c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e6e:	4b17      	ldr	r3, [pc, #92]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
90001e70:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e72:	2a00      	cmp	r2, #0
90001e74:	d0fa      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
90001e76:	7a21      	ldrb	r1, [r4, #8]
90001e78:	2900      	cmp	r1, #0
90001e7a:	d0f7      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e7c:	2100      	movs	r1, #0
      count_--;
90001e7e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e80:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e84:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e86:	1c41      	adds	r1, r0, #1
      count_--;
90001e88:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e8a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e8c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e90:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e9c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e9e:	f7ff bd29 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
90001ea2:	4620      	mov	r0, r4
90001ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea8:	4710      	bx	r2
      return buffer_[head_];
90001eaa:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001eac:	2201      	movs	r2, #1
      return buffer_[head_];
90001eae:	3002      	adds	r0, #2
                started_by_external_job = true;
90001eb0:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eb4:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eb6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ebe:	f7ff bcd5 	b.w	9000186c <DMA2D_CopyBuffer>
90001ec2:	bf00      	nop
90001ec4:	24028194 	.word	0x24028194
90001ec8:	90001b41 	.word	0x90001b41
90001ecc:	24005bb4 	.word	0x24005bb4

90001ed0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ed0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed2:	4b10      	ldr	r3, [pc, #64]	; (90001f14 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ed4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed8:	2500      	movs	r5, #0
90001eda:	300c      	adds	r0, #12
90001edc:	2260      	movs	r2, #96	; 0x60
90001ede:	7235      	strb	r5, [r6, #8]
90001ee0:	7275      	strb	r5, [r6, #9]
90001ee2:	6070      	str	r0, [r6, #4]
90001ee4:	f844 3b20 	str.w	r3, [r4], #32
90001ee8:	4621      	mov	r1, r4
90001eea:	f011 fcf7 	bl	900138dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001eee:	4621      	mov	r1, r4
90001ef0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ef4:	60cd      	str	r5, [r1, #12]
90001ef6:	3124      	adds	r1, #36	; 0x24
90001ef8:	428b      	cmp	r3, r1
90001efa:	d1fb      	bne.n	90001ef4 <_ZN8STM32DMAC1Ev+0x24>
90001efc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001f00:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001f02:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f00c fc4d 	bl	9000e7a4 <osMutexNew>
90001f0a:	4603      	mov	r3, r0
}
90001f0c:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f0e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f12:	bd70      	pop	{r4, r5, r6, pc}
90001f14:	90028ab0 	.word	0x90028ab0

90001f18 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f18:	4a03      	ldr	r2, [pc, #12]	; (90001f28 <_ZN8touchgfx5paint8tearDownEv+0x10>)
90001f1a:	6813      	ldr	r3, [r2, #0]
90001f1c:	07db      	lsls	r3, r3, #31
90001f1e:	d4fc      	bmi.n	90001f1a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f20:	2323      	movs	r3, #35	; 0x23
90001f22:	6093      	str	r3, [r2, #8]
}
90001f24:	4770      	bx	lr
90001f26:	bf00      	nop
90001f28:	52001000 	.word	0x52001000

90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
90001f2c:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f2e:	4c11      	ldr	r4, [pc, #68]	; (90001f74 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
90001f30:	6825      	ldr	r5, [r4, #0]
90001f32:	07ed      	lsls	r5, r5, #31
90001f34:	d4fc      	bmi.n	90001f30 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f36:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f38:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
90001f3a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f3c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f3e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001f42:	f04f 0502 	mov.w	r5, #2
90001f46:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f48:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
90001f4a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
90001f4c:	d00b      	beq.n	90001f66 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x3a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f4e:	490a      	ldr	r1, [pc, #40]	; (90001f78 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f50:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f52:	ea41 6303 	orr.w	r3, r1, r3, lsl #24

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f56:	4909      	ldr	r1, [pc, #36]	; (90001f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f58:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->FGCOLR, color);
90001f5a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
90001f5c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
90001f5e:	60e0      	str	r0, [r4, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f60:	6021      	str	r1, [r4, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
90001f62:	bc30      	pop	{r4, r5}
90001f64:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001f66:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
90001f68:	9a02      	ldr	r2, [sp, #8]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6a:	4b05      	ldr	r3, [pc, #20]	; (90001f80 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x54>)
        WRITE_REG(DMA2D->OCOLR, color565);
90001f6c:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6e:	6023      	str	r3, [r4, #0]
}
90001f70:	bc30      	pop	{r4, r5}
90001f72:	4770      	bx	lr
90001f74:	52001000 	.word	0x52001000
90001f78:	00010009 	.word	0x00010009
90001f7c:	00020001 	.word	0x00020001
90001f80:	00030001 	.word	0x00030001

90001f84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f84:	2001      	movs	r0, #1
90001f86:	4770      	bx	lr

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f88:	2040      	movs	r0, #64	; 0x40
90001f8a:	4770      	bx	lr

90001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f8c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f90:	3008      	adds	r0, #8
90001f92:	4770      	bx	lr

90001f94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f94:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f98:	3008      	adds	r0, #8
90001f9a:	4770      	bx	lr

90001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f9c:	2001      	movs	r0, #1
90001f9e:	4770      	bx	lr

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fa0:	f242 0014 	movw	r0, #8212	; 0x2014
90001fa4:	4770      	bx	lr
90001fa6:	bf00      	nop

90001fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fa8:	f242 0314 	movw	r3, #8212	; 0x2014
90001fac:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fb0:	3008      	adds	r0, #8
90001fb2:	4770      	bx	lr

90001fb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fb4:	f242 0314 	movw	r3, #8212	; 0x2014
90001fb8:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fbc:	3008      	adds	r0, #8
90001fbe:	4770      	bx	lr

90001fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001fc0:	2001      	movs	r0, #1
90001fc2:	4770      	bx	lr

90001fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fc4:	2010      	movs	r0, #16
90001fc6:	4770      	bx	lr

90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fc8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fcc:	3008      	adds	r0, #8
90001fce:	4770      	bx	lr

90001fd0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fd0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fd4:	3008      	adds	r0, #8
90001fd6:	4770      	bx	lr

90001fd8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001fd8:	4608      	mov	r0, r1
90001fda:	f003 bccb 	b.w	90005974 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001fde:	bf00      	nop

90001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001fe0:	4b03      	ldr	r3, [pc, #12]	; (90001ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
90001fe2:	b510      	push	{r4, lr}
90001fe4:	4604      	mov	r4, r0
90001fe6:	6003      	str	r3, [r0, #0]
90001fe8:	f010 facd 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fec:	4620      	mov	r0, r4
90001fee:	bd10      	pop	{r4, pc}
90001ff0:	90028b68 	.word	0x90028b68

90001ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
90001ff4:	4b05      	ldr	r3, [pc, #20]	; (9000200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev+0x18>)
90001ff6:	b510      	push	{r4, lr}
90001ff8:	4604      	mov	r4, r0
90001ffa:	6003      	str	r3, [r0, #0]
90001ffc:	f010 fac3 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002000:	2148      	movs	r1, #72	; 0x48
90002002:	4620      	mov	r0, r4
90002004:	f025 f877 	bl	900270f6 <_ZdlPvj>
90002008:	4620      	mov	r0, r4
9000200a:	bd10      	pop	{r4, pc}
9000200c:	90028b68 	.word	0x90028b68

90002010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002010:	4b03      	ldr	r3, [pc, #12]	; (90002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002012:	b510      	push	{r4, lr}
90002014:	4604      	mov	r4, r0
90002016:	6003      	str	r3, [r0, #0]
90002018:	f010 fab5 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201c:	4620      	mov	r0, r4
9000201e:	bd10      	pop	{r4, pc}
90002020:	90028b34 	.word	0x90028b34

90002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90002026:	b510      	push	{r4, lr}
90002028:	4604      	mov	r4, r0
9000202a:	6003      	str	r3, [r0, #0]
9000202c:	f010 faab 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002030:	f242 011c 	movw	r1, #8220	; 0x201c
90002034:	4620      	mov	r0, r4
90002036:	f025 f85e 	bl	900270f6 <_ZdlPvj>
9000203a:	4620      	mov	r0, r4
9000203c:	bd10      	pop	{r4, pc}
9000203e:	bf00      	nop
90002040:	90028b34 	.word	0x90028b34

90002044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002044:	4b03      	ldr	r3, [pc, #12]	; (90002054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002046:	b510      	push	{r4, lr}
90002048:	4604      	mov	r4, r0
9000204a:	6003      	str	r3, [r0, #0]
9000204c:	f010 fa9b 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002050:	4620      	mov	r0, r4
90002052:	bd10      	pop	{r4, pc}
90002054:	90028b00 	.word	0x90028b00

90002058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002058:	4b05      	ldr	r3, [pc, #20]	; (90002070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000205a:	b510      	push	{r4, lr}
9000205c:	4604      	mov	r4, r0
9000205e:	6003      	str	r3, [r0, #0]
90002060:	f010 fa91 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002064:	2118      	movs	r1, #24
90002066:	4620      	mov	r0, r4
90002068:	f025 f845 	bl	900270f6 <_ZdlPvj>
9000206c:	4620      	mov	r0, r4
9000206e:	bd10      	pop	{r4, pc}
90002070:	90028b00 	.word	0x90028b00

90002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002074:	b510      	push	{r4, lr}
90002076:	4604      	mov	r4, r0
90002078:	490c      	ldr	r1, [pc, #48]	; (900020ac <_ZN12FrontendHeapD1Ev+0x38>)
9000207a:	4a0d      	ldr	r2, [pc, #52]	; (900020b0 <_ZN12FrontendHeapD1Ev+0x3c>)
9000207c:	f242 0048 	movw	r0, #8264	; 0x2048
90002080:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
90002084:	6021      	str	r1, [r4, #0]
90002086:	4420      	add	r0, r4
90002088:	649a      	str	r2, [r3, #72]	; 0x48
9000208a:	f010 fa7c 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208e:	4620      	mov	r0, r4
90002090:	4b08      	ldr	r3, [pc, #32]	; (900020b4 <_ZN12FrontendHeapD1Ev+0x40>)
90002092:	f840 3f2c 	str.w	r3, [r0, #44]!
90002096:	f010 fa76 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000209a:	4620      	mov	r0, r4
9000209c:	4b06      	ldr	r3, [pc, #24]	; (900020b8 <_ZN12FrontendHeapD1Ev+0x44>)
9000209e:	f840 3f14 	str.w	r3, [r0, #20]!
900020a2:	f010 fa70 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a6:	4620      	mov	r0, r4
900020a8:	bd10      	pop	{r4, pc}
900020aa:	bf00      	nop
900020ac:	90028b9c 	.word	0x90028b9c
900020b0:	90028b68 	.word	0x90028b68
900020b4:	90028b34 	.word	0x90028b34
900020b8:	90028b00 	.word	0x90028b00

900020bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
900020bc:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
900020be:	4c0c      	ldr	r4, [pc, #48]	; (900020f0 <__tcf_0+0x34>)
900020c0:	4a0c      	ldr	r2, [pc, #48]	; (900020f4 <__tcf_0+0x38>)
900020c2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
900020c6:	490c      	ldr	r1, [pc, #48]	; (900020f8 <__tcf_0+0x3c>)
900020c8:	480c      	ldr	r0, [pc, #48]	; (900020fc <__tcf_0+0x40>)
900020ca:	649a      	str	r2, [r3, #72]	; 0x48
900020cc:	6021      	str	r1, [r4, #0]
900020ce:	f010 fa5a 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020d2:	4620      	mov	r0, r4
900020d4:	4b0a      	ldr	r3, [pc, #40]	; (90002100 <__tcf_0+0x44>)
900020d6:	f840 3f2c 	str.w	r3, [r0, #44]!
900020da:	f010 fa54 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020de:	4620      	mov	r0, r4
900020e0:	4b08      	ldr	r3, [pc, #32]	; (90002104 <__tcf_0+0x48>)
        static FrontendHeap instance;
900020e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900020e6:	f840 3f14 	str.w	r3, [r0, #20]!
900020ea:	f010 ba4c 	b.w	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020ee:	bf00      	nop
900020f0:	24005be8 	.word	0x24005be8
900020f4:	90028b68 	.word	0x90028b68
900020f8:	90028b9c 	.word	0x90028b9c
900020fc:	24007c30 	.word	0x24007c30
90002100:	90028b34 	.word	0x90028b34
90002104:	90028b00 	.word	0x90028b00

90002108 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002108:	b510      	push	{r4, lr}
9000210a:	4604      	mov	r4, r0
9000210c:	4a0e      	ldr	r2, [pc, #56]	; (90002148 <_ZN12FrontendHeapD0Ev+0x40>)
9000210e:	490f      	ldr	r1, [pc, #60]	; (9000214c <_ZN12FrontendHeapD0Ev+0x44>)
90002110:	f242 0048 	movw	r0, #8264	; 0x2048
90002114:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
90002118:	6021      	str	r1, [r4, #0]
9000211a:	4420      	add	r0, r4
9000211c:	649a      	str	r2, [r3, #72]	; 0x48
9000211e:	f010 fa32 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002122:	4620      	mov	r0, r4
90002124:	4b0a      	ldr	r3, [pc, #40]	; (90002150 <_ZN12FrontendHeapD0Ev+0x48>)
90002126:	f840 3f2c 	str.w	r3, [r0, #44]!
9000212a:	f010 fa2c 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000212e:	4b09      	ldr	r3, [pc, #36]	; (90002154 <_ZN12FrontendHeapD0Ev+0x4c>)
90002130:	4620      	mov	r0, r4
90002132:	f840 3f14 	str.w	r3, [r0, #20]!
90002136:	f010 fa26 	bl	90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000213a:	4620      	mov	r0, r4
9000213c:	f242 2104 	movw	r1, #8708	; 0x2204
90002140:	f024 ffd9 	bl	900270f6 <_ZdlPvj>
90002144:	4620      	mov	r0, r4
90002146:	bd10      	pop	{r4, pc}
90002148:	90028b68 	.word	0x90028b68
9000214c:	90028b9c 	.word	0x90028b9c
90002150:	90028b34 	.word	0x90028b34
90002154:	90028b00 	.word	0x90028b00

90002158 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
90002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000215c:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
9000215e:	2400      	movs	r4, #0
90002160:	f002 febe 	bl	90004ee0 <_ZN14BitmapDatabase11getInstanceEv>
90002164:	4605      	mov	r5, r0
90002166:	f002 febf 	bl	90004ee8 <_ZN14BitmapDatabase15getInstanceSizeEv>
9000216a:	4623      	mov	r3, r4
9000216c:	4601      	mov	r1, r0
9000216e:	4622      	mov	r2, r4
90002170:	4628      	mov	r0, r5
90002172:	9400      	str	r4, [sp, #0]
90002174:	f018 fea8 	bl	9001aec8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002178:	4b28      	ldr	r3, [pc, #160]	; (9000221c <touchgfx_init+0xc4>)
9000217a:	4a29      	ldr	r2, [pc, #164]	; (90002220 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
9000217c:	4620      	mov	r0, r4
        static FrontendHeap instance;
9000217e:	4c29      	ldr	r4, [pc, #164]	; (90002224 <touchgfx_init+0xcc>)
90002180:	601a      	str	r2, [r3, #0]
90002182:	f005 fdd5 	bl	90007d30 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002186:	4828      	ldr	r0, [pc, #160]	; (90002228 <touchgfx_init+0xd0>)
90002188:	f018 fe06 	bl	9001ad98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000218c:	6823      	ldr	r3, [r4, #0]
9000218e:	f3bf 8f5b 	dmb	ish
90002192:	07db      	lsls	r3, r3, #31
90002194:	d505      	bpl.n	900021a2 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002196:	4825      	ldr	r0, [pc, #148]	; (9000222c <touchgfx_init+0xd4>)
}
90002198:	b002      	add	sp, #8
9000219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000219e:	f7fe bb9d 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
900021a2:	4620      	mov	r0, r4
900021a4:	f024 ffa9 	bl	900270fa <__cxa_guard_acquire>
900021a8:	2800      	cmp	r0, #0
900021aa:	d0f4      	beq.n	90002196 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
900021ac:	4d20      	ldr	r5, [pc, #128]	; (90002230 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
900021ae:	4f21      	ldr	r7, [pc, #132]	; (90002234 <touchgfx_init+0xdc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
900021b0:	4b21      	ldr	r3, [pc, #132]	; (90002238 <touchgfx_init+0xe0>)
        : presenterStorage(pres),
900021b2:	f105 0014 	add.w	r0, r5, #20
          frontendApplication(app)
900021b6:	f107 0660 	add.w	r6, r7, #96	; 0x60
          screenStorage(scr),
900021ba:	f105 082c 	add.w	r8, r5, #44	; 0x2c
900021be:	602b      	str	r3, [r5, #0]
          transitionStorage(tra),
900021c0:	60ef      	str	r7, [r5, #12]
        : presenterStorage(pres),
900021c2:	6068      	str	r0, [r5, #4]
          frontendApplication(app)
900021c4:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
900021c6:	f8c5 8008 	str.w	r8, [r5, #8]
900021ca:	f010 f9dd 	bl	90012588 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021ce:	4b1b      	ldr	r3, [pc, #108]	; (9000223c <touchgfx_init+0xe4>)
900021d0:	4640      	mov	r0, r8
900021d2:	616b      	str	r3, [r5, #20]
900021d4:	f010 f9d8 	bl	90012588 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021d8:	4b19      	ldr	r3, [pc, #100]	; (90002240 <touchgfx_init+0xe8>)
900021da:	4638      	mov	r0, r7
900021dc:	62eb      	str	r3, [r5, #44]	; 0x2c
900021de:	f010 f9d3 	bl	90012588 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021e2:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
900021e6:	4a17      	ldr	r2, [pc, #92]	; (90002244 <touchgfx_init+0xec>)
900021e8:	f103 0090 	add.w	r0, r3, #144	; 0x90
900021ec:	649a      	str	r2, [r3, #72]	; 0x48
900021ee:	f005 fe29 	bl	90007e44 <_ZN5ModelC1Ev>
900021f2:	462a      	mov	r2, r5
900021f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
900021f8:	4630      	mov	r0, r6
900021fa:	f005 fe0f 	bl	90007e1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
900021fe:	4630      	mov	r0, r6
90002200:	f003 fbb8 	bl	90005974 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002204:	4810      	ldr	r0, [pc, #64]	; (90002248 <touchgfx_init+0xf0>)
90002206:	f024 ffc3 	bl	90027190 <atexit>
9000220a:	4620      	mov	r0, r4
9000220c:	f024 ff81 	bl	90027112 <__cxa_guard_release>
90002210:	4806      	ldr	r0, [pc, #24]	; (9000222c <touchgfx_init+0xd4>)
}
90002212:	b002      	add	sp, #8
90002214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002218:	f7fe bb60 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
9000221c:	240281f8 	.word	0x240281f8
90002220:	24008c20 	.word	0x24008c20
90002224:	24005be4 	.word	0x24005be4
90002228:	24000020 	.word	0x24000020
9000222c:	24008b98 	.word	0x24008b98
90002230:	24005be8 	.word	0x24005be8
90002234:	24007c30 	.word	0x24007c30
90002238:	90028b9c 	.word	0x90028b9c
9000223c:	90028b00 	.word	0x90028b00
90002240:	90028b34 	.word	0x90028b34
90002244:	90028b68 	.word	0x90028b68
90002248:	900020bd 	.word	0x900020bd

9000224c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
9000224c:	4770      	bx	lr
9000224e:	bf00      	nop

90002250 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
90002250:	4801      	ldr	r0, [pc, #4]	; (90002258 <touchgfx_taskEntry+0x8>)
90002252:	f7fe bb09 	b.w	90000868 <_ZN11TouchGFXHAL9taskEntryEv>
90002256:	bf00      	nop
90002258:	24008b98 	.word	0x24008b98

9000225c <_GLOBAL__sub_I_touchgfx_init>:
}
9000225c:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
9000225e:	4b26      	ldr	r3, [pc, #152]	; (900022f8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
90002260:	4c26      	ldr	r4, [pc, #152]	; (900022fc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
90002262:	4e27      	ldr	r6, [pc, #156]	; (90002300 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
90002264:	4d27      	ldr	r5, [pc, #156]	; (90002304 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90002266:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
90002268:	4630      	mov	r0, r6
9000226a:	f7ff fe31 	bl	90001ed0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
9000226e:	4628      	mov	r0, r5
90002270:	f01b ff34 	bl	9001e0dc <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
90002274:	4b24      	ldr	r3, [pc, #144]	; (90002308 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
90002276:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002278:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000227c:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002280:	62da      	str	r2, [r3, #44]	; 0x2c
90002282:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
90002284:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
90002286:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
9000228a:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
9000228c:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002290:	4c1e      	ldr	r4, [pc, #120]	; (9000230c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002292:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002294:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002298:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
9000229a:	2401      	movs	r4, #1
9000229c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
900022a0:	4c1b      	ldr	r4, [pc, #108]	; (90002310 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
900022a2:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022a4:	4c1b      	ldr	r4, [pc, #108]	; (90002314 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
900022a6:	8020      	strh	r0, [r4, #0]
900022a8:	4c1b      	ldr	r4, [pc, #108]	; (90002318 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
900022aa:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022ae:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b0:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022b4:	4c19      	ldr	r4, [pc, #100]	; (9000231c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
900022b6:	481a      	ldr	r0, [pc, #104]	; (90002320 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b8:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
900022ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
900022be:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
900022c2:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
900022c6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
900022ca:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
900022ce:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
900022d2:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
900022d6:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022da:	8021      	strh	r1, [r4, #0]
900022dc:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
900022de:	4c11      	ldr	r4, [pc, #68]	; (90002324 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
900022e0:	4811      	ldr	r0, [pc, #68]	; (90002328 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
900022e2:	4912      	ldr	r1, [pc, #72]	; (9000232c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
900022e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900022e8:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
900022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
900022ee:	6018      	str	r0, [r3, #0]
          cc_in(0)
900022f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
900022f4:	67d9      	str	r1, [r3, #124]	; 0x7c
}
900022f6:	bd70      	pop	{r4, r5, r6, pc}
900022f8:	90028284 	.word	0x90028284
900022fc:	24007dec 	.word	0x24007dec
90002300:	24007df0 	.word	0x24007df0
90002304:	24008c24 	.word	0x24008c24
90002308:	24008b98 	.word	0x24008b98
9000230c:	01000001 	.word	0x01000001
90002310:	24028194 	.word	0x24028194
90002314:	24028188 	.word	0x24028188
90002318:	2402818e 	.word	0x2402818e
9000231c:	2402818a 	.word	0x2402818a
90002320:	24028190 	.word	0x24028190
90002324:	2402818c 	.word	0x2402818c
90002328:	90028414 	.word	0x90028414
9000232c:	9002825c 	.word	0x9002825c

90002330 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002330:	4801      	ldr	r0, [pc, #4]	; (90002338 <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002332:	f7ff bb7b 	b.w	90001a2c <_ZN8STM32DMAD1Ev>
90002336:	bf00      	nop
90002338:	24007df0 	.word	0x24007df0

9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
9000233c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002340:	b112      	cbz	r2, 90002348 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
90002342:	6803      	ldr	r3, [r0, #0]
90002344:	695b      	ldr	r3, [r3, #20]
90002346:	4718      	bx	r3
        }
    }
90002348:	4770      	bx	lr
9000234a:	bf00      	nop

9000234c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
9000234c:	2000      	movs	r0, #0
9000234e:	4770      	bx	lr

90002350 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
90002350:	8081      	strh	r1, [r0, #4]
    }
90002352:	4770      	bx	lr

90002354 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
90002354:	80c1      	strh	r1, [r0, #6]
    }
90002356:	4770      	bx	lr

90002358 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
90002358:	8101      	strh	r1, [r0, #8]
    }
9000235a:	4770      	bx	lr

9000235c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
9000235c:	8141      	strh	r1, [r0, #10]
    }
9000235e:	4770      	bx	lr

90002360 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
90002360:	4770      	bx	lr
90002362:	bf00      	nop

90002364 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
90002364:	4770      	bx	lr
90002366:	bf00      	nop

90002368 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
90002368:	4770      	bx	lr
9000236a:	bf00      	nop

9000236c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
9000236c:	4770      	bx	lr
9000236e:	bf00      	nop

90002370 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
90002370:	4770      	bx	lr
90002372:	bf00      	nop

90002374 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
90002374:	f8b0 c006 	ldrh.w	ip, [r0, #6]
90002378:	6803      	ldr	r3, [r0, #0]
9000237a:	eba2 020c 	sub.w	r2, r2, ip
9000237e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002384:	eba1 010c 	sub.w	r1, r1, ip
90002388:	b212      	sxth	r2, r2
9000238a:	b209      	sxth	r1, r1
9000238c:	4718      	bx	r3
9000238e:	bf00      	nop

90002390 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002390:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002392:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002396:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000239a:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000239e:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900023a2:	6010      	str	r0, [r2, #0]
    }
900023a4:	4770      	bx	lr
900023a6:	bf00      	nop

900023a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
900023a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900023ac:	b11a      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
900023ae:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
900023b2:	b102      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
900023b4:	6018      	str	r0, [r3, #0]
        }
    }
900023b6:	4770      	bx	lr

900023b8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
900023b8:	2000      	movs	r0, #0
900023ba:	4770      	bx	lr

900023bc <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
900023bc:	4603      	mov	r3, r0
    {
        widgetWidth = widgetRect.width;
900023be:	888a      	ldrh	r2, [r1, #4]
        return true;
    }
900023c0:	2001      	movs	r0, #1
        widgetWidth = widgetRect.width;
900023c2:	809a      	strh	r2, [r3, #4]
    }
900023c4:	4770      	bx	lr
900023c6:	bf00      	nop

900023c8 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
900023c8:	4770      	bx	lr
900023ca:	bf00      	nop

900023cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900023cc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
900023d0:	4770      	bx	lr
900023d2:	bf00      	nop

900023d4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
900023d4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
900023d8:	4770      	bx	lr
900023da:	bf00      	nop

900023dc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900023dc:	f04f 0c00 	mov.w	ip, #0
        return rect.width;
900023e0:	688a      	ldr	r2, [r1, #8]
900023e2:	f8c0 c000 	str.w	ip, [r0]
900023e6:	6042      	str	r2, [r0, #4]
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
900023e8:	4770      	bx	lr
900023ea:	bf00      	nop

900023ec <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
900023ec:	2200      	movs	r2, #0
900023ee:	6002      	str	r2, [r0, #0]
900023f0:	6042      	str	r2, [r0, #4]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900023f2:	4770      	bx	lr

900023f4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
900023f4:	2000      	movs	r0, #0
900023f6:	4770      	bx	lr

900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900023f8:	4b03      	ldr	r3, [pc, #12]	; (90002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
900023fa:	2290      	movs	r2, #144	; 0x90
900023fc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002400:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002404:	4770      	bx	lr
90002406:	bf00      	nop
90002408:	e000e100 	.word	0xe000e100

9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000240c:	4a09      	ldr	r2, [pc, #36]	; (90002434 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000240e:	490a      	ldr	r1, [pc, #40]	; (90002438 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002410:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002412:	480a      	ldr	r0, [pc, #40]	; (9000243c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002414:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002418:	3b01      	subs	r3, #1
9000241a:	b29b      	uxth	r3, r3
9000241c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000241e:	6911      	ldr	r1, [r2, #16]
90002420:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002424:	3901      	subs	r1, #1
90002426:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002428:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000242a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000242c:	f043 0301 	orr.w	r3, r3, #1
90002430:	6353      	str	r3, [r2, #52]	; 0x34
}
90002432:	4770      	bx	lr
90002434:	50001000 	.word	0x50001000
90002438:	24008ca0 	.word	0x24008ca0
9000243c:	24008c9e 	.word	0x24008c9e

90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002440:	4b01      	ldr	r3, [pc, #4]	; (90002448 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002442:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002446:	4770      	bx	lr
90002448:	50001000 	.word	0x50001000

9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000244c:	4b02      	ldr	r3, [pc, #8]	; (90002458 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000244e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002450:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002454:	625a      	str	r2, [r3, #36]	; 0x24
}
90002456:	4770      	bx	lr
90002458:	50001000 	.word	0x50001000

9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000245c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002460:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90002462:	4770      	bx	lr

90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002464:	4770      	bx	lr
90002466:	bf00      	nop

90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000246c:	4611      	mov	r1, r2
9000246e:	6840      	ldr	r0, [r0, #4]
90002470:	6803      	ldr	r3, [r0, #0]
90002472:	68db      	ldr	r3, [r3, #12]
90002474:	4718      	bx	r3
90002476:	bf00      	nop

90002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002478:	b510      	push	{r4, lr}
9000247a:	4604      	mov	r4, r0
9000247c:	2148      	movs	r1, #72	; 0x48
9000247e:	f024 fe3a 	bl	900270f6 <_ZdlPvj>
90002482:	4620      	mov	r0, r4
90002484:	bd10      	pop	{r4, pc}
90002486:	bf00      	nop

90002488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
90002488:	b911      	cbnz	r1, 90002490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
9000248a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
9000248e:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
90002490:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002492:	4a03      	ldr	r2, [pc, #12]	; (900024a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
90002494:	f44f 71b8 	mov.w	r1, #368	; 0x170
90002498:	4b02      	ldr	r3, [pc, #8]	; (900024a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
9000249a:	4803      	ldr	r0, [pc, #12]	; (900024a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
9000249c:	f024 fe5a 	bl	90027154 <__assert_func>
900024a0:	90028bbc 	.word	0x90028bbc
900024a4:	90028ba8 	.word	0x90028ba8
900024a8:	90028d48 	.word	0x90028d48

900024ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900024ac:	b921      	cbnz	r1, 900024b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900024ae:	6840      	ldr	r0, [r0, #4]
900024b0:	4611      	mov	r1, r2
900024b2:	6803      	ldr	r3, [r0, #0]
900024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024b6:	4718      	bx	r3
        assert(handle < no_streams);
900024b8:	4b03      	ldr	r3, [pc, #12]	; (900024c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900024ba:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900024be:	4a03      	ldr	r2, [pc, #12]	; (900024cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900024c0:	4803      	ldr	r0, [pc, #12]	; (900024d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900024c2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024c4:	f024 fe46 	bl	90027154 <__assert_func>
900024c8:	90028ba8 	.word	0x90028ba8
900024cc:	90028d8c 	.word	0x90028d8c
900024d0:	90028d48 	.word	0x90028d48

900024d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900024d4:	b909      	cbnz	r1, 900024da <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900024d6:	68c0      	ldr	r0, [r0, #12]
900024d8:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900024da:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900024dc:	4a02      	ldr	r2, [pc, #8]	; (900024e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900024de:	2179      	movs	r1, #121	; 0x79
900024e0:	4b02      	ldr	r3, [pc, #8]	; (900024ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
900024e2:	4803      	ldr	r0, [pc, #12]	; (900024f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
900024e4:	f024 fe36 	bl	90027154 <__assert_func>
900024e8:	90028f3c 	.word	0x90028f3c
900024ec:	90028ba8 	.word	0x90028ba8
900024f0:	90028d48 	.word	0x90028d48

900024f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
900024f4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024f6:	460c      	mov	r4, r1
900024f8:	b949      	cbnz	r1, 9000250e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
900024fa:	4611      	mov	r1, r2
900024fc:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
900024fe:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002500:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002502:	681c      	ldr	r4, [r3, #0]
90002504:	4618      	mov	r0, r3
90002506:	68a3      	ldr	r3, [r4, #8]
    }
90002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000250c:	4718      	bx	r3
        assert(handle < no_streams);
9000250e:	4b03      	ldr	r3, [pc, #12]	; (9000251c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002510:	2190      	movs	r1, #144	; 0x90
90002512:	4a03      	ldr	r2, [pc, #12]	; (90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002514:	4803      	ldr	r0, [pc, #12]	; (90002524 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002516:	f024 fe1d 	bl	90027154 <__assert_func>
9000251a:	bf00      	nop
9000251c:	90028ba8 	.word	0x90028ba8
90002520:	900290f0 	.word	0x900290f0
90002524:	90028d48 	.word	0x90028d48

90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002528:	b921      	cbnz	r1, 90002534 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000252a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000252e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002532:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002536:	4a03      	ldr	r2, [pc, #12]	; (90002544 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002538:	2182      	movs	r1, #130	; 0x82
9000253a:	4b03      	ldr	r3, [pc, #12]	; (90002548 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000253c:	4803      	ldr	r0, [pc, #12]	; (9000254c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000253e:	f024 fe09 	bl	90027154 <__assert_func>
90002542:	bf00      	nop
90002544:	900292cc 	.word	0x900292cc
90002548:	90028ba8 	.word	0x90028ba8
9000254c:	90028d48 	.word	0x90028d48

90002550 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002550:	f010 bafc 	b.w	90012b4c <_ZN8touchgfx3HAL10beginFrameEv>

90002554 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002554:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002558:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000255a:	b113      	cbz	r3, 90002562 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000255c:	4b1a      	ldr	r3, [pc, #104]	; (900025c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000255e:	2201      	movs	r2, #1
90002560:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90002562:	4c1a      	ldr	r4, [pc, #104]	; (900025cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002564:	f010 fafe 	bl	90012b64 <_ZN8touchgfx3HAL8endFrameEv>
90002568:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
9000256c:	b963      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000256e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
90002572:	b94b      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
90002574:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
9000257c:	f00c fa1c 	bl	9000e9b8 <osSemaphoreRelease>
        if (uiHasMutex)
90002580:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
90002584:	b9cb      	cbnz	r3, 900025ba <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
90002586:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
90002588:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
9000258c:	69e1      	ldr	r1, [r4, #28]
9000258e:	6922      	ldr	r2, [r4, #16]
90002590:	fb00 f303 	mul.w	r3, r0, r3
90002594:	fb01 f202 	mul.w	r2, r1, r2
90002598:	4293      	cmp	r3, r2
9000259a:	d3eb      	bcc.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
9000259c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900025a0:	b138      	cbz	r0, 900025b2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900025a2:	1a9b      	subs	r3, r3, r2
900025a4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900025a8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900025aa:	bf98      	it	ls
900025ac:	f102 32ff 	addls.w	r2, r2, #4294967295
900025b0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900025b2:	2301      	movs	r3, #1
900025b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900025b8:	e7dc      	b.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900025ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
900025bc:	f00c f956 	bl	9000e86c <osMutexRelease>
            uiHasMutex = false;
900025c0:	2300      	movs	r3, #0
900025c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900025c6:	bd10      	pop	{r4, pc}
900025c8:	24008c9c 	.word	0x24008c9c
900025cc:	24008cec 	.word	0x24008cec

900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900025d0:	f010 ba86 	b.w	90012ae0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900025d4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900025d4:	f010 bbe1 	b.w	90012d9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900025d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900025d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900025dc:	b903      	cbnz	r3, 900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900025de:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900025e0:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900025e2:	f04f 31ff 	mov.w	r1, #4294967295
900025e6:	4604      	mov	r4, r0
900025e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
900025ea:	f00c f91b 	bl	9000e824 <osMutexAcquire>
            firstDrawThisFrame = false;
900025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
900025f2:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
900025f6:	bd10      	pop	{r4, pc}

900025f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
900025f8:	b538      	push	{r3, r4, r5, lr}
900025fa:	460c      	mov	r4, r1
900025fc:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
900025fe:	f04f 31ff 	mov.w	r1, #4294967295
90002602:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002604:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002608:	f00c f90c 	bl	9000e824 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000260c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000260e:	f00c f92d 	bl	9000e86c <osMutexRelease>
        streams[handle].isActive = false;
90002612:	2300      	movs	r3, #0
90002614:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002618:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000261c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002620:	b90b      	cbnz	r3, 90002626 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002624:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002626:	bd38      	pop	{r3, r4, r5, pc}

90002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002628:	4814      	ldr	r0, [pc, #80]	; (9000267c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000262a:	6943      	ldr	r3, [r0, #20]
9000262c:	03d9      	lsls	r1, r3, #15
9000262e:	d523      	bpl.n	90002678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002630:	2300      	movs	r3, #0
{
90002632:	b510      	push	{r4, lr}
90002634:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002638:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000263c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002640:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002644:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002648:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000264c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002650:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002654:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002656:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000265a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000265c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002660:	1c5a      	adds	r2, r3, #1
90002662:	d1f8      	bne.n	90002656 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002664:	f1ac 0c20 	sub.w	ip, ip, #32
90002668:	f11c 0f20 	cmn.w	ip, #32
9000266c:	d1f0      	bne.n	90002650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000266e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002672:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90002676:	bd10      	pop	{r4, pc}
90002678:	4770      	bx	lr
9000267a:	bf00      	nop
9000267c:	e000ed00 	.word	0xe000ed00

90002680 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
90002680:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002682:	2900      	cmp	r1, #0
90002684:	d133      	bne.n	900026ee <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
90002686:	4604      	mov	r4, r0
        switch (cmd)
90002688:	2a05      	cmp	r2, #5
9000268a:	d809      	bhi.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
9000268c:	e8df f002 	tbb	[pc, r2]
90002690:	27221e0f 	.word	0x27221e0f
90002694:	0903      	.short	0x0903
            stream.isPlaying = false;
90002696:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002698:	2301      	movs	r3, #1
            stream.isPlaying = false;
9000269a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
9000269e:	6203      	str	r3, [r0, #32]
    }
900026a0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900026a2:	3b00      	subs	r3, #0
900026a4:	bf18      	it	ne
900026a6:	2301      	movne	r3, #1
900026a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900026ac:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900026ae:	6840      	ldr	r0, [r0, #4]
900026b0:	6803      	ldr	r3, [r0, #0]
900026b2:	691b      	ldr	r3, [r3, #16]
900026b4:	4798      	blx	r3
900026b6:	2800      	cmp	r0, #0
900026b8:	d0f2      	beq.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900026ba:	2201      	movs	r2, #1
                stream.frameCount = 0;
900026bc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900026be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900026c2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900026c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900026ca:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900026cc:	2300      	movs	r3, #0
900026ce:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900026d2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026d4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900026d6:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
900026d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026dc:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026de:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
900026e0:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
900026e2:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
900026e4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
900026e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026ec:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
900026ee:	4b03      	ldr	r3, [pc, #12]	; (900026fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
900026f0:	21a2      	movs	r1, #162	; 0xa2
900026f2:	4a03      	ldr	r2, [pc, #12]	; (90002700 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
900026f4:	4803      	ldr	r0, [pc, #12]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
900026f6:	f024 fd2d 	bl	90027154 <__assert_func>
900026fa:	bf00      	nop
900026fc:	90028ba8 	.word	0x90028ba8
90002700:	90029488 	.word	0x90029488
90002704:	90028d48 	.word	0x90028d48

90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002708:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000270a:	bb39      	cbnz	r1, 9000275c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000270c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002710:	4604      	mov	r4, r0
90002712:	b923      	cbnz	r3, 9000271e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002714:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002718:	b963      	cbnz	r3, 90002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000271a:	2001      	movs	r0, #1
    }
9000271c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000271e:	4912      	ldr	r1, [pc, #72]	; (90002768 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002720:	6943      	ldr	r3, [r0, #20]
90002722:	6809      	ldr	r1, [r1, #0]
90002724:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002728:	440b      	add	r3, r1
9000272a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000272c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002730:	2b00      	cmp	r3, #0
90002732:	d0f2      	beq.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002734:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002736:	4610      	mov	r0, r2
90002738:	6813      	ldr	r3, [r2, #0]
9000273a:	695b      	ldr	r3, [r3, #20]
9000273c:	6311      	str	r1, [r2, #48]	; 0x30
9000273e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002740:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002742:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002746:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000274a:	2800      	cmp	r0, #0
9000274c:	d1e5      	bne.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000274e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002752:	2b00      	cmp	r3, #0
90002754:	d1e2      	bne.n	9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002756:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000275a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000275c:	4b03      	ldr	r3, [pc, #12]	; (9000276c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000275e:	21d0      	movs	r1, #208	; 0xd0
90002760:	4a03      	ldr	r2, [pc, #12]	; (90002770 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90002762:	4804      	ldr	r0, [pc, #16]	; (90002774 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002764:	f024 fcf6 	bl	90027154 <__assert_func>
90002768:	24028194 	.word	0x24028194
9000276c:	90028ba8 	.word	0x90028ba8
90002770:	9002965c 	.word	0x9002965c
90002774:	90028d48 	.word	0x90028d48

90002778 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90002778:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
9000277c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000277e:	b9fb      	cbnz	r3, 900027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
90002780:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
90002782:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
90002784:	60c3      	str	r3, [r0, #12]
90002786:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
9000278a:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
9000278e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
90002792:	6103      	str	r3, [r0, #16]
90002794:	6143      	str	r3, [r0, #20]
90002796:	6183      	str	r3, [r0, #24]
90002798:	61c3      	str	r3, [r0, #28]
9000279a:	6203      	str	r3, [r0, #32]
9000279c:	6243      	str	r3, [r0, #36]	; 0x24
9000279e:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900027a2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900027a6:	4432      	add	r2, r6
900027a8:	4294      	cmp	r4, r2
900027aa:	d810      	bhi.n	900027ce <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900027ac:	4a0b      	ldr	r2, [pc, #44]	; (900027dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900027ae:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900027b0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900027b2:	4618      	mov	r0, r3
        format = bufferFormat;
900027b4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900027b8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900027bc:	630b      	str	r3, [r1, #48]	; 0x30
900027be:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900027c0:	4b07      	ldr	r3, [pc, #28]	; (900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900027c2:	f240 11c5 	movw	r1, #453	; 0x1c5
900027c6:	4a07      	ldr	r2, [pc, #28]	; (900027e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900027c8:	4807      	ldr	r0, [pc, #28]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027ca:	f024 fcc3 	bl	90027154 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900027ce:	4b07      	ldr	r3, [pc, #28]	; (900027ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900027d0:	2152      	movs	r1, #82	; 0x52
900027d2:	4a07      	ldr	r2, [pc, #28]	; (900027f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900027d4:	4804      	ldr	r0, [pc, #16]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027d6:	f024 fcbd 	bl	90027154 <__assert_func>
900027da:	bf00      	nop
900027dc:	012001e0 	.word	0x012001e0
900027e0:	900297fc 	.word	0x900297fc
900027e4:	9002982c 	.word	0x9002982c
900027e8:	90028d48 	.word	0x90028d48
900027ec:	900299b4 	.word	0x900299b4
900027f0:	900299f0 	.word	0x900299f0

900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900027f4:	4b08      	ldr	r3, [pc, #32]	; (90002818 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
900027f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900027fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900027fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002802:	f3bf 8f6f 	isb	sy
90002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000280a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000280e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002812:	f3bf 8f6f 	isb	sy
}
90002816:	4770      	bx	lr
90002818:	e000e100 	.word	0xe000e100

9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000281c:	4b03      	ldr	r3, [pc, #12]	; (9000282c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000281e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002822:	609a      	str	r2, [r3, #8]
90002824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002828:	609a      	str	r2, [r3, #8]
}
9000282a:	4770      	bx	lr
9000282c:	e000e100 	.word	0xe000e100

90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002830:	b538      	push	{r3, r4, r5, lr}
90002832:	4604      	mov	r4, r0
    HAL::initialize();
90002834:	f010 f9a3 	bl	90012b7e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002838:	6823      	ldr	r3, [r4, #0]
9000283a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000283c:	f015 f9de 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90002840:	4601      	mov	r1, r0
90002842:	4620      	mov	r0, r4
90002844:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002846:	6823      	ldr	r3, [r4, #0]
90002848:	4a16      	ldr	r2, [pc, #88]	; (900028a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000284a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000284e:	4295      	cmp	r5, r2
90002850:	d11c      	bne.n	9000288c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002852:	4a15      	ldr	r2, [pc, #84]	; (900028a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002854:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000285a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000285e:	4813      	ldr	r0, [pc, #76]	; (900028ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002860:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002864:	4a12      	ldr	r2, [pc, #72]	; (900028b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002866:	7005      	strb	r5, [r0, #0]
90002868:	4293      	cmp	r3, r2
9000286a:	d116      	bne.n	9000289a <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000286c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000286e:	4a11      	ldr	r2, [pc, #68]	; (900028b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002870:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002872:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
90002874:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90002876:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
9000287a:	4b0f      	ldr	r3, [pc, #60]	; (900028b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
9000287c:	490f      	ldr	r1, [pc, #60]	; (900028bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
9000287e:	4a10      	ldr	r2, [pc, #64]	; (900028c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
90002880:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
90002882:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
90002884:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
90002886:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
9000288a:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000288c:	4a0d      	ldr	r2, [pc, #52]	; (900028c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
9000288e:	2300      	movs	r3, #0
90002890:	4620      	mov	r0, r4
90002892:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
90002896:	47a8      	blx	r5
90002898:	e7ec      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
9000289a:	2100      	movs	r1, #0
9000289c:	4620      	mov	r0, r4
9000289e:	4798      	blx	r3
900028a0:	e7e8      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900028a2:	bf00      	nop
900028a4:	90000811 	.word	0x90000811
900028a8:	d003fc00 	.word	0xd003fc00
900028ac:	24028192 	.word	0x24028192
900028b0:	90000695 	.word	0x90000695
900028b4:	24028193 	.word	0x24028193
900028b8:	24008cec 	.word	0x24008cec
900028bc:	24008ca4 	.word	0x24008ca4
900028c0:	d00bf400 	.word	0xd00bf400
900028c4:	d007f800 	.word	0xd007f800

900028c8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900028c8:	b510      	push	{r4, lr}
        return instance;
900028ca:	4c14      	ldr	r4, [pc, #80]	; (9000291c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900028cc:	6823      	ldr	r3, [r4, #0]
900028ce:	b323      	cbz	r3, 9000291a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900028d0:	4b13      	ldr	r3, [pc, #76]	; (90002920 <HAL_LTDC_LineEventCallback+0x58>)
900028d2:	4a14      	ldr	r2, [pc, #80]	; (90002924 <HAL_LTDC_LineEventCallback+0x5c>)
900028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900028d6:	8811      	ldrh	r1, [r2, #0]
900028d8:	428b      	cmp	r3, r1
900028da:	d00a      	beq.n	900028f2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
900028dc:	f009 fc0a 	bl	9000c0f4 <HAL_LTDC_ProgramLineEvent>
900028e0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
900028e2:	6803      	ldr	r3, [r0, #0]
900028e4:	6a1b      	ldr	r3, [r3, #32]
900028e6:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
900028e8:	2000      	movs	r0, #0
        }
    }
900028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
900028ee:	f7fd be75 	b.w	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
900028f2:	4b0d      	ldr	r3, [pc, #52]	; (90002928 <HAL_LTDC_LineEventCallback+0x60>)
900028f4:	8819      	ldrh	r1, [r3, #0]
900028f6:	f009 fbfd 	bl	9000c0f4 <HAL_LTDC_ProgramLineEvent>
        return instance;
900028fa:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
900028fc:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002900:	3301      	adds	r3, #1
90002902:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002906:	f7ff f86b 	bl	900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000290a:	6820      	ldr	r0, [r4, #0]
9000290c:	f010 fe8a 	bl	90013624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002910:	2000      	movs	r0, #0
    }
90002912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002916:	f7fd be2d 	b.w	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000291a:	bd10      	pop	{r4, pc}
9000291c:	24028194 	.word	0x24028194
90002920:	50001000 	.word	0x50001000
90002924:	24008ca0 	.word	0x24008ca0
90002928:	24008c9e 	.word	0x24008c9e

9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900029ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002934:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002936:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002938:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000293c:	4604      	mov	r4, r0
9000293e:	e024      	b.n	9000298a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002940:	682b      	ldr	r3, [r5, #0]
90002942:	4628      	mov	r0, r5
90002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002946:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002948:	2300      	movs	r3, #0
9000294a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000294c:	6829      	ldr	r1, [r5, #0]
9000294e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002952:	9700      	str	r7, [sp, #0]
90002954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002958:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000295c:	4628      	mov	r0, r5
9000295e:	68a1      	ldr	r1, [r4, #8]
90002960:	47c8      	blx	r9
                    stream.frameCount++;
90002962:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002964:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002968:	3301      	adds	r3, #1
9000296a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000296c:	2800      	cmp	r0, #0
9000296e:	d033      	beq.n	900029d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002970:	682b      	ldr	r3, [r5, #0]
90002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002974:	4543      	cmp	r3, r8
90002976:	d131      	bne.n	900029dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90002978:	6968      	ldr	r0, [r5, #20]
9000297a:	3801      	subs	r0, #1
                    stream.doDecode = false;
9000297c:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000297e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002980:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002984:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002986:	f00b ff71 	bl	9000e86c <osMutexRelease>
            SEM_WAIT(semDecode);
9000298a:	f04f 31ff 	mov.w	r1, #4294967295
9000298e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002990:	f00b ffde 	bl	9000e950 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002994:	f04f 31ff 	mov.w	r1, #4294967295
90002998:	6c60      	ldr	r0, [r4, #68]	; 0x44
9000299a:	f00b ff43 	bl	9000e824 <osMutexAcquire>
                if (stream.doDecode)
9000299e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900029a2:	2b00      	cmp	r3, #0
900029a4:	d0ee      	beq.n	90002984 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900029a6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900029a8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900029aa:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900029ae:	2900      	cmp	r1, #0
900029b0:	d1c6      	bne.n	90002940 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900029b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029b4:	2b00      	cmp	r3, #0
900029b6:	d0c9      	beq.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029b8:	682a      	ldr	r2, [r5, #0]
900029ba:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900029be:	4541      	cmp	r1, r8
900029c0:	d10f      	bne.n	900029e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900029c2:	6968      	ldr	r0, [r5, #20]
900029c4:	18c1      	adds	r1, r0, r3
900029c6:	4628      	mov	r0, r5
900029c8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900029ca:	6923      	ldr	r3, [r4, #16]
900029cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900029ce:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900029d0:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900029d2:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900029d4:	6123      	str	r3, [r4, #16]
900029d6:	e7b9      	b.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
900029d8:	2001      	movs	r0, #1
900029da:	e7cf      	b.n	9000297c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900029dc:	4628      	mov	r0, r5
900029de:	4798      	blx	r3
900029e0:	e7cb      	b.n	9000297a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029e2:	4628      	mov	r0, r5
900029e4:	4788      	blx	r1
900029e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029e8:	e7ec      	b.n	900029c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
900029ea:	bf00      	nop
900029ec:	90000989 	.word	0x90000989

900029f0 <videoTaskFunc>:
    videoController.decoderTaskEntry();
900029f0:	4801      	ldr	r0, [pc, #4]	; (900029f8 <videoTaskFunc+0x8>)
{
900029f2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
900029f4:	f7ff ff9a 	bl	9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
900029f8:	24008cec 	.word	0x24008cec

900029fc <_GLOBAL__sub_I_mjpegdecoder1>:
}
900029fc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
900029fe:	4815      	ldr	r0, [pc, #84]	; (90002a54 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a00:	2500      	movs	r5, #0
90002a02:	f7fe fbd3 	bl	900011ac <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a06:	4c14      	ldr	r4, [pc, #80]	; (90002a58 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002a08:	4914      	ldr	r1, [pc, #80]	; (90002a5c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002a0e:	462a      	mov	r2, r5
90002a10:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a12:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a14:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a16:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a18:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a1a:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002a1c:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a1e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a22:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a24:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002a2c:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002a30:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a34:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a38:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a40:	f00b ff36 	bl	9000e8b0 <osSemaphoreNew>
90002a44:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002a46:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002a48:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002a4a:	f00b feab 	bl	9000e7a4 <osMutexNew>
90002a4e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002a50:	bd38      	pop	{r3, r4, r5, pc}
90002a52:	bf00      	nop
90002a54:	24008ca4 	.word	0x24008ca4
90002a58:	24008cec 	.word	0x24008cec
90002a5c:	90029bbc 	.word	0x90029bbc

90002a60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a64:	4c7e      	ldr	r4, [pc, #504]	; (90002c60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002a66:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a68:	fba4 4303 	umull	r4, r3, r4, r3
{
90002a6c:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a6e:	0a19      	lsrs	r1, r3, #8
{
90002a70:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002a72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
90002a76:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a78:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002a7c:	4293      	cmp	r3, r2
90002a7e:	930b      	str	r3, [sp, #44]	; 0x2c
90002a80:	f240 80e9 	bls.w	90002c56 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002a84:	4b77      	ldr	r3, [pc, #476]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002a86:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002c74 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
90002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002a8c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002c78 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
90002a90:	930a      	str	r3, [sp, #40]	; 0x28
90002a92:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
90002a94:	f04f 0e02 	mov.w	lr, #2
90002a98:	9908      	ldr	r1, [sp, #32]
90002a9a:	f502 7080 	add.w	r0, r2, #256	; 0x100
90002a9e:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa0:	3101      	adds	r1, #1
    currentMCU++;
90002aa2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
90002aa8:	9108      	str	r1, [sp, #32]
90002aaa:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002aae:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ab2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
90002ab6:	005b      	lsls	r3, r3, #1
90002ab8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002abc:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002abe:	e009      	b.n	90002ad4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ac0:	9b01      	ldr	r3, [sp, #4]
90002ac2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ac6:	d30f      	bcc.n	90002ae8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002ac8:	f1be 0f10 	cmp.w	lr, #16
90002acc:	f000 80b6 	beq.w	90002c3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002ad0:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002ad4:	f1be 0f0a 	cmp.w	lr, #10
90002ad8:	d1f2      	bne.n	90002ac0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002ada:	9b06      	ldr	r3, [sp, #24]
90002adc:	3380      	adds	r3, #128	; 0x80
90002ade:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ae0:	9b01      	ldr	r3, [sp, #4]
90002ae2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ae6:	d2f3      	bcs.n	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002ae8:	9a01      	ldr	r2, [sp, #4]
90002aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002aec:	f8cd e01c 	str.w	lr, [sp, #28]
90002af0:	4413      	add	r3, r2
90002af2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002af6:	f103 0c10 	add.w	ip, r3, #16
90002afa:	3330      	adds	r3, #48	; 0x30
90002afc:	4696      	mov	lr, r2
90002afe:	9102      	str	r1, [sp, #8]
90002b00:	9305      	str	r3, [sp, #20]
90002b02:	9b02      	ldr	r3, [sp, #8]
90002b04:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002b08:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002b0c:	4674      	mov	r4, lr
90002b0e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b10:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002b14:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b16:	4954      	ldr	r1, [pc, #336]	; (90002c68 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002b18:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b1a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002b1e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b20:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002b24:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b26:	4951      	ldr	r1, [pc, #324]	; (90002c6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002b28:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b30:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b34:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b36:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b38:	4b4d      	ldr	r3, [pc, #308]	; (90002c70 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002b3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b3e:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b42:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b46:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b48:	eb03 0b02 	add.w	fp, r3, r2
90002b4c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b50:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b52:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b56:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b5a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b5e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b62:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002b66:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002b6a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002b6e:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002b72:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b76:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b7a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b7e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b80:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b84:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b88:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002b8c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b90:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b94:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b98:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b9c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ba0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ba4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ba8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bb0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bb2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bb6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bba:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002bbe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bc2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bc6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002bca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002bce:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002bd2:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002bd6:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bd8:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bda:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bdc:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bde:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002be2:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002bea:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bee:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bf2:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002bf6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002bfa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002bfe:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002c02:	d185      	bne.n	90002b10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002c04:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c06:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002c0a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002c0e:	3304      	adds	r3, #4
90002c10:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c12:	9b05      	ldr	r3, [sp, #20]
90002c14:	4563      	cmp	r3, ip
90002c16:	f47f af74 	bne.w	90002b02 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002c1a:	9b04      	ldr	r3, [sp, #16]
90002c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002c20:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002c22:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002c26:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002c28:	9b03      	ldr	r3, [sp, #12]
90002c2a:	f103 0310 	add.w	r3, r3, #16
90002c2e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002c30:	9b01      	ldr	r3, [sp, #4]
90002c32:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002c36:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002c38:	f47f af4a 	bne.w	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c3c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c3e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002c44:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002c48:	4293      	cmp	r3, r2
90002c4a:	f47f af22 	bne.w	90002a92 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002c4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002c52:	4a04      	ldr	r2, [pc, #16]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002c54:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002c56:	ee17 0a90 	vmov	r0, s15
90002c5a:	b00d      	add	sp, #52	; 0x34
90002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002c60:	aaaaaaab 	.word	0xaaaaaaab
90002c64:	2400b9b4 	.word	0x2400b9b4
90002c68:	24009d34 	.word	0x24009d34
90002c6c:	24009934 	.word	0x24009934
90002c70:	2400a534 	.word	0x2400a534
90002c74:	2400a134 	.word	0x2400a134
90002c78:	90029bf4 	.word	0x90029bf4

90002c7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c80:	0a1c      	lsrs	r4, r3, #8
{
90002c82:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002c84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c88:	ee07 4a90 	vmov	s15, r4
{
90002c8c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002c8e:	429a      	cmp	r2, r3
{
90002c90:	9007      	str	r0, [sp, #28]
90002c92:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002c94:	930b      	str	r3, [sp, #44]	; 0x2c
90002c96:	f080 814a 	bcs.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c9a:	4ba7      	ldr	r3, [pc, #668]	; (90002f38 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002c9c:	4da7      	ldr	r5, [pc, #668]	; (90002f3c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002ca0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002f40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002ca4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ca8:	691b      	ldr	r3, [r3, #16]
90002caa:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002f44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002cae:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002f48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002cb2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002f4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cb6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cb8:	9301      	str	r3, [sp, #4]
90002cba:	e008      	b.n	90002cce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cbc:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002cc4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cc6:	9b08      	ldr	r3, [sp, #32]
90002cc8:	4293      	cmp	r3, r2
90002cca:	f000 8130 	beq.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cce:	9a07      	ldr	r2, [sp, #28]
90002cd0:	9908      	ldr	r1, [sp, #32]
90002cd2:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002cd6:	010b      	lsls	r3, r1, #4
90002cd8:	3101      	adds	r1, #1
    currentMCU++;
90002cda:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cde:	980a      	ldr	r0, [sp, #40]	; 0x28
90002ce0:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ce2:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002ce4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002ce8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cec:	fb01 f202 	mul.w	r2, r1, r2
90002cf0:	005b      	lsls	r3, r3, #1
90002cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002cf6:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002cf8:	2308      	movs	r3, #8
90002cfa:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
90002d00:	4293      	cmp	r3, r2
90002d02:	d9db      	bls.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002d06:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002d08:	9a03      	ldr	r2, [sp, #12]
90002d0a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002d0e:	9a02      	ldr	r2, [sp, #8]
90002d10:	f103 0020 	add.w	r0, r3, #32
90002d14:	3204      	adds	r2, #4
90002d16:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d18:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002d1c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d1e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002d22:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d24:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002d28:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002d2a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d2e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d32:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d34:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002d38:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d3c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d3e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d40:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d44:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d48:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d4c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d50:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d56:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d5a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d5e:	08e4      	lsrs	r4, r4, #3
90002d60:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d64:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d68:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d6c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002d70:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d74:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d76:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d78:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d82:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d86:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d88:	08c0      	lsrs	r0, r0, #3
90002d8a:	08a4      	lsrs	r4, r4, #2
90002d8c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d90:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d94:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d98:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d9c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002da0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002da4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002da8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dac:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dae:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002db2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002db6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002db8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dba:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dbe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dc6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dca:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dcc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dd0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002dd4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002dd8:	08e4      	lsrs	r4, r4, #3
90002dda:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dde:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002de2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002de6:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002dea:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dee:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002dfc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e00:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e02:	08c0      	lsrs	r0, r0, #3
90002e04:	08a4      	lsrs	r4, r4, #2
90002e06:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e0a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e0e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e12:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e16:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002e1a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e1e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e22:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e26:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e2a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e2c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e30:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e32:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e34:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e38:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e3c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e40:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e44:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e46:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e4a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002e4e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e52:	08e4      	lsrs	r4, r4, #3
90002e54:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e58:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e5c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e60:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002e64:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e68:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e6c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e72:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e76:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e7a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e7c:	08c0      	lsrs	r0, r0, #3
90002e7e:	08a4      	lsrs	r4, r4, #2
90002e80:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e84:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e88:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e8c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e90:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e94:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002e98:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e9c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ea0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ea2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002ea6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eaa:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eac:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eae:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eb2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eb6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eba:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ebe:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ec0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ec4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ec8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ecc:	08e4      	lsrs	r4, r4, #3
90002ece:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ed2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ed6:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002eda:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002ede:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ee2:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee4:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ee6:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eec:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002ef0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ef4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ef6:	08c0      	lsrs	r0, r0, #3
90002ef8:	08a4      	lsrs	r4, r4, #2
90002efa:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002efe:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002f02:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002f06:	9804      	ldr	r0, [sp, #16]
90002f08:	4283      	cmp	r3, r0
90002f0a:	f47f af05 	bne.w	90002d18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002f0e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f10:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002f12:	3308      	adds	r3, #8
90002f14:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002f16:	9b03      	ldr	r3, [sp, #12]
90002f18:	3308      	adds	r3, #8
90002f1a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f1c:	9b00      	ldr	r3, [sp, #0]
90002f1e:	4413      	add	r3, r2
90002f20:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002f22:	9b05      	ldr	r3, [sp, #20]
90002f24:	3b01      	subs	r3, #1
90002f26:	9305      	str	r3, [sp, #20]
90002f28:	f47f aee8 	bne.w	90002cfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002f2c:	e6c6      	b.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002f2e:	ee17 0a90 	vmov	r0, s15
90002f32:	b00d      	add	sp, #52	; 0x34
90002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002f38:	2400b9b4 	.word	0x2400b9b4
90002f3c:	24009934 	.word	0x24009934
90002f40:	2400a534 	.word	0x2400a534
90002f44:	2400a134 	.word	0x2400a134
90002f48:	24009d34 	.word	0x24009d34
90002f4c:	90029bf4 	.word	0x90029bf4

90002f50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f54:	4cb6      	ldr	r4, [pc, #728]	; (90003230 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002f56:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f58:	fba4 4303 	umull	r4, r3, r4, r3
{
90002f5c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f5e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002f60:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f64:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002f68:	429a      	cmp	r2, r3
90002f6a:	9306      	str	r3, [sp, #24]
{
90002f6c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f70:	f080 8158 	bcs.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f74:	4baf      	ldr	r3, [pc, #700]	; (90003234 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f76:	4cb0      	ldr	r4, [pc, #704]	; (90003238 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f7a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003240 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f7e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f82:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f84:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003244 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f88:	48ac      	ldr	r0, [pc, #688]	; (9000323c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002f8a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003248 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f8e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f90:	9300      	str	r3, [sp, #0]
90002f92:	e007      	b.n	90002fa4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002f94:	9b04      	ldr	r3, [sp, #16]
90002f96:	33c0      	adds	r3, #192	; 0xc0
90002f98:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f9a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002f9e:	4293      	cmp	r3, r2
90002fa0:	f000 8140 	beq.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fa4:	9e05      	ldr	r6, [sp, #20]
90002fa6:	9f07      	ldr	r7, [sp, #28]
90002fa8:	00f2      	lsls	r2, r6, #3
90002faa:	3601      	adds	r6, #1
90002fac:	9904      	ldr	r1, [sp, #16]
90002fae:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fb0:	9e03      	ldr	r6, [sp, #12]
90002fb2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fb6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002fba:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fbe:	fb06 f505 	mul.w	r5, r6, r5
90002fc2:	0052      	lsls	r2, r2, #1
90002fc4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002fc8:	2508      	movs	r5, #8
90002fca:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002fcc:	9d00      	ldr	r5, [sp, #0]
90002fce:	4295      	cmp	r5, r2
90002fd0:	d9e0      	bls.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd2:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002fd6:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fd8:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002fdc:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002fde:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe2:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002fea:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fec:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ffe:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003002:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003006:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003008:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000300c:	08ed      	lsrs	r5, r5, #3
9000300e:	08bf      	lsrs	r7, r7, #2
90003010:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90003014:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003016:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000301c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003020:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003024:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003028:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000302c:	4425      	add	r5, r4
9000302e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003032:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003036:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000303c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003040:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003044:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003048:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000304c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000304e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90003052:	08ed      	lsrs	r5, r5, #3
90003054:	08bf      	lsrs	r7, r7, #2
90003056:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000305a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000305c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90003060:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90003062:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003064:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003068:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000306c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000306e:	4427      	add	r7, r4
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003074:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003080:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003084:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000308c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900030c4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003104:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003108:	4427      	add	r7, r4
9000310a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003140:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003144:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003148:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000314c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000314e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003152:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003156:	44b9      	add	r9, r7
90003158:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000315c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003160:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003164:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003168:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000316a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000316c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003170:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90003174:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003178:	08fe      	lsrs	r6, r7, #3
9000317a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000317e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003182:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003186:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003188:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000318c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90003190:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003194:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003198:	4427      	add	r7, r4
9000319a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000319e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031a2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031a6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031a8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031aa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031b0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031b4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031b8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031bc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900031c0:	08fe      	lsrs	r6, r7, #3
900031c2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900031c6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900031ca:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900031ce:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900031d0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031d4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900031d8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900031e0:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031e2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031e6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031ea:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ee:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031f0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031f2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031f4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031f8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031fc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003200:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003204:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003208:	08fe      	lsrs	r6, r7, #3
9000320a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000320e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003212:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003216:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003218:	9d01      	ldr	r5, [sp, #4]
9000321a:	3d01      	subs	r5, #1
9000321c:	9501      	str	r5, [sp, #4]
9000321e:	f47f aed5 	bne.w	90002fcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003222:	e6b7      	b.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003224:	ee17 0a90 	vmov	r0, s15
90003228:	b009      	add	sp, #36	; 0x24
9000322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000322e:	bf00      	nop
90003230:	aaaaaaab 	.word	0xaaaaaaab
90003234:	2400b9b4 	.word	0x2400b9b4
90003238:	90029bf4 	.word	0x90029bf4
9000323c:	2400a134 	.word	0x2400a134
90003240:	2400a534 	.word	0x2400a534
90003244:	24009934 	.word	0x24009934
90003248:	24009d34 	.word	0x24009d34

9000324c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003250:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003254:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003256:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003258:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000325c:	f080 8088 	bcs.w	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003260:	4b45      	ldr	r3, [pc, #276]	; (90003378 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003262:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003266:	691e      	ldr	r6, [r3, #16]
90003268:	e003      	b.n	90003272 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000326a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000326c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003270:	d07e      	beq.n	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003272:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90003274:	4604      	mov	r4, r0
90003276:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000327a:	3201      	adds	r2, #1
9000327c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003280:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003284:	fb08 f505 	mul.w	r5, r8, r5
90003288:	005b      	lsls	r3, r3, #1
9000328a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000328e:	429e      	cmp	r6, r3
90003290:	d9eb      	bls.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90003292:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90003296:	18cd      	adds	r5, r1, r3
          pLum++;
90003298:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000329a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000329e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ae:	ea47 070c 	orr.w	r7, r7, ip
900032b2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900032b4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900032b6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ba:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032c2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032c6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ca:	ea47 070c 	orr.w	r7, r7, ip
900032ce:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900032d0:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032d4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032dc:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032e0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032e4:	ea47 070c 	orr.w	r7, r7, ip
900032e8:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
900032ea:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032f6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032fa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032fe:	ea47 070c 	orr.w	r7, r7, ip
90003302:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003304:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003308:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000330c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003310:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003314:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003318:	ea47 070c 	orr.w	r7, r7, ip
9000331c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000331e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003322:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003326:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000332a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000332e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003332:	ea47 070c 	orr.w	r7, r7, ip
90003336:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003338:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000333c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003340:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003344:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003348:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000334c:	ea47 070c 	orr.w	r7, r7, ip
90003350:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003352:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003356:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000335a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000335e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003362:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003366:	ea47 070c 	orr.w	r7, r7, ip
9000336a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000336c:	d18f      	bne.n	9000328e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000336e:	e77c      	b.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003370:	ee17 0a90 	vmov	r0, s15
90003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003378:	2400b9b4 	.word	0x2400b9b4

9000337c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003380:	0a1c      	lsrs	r4, r3, #8
{
90003382:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003384:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003388:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000338c:	429a      	cmp	r2, r3
9000338e:	9300      	str	r3, [sp, #0]
90003390:	f080 8129 	bcs.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003394:	4b96      	ldr	r3, [pc, #600]	; (900035f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003396:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900035f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000339a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000339c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033a0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033a2:	9401      	str	r4, [sp, #4]
900033a4:	e005      	b.n	900033b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900033a6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900033a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900033ac:	429a      	cmp	r2, r3
900033ae:	f000 811a 	beq.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033b2:	00d3      	lsls	r3, r2, #3
900033b4:	9c01      	ldr	r4, [sp, #4]
900033b6:	3201      	adds	r2, #1
    currentMCU++;
900033b8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033bc:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900033c0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900033c4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900033c6:	fb08 f505 	mul.w	r5, r8, r5
900033ca:	0064      	lsls	r4, r4, #1
900033cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033d0:	42a6      	cmp	r6, r4
900033d2:	d9e8      	bls.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900033d4:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
900033d8:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033da:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900033de:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
900033e2:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033e6:	fb19 f90a 	smulbb	r9, r9, sl
900033ea:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900033f2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033f6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033fa:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033fe:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003402:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003406:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000340a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000340e:	fb19 f90a 	smulbb	r9, r9, sl
90003412:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003416:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000341a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000341c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000341e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003420:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003424:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003428:	fb19 f90a 	smulbb	r9, r9, sl
9000342c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003430:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90003434:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003438:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000343c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003444:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003448:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000344c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003458:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000345c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000345e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003460:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003464:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003468:	fb19 f90a 	smulbb	r9, r9, sl
9000346c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003470:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90003474:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003478:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000347c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003484:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003488:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000348c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003498:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000349c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000349e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900034a0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900034a8:	fb19 f90a 	smulbb	r9, r9, sl
900034ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900034b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034cc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034de:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
900034e0:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034e4:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
900034e8:	fb19 f90a 	smulbb	r9, r9, sl
900034ec:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900034f4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034f8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034fc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003504:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003508:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000350c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003510:	fb19 f90a 	smulbb	r9, r9, sl
90003514:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003518:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000351c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000351e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003520:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003524:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003528:	fb19 f90a 	smulbb	r9, r9, sl
9000352c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003530:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90003534:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003538:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000353c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003540:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003544:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003548:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000354c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003550:	fb19 f90a 	smulbb	r9, r9, sl
90003554:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003558:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000355c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000355e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003560:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003564:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003568:	fb19 f90a 	smulbb	r9, r9, sl
9000356c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003570:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90003574:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003578:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000357c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003580:	ea4f 2555 	mov.w	r5, r5, lsr #9
90003584:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003588:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000358c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90003590:	fb19 f90a 	smulbb	r9, r9, sl
90003594:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003598:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000359c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000359e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900035a0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900035a4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900035a8:	fb19 f90a 	smulbb	r9, r9, sl
900035ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035b0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900035b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900035c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900035c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900035cc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900035d0:	fb19 f90a 	smulbb	r9, r9, sl
900035d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900035dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900035de:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
900035e0:	f47f aef6 	bne.w	900033d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
900035e4:	e6df      	b.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
900035e6:	ee17 0a90 	vmov	r0, s15
900035ea:	b003      	add	sp, #12
900035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900035f0:	2400b9b4 	.word	0x2400b9b4
900035f4:	80808081 	.word	0x80808081

900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900035f8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900035fa:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900035fc:	6805      	ldr	r5, [r0, #0]
900035fe:	4c3e      	ldr	r4, [pc, #248]	; (900036f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003600:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003602:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003604:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003606:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000360a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000360e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003610:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003614:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003616:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003618:	d027      	beq.n	9000366a <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000361a:	b9ed      	cbnz	r5, 90003658 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000361c:	4837      	ldr	r0, [pc, #220]	; (900036fc <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
9000361e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003620:	f013 0107 	ands.w	r1, r3, #7
90003624:	d02b      	beq.n	9000367e <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003626:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000362a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000362c:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000362e:	4419      	add	r1, r3
90003630:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003632:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003634:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003636:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003638:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000363c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000363e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003642:	fb05 6611 	mls	r6, r5, r1, r6
90003646:	b106      	cbz	r6, 9000364a <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003648:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000364a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000364e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003650:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003652:	6013      	str	r3, [r2, #0]
}
90003654:	bcf0      	pop	{r4, r5, r6, r7}
90003656:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003658:	2d30      	cmp	r5, #48	; 0x30
9000365a:	d119      	bne.n	90003690 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000365c:	4828      	ldr	r0, [pc, #160]	; (90003700 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
9000365e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003660:	f013 0107 	ands.w	r1, r3, #7
90003664:	d1df      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003666:	6161      	str	r1, [r4, #20]
90003668:	e00a      	b.n	90003680 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000366a:	2f01      	cmp	r7, #1
9000366c:	d024      	beq.n	900036b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000366e:	2f02      	cmp	r7, #2
90003670:	d011      	beq.n	90003696 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90003672:	4824      	ldr	r0, [pc, #144]	; (90003704 <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
90003674:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90003676:	f013 0107 	ands.w	r1, r3, #7
9000367a:	d1d4      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
9000367c:	e7f3      	b.n	90003666 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000367e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003680:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90003682:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003684:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003686:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003688:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000368a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000368e:	e7d6      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90003690:	2001      	movs	r0, #1
}
90003692:	bcf0      	pop	{r4, r5, r6, r7}
90003694:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90003696:	481c      	ldr	r0, [pc, #112]	; (90003708 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90003698:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000369a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000369c:	f013 010f 	ands.w	r1, r3, #15
900036a0:	d022      	beq.n	900036e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900036a6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036aa:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900036ac:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036ae:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036b2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b4:	62a1      	str	r1, [r4, #40]	; 0x28
900036b6:	e7c1      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900036b8:	4814      	ldr	r0, [pc, #80]	; (9000370c <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900036ba:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900036bc:	f013 010f 	ands.w	r1, r3, #15
900036c0:	d107      	bne.n	900036d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036c2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036c4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036c6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036c8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ca:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036cc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036d0:	e7b5      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036d2:	f1c1 0110 	rsb	r1, r1, #16
900036d6:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036d8:	4419      	add	r1, r3
900036da:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036dc:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036de:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036e0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036e2:	e9c4 5507 	strd	r5, r5, [r4, #28]
900036e6:	e7a9      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
900036e8:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
900036ee:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036f2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036f4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036f6:	e7a2      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
900036f8:	2400b9b4 	.word	0x2400b9b4
900036fc:	9000324d 	.word	0x9000324d
90003700:	9000337d 	.word	0x9000337d
90003704:	90002f51 	.word	0x90002f51
90003708:	90002c7d 	.word	0x90002c7d
9000370c:	90002a61 	.word	0x90002a61

90003710 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003714:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003844 <TGFX_JPEG_InitColorTables+0x134>
90003718:	b0a5      	sub	sp, #148	; 0x94
9000371a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003848 <TGFX_JPEG_InitColorTables+0x138>
9000371e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003722:	f8df e128 	ldr.w	lr, [pc, #296]	; 9000384c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003726:	2300      	movs	r3, #0
90003728:	4f3d      	ldr	r7, [pc, #244]	; (90003820 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000372a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000372e:	4e3d      	ldr	r6, [pc, #244]	; (90003824 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003730:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003734:	4d3c      	ldr	r5, [pc, #240]	; (90003828 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003736:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000373a:	4c3c      	ldr	r4, [pc, #240]	; (9000382c <TGFX_JPEG_InitColorTables+0x11c>)
9000373c:	483c      	ldr	r0, [pc, #240]	; (90003830 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000373e:	f249 6245 	movw	r2, #38469	; 0x9645
90003742:	fb02 f203 	mul.w	r2, r2, r3
90003746:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000374a:	1412      	asrs	r2, r2, #16
9000374c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003750:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003754:	fb02 f203 	mul.w	r2, r2, r3
90003758:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000375c:	1412      	asrs	r2, r2, #16
9000375e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003762:	4a34      	ldr	r2, [pc, #208]	; (90003834 <TGFX_JPEG_InitColorTables+0x124>)
90003764:	fb02 f203 	mul.w	r2, r2, r3
90003768:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000376c:	1412      	asrs	r2, r2, #16
9000376e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003772:	4a31      	ldr	r2, [pc, #196]	; (90003838 <TGFX_JPEG_InitColorTables+0x128>)
90003774:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003778:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000377a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003782:	ea4f 4222 	mov.w	r2, r2, asr #16
90003786:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000378a:	4a2c      	ldr	r2, [pc, #176]	; (9000383c <TGFX_JPEG_InitColorTables+0x12c>)
9000378c:	fb02 b203 	mla	r2, r2, r3, fp
90003790:	ea4f 4222 	mov.w	r2, r2, asr #16
90003794:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003798:	4a29      	ldr	r2, [pc, #164]	; (90003840 <TGFX_JPEG_InitColorTables+0x130>)
9000379a:	fb02 a203 	mla	r2, r2, r3, sl
9000379e:	ea4f 4222 	mov.w	r2, r2, asr #16
900037a2:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037a6:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900037aa:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037ac:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037b0:	f343 024f 	sbfx	r2, r3, #1, #16
900037b4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900037b8:	d1c1      	bne.n	9000373e <TGFX_JPEG_InitColorTables+0x2e>
900037ba:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003850 <TGFX_JPEG_InitColorTables+0x140>
900037be:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900037c0:	f04f 0c00 	mov.w	ip, #0
900037c4:	e007      	b.n	900037d6 <TGFX_JPEG_InitColorTables+0xc6>
900037c6:	f10c 0c01 	add.w	ip, ip, #1
900037ca:	4641      	mov	r1, r8
900037cc:	f10e 0e20 	add.w	lr, lr, #32
900037d0:	f1bc 0f10 	cmp.w	ip, #16
900037d4:	d03e      	beq.n	90003854 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900037d6:	f1bc 0f07 	cmp.w	ip, #7
900037da:	f101 0808 	add.w	r8, r1, #8
900037de:	4672      	mov	r2, lr
900037e0:	f04f 0001 	mov.w	r0, #1
900037e4:	bf94      	ite	ls
900037e6:	2600      	movls	r6, #0
900037e8:	2601      	movhi	r6, #1
900037ea:	fa1f f388 	uxth.w	r3, r8
900037ee:	2400      	movs	r4, #0
900037f0:	2c07      	cmp	r4, #7
900037f2:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
900037f6:	bf94      	ite	ls
900037f8:	2700      	movls	r7, #0
900037fa:	2701      	movhi	r7, #1
900037fc:	2f00      	cmp	r7, #0
900037fe:	f000 8407 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003802:	2e00      	cmp	r6, #0
90003804:	f000 8404 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003808:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
9000380c:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000380e:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003810:	d0d9      	beq.n	900037c6 <TGFX_JPEG_InitColorTables+0xb6>
90003812:	3301      	adds	r3, #1
90003814:	3401      	adds	r4, #1
90003816:	3001      	adds	r0, #1
90003818:	3101      	adds	r1, #1
9000381a:	3202      	adds	r2, #2
9000381c:	b29b      	uxth	r3, r3
9000381e:	e7e7      	b.n	900037f0 <TGFX_JPEG_InitColorTables+0xe0>
90003820:	2400c570 	.word	0x2400c570
90003824:	2400a930 	.word	0x2400a930
90003828:	24008d30 	.word	0x24008d30
9000382c:	2400ad30 	.word	0x2400ad30
90003830:	24009130 	.word	0x24009130
90003834:	ffffd4d1 	.word	0xffffd4d1
90003838:	ffffab30 	.word	0xffffab30
9000383c:	ffff94d1 	.word	0xffff94d1
90003840:	ffffeb30 	.word	0xffffeb30
90003844:	24009530 	.word	0x24009530
90003848:	2400c970 	.word	0x2400c970
9000384c:	2400b130 	.word	0x2400b130
90003850:	2400c374 	.word	0x2400c374
90003854:	4b07      	ldr	r3, [pc, #28]	; (90003874 <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003856:	2000      	movs	r0, #0
90003858:	4907      	ldr	r1, [pc, #28]	; (90003878 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
9000385a:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000385e:	9304      	str	r3, [sp, #16]
90003860:	4b06      	ldr	r3, [pc, #24]	; (9000387c <TGFX_JPEG_InitColorTables+0x16c>)
90003862:	4a07      	ldr	r2, [pc, #28]	; (90003880 <TGFX_JPEG_InitColorTables+0x170>)
90003864:	9303      	str	r3, [sp, #12]
90003866:	4b07      	ldr	r3, [pc, #28]	; (90003884 <TGFX_JPEG_InitColorTables+0x174>)
90003868:	f8df e01c 	ldr.w	lr, [pc, #28]	; 90003888 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
9000386c:	469b      	mov	fp, r3
9000386e:	9002      	str	r0, [sp, #8]
90003870:	e00c      	b.n	9000388c <TGFX_JPEG_InitColorTables+0x17c>
90003872:	bf00      	nop
90003874:	2400b534 	.word	0x2400b534
90003878:	2400bbf4 	.word	0x2400bbf4
9000387c:	2400b734 	.word	0x2400b734
90003880:	2400be74 	.word	0x2400be74
90003884:	2400b9f4 	.word	0x2400b9f4
90003888:	2400c074 	.word	0x2400c074
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000388c:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388e:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003892:	f10c 0640 	add.w	r6, ip, #64	; 0x40
90003896:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003898:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
9000389a:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000389c:	b2ad      	uxth	r5, r5
9000389e:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900038a2:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038a4:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038a6:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a8:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900038aa:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ac:	9606      	str	r6, [sp, #24]
900038ae:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b0:	f503 7580 	add.w	r5, r3, #256	; 0x100
900038b4:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900038b8:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900038bc:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900038c2:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c4:	fa1f fa8a 	uxth.w	sl, sl
900038c8:	f365 060f 	bfi	r6, r5, #0, #16
900038cc:	fa1f f989 	uxth.w	r9, r9
900038d0:	f365 461f 	bfi	r6, r5, #16, #16
900038d4:	4635      	mov	r5, r6
900038d6:	9e04      	ldr	r6, [sp, #16]
900038d8:	9500      	str	r5, [sp, #0]
900038da:	4634      	mov	r4, r6
900038dc:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038de:	f10c 0541 	add.w	r5, ip, #65	; 0x41
900038e2:	b2ad      	uxth	r5, r5
900038e4:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038e6:	f10c 0502 	add.w	r5, ip, #2
900038ea:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ee:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038f2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038fa:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003906:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000390a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003912:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003916:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000391a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000391e:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003922:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003926:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000392a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000392e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003932:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003936:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000393a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000393e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003942:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003946:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000394a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000394e:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003952:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003956:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000395a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000395e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003962:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003966:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000396a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000396e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003972:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003976:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000397a:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397e:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003982:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003986:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000398a:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398e:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003992:	b2ad      	uxth	r5, r5
90003994:	f365 000f 	bfi	r0, r5, #0, #16
90003998:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000399c:	f203 1541 	addw	r5, r3, #321	; 0x141
900039a0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a4:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a8:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b2:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b6:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039bc:	f203 1047 	addw	r0, r3, #327	; 0x147
900039c0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039c4:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039c8:	b280      	uxth	r0, r0
900039ca:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ce:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d2:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039da:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039de:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039e2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039e6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039ea:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f2:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039f6:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039f8:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039fc:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a00:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a02:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a04:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a08:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0a:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a0e:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a10:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a14:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a16:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a18:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a1a:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1e:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a20:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a22:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a26:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a28:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a2a:	b2ad      	uxth	r5, r5
90003a2c:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a2e:	f503 75c3 	add.w	r5, r3, #390	; 0x186
90003a32:	b2ad      	uxth	r5, r5
90003a34:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a36:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a3a:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a3e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a40:	b29b      	uxth	r3, r3
90003a42:	9323      	str	r3, [sp, #140]	; 0x8c
90003a44:	2300      	movs	r3, #0
90003a46:	f36a 030f 	bfi	r3, sl, #0, #16
90003a4a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a4e:	f04f 0a00 	mov.w	sl, #0
90003a52:	f369 0a0f 	bfi	sl, r9, #0, #16
90003a56:	60a3      	str	r3, [r4, #8]
90003a58:	f369 4a1f 	bfi	sl, r9, #16, #16
90003a5c:	f04f 0900 	mov.w	r9, #0
90003a60:	f368 090f 	bfi	r9, r8, #0, #16
90003a64:	f8c4 a00c 	str.w	sl, [r4, #12]
90003a68:	f368 491f 	bfi	r9, r8, #16, #16
90003a6c:	f04f 0800 	mov.w	r8, #0
90003a70:	f367 080f 	bfi	r8, r7, #0, #16
90003a74:	f8c4 9010 	str.w	r9, [r4, #16]
90003a78:	f367 481f 	bfi	r8, r7, #16, #16
90003a7c:	2700      	movs	r7, #0
90003a7e:	f366 070f 	bfi	r7, r6, #0, #16
90003a82:	f8c4 8014 	str.w	r8, [r4, #20]
90003a86:	f366 471f 	bfi	r7, r6, #16, #16
90003a8a:	2600      	movs	r6, #0
90003a8c:	f365 060f 	bfi	r6, r5, #0, #16
90003a90:	61a7      	str	r7, [r4, #24]
90003a92:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
90003a96:	f104 0520 	add.w	r5, r4, #32
90003a9a:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a9c:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a9e:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aa0:	f36c 050f 	bfi	r5, ip, #0, #16
90003aa4:	9c08      	ldr	r4, [sp, #32]
90003aa6:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
90003aaa:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aae:	6005      	str	r5, [r0, #0]
90003ab0:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003ab2:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ab6:	f364 050f 	bfi	r5, r4, #0, #16
90003aba:	f364 451f 	bfi	r5, r4, #16, #16
90003abe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90003ac0:	6045      	str	r5, [r0, #4]
90003ac2:	2500      	movs	r5, #0
90003ac4:	f364 050f 	bfi	r5, r4, #0, #16
90003ac8:	f364 451f 	bfi	r5, r4, #16, #16
90003acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
90003ace:	6085      	str	r5, [r0, #8]
90003ad0:	2500      	movs	r5, #0
90003ad2:	f364 050f 	bfi	r5, r4, #0, #16
90003ad6:	f364 451f 	bfi	r5, r4, #16, #16
90003ada:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003adc:	60c5      	str	r5, [r0, #12]
90003ade:	2500      	movs	r5, #0
90003ae0:	f364 050f 	bfi	r5, r4, #0, #16
90003ae4:	f364 451f 	bfi	r5, r4, #16, #16
90003ae8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003aea:	6105      	str	r5, [r0, #16]
90003aec:	2500      	movs	r5, #0
90003aee:	f364 050f 	bfi	r5, r4, #0, #16
90003af2:	f364 451f 	bfi	r5, r4, #16, #16
90003af6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003af8:	6145      	str	r5, [r0, #20]
90003afa:	2500      	movs	r5, #0
90003afc:	f364 050f 	bfi	r5, r4, #0, #16
90003b00:	f364 451f 	bfi	r5, r4, #16, #16
90003b04:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003b06:	6185      	str	r5, [r0, #24]
90003b08:	2500      	movs	r5, #0
90003b0a:	f364 050f 	bfi	r5, r4, #0, #16
90003b0e:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003b12:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b16:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b18:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003b1a:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b1c:	9c05      	ldr	r4, [sp, #20]
90003b1e:	f364 050f 	bfi	r5, r4, #0, #16
90003b22:	f364 451f 	bfi	r5, r4, #16, #16
90003b26:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003b28:	f84b 5c20 	str.w	r5, [fp, #-32]
90003b2c:	2500      	movs	r5, #0
90003b2e:	f364 050f 	bfi	r5, r4, #0, #16
90003b32:	f364 451f 	bfi	r5, r4, #16, #16
90003b36:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003b3a:	2500      	movs	r5, #0
90003b3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b3e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b40:	f364 050f 	bfi	r5, r4, #0, #16
90003b44:	f364 451f 	bfi	r5, r4, #16, #16
90003b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003b4a:	f84b 5c18 	str.w	r5, [fp, #-24]
90003b4e:	2500      	movs	r5, #0
90003b50:	f364 050f 	bfi	r5, r4, #0, #16
90003b54:	f364 451f 	bfi	r5, r4, #16, #16
90003b58:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003b5a:	f84b 5c14 	str.w	r5, [fp, #-20]
90003b5e:	2500      	movs	r5, #0
90003b60:	f364 050f 	bfi	r5, r4, #0, #16
90003b64:	f364 451f 	bfi	r5, r4, #16, #16
90003b68:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003b6a:	f84b 5c10 	str.w	r5, [fp, #-16]
90003b6e:	2500      	movs	r5, #0
90003b70:	f364 050f 	bfi	r5, r4, #0, #16
90003b74:	f364 451f 	bfi	r5, r4, #16, #16
90003b78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003b7a:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003b7e:	2500      	movs	r5, #0
90003b80:	f364 050f 	bfi	r5, r4, #0, #16
90003b84:	f364 451f 	bfi	r5, r4, #16, #16
90003b88:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003b8a:	f84b 5c08 	str.w	r5, [fp, #-8]
90003b8e:	2500      	movs	r5, #0
90003b90:	f364 050f 	bfi	r5, r4, #0, #16
90003b94:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b98:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b9a:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b9e:	2500      	movs	r5, #0
90003ba0:	f360 050f 	bfi	r5, r0, #0, #16
90003ba4:	f360 451f 	bfi	r5, r0, #16, #16
90003ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
90003baa:	f841 5c20 	str.w	r5, [r1, #-32]
90003bae:	2500      	movs	r5, #0
90003bb0:	f360 050f 	bfi	r5, r0, #0, #16
90003bb4:	f360 451f 	bfi	r5, r0, #16, #16
90003bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
90003bba:	f841 5c1c 	str.w	r5, [r1, #-28]
90003bbe:	2500      	movs	r5, #0
90003bc0:	f360 050f 	bfi	r5, r0, #0, #16
90003bc4:	f360 451f 	bfi	r5, r0, #16, #16
90003bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
90003bca:	f841 5c18 	str.w	r5, [r1, #-24]
90003bce:	2500      	movs	r5, #0
90003bd0:	f360 050f 	bfi	r5, r0, #0, #16
90003bd4:	f360 451f 	bfi	r5, r0, #16, #16
90003bd8:	9816      	ldr	r0, [sp, #88]	; 0x58
90003bda:	f841 5c14 	str.w	r5, [r1, #-20]
90003bde:	2500      	movs	r5, #0
90003be0:	f360 050f 	bfi	r5, r0, #0, #16
90003be4:	f360 451f 	bfi	r5, r0, #16, #16
90003be8:	981a      	ldr	r0, [sp, #104]	; 0x68
90003bea:	f841 5c10 	str.w	r5, [r1, #-16]
90003bee:	2500      	movs	r5, #0
90003bf0:	f360 050f 	bfi	r5, r0, #0, #16
90003bf4:	f360 451f 	bfi	r5, r0, #16, #16
90003bf8:	981e      	ldr	r0, [sp, #120]	; 0x78
90003bfa:	f841 5c0c 	str.w	r5, [r1, #-12]
90003bfe:	2500      	movs	r5, #0
90003c00:	f360 050f 	bfi	r5, r0, #0, #16
90003c04:	f360 451f 	bfi	r5, r0, #16, #16
90003c08:	9822      	ldr	r0, [sp, #136]	; 0x88
90003c0a:	f841 5c08 	str.w	r5, [r1, #-8]
90003c0e:	2500      	movs	r5, #0
90003c10:	f360 050f 	bfi	r5, r0, #0, #16
90003c14:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c18:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c1a:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c1e:	2500      	movs	r5, #0
90003c20:	f360 050f 	bfi	r5, r0, #0, #16
90003c24:	f360 451f 	bfi	r5, r0, #16, #16
90003c28:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c2c:	9d00      	ldr	r5, [sp, #0]
90003c2e:	f8ce 5000 	str.w	r5, [lr]
90003c32:	9801      	ldr	r0, [sp, #4]
90003c34:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003c3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c3c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c40:	2300      	movs	r3, #0
90003c42:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003c44:	f366 030f 	bfi	r3, r6, #0, #16
90003c48:	f366 431f 	bfi	r3, r6, #16, #16
90003c4c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c4e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003c52:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c56:	f842 3c1c 	str.w	r3, [r2, #-28]
90003c5a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003c5c:	9f02      	ldr	r7, [sp, #8]
90003c5e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c62:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003c66:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c68:	f366 431f 	bfi	r3, r6, #16, #16
90003c6c:	f842 3c18 	str.w	r3, [r2, #-24]
90003c70:	f04f 0300 	mov.w	r3, #0
90003c74:	f365 030f 	bfi	r3, r5, #0, #16
90003c78:	f365 431f 	bfi	r3, r5, #16, #16
90003c7c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003c7e:	f842 3c14 	str.w	r3, [r2, #-20]
90003c82:	f04f 0300 	mov.w	r3, #0
90003c86:	f365 040f 	bfi	r4, r5, #0, #16
90003c8a:	f360 030f 	bfi	r3, r0, #0, #16
90003c8e:	f365 441f 	bfi	r4, r5, #16, #16
90003c92:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003c94:	f360 431f 	bfi	r3, r0, #16, #16
90003c98:	f04f 0000 	mov.w	r0, #0
90003c9c:	f842 4c0c 	str.w	r4, [r2, #-12]
90003ca0:	f842 3c10 	str.w	r3, [r2, #-16]
90003ca4:	4603      	mov	r3, r0
90003ca6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003ca8:	f365 000f 	bfi	r0, r5, #0, #16
90003cac:	f364 030f 	bfi	r3, r4, #0, #16
90003cb0:	f365 401f 	bfi	r0, r5, #16, #16
90003cb4:	f364 431f 	bfi	r3, r4, #16, #16
90003cb8:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003cbc:	f47f ade6 	bne.w	9000388c <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc0:	48db      	ldr	r0, [pc, #876]	; (90004030 <TGFX_JPEG_InitColorTables+0x920>)
90003cc2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cc6:	49db      	ldr	r1, [pc, #876]	; (90004034 <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc8:	6004      	str	r4, [r0, #0]
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cce:	4ada      	ldr	r2, [pc, #872]	; (90004038 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd0:	6044      	str	r4, [r0, #4]
90003cd2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd6:	4bd9      	ldr	r3, [pc, #868]	; (9000403c <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd8:	6084      	str	r4, [r0, #8]
90003cda:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cde:	4fd8      	ldr	r7, [pc, #864]	; (90004040 <TGFX_JPEG_InitColorTables+0x930>)
90003ce0:	60c4      	str	r4, [r0, #12]
90003ce2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ce6:	4ed7      	ldr	r6, [pc, #860]	; (90004044 <TGFX_JPEG_InitColorTables+0x934>)
90003ce8:	6104      	str	r4, [r0, #16]
90003cea:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cee:	4dd6      	ldr	r5, [pc, #856]	; (90004048 <TGFX_JPEG_InitColorTables+0x938>)
90003cf0:	6144      	str	r4, [r0, #20]
90003cf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003cf6:	f8df b374 	ldr.w	fp, [pc, #884]	; 9000406c <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cfa:	6184      	str	r4, [r0, #24]
90003cfc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d00:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90004070 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d04:	61c4      	str	r4, [r0, #28]
90003d06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d0a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90004074 <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d0e:	6204      	str	r4, [r0, #32]
90003d10:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d14:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90004078 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d18:	6244      	str	r4, [r0, #36]	; 0x24
90003d1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d1e:	f8df e35c 	ldr.w	lr, [pc, #860]	; 9000407c <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d22:	6284      	str	r4, [r0, #40]	; 0x28
90003d24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d28:	62c4      	str	r4, [r0, #44]	; 0x2c
90003d2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d2e:	6304      	str	r4, [r0, #48]	; 0x30
90003d30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d34:	6344      	str	r4, [r0, #52]	; 0x34
90003d36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d3a:	6384      	str	r4, [r0, #56]	; 0x38
90003d3c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d40:	63c4      	str	r4, [r0, #60]	; 0x3c
90003d42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d46:	6404      	str	r4, [r0, #64]	; 0x40
90003d48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d4c:	6444      	str	r4, [r0, #68]	; 0x44
90003d4e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d52:	6484      	str	r4, [r0, #72]	; 0x48
90003d54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d58:	64c4      	str	r4, [r0, #76]	; 0x4c
90003d5a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d5e:	6504      	str	r4, [r0, #80]	; 0x50
90003d60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d64:	6544      	str	r4, [r0, #84]	; 0x54
90003d66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d6a:	6584      	str	r4, [r0, #88]	; 0x58
90003d6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d70:	65c4      	str	r4, [r0, #92]	; 0x5c
90003d72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d76:	6604      	str	r4, [r0, #96]	; 0x60
90003d78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d7c:	6644      	str	r4, [r0, #100]	; 0x64
90003d7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d82:	6684      	str	r4, [r0, #104]	; 0x68
90003d84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d88:	66c4      	str	r4, [r0, #108]	; 0x6c
90003d8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d8e:	6704      	str	r4, [r0, #112]	; 0x70
90003d90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d94:	6744      	str	r4, [r0, #116]	; 0x74
90003d96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d9a:	6784      	str	r4, [r0, #120]	; 0x78
90003d9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da0:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003da2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da6:	48a9      	ldr	r0, [pc, #676]	; (9000404c <TGFX_JPEG_InitColorTables+0x93c>)
90003da8:	e9c1 4000 	strd	r4, r0, [r1]
90003dac:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003db0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003db4:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003db8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dbc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dc0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003dc4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dc8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dcc:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003dd0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dd4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dd8:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003ddc:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003de0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003de4:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003de8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dec:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003df0:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003df4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003df8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dfc:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003e00:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e04:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e08:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003e0c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e10:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e14:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003e18:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e1c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e20:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003e24:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e28:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e2c:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003e30:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e34:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e38:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003e3c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e40:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e44:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003e48:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e4c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e50:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003e54:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e58:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e5c:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e60:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e64:	497a      	ldr	r1, [pc, #488]	; (90004050 <TGFX_JPEG_InitColorTables+0x940>)
90003e66:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e6a:	e9c2 4100 	strd	r4, r1, [r2]
90003e6e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e72:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e76:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003e7a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e7e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e82:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003e86:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e8a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e8e:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003e92:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e96:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e9a:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003e9e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ea2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003eaa:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eae:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eb2:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003eb6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eba:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ebe:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003ec2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ec6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eca:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003ece:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ed2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed6:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003eda:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ede:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ee2:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003ee6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eea:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003eee:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003ef2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ef6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003efa:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003efe:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f02:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f06:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003f0a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f0e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f12:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003f16:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f1a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003f1e:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f22:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003f26:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003f2a:	4a4a      	ldr	r2, [pc, #296]	; (90004054 <TGFX_JPEG_InitColorTables+0x944>)
90003f2c:	e9c3 4000 	strd	r4, r0, [r3]
90003f30:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003f34:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f38:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f3c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f40:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f44:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003f48:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003f4c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f50:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f54:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f58:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f5c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003f60:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003f64:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f6c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f70:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f74:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003f78:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003f7c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f84:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f88:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f8c:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003f90:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003f94:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f9c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fa0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fa4:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003fa8:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003fac:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fb4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fb8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fbc:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003fc0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003fc4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fc8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fcc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fd0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fd4:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003fd8:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003fdc:	4c1e      	ldr	r4, [pc, #120]	; (90004058 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fde:	481f      	ldr	r0, [pc, #124]	; (9000405c <TGFX_JPEG_InitColorTables+0x94c>)
90003fe0:	491f      	ldr	r1, [pc, #124]	; (90004060 <TGFX_JPEG_InitColorTables+0x950>)
90003fe2:	4a20      	ldr	r2, [pc, #128]	; (90004064 <TGFX_JPEG_InitColorTables+0x954>)
90003fe4:	4b20      	ldr	r3, [pc, #128]	; (90004068 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003fea:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003fec:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003ff0:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff2:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003ff6:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003ffc:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90004000:	4452      	add	r2, sl
90004002:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004004:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004008:	d1ed      	bne.n	90003fe6 <TGFX_JPEG_InitColorTables+0x8d6>
}
9000400a:	b025      	add	sp, #148	; 0x94
9000400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90004010:	f1bc 0f07 	cmp.w	ip, #7
90004014:	d803      	bhi.n	9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004016:	b117      	cbz	r7, 9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004018:	460d      	mov	r5, r1
9000401a:	f7ff bbf7 	b.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
9000401e:	2c07      	cmp	r4, #7
90004020:	f63f abf4 	bhi.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
90004024:	2e00      	cmp	r6, #0
90004026:	f43f abf1 	beq.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000402a:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
9000402c:	f7ff bbf1 	b.w	90003812 <TGFX_JPEG_InitColorTables+0x102>
90004030:	2400c2f4 	.word	0x2400c2f4
90004034:	2400b934 	.word	0x2400b934
90004038:	2400bdf4 	.word	0x2400bdf4
9000403c:	2400c274 	.word	0x2400c274
90004040:	2400a530 	.word	0x2400a530
90004044:	24009930 	.word	0x24009930
90004048:	2400a130 	.word	0x2400a130
9000404c:	00430042 	.word	0x00430042
90004050:	00830082 	.word	0x00830082
90004054:	00c700c6 	.word	0x00c700c6
90004058:	24009d30 	.word	0x24009d30
9000405c:	002c0c00 	.word	0x002c0c00
90004060:	005b6800 	.word	0x005b6800
90004064:	ff1db000 	.word	0xff1db000
90004068:	ff4d0c00 	.word	0xff4d0c00
9000406c:	000166e8 	.word	0x000166e8
90004070:	0001c5a0 	.word	0x0001c5a0
90004074:	ffff4930 	.word	0xffff4930
90004078:	ffffa7e8 	.word	0xffffa7e8
9000407c:	00b3f400 	.word	0x00b3f400

90004080 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90004080:	4901      	ldr	r1, [pc, #4]	; (90004088 <vApplicationIdleHook+0x8>)
90004082:	2000      	movs	r0, #0
90004084:	f00c be30 	b.w	90010ce8 <vTaskSetApplicationTaskTag>
90004088:	90000965 	.word	0x90000965

9000408c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
9000408c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
9000408e:	2064      	movs	r0, #100	; 0x64
90004090:	f00a fb20 	bl	9000e6d4 <osDelay>
  for(;;)
90004094:	e7fb      	b.n	9000408e <StartDefaultTask+0x2>
90004096:	bf00      	nop

90004098 <consumerTask_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTask_handler */
void consumerTask_handler(void *argument)
{
90004098:	b570      	push	{r4, r5, r6, lr}
9000409a:	4e11      	ldr	r6, [pc, #68]	; (900040e0 <consumerTask_handler+0x48>)
9000409c:	b082      	sub	sp, #8
9000409e:	4c11      	ldr	r4, [pc, #68]	; (900040e4 <consumerTask_handler+0x4c>)
    if(messageQueueGetStatus != osOK) {
    	osDelay(1);
    	continue;
    }

    if(!strcmp(control.type, "DHT11")) {
900040a0:	4d11      	ldr	r5, [pc, #68]	; (900040e8 <consumerTask_handler+0x50>)
    osStatus_t messageQueueGetStatus = osMessageQueueGet(controlQueueHandle, (void*) &control, NULL, 0);
900040a2:	2300      	movs	r3, #0
900040a4:	4669      	mov	r1, sp
900040a6:	6830      	ldr	r0, [r6, #0]
900040a8:	461a      	mov	r2, r3
900040aa:	f00a fd31 	bl	9000eb10 <osMessageQueueGet>
    if(!strcmp(control.type, "DHT11")) {
900040ae:	4629      	mov	r1, r5
    if(messageQueueGetStatus != osOK) {
900040b0:	b990      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
    if(!strcmp(control.type, "DHT11")) {
900040b2:	9800      	ldr	r0, [sp, #0]
900040b4:	f7fc f914 	bl	900002e0 <strcmp>
900040b8:	b970      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
      DHT11_HandleTypeDef* dht11 = (DHT11_HandleTypeDef*) control.obj;
900040ba:	9a01      	ldr	r2, [sp, #4]

      if(applicationContext.maxTemperature < dht11->temperature) {
900040bc:	f9b4 1000 	ldrsh.w	r1, [r4]
900040c0:	7853      	ldrb	r3, [r2, #1]
900040c2:	4299      	cmp	r1, r3
    	applicationContext.maxTemperature = dht11->temperature;
      }

      if(applicationContext.minTemperature > dht11->temperature) {
900040c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
      	applicationContext.minTemperature = dht11->temperature;
	  }

      applicationContext.temperature = dht11->temperature;
900040c8:	7123      	strb	r3, [r4, #4]
    	applicationContext.maxTemperature = dht11->temperature;
900040ca:	bfb8      	it	lt
900040cc:	8023      	strhlt	r3, [r4, #0]
      if(applicationContext.minTemperature > dht11->temperature) {
900040ce:	428b      	cmp	r3, r1
      	applicationContext.minTemperature = dht11->temperature;
900040d0:	bfb8      	it	lt
900040d2:	8063      	strhlt	r3, [r4, #2]
      applicationContext.humidity = dht11->humidity;
900040d4:	7813      	ldrb	r3, [r2, #0]
900040d6:	7163      	strb	r3, [r4, #5]
    	osDelay(1);
900040d8:	2001      	movs	r0, #1
900040da:	f00a fafb 	bl	9000e6d4 <osDelay>
    	continue;
900040de:	e7e0      	b.n	900040a2 <consumerTask_handler+0xa>
900040e0:	2400cd98 	.word	0x2400cd98
900040e4:	2400cd78 	.word	0x2400cd78
900040e8:	90029ef4 	.word	0x90029ef4

900040ec <temperatureHourlyReadCb>:
  /* USER CODE END consumerTask_handler */
}

/* temperatureHourlyReadCb function */
void temperatureHourlyReadCb(void *argument)
{
900040ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN temperatureHourlyReadCb */
	int i = 0;
	int size = 10;

	for(i = 0; i < size; ++i) {
		if(applicationContext.temperatureData[i] == -100) {
900040ee:	4c22      	ldr	r4, [pc, #136]	; (90004178 <temperatureHourlyReadCb+0x8c>)
900040f0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
900040f4:	3364      	adds	r3, #100	; 0x64
900040f6:	d029      	beq.n	9000414c <temperatureHourlyReadCb+0x60>
900040f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
900040fc:	3364      	adds	r3, #100	; 0x64
900040fe:	d02b      	beq.n	90004158 <temperatureHourlyReadCb+0x6c>
90004100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90004104:	3364      	adds	r3, #100	; 0x64
90004106:	d029      	beq.n	9000415c <temperatureHourlyReadCb+0x70>
90004108:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
9000410c:	3364      	adds	r3, #100	; 0x64
9000410e:	d027      	beq.n	90004160 <temperatureHourlyReadCb+0x74>
90004110:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
90004114:	3364      	adds	r3, #100	; 0x64
90004116:	d025      	beq.n	90004164 <temperatureHourlyReadCb+0x78>
90004118:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
9000411c:	3364      	adds	r3, #100	; 0x64
9000411e:	d023      	beq.n	90004168 <temperatureHourlyReadCb+0x7c>
90004120:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90004124:	3364      	adds	r3, #100	; 0x64
90004126:	d021      	beq.n	9000416c <temperatureHourlyReadCb+0x80>
90004128:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
9000412c:	3364      	adds	r3, #100	; 0x64
9000412e:	d01f      	beq.n	90004170 <temperatureHourlyReadCb+0x84>
90004130:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
90004134:	3364      	adds	r3, #100	; 0x64
90004136:	d01d      	beq.n	90004174 <temperatureHourlyReadCb+0x88>
	if(i < size - 1) {
		applicationContext.temperatureData[i] = applicationContext.temperature;
	} else {
		// Shift array by one and add the newest value in front
		for(i = 0; i < size - 1; ++i) {
			applicationContext.temperatureData[i] = applicationContext.temperatureData[i + 1];
90004138:	2212      	movs	r2, #18
9000413a:	f104 010a 	add.w	r1, r4, #10
9000413e:	f104 0008 	add.w	r0, r4, #8
90004142:	f023 faa1 	bl	90027688 <memmove>
		}

		applicationContext.temperatureData[size - 1] = applicationContext.temperature;
90004146:	7923      	ldrb	r3, [r4, #4]
90004148:	8363      	strh	r3, [r4, #26]
	}

  /* USER CODE END temperatureHourlyReadCb */
}
9000414a:	bd10      	pop	{r4, pc}
	for(i = 0; i < size; ++i) {
9000414c:	2300      	movs	r3, #0
		applicationContext.temperatureData[i] = applicationContext.temperature;
9000414e:	3304      	adds	r3, #4
90004150:	7922      	ldrb	r2, [r4, #4]
90004152:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
}
90004156:	bd10      	pop	{r4, pc}
	for(i = 0; i < size; ++i) {
90004158:	2301      	movs	r3, #1
9000415a:	e7f8      	b.n	9000414e <temperatureHourlyReadCb+0x62>
9000415c:	2302      	movs	r3, #2
9000415e:	e7f6      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004160:	2303      	movs	r3, #3
90004162:	e7f4      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004164:	2304      	movs	r3, #4
90004166:	e7f2      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004168:	2305      	movs	r3, #5
9000416a:	e7f0      	b.n	9000414e <temperatureHourlyReadCb+0x62>
9000416c:	2306      	movs	r3, #6
9000416e:	e7ee      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004170:	2307      	movs	r3, #7
90004172:	e7ec      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004174:	2308      	movs	r3, #8
90004176:	e7ea      	b.n	9000414e <temperatureHourlyReadCb+0x62>
90004178:	2400cd78 	.word	0x2400cd78

9000417c <dht11Task_handler>:
{
9000417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004180:	b085      	sub	sp, #20
90004182:	f04f 0900 	mov.w	r9, #0
90004186:	4f26      	ldr	r7, [pc, #152]	; (90004220 <dht11Task_handler+0xa4>)
90004188:	f10d 0804 	add.w	r8, sp, #4
9000418c:	4e25      	ldr	r6, [pc, #148]	; (90004224 <dht11Task_handler+0xa8>)
{
	DHT11_HandleTypeDef dht11;

	uint32_t ticks = HAL_GetTick();

	uint32_t n = ticks / 5000;
9000418e:	4d26      	ldr	r5, [pc, #152]	; (90004228 <dht11Task_handler+0xac>)

	int8_t x = n % 10 + 1;
90004190:	4c26      	ldr	r4, [pc, #152]	; (9000422c <dht11Task_handler+0xb0>)
	uint32_t ticks = HAL_GetTick();
90004192:	f005 f959 	bl	90009448 <HAL_GetTick>
90004196:	4684      	mov	ip, r0
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
90004198:	2300      	movs	r3, #0
9000419a:	a902      	add	r1, sp, #8
	uint32_t n = ticks / 5000;
9000419c:	fba5 ec0c 	umull	lr, ip, r5, ip
900041a0:	6830      	ldr	r0, [r6, #0]
900041a2:	461a      	mov	r2, r3
900041a4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
	int8_t x = n % 10 + 1;
900041a8:	fba4 ea0c 	umull	lr, sl, r4, ip
	int8_t y = n % 5 + 1;
900041ac:	ea4f 0e9a 	mov.w	lr, sl, lsr #2
	int8_t x = n % 10 + 1;
900041b0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
	int8_t y = n % 5 + 1;
900041b4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	int8_t x = n % 10 + 1;
900041b8:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	int8_t y = n % 5 + 1;
900041bc:	ebac 0e0e 	sub.w	lr, ip, lr
	int8_t x = n % 10 + 1;
900041c0:	ebac 0c4a 	sub.w	ip, ip, sl, lsl #1
	int8_t y = n % 5 + 1;
900041c4:	f10e 0e01 	add.w	lr, lr, #1
	int8_t x = n % 10 + 1;
900041c8:	fa5f fc8c 	uxtb.w	ip, ip

    dht11.humidity = 34 + x;
    dht11.temperature = 24 + x;

    if(x > 5) {
    	dht11.humidity -= 2*y;
900041cc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
	int8_t x = n % 10 + 1;
900041d0:	f10c 0b01 	add.w	fp, ip, #1
    dht11.humidity = 34 + x;
900041d4:	f10c 0a23 	add.w	sl, ip, #35	; 0x23
    dht11.temperature = 24 + x;
900041d8:	f10c 0c19 	add.w	ip, ip, #25
    	dht11.humidity -= 2*y;
900041dc:	fa5f fe8e 	uxtb.w	lr, lr
    if(x > 5) {
900041e0:	fa5f fb8b 	uxtb.w	fp, fp
    dht11.humidity = 34 + x;
900041e4:	fa5f fa8a 	uxtb.w	sl, sl
    dht11.temperature = 24 + x;
900041e8:	fa5f fc8c 	uxtb.w	ip, ip
    if(x > 5) {
900041ec:	f1bb 0f05 	cmp.w	fp, #5
    	dht11.humidity -= 2*y;
900041f0:	ebaa 0b0e 	sub.w	fp, sl, lr
		dht11.temperature -= 2*y;
900041f4:	ebac 0e0e 	sub.w	lr, ip, lr
    if(x > 5) {
900041f8:	d903      	bls.n	90004202 <dht11Task_handler+0x86>
    	dht11.humidity -= 2*y;
900041fa:	fa5f fa8b 	uxtb.w	sl, fp
		dht11.temperature -= 2*y;
900041fe:	fa5f fc8e 	uxtb.w	ip, lr
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
90004202:	f88d a004 	strb.w	sl, [sp, #4]
90004206:	f88d 9006 	strb.w	r9, [sp, #6]
9000420a:	f88d c005 	strb.w	ip, [sp, #5]
	  control.type = "DHT11";
9000420e:	e9cd 7802 	strd	r7, r8, [sp, #8]
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
90004212:	f00a fc3b 	bl	9000ea8c <osMessageQueuePut>
	  osDelay(1);
90004216:	2001      	movs	r0, #1
90004218:	f00a fa5c 	bl	9000e6d4 <osDelay>
  for(;;)
9000421c:	e7b9      	b.n	90004192 <dht11Task_handler+0x16>
9000421e:	bf00      	nop
90004220:	90029ef4 	.word	0x90029ef4
90004224:	2400cd98 	.word	0x2400cd98
90004228:	d1b71759 	.word	0xd1b71759
9000422c:	cccccccd 	.word	0xcccccccd

90004230 <SystemClock_Config>:
{
90004230:	b570      	push	{r4, r5, r6, lr}
90004232:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90004234:	224c      	movs	r2, #76	; 0x4c
90004236:	2100      	movs	r1, #0
90004238:	a80a      	add	r0, sp, #40	; 0x28
9000423a:	f023 fa3f 	bl	900276bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
9000423e:	2220      	movs	r2, #32
90004240:	2100      	movs	r1, #0
90004242:	a802      	add	r0, sp, #8
90004244:	f023 fa3a 	bl	900276bc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90004248:	2002      	movs	r0, #2
9000424a:	f008 f991 	bl	9000c570 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
9000424e:	4b22      	ldr	r3, [pc, #136]	; (900042d8 <SystemClock_Config+0xa8>)
90004250:	2100      	movs	r1, #0
90004252:	4a22      	ldr	r2, [pc, #136]	; (900042dc <SystemClock_Config+0xac>)
90004254:	9101      	str	r1, [sp, #4]
90004256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90004258:	f021 0101 	bic.w	r1, r1, #1
9000425c:	62d9      	str	r1, [r3, #44]	; 0x2c
9000425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004260:	f003 0301 	and.w	r3, r3, #1
90004264:	9301      	str	r3, [sp, #4]
90004266:	6993      	ldr	r3, [r2, #24]
90004268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000426c:	6193      	str	r3, [r2, #24]
9000426e:	6993      	ldr	r3, [r2, #24]
90004270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90004274:	9301      	str	r3, [sp, #4]
90004276:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90004278:	6993      	ldr	r3, [r2, #24]
9000427a:	0499      	lsls	r1, r3, #18
9000427c:	d5fc      	bpl.n	90004278 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000427e:	2201      	movs	r2, #1
90004280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90004284:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004286:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90004288:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000428a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
9000428c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000428e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
90004292:	2205      	movs	r2, #5
90004294:	23a0      	movs	r3, #160	; 0xa0
90004296:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000429a:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000429c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
900042a0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900042a2:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900042a6:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900042aa:	f008 fa09 	bl	9000c6c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900042ae:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900042b0:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900042b2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900042b4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900042b6:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900042ba:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900042bc:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
900042be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900042c0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900042c2:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900042c4:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
900042c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
900042cc:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900042ce:	f008 fd8b 	bl	9000cde8 <HAL_RCC_ClockConfig>
}
900042d2:	b01e      	add	sp, #120	; 0x78
900042d4:	bd70      	pop	{r4, r5, r6, pc}
900042d6:	bf00      	nop
900042d8:	58000400 	.word	0x58000400
900042dc:	58024800 	.word	0x58024800

900042e0 <main>:
{
900042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900042e4:	2400      	movs	r4, #0
{
900042e6:	b099      	sub	sp, #100	; 0x64
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900042e8:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900042ea:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042ec:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900042ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900042f2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
900042f6:	f005 f923 	bl	90009540 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
900042fa:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900042fe:	49d3      	ldr	r1, [pc, #844]	; (9000464c <main+0x36c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004300:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
90004302:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004304:	4bd2      	ldr	r3, [pc, #840]	; (90004650 <main+0x370>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004306:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000430a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000430e:	f005 f935 	bl	9000957c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90004312:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004316:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004318:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
9000431c:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
9000431e:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90004322:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004326:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000432a:	f005 f927 	bl	9000957c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
9000432e:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004330:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004332:	f8ad 6037 	strh.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004336:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
9000433a:	231a      	movs	r3, #26
9000433c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004340:	f240 1301 	movw	r3, #257	; 0x101
90004344:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004348:	f005 f918 	bl	9000957c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000434c:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004350:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004352:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004356:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004358:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000435c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004360:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004364:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90004366:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000436a:	f005 f907 	bl	9000957c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
9000436e:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004370:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004372:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004376:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000437a:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
9000437e:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004382:	f005 f8fb 	bl	9000957c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90004386:	4620      	mov	r0, r4
90004388:	f005 f8e8 	bl	9000955c <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000438c:	4ab1      	ldr	r2, [pc, #708]	; (90004654 <main+0x374>)
9000438e:	6953      	ldr	r3, [r2, #20]
90004390:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90004394:	d111      	bne.n	900043ba <main+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
90004396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000439a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000439e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900043a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043a6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900043aa:	6953      	ldr	r3, [r2, #20]
900043ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900043b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900043b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043b6:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900043ba:	48a6      	ldr	r0, [pc, #664]	; (90004654 <main+0x374>)
900043bc:	6943      	ldr	r3, [r0, #20]
900043be:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
900043c2:	d124      	bne.n	9000440e <main+0x12e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900043c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900043c8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900043cc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900043d0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900043d4:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900043d8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
900043dc:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900043de:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900043e2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900043e4:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
900043e8:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900043ea:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
900043ee:	1c5a      	adds	r2, r3, #1
900043f0:	d1f8      	bne.n	900043e4 <main+0x104>
    } while(sets-- != 0U);
900043f2:	3c20      	subs	r4, #32
900043f4:	f114 0f20 	cmn.w	r4, #32
900043f8:	d1f1      	bne.n	900043de <main+0xfe>
900043fa:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900043fe:	6943      	ldr	r3, [r0, #20]
90004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004404:	6143      	str	r3, [r0, #20]
90004406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000440a:	f3bf 8f6f 	isb	sy
  HAL_Init();
9000440e:	f004 ffdf 	bl	900093d0 <HAL_Init>
	applicationContext.temperatureData[i] = -100;
90004412:	4b91      	ldr	r3, [pc, #580]	; (90004658 <main+0x378>)
90004414:	f06f 1263 	mvn.w	r2, #6488163	; 0x630063
  applicationContext.maxTemperature = -100;
90004418:	4990      	ldr	r1, [pc, #576]	; (9000465c <main+0x37c>)
  applicationContext.temperature = 0;
9000441a:	2400      	movs	r4, #0
	applicationContext.temperatureData[i] = -100;
9000441c:	619a      	str	r2, [r3, #24]
  applicationContext.maxTemperature = -100;
9000441e:	6019      	str	r1, [r3, #0]
  applicationContext.temperature = 0;
90004420:	711c      	strb	r4, [r3, #4]
	applicationContext.temperatureData[i] = -100;
90004422:	e9c3 2202 	strd	r2, r2, [r3, #8]
90004426:	e9c3 2204 	strd	r2, r2, [r3, #16]
  SystemClock_Config();
9000442a:	f7ff ff01 	bl	90004230 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
9000442e:	b662      	cpsie	i
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004430:	4d8b      	ldr	r5, [pc, #556]	; (90004660 <main+0x380>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004432:	21c0      	movs	r1, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004434:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004436:	4622      	mov	r2, r4
90004438:	488a      	ldr	r0, [pc, #552]	; (90004664 <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000443a:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000443c:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
90004440:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
90004442:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004446:	f04f 0a02 	mov.w	sl, #2
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000444a:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000444e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004452:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004456:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000445a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
9000445e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004462:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000446a:	9301      	str	r3, [sp, #4]
9000446c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000446e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004476:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000447a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004482:	9302      	str	r3, [sp, #8]
90004484:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90004486:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000448e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004492:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000449a:	9303      	str	r3, [sp, #12]
9000449c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000449e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044a2:	f043 0310 	orr.w	r3, r3, #16
900044a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ae:	f003 0310 	and.w	r3, r3, #16
900044b2:	9304      	str	r3, [sp, #16]
900044b4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
900044b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ba:	f043 0302 	orr.w	r3, r3, #2
900044be:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044c6:	f003 0302 	and.w	r3, r3, #2
900044ca:	9305      	str	r3, [sp, #20]
900044cc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900044ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900044d6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044de:	f403 7300 	and.w	r3, r3, #512	; 0x200
900044e2:	9306      	str	r3, [sp, #24]
900044e4:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900044e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ea:	f043 0308 	orr.w	r3, r3, #8
900044ee:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044f6:	f003 0308 	and.w	r3, r3, #8
900044fa:	9307      	str	r3, [sp, #28]
900044fc:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900044fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004502:	f043 0320 	orr.w	r3, r3, #32
90004506:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000450a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000450e:	f003 0320 	and.w	r3, r3, #32
90004512:	9308      	str	r3, [sp, #32]
90004514:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90004516:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000451e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004522:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000452a:	9309      	str	r3, [sp, #36]	; 0x24
9000452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
9000452e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004532:	f043 0301 	orr.w	r3, r3, #1
90004536:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000453a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000453e:	f003 0301 	and.w	r3, r3, #1
90004542:	930a      	str	r3, [sp, #40]	; 0x28
90004544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004546:	f005 fc09 	bl	90009d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
9000454a:	4622      	mov	r2, r4
9000454c:	2180      	movs	r1, #128	; 0x80
9000454e:	4846      	ldr	r0, [pc, #280]	; (90004668 <main+0x388>)
90004550:	f005 fc04 	bl	90009d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004554:	4622      	mov	r2, r4
90004556:	2108      	movs	r1, #8
90004558:	4844      	ldr	r0, [pc, #272]	; (9000466c <main+0x38c>)
9000455a:	f005 fbff 	bl	90009d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000455e:	2201      	movs	r2, #1
90004560:	4843      	ldr	r0, [pc, #268]	; (90004670 <main+0x390>)
90004562:	4611      	mov	r1, r2
90004564:	f005 fbfa 	bl	90009d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
90004568:	4622      	mov	r2, r4
9000456a:	2144      	movs	r1, #68	; 0x44
9000456c:	4841      	ldr	r0, [pc, #260]	; (90004674 <main+0x394>)
9000456e:	f005 fbf5 	bl	90009d5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004572:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004574:	a90b      	add	r1, sp, #44	; 0x2c
90004576:	483b      	ldr	r0, [pc, #236]	; (90004664 <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004578:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000457c:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004580:	f005 f9ec 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004584:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004586:	a90b      	add	r1, sp, #44	; 0x2c
90004588:	4837      	ldr	r0, [pc, #220]	; (90004668 <main+0x388>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000458a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000458c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000458e:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004592:	f005 f9e3 	bl	9000995c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004596:	a90b      	add	r1, sp, #44	; 0x2c
90004598:	4837      	ldr	r0, [pc, #220]	; (90004678 <main+0x398>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000459a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000459c:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900045a0:	f005 f9dc 	bl	9000995c <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900045a4:	a90b      	add	r1, sp, #44	; 0x2c
900045a6:	4831      	ldr	r0, [pc, #196]	; (9000466c <main+0x38c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900045a8:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045ac:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900045b0:	f005 f9d4 	bl	9000995c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900045b4:	a90b      	add	r1, sp, #44	; 0x2c
900045b6:	482e      	ldr	r0, [pc, #184]	; (90004670 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045b8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900045bc:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900045c0:	f005 f9cc 	bl	9000995c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900045c4:	a90b      	add	r1, sp, #44	; 0x2c
900045c6:	482b      	ldr	r0, [pc, #172]	; (90004674 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045c8:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900045cc:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900045d0:	f005 f9c4 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900045d4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900045d8:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900045dc:	a90b      	add	r1, sp, #44	; 0x2c
900045de:	4825      	ldr	r0, [pc, #148]	; (90004674 <main+0x394>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900045e0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900045e4:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900045e8:	f005 f9b8 	bl	9000995c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900045ec:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045f0:	4622      	mov	r2, r4
900045f2:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900045f4:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045f6:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900045f8:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900045fc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
90004600:	4d1e      	ldr	r5, [pc, #120]	; (9000467c <main+0x39c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
90004602:	4033      	ands	r3, r6
90004604:	9300      	str	r3, [sp, #0]
90004606:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004608:	f004 ff3c 	bl	90009484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
9000460c:	207a      	movs	r0, #122	; 0x7a
9000460e:	f004 ff77 	bl	90009500 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90004612:	2234      	movs	r2, #52	; 0x34
90004614:	4621      	mov	r1, r4
90004616:	a80b      	add	r0, sp, #44	; 0x2c
90004618:	f023 f850 	bl	900276bc <memset>
  hltdc.Instance = LTDC;
9000461c:	4b18      	ldr	r3, [pc, #96]	; (90004680 <main+0x3a0>)
  hltdc.Init.AccumulatedVBP = 11;
9000461e:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
90004620:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
90004624:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
90004626:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
90004628:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
9000462c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
9000462e:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
90004630:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
90004632:	61af      	str	r7, [r5, #24]
  hltdc.Init.Backcolor.Red = 0;
90004634:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
90004638:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
9000463c:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004640:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
90004642:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90004646:	f240 131d 	movw	r3, #285	; 0x11d
9000464a:	e01b      	b.n	90004684 <main+0x3a4>
9000464c:	03000012 	.word	0x03000012
90004650:	01010001 	.word	0x01010001
90004654:	e000ed00 	.word	0xe000ed00
90004658:	2400cd78 	.word	0x2400cd78
9000465c:	0064ff9c 	.word	0x0064ff9c
90004660:	58024400 	.word	0x58024400
90004664:	58020400 	.word	0x58020400
90004668:	58020c00 	.word	0x58020c00
9000466c:	58021800 	.word	0x58021800
90004670:	58022800 	.word	0x58022800
90004674:	58020000 	.word	0x58020000
90004678:	58021000 	.word	0x58021000
9000467c:	2400ce88 	.word	0x2400ce88
90004680:	50001000 	.word	0x50001000
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004684:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
90004688:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000468c:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004690:	f007 fb8a 	bl	9000bda8 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
90004694:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004698:	4622      	mov	r2, r4
9000469a:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
9000469c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000469e:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
900046a0:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
900046a2:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
900046a6:	4d51      	ldr	r5, [pc, #324]	; (900047ec <main+0x50c>)
  pLayerCfg.WindowY1 = 272;
900046a8:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
900046aa:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
900046ac:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
900046ae:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Alpha = 255;
900046b0:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
900046b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
900046b6:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
900046b8:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
900046ba:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
900046bc:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
900046be:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
900046c2:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900046c6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900046ca:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900046ce:	f007 fc3f 	bl	9000bf50 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
900046d2:	4b47      	ldr	r3, [pc, #284]	; (900047f0 <main+0x510>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900046d4:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
900046d6:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
900046d8:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
900046da:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
900046dc:	e9c5 4a11 	strd	r4, sl, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900046e0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900046e4:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900046e8:	e9c5 4a01 	strd	r4, sl, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900046ec:	f004 ffee 	bl	900096cc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900046f0:	4631      	mov	r1, r6
900046f2:	4628      	mov	r0, r5
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046f4:	2510      	movs	r5, #16
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900046f6:	f005 f8c1 	bl	9000987c <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
900046fa:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046fc:	483d      	ldr	r0, [pc, #244]	; (900047f4 <main+0x514>)
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046fe:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
90004700:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
90004702:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004704:	4b3c      	ldr	r3, [pc, #240]	; (900047f8 <main+0x518>)
  SdramTiming.SelfRefreshTime = 4;
90004706:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000470a:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000470c:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004710:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004714:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90004718:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
9000471a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
9000471e:	6105      	str	r5, [r0, #16]
  SdramTiming.WriteRecoveryTime = 5;
90004720:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  SdramTiming.LoadToActiveDelay = 2;
90004724:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90004728:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000472c:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
9000472e:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004730:	e9c0 8308 	strd	r8, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
90004734:	e9cd aa10 	strd	sl, sl, [sp, #64]	; 0x40
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
90004738:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
9000473c:	f009 fc2c 	bl	9000df98 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90004740:	4620      	mov	r0, r4
90004742:	f004 fbd7 	bl	90008ef4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90004746:	4620      	mov	r0, r4
90004748:	f004 fc1e 	bl	90008f88 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
9000474c:	f7fb fe52 	bl	900003f4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004750:	4b2a      	ldr	r3, [pc, #168]	; (900047fc <main+0x51c>)
90004752:	482b      	ldr	r0, [pc, #172]	; (90004800 <main+0x520>)
90004754:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004756:	f006 fafb 	bl	9000ad50 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
9000475a:	482a      	ldr	r0, [pc, #168]	; (90004804 <main+0x524>)
9000475c:	4b2a      	ldr	r3, [pc, #168]	; (90004808 <main+0x528>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
9000475e:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90004760:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90004762:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90004764:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90004768:	f004 ff3a 	bl	900095e0 <HAL_CRC_Init>
  MX_TouchGFX_Init();
9000476c:	f7fb fe46 	bl	900003fc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
90004770:	f7fb fe42 	bl	900003f8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
90004774:	f009 ff38 	bl	9000e5e8 <osKernelInitialize>
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
90004778:	4622      	mov	r2, r4
9000477a:	4b24      	ldr	r3, [pc, #144]	; (9000480c <main+0x52c>)
9000477c:	4631      	mov	r1, r6
9000477e:	4824      	ldr	r0, [pc, #144]	; (90004810 <main+0x530>)
90004780:	f009 ffb6 	bl	9000e6f0 <osTimerNew>
90004784:	4b23      	ldr	r3, [pc, #140]	; (90004814 <main+0x534>)
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
90004786:	f241 3188 	movw	r1, #5000	; 0x1388
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
9000478a:	6018      	str	r0, [r3, #0]
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
9000478c:	f009 fff2 	bl	9000e774 <osTimerStart>
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
90004790:	4a21      	ldr	r2, [pc, #132]	; (90004818 <main+0x538>)
90004792:	4639      	mov	r1, r7
90004794:	4628      	mov	r0, r5
90004796:	f00a f93b 	bl	9000ea10 <osMessageQueueNew>
9000479a:	4b20      	ldr	r3, [pc, #128]	; (9000481c <main+0x53c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000479c:	4a20      	ldr	r2, [pc, #128]	; (90004820 <main+0x540>)
9000479e:	4621      	mov	r1, r4
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
900047a0:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900047a2:	4820      	ldr	r0, [pc, #128]	; (90004824 <main+0x544>)
900047a4:	f009 ff4c 	bl	9000e640 <osThreadNew>
900047a8:	4b1f      	ldr	r3, [pc, #124]	; (90004828 <main+0x548>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047aa:	4a20      	ldr	r2, [pc, #128]	; (9000482c <main+0x54c>)
900047ac:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900047ae:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047b0:	481f      	ldr	r0, [pc, #124]	; (90004830 <main+0x550>)
900047b2:	f009 ff45 	bl	9000e640 <osThreadNew>
900047b6:	4b1f      	ldr	r3, [pc, #124]	; (90004834 <main+0x554>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900047b8:	4a1f      	ldr	r2, [pc, #124]	; (90004838 <main+0x558>)
900047ba:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047bc:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900047be:	481f      	ldr	r0, [pc, #124]	; (9000483c <main+0x55c>)
900047c0:	f009 ff3e 	bl	9000e640 <osThreadNew>
900047c4:	4b1e      	ldr	r3, [pc, #120]	; (90004840 <main+0x560>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
900047c6:	4a1f      	ldr	r2, [pc, #124]	; (90004844 <main+0x564>)
900047c8:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900047ca:	6018      	str	r0, [r3, #0]
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
900047cc:	481e      	ldr	r0, [pc, #120]	; (90004848 <main+0x568>)
900047ce:	f009 ff37 	bl	9000e640 <osThreadNew>
900047d2:	4b1e      	ldr	r3, [pc, #120]	; (9000484c <main+0x56c>)
900047d4:	4605      	mov	r5, r0
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
900047d6:	4a1e      	ldr	r2, [pc, #120]	; (90004850 <main+0x570>)
900047d8:	4621      	mov	r1, r4
900047da:	481e      	ldr	r0, [pc, #120]	; (90004854 <main+0x574>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
900047dc:	601d      	str	r5, [r3, #0]
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
900047de:	f009 ff2f 	bl	9000e640 <osThreadNew>
900047e2:	4b1d      	ldr	r3, [pc, #116]	; (90004858 <main+0x578>)
900047e4:	6018      	str	r0, [r3, #0]
  osKernelStart();
900047e6:	f009 ff11 	bl	9000e60c <osKernelStart>
  while (1)
900047ea:	e7fe      	b.n	900047ea <main+0x50a>
900047ec:	2400cdc8 	.word	0x2400cdc8
900047f0:	52001000 	.word	0x52001000
900047f4:	2400d008 	.word	0x2400d008
900047f8:	52004140 	.word	0x52004140
900047fc:	52003000 	.word	0x52003000
90004800:	2400ce30 	.word	0x2400ce30
90004804:	2400cda4 	.word	0x2400cda4
90004808:	58024c00 	.word	0x58024c00
9000480c:	9002a008 	.word	0x9002a008
90004810:	900040ed 	.word	0x900040ed
90004814:	2400d03c 	.word	0x2400d03c
90004818:	90029fa8 	.word	0x90029fa8
9000481c:	2400cd98 	.word	0x2400cd98
90004820:	90029fc0 	.word	0x90029fc0
90004824:	9000408d 	.word	0x9000408d
90004828:	2400cd9c 	.word	0x2400cd9c
9000482c:	90029f60 	.word	0x90029f60
90004830:	9000040d 	.word	0x9000040d
90004834:	2400cd74 	.word	0x2400cd74
90004838:	9002a018 	.word	0x9002a018
9000483c:	900029f1 	.word	0x900029f1
90004840:	2400d040 	.word	0x2400d040
90004844:	90029fe4 	.word	0x90029fe4
90004848:	9000417d 	.word	0x9000417d
9000484c:	2400cda0 	.word	0x2400cda0
90004850:	90029f84 	.word	0x90029f84
90004854:	90004099 	.word	0x90004099
90004858:	2400cd94 	.word	0x2400cd94

9000485c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
9000485c:	4b03      	ldr	r3, [pc, #12]	; (9000486c <HAL_TIM_PeriodElapsedCallback+0x10>)
9000485e:	6802      	ldr	r2, [r0, #0]
90004860:	429a      	cmp	r2, r3
90004862:	d000      	beq.n	90004866 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004864:	4770      	bx	lr
    HAL_IncTick();
90004866:	f004 bde3 	b.w	90009430 <HAL_IncTick>
9000486a:	bf00      	nop
9000486c:	40001000 	.word	0x40001000

90004870 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004870:	4770      	bx	lr
90004872:	bf00      	nop

90004874 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004874:	4b0b      	ldr	r3, [pc, #44]	; (900048a4 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004876:	2200      	movs	r2, #0
90004878:	210f      	movs	r1, #15
9000487a:	f06f 0001 	mvn.w	r0, #1
{
9000487e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004880:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004884:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004886:	f044 0402 	orr.w	r4, r4, #2
9000488a:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
9000488e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90004892:	f003 0302 	and.w	r3, r3, #2
90004896:	9301      	str	r3, [sp, #4]
90004898:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000489a:	b003      	add	sp, #12
9000489c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900048a0:	f004 bdf0 	b.w	90009484 <HAL_NVIC_SetPriority>
900048a4:	58024400 	.word	0x58024400

900048a8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
900048a8:	4b0a      	ldr	r3, [pc, #40]	; (900048d4 <HAL_CRC_MspInit+0x2c>)
900048aa:	6802      	ldr	r2, [r0, #0]
900048ac:	429a      	cmp	r2, r3
900048ae:	d000      	beq.n	900048b2 <HAL_CRC_MspInit+0xa>
900048b0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
900048b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
900048b6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
900048b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900048bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
900048c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900048c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900048c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900048cc:	9301      	str	r3, [sp, #4]
900048ce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
900048d0:	b002      	add	sp, #8
900048d2:	4770      	bx	lr
900048d4:	58024c00 	.word	0x58024c00

900048d8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
900048d8:	4b0f      	ldr	r3, [pc, #60]	; (90004918 <HAL_DMA2D_MspInit+0x40>)
900048da:	6802      	ldr	r2, [r0, #0]
900048dc:	429a      	cmp	r2, r3
900048de:	d000      	beq.n	900048e2 <HAL_DMA2D_MspInit+0xa>
900048e0:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048e2:	4b0e      	ldr	r3, [pc, #56]	; (9000491c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900048e4:	205a      	movs	r0, #90	; 0x5a
900048e6:	2200      	movs	r2, #0
900048e8:	2105      	movs	r1, #5
{
900048ea:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048ec:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
900048f0:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048f2:	f044 0410 	orr.w	r4, r4, #16
900048f6:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
900048fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
900048fe:	f003 0310 	and.w	r3, r3, #16
90004902:	9301      	str	r3, [sp, #4]
90004904:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004906:	f004 fdbd 	bl	90009484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
9000490a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
9000490c:	b002      	add	sp, #8
9000490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90004912:	f004 bdf5 	b.w	90009500 <HAL_NVIC_EnableIRQ>
90004916:	bf00      	nop
90004918:	52001000 	.word	0x52001000
9000491c:	58024400 	.word	0x58024400

90004920 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
90004920:	4b3f      	ldr	r3, [pc, #252]	; (90004a20 <HAL_JPEG_MspInit+0x100>)
90004922:	6802      	ldr	r2, [r0, #0]
90004924:	429a      	cmp	r2, r3
90004926:	d000      	beq.n	9000492a <HAL_JPEG_MspInit+0xa>
90004928:	4770      	bx	lr
{
9000492a:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
9000492c:	4b3d      	ldr	r3, [pc, #244]	; (90004a24 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
9000492e:	2211      	movs	r2, #17
90004930:	4e3d      	ldr	r6, [pc, #244]	; (90004a28 <HAL_JPEG_MspInit+0x108>)
{
90004932:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004934:	4d3d      	ldr	r5, [pc, #244]	; (90004a2c <HAL_JPEG_MspInit+0x10c>)
90004936:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90004938:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000493a:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
9000493c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004940:	493b      	ldr	r1, [pc, #236]	; (90004a30 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90004942:	f042 0220 	orr.w	r2, r2, #32
90004946:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000494a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
9000494c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90004950:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004952:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004956:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004958:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000495a:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
9000495c:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
9000495e:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004960:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90004968:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000496a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
9000496c:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004970:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004974:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90004976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000497a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
9000497e:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004982:	2313      	movs	r3, #19
90004984:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90004986:	2302      	movs	r3, #2
90004988:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000498a:	f007 fbd5 	bl	9000c138 <HAL_MDMA_Init>
9000498e:	2800      	cmp	r0, #0
90004990:	d13a      	bne.n	90004a08 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90004992:	2200      	movs	r2, #0
90004994:	4824      	ldr	r0, [pc, #144]	; (90004a28 <HAL_JPEG_MspInit+0x108>)
90004996:	4611      	mov	r1, r2
90004998:	f007 fc6c 	bl	9000c274 <HAL_MDMA_ConfigPostRequestMask>
9000499c:	2800      	cmp	r0, #0
9000499e:	d13c      	bne.n	90004a1a <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900049a0:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900049a2:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900049a4:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900049a6:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900049a8:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
900049aa:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900049ac:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
900049b0:	4920      	ldr	r1, [pc, #128]	; (90004a34 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900049b2:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
900049b4:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
900049b6:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900049b8:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900049ba:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
900049be:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
900049c2:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
900049c4:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
900049c6:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
900049ca:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
900049cc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900049d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900049d4:	4815      	ldr	r0, [pc, #84]	; (90004a2c <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
900049d6:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
900049d8:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900049da:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900049dc:	f007 fbac 	bl	9000c138 <HAL_MDMA_Init>
900049e0:	b9c0      	cbnz	r0, 90004a14 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
900049e2:	2200      	movs	r2, #0
900049e4:	4811      	ldr	r0, [pc, #68]	; (90004a2c <HAL_JPEG_MspInit+0x10c>)
900049e6:	4611      	mov	r1, r2
900049e8:	f007 fc44 	bl	9000c274 <HAL_MDMA_ConfigPostRequestMask>
900049ec:	b978      	cbnz	r0, 90004a0e <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900049ee:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900049f0:	2079      	movs	r0, #121	; 0x79
900049f2:	2200      	movs	r2, #0
900049f4:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900049f6:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900049f8:	f004 fd44 	bl	90009484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900049fc:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
900049fe:	b002      	add	sp, #8
90004a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004a04:	f004 bd7c 	b.w	90009500 <HAL_NVIC_EnableIRQ>
      Error_Handler();
90004a08:	f7ff ff32 	bl	90004870 <Error_Handler>
90004a0c:	e7c1      	b.n	90004992 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
90004a0e:	f7ff ff2f 	bl	90004870 <Error_Handler>
90004a12:	e7ec      	b.n	900049ee <HAL_JPEG_MspInit+0xce>
      Error_Handler();
90004a14:	f7ff ff2c 	bl	90004870 <Error_Handler>
90004a18:	e7e3      	b.n	900049e2 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
90004a1a:	f7ff ff29 	bl	90004870 <Error_Handler>
90004a1e:	e7bf      	b.n	900049a0 <HAL_JPEG_MspInit+0x80>
90004a20:	52003000 	.word	0x52003000
90004a24:	58024400 	.word	0x58024400
90004a28:	2400cf30 	.word	0x2400cf30
90004a2c:	2400cf9c 	.word	0x2400cf9c
90004a30:	52000200 	.word	0x52000200
90004a34:	520001c0 	.word	0x520001c0

90004a38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90004a38:	b570      	push	{r4, r5, r6, lr}
90004a3a:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a3c:	2100      	movs	r1, #0
{
90004a3e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a40:	22c0      	movs	r2, #192	; 0xc0
90004a42:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a44:	9109      	str	r1, [sp, #36]	; 0x24
90004a46:	e9cd 1105 	strd	r1, r1, [sp, #20]
90004a4a:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a4e:	f022 fe35 	bl	900276bc <memset>
  if(hltdc->Instance==LTDC)
90004a52:	4b4a      	ldr	r3, [pc, #296]	; (90004b7c <HAL_LTDC_MspInit+0x144>)
90004a54:	6822      	ldr	r2, [r4, #0]
90004a56:	429a      	cmp	r2, r3
90004a58:	d001      	beq.n	90004a5e <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004a5a:	b03a      	add	sp, #232	; 0xe8
90004a5c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004a5e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004a60:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a62:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
90004a66:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004a68:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004a6a:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004a6c:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a6e:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90004a70:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a76:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004a78:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a7a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a7e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a82:	f008 fc89 	bl	9000d398 <HAL_RCCEx_PeriphCLKConfig>
90004a86:	2800      	cmp	r0, #0
90004a88:	d174      	bne.n	90004b74 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a8a:	4b3d      	ldr	r3, [pc, #244]	; (90004b80 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a8c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a8e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a90:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a92:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004a96:	a905      	add	r1, sp, #20
90004a98:	483a      	ldr	r0, [pc, #232]	; (90004b84 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a9a:	f042 0208 	orr.w	r2, r2, #8
90004a9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004aa2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004aa6:	f002 0208 	and.w	r2, r2, #8
90004aaa:	9200      	str	r2, [sp, #0]
90004aac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004aae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004ab6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004aba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004abe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004ac2:	9201      	str	r2, [sp, #4]
90004ac4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004ac6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004ace:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004ad2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004ad6:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004ada:	9202      	str	r2, [sp, #8]
90004adc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004ade:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004ae6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004aea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004aee:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004af2:	9203      	str	r2, [sp, #12]
90004af4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004af6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90004afe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004b06:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b0c:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004b10:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b12:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004b14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b16:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004b1a:	f004 ff1f 	bl	9000995c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004b1e:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004b22:	a905      	add	r1, sp, #20
90004b24:	4818      	ldr	r0, [pc, #96]	; (90004b88 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004b26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b28:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b2c:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004b30:	f004 ff14 	bl	9000995c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004b34:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004b38:	a905      	add	r1, sp, #20
90004b3a:	4814      	ldr	r0, [pc, #80]	; (90004b8c <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004b3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b42:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004b46:	f004 ff09 	bl	9000995c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b4e:	a905      	add	r1, sp, #20
90004b50:	480f      	ldr	r0, [pc, #60]	; (90004b90 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b52:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b54:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004b58:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b5c:	f004 fefe 	bl	9000995c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004b60:	462a      	mov	r2, r5
90004b62:	2105      	movs	r1, #5
90004b64:	2058      	movs	r0, #88	; 0x58
90004b66:	f004 fc8d 	bl	90009484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004b6a:	2058      	movs	r0, #88	; 0x58
90004b6c:	f004 fcc8 	bl	90009500 <HAL_NVIC_EnableIRQ>
}
90004b70:	b03a      	add	sp, #232	; 0xe8
90004b72:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004b74:	f7ff fe7c 	bl	90004870 <Error_Handler>
90004b78:	e787      	b.n	90004a8a <HAL_LTDC_MspInit+0x52>
90004b7a:	bf00      	nop
90004b7c:	50001000 	.word	0x50001000
90004b80:	58024400 	.word	0x58024400
90004b84:	58022800 	.word	0x58022800
90004b88:	58022000 	.word	0x58022000
90004b8c:	58022400 	.word	0x58022400
90004b90:	58021c00 	.word	0x58021c00

90004b94 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004b94:	4836      	ldr	r0, [pc, #216]	; (90004c70 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b96:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b98:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004b9a:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b9c:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004ba2:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004ba6:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004ba8:	b109      	cbz	r1, 90004bae <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004baa:	b038      	add	sp, #224	; 0xe0
90004bac:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004bae:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004bb0:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004bb2:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004bb4:	a80a      	add	r0, sp, #40	; 0x28
90004bb6:	f022 fd81 	bl	900276bc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004bbe:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004bc0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004bc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004bc6:	f008 fbe7 	bl	9000d398 <HAL_RCCEx_PeriphCLKConfig>
90004bca:	2800      	cmp	r0, #0
90004bcc:	d14c      	bne.n	90004c68 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004bce:	4b29      	ldr	r3, [pc, #164]	; (90004c74 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bd0:	f64f 7083 	movw	r0, #65411	; 0xff83
90004bd4:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bd6:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004bd8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bdc:	2600      	movs	r6, #0
90004bde:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004be4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004be8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bec:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004bf6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004bf8:	a902      	add	r1, sp, #8
90004bfa:	481f      	ldr	r0, [pc, #124]	; (90004c78 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004bfc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004c02:	f004 feab 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c06:	f248 1233 	movw	r2, #33075	; 0x8133
90004c0a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c0c:	a902      	add	r1, sp, #8
90004c0e:	481b      	ldr	r0, [pc, #108]	; (90004c7c <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c10:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c12:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c16:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c1a:	f004 fe9f 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c1e:	f24c 7203 	movw	r2, #50947	; 0xc703
90004c22:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004c24:	a902      	add	r1, sp, #8
90004c26:	4816      	ldr	r0, [pc, #88]	; (90004c80 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c28:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004c32:	f004 fe93 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c36:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004c3a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c3c:	a902      	add	r1, sp, #8
90004c3e:	4811      	ldr	r0, [pc, #68]	; (90004c84 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c40:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c42:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c46:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c4a:	f004 fe87 	bl	9000995c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c4e:	22e0      	movs	r2, #224	; 0xe0
90004c50:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004c52:	a902      	add	r1, sp, #8
90004c54:	480c      	ldr	r0, [pc, #48]	; (90004c88 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c58:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004c60:	f004 fe7c 	bl	9000995c <HAL_GPIO_Init>
}
90004c64:	b038      	add	sp, #224	; 0xe0
90004c66:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004c68:	f7ff fe02 	bl	90004870 <Error_Handler>
90004c6c:	e7af      	b.n	90004bce <HAL_SDRAM_MspInit+0x3a>
90004c6e:	bf00      	nop
90004c70:	2400d048 	.word	0x2400d048
90004c74:	58024400 	.word	0x58024400
90004c78:	58021000 	.word	0x58021000
90004c7c:	58021800 	.word	0x58021800
90004c80:	58020c00 	.word	0x58020c00
90004c84:	58021400 	.word	0x58021400
90004c88:	58021c00 	.word	0x58021c00

90004c8c <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004c8c:	4b13      	ldr	r3, [pc, #76]	; (90004cdc <HAL_SDRAM_MspDeInit+0x50>)
90004c8e:	681a      	ldr	r2, [r3, #0]
90004c90:	b102      	cbz	r2, 90004c94 <HAL_SDRAM_MspDeInit+0x8>
90004c92:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004c94:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004c96:	4a12      	ldr	r2, [pc, #72]	; (90004ce0 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004c98:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c9a:	f64f 7183 	movw	r1, #65411	; 0xff83
90004c9e:	4811      	ldr	r0, [pc, #68]	; (90004ce4 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004ca0:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004ca2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004caa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004cae:	f004 ff87 	bl	90009bc0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004cb2:	f248 1133 	movw	r1, #33075	; 0x8133
90004cb6:	480c      	ldr	r0, [pc, #48]	; (90004ce8 <HAL_SDRAM_MspDeInit+0x5c>)
90004cb8:	f004 ff82 	bl	90009bc0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004cbc:	f24c 7103 	movw	r1, #50947	; 0xc703
90004cc0:	480a      	ldr	r0, [pc, #40]	; (90004cec <HAL_SDRAM_MspDeInit+0x60>)
90004cc2:	f004 ff7d 	bl	90009bc0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004cc6:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004cca:	4809      	ldr	r0, [pc, #36]	; (90004cf0 <HAL_SDRAM_MspDeInit+0x64>)
90004ccc:	f004 ff78 	bl	90009bc0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004cd0:	21e0      	movs	r1, #224	; 0xe0
90004cd2:	4808      	ldr	r0, [pc, #32]	; (90004cf4 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004cd8:	f004 bf72 	b.w	90009bc0 <HAL_GPIO_DeInit>
90004cdc:	2400d044 	.word	0x2400d044
90004ce0:	58024400 	.word	0x58024400
90004ce4:	58021000 	.word	0x58021000
90004ce8:	58021800 	.word	0x58021800
90004cec:	58020c00 	.word	0x58020c00
90004cf0:	58021400 	.word	0x58021400
90004cf4:	58021c00 	.word	0x58021c00

90004cf8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004cf8:	280f      	cmp	r0, #15
90004cfa:	d901      	bls.n	90004d00 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004cfc:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004cfe:	4770      	bx	lr
{
90004d00:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d02:	4601      	mov	r1, r0
{
90004d04:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d06:	2200      	movs	r2, #0
90004d08:	4604      	mov	r4, r0
90004d0a:	2036      	movs	r0, #54	; 0x36
90004d0c:	f004 fbba 	bl	90009484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004d10:	2036      	movs	r0, #54	; 0x36
90004d12:	f004 fbf5 	bl	90009500 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d16:	4b1a      	ldr	r3, [pc, #104]	; (90004d80 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004d18:	4a1a      	ldr	r2, [pc, #104]	; (90004d84 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004d1a:	4669      	mov	r1, sp
90004d1c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004d1e:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d20:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004d24:	f042 0210 	orr.w	r2, r2, #16
90004d28:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004d30:	f003 0310 	and.w	r3, r3, #16
90004d34:	9301      	str	r3, [sp, #4]
90004d36:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004d38:	f008 fa0e 	bl	9000d158 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004d3c:	9b07      	ldr	r3, [sp, #28]
90004d3e:	b9bb      	cbnz	r3, 90004d70 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004d40:	f008 f97a 	bl	9000d038 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d44:	4b10      	ldr	r3, [pc, #64]	; (90004d88 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004d46:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004d48:	4c10      	ldr	r4, [pc, #64]	; (90004d8c <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d4a:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004d4e:	4d10      	ldr	r5, [pc, #64]	; (90004d90 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004d50:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004d54:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d56:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004d58:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004d5a:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d5c:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004d5e:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004d62:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004d64:	f009 f98a 	bl	9000e07c <HAL_TIM_Base_Init>
90004d68:	b130      	cbz	r0, 90004d78 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004d6a:	2001      	movs	r0, #1
}
90004d6c:	b00b      	add	sp, #44	; 0x2c
90004d6e:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004d70:	f008 f962 	bl	9000d038 <HAL_RCC_GetPCLK1Freq>
90004d74:	0040      	lsls	r0, r0, #1
90004d76:	e7e5      	b.n	90004d44 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004d78:	4620      	mov	r0, r4
90004d7a:	f009 fa35 	bl	9000e1e8 <HAL_TIM_Base_Start_IT>
90004d7e:	e7f5      	b.n	90004d6c <HAL_InitTick+0x74>
90004d80:	58024400 	.word	0x58024400
90004d84:	24000060 	.word	0x24000060
90004d88:	431bde83 	.word	0x431bde83
90004d8c:	2400d04c 	.word	0x2400d04c
90004d90:	40001000 	.word	0x40001000

90004d94 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004d94:	4770      	bx	lr
90004d96:	bf00      	nop

90004d98 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004d98:	e7fe      	b.n	90004d98 <HardFault_Handler>
90004d9a:	bf00      	nop

90004d9c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004d9c:	e7fe      	b.n	90004d9c <MemManage_Handler>
90004d9e:	bf00      	nop

90004da0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004da0:	e7fe      	b.n	90004da0 <BusFault_Handler>
90004da2:	bf00      	nop

90004da4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004da4:	e7fe      	b.n	90004da4 <UsageFault_Handler>
90004da6:	bf00      	nop

90004da8 <DebugMon_Handler>:
90004da8:	4770      	bx	lr
90004daa:	bf00      	nop

90004dac <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004dac:	4801      	ldr	r0, [pc, #4]	; (90004db4 <TIM6_DAC_IRQHandler+0x8>)
90004dae:	f009 ba7f 	b.w	9000e2b0 <HAL_TIM_IRQHandler>
90004db2:	bf00      	nop
90004db4:	2400d04c 	.word	0x2400d04c

90004db8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004db8:	4801      	ldr	r0, [pc, #4]	; (90004dc0 <LTDC_IRQHandler+0x8>)
90004dba:	f007 b867 	b.w	9000be8c <HAL_LTDC_IRQHandler>
90004dbe:	bf00      	nop
90004dc0:	2400ce88 	.word	0x2400ce88

90004dc4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004dc4:	4801      	ldr	r0, [pc, #4]	; (90004dcc <DMA2D_IRQHandler+0x8>)
90004dc6:	f004 bcc5 	b.w	90009754 <HAL_DMA2D_IRQHandler>
90004dca:	bf00      	nop
90004dcc:	2400cdc8 	.word	0x2400cdc8

90004dd0 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004dd0:	4801      	ldr	r0, [pc, #4]	; (90004dd8 <JPEG_IRQHandler+0x8>)
90004dd2:	f006 bf47 	b.w	9000bc64 <HAL_JPEG_IRQHandler>
90004dd6:	bf00      	nop
90004dd8:	2400ce30 	.word	0x2400ce30

90004ddc <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004ddc:	4804      	ldr	r0, [pc, #16]	; (90004df0 <MDMA_IRQHandler+0x14>)
{
90004dde:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004de0:	f007 fb08 	bl	9000c3f4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004de4:	4803      	ldr	r0, [pc, #12]	; (90004df4 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004dea:	f007 bb03 	b.w	9000c3f4 <HAL_MDMA_IRQHandler>
90004dee:	bf00      	nop
90004df0:	2400cf9c 	.word	0x2400cf9c
90004df4:	2400cf30 	.word	0x2400cf30

90004df8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004df8:	2001      	movs	r0, #1
90004dfa:	4770      	bx	lr

90004dfc <_kill>:

int _kill(int pid, int sig)
{
90004dfc:	b508      	push	{r3, lr}
	errno = EINVAL;
90004dfe:	f022 fd11 	bl	90027824 <__errno>
90004e02:	2216      	movs	r2, #22
90004e04:	4603      	mov	r3, r0
	return -1;
}
90004e06:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004e0a:	601a      	str	r2, [r3, #0]
}
90004e0c:	bd08      	pop	{r3, pc}
90004e0e:	bf00      	nop

90004e10 <_exit>:

void _exit (int status)
{
90004e10:	b508      	push	{r3, lr}
	errno = EINVAL;
90004e12:	f022 fd07 	bl	90027824 <__errno>
90004e16:	2316      	movs	r3, #22
90004e18:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004e1a:	e7fe      	b.n	90004e1a <_exit+0xa>

90004e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004e1c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e1e:	1e16      	subs	r6, r2, #0
90004e20:	dd07      	ble.n	90004e32 <_read+0x16>
90004e22:	460c      	mov	r4, r1
90004e24:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004e26:	f3af 8000 	nop.w
90004e2a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e2e:	42a5      	cmp	r5, r4
90004e30:	d1f9      	bne.n	90004e26 <_read+0xa>
	}

return len;
}
90004e32:	4630      	mov	r0, r6
90004e34:	bd70      	pop	{r4, r5, r6, pc}
90004e36:	bf00      	nop

90004e38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004e38:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e3a:	1e16      	subs	r6, r2, #0
90004e3c:	dd07      	ble.n	90004e4e <_write+0x16>
90004e3e:	460c      	mov	r4, r1
90004e40:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004e42:	f814 0b01 	ldrb.w	r0, [r4], #1
90004e46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e4a:	42ac      	cmp	r4, r5
90004e4c:	d1f9      	bne.n	90004e42 <_write+0xa>
	}
	return len;
}
90004e4e:	4630      	mov	r0, r6
90004e50:	bd70      	pop	{r4, r5, r6, pc}
90004e52:	bf00      	nop

90004e54 <_close>:

int _close(int file)
{
	return -1;
}
90004e54:	f04f 30ff 	mov.w	r0, #4294967295
90004e58:	4770      	bx	lr
90004e5a:	bf00      	nop

90004e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004e60:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004e62:	604b      	str	r3, [r1, #4]
}
90004e64:	4770      	bx	lr
90004e66:	bf00      	nop

90004e68 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004e68:	2001      	movs	r0, #1
90004e6a:	4770      	bx	lr

90004e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004e6c:	2000      	movs	r0, #0
90004e6e:	4770      	bx	lr

90004e70 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004e70:	4a0a      	ldr	r2, [pc, #40]	; (90004e9c <_sbrk+0x2c>)
{
90004e72:	b508      	push	{r3, lr}
90004e74:	4603      	mov	r3, r0
	if (heap_end == 0)
90004e76:	6810      	ldr	r0, [r2, #0]
90004e78:	b128      	cbz	r0, 90004e86 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004e7a:	4403      	add	r3, r0
90004e7c:	4669      	mov	r1, sp
90004e7e:	428b      	cmp	r3, r1
90004e80:	d805      	bhi.n	90004e8e <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004e82:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004e84:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004e86:	4906      	ldr	r1, [pc, #24]	; (90004ea0 <_sbrk+0x30>)
90004e88:	4608      	mov	r0, r1
90004e8a:	6011      	str	r1, [r2, #0]
90004e8c:	e7f5      	b.n	90004e7a <_sbrk+0xa>
		errno = ENOMEM;
90004e8e:	f022 fcc9 	bl	90027824 <__errno>
90004e92:	220c      	movs	r2, #12
90004e94:	4603      	mov	r3, r0
		return NULL;
90004e96:	2000      	movs	r0, #0
		errno = ENOMEM;
90004e98:	601a      	str	r2, [r3, #0]
}
90004e9a:	bd08      	pop	{r3, pc}
90004e9c:	2400d098 	.word	0x2400d098
90004ea0:	24028580 	.word	0x24028580

90004ea4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004ea4:	4770      	bx	lr
90004ea6:	bf00      	nop

90004ea8 <_ZN23ApplicationFontProviderD0Ev>:
90004ea8:	b510      	push	{r4, lr}
90004eaa:	4604      	mov	r4, r0
90004eac:	2104      	movs	r1, #4
90004eae:	f022 f922 	bl	900270f6 <_ZdlPvj>
90004eb2:	4620      	mov	r0, r4
90004eb4:	bd10      	pop	{r4, pc}
90004eb6:	bf00      	nop

90004eb8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004eb8:	2901      	cmp	r1, #1
{
90004eba:	b508      	push	{r3, lr}
    switch (typography)
90004ebc:	d004      	beq.n	90004ec8 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004ebe:	2902      	cmp	r1, #2
90004ec0:	d00a      	beq.n	90004ed8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004ec2:	b129      	cbz	r1, 90004ed0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004ec4:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004ec6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004ec8:	f002 ff80 	bl	90007dcc <_ZN17TypedTextDatabase8getFontsEv>
90004ecc:	6840      	ldr	r0, [r0, #4]
}
90004ece:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004ed0:	f002 ff7c 	bl	90007dcc <_ZN17TypedTextDatabase8getFontsEv>
90004ed4:	6800      	ldr	r0, [r0, #0]
}
90004ed6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004ed8:	f002 ff78 	bl	90007dcc <_ZN17TypedTextDatabase8getFontsEv>
90004edc:	6880      	ldr	r0, [r0, #8]
}
90004ede:	bd08      	pop	{r3, pc}

90004ee0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004ee0:	4800      	ldr	r0, [pc, #0]	; (90004ee4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004ee2:	4770      	bx	lr
90004ee4:	9002a050 	.word	0x9002a050

90004ee8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004ee8:	2016      	movs	r0, #22
90004eea:	4770      	bx	lr

90004eec <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004eec:	b169      	cbz	r1, 90004f0a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004eee:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004ef0:	b530      	push	{r4, r5, lr}
90004ef2:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004ef4:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004ef6:	6895      	ldr	r5, [r2, #8]
90004ef8:	f10d 0303 	add.w	r3, sp, #3
90004efc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004efe:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004f00:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f04:	47a8      	blx	r5
        return glyph;
    }
90004f06:	b003      	add	sp, #12
90004f08:	bd30      	pop	{r4, r5, pc}
            return 0;
90004f0a:	4608      	mov	r0, r1
    }
90004f0c:	4770      	bx	lr
90004f0e:	bf00      	nop

90004f10 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004f10:	89c0      	ldrh	r0, [r0, #14]
90004f12:	4770      	bx	lr

90004f14 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004f14:	8a00      	ldrh	r0, [r0, #16]
90004f16:	4770      	bx	lr

90004f18 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004f18:	88c0      	ldrh	r0, [r0, #6]
90004f1a:	4770      	bx	lr

90004f1c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004f1c:	8880      	ldrh	r0, [r0, #4]
90004f1e:	4770      	bx	lr

90004f20 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004f20:	7a80      	ldrb	r0, [r0, #10]
    }
90004f22:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004f26:	4770      	bx	lr

90004f28 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004f28:	7a80      	ldrb	r0, [r0, #10]
    }
90004f2a:	09c0      	lsrs	r0, r0, #7
90004f2c:	4770      	bx	lr
90004f2e:	bf00      	nop

90004f30 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004f30:	4770      	bx	lr
90004f32:	bf00      	nop

90004f34 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004f34:	b510      	push	{r4, lr}
90004f36:	4604      	mov	r4, r0
    }
90004f38:	2108      	movs	r1, #8
90004f3a:	f022 f8dc 	bl	900270f6 <_ZdlPvj>
90004f3e:	4620      	mov	r0, r4
90004f40:	bd10      	pop	{r4, pc}
90004f42:	bf00      	nop

90004f44 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004f44:	4770      	bx	lr
90004f46:	bf00      	nop

90004f48 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004f48:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004f4c:	6808      	ldr	r0, [r1, #0]
90004f4e:	6849      	ldr	r1, [r1, #4]
90004f50:	c303      	stmia	r3!, {r0, r1}
    }
90004f52:	4770      	bx	lr

90004f54 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
90004f54:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004f56:	4770      	bx	lr

90004f58 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004f58:	4770      	bx	lr
90004f5a:	bf00      	nop

90004f5c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004f5c:	4770      	bx	lr
90004f5e:	bf00      	nop

90004f60 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004f60:	6041      	str	r1, [r0, #4]
    }
90004f62:	4770      	bx	lr

90004f64 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004f64:	4770      	bx	lr
90004f66:	bf00      	nop

90004f68 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f68:	4905      	ldr	r1, [pc, #20]	; (90004f80 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004f6a:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004f6c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004f70:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004f74:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004f78:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004f7c:	4770      	bx	lr
90004f7e:	bf00      	nop
90004f80:	90005265 	.word	0x90005265

90004f84 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004f84:	2301      	movs	r3, #1
90004f86:	7203      	strb	r3, [r0, #8]
    }
90004f88:	4770      	bx	lr
90004f8a:	bf00      	nop

90004f8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
90004f8c:	4770      	bx	lr
90004f8e:	bf00      	nop

90004f90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
90004f90:	4770      	bx	lr
90004f92:	bf00      	nop

90004f94 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004f94:	4770      	bx	lr
90004f96:	bf00      	nop

90004f98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004f98:	4770      	bx	lr
90004f9a:	bf00      	nop

90004f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004f9c:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004f9e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004fa0:	6841      	ldr	r1, [r0, #4]
90004fa2:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004fa6:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004faa:	07d2      	lsls	r2, r2, #31
90004fac:	d401      	bmi.n	90004fb2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004fae:	689b      	ldr	r3, [r3, #8]
90004fb0:	4718      	bx	r3
90004fb2:	f851 200c 	ldr.w	r2, [r1, ip]
90004fb6:	689b      	ldr	r3, [r3, #8]
90004fb8:	58d3      	ldr	r3, [r2, r3]
90004fba:	4718      	bx	r3

90004fbc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004fbc:	6843      	ldr	r3, [r0, #4]
90004fbe:	b13b      	cbz	r3, 90004fd0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004fc0:	6883      	ldr	r3, [r0, #8]
90004fc2:	b10b      	cbz	r3, 90004fc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004fc4:	2001      	movs	r0, #1
    }
90004fc6:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004fc8:	68c0      	ldr	r0, [r0, #12]
90004fca:	f000 0001 	and.w	r0, r0, #1
90004fce:	4770      	bx	lr
90004fd0:	4618      	mov	r0, r3
90004fd2:	4770      	bx	lr

90004fd4 <_ZN8touchgfx12NoTransitionD0Ev>:
90004fd4:	b510      	push	{r4, lr}
90004fd6:	4604      	mov	r4, r0
90004fd8:	210c      	movs	r1, #12
90004fda:	f022 f88c 	bl	900270f6 <_ZdlPvj>
90004fde:	4620      	mov	r0, r4
90004fe0:	bd10      	pop	{r4, pc}
90004fe2:	bf00      	nop

90004fe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004fe4:	b510      	push	{r4, lr}
90004fe6:	4604      	mov	r4, r0
90004fe8:	2110      	movs	r1, #16
90004fea:	f022 f884 	bl	900270f6 <_ZdlPvj>
90004fee:	4620      	mov	r0, r4
90004ff0:	bd10      	pop	{r4, pc}
90004ff2:	bf00      	nop

90004ff4 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004ff4:	b510      	push	{r4, lr}
90004ff6:	4604      	mov	r4, r0
90004ff8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004ffc:	f022 f87b 	bl	900270f6 <_ZdlPvj>
90005000:	4620      	mov	r0, r4
90005002:	bd10      	pop	{r4, pc}

90005004 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
90005004:	b510      	push	{r4, lr}
90005006:	4604      	mov	r4, r0
90005008:	2140      	movs	r1, #64	; 0x40
9000500a:	f022 f874 	bl	900270f6 <_ZdlPvj>
9000500e:	4620      	mov	r0, r4
90005010:	bd10      	pop	{r4, pc}
90005012:	bf00      	nop

90005014 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
90005014:	b510      	push	{r4, lr}
90005016:	4604      	mov	r4, r0
90005018:	2140      	movs	r1, #64	; 0x40
9000501a:	f022 f86c 	bl	900270f6 <_ZdlPvj>
9000501e:	4620      	mov	r0, r4
90005020:	bd10      	pop	{r4, pc}
90005022:	bf00      	nop

90005024 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90005024:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90005026:	f012 fde9 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
    }
9000502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
9000502e:	f013 ba79 	b.w	90018524 <_ZN8touchgfx11Application10invalidateEv>
90005032:	bf00      	nop

90005034 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90005034:	4b05      	ldr	r3, [pc, #20]	; (9000504c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x18>)
90005036:	781b      	ldrb	r3, [r3, #0]
90005038:	b13b      	cbz	r3, 9000504a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
9000503a:	6843      	ldr	r3, [r0, #4]
9000503c:	b12b      	cbz	r3, 9000504a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
        {
            screenContainer->remove(snapshot);
9000503e:	681a      	ldr	r2, [r3, #0]
90005040:	f100 010c 	add.w	r1, r0, #12
90005044:	4618      	mov	r0, r3
90005046:	6e53      	ldr	r3, [r2, #100]	; 0x64
90005048:	4718      	bx	r3
        }
    }
9000504a:	4770      	bx	lr
9000504c:	24028193 	.word	0x24028193

90005050 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90005050:	4b05      	ldr	r3, [pc, #20]	; (90005068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
90005052:	781b      	ldrb	r3, [r3, #0]
90005054:	b13b      	cbz	r3, 90005066 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
90005056:	6843      	ldr	r3, [r0, #4]
90005058:	b12b      	cbz	r3, 90005066 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
            screenContainer->remove(snapshot);
9000505a:	681a      	ldr	r2, [r3, #0]
9000505c:	f100 010c 	add.w	r1, r0, #12
90005060:	4618      	mov	r0, r3
90005062:	6e53      	ldr	r3, [r2, #100]	; 0x64
90005064:	4718      	bx	r3
    }
90005066:	4770      	bx	lr
90005068:	24028193 	.word	0x24028193

9000506c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
9000506c:	b570      	push	{r4, r5, r6, lr}
9000506e:	4605      	mov	r5, r0
        animationCounter++;
90005070:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90005074:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
90005076:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
9000507a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
9000507c:	4298      	cmp	r0, r3
        animationCounter++;
9000507e:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
90005082:	d905      	bls.n	90005090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x24>
            done = true;
90005084:	2201      	movs	r2, #1
            animationCounter = 0;
90005086:	2300      	movs	r3, #0
            done = true;
90005088:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
9000508a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
9000508e:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
90005090:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
90005094:	2100      	movs	r1, #0
90005096:	f014 fb65 	bl	90019764 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
9000509a:	f010 0201 	ands.w	r2, r0, #1
9000509e:	b283      	uxth	r3, r0
900050a0:	d006      	beq.n	900050b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
900050a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
900050a6:	2800      	cmp	r0, #0
900050a8:	bfd8      	it	le
900050aa:	460a      	movle	r2, r1
900050ac:	4413      	add	r3, r2
900050ae:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
900050b0:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
900050b2:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
900050b4:	6802      	ldr	r2, [r0, #0]
900050b6:	4912      	ldr	r1, [pc, #72]	; (90005100 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
900050b8:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
900050ba:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
900050bc:	87ab      	strh	r3, [r5, #60]	; 0x3c
900050be:	428a      	cmp	r2, r1
900050c0:	d11b      	bne.n	900050fa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
        return firstChild;
900050c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900050c4:	b164      	cbz	r4, 900050e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
900050c6:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900050c8:	4e0e      	ldr	r6, [pc, #56]	; (90005104 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
900050ca:	6823      	ldr	r3, [r4, #0]
900050cc:	88a1      	ldrh	r1, [r4, #4]
900050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900050d0:	4411      	add	r1, r2
900050d2:	42b3      	cmp	r3, r6
900050d4:	b209      	sxth	r1, r1
        rect.x = x;
900050d6:	d109      	bne.n	900050ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
900050d8:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900050da:	69a4      	ldr	r4, [r4, #24]
        while (d)
900050dc:	2c00      	cmp	r4, #0
900050de:	d1f4      	bne.n	900050ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
900050e0:	6868      	ldr	r0, [r5, #4]
900050e2:	6803      	ldr	r3, [r0, #0]
    }
900050e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
900050e8:	695b      	ldr	r3, [r3, #20]
900050ea:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
900050ec:	4620      	mov	r0, r4
900050ee:	4798      	blx	r3
900050f0:	69a4      	ldr	r4, [r4, #24]
        while (d)
900050f2:	2c00      	cmp	r4, #0
900050f4:	d0f4      	beq.n	900050e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
900050f6:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900050f8:	e7e7      	b.n	900050ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
900050fa:	4790      	blx	r2
900050fc:	4604      	mov	r4, r0
900050fe:	e7e1      	b.n	900050c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
90005100:	90004f55 	.word	0x90004f55
90005104:	90002351 	.word	0x90002351

90005108 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
90005108:	b570      	push	{r4, r5, r6, lr}
9000510a:	4605      	mov	r5, r0
        animationCounter++;
9000510c:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90005110:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
90005112:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
90005116:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
90005118:	4298      	cmp	r0, r3
        animationCounter++;
9000511a:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
9000511e:	d905      	bls.n	9000512c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
90005120:	2201      	movs	r2, #1
            animationCounter = 0;
90005122:	2300      	movs	r3, #0
            done = true;
90005124:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
90005126:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
9000512a:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
9000512c:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
90005130:	2100      	movs	r1, #0
90005132:	f014 fb17 	bl	90019764 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
90005136:	f010 0201 	ands.w	r2, r0, #1
9000513a:	b283      	uxth	r3, r0
9000513c:	d006      	beq.n	9000514c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
9000513e:	f64f 71ff 	movw	r1, #65535	; 0xffff
90005142:	2800      	cmp	r0, #0
90005144:	bfd8      	it	le
90005146:	460a      	movle	r2, r1
90005148:	4413      	add	r3, r2
9000514a:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
9000514c:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
9000514e:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
90005150:	6802      	ldr	r2, [r0, #0]
90005152:	4912      	ldr	r1, [pc, #72]	; (9000519c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
90005154:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
90005156:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
90005158:	87ab      	strh	r3, [r5, #60]	; 0x3c
9000515a:	428a      	cmp	r2, r1
9000515c:	d11b      	bne.n	90005196 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
9000515e:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005160:	b164      	cbz	r4, 9000517c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
90005162:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005164:	4e0e      	ldr	r6, [pc, #56]	; (900051a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
90005166:	6823      	ldr	r3, [r4, #0]
90005168:	88a1      	ldrh	r1, [r4, #4]
9000516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000516c:	4411      	add	r1, r2
9000516e:	42b3      	cmp	r3, r6
90005170:	b209      	sxth	r1, r1
        rect.x = x;
90005172:	d109      	bne.n	90005188 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
90005174:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005176:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005178:	2c00      	cmp	r4, #0
9000517a:	d1f4      	bne.n	90005166 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
9000517c:	6868      	ldr	r0, [r5, #4]
9000517e:	6803      	ldr	r3, [r0, #0]
    }
90005180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
90005184:	695b      	ldr	r3, [r3, #20]
90005186:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
90005188:	4620      	mov	r0, r4
9000518a:	4798      	blx	r3
9000518c:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000518e:	2c00      	cmp	r4, #0
90005190:	d0f4      	beq.n	9000517c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
90005192:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005194:	e7e7      	b.n	90005166 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
90005196:	4790      	blx	r2
90005198:	4604      	mov	r4, r0
9000519a:	e7e1      	b.n	90005160 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
9000519c:	90004f55 	.word	0x90004f55
900051a0:	90002351 	.word	0x90002351

900051a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
900051a4:	7a03      	ldrb	r3, [r0, #8]
900051a6:	bb2b      	cbnz	r3, 900051f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x50>
900051a8:	4a14      	ldr	r2, [pc, #80]	; (900051fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x58>)
    virtual void init()
900051aa:	b570      	push	{r4, r5, r6, lr}
900051ac:	4605      	mov	r5, r0
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
900051ae:	6840      	ldr	r0, [r0, #4]
900051b0:	6803      	ldr	r3, [r0, #0]
900051b2:	69db      	ldr	r3, [r3, #28]
900051b4:	4293      	cmp	r3, r2
900051b6:	d11e      	bne.n	900051f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x52>
900051b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900051ba:	b164      	cbz	r4, 900051d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
900051bc:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051be:	4e10      	ldr	r6, [pc, #64]	; (90005200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x5c>)
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
900051c0:	6823      	ldr	r3, [r4, #0]
900051c2:	88a1      	ldrh	r1, [r4, #4]
900051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900051c6:	1a89      	subs	r1, r1, r2
900051c8:	42b3      	cmp	r3, r6
900051ca:	b209      	sxth	r1, r1
        rect.x = x;
900051cc:	d10b      	bne.n	900051e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x42>
900051ce:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900051d0:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051d2:	2c00      	cmp	r4, #0
900051d4:	d1f4      	bne.n	900051c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
900051d6:	6868      	ldr	r0, [r5, #4]
900051d8:	f105 010c 	add.w	r1, r5, #12
900051dc:	6803      	ldr	r3, [r0, #0]
    }
900051de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
900051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900051e4:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
900051e6:	4620      	mov	r0, r4
900051e8:	4798      	blx	r3
900051ea:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051ec:	2c00      	cmp	r4, #0
900051ee:	d0f2      	beq.n	900051d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
900051f0:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051f2:	e7e5      	b.n	900051c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
900051f4:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
900051f6:	4798      	blx	r3
900051f8:	4604      	mov	r4, r0
900051fa:	e7de      	b.n	900051ba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x16>
900051fc:	90004f55 	.word	0x90004f55
90005200:	90002351 	.word	0x90002351

90005204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
        if (done)
90005204:	7a03      	ldrb	r3, [r0, #8]
90005206:	bb2b      	cbnz	r3, 90005254 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x50>
90005208:	4a14      	ldr	r2, [pc, #80]	; (9000525c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x58>)
    virtual void init()
9000520a:	b570      	push	{r4, r5, r6, lr}
9000520c:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
9000520e:	6840      	ldr	r0, [r0, #4]
90005210:	6803      	ldr	r3, [r0, #0]
90005212:	69db      	ldr	r3, [r3, #28]
90005214:	4293      	cmp	r3, r2
90005216:	d11e      	bne.n	90005256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x52>
90005218:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000521a:	b164      	cbz	r4, 90005236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
9000521c:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
9000521e:	4e10      	ldr	r6, [pc, #64]	; (90005260 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x5c>)
                d->setX(d->getX() - targetValue);
90005220:	6823      	ldr	r3, [r4, #0]
90005222:	88a1      	ldrh	r1, [r4, #4]
90005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005226:	1a89      	subs	r1, r1, r2
90005228:	42b3      	cmp	r3, r6
9000522a:	b209      	sxth	r1, r1
        rect.x = x;
9000522c:	d10b      	bne.n	90005246 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x42>
9000522e:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005230:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005232:	2c00      	cmp	r4, #0
90005234:	d1f4      	bne.n	90005220 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
        screenContainer->add(snapshot);
90005236:	6868      	ldr	r0, [r5, #4]
90005238:	f105 010c 	add.w	r1, r5, #12
9000523c:	6803      	ldr	r3, [r0, #0]
    }
9000523e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
90005242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005244:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
90005246:	4620      	mov	r0, r4
90005248:	4798      	blx	r3
9000524a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000524c:	2c00      	cmp	r4, #0
9000524e:	d0f2      	beq.n	90005236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
90005250:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005252:	e7e5      	b.n	90005220 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
90005254:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
90005256:	4798      	blx	r3
90005258:	4604      	mov	r4, r0
9000525a:	e7de      	b.n	9000521a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x16>
9000525c:	90004f55 	.word	0x90004f55
90005260:	90002351 	.word	0x90002351

90005264 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005268:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
9000526c:	4607      	mov	r7, r0
9000526e:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005270:	68a0      	ldr	r0, [r4, #8]
90005272:	6803      	ldr	r3, [r0, #0]
90005274:	6a1b      	ldr	r3, [r3, #32]
90005276:	4798      	blx	r3
90005278:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
9000527c:	f0c0 809c 	bcc.w	900053b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005280:	6860      	ldr	r0, [r4, #4]
90005282:	6803      	ldr	r3, [r0, #0]
90005284:	6a1b      	ldr	r3, [r3, #32]
90005286:	4798      	blx	r3
90005288:	280f      	cmp	r0, #15
9000528a:	f240 80a1 	bls.w	900053d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000528e:	68e0      	ldr	r0, [r4, #12]
90005290:	6803      	ldr	r3, [r0, #0]
90005292:	6a1b      	ldr	r3, [r3, #32]
90005294:	4798      	blx	r3
90005296:	280b      	cmp	r0, #11
90005298:	f240 8094 	bls.w	900053c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
9000529c:	f8df 915c 	ldr.w	r9, [pc, #348]	; 900053fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
900052a0:	f012 fcac 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
900052a4:	3004      	adds	r0, #4
900052a6:	f012 fce7 	bl	90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900052aa:	f8d9 0000 	ldr.w	r0, [r9]
900052ae:	b140      	cbz	r0, 900052c2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->tearDown();
900052b0:	6803      	ldr	r3, [r0, #0]
900052b2:	68db      	ldr	r3, [r3, #12]
900052b4:	4798      	blx	r3
    if (*currentTrans)
900052b6:	f8d9 0000 	ldr.w	r0, [r9]
900052ba:	b110      	cbz	r0, 900052c2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->~Transition();
900052bc:	6803      	ldr	r3, [r0, #0]
900052be:	681b      	ldr	r3, [r3, #0]
900052c0:	4798      	blx	r3
    if (*currentScreen)
900052c2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 90005400 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
900052c6:	f8d8 0000 	ldr.w	r0, [r8]
900052ca:	2800      	cmp	r0, #0
900052cc:	d061      	beq.n	90005392 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
        (*currentScreen)->tearDownScreen();
900052ce:	6803      	ldr	r3, [r0, #0]
900052d0:	695b      	ldr	r3, [r3, #20]
900052d2:	4798      	blx	r3
    if (*currentPresenter)
900052d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900052d8:	2800      	cmp	r0, #0
900052da:	d055      	beq.n	90005388 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x124>
        (*currentPresenter)->deactivate();
900052dc:	6803      	ldr	r3, [r0, #0]
900052de:	685b      	ldr	r3, [r3, #4]
900052e0:	4798      	blx	r3
    if (*currentScreen)
900052e2:	f8d8 0000 	ldr.w	r0, [r8]
900052e6:	b110      	cbz	r0, 900052ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentScreen)->~Screen();
900052e8:	6803      	ldr	r3, [r0, #0]
900052ea:	681b      	ldr	r3, [r3, #0]
900052ec:	4798      	blx	r3
    if (*currentPresenter)
900052ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900052f2:	b110      	cbz	r0, 900052fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentPresenter)->~Presenter();
900052f4:	6803      	ldr	r3, [r0, #0]
900052f6:	689b      	ldr	r3, [r3, #8]
900052f8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
900052fa:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
900052fc:	2100      	movs	r1, #0
900052fe:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005300:	468b      	mov	fp, r1
90005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005304:	4798      	blx	r3
90005306:	4b35      	ldr	r3, [pc, #212]	; (900053dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
90005308:	4605      	mov	r5, r0
9000530a:	f8c0 b004 	str.w	fp, [r0, #4]
9000530e:	f880 b008 	strb.w	fp, [r0, #8]
90005312:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005314:	68a0      	ldr	r0, [r4, #8]
90005316:	602b      	str	r3, [r5, #0]
90005318:	6803      	ldr	r3, [r0, #0]
9000531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000531c:	4798      	blx	r3
9000531e:	4606      	mov	r6, r0
90005320:	f002 fe40 	bl	90007fa4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005324:	6860      	ldr	r0, [r4, #4]
90005326:	4659      	mov	r1, fp
90005328:	6803      	ldr	r3, [r0, #0]
9000532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000532c:	4798      	blx	r3
9000532e:	4604      	mov	r4, r0
90005330:	4631      	mov	r1, r6
90005332:	f002 fe0b 	bl	90007f4c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90005336:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
9000533a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
9000533e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90005342:	b35c      	cbz	r4, 9000539c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
90005344:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90005346:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
9000534a:	4630      	mov	r0, r6
9000534c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
9000534e:	f8c4 a008 	str.w	sl, [r4, #8]
90005352:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90005354:	63f4      	str	r4, [r6, #60]	; 0x3c
90005356:	4798      	blx	r3
    newPresenter->activate();
90005358:	6823      	ldr	r3, [r4, #0]
9000535a:	4620      	mov	r0, r4
9000535c:	681b      	ldr	r3, [r3, #0]
9000535e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90005360:	4629      	mov	r1, r5
90005362:	4630      	mov	r0, r6
90005364:	f014 f9f8 	bl	90019758 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90005368:	682b      	ldr	r3, [r5, #0]
9000536a:	491d      	ldr	r1, [pc, #116]	; (900053e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
9000536c:	691a      	ldr	r2, [r3, #16]
9000536e:	428a      	cmp	r2, r1
90005370:	d116      	bne.n	900053a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
90005372:	695b      	ldr	r3, [r3, #20]
90005374:	4a1b      	ldr	r2, [pc, #108]	; (900053e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
90005376:	4293      	cmp	r3, r2
90005378:	d119      	bne.n	900053ae <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14a>
        Application::getInstance()->invalidate();
9000537a:	f012 fc3f 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
}
9000537e:	b001      	add	sp, #4
90005380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005384:	f013 b8ce 	b.w	90018524 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90005388:	f8d8 0000 	ldr.w	r0, [r8]
9000538c:	2800      	cmp	r0, #0
9000538e:	d1ab      	bne.n	900052e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
90005390:	e7b3      	b.n	900052fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    if (*currentPresenter)
90005392:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90005396:	2800      	cmp	r0, #0
90005398:	d1a0      	bne.n	900052dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x78>
9000539a:	e7ae      	b.n	900052fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    model->bind(newPresenter);
9000539c:	4623      	mov	r3, r4
9000539e:	e7d2      	b.n	90005346 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe2>
    newTransition->init();
900053a0:	4628      	mov	r0, r5
900053a2:	4790      	blx	r2
    newTransition->invalidate();
900053a4:	682b      	ldr	r3, [r5, #0]
900053a6:	4a0f      	ldr	r2, [pc, #60]	; (900053e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
900053a8:	695b      	ldr	r3, [r3, #20]
900053aa:	4293      	cmp	r3, r2
900053ac:	d0e5      	beq.n	9000537a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x116>
900053ae:	4628      	mov	r0, r5
900053b0:	b001      	add	sp, #4
900053b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900053b6:	4718      	bx	r3
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900053b8:	4b0b      	ldr	r3, [pc, #44]	; (900053e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
900053ba:	21a3      	movs	r1, #163	; 0xa3
900053bc:	4a0b      	ldr	r2, [pc, #44]	; (900053ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900053be:	480c      	ldr	r0, [pc, #48]	; (900053f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
900053c0:	f021 fec8 	bl	90027154 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900053c4:	4b0b      	ldr	r3, [pc, #44]	; (900053f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
900053c6:	21a5      	movs	r1, #165	; 0xa5
900053c8:	4a08      	ldr	r2, [pc, #32]	; (900053ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900053ca:	4809      	ldr	r0, [pc, #36]	; (900053f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
900053cc:	f021 fec2 	bl	90027154 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900053d0:	4b09      	ldr	r3, [pc, #36]	; (900053f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
900053d2:	21a4      	movs	r1, #164	; 0xa4
900053d4:	4a05      	ldr	r2, [pc, #20]	; (900053ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900053d6:	4806      	ldr	r0, [pc, #24]	; (900053f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
900053d8:	f021 febc 	bl	90027154 <__assert_func>
900053dc:	9002a7d8 	.word	0x9002a7d8
900053e0:	90004f5d 	.word	0x90004f5d
900053e4:	90005025 	.word	0x90005025
900053e8:	9002a218 	.word	0x9002a218
900053ec:	9002a2a8 	.word	0x9002a2a8
900053f0:	9002a3ac 	.word	0x9002a3ac
900053f4:	9002a498 	.word	0x9002a498
900053f8:	9002a3f4 	.word	0x9002a3f4
900053fc:	240281dc 	.word	0x240281dc
90005400:	240281d8 	.word	0x240281d8

90005404 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
90005404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005408:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
9000540c:	4680      	mov	r8, r0
9000540e:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005410:	68a0      	ldr	r0, [r4, #8]
90005412:	6803      	ldr	r3, [r0, #0]
90005414:	6a1b      	ldr	r3, [r3, #32]
90005416:	4798      	blx	r3
90005418:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
9000541c:	f0c0 80de 	bcc.w	900055dc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d8>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005420:	6860      	ldr	r0, [r4, #4]
90005422:	6803      	ldr	r3, [r0, #0]
90005424:	6a1b      	ldr	r3, [r3, #32]
90005426:	4798      	blx	r3
90005428:	280f      	cmp	r0, #15
9000542a:	f240 80e3 	bls.w	900055f4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1f0>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000542e:	68e0      	ldr	r0, [r4, #12]
90005430:	6803      	ldr	r3, [r0, #0]
90005432:	6a1b      	ldr	r3, [r3, #32]
90005434:	4798      	blx	r3
90005436:	283f      	cmp	r0, #63	; 0x3f
90005438:	f240 80d6 	bls.w	900055e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1e4>
    if (*currentTrans)
9000543c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 90005634 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x230>
    Application::getInstance()->clearAllTimerWidgets();
90005440:	f012 fbdc 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90005444:	3004      	adds	r0, #4
90005446:	f012 fc17 	bl	90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
9000544a:	f8da 0000 	ldr.w	r0, [sl]
9000544e:	b140      	cbz	r0, 90005462 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->tearDown();
90005450:	6803      	ldr	r3, [r0, #0]
90005452:	68db      	ldr	r3, [r3, #12]
90005454:	4798      	blx	r3
    if (*currentTrans)
90005456:	f8da 0000 	ldr.w	r0, [sl]
9000545a:	b110      	cbz	r0, 90005462 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->~Transition();
9000545c:	6803      	ldr	r3, [r0, #0]
9000545e:	681b      	ldr	r3, [r3, #0]
90005460:	4798      	blx	r3
    if (*currentScreen)
90005462:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 90005638 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x234>
90005466:	f8d9 0000 	ldr.w	r0, [r9]
9000546a:	2800      	cmp	r0, #0
9000546c:	f000 80a2 	beq.w	900055b4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1b0>
        (*currentScreen)->tearDownScreen();
90005470:	6803      	ldr	r3, [r0, #0]
90005472:	695b      	ldr	r3, [r3, #20]
90005474:	4798      	blx	r3
    if (*currentPresenter)
90005476:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000547a:	2800      	cmp	r0, #0
9000547c:	d07f      	beq.n	9000557e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x17a>
        (*currentPresenter)->deactivate();
9000547e:	6803      	ldr	r3, [r0, #0]
90005480:	685b      	ldr	r3, [r3, #4]
90005482:	4798      	blx	r3
    if (*currentScreen)
90005484:	f8d9 0000 	ldr.w	r0, [r9]
90005488:	b110      	cbz	r0, 90005490 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x8c>
        (*currentScreen)->~Screen();
9000548a:	6803      	ldr	r3, [r0, #0]
9000548c:	681b      	ldr	r3, [r3, #0]
9000548e:	4798      	blx	r3
    if (*currentPresenter)
90005490:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005494:	b110      	cbz	r0, 9000549c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
        (*currentPresenter)->~Presenter();
90005496:	6803      	ldr	r3, [r0, #0]
90005498:	689b      	ldr	r3, [r3, #8]
9000549a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000549c:	68e0      	ldr	r0, [r4, #12]
9000549e:	2100      	movs	r1, #0
900054a0:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
900054a2:	460f      	mov	r7, r1
900054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900054a6:	4798      	blx	r3
          relativeValue(0)
900054a8:	4b55      	ldr	r3, [pc, #340]	; (90005600 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1fc>)
900054aa:	4606      	mov	r6, r0
900054ac:	4605      	mov	r5, r0
900054ae:	6047      	str	r7, [r0, #4]
900054b0:	7207      	strb	r7, [r0, #8]
900054b2:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
900054b6:	4630      	mov	r0, r6
900054b8:	f00f facc 	bl	90014a54 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
900054bc:	4b51      	ldr	r3, [pc, #324]	; (90005604 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x200>)
          animationSteps(transitionSteps),
900054be:	2214      	movs	r2, #20
          relativeValue(0)
900054c0:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
900054c2:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
900054c4:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
900054c6:	2b00      	cmp	r3, #0
900054c8:	d165      	bne.n	90005596 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x192>
            done = true;
900054ca:	2301      	movs	r3, #1
900054cc:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
900054ce:	68a0      	ldr	r0, [r4, #8]
900054d0:	2100      	movs	r1, #0
900054d2:	6803      	ldr	r3, [r0, #0]
900054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900054d6:	4798      	blx	r3
900054d8:	4607      	mov	r7, r0
900054da:	f002 fd63 	bl	90007fa4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900054de:	6860      	ldr	r0, [r4, #4]
900054e0:	2100      	movs	r1, #0
900054e2:	6803      	ldr	r3, [r0, #0]
900054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900054e6:	4798      	blx	r3
900054e8:	4604      	mov	r4, r0
900054ea:	4639      	mov	r1, r7
900054ec:	f002 fd2e 	bl	90007f4c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
900054f0:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
900054f4:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
900054f8:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
900054fc:	2c00      	cmp	r4, #0
900054fe:	d05f      	beq.n	900055c0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1bc>
90005500:	1d23      	adds	r3, r4, #4
90005502:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
90005506:	4638      	mov	r0, r7
90005508:	683b      	ldr	r3, [r7, #0]
9000550a:	f8c4 b008 	str.w	fp, [r4, #8]
9000550e:	68db      	ldr	r3, [r3, #12]
90005510:	63fc      	str	r4, [r7, #60]	; 0x3c
90005512:	4798      	blx	r3
    newPresenter->activate();
90005514:	6823      	ldr	r3, [r4, #0]
90005516:	4620      	mov	r0, r4
90005518:	681b      	ldr	r3, [r3, #0]
9000551a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
9000551c:	4629      	mov	r1, r5
9000551e:	4638      	mov	r0, r7
90005520:	f014 f91a 	bl	90019758 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90005524:	682b      	ldr	r3, [r5, #0]
90005526:	4938      	ldr	r1, [pc, #224]	; (90005608 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x204>)
90005528:	691a      	ldr	r2, [r3, #16]
9000552a:	428a      	cmp	r2, r1
9000552c:	d152      	bne.n	900055d4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d0>
        if (done)
9000552e:	7a2a      	ldrb	r2, [r5, #8]
90005530:	b9d2      	cbnz	r2, 90005568 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
        Drawable* d = screenContainer->getFirstChild();
90005532:	6868      	ldr	r0, [r5, #4]
90005534:	4a35      	ldr	r2, [pc, #212]	; (9000560c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x208>)
90005536:	6803      	ldr	r3, [r0, #0]
90005538:	69db      	ldr	r3, [r3, #28]
9000553a:	4293      	cmp	r3, r2
9000553c:	d142      	bne.n	900055c4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c0>
9000553e:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005540:	b164      	cbz	r4, 9000555c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
90005542:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005544:	4f32      	ldr	r7, [pc, #200]	; (90005610 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x20c>)
                d->setX(d->getX() - targetValue);
90005546:	6823      	ldr	r3, [r4, #0]
90005548:	88a1      	ldrh	r1, [r4, #4]
9000554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000554c:	1a89      	subs	r1, r1, r2
9000554e:	42bb      	cmp	r3, r7
90005550:	b209      	sxth	r1, r1
90005552:	d119      	bne.n	90005588 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x184>
        rect.x = x;
90005554:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005556:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005558:	2c00      	cmp	r4, #0
9000555a:	d1f4      	bne.n	90005546 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        screenContainer->add(snapshot);
9000555c:	6868      	ldr	r0, [r5, #4]
9000555e:	4631      	mov	r1, r6
90005560:	6803      	ldr	r3, [r0, #0]
90005562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005564:	4798      	blx	r3
    newTransition->invalidate();
90005566:	682b      	ldr	r3, [r5, #0]
90005568:	695b      	ldr	r3, [r3, #20]
9000556a:	4a2a      	ldr	r2, [pc, #168]	; (90005614 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x210>)
9000556c:	4293      	cmp	r3, r2
9000556e:	d12c      	bne.n	900055ca <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c6>
        Application::getInstance()->invalidate();
90005570:	f012 fb44 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
}
90005574:	b001      	add	sp, #4
90005576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000557a:	f012 bfd3 	b.w	90018524 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
9000557e:	f8d9 0000 	ldr.w	r0, [r9]
90005582:	2800      	cmp	r0, #0
90005584:	d181      	bne.n	9000548a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x86>
90005586:	e789      	b.n	9000549c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
                d->setX(d->getX() - targetValue);
90005588:	4620      	mov	r0, r4
9000558a:	4798      	blx	r3
9000558c:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000558e:	2c00      	cmp	r4, #0
90005590:	d0e4      	beq.n	9000555c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
90005592:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005594:	e7d7      	b.n	90005546 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005596:	4b20      	ldr	r3, [pc, #128]	; (90005618 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x214>)
        snapshot.makeSnapshot();
90005598:	4630      	mov	r0, r6
        rect.x = x;
9000559a:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000559c:	f9b3 3000 	ldrsh.w	r3, [r3]
900055a0:	4f1e      	ldr	r7, [pc, #120]	; (9000561c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x218>)
        rect.height = height;
900055a2:	82eb      	strh	r3, [r5, #22]
900055a4:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
900055a8:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
900055aa:	f00f f9cf 	bl	9001494c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = HAL::DISPLAY_WIDTH;
900055ae:	883b      	ldrh	r3, [r7, #0]
900055b0:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
900055b2:	e78c      	b.n	900054ce <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xca>
    if (*currentPresenter)
900055b4:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900055b8:	2800      	cmp	r0, #0
900055ba:	f47f af60 	bne.w	9000547e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x7a>
900055be:	e76d      	b.n	9000549c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
    model->bind(newPresenter);
900055c0:	4623      	mov	r3, r4
900055c2:	e79e      	b.n	90005502 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xfe>
        Drawable* d = screenContainer->getFirstChild();
900055c4:	4798      	blx	r3
900055c6:	4604      	mov	r4, r0
900055c8:	e7ba      	b.n	90005540 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x13c>
    newTransition->invalidate();
900055ca:	4628      	mov	r0, r5
900055cc:	b001      	add	sp, #4
900055ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900055d2:	4718      	bx	r3
    newTransition->init();
900055d4:	4628      	mov	r0, r5
900055d6:	4790      	blx	r2
    newTransition->invalidate();
900055d8:	682b      	ldr	r3, [r5, #0]
900055da:	e7c5      	b.n	90005568 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900055dc:	4b10      	ldr	r3, [pc, #64]	; (90005620 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x21c>)
900055de:	21a3      	movs	r1, #163	; 0xa3
900055e0:	4a10      	ldr	r2, [pc, #64]	; (90005624 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055e2:	4811      	ldr	r0, [pc, #68]	; (90005628 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055e4:	f021 fdb6 	bl	90027154 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900055e8:	4b10      	ldr	r3, [pc, #64]	; (9000562c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x228>)
900055ea:	21a5      	movs	r1, #165	; 0xa5
900055ec:	4a0d      	ldr	r2, [pc, #52]	; (90005624 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055ee:	480e      	ldr	r0, [pc, #56]	; (90005628 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055f0:	f021 fdb0 	bl	90027154 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900055f4:	4b0e      	ldr	r3, [pc, #56]	; (90005630 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x22c>)
900055f6:	21a4      	movs	r1, #164	; 0xa4
900055f8:	4a0a      	ldr	r2, [pc, #40]	; (90005624 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055fa:	480b      	ldr	r0, [pc, #44]	; (90005628 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055fc:	f021 fdaa 	bl	90027154 <__assert_func>
90005600:	9002a820 	.word	0x9002a820
90005604:	24028193 	.word	0x24028193
90005608:	900051a5 	.word	0x900051a5
9000560c:	90004f55 	.word	0x90004f55
90005610:	90002351 	.word	0x90002351
90005614:	90005025 	.word	0x90005025
90005618:	2402818a 	.word	0x2402818a
9000561c:	24028188 	.word	0x24028188
90005620:	9002a218 	.word	0x9002a218
90005624:	9002a53c 	.word	0x9002a53c
90005628:	9002a3ac 	.word	0x9002a3ac
9000562c:	9002a498 	.word	0x9002a498
90005630:	9002a3f4 	.word	0x9002a3f4
90005634:	240281dc 	.word	0x240281dc
90005638:	240281d8 	.word	0x240281d8

9000563c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
9000563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005640:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
90005644:	4680      	mov	r8, r0
90005646:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005648:	68a0      	ldr	r0, [r4, #8]
9000564a:	6803      	ldr	r3, [r0, #0]
9000564c:	6a1b      	ldr	r3, [r3, #32]
9000564e:	4798      	blx	r3
90005650:	f242 0313 	movw	r3, #8211	; 0x2013
90005654:	4298      	cmp	r0, r3
90005656:	f240 80df 	bls.w	90005818 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1dc>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000565a:	6860      	ldr	r0, [r4, #4]
9000565c:	6803      	ldr	r3, [r0, #0]
9000565e:	6a1b      	ldr	r3, [r3, #32]
90005660:	4798      	blx	r3
90005662:	280f      	cmp	r0, #15
90005664:	f240 80e4 	bls.w	90005830 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1f4>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005668:	68e0      	ldr	r0, [r4, #12]
9000566a:	6803      	ldr	r3, [r0, #0]
9000566c:	6a1b      	ldr	r3, [r3, #32]
9000566e:	4798      	blx	r3
90005670:	283f      	cmp	r0, #63	; 0x3f
90005672:	f240 80d7 	bls.w	90005824 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e8>
    if (*currentTrans)
90005676:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 90005870 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x234>
    Application::getInstance()->clearAllTimerWidgets();
9000567a:	f012 fabf 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
9000567e:	3004      	adds	r0, #4
90005680:	f012 fafa 	bl	90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90005684:	f8da 0000 	ldr.w	r0, [sl]
90005688:	b140      	cbz	r0, 9000569c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->tearDown();
9000568a:	6803      	ldr	r3, [r0, #0]
9000568c:	68db      	ldr	r3, [r3, #12]
9000568e:	4798      	blx	r3
    if (*currentTrans)
90005690:	f8da 0000 	ldr.w	r0, [sl]
90005694:	b110      	cbz	r0, 9000569c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->~Transition();
90005696:	6803      	ldr	r3, [r0, #0]
90005698:	681b      	ldr	r3, [r3, #0]
9000569a:	4798      	blx	r3
    if (*currentScreen)
9000569c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 90005874 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x238>
900056a0:	f8d9 0000 	ldr.w	r0, [r9]
900056a4:	2800      	cmp	r0, #0
900056a6:	f000 80a3 	beq.w	900057f0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1b4>
        (*currentScreen)->tearDownScreen();
900056aa:	6803      	ldr	r3, [r0, #0]
900056ac:	695b      	ldr	r3, [r3, #20]
900056ae:	4798      	blx	r3
    if (*currentPresenter)
900056b0:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900056b4:	2800      	cmp	r0, #0
900056b6:	d07f      	beq.n	900057b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>
        (*currentPresenter)->deactivate();
900056b8:	6803      	ldr	r3, [r0, #0]
900056ba:	685b      	ldr	r3, [r3, #4]
900056bc:	4798      	blx	r3
    if (*currentScreen)
900056be:	f8d9 0000 	ldr.w	r0, [r9]
900056c2:	b110      	cbz	r0, 900056ca <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x8e>
        (*currentScreen)->~Screen();
900056c4:	6803      	ldr	r3, [r0, #0]
900056c6:	681b      	ldr	r3, [r3, #0]
900056c8:	4798      	blx	r3
    if (*currentPresenter)
900056ca:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900056ce:	b110      	cbz	r0, 900056d6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
        (*currentPresenter)->~Presenter();
900056d0:	6803      	ldr	r3, [r0, #0]
900056d2:	689b      	ldr	r3, [r3, #8]
900056d4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
900056d6:	68e0      	ldr	r0, [r4, #12]
900056d8:	2100      	movs	r1, #0
900056da:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
900056dc:	460f      	mov	r7, r1
900056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056e0:	4798      	blx	r3
          relativeValue(0)
900056e2:	4b56      	ldr	r3, [pc, #344]	; (9000583c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x200>)
900056e4:	4606      	mov	r6, r0
900056e6:	4605      	mov	r5, r0
900056e8:	6047      	str	r7, [r0, #4]
900056ea:	7207      	strb	r7, [r0, #8]
900056ec:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
900056f0:	4630      	mov	r0, r6
900056f2:	f00f f9af 	bl	90014a54 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
900056f6:	4b52      	ldr	r3, [pc, #328]	; (90005840 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x204>)
          animationSteps(transitionSteps),
900056f8:	2214      	movs	r2, #20
          relativeValue(0)
900056fa:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
900056fc:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
900056fe:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
90005700:	2b00      	cmp	r3, #0
90005702:	d165      	bne.n	900057d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>
            done = true;
90005704:	2301      	movs	r3, #1
90005706:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005708:	68a0      	ldr	r0, [r4, #8]
9000570a:	2100      	movs	r1, #0
9000570c:	6803      	ldr	r3, [r0, #0]
9000570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005710:	4798      	blx	r3
90005712:	4607      	mov	r7, r0
90005714:	f002 fcdc 	bl	900080d0 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005718:	6860      	ldr	r0, [r4, #4]
9000571a:	2100      	movs	r1, #0
9000571c:	6803      	ldr	r3, [r0, #0]
9000571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005720:	4798      	blx	r3
90005722:	4604      	mov	r4, r0
90005724:	4639      	mov	r1, r7
90005726:	f002 fca7 	bl	90008078 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
9000572a:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
9000572e:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
90005732:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
90005736:	2c00      	cmp	r4, #0
90005738:	d060      	beq.n	900057fc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c0>
9000573a:	1d23      	adds	r3, r4, #4
9000573c:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
90005740:	4638      	mov	r0, r7
90005742:	683b      	ldr	r3, [r7, #0]
90005744:	f8c4 b008 	str.w	fp, [r4, #8]
90005748:	68db      	ldr	r3, [r3, #12]
9000574a:	63fc      	str	r4, [r7, #60]	; 0x3c
9000574c:	4798      	blx	r3
    newPresenter->activate();
9000574e:	6823      	ldr	r3, [r4, #0]
90005750:	4620      	mov	r0, r4
90005752:	681b      	ldr	r3, [r3, #0]
90005754:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90005756:	4629      	mov	r1, r5
90005758:	4638      	mov	r0, r7
9000575a:	f013 fffd 	bl	90019758 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
9000575e:	682b      	ldr	r3, [r5, #0]
90005760:	4938      	ldr	r1, [pc, #224]	; (90005844 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x208>)
90005762:	691a      	ldr	r2, [r3, #16]
90005764:	428a      	cmp	r2, r1
90005766:	d153      	bne.n	90005810 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1d4>
        if (done)
90005768:	7a2a      	ldrb	r2, [r5, #8]
9000576a:	b9d2      	cbnz	r2, 900057a2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
        Drawable* d = screenContainer->getFirstChild();
9000576c:	6868      	ldr	r0, [r5, #4]
9000576e:	4a36      	ldr	r2, [pc, #216]	; (90005848 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20c>)
90005770:	6803      	ldr	r3, [r0, #0]
90005772:	69db      	ldr	r3, [r3, #28]
90005774:	4293      	cmp	r3, r2
90005776:	d143      	bne.n	90005800 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c4>
90005778:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000577a:	b164      	cbz	r4, 90005796 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
9000577c:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
9000577e:	4f33      	ldr	r7, [pc, #204]	; (9000584c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x210>)
                d->setX(d->getX() - targetValue);
90005780:	6823      	ldr	r3, [r4, #0]
90005782:	88a1      	ldrh	r1, [r4, #4]
90005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005786:	1a89      	subs	r1, r1, r2
90005788:	42bb      	cmp	r3, r7
9000578a:	b209      	sxth	r1, r1
9000578c:	d119      	bne.n	900057c2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x186>
        rect.x = x;
9000578e:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005790:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005792:	2c00      	cmp	r4, #0
90005794:	d1f4      	bne.n	90005780 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        screenContainer->add(snapshot);
90005796:	6868      	ldr	r0, [r5, #4]
90005798:	4631      	mov	r1, r6
9000579a:	6803      	ldr	r3, [r0, #0]
9000579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000579e:	4798      	blx	r3
    newTransition->invalidate();
900057a0:	682b      	ldr	r3, [r5, #0]
900057a2:	695b      	ldr	r3, [r3, #20]
900057a4:	4a2a      	ldr	r2, [pc, #168]	; (90005850 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x214>)
900057a6:	4293      	cmp	r3, r2
900057a8:	d12d      	bne.n	90005806 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1ca>
        Application::getInstance()->invalidate();
900057aa:	f012 fa27 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
}
900057ae:	b001      	add	sp, #4
900057b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900057b4:	f012 beb6 	b.w	90018524 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900057b8:	f8d9 0000 	ldr.w	r0, [r9]
900057bc:	2800      	cmp	r0, #0
900057be:	d181      	bne.n	900056c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x88>
900057c0:	e789      	b.n	900056d6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
                d->setX(d->getX() - targetValue);
900057c2:	4620      	mov	r0, r4
900057c4:	4798      	blx	r3
900057c6:	69a4      	ldr	r4, [r4, #24]
        while (d)
900057c8:	2c00      	cmp	r4, #0
900057ca:	d0e4      	beq.n	90005796 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
900057cc:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900057ce:	e7d7      	b.n	90005780 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
900057d0:	4b20      	ldr	r3, [pc, #128]	; (90005854 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x218>)
        snapshot.makeSnapshot();
900057d2:	4630      	mov	r0, r6
        rect.x = x;
900057d4:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
900057d6:	f9b3 3000 	ldrsh.w	r3, [r3]
900057da:	4f1f      	ldr	r7, [pc, #124]	; (90005858 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x21c>)
        rect.height = height;
900057dc:	82eb      	strh	r3, [r5, #22]
900057de:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
900057e2:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
900057e4:	f00f f8b2 	bl	9001494c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
900057e8:	883b      	ldrh	r3, [r7, #0]
900057ea:	425b      	negs	r3, r3
900057ec:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
900057ee:	e78b      	b.n	90005708 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xcc>
    if (*currentPresenter)
900057f0:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900057f4:	2800      	cmp	r0, #0
900057f6:	f47f af5f 	bne.w	900056b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x7c>
900057fa:	e76c      	b.n	900056d6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
    model->bind(newPresenter);
900057fc:	4623      	mov	r3, r4
900057fe:	e79d      	b.n	9000573c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x100>
        Drawable* d = screenContainer->getFirstChild();
90005800:	4798      	blx	r3
90005802:	4604      	mov	r4, r0
90005804:	e7b9      	b.n	9000577a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x13e>
    newTransition->invalidate();
90005806:	4628      	mov	r0, r5
90005808:	b001      	add	sp, #4
9000580a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000580e:	4718      	bx	r3
    newTransition->init();
90005810:	4628      	mov	r0, r5
90005812:	4790      	blx	r2
    newTransition->invalidate();
90005814:	682b      	ldr	r3, [r5, #0]
90005816:	e7c4      	b.n	900057a2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005818:	4b10      	ldr	r3, [pc, #64]	; (9000585c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x220>)
9000581a:	21a3      	movs	r1, #163	; 0xa3
9000581c:	4a10      	ldr	r2, [pc, #64]	; (90005860 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
9000581e:	4811      	ldr	r0, [pc, #68]	; (90005864 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
90005820:	f021 fc98 	bl	90027154 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005824:	4b10      	ldr	r3, [pc, #64]	; (90005868 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x22c>)
90005826:	21a5      	movs	r1, #165	; 0xa5
90005828:	4a0d      	ldr	r2, [pc, #52]	; (90005860 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
9000582a:	480e      	ldr	r0, [pc, #56]	; (90005864 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
9000582c:	f021 fc92 	bl	90027154 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005830:	4b0e      	ldr	r3, [pc, #56]	; (9000586c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x230>)
90005832:	21a4      	movs	r1, #164	; 0xa4
90005834:	4a0a      	ldr	r2, [pc, #40]	; (90005860 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
90005836:	480b      	ldr	r0, [pc, #44]	; (90005864 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
90005838:	f021 fc8c 	bl	90027154 <__assert_func>
9000583c:	9002a7fc 	.word	0x9002a7fc
90005840:	24028193 	.word	0x24028193
90005844:	90005205 	.word	0x90005205
90005848:	90004f55 	.word	0x90004f55
9000584c:	90002351 	.word	0x90002351
90005850:	90005025 	.word	0x90005025
90005854:	2402818a 	.word	0x2402818a
90005858:	24028188 	.word	0x24028188
9000585c:	9002a218 	.word	0x9002a218
90005860:	9002a654 	.word	0x9002a654
90005864:	9002a3ac 	.word	0x9002a3ac
90005868:	9002a498 	.word	0x9002a498
9000586c:	9002a3f4 	.word	0x9002a3f4
90005870:	240281dc 	.word	0x240281dc
90005874:	240281d8 	.word	0x240281d8

90005878 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005878:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
9000587c:	b1d3      	cbz	r3, 900058b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
9000587e:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90005880:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005882:	68d1      	ldr	r1, [r2, #12]
90005884:	4604      	mov	r4, r0
90005886:	4818      	ldr	r0, [pc, #96]	; (900058e8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005888:	4281      	cmp	r1, r0
9000588a:	d118      	bne.n	900058be <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
9000588c:	6858      	ldr	r0, [r3, #4]
9000588e:	b180      	cbz	r0, 900058b2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005890:	6899      	ldr	r1, [r3, #8]
90005892:	b1e1      	cbz	r1, 900058ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90005894:	6892      	ldr	r2, [r2, #8]
90005896:	4915      	ldr	r1, [pc, #84]	; (900058ec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005898:	428a      	cmp	r2, r1
9000589a:	d122      	bne.n	900058e2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
9000589c:	68da      	ldr	r2, [r3, #12]
9000589e:	6858      	ldr	r0, [r3, #4]
900058a0:	eb00 0062 	add.w	r0, r0, r2, asr #1
900058a4:	07d2      	lsls	r2, r2, #31
900058a6:	d406      	bmi.n	900058b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
900058a8:	689b      	ldr	r3, [r3, #8]
900058aa:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
900058ac:	2300      	movs	r3, #0
900058ae:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
900058b2:	bd70      	pop	{r4, r5, r6, pc}
900058b4:	4770      	bx	lr
900058b6:	6899      	ldr	r1, [r3, #8]
900058b8:	6803      	ldr	r3, [r0, #0]
900058ba:	585b      	ldr	r3, [r3, r1]
900058bc:	e7f5      	b.n	900058aa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900058be:	4618      	mov	r0, r3
900058c0:	4788      	blx	r1
900058c2:	2800      	cmp	r0, #0
900058c4:	d0f5      	beq.n	900058b2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
900058c6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900058ca:	681a      	ldr	r2, [r3, #0]
900058cc:	e7e2      	b.n	90005894 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
900058ce:	68dd      	ldr	r5, [r3, #12]
900058d0:	07ee      	lsls	r6, r5, #31
900058d2:	d5ee      	bpl.n	900058b2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900058d4:	6892      	ldr	r2, [r2, #8]
900058d6:	4e05      	ldr	r6, [pc, #20]	; (900058ec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900058d8:	42b2      	cmp	r2, r6
900058da:	d102      	bne.n	900058e2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900058dc:	eb00 0065 	add.w	r0, r0, r5, asr #1
900058e0:	e7ea      	b.n	900058b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900058e2:	4618      	mov	r0, r3
900058e4:	4790      	blx	r2
900058e6:	e7e1      	b.n	900058ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900058e8:	90004fbd 	.word	0x90004fbd
900058ec:	90004f9d 	.word	0x90004f9d

900058f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900058f0:	b570      	push	{r4, r5, r6, lr}
900058f2:	4604      	mov	r4, r0
900058f4:	4616      	mov	r6, r2
900058f6:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900058f8:	f012 fa90 	bl	90017e1c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900058fc:	4a18      	ldr	r2, [pc, #96]	; (90005960 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
900058fe:	2300      	movs	r3, #0
      frontendHeap(heap),
90005900:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
90005904:	6014      	str	r4, [r2, #0]
        return instance;
90005906:	4e17      	ldr	r6, [pc, #92]	; (90005964 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
90005908:	4a17      	ldr	r2, [pc, #92]	; (90005968 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
9000590a:	6830      	ldr	r0, [r6, #0]
9000590c:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
9000590e:	4a17      	ldr	r2, [pc, #92]	; (9000596c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90005910:	4917      	ldr	r1, [pc, #92]	; (90005970 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
90005912:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
90005916:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
9000591a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
9000591e:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005922:	6802      	ldr	r2, [r0, #0]
90005924:	6892      	ldr	r2, [r2, #8]
90005926:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
90005928:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
9000592c:	d115      	bne.n	9000595a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
9000592e:	f44f 7380 	mov.w	r3, #256	; 0x100
90005932:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
90005936:	2000      	movs	r0, #0
90005938:	f002 f9fa 	bl	90007d30 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
9000593c:	6833      	ldr	r3, [r6, #0]
9000593e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90005942:	b12a      	cbz	r2, 90005950 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005944:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90005946:	b118      	cbz	r0, 90005950 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005948:	f01a f9af 	bl	9001fcaa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000594c:	4620      	mov	r0, r4
9000594e:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005950:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005952:	f01a f9aa 	bl	9001fcaa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005956:	4620      	mov	r0, r4
90005958:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000595a:	4619      	mov	r1, r3
9000595c:	4790      	blx	r2
9000595e:	e7ea      	b.n	90005936 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005960:	240281e8 	.word	0x240281e8
90005964:	24028194 	.word	0x24028194
90005968:	9002a78c 	.word	0x9002a78c
9000596c:	9002a774 	.word	0x9002a774
90005970:	90000685 	.word	0x90000685

90005974 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005974:	4905      	ldr	r1, [pc, #20]	; (9000598c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90005976:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005978:	f500 73a2 	add.w	r3, r0, #324	; 0x144
9000597c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005980:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005984:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005988:	4770      	bx	lr
9000598a:	bf00      	nop
9000598c:	90005265 	.word	0x90005265

90005990 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:
90005990:	4905      	ldr	r1, [pc, #20]	; (900059a8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x18>)
90005992:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005994:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005998:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
9000599c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900059a0:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
900059a4:	4770      	bx	lr
900059a6:	bf00      	nop
900059a8:	90005405 	.word	0x90005405

900059ac <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
900059ac:	4905      	ldr	r1, [pc, #20]	; (900059c4 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x18>)
900059ae:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
900059b0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900059b4:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900059b8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900059bc:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
900059c0:	4770      	bx	lr
900059c2:	bf00      	nop
900059c4:	9000563d 	.word	0x9000563d

900059c8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
900059c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
900059ca:	4770      	bx	lr

900059cc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
900059cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
900059ce:	4770      	bx	lr

900059d0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
900059d0:	4770      	bx	lr
900059d2:	bf00      	nop

900059d4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
900059d4:	888b      	ldrh	r3, [r1, #4]
900059d6:	69c0      	ldr	r0, [r0, #28]
900059d8:	0adb      	lsrs	r3, r3, #11
900059da:	680a      	ldr	r2, [r1, #0]
900059dc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
900059e0:	4410      	add	r0, r2
900059e2:	4770      	bx	lr

900059e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
900059e4:	b1da      	cbz	r2, 90005a1e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
900059e6:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
900059e8:	7b14      	ldrb	r4, [r2, #12]
900059ea:	b1b4      	cbz	r4, 90005a1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
900059ec:	f892 c00d 	ldrb.w	ip, [r2, #13]
900059f0:	f892 e00b 	ldrb.w	lr, [r2, #11]
900059f4:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
900059f8:	6a03      	ldr	r3, [r0, #32]
900059fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
900059fe:	ea4e 0202 	orr.w	r2, lr, r2
90005a02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a06:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90005a0a:	881a      	ldrh	r2, [r3, #0]
90005a0c:	428a      	cmp	r2, r1
90005a0e:	d008      	beq.n	90005a22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a10:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005a14:	d801      	bhi.n	90005a1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a16:	4283      	cmp	r3, r0
90005a18:	d1f7      	bne.n	90005a0a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
90005a1a:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
90005a1c:	bd10      	pop	{r4, pc}
        return 0;
90005a1e:	4610      	mov	r0, r2
}
90005a20:	4770      	bx	lr
            return kerndata->distance;
90005a22:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
90005a26:	bd10      	pop	{r4, pc}

90005a28 <_ZN8touchgfx13GeneratedFontD0Ev>:
90005a28:	b510      	push	{r4, lr}
90005a2a:	4604      	mov	r4, r0
90005a2c:	212c      	movs	r1, #44	; 0x2c
90005a2e:	f021 fb62 	bl	900270f6 <_ZdlPvj>
90005a32:	4620      	mov	r0, r4
90005a34:	bd10      	pop	{r4, pc}
90005a36:	bf00      	nop

90005a38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a38:	b530      	push	{r4, r5, lr}
90005a3a:	b08b      	sub	sp, #44	; 0x2c
90005a3c:	4604      	mov	r4, r0
90005a3e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90005a42:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a44:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90005a48:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a4a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
90005a4e:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a50:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005a54:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a56:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90005a5a:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a5c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005a60:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a62:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005a66:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a68:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005a6c:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a6e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005a72:	9508      	str	r5, [sp, #32]
90005a74:	f013 f9fe 	bl	90018e74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005a7a:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005a7c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90005a7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005a80:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005a82:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005a84:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005a86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005a88:	62a3      	str	r3, [r4, #40]	; 0x28
90005a8a:	4b02      	ldr	r3, [pc, #8]	; (90005a94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005a8c:	6023      	str	r3, [r4, #0]
}
90005a8e:	b00b      	add	sp, #44	; 0x2c
90005a90:	bd30      	pop	{r4, r5, pc}
90005a92:	bf00      	nop
90005a94:	9002a844 	.word	0x9002a844

90005a98 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005a98:	4770      	bx	lr
90005a9a:	bf00      	nop

90005a9c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005a9c:	4770      	bx	lr
90005a9e:	bf00      	nop

90005aa0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005aa0:	4770      	bx	lr
90005aa2:	bf00      	nop

90005aa4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005aa4:	4770      	bx	lr
90005aa6:	bf00      	nop

90005aa8 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005aa8:	b530      	push	{r4, r5, lr}
90005aaa:	b085      	sub	sp, #20
90005aac:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
90005aae:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005ab0:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005ab2:	466d      	mov	r5, sp
90005ab4:	4601      	mov	r1, r0
90005ab6:	8102      	strh	r2, [r0, #8]
90005ab8:	343c      	adds	r4, #60	; 0x3c
90005aba:	4628      	mov	r0, r5
90005abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005ac0:	4798      	blx	r3
90005ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005aca:	b005      	add	sp, #20
90005acc:	bd30      	pop	{r4, r5, pc}
90005ace:	bf00      	nop

90005ad0 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005ad0:	b530      	push	{r4, r5, lr}
90005ad2:	b085      	sub	sp, #20
90005ad4:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005ad6:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005ad8:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005ada:	466d      	mov	r5, sp
90005adc:	4601      	mov	r1, r0
        rect.height = height;
90005ade:	8142      	strh	r2, [r0, #10]
90005ae0:	343c      	adds	r4, #60	; 0x3c
90005ae2:	4628      	mov	r0, r5
90005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005ae8:	4798      	blx	r3
90005aea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005af2:	b005      	add	sp, #20
90005af4:	bd30      	pop	{r4, r5, pc}
90005af6:	bf00      	nop

90005af8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90005af8:	2200      	movs	r2, #0
90005afa:	6002      	str	r2, [r0, #0]
90005afc:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005afe:	4770      	bx	lr

90005b00 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005b00:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005b04:	4770      	bx	lr
90005b06:	bf00      	nop

90005b08 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
90005b08:	2000      	movs	r0, #0
90005b0a:	4770      	bx	lr

90005b0c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005b0c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005b10:	b112      	cbz	r2, 90005b18 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005b12:	6803      	ldr	r3, [r0, #0]
90005b14:	695b      	ldr	r3, [r3, #20]
90005b16:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005b18:	4770      	bx	lr
90005b1a:	bf00      	nop

90005b1c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005b1c:	2200      	movs	r2, #0
90005b1e:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005b22:	6082      	str	r2, [r0, #8]
90005b24:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005b28:	4770      	bx	lr
90005b2a:	bf00      	nop

90005b2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005b2c:	6c80      	ldr	r0, [r0, #72]	; 0x48
90005b2e:	4770      	bx	lr

90005b30 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005b30:	4770      	bx	lr
90005b32:	bf00      	nop

90005b34 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005b34:	4770      	bx	lr
90005b36:	bf00      	nop

90005b38 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005b38:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005b3c:	b123      	cbz	r3, 90005b48 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
90005b3e:	f100 0380 	add.w	r3, r0, #128	; 0x80
90005b42:	681b      	ldr	r3, [r3, #0]
        color = newColor;
90005b44:	6643      	str	r3, [r0, #100]	; 0x64
        T::handlePressedUpdated();
    }
90005b46:	4770      	bx	lr
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005b48:	f100 037c 	add.w	r3, r0, #124	; 0x7c
90005b4c:	681b      	ldr	r3, [r3, #0]
90005b4e:	6643      	str	r3, [r0, #100]	; 0x64
    }
90005b50:	4770      	bx	lr
90005b52:	bf00      	nop

90005b54 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005b54:	4770      	bx	lr
90005b56:	bf00      	nop

90005b58 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class TextButtonStyle : public T
90005b58:	4770      	bx	lr
90005b5a:	bf00      	nop

90005b5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005b5c:	4770      	bx	lr
90005b5e:	bf00      	nop

90005b60 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90005b60:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90005b62:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90005b64:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90005b66:	6844      	ldr	r4, [r0, #4]
90005b68:	f012 0f01 	tst.w	r2, #1
90005b6c:	eb04 0062 	add.w	r0, r4, r2, asr #1
90005b70:	d103      	bne.n	90005b7a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90005b72:	689b      	ldr	r3, [r3, #8]
    }
90005b74:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b78:	4718      	bx	r3
90005b7a:	ea4f 0c62 	mov.w	ip, r2, asr #1
90005b7e:	689b      	ldr	r3, [r3, #8]
90005b80:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90005b84:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b88:	58d3      	ldr	r3, [r2, r3]
90005b8a:	4718      	bx	r3

90005b8c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005b8c:	6843      	ldr	r3, [r0, #4]
90005b8e:	b13b      	cbz	r3, 90005ba0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90005b90:	6883      	ldr	r3, [r0, #8]
90005b92:	b10b      	cbz	r3, 90005b98 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90005b94:	2001      	movs	r0, #1
    }
90005b96:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005b98:	68c0      	ldr	r0, [r0, #12]
90005b9a:	f000 0001 	and.w	r0, r0, #1
90005b9e:	4770      	bx	lr
90005ba0:	4618      	mov	r0, r3
90005ba2:	4770      	bx	lr

90005ba4 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        alpha = newAlpha;
90005ba4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
90005ba8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
90005bac:	4770      	bx	lr
90005bae:	bf00      	nop

90005bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005bb0:	b510      	push	{r4, lr}
90005bb2:	4604      	mov	r4, r0
90005bb4:	214c      	movs	r1, #76	; 0x4c
90005bb6:	f021 fa9e 	bl	900270f6 <_ZdlPvj>
90005bba:	4620      	mov	r0, r4
90005bbc:	bd10      	pop	{r4, pc}
90005bbe:	bf00      	nop

90005bc0 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class TextButtonStyle : public T
90005bc0:	b510      	push	{r4, lr}
90005bc2:	4604      	mov	r4, r0
90005bc4:	2184      	movs	r1, #132	; 0x84
90005bc6:	f021 fa96 	bl	900270f6 <_ZdlPvj>
90005bca:	4620      	mov	r0, r4
90005bcc:	bd10      	pop	{r4, pc}
90005bce:	bf00      	nop

90005bd0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005bd0:	b510      	push	{r4, lr}
90005bd2:	4604      	mov	r4, r0
90005bd4:	2110      	movs	r1, #16
90005bd6:	f021 fa8e 	bl	900270f6 <_ZdlPvj>
90005bda:	4620      	mov	r0, r4
90005bdc:	bd10      	pop	{r4, pc}
90005bde:	bf00      	nop

90005be0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005be0:	b510      	push	{r4, lr}
90005be2:	4604      	mov	r4, r0
}
90005be4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90005be8:	f021 fa85 	bl	900270f6 <_ZdlPvj>
90005bec:	4620      	mov	r0, r4
90005bee:	bd10      	pop	{r4, pc}

90005bf0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &temperatureButton)
90005bf0:	f500 70a0 	add.w	r0, r0, #320	; 0x140
90005bf4:	4288      	cmp	r0, r1
90005bf6:	d000      	beq.n	90005bfa <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90005bf8:	4770      	bx	lr
{
90005bfa:	b508      	push	{r3, lr}
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90005bfc:	f011 fffe 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
        //temperatureButtonInteraction
        //When temperatureButton clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
90005c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
90005c04:	f7ff bed2 	b.w	900059ac <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>

90005c08 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005c08:	4b1b      	ldr	r3, [pc, #108]	; (90005c78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c0a:	6802      	ldr	r2, [r0, #0]
90005c0c:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005c0e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c10:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005c12:	b323      	cbz	r3, 90005c5e <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005c14:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
90005c16:	4919      	ldr	r1, [pc, #100]	; (90005c7c <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005c18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90005c1a:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005c1c:	8809      	ldrh	r1, [r1, #0]
90005c1e:	4291      	cmp	r1, r2
90005c20:	d923      	bls.n	90005c6a <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005c22:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005c26:	4b16      	ldr	r3, [pc, #88]	; (90005c80 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005c28:	681b      	ldr	r3, [r3, #0]
90005c2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005c2e:	4a15      	ldr	r2, [pc, #84]	; (90005c84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005c30:	6803      	ldr	r3, [r0, #0]
90005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005c34:	4293      	cmp	r3, r2
90005c36:	d107      	bne.n	90005c48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005c38:	88c0      	ldrh	r0, [r0, #6]
90005c3a:	4b13      	ldr	r3, [pc, #76]	; (90005c88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c3c:	1a31      	subs	r1, r6, r0
90005c3e:	429d      	cmp	r5, r3
90005c40:	b209      	sxth	r1, r1
90005c42:	d107      	bne.n	90005c54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005c44:	80e1      	strh	r1, [r4, #6]
    }
90005c46:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c48:	4798      	blx	r3
90005c4a:	4b0f      	ldr	r3, [pc, #60]	; (90005c88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c4c:	1a31      	subs	r1, r6, r0
90005c4e:	429d      	cmp	r5, r3
90005c50:	b209      	sxth	r1, r1
90005c52:	d0f7      	beq.n	90005c44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005c54:	4620      	mov	r0, r4
90005c56:	462b      	mov	r3, r5
    }
90005c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c5c:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005c5e:	4b0b      	ldr	r3, [pc, #44]	; (90005c8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005c60:	216c      	movs	r1, #108	; 0x6c
90005c62:	4a0b      	ldr	r2, [pc, #44]	; (90005c90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005c64:	480b      	ldr	r0, [pc, #44]	; (90005c94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005c66:	f021 fa75 	bl	90027154 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005c6a:	4b0b      	ldr	r3, [pc, #44]	; (90005c98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005c6c:	216d      	movs	r1, #109	; 0x6d
90005c6e:	4a08      	ldr	r2, [pc, #32]	; (90005c90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005c70:	4808      	ldr	r0, [pc, #32]	; (90005c94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005c72:	f021 fa6f 	bl	90027154 <__assert_func>
90005c76:	bf00      	nop
90005c78:	240281ec 	.word	0x240281ec
90005c7c:	240281f0 	.word	0x240281f0
90005c80:	240281f4 	.word	0x240281f4
90005c84:	90004f19 	.word	0x90004f19
90005c88:	90002355 	.word	0x90002355
90005c8c:	9002a89c 	.word	0x9002a89c
90005c90:	9002a8e0 	.word	0x9002a8e0
90005c94:	9002a91c 	.word	0x9002a91c
90005c98:	9002a964 	.word	0x9002a964

90005c9c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
     *
     * @see setAction
     */
    virtual void executeAction()
    {
        if (action && action->isValid())
90005c9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
90005c9e:	b30b      	cbz	r3, 90005ce4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x48>
90005ca0:	681a      	ldr	r2, [r3, #0]
    virtual void executeAction()
90005ca2:	b570      	push	{r4, r5, r6, lr}
        if (action && action->isValid())
90005ca4:	68d1      	ldr	r1, [r2, #12]
90005ca6:	4604      	mov	r4, r0
90005ca8:	481a      	ldr	r0, [pc, #104]	; (90005d14 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x78>)
90005caa:	4281      	cmp	r1, r0
90005cac:	d11b      	bne.n	90005ce6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x4a>
        return (pobject != 0) && (pmemfun != 0);
90005cae:	6858      	ldr	r0, [r3, #4]
90005cb0:	b180      	cbz	r0, 90005cd4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005cb2:	6899      	ldr	r1, [r3, #8]
90005cb4:	b1f1      	cbz	r1, 90005cf4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x58>
        {
            action->execute(*this);
90005cb6:	6892      	ldr	r2, [r2, #8]
90005cb8:	4917      	ldr	r1, [pc, #92]	; (90005d18 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005cba:	428a      	cmp	r2, r1
90005cbc:	d124      	bne.n	90005d08 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005cbe:	68da      	ldr	r2, [r3, #12]
90005cc0:	6858      	ldr	r0, [r3, #4]
90005cc2:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005cc6:	07d2      	lsls	r2, r2, #31
90005cc8:	d405      	bmi.n	90005cd6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3a>
90005cca:	4621      	mov	r1, r4
90005ccc:	689b      	ldr	r3, [r3, #8]
        }
    }
90005cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005cd2:	4718      	bx	r3
90005cd4:	bd70      	pop	{r4, r5, r6, pc}
90005cd6:	6899      	ldr	r1, [r3, #8]
90005cd8:	6803      	ldr	r3, [r0, #0]
90005cda:	585b      	ldr	r3, [r3, r1]
90005cdc:	4621      	mov	r1, r4
90005cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005ce2:	4718      	bx	r3
90005ce4:	4770      	bx	lr
        if (action && action->isValid())
90005ce6:	4618      	mov	r0, r3
90005ce8:	4788      	blx	r1
90005cea:	2800      	cmp	r0, #0
90005cec:	d0f2      	beq.n	90005cd4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
            action->execute(*this);
90005cee:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005cf0:	681a      	ldr	r2, [r3, #0]
90005cf2:	e7e0      	b.n	90005cb6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        return (pobject != 0) && (pmemfun != 0);
90005cf4:	68dd      	ldr	r5, [r3, #12]
90005cf6:	07ee      	lsls	r6, r5, #31
90005cf8:	d5ec      	bpl.n	90005cd4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005cfa:	6892      	ldr	r2, [r2, #8]
90005cfc:	4e06      	ldr	r6, [pc, #24]	; (90005d18 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005cfe:	42b2      	cmp	r2, r6
90005d00:	d102      	bne.n	90005d08 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005d02:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005d06:	e7e7      	b.n	90005cd8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3c>
90005d08:	4621      	mov	r1, r4
90005d0a:	4618      	mov	r0, r3
    }
90005d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            action->execute(*this);
90005d10:	4710      	bx	r2
90005d12:	bf00      	nop
90005d14:	90005b8d 	.word	0x90005b8d
90005d18:	90005b61 	.word	0x90005b61

90005d1c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005d1c:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005d22:	4f25      	ldr	r7, [pc, #148]	; (90005db8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005d24:	4605      	mov	r5, r0
        setX(x);
90005d26:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005d28:	4690      	mov	r8, r2
90005d2a:	42be      	cmp	r6, r7
90005d2c:	d125      	bne.n	90005d7a <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005d2e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005d30:	80a9      	strh	r1, [r5, #4]
90005d32:	4922      	ldr	r1, [pc, #136]	; (90005dbc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005d34:	428c      	cmp	r4, r1
90005d36:	d126      	bne.n	90005d86 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005d38:	4921      	ldr	r1, [pc, #132]	; (90005dc0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d3a:	fa1f f888 	uxth.w	r8, r8
90005d3e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005d40:	680b      	ldr	r3, [r1, #0]
90005d42:	2b00      	cmp	r3, #0
90005d44:	d032      	beq.n	90005dac <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
90005d46:	491f      	ldr	r1, [pc, #124]	; (90005dc4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005d48:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005d4a:	8809      	ldrh	r1, [r1, #0]
90005d4c:	4291      	cmp	r1, r2
90005d4e:	d927      	bls.n	90005da0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005d50:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005d54:	4b1c      	ldr	r3, [pc, #112]	; (90005dc8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
90005d56:	681b      	ldr	r3, [r3, #0]
90005d58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005d5c:	4a1b      	ldr	r2, [pc, #108]	; (90005dcc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005d5e:	6803      	ldr	r3, [r0, #0]
90005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005d62:	4293      	cmp	r3, r2
90005d64:	d11a      	bne.n	90005d9c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
90005d66:	88c0      	ldrh	r0, [r0, #6]
90005d68:	4b19      	ldr	r3, [pc, #100]	; (90005dd0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005d6a:	eba8 0200 	sub.w	r2, r8, r0
90005d6e:	429e      	cmp	r6, r3
90005d70:	b211      	sxth	r1, r2
90005d72:	d10e      	bne.n	90005d92 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
90005d74:	80e9      	strh	r1, [r5, #6]
    }
90005d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
90005d7a:	47b0      	blx	r6
        setBaselineY(baselineY);
90005d7c:	682b      	ldr	r3, [r5, #0]
90005d7e:	490f      	ldr	r1, [pc, #60]	; (90005dbc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005d80:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005d82:	428c      	cmp	r4, r1
90005d84:	d0d8      	beq.n	90005d38 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
90005d86:	4641      	mov	r1, r8
90005d88:	4628      	mov	r0, r5
90005d8a:	4623      	mov	r3, r4
    }
90005d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005d90:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d92:	4628      	mov	r0, r5
90005d94:	4633      	mov	r3, r6
    }
90005d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d9a:	4718      	bx	r3
90005d9c:	4798      	blx	r3
90005d9e:	e7e3      	b.n	90005d68 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005da0:	4b0c      	ldr	r3, [pc, #48]	; (90005dd4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005da2:	216d      	movs	r1, #109	; 0x6d
90005da4:	4a0c      	ldr	r2, [pc, #48]	; (90005dd8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005da6:	480d      	ldr	r0, [pc, #52]	; (90005ddc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005da8:	f021 f9d4 	bl	90027154 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005dac:	4b0c      	ldr	r3, [pc, #48]	; (90005de0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005dae:	216c      	movs	r1, #108	; 0x6c
90005db0:	4a09      	ldr	r2, [pc, #36]	; (90005dd8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005db2:	480a      	ldr	r0, [pc, #40]	; (90005ddc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005db4:	f021 f9ce 	bl	90027154 <__assert_func>
90005db8:	90002351 	.word	0x90002351
90005dbc:	90005c09 	.word	0x90005c09
90005dc0:	240281ec 	.word	0x240281ec
90005dc4:	240281f0 	.word	0x240281f0
90005dc8:	240281f4 	.word	0x240281f4
90005dcc:	90004f19 	.word	0x90004f19
90005dd0:	90002355 	.word	0x90002355
90005dd4:	9002a964 	.word	0x9002a964
90005dd8:	9002a8e0 	.word	0x9002a8e0
90005ddc:	9002a91c 	.word	0x9002a91c
90005de0:	9002a89c 	.word	0x9002a89c

90005de4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
90005de4:	790b      	ldrb	r3, [r1, #4]
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005de6:	1e1a      	subs	r2, r3, #0
    virtual void handleClickEvent(const ClickEvent& event)
90005de8:	b570      	push	{r4, r5, r6, lr}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005dea:	bf18      	it	ne
90005dec:	2201      	movne	r2, #1
        return pressed;
90005dee:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
90005df2:	460d      	mov	r5, r1
90005df4:	4604      	mov	r4, r0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005df6:	42b2      	cmp	r2, r6
90005df8:	d004      	beq.n	90005e04 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x20>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
90005dfa:	b116      	cbz	r6, 90005e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005dfc:	792b      	ldrb	r3, [r5, #4]
90005dfe:	2b01      	cmp	r3, #1
90005e00:	d00e      	beq.n	90005e20 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
90005e02:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
90005e04:	fab3 f383 	clz	r3, r3
90005e08:	095b      	lsrs	r3, r3, #5
90005e0a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
        handlePressedUpdated();
90005e0e:	6803      	ldr	r3, [r0, #0]
90005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005e14:	4798      	blx	r3
            invalidate();
90005e16:	6823      	ldr	r3, [r4, #0]
90005e18:	4620      	mov	r0, r4
90005e1a:	695b      	ldr	r3, [r3, #20]
90005e1c:	4798      	blx	r3
90005e1e:	e7ec      	b.n	90005dfa <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
            executeAction();
90005e20:	6823      	ldr	r3, [r4, #0]
90005e22:	4a20      	ldr	r2, [pc, #128]	; (90005ea4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc0>)
90005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005e28:	4293      	cmp	r3, r2
90005e2a:	d127      	bne.n	90005e7c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x98>
        if (action && action->isValid())
90005e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005e2e:	2b00      	cmp	r3, #0
90005e30:	d0e7      	beq.n	90005e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e32:	6819      	ldr	r1, [r3, #0]
90005e34:	481c      	ldr	r0, [pc, #112]	; (90005ea8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc4>)
90005e36:	68ca      	ldr	r2, [r1, #12]
90005e38:	4282      	cmp	r2, r0
90005e3a:	d123      	bne.n	90005e84 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        return (pobject != 0) && (pmemfun != 0);
90005e3c:	685a      	ldr	r2, [r3, #4]
90005e3e:	2a00      	cmp	r2, #0
90005e40:	d0df      	beq.n	90005e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e42:	689d      	ldr	r5, [r3, #8]
90005e44:	b175      	cbz	r5, 90005e64 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x80>
            action->execute(*this);
90005e46:	688e      	ldr	r6, [r1, #8]
90005e48:	4a18      	ldr	r2, [pc, #96]	; (90005eac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005e4a:	4296      	cmp	r6, r2
90005e4c:	d123      	bne.n	90005e96 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005e4e:	68d9      	ldr	r1, [r3, #12]
90005e50:	685a      	ldr	r2, [r3, #4]
90005e52:	eb02 0061 	add.w	r0, r2, r1, asr #1
90005e56:	07ca      	lsls	r2, r1, #31
90005e58:	d41b      	bmi.n	90005e92 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xae>
90005e5a:	689b      	ldr	r3, [r3, #8]
90005e5c:	4621      	mov	r1, r4
    }
90005e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005e62:	4718      	bx	r3
        return (pobject != 0) && (pmemfun != 0);
90005e64:	68d8      	ldr	r0, [r3, #12]
90005e66:	07c6      	lsls	r6, r0, #31
90005e68:	d5cb      	bpl.n	90005e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e6a:	688e      	ldr	r6, [r1, #8]
90005e6c:	490f      	ldr	r1, [pc, #60]	; (90005eac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005e6e:	428e      	cmp	r6, r1
90005e70:	d111      	bne.n	90005e96 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005e72:	eb02 0060 	add.w	r0, r2, r0, asr #1
90005e76:	6803      	ldr	r3, [r0, #0]
90005e78:	595b      	ldr	r3, [r3, r5]
90005e7a:	e7ef      	b.n	90005e5c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x78>
            executeAction();
90005e7c:	4620      	mov	r0, r4
    }
90005e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
90005e82:	4718      	bx	r3
        if (action && action->isValid())
90005e84:	4618      	mov	r0, r3
90005e86:	4790      	blx	r2
90005e88:	2800      	cmp	r0, #0
90005e8a:	d0ba      	beq.n	90005e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            action->execute(*this);
90005e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005e8e:	6819      	ldr	r1, [r3, #0]
90005e90:	e7d9      	b.n	90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x62>
90005e92:	689d      	ldr	r5, [r3, #8]
90005e94:	e7ef      	b.n	90005e76 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x92>
90005e96:	4621      	mov	r1, r4
90005e98:	4618      	mov	r0, r3
90005e9a:	4633      	mov	r3, r6
    }
90005e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005ea0:	4718      	bx	r3
90005ea2:	bf00      	nop
90005ea4:	90005c9d 	.word	0x90005c9d
90005ea8:	90005b8d 	.word	0x90005b8d
90005eac:	90005b61 	.word	0x90005b61

90005eb0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005eb4:	b087      	sub	sp, #28
90005eb6:	4604      	mov	r4, r0
        : presenter(0)
90005eb8:	f013 faa2 	bl	90019400 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90005ebc:	4adf      	ldr	r2, [pc, #892]	; (9000623c <_ZN15Screen1ViewBaseC1Ev+0x38c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005ebe:	4be0      	ldr	r3, [pc, #896]	; (90006240 <_ZN15Screen1ViewBaseC1Ev+0x390>)
90005ec0:	2600      	movs	r6, #0
          touchable(false),
90005ec2:	f44f 7780 	mov.w	r7, #256	; 0x100
90005ec6:	f104 086c 	add.w	r8, r4, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005eca:	f64f 75ff 	movw	r5, #65535	; 0xffff
90005ece:	6022      	str	r2, [r4, #0]
90005ed0:	6423      	str	r3, [r4, #64]	; 0x40
90005ed2:	22ff      	movs	r2, #255	; 0xff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
90005ed4:	4bdb      	ldr	r3, [pc, #876]	; (90006244 <_ZN15Screen1ViewBaseC1Ev+0x394>)
    {
        Image::setBitmap(bmp);
90005ed6:	4640      	mov	r0, r8
90005ed8:	a904      	add	r1, sp, #16
90005eda:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
90005ede:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
        : animationDoneAction(0),
          startId(BITMAP_INVALID),
90005ee2:	f04f 3bff 	mov.w	fp, #4294967295
90005ee6:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
90005eea:	f04f 0901 	mov.w	r9, #1
        : Widget(), bitmap(bmp), alpha(255)
90005eee:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
90005ef2:	f504 7aa0 	add.w	sl, r4, #320	; 0x140
90005ef6:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
90005efa:	66e3      	str	r3, [r4, #108]	; 0x6c
90005efc:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005efe:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
90005f00:	6626      	str	r6, [r4, #96]	; 0x60
        : color(col)
90005f02:	66a6      	str	r6, [r4, #104]	; 0x68
90005f04:	f8ad 5010 	strh.w	r5, [sp, #16]
        : x(0), y(0), width(0), height(0)
90005f08:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
90005f0c:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90005f10:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90005f14:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
90005f18:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
          nextSibling(0),
90005f1c:	e9c4 6620 	strd	r6, r6, [r4, #128]	; 0x80
          cachedAbsX(0),
90005f20:	e9c4 6622 	strd	r6, r6, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90005f24:	f00f faef 	bl	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : typedTextId(id)
90005f28:	4bc7      	ldr	r3, [pc, #796]	; (90006248 <_ZN15Screen1ViewBaseC1Ev+0x398>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005f2a:	22ff      	movs	r2, #255	; 0xff
        : TextAreaWithWildcardBase(), wc1(0)
90005f2c:	49c7      	ldr	r1, [pc, #796]	; (9000624c <_ZN15Screen1ViewBaseC1Ev+0x39c>)
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
90005f2e:	48c8      	ldr	r0, [pc, #800]	; (90006250 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
90005f30:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
90005f34:	f8c4 20de 	str.w	r2, [r4, #222]	; 0xde
          touchable(false),
90005f38:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
90005f3c:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
90005f40:	66e0      	str	r0, [r4, #108]	; 0x6c
        T::add(text);
90005f42:	4650      	mov	r0, sl
90005f44:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
90005f48:	f8a4 b0d4 	strh.w	fp, [r4, #212]	; 0xd4
        : color(col)
90005f4c:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
90005f50:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
          updateTicksInterval(updateInterval),
90005f54:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
          startId(BITMAP_INVALID),
90005f58:	e9c4 6b26 	strd	r6, fp, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
90005f5c:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
90005f60:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
90005f64:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
90005f68:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005f6c:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
90005f70:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
        : x(0), y(0), width(0), height(0)
90005f74:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
90005f78:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
90005f7c:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
90005f80:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
90005f84:	f8a4 7118 	strh.w	r7, [r4, #280]	; 0x118
90005f88:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
        : pressed(false), alpha(255), action(0)
90005f8c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
90005f90:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
90005f94:	f8a4 116c 	strh.w	r1, [r4, #364]	; 0x16c
        touchable = touch;
90005f98:	f240 1101 	movw	r1, #257	; 0x101
90005f9c:	f8c4 212a 	str.w	r2, [r4, #298]	; 0x12a
90005fa0:	f8a4 1164 	strh.w	r1, [r4, #356]	; 0x164
        : T()
90005fa4:	49ab      	ldr	r1, [pc, #684]	; (90006254 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
          touchable(false),
90005fa6:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005faa:	1d27      	adds	r7, r4, #4
90005fac:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
90005fb0:	49a9      	ldr	r1, [pc, #676]	; (90006258 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
90005fb2:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
        : color(col)
90005fb6:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90005fba:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
          firstChild(0)
90005fbe:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
90005fc2:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005fc6:	e9c4 6b4c 	strd	r6, fp, [r4, #304]	; 0x130
90005fca:	e9c4 664e 	strd	r6, r6, [r4, #312]	; 0x138
        : x(0), y(0), width(0), height(0)
90005fce:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
90005fd2:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
90005fd6:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
90005fda:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
90005fde:	e9c4 665e 	strd	r6, r6, [r4, #376]	; 0x178
90005fe2:	e9c4 6660 	strd	r6, r6, [r4, #384]	; 0x180
          nextSibling(0),
90005fe6:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
          cachedAbsX(0),
90005fea:	e9c4 6664 	strd	r6, r6, [r4, #400]	; 0x190
90005fee:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
90005ff2:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        T::add(text);
90005ff6:	f504 75ba 	add.w	r5, r4, #372	; 0x174
90005ffa:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
90005ffe:	4629      	mov	r1, r5
90006000:	f8c4 21aa 	str.w	r2, [r4, #426]	; 0x1aa
        : color(col)
90006004:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
90006008:	f8a4 61a8 	strh.w	r6, [r4, #424]	; 0x1a8
        : color(0)
9000600c:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006010:	e9c4 6b6c 	strd	r6, fp, [r4, #432]	; 0x1b0
        : color(0)
90006014:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
90006018:	f00c fac8 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
9000601c:	4a8f      	ldr	r2, [pc, #572]	; (9000625c <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
9000601e:	f104 0140 	add.w	r1, r4, #64	; 0x40
90006022:	4638      	mov	r0, r7
90006024:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
90006028:	4a8d      	ldr	r2, [pc, #564]	; (90006260 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
9000602a:	f8c4 41d8 	str.w	r4, [r4, #472]	; 0x1d8
9000602e:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
        rect.x = x;
90006032:	4a8c      	ldr	r2, [pc, #560]	; (90006264 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90006034:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
90006038:	64a2      	str	r2, [r4, #72]	; 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
9000603a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
9000603e:	6466      	str	r6, [r4, #68]	; 0x44
90006040:	66a2      	str	r2, [r4, #104]	; 0x68
90006042:	f00c fab3 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90006046:	4a88      	ldr	r2, [pc, #544]	; (90006268 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
    animatedImage1.setBitmaps(BITMAP_GIPHY_1_ID, BITMAP_GIPHY_5_ID);
90006048:	4640      	mov	r0, r8
9000604a:	4631      	mov	r1, r6
9000604c:	6722      	str	r2, [r4, #112]	; 0x70
9000604e:	2210      	movs	r2, #16
90006050:	f00e fdee 	bl	90014c30 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90006054:	4640      	mov	r0, r8
90006056:	2106      	movs	r1, #6
90006058:	f00e fdfd 	bl	90014c56 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
9000605c:	464b      	mov	r3, r9
9000605e:	464a      	mov	r2, r9
90006060:	4640      	mov	r0, r8
90006062:	4631      	mov	r1, r6
90006064:	f00e fd3c 	bl	90014ae0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
90006068:	4641      	mov	r1, r8
9000606a:	4638      	mov	r0, r7
    humidityTextArea.setXY(20, 51);
9000606c:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
90006070:	f00c fa9c 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90006074:	4a7d      	ldr	r2, [pc, #500]	; (9000626c <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        setX(x);
90006076:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
9000607a:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
9000607e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
90006082:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
90006086:	4a7a      	ldr	r2, [pc, #488]	; (90006270 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        linespace = space;
90006088:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
9000608c:	4293      	cmp	r3, r2
9000608e:	f040 810c 	bne.w	900062aa <_ZN15Screen1ViewBaseC1Ev+0x3fa>
        boundingArea = calculateBoundingArea();
90006092:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
90006096:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000609a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 90006290 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
9000609e:	f504 76e2 	add.w	r6, r4, #452	; 0x1c4
900060a2:	f8db 3000 	ldr.w	r3, [fp]
900060a6:	2b00      	cmp	r3, #0
900060a8:	f000 8122 	beq.w	900062f0 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900060ac:	4b71      	ldr	r3, [pc, #452]	; (90006274 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
900060ae:	881b      	ldrh	r3, [r3, #0]
900060b0:	2b08      	cmp	r3, #8
900060b2:	f240 8123 	bls.w	900062fc <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
900060b6:	4b70      	ldr	r3, [pc, #448]	; (90006278 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
900060b8:	2108      	movs	r1, #8
    temperatureTextArea.setXY(20, 16);
900060ba:	f104 09f4 	add.w	r9, r4, #244	; 0xf4
900060be:	6818      	ldr	r0, [r3, #0]
900060c0:	f001 fe74 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
900060c4:	4a6d      	ldr	r2, [pc, #436]	; (9000627c <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
900060c6:	4603      	mov	r3, r0
900060c8:	2104      	movs	r1, #4
900060ca:	4630      	mov	r0, r6
900060cc:	f014 fe56 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    humidityTextArea.resizeToCurrentText();
900060d0:	4640      	mov	r0, r8
        wc1 = value;
900060d2:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
900060d6:	f00f f92f 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900060da:	4b5b      	ldr	r3, [pc, #364]	; (90006248 <_ZN15Screen1ViewBaseC1Ev+0x398>)
    humidityTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y9RM));
900060dc:	a904      	add	r1, sp, #16
900060de:	4640      	mov	r0, r8
900060e0:	9304      	str	r3, [sp, #16]
900060e2:	2309      	movs	r3, #9
900060e4:	f8ad 3014 	strh.w	r3, [sp, #20]
900060e8:	f00f f946 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900060ec:	4641      	mov	r1, r8
900060ee:	4638      	mov	r0, r7
900060f0:	f00c fa5c 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
900060f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
900060f8:	485d      	ldr	r0, [pc, #372]	; (90006270 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        color = newColor;
900060fa:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900060fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
90006102:	4b5f      	ldr	r3, [pc, #380]	; (90006280 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
90006104:	4282      	cmp	r2, r0
        color = newColor;
90006106:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
9000610a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
9000610e:	f04f 0300 	mov.w	r3, #0
90006112:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
90006116:	f040 80d3 	bne.w	900062c0 <_ZN15Screen1ViewBaseC1Ev+0x410>
9000611a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
9000611e:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006122:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
90006126:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
9000612a:	2b00      	cmp	r3, #0
9000612c:	f000 80e0 	beq.w	900062f0 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006130:	4b50      	ldr	r3, [pc, #320]	; (90006274 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
90006132:	881b      	ldrh	r3, [r3, #0]
90006134:	2b0a      	cmp	r3, #10
90006136:	f240 80e1 	bls.w	900062fc <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
9000613a:	4b4f      	ldr	r3, [pc, #316]	; (90006278 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
9000613c:	210a      	movs	r1, #10
        : typedTextId(id)
9000613e:	4e42      	ldr	r6, [pc, #264]	; (90006248 <_ZN15Screen1ViewBaseC1Ev+0x398>)
        return texts->getText(typedTextId);
90006140:	6818      	ldr	r0, [r3, #0]
90006142:	f001 fe33 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90006146:	4a4d      	ldr	r2, [pc, #308]	; (9000627c <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90006148:	4603      	mov	r3, r0
9000614a:	2104      	movs	r1, #4
9000614c:	4640      	mov	r0, r8
9000614e:	f014 fe15 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
90006152:	4648      	mov	r0, r9
90006154:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
        boundingArea = calculateBoundingArea();
90006158:	f105 083c 	add.w	r8, r5, #60	; 0x3c
9000615c:	f00f f8ec 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90006160:	230b      	movs	r3, #11
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
90006162:	4648      	mov	r0, r9
90006164:	a904      	add	r1, sp, #16
90006166:	f8ad 3014 	strh.w	r3, [sp, #20]
9000616a:	9604      	str	r6, [sp, #16]
9000616c:	f00f f904 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006170:	4649      	mov	r1, r9
90006172:	4638      	mov	r0, r7
90006174:	f00c fa1a 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90006178:	2301      	movs	r3, #1
        text.setTypedText(t);
9000617a:	a904      	add	r1, sp, #16
9000617c:	4628      	mov	r0, r5
9000617e:	9604      	str	r6, [sp, #16]
90006180:	466e      	mov	r6, sp
90006182:	f8ad 3014 	strh.w	r3, [sp, #20]
90006186:	f00f f8f7 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
9000618a:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
9000618e:	4629      	mov	r1, r5
90006190:	4630      	mov	r0, r6
        return rect.height;
90006192:	f9b4 914a 	ldrsh.w	r9, [r4, #330]	; 0x14a
        rect.width = width;
90006196:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
9000619a:	f00e fe45 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
9000619e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061a2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
900061a6:	4629      	mov	r1, r5
900061a8:	4630      	mov	r0, r6
        rect.height = height;
900061aa:	f8a4 917e 	strh.w	r9, [r4, #382]	; 0x17e
900061ae:	f00e fe3b 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
900061b2:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900061b6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 90006294 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
        rect.x = x;
900061ba:	f04f 0e00 	mov.w	lr, #0
        setWidth(width);
900061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900061c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061c4:	4563      	cmp	r3, ip
900061c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        rect.x = x;
900061ca:	f8c4 e178 	str.w	lr, [r4, #376]	; 0x178
        setWidth(width);
900061ce:	f040 8082 	bne.w	900062d6 <_ZN15Screen1ViewBaseC1Ev+0x426>
        rect.width = width;
900061d2:	23a6      	movs	r3, #166	; 0xa6
        boundingArea = calculateBoundingArea();
900061d4:	4629      	mov	r1, r5
900061d6:	4630      	mov	r0, r6
900061d8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
900061dc:	f00e fe24 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
900061e0:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900061e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900061ea:	e888 0007 	stmia.w	r8, {r0, r1, r2}
900061ee:	4a25      	ldr	r2, [pc, #148]	; (90006284 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
900061f0:	4293      	cmp	r3, r2
900061f2:	d179      	bne.n	900062e8 <_ZN15Screen1ViewBaseC1Ev+0x438>
        rect.height = height;
900061f4:	231d      	movs	r3, #29
        boundingArea = calculateBoundingArea();
900061f6:	4629      	mov	r1, r5
900061f8:	4630      	mov	r0, r6
900061fa:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
900061fe:	f00e fe13 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006202:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90006206:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
9000620a:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
        colorReleased = newColorReleased;
9000620e:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
90006212:	4b1d      	ldr	r3, [pc, #116]	; (90006288 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
90006214:	4638      	mov	r0, r7
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90006216:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
90006218:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
        colorPressed = newColorPressed;
9000621c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
90006220:	4651      	mov	r1, sl
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90006222:	bf08      	it	eq
90006224:	4613      	moveq	r3, r2
    temperatureButton.setAction(flexButtonCallback);
90006226:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
        color = newColor;
9000622a:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
        rect.x = x;
9000622e:	4b17      	ldr	r3, [pc, #92]	; (9000628c <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
        action = &callback;
90006230:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
90006234:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
90006238:	e02e      	b.n	90006298 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
9000623a:	bf00      	nop
9000623c:	9002ab2c 	.word	0x9002ab2c
90006240:	9002beb0 	.word	0x9002beb0
90006244:	9002bf18 	.word	0x9002bf18
90006248:	9002a210 	.word	0x9002a210
9000624c:	9002a9e8 	.word	0x9002a9e8
90006250:	9002bda4 	.word	0x9002bda4
90006254:	9002aa78 	.word	0x9002aa78
90006258:	9002be20 	.word	0x9002be20
9000625c:	9002ab14 	.word	0x9002ab14
90006260:	90005bf1 	.word	0x90005bf1
90006264:	011001e0 	.word	0x011001e0
90006268:	fffc0000 	.word	0xfffc0000
9000626c:	00330014 	.word	0x00330014
90006270:	90005b1d 	.word	0x90005b1d
90006274:	240281f0 	.word	0x240281f0
90006278:	240281f8 	.word	0x240281f8
9000627c:	9002a9dc 	.word	0x9002a9dc
90006280:	00100014 	.word	0x00100014
90006284:	90005ad1 	.word	0x90005ad1
90006288:	ff9e9d9d 	.word	0xff9e9d9d
9000628c:	00e50014 	.word	0x00e50014
90006290:	240281ec 	.word	0x240281ec
90006294:	90005aa9 	.word	0x90005aa9
90006298:	4b1b      	ldr	r3, [pc, #108]	; (90006308 <_ZN15Screen1ViewBaseC1Ev+0x458>)
9000629a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
9000629e:	f00c f985 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900062a2:	4620      	mov	r0, r4
900062a4:	b007      	add	sp, #28
900062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        boundingArea = calculateBoundingArea();
900062aa:	46e9      	mov	r9, sp
900062ac:	4641      	mov	r1, r8
900062ae:	4648      	mov	r0, r9
900062b0:	4798      	blx	r3
900062b2:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
900062b6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
900062ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900062be:	e6ec      	b.n	9000609a <_ZN15Screen1ViewBaseC1Ev+0x1ea>
900062c0:	46e8      	mov	r8, sp
900062c2:	4649      	mov	r1, r9
900062c4:	4640      	mov	r0, r8
900062c6:	4790      	blx	r2
900062c8:	f504 7398 	add.w	r3, r4, #304	; 0x130
900062cc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
900062d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900062d4:	e725      	b.n	90006122 <_ZN15Screen1ViewBaseC1Ev+0x272>
        setWidth(width);
900062d6:	21a6      	movs	r1, #166	; 0xa6
900062d8:	4628      	mov	r0, r5
900062da:	4798      	blx	r3
        setHeight(height);
900062dc:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900062e0:	4a0a      	ldr	r2, [pc, #40]	; (9000630c <_ZN15Screen1ViewBaseC1Ev+0x45c>)
900062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900062e4:	4293      	cmp	r3, r2
900062e6:	d085      	beq.n	900061f4 <_ZN15Screen1ViewBaseC1Ev+0x344>
900062e8:	4628      	mov	r0, r5
900062ea:	211d      	movs	r1, #29
900062ec:	4798      	blx	r3
900062ee:	e78c      	b.n	9000620a <_ZN15Screen1ViewBaseC1Ev+0x35a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900062f0:	4b07      	ldr	r3, [pc, #28]	; (90006310 <_ZN15Screen1ViewBaseC1Ev+0x460>)
900062f2:	2160      	movs	r1, #96	; 0x60
900062f4:	4a07      	ldr	r2, [pc, #28]	; (90006314 <_ZN15Screen1ViewBaseC1Ev+0x464>)
900062f6:	4808      	ldr	r0, [pc, #32]	; (90006318 <_ZN15Screen1ViewBaseC1Ev+0x468>)
900062f8:	f020 ff2c 	bl	90027154 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900062fc:	4b07      	ldr	r3, [pc, #28]	; (9000631c <_ZN15Screen1ViewBaseC1Ev+0x46c>)
900062fe:	2161      	movs	r1, #97	; 0x61
90006300:	4a04      	ldr	r2, [pc, #16]	; (90006314 <_ZN15Screen1ViewBaseC1Ev+0x464>)
90006302:	4805      	ldr	r0, [pc, #20]	; (90006318 <_ZN15Screen1ViewBaseC1Ev+0x468>)
90006304:	f020 ff26 	bl	90027154 <__assert_func>
90006308:	001d00a6 	.word	0x001d00a6
9000630c:	90005ad1 	.word	0x90005ad1
90006310:	9002a89c 	.word	0x9002a89c
90006314:	9002a9a4 	.word	0x9002a9a4
90006318:	9002a91c 	.word	0x9002a91c
9000631c:	9002a964 	.word	0x9002a964

90006320 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90006320:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
90006324:	4770      	bx	lr
90006326:	bf00      	nop

90006328 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
90006328:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000632a:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
9000632c:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000632e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90006332:	fb04 f202 	mul.w	r2, r4, r2
90006336:	fb04 f101 	mul.w	r1, r4, r1
    }
9000633a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000633e:	4718      	bx	r3

90006340 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
90006340:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006344:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
9000634a:	b410      	push	{r4}
        const float fs = f * (float)scale;
9000634c:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006350:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (fs >= 0)
90006354:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000635c:	da2e      	bge.n	900063bc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7c>
        {
            return (int)(fs + 0.5f);
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000635e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
90006362:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
90006366:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000636a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000636e:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
90006372:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006376:	3b01      	subs	r3, #1
90006378:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
9000637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006380:	ee30 0a26 	vadd.f32	s0, s0, s13
90006384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006388:	ee10 1a10 	vmov	r1, s0
9000638c:	4419      	add	r1, r3
        if (fs >= 0)
9000638e:	da24      	bge.n	900063da <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006390:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006394:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006398:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9000639c:	ee17 3a90 	vmov	r3, s15
900063a0:	3b01      	subs	r3, #1
900063a2:	ee70 0ae6 	vsub.f32	s1, s1, s13
900063a6:	ee70 0a87 	vadd.f32	s1, s1, s14
900063aa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
900063ae:	ee10 2a90 	vmov	r2, s1
900063b2:	441a      	add	r2, r3
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063b4:	4623      	mov	r3, r4
    }
900063b6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063ba:	4718      	bx	r3
            return (int)(fs + 0.5f);
900063bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
900063c0:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
900063c4:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
900063c8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
900063cc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
900063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
900063d4:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
900063d8:	dbda      	blt.n	90006390 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x50>
            return (int)(fs + 0.5f);
900063da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063de:	4623      	mov	r3, r4
    }
900063e0:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900063e4:	ee70 0aa7 	vadd.f32	s1, s1, s15
900063e8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900063ec:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063f0:	4718      	bx	r3
900063f2:	bf00      	nop

900063f4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
900063f4:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900063f6:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
900063f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900063fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900063fe:	fb04 f202 	mul.w	r2, r4, r2
90006402:	fb04 f101 	mul.w	r1, r4, r1
    }
90006406:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000640a:	4718      	bx	r3

9000640c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
9000640c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006410:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
90006416:	b410      	push	{r4}
        const float fs = f * (float)scale;
90006418:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
9000641c:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
        if (fs >= 0)
90006420:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006428:	da2e      	bge.n	90006488 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000642a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
9000642e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
90006432:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006436:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000643a:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
9000643e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006442:	3b01      	subs	r3, #1
90006444:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
90006448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000644c:	ee30 0a26 	vadd.f32	s0, s0, s13
90006450:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006454:	ee10 1a10 	vmov	r1, s0
90006458:	4419      	add	r1, r3
        if (fs >= 0)
9000645a:	da24      	bge.n	900064a6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000645c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006460:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006468:	ee17 3a90 	vmov	r3, s15
9000646c:	3b01      	subs	r3, #1
9000646e:	ee70 0ae6 	vsub.f32	s1, s1, s13
90006472:	ee70 0a87 	vadd.f32	s1, s1, s14
90006476:	eefd 0ae0 	vcvt.s32.f32	s1, s1
9000647a:	ee10 2a90 	vmov	r2, s1
9000647e:	441a      	add	r2, r3
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006480:	4623      	mov	r3, r4
    }
90006482:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006486:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006488:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
9000648c:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
90006490:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
90006494:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
90006498:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
9000649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
900064a0:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
900064a4:	dbda      	blt.n	9000645c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x50>
            return (int)(fs + 0.5f);
900064a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900064aa:	4623      	mov	r3, r4
    }
900064ac:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900064b0:	ee70 0aa7 	vadd.f32	s1, s1, s15
900064b4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900064b8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900064bc:	4718      	bx	r3
900064be:	bf00      	nop

900064c0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
900064c0:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
900064c2:	6803      	ldr	r3, [r0, #0]
900064c4:	6b44      	ldr	r4, [r0, #52]	; 0x34
900064c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900064ca:	fb04 f202 	mul.w	r2, r4, r2
    }
900064ce:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
900064d2:	4718      	bx	r3

900064d4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
900064d4:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064d8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
900064da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
900064de:	b410      	push	{r4}
        const float fs = f * (float)scale;
900064e0:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064e4:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (fs >= 0)
900064e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900064f0:	da15      	bge.n	9000651e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900064f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900064f6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900064fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900064fe:	ee17 3a90 	vmov	r3, s15
90006502:	3b01      	subs	r3, #1
90006504:	ee30 0a66 	vsub.f32	s0, s0, s13
90006508:	ee30 0a07 	vadd.f32	s0, s0, s14
9000650c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006510:	ee10 2a10 	vmov	r2, s0
90006514:	441a      	add	r2, r3
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006516:	4623      	mov	r3, r4
    }
90006518:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000651c:	4718      	bx	r3
            return (int)(fs + 0.5f);
9000651e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006522:	4623      	mov	r3, r4
    }
90006524:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
90006528:	ee30 0a27 	vadd.f32	s0, s0, s15
9000652c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006530:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006534:	4718      	bx	r3
90006536:	bf00      	nop

90006538 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
90006538:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
9000653c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
9000653e:	2b00      	cmp	r3, #0
90006540:	da0c      	bge.n	9000655c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006542:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
90006546:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9000654a:	3801      	subs	r0, #1
9000654c:	fb90 f0f2 	sdiv	r0, r0, r2
90006550:	2800      	cmp	r0, #0
90006552:	bfb8      	it	lt
90006554:	3001      	addlt	r0, #1
90006556:	1040      	asrs	r0, r0, #1
90006558:	4240      	negs	r0, r0
    }
9000655a:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
9000655c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006560:	fb90 f0f2 	sdiv	r0, r0, r2
90006564:	2800      	cmp	r0, #0
90006566:	bfb8      	it	lt
90006568:	3001      	addlt	r0, #1
9000656a:	1040      	asrs	r0, r0, #1
9000656c:	4770      	bx	lr
9000656e:	bf00      	nop

90006570 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
90006570:	ed90 0a4b 	vldr	s0, [r0, #300]	; 0x12c
90006574:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006578:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
9000657c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006580:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006584:	4770      	bx	lr
90006586:	bf00      	nop

90006588 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
90006588:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
9000658c:	4770      	bx	lr
9000658e:	bf00      	nop

90006590 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
90006590:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
90006594:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
90006596:	2b00      	cmp	r3, #0
90006598:	da0c      	bge.n	900065b4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000659a:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000659e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900065a2:	3801      	subs	r0, #1
900065a4:	fb90 f0f2 	sdiv	r0, r0, r2
900065a8:	2800      	cmp	r0, #0
900065aa:	bfb8      	it	lt
900065ac:	3001      	addlt	r0, #1
900065ae:	1040      	asrs	r0, r0, #1
900065b0:	4240      	negs	r0, r0
    }
900065b2:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900065b4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900065b8:	fb90 f0f2 	sdiv	r0, r0, r2
900065bc:	2800      	cmp	r0, #0
900065be:	bfb8      	it	lt
900065c0:	3001      	addlt	r0, #1
900065c2:	1040      	asrs	r0, r0, #1
900065c4:	4770      	bx	lr
900065c6:	bf00      	nop

900065c8 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
900065c8:	ed90 0a4c 	vldr	s0, [r0, #304]	; 0x130
900065cc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
900065d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
900065d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
900065d8:	ee80 0a27 	vdiv.f32	s0, s0, s15
900065dc:	4770      	bx	lr
900065de:	bf00      	nop

900065e0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
900065e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
900065e4:	4770      	bx	lr
900065e6:	bf00      	nop

900065e8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
900065e8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
900065ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
900065ee:	2b00      	cmp	r3, #0
900065f0:	da0c      	bge.n	9000660c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900065f2:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
900065f6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900065fa:	3801      	subs	r0, #1
900065fc:	fb90 f0f2 	sdiv	r0, r0, r2
90006600:	2800      	cmp	r0, #0
90006602:	bfb8      	it	lt
90006604:	3001      	addlt	r0, #1
90006606:	1040      	asrs	r0, r0, #1
90006608:	4240      	negs	r0, r0
    }
9000660a:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
9000660c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006610:	fb90 f0f2 	sdiv	r0, r0, r2
90006614:	2800      	cmp	r0, #0
90006616:	bfb8      	it	lt
90006618:	3001      	addlt	r0, #1
9000661a:	1040      	asrs	r0, r0, #1
9000661c:	4770      	bx	lr
9000661e:	bf00      	nop

90006620 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
90006620:	ed90 0a4d 	vldr	s0, [r0, #308]	; 0x134
90006624:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
90006628:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
9000662c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006630:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006634:	4770      	bx	lr
90006636:	bf00      	nop

90006638 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
90006638:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
9000663c:	4770      	bx	lr
9000663e:	bf00      	nop

90006640 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
90006640:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
90006644:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
90006646:	2b00      	cmp	r3, #0
90006648:	da0c      	bge.n	90006664 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000664a:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000664e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006652:	3801      	subs	r0, #1
90006654:	fb90 f0f2 	sdiv	r0, r0, r2
90006658:	2800      	cmp	r0, #0
9000665a:	bfb8      	it	lt
9000665c:	3001      	addlt	r0, #1
9000665e:	1040      	asrs	r0, r0, #1
90006660:	4240      	negs	r0, r0
    }
90006662:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006664:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006668:	fb90 f0f2 	sdiv	r0, r0, r2
9000666c:	2800      	cmp	r0, #0
9000666e:	bfb8      	it	lt
90006670:	3001      	addlt	r0, #1
90006672:	1040      	asrs	r0, r0, #1
90006674:	4770      	bx	lr
90006676:	bf00      	nop

90006678 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
90006678:	ed90 0a4e 	vldr	s0, [r0, #312]	; 0x138
9000667c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
90006680:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006688:	ee80 0a27 	vdiv.f32	s0, s0, s15
9000668c:	4770      	bx	lr
9000668e:	bf00      	nop

90006690 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
90006690:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
90006694:	4770      	bx	lr
90006696:	bf00      	nop

90006698 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
90006698:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
9000669a:	b570      	push	{r4, r5, r6, lr}
9000669c:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
9000669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
900066a2:	460d      	mov	r5, r1
900066a4:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
900066a6:	4798      	blx	r3
        setScaleY(scale, updateData);
900066a8:	6823      	ldr	r3, [r4, #0]
900066aa:	4632      	mov	r2, r6
900066ac:	4629      	mov	r1, r5
900066ae:	4620      	mov	r0, r4
900066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
900066b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
900066b8:	4718      	bx	r3
900066ba:	bf00      	nop

900066bc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066bc:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
900066be:	2a00      	cmp	r2, #0
        return scaled2int(i, xScale);
900066c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
900066c2:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066c4:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
900066c8:	da14      	bge.n	900066f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900066ca:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
900066ce:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900066d2:	3b01      	subs	r3, #1
900066d4:	fb93 f3f1 	sdiv	r3, r3, r1
900066d8:	2b00      	cmp	r3, #0
900066da:	bfb8      	it	lt
900066dc:	3301      	addlt	r3, #1
900066de:	105b      	asrs	r3, r3, #1
900066e0:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066e2:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
900066e6:	4259      	negs	r1, r3
900066e8:	3a01      	subs	r2, #1
900066ea:	441a      	add	r2, r3
900066ec:	4623      	mov	r3, r4
    }
900066ee:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066f2:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
900066f4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
900066f8:	fb92 f3f1 	sdiv	r3, r2, r1
900066fc:	2b00      	cmp	r3, #0
900066fe:	bfb8      	it	lt
90006700:	3301      	addlt	r3, #1
90006702:	105b      	asrs	r3, r3, #1
90006704:	e7ed      	b.n	900066e2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x26>
90006706:	bf00      	nop

90006708 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
90006708:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
9000670c:	4770      	bx	lr
9000670e:	bf00      	nop

90006710 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
90006710:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
90006714:	4770      	bx	lr
90006716:	bf00      	nop

90006718 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
90006718:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
9000671c:	4770      	bx	lr
9000671e:	bf00      	nop

90006720 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
90006720:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
90006724:	4770      	bx	lr
90006726:	bf00      	nop

90006728 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
90006728:	4608      	mov	r0, r1
9000672a:	4770      	bx	lr

9000672c <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
9000672c:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
9000672e:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
90006730:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006732:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
90006736:	b510      	push	{r4, lr}
90006738:	4604      	mov	r4, r0
        if (i >= 0)
9000673a:	da13      	bge.n	90006764 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000673c:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
90006740:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90006744:	3901      	subs	r1, #1
90006746:	fb91 f1f2 	sdiv	r1, r1, r2
9000674a:	2900      	cmp	r1, #0
9000674c:	bfb8      	it	lt
9000674e:	3101      	addlt	r1, #1
90006750:	1049      	asrs	r1, r1, #1
90006752:	4249      	negs	r1, r1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006754:	b209      	sxth	r1, r1
90006756:	4620      	mov	r0, r4
90006758:	4798      	blx	r3
9000675a:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
9000675e:	fb02 3000 	mla	r0, r2, r0, r3
90006762:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006764:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90006768:	fb91 f1f2 	sdiv	r1, r1, r2
9000676c:	2900      	cmp	r1, #0
9000676e:	bfb8      	it	lt
90006770:	3101      	addlt	r1, #1
90006772:	1049      	asrs	r1, r1, #1
90006774:	e7ee      	b.n	90006754 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x28>
90006776:	bf00      	nop

90006778 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
90006778:	6b00      	ldr	r0, [r0, #48]	; 0x30
9000677a:	4770      	bx	lr

9000677c <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
9000677c:	6b40      	ldr	r0, [r0, #52]	; 0x34
9000677e:	4770      	bx	lr

90006780 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
90006780:	4770      	bx	lr
90006782:	bf00      	nop

90006784 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90006784:	4770      	bx	lr
90006786:	bf00      	nop

90006788 <_ZN8touchgfx21GraphWrapAndOverwriteILs10EED1Ev>:
 * A Continuous graph. A quick way to create a GraphWrapAndOverwriteData.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
90006788:	4770      	bx	lr
9000678a:	bf00      	nop

9000678c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
9000678c:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
9000678e:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90006790:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90006792:	6844      	ldr	r4, [r0, #4]
90006794:	f012 0f01 	tst.w	r2, #1
90006798:	eb04 0062 	add.w	r0, r4, r2, asr #1
9000679c:	d103      	bne.n	900067a6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
9000679e:	689b      	ldr	r3, [r3, #8]
    }
900067a0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
900067a4:	4718      	bx	r3
900067a6:	ea4f 0c62 	mov.w	ip, r2, asr #1
900067aa:	689b      	ldr	r3, [r3, #8]
900067ac:	f854 200c 	ldr.w	r2, [r4, ip]
    }
900067b0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
900067b4:	58d3      	ldr	r3, [r2, r3]
900067b6:	4718      	bx	r3

900067b8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
900067b8:	6843      	ldr	r3, [r0, #4]
900067ba:	b13b      	cbz	r3, 900067cc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
900067bc:	6883      	ldr	r3, [r0, #8]
900067be:	b10b      	cbz	r3, 900067c4 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
900067c0:	2001      	movs	r0, #1
    }
900067c2:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
900067c4:	68c0      	ldr	r0, [r0, #12]
900067c6:	f000 0001 	and.w	r0, r0, #1
900067ca:	4770      	bx	lr
900067cc:	4618      	mov	r0, r3
900067ce:	4770      	bx	lr

900067d0 <_ZN8touchgfx21GraphWrapAndOverwriteILs10EED0Ev>:
900067d0:	b510      	push	{r4, lr}
900067d2:	4604      	mov	r4, r0
900067d4:	f44f 71bc 	mov.w	r1, #376	; 0x178
900067d8:	f020 fc8d 	bl	900270f6 <_ZdlPvj>
900067dc:	4620      	mov	r0, r4
900067de:	bd10      	pop	{r4, pc}

900067e0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
900067e0:	b510      	push	{r4, lr}
900067e2:	4604      	mov	r4, r0
900067e4:	2110      	movs	r1, #16
900067e6:	f020 fc86 	bl	900270f6 <_ZdlPvj>
900067ea:	4620      	mov	r0, r4
900067ec:	bd10      	pop	{r4, pc}
900067ee:	bf00      	nop

900067f0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
900067f0:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
900067f2:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
900067f4:	db0d      	blt.n	90006812 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
900067f6:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
900067fa:	4604      	mov	r4, r0
900067fc:	429a      	cmp	r2, r3
900067fe:	dd08      	ble.n	90006812 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
90006800:	6803      	ldr	r3, [r0, #0]
90006802:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
90006806:	4798      	blx	r3
90006808:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
9000680c:	fb02 3000 	mla	r0, r2, r0, r3
90006810:	bd10      	pop	{r4, pc}
        assert(index >= 0 && index < usedCapacity);
90006812:	4b03      	ldr	r3, [pc, #12]	; (90006820 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
90006814:	f240 6133 	movw	r1, #1587	; 0x633
90006818:	4a02      	ldr	r2, [pc, #8]	; (90006824 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
9000681a:	4803      	ldr	r0, [pc, #12]	; (90006828 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
9000681c:	f020 fc9a 	bl	90027154 <__assert_func>
90006820:	9002ab58 	.word	0x9002ab58
90006824:	9002ab7c 	.word	0x9002ab7c
90006828:	9002abcc 	.word	0x9002abcc

9000682c <_ZN15Screen2ViewBaseD1Ev>:
Screen2ViewBase::~Screen2ViewBase()
9000682c:	4b03      	ldr	r3, [pc, #12]	; (9000683c <_ZN15Screen2ViewBaseD1Ev+0x10>)
9000682e:	b510      	push	{r4, lr}
90006830:	4604      	mov	r4, r0
90006832:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
90006834:	f00f fd62 	bl	900162fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
90006838:	4620      	mov	r0, r4
9000683a:	bd10      	pop	{r4, pc}
9000683c:	9002af34 	.word	0x9002af34

90006840 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
90006840:	4b07      	ldr	r3, [pc, #28]	; (90006860 <_ZN15Screen2ViewBaseD0Ev+0x20>)
90006842:	b500      	push	{lr}
90006844:	b083      	sub	sp, #12
90006846:	6003      	str	r3, [r0, #0]
90006848:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
9000684a:	f00f fd57 	bl	900162fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
9000684e:	9801      	ldr	r0, [sp, #4]
90006850:	f242 0114 	movw	r1, #8212	; 0x2014
90006854:	f020 fc4f 	bl	900270f6 <_ZdlPvj>
90006858:	9801      	ldr	r0, [sp, #4]
9000685a:	b003      	add	sp, #12
9000685c:	f85d fb04 	ldr.w	pc, [sp], #4
90006860:	9002af34 	.word	0x9002af34

90006864 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
90006864:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
90006868:	b12a      	cbz	r2, 90006876 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
        if (visible)
9000686a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
9000686e:	b112      	cbz	r2, 90006876 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
            invalidate();
90006870:	6803      	ldr	r3, [r0, #0]
90006872:	695b      	ldr	r3, [r3, #20]
90006874:	4718      	bx	r3
    }
90006876:	4770      	bx	lr

90006878 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
90006878:	f500 7052 	add.w	r0, r0, #840	; 0x348
9000687c:	4288      	cmp	r0, r1
9000687e:	d000      	beq.n	90006882 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90006880:	4770      	bx	lr
{
90006882:	b508      	push	{r3, lr}
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90006884:	f011 f9ba 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
        //backButtonInteraction
        //When backButton clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}
90006888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenSlideTransitionWest();
9000688c:	f7ff b880 	b.w	90005990 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>

90006890 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
    virtual int indexToDataPointYScaled(int16_t index) const
90006890:	b538      	push	{r3, r4, r5, lr}
        assert(index >= 0 && index < usedCapacity);
90006892:	1e0b      	subs	r3, r1, #0
90006894:	db13      	blt.n	900068be <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
90006896:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
9000689a:	429c      	cmp	r4, r3
9000689c:	dd0f      	ble.n	900068be <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
        return yValues[dataIndex(index)];
9000689e:	6802      	ldr	r2, [r0, #0]
900068a0:	4d0a      	ldr	r5, [pc, #40]	; (900068cc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x3c>)
900068a2:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
900068a6:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
900068aa:	42aa      	cmp	r2, r5
900068ac:	d102      	bne.n	900068b4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x24>
    }
900068ae:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900068b2:	bd38      	pop	{r3, r4, r5, pc}
        return yValues[dataIndex(index)];
900068b4:	4790      	blx	r2
900068b6:	4603      	mov	r3, r0
    }
900068b8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900068bc:	bd38      	pop	{r3, r4, r5, pc}
        assert(index >= 0 && index < usedCapacity);
900068be:	4b04      	ldr	r3, [pc, #16]	; (900068d0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x40>)
900068c0:	f240 6139 	movw	r1, #1593	; 0x639
900068c4:	4a03      	ldr	r2, [pc, #12]	; (900068d4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x44>)
900068c6:	4804      	ldr	r0, [pc, #16]	; (900068d8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x48>)
900068c8:	f020 fc44 	bl	90027154 <__assert_func>
900068cc:	90006729 	.word	0x90006729
900068d0:	9002ab58 	.word	0x9002ab58
900068d4:	9002ac2c 	.word	0x9002ac2c
900068d8:	9002abcc 	.word	0x9002abcc

900068dc <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
900068dc:	b430      	push	{r4, r5}
    {
        setXAxisFactorScaled(scale);
900068de:	6804      	ldr	r4, [r0, #0]
900068e0:	4d05      	ldr	r5, [pc, #20]	; (900068f8 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x1c>)
900068e2:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
900068e6:	42ac      	cmp	r4, r5
900068e8:	d103      	bne.n	900068f2 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x16>
        xAxisFactor = factor;
900068ea:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
900068ee:	bc30      	pop	{r4, r5}
900068f0:	4770      	bx	lr
        setXAxisFactorScaled(scale);
900068f2:	4623      	mov	r3, r4
    }
900068f4:	bc30      	pop	{r4, r5}
        setXAxisFactorScaled(scale);
900068f6:	4718      	bx	r3
900068f8:	90006709 	.word	0x90006709

900068fc <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
        return getScaleY();
900068fc:	6802      	ldr	r2, [r0, #0]
900068fe:	4904      	ldr	r1, [pc, #16]	; (90006910 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x14>)
90006900:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
90006904:	428a      	cmp	r2, r1
90006906:	d101      	bne.n	9000690c <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x10>
        return yScale;
90006908:	6b40      	ldr	r0, [r0, #52]	; 0x34
    }
9000690a:	4770      	bx	lr
        return getScaleY();
9000690c:	4710      	bx	r2
9000690e:	bf00      	nop
90006910:	9000677d 	.word	0x9000677d

90006914 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
        return getGraphRangeXMinScaled();
90006914:	6802      	ldr	r2, [r0, #0]
90006916:	4904      	ldr	r1, [pc, #16]	; (90006928 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x14>)
90006918:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
9000691c:	428a      	cmp	r2, r1
9000691e:	d102      	bne.n	90006926 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x12>
        return graphRangeMinX;
90006920:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    }
90006924:	4770      	bx	lr
        return getGraphRangeXMinScaled();
90006926:	4710      	bx	r2
90006928:	90006589 	.word	0x90006589

9000692c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
        return getGraphRangeXMaxScaled();
9000692c:	6802      	ldr	r2, [r0, #0]
9000692e:	4904      	ldr	r1, [pc, #16]	; (90006940 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x14>)
90006930:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
90006934:	428a      	cmp	r2, r1
90006936:	d102      	bne.n	9000693e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x12>
        return graphRangeMaxX;
90006938:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    }
9000693c:	4770      	bx	lr
        return getGraphRangeXMaxScaled();
9000693e:	4710      	bx	r2
90006940:	900065e1 	.word	0x900065e1

90006944 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
90006944:	6802      	ldr	r2, [r0, #0]
90006946:	4904      	ldr	r1, [pc, #16]	; (90006958 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x14>)
90006948:	f8d2 215c 	ldr.w	r2, [r2, #348]	; 0x15c
9000694c:	428a      	cmp	r2, r1
9000694e:	d102      	bne.n	90006956 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x12>
        return xAxisFactor;
90006950:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    }
90006954:	4770      	bx	lr
        return getXAxisFactorScaled();
90006956:	4710      	bx	r2
90006958:	90006711 	.word	0x90006711

9000695c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        setXAxisOffsetScaled(int2scaledX(offset));
9000695c:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisOffset(int offset)
9000695e:	b410      	push	{r4}
        return i * scale;
90006960:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisOffsetScaled(int2scaledX(offset));
90006962:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
        return i * scale;
90006966:	fb04 f101 	mul.w	r1, r4, r1
9000696a:	4c05      	ldr	r4, [pc, #20]	; (90006980 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x24>)
9000696c:	42a2      	cmp	r2, r4
9000696e:	d104      	bne.n	9000697a <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x1e>
    }
90006970:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisOffset = offset;
90006974:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006978:	4770      	bx	lr
9000697a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisOffsetScaled(int2scaledX(offset));
9000697e:	4710      	bx	r2
90006980:	90006719 	.word	0x90006719

90006984 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
90006984:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisOffsetScaled(float2scaledX(offset));
90006988:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000698a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
9000698e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
90006992:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006996:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
9000699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000699e:	da17      	bge.n	900069d0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900069a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900069a4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900069a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900069ac:	ee17 3a90 	vmov	r3, s15
900069b0:	3b01      	subs	r3, #1
900069b2:	ee30 0a66 	vsub.f32	s0, s0, s13
900069b6:	ee30 0a07 	vadd.f32	s0, s0, s14
900069ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
900069be:	ee10 1a10 	vmov	r1, s0
900069c2:	4419      	add	r1, r3
900069c4:	4b08      	ldr	r3, [pc, #32]	; (900069e8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
900069c6:	429a      	cmp	r2, r3
900069c8:	d10d      	bne.n	900069e6 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
        xAxisOffset = offset;
900069ca:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
900069ce:	4770      	bx	lr
            return (int)(fs + 0.5f);
900069d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
900069d4:	4b04      	ldr	r3, [pc, #16]	; (900069e8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
900069d6:	429a      	cmp	r2, r3
900069d8:	ee30 0a27 	vadd.f32	s0, s0, s15
900069dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900069e0:	ee17 1a90 	vmov	r1, s15
900069e4:	d0f1      	beq.n	900069ca <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x46>
        setXAxisOffsetScaled(float2scaledX(offset));
900069e6:	4710      	bx	r2
900069e8:	90006719 	.word	0x90006719

900069ec <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
        return scaled2intX(getXAxisOffsetScaled());
900069ec:	6803      	ldr	r3, [r0, #0]
900069ee:	4a12      	ldr	r2, [pc, #72]	; (90006a38 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x4c>)
900069f0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
900069f4:	4293      	cmp	r3, r2
    virtual int getXAxisOffsetAsInt() const
900069f6:	b510      	push	{r4, lr}
900069f8:	4604      	mov	r4, r0
900069fa:	d11a      	bne.n	90006a32 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
        return xAxisOffset;
900069fc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
        if (i >= 0)
90006a00:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006a02:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006a04:	da0c      	bge.n	90006a20 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006a06:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006a0a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006a0e:	3801      	subs	r0, #1
90006a10:	fb90 f0f2 	sdiv	r0, r0, r2
90006a14:	2800      	cmp	r0, #0
90006a16:	bfb8      	it	lt
90006a18:	3001      	addlt	r0, #1
90006a1a:	1040      	asrs	r0, r0, #1
90006a1c:	4240      	negs	r0, r0
    }
90006a1e:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006a20:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006a24:	fb90 f0f2 	sdiv	r0, r0, r2
90006a28:	2800      	cmp	r0, #0
90006a2a:	bfb8      	it	lt
90006a2c:	3001      	addlt	r0, #1
90006a2e:	1040      	asrs	r0, r0, #1
    }
90006a30:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisOffsetScaled());
90006a32:	4798      	blx	r3
90006a34:	e7e4      	b.n	90006a00 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x14>
90006a36:	bf00      	nop
90006a38:	90006721 	.word	0x90006721

90006a3c <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:
        return scaled2floatX(getXAxisOffsetScaled());
90006a3c:	6803      	ldr	r3, [r0, #0]
90006a3e:	4a0b      	ldr	r2, [pc, #44]	; (90006a6c <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x30>)
90006a40:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
90006a44:	4293      	cmp	r3, r2
    virtual float getXAxisOffsetAsFloat() const
90006a46:	b510      	push	{r4, lr}
90006a48:	4604      	mov	r4, r0
90006a4a:	d10a      	bne.n	90006a62 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x26>
        return xAxisOffset;
90006a4c:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
        return (float)i / (float)scale;
90006a50:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006a58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006a5c:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006a60:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisOffsetScaled());
90006a62:	4798      	blx	r3
90006a64:	ee07 0a90 	vmov	s15, r0
90006a68:	e7f2      	b.n	90006a50 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x14>
90006a6a:	bf00      	nop
90006a6c:	90006721 	.word	0x90006721

90006a70 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        setXAxisFactorScaled(int2scaledX(factor));
90006a70:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisFactor(int factor)
90006a72:	b410      	push	{r4}
        return i * scale;
90006a74:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006a76:	f8d2 2148 	ldr.w	r2, [r2, #328]	; 0x148
        return i * scale;
90006a7a:	fb04 f101 	mul.w	r1, r4, r1
90006a7e:	4c05      	ldr	r4, [pc, #20]	; (90006a94 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x24>)
90006a80:	42a2      	cmp	r2, r4
90006a82:	d104      	bne.n	90006a8e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x1e>
    }
90006a84:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006a88:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006a8c:	4770      	bx	lr
90006a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(int2scaledX(factor));
90006a92:	4710      	bx	r2
90006a94:	90006709 	.word	0x90006709

90006a98 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
90006a98:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisFactorScaled(float2scaledX(factor));
90006a9c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
90006aa2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
90006aa6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006aaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006ab2:	da17      	bge.n	90006ae4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006ab4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006ab8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006ac0:	ee17 3a90 	vmov	r3, s15
90006ac4:	3b01      	subs	r3, #1
90006ac6:	ee30 0a66 	vsub.f32	s0, s0, s13
90006aca:	ee30 0a07 	vadd.f32	s0, s0, s14
90006ace:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006ad2:	ee10 1a10 	vmov	r1, s0
90006ad6:	4419      	add	r1, r3
90006ad8:	4b08      	ldr	r3, [pc, #32]	; (90006afc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006ada:	429a      	cmp	r2, r3
90006adc:	d10d      	bne.n	90006afa <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
        xAxisFactor = factor;
90006ade:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006ae2:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006ae4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006ae8:	4b04      	ldr	r3, [pc, #16]	; (90006afc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006aea:	429a      	cmp	r2, r3
90006aec:	ee30 0a27 	vadd.f32	s0, s0, s15
90006af0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006af4:	ee17 1a90 	vmov	r1, s15
90006af8:	d0f1      	beq.n	90006ade <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x46>
        setXAxisFactorScaled(float2scaledX(factor));
90006afa:	4710      	bx	r2
90006afc:	90006709 	.word	0x90006709

90006b00 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
        return scaled2intX(getXAxisFactorScaled());
90006b00:	6803      	ldr	r3, [r0, #0]
90006b02:	4a12      	ldr	r2, [pc, #72]	; (90006b4c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x4c>)
90006b04:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b08:	4293      	cmp	r3, r2
    virtual int getXAxisFactorAsInt() const
90006b0a:	b510      	push	{r4, lr}
90006b0c:	4604      	mov	r4, r0
90006b0e:	d11a      	bne.n	90006b46 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
        return xAxisFactor;
90006b10:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006b14:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006b16:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006b18:	da0c      	bge.n	90006b34 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006b1a:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006b1e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006b22:	3801      	subs	r0, #1
90006b24:	fb90 f0f2 	sdiv	r0, r0, r2
90006b28:	2800      	cmp	r0, #0
90006b2a:	bfb8      	it	lt
90006b2c:	3001      	addlt	r0, #1
90006b2e:	1040      	asrs	r0, r0, #1
90006b30:	4240      	negs	r0, r0
    }
90006b32:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006b34:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006b38:	fb90 f0f2 	sdiv	r0, r0, r2
90006b3c:	2800      	cmp	r0, #0
90006b3e:	bfb8      	it	lt
90006b40:	3001      	addlt	r0, #1
90006b42:	1040      	asrs	r0, r0, #1
    }
90006b44:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisFactorScaled());
90006b46:	4798      	blx	r3
90006b48:	e7e4      	b.n	90006b14 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x14>
90006b4a:	bf00      	nop
90006b4c:	90006711 	.word	0x90006711

90006b50 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
        return scaled2floatX(getXAxisFactorScaled());
90006b50:	6803      	ldr	r3, [r0, #0]
90006b52:	4a0b      	ldr	r2, [pc, #44]	; (90006b80 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x30>)
90006b54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b58:	4293      	cmp	r3, r2
    virtual float getXAxisFactorAsFloat() const
90006b5a:	b510      	push	{r4, lr}
90006b5c:	4604      	mov	r4, r0
90006b5e:	d10a      	bne.n	90006b76 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x26>
        return xAxisFactor;
90006b60:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006b64:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006b6c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006b70:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006b74:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisFactorScaled());
90006b76:	4798      	blx	r3
90006b78:	ee07 0a90 	vmov	s15, r0
90006b7c:	e7f2      	b.n	90006b64 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x14>
90006b7e:	bf00      	nop
90006b80:	90006711 	.word	0x90006711

90006b84 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
90006b84:	b470      	push	{r4, r5, r6}
        setXAxisFactor(scale);
90006b86:	6804      	ldr	r4, [r0, #0]
90006b88:	4e0b      	ldr	r6, [pc, #44]	; (90006bb8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x34>)
90006b8a:	f8d4 513c 	ldr.w	r5, [r4, #316]	; 0x13c
90006b8e:	42b5      	cmp	r5, r6
90006b90:	d10c      	bne.n	90006bac <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x28>
90006b92:	460a      	mov	r2, r1
        return i * scale;
90006b94:	6b01      	ldr	r1, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006b96:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
        return i * scale;
90006b9a:	fb02 f101 	mul.w	r1, r2, r1
90006b9e:	4a07      	ldr	r2, [pc, #28]	; (90006bbc <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x38>)
90006ba0:	4294      	cmp	r4, r2
90006ba2:	d106      	bne.n	90006bb2 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x2e>
        xAxisFactor = factor;
90006ba4:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006ba8:	bc70      	pop	{r4, r5, r6}
90006baa:	4770      	bx	lr
        setXAxisFactor(scale);
90006bac:	462b      	mov	r3, r5
    }
90006bae:	bc70      	pop	{r4, r5, r6}
        setXAxisFactor(scale);
90006bb0:	4718      	bx	r3
        setXAxisFactorScaled(int2scaledX(factor));
90006bb2:	4623      	mov	r3, r4
    }
90006bb4:	bc70      	pop	{r4, r5, r6}
        setXAxisFactorScaled(int2scaledX(factor));
90006bb6:	4718      	bx	r3
90006bb8:	90006a71 	.word	0x90006a71
90006bbc:	90006709 	.word	0x90006709

90006bc0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:
        return getXAxisFactorAsFloat();
90006bc0:	6803      	ldr	r3, [r0, #0]
90006bc2:	490e      	ldr	r1, [pc, #56]	; (90006bfc <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x3c>)
90006bc4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
90006bc8:	428a      	cmp	r2, r1
90006bca:	d111      	bne.n	90006bf0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x30>
        return scaled2floatX(getXAxisFactorScaled());
90006bcc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006bd0:	4a0b      	ldr	r2, [pc, #44]	; (90006c00 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x40>)
90006bd2:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
90006bd4:	b510      	push	{r4, lr}
90006bd6:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
90006bd8:	d10b      	bne.n	90006bf2 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x32>
        return xAxisFactor;
90006bda:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006bde:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90006be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006be6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90006bea:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
90006bee:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsFloat();
90006bf0:	4710      	bx	r2
        return scaled2floatX(getXAxisFactorScaled());
90006bf2:	4798      	blx	r3
90006bf4:	ee07 0a90 	vmov	s15, r0
90006bf8:	e7f1      	b.n	90006bde <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x1e>
90006bfa:	bf00      	nop
90006bfc:	90006b51 	.word	0x90006b51
90006c00:	90006711 	.word	0x90006711

90006c04 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
        return valueToScreenXQ5(int2scaledX(index));
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c04:	6802      	ldr	r2, [r0, #0]
90006c06:	f8df c090 	ldr.w	ip, [pc, #144]	; 90006c98 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x94>
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c0c:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006c10:	b085      	sub	sp, #20
90006c12:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c14:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90006c18:	4566      	cmp	r6, ip
90006c1a:	f8d2 5118 	ldr.w	r5, [r2, #280]	; 0x118
90006c1e:	d136      	bne.n	90006c8e <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x8a>
90006c20:	460b      	mov	r3, r1
90006c22:	4a1c      	ldr	r2, [pc, #112]	; (90006c94 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x90>)
90006c24:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
90006c28:	4295      	cmp	r5, r2
90006c2a:	d12a      	bne.n	90006c82 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x7e>
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006c2c:	f9b4 c114 	ldrsh.w	ip, [r4, #276]	; 0x114
90006c30:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
90006c34:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90006c38:	4462      	add	r2, ip
90006c3a:	1a9b      	subs	r3, r3, r2
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006c3c:	e9d4 524d 	ldrd	r5, r2, [r4, #308]	; 0x134
90006c40:	b21c      	sxth	r4, r3
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c42:	ab03      	add	r3, sp, #12
90006c44:	1b52      	subs	r2, r2, r5
90006c46:	1b48      	subs	r0, r1, r5
90006c48:	44a4      	add	ip, r4
90006c4a:	1e61      	subs	r1, r4, #1
90006c4c:	9201      	str	r2, [sp, #4]
90006c4e:	f10c 3cff 	add.w	ip, ip, #4294967295
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006c52:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c56:	f012 fa08 	bl	9001906a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006c5a:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c5c:	9903      	ldr	r1, [sp, #12]
90006c5e:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006c62:	9a01      	ldr	r2, [sp, #4]
90006c64:	db06      	blt.n	90006c74 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x70>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c66:	f012 fa1f 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006c6a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
            return Q5(v - q5.v);
90006c6e:	1a20      	subs	r0, r4, r0
    }
90006c70:	b005      	add	sp, #20
90006c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c74:	f012 fa18 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006c78:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006c7c:	1a20      	subs	r0, r4, r0
90006c7e:	b005      	add	sp, #20
90006c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c82:	4620      	mov	r0, r4
90006c84:	462b      	mov	r3, r5
    }
90006c86:	b005      	add	sp, #20
90006c88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c8c:	4718      	bx	r3
90006c8e:	47b0      	blx	r6
90006c90:	4603      	mov	r3, r0
90006c92:	e7c6      	b.n	90006c22 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x1e>
90006c94:	90006ded 	.word	0x90006ded
90006c98:	90006729 	.word	0x90006729

90006c9c <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:
        return getXAxisFactorAsInt();
90006c9c:	6803      	ldr	r3, [r0, #0]
90006c9e:	4915      	ldr	r1, [pc, #84]	; (90006cf4 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x58>)
90006ca0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
90006ca4:	428a      	cmp	r2, r1
90006ca6:	d121      	bne.n	90006cec <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x50>
        return scaled2intX(getXAxisFactorScaled());
90006ca8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006cac:	4a12      	ldr	r2, [pc, #72]	; (90006cf8 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x5c>)
90006cae:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
90006cb0:	b510      	push	{r4, lr}
90006cb2:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
90006cb4:	d11b      	bne.n	90006cee <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x52>
        return xAxisFactor;
90006cb6:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006cba:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006cbe:	da0c      	bge.n	90006cda <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x3e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006cc0:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006cc4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006cc8:	3801      	subs	r0, #1
90006cca:	fb90 f0f2 	sdiv	r0, r0, r2
90006cce:	2800      	cmp	r0, #0
90006cd0:	bfb8      	it	lt
90006cd2:	3001      	addlt	r0, #1
90006cd4:	1040      	asrs	r0, r0, #1
90006cd6:	4240      	negs	r0, r0
    }
90006cd8:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006cda:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006cde:	fb90 f0f2 	sdiv	r0, r0, r2
90006ce2:	2800      	cmp	r0, #0
90006ce4:	bfb8      	it	lt
90006ce6:	3001      	addlt	r0, #1
90006ce8:	1040      	asrs	r0, r0, #1
    }
90006cea:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsInt();
90006cec:	4710      	bx	r2
        return scaled2intX(getXAxisFactorScaled());
90006cee:	4798      	blx	r3
90006cf0:	e7e3      	b.n	90006cba <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x1e>
90006cf2:	bf00      	nop
90006cf4:	90006b01 	.word	0x90006b01
90006cf8:	90006711 	.word	0x90006711

90006cfc <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
        setXAxisFactor(scale);
90006cfc:	6802      	ldr	r2, [r0, #0]
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
90006cfe:	b410      	push	{r4}
        setXAxisFactor(scale);
90006d00:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
90006d04:	4c1e      	ldr	r4, [pc, #120]	; (90006d80 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x84>)
90006d06:	42a1      	cmp	r1, r4
90006d08:	d137      	bne.n	90006d7a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x7e>
        const float fs = f * (float)scale;
90006d0a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006d0e:	4603      	mov	r3, r0
        setXAxisFactorScaled(float2scaledX(factor));
90006d10:	f8d2 4148 	ldr.w	r4, [r2, #328]	; 0x148
        const float fs = f * (float)scale;
90006d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006d18:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006d1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006d24:	da19      	bge.n	90006d5a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x5e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006d26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006d2a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006d2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006d32:	ee17 2a90 	vmov	r2, s15
90006d36:	3a01      	subs	r2, #1
90006d38:	ee30 0a66 	vsub.f32	s0, s0, s13
90006d3c:	ee30 0a07 	vadd.f32	s0, s0, s14
90006d40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006d44:	ee10 1a10 	vmov	r1, s0
90006d48:	4411      	add	r1, r2
90006d4a:	4a0e      	ldr	r2, [pc, #56]	; (90006d84 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006d4c:	4294      	cmp	r4, r2
90006d4e:	d10f      	bne.n	90006d70 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x74>
    }
90006d50:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006d54:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    }
90006d58:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006d5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006d5e:	4a09      	ldr	r2, [pc, #36]	; (90006d84 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006d60:	4294      	cmp	r4, r2
90006d62:	ee30 0a27 	vadd.f32	s0, s0, s15
90006d66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006d6a:	ee17 1a90 	vmov	r1, s15
90006d6e:	d0ef      	beq.n	90006d50 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x54>
        setXAxisFactorScaled(float2scaledX(factor));
90006d70:	4618      	mov	r0, r3
90006d72:	4623      	mov	r3, r4
    }
90006d74:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(float2scaledX(factor));
90006d78:	4718      	bx	r3
    }
90006d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactor(scale);
90006d7e:	4708      	bx	r1
90006d80:	90006a99 	.word	0x90006a99
90006d84:	90006709 	.word	0x90006709

90006d88 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d88:	b530      	push	{r4, r5, lr}
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d8a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d8e:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d90:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d94:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006d96:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d9a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
90006d9e:	4402      	add	r2, r0
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006da0:	1b48      	subs	r0, r1, r5
90006da2:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006da4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006da8:	ab03      	add	r3, sp, #12
90006daa:	b209      	sxth	r1, r1
90006dac:	1b52      	subs	r2, r2, r5
90006dae:	3901      	subs	r1, #1
90006db0:	9201      	str	r2, [sp, #4]
90006db2:	f012 f95a 	bl	9001906a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006db6:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006db8:	9903      	ldr	r1, [sp, #12]
90006dba:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006dbe:	9a01      	ldr	r2, [sp, #4]
90006dc0:	db09      	blt.n	90006dd6 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei+0x4e>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dc2:	f012 f971 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006dc6:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006dca:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006dce:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006dd2:	b005      	add	sp, #20
90006dd4:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dd6:	f012 f967 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006dda:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006dde:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006de2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006de6:	b005      	add	sp, #20
90006de8:	bd30      	pop	{r4, r5, pc}
90006dea:	bf00      	nop

90006dec <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006dec:	f9b0 c114 	ldrsh.w	ip, [r0, #276]	; 0x114
90006df0:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006df4:	b530      	push	{r4, r5, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006df6:	4463      	add	r3, ip
90006df8:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006dfc:	b085      	sub	sp, #20
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006dfe:	1ae4      	subs	r4, r4, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006e00:	b224      	sxth	r4, r4
90006e02:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
90006e06:	44a4      	add	ip, r4
90006e08:	1ad2      	subs	r2, r2, r3
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e0a:	1ac8      	subs	r0, r1, r3
90006e0c:	f10c 3cff 	add.w	ip, ip, #4294967295
90006e10:	1e61      	subs	r1, r4, #1
90006e12:	ab03      	add	r3, sp, #12
90006e14:	9201      	str	r2, [sp, #4]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006e16:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e1a:	f012 f926 	bl	9001906a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006e1e:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e20:	9903      	ldr	r1, [sp, #12]
90006e22:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e26:	9a01      	ldr	r2, [sp, #4]
90006e28:	db06      	blt.n	90006e38 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei+0x4c>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e2a:	f012 f93d 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e2e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006e32:	1a20      	subs	r0, r4, r0
90006e34:	b005      	add	sp, #20
90006e36:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e38:	f012 f936 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006e3c:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006e40:	1a20      	subs	r0, r4, r0
90006e42:	b005      	add	sp, #20
90006e44:	bd30      	pop	{r4, r5, pc}
90006e46:	bf00      	nop

90006e48 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
90006e48:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return valueToScreenXQ5(int2scaledX(index));
90006e4a:	6803      	ldr	r3, [r0, #0]
        return i * scale;
90006e4c:	fb02 f101 	mul.w	r1, r2, r1
90006e50:	4a1b      	ldr	r2, [pc, #108]	; (90006ec0 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x78>)
        return valueToScreenXQ5(int2scaledX(index));
90006e52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        return i * scale;
90006e56:	4293      	cmp	r3, r2
90006e58:	d130      	bne.n	90006ebc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x74>
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e5a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006e5e:	b530      	push	{r4, r5, lr}
90006e60:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e62:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006e66:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006e68:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e6c:	4402      	add	r2, r0
90006e6e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e72:	1b48      	subs	r0, r1, r5
90006e74:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006e76:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006e7a:	ab03      	add	r3, sp, #12
90006e7c:	b209      	sxth	r1, r1
90006e7e:	1b52      	subs	r2, r2, r5
90006e80:	3901      	subs	r1, #1
90006e82:	9201      	str	r2, [sp, #4]
90006e84:	f012 f8f1 	bl	9001906a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006e88:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e8a:	9903      	ldr	r1, [sp, #12]
90006e8c:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e90:	9a01      	ldr	r2, [sp, #4]
90006e92:	db09      	blt.n	90006ea8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x60>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e94:	f012 f908 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e98:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006e9c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
90006ea0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    }
90006ea4:	b005      	add	sp, #20
90006ea6:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006ea8:	f012 f8fe 	bl	900190a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006eac:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006eb0:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
            return Q5(v + q5.v);
90006eb4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006eb8:	b005      	add	sp, #20
90006eba:	bd30      	pop	{r4, r5, pc}
        return valueToScreenXQ5(int2scaledX(index));
90006ebc:	4718      	bx	r3
90006ebe:	bf00      	nop
90006ec0:	90006d89 	.word	0x90006d89

90006ec4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006ec4:	6803      	ldr	r3, [r0, #0]
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
90006ec6:	b470      	push	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006ec8:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
90006ecc:	4e15      	ldr	r6, [pc, #84]	; (90006f24 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x60>)
        return int2scaled(i, xScale);
90006ece:	6b05      	ldr	r5, [r0, #48]	; 0x30
        return i * scale;
90006ed0:	42b4      	cmp	r4, r6
90006ed2:	fb05 f202 	mul.w	r2, r5, r2
90006ed6:	d122      	bne.n	90006f1e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x5a>
        if (i >= 0)
90006ed8:	2a00      	cmp	r2, #0
90006eda:	4684      	mov	ip, r0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006edc:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
90006ee0:	da14      	bge.n	90006f0c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x48>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006ee2:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006ee6:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006eea:	3b01      	subs	r3, #1
90006eec:	fb93 f3f5 	sdiv	r3, r3, r5
90006ef0:	2b00      	cmp	r3, #0
90006ef2:	bfb8      	it	lt
90006ef4:	3301      	addlt	r3, #1
90006ef6:	105b      	asrs	r3, r3, #1
90006ef8:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006efa:	f9bc 211e 	ldrsh.w	r2, [ip, #286]	; 0x11e
90006efe:	4259      	negs	r1, r3
90006f00:	4660      	mov	r0, ip
90006f02:	3a01      	subs	r2, #1
90006f04:	441a      	add	r2, r3
90006f06:	4623      	mov	r3, r4
    }
90006f08:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f0a:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006f0c:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f10:	fb93 f3f5 	sdiv	r3, r3, r5
90006f14:	2b00      	cmp	r3, #0
90006f16:	bfb8      	it	lt
90006f18:	3301      	addlt	r3, #1
90006f1a:	105b      	asrs	r3, r3, #1
90006f1c:	e7ed      	b.n	90006efa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x36>
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f1e:	4623      	mov	r3, r4
    }
90006f20:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f22:	4718      	bx	r3
90006f24:	900066bd 	.word	0x900066bd

90006f28 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
90006f28:	b470      	push	{r4, r5, r6}
        return float2scaled(f, xScale);
90006f2a:	6b05      	ldr	r5, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f2c:	6804      	ldr	r4, [r0, #0]
        const float fs = f * (float)scale;
90006f2e:	ee07 5a90 	vmov	s15, r5
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f32:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
        const float fs = f * (float)scale;
90006f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006f3a:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006f3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006f46:	da35      	bge.n	90006fb4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x8c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006f48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006f4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006f54:	ee17 3a90 	vmov	r3, s15
90006f58:	3b01      	subs	r3, #1
90006f5a:	ee30 0a66 	vsub.f32	s0, s0, s13
90006f5e:	ee30 0a07 	vadd.f32	s0, s0, s14
90006f62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006f66:	ee10 2a10 	vmov	r2, s0
90006f6a:	441a      	add	r2, r3
90006f6c:	4b18      	ldr	r3, [pc, #96]	; (90006fd0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006f6e:	429e      	cmp	r6, r3
90006f70:	d12b      	bne.n	90006fca <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa2>
        if (i >= 0)
90006f72:	2a00      	cmp	r2, #0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f74:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
        if (i >= 0)
90006f78:	da13      	bge.n	90006fa2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x7a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006f7a:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006f7e:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f82:	3b01      	subs	r3, #1
90006f84:	fb93 f3f5 	sdiv	r3, r3, r5
90006f88:	2b00      	cmp	r3, #0
90006f8a:	bfb8      	it	lt
90006f8c:	3301      	addlt	r3, #1
90006f8e:	105b      	asrs	r3, r3, #1
90006f90:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f92:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
90006f96:	4259      	negs	r1, r3
90006f98:	3a01      	subs	r2, #1
90006f9a:	441a      	add	r2, r3
90006f9c:	4623      	mov	r3, r4
    }
90006f9e:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006fa0:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006fa2:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006fa6:	fb93 f3f5 	sdiv	r3, r3, r5
90006faa:	2b00      	cmp	r3, #0
90006fac:	bfb8      	it	lt
90006fae:	3301      	addlt	r3, #1
90006fb0:	105b      	asrs	r3, r3, #1
90006fb2:	e7ee      	b.n	90006f92 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x6a>
            return (int)(fs + 0.5f);
90006fb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006fb8:	4b05      	ldr	r3, [pc, #20]	; (90006fd0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006fba:	429e      	cmp	r6, r3
90006fbc:	ee30 0a27 	vadd.f32	s0, s0, s15
90006fc0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006fc4:	ee17 2a90 	vmov	r2, s15
90006fc8:	d0d3      	beq.n	90006f72 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x4a>
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006fca:	4633      	mov	r3, r6
    }
90006fcc:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006fce:	4718      	bx	r3
90006fd0:	900066bd 	.word	0x900066bd

90006fd4 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
90006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006fd8:	ed2d 8b02 	vpush	{d8}
90006fdc:	b08b      	sub	sp, #44	; 0x2c
90006fde:	4604      	mov	r4, r0
90006fe0:	f012 fa0e 	bl	90019400 <_ZN8touchgfx6ScreenC1Ev>
        : Widget(), alpha(255), color(0)
90006fe4:	4a77      	ldr	r2, [pc, #476]	; (900071c4 <_ZN15Screen2ViewBaseC1Ev+0x1f0>)
90006fe6:	2500      	movs	r5, #0
90006fe8:	f64f 78ff 	movw	r8, #65535	; 0xffff
          touchable(false),
90006fec:	f44f 7980 	mov.w	r9, #256	; 0x100
90006ff0:	f04f 0bff 	mov.w	fp, #255	; 0xff
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
90006ff4:	4974      	ldr	r1, [pc, #464]	; (900071c8 <_ZN15Screen2ViewBaseC1Ev+0x1f4>)
90006ff6:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
90006ffa:	6422      	str	r2, [r4, #64]	; 0x40
        : DynamicDataGraph(capacity, values), current(0)
90006ffc:	f504 76c6 	add.w	r6, r4, #396	; 0x18c
        : Widget(), bitmap(bmp), alpha(255)
90007000:	4a72      	ldr	r2, [pc, #456]	; (900071cc <_ZN15Screen2ViewBaseC1Ev+0x1f8>)
        Image::setBitmap(bmp);
90007002:	4650      	mov	r0, sl
90007004:	6021      	str	r1, [r4, #0]
90007006:	a908      	add	r1, sp, #32
        : Widget(), bitmap(bmp), alpha(255)
90007008:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
9000700c:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
90007010:	66e2      	str	r2, [r4, #108]	; 0x6c
90007012:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90007014:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
90007016:	6625      	str	r5, [r4, #96]	; 0x60
          touchable(false),
90007018:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
        : color(col)
9000701c:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
9000701e:	6725      	str	r5, [r4, #112]	; 0x70
90007020:	f884 b066 	strb.w	fp, [r4, #102]	; 0x66
          cachedAbsX(0),
90007024:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
          touchable(false),
90007028:	f8a4 9090 	strh.w	r9, [r4, #144]	; 0x90
        : typedTextId(id)
9000702c:	4f68      	ldr	r7, [pc, #416]	; (900071d0 <_ZN15Screen2ViewBaseC1Ev+0x1fc>)
9000702e:	f8ad 8020 	strh.w	r8, [sp, #32]
90007032:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
90007036:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
9000703a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
9000703e:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
          parent(0),
90007042:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
          nextDrawChainElement(0),
90007046:	e9c4 5521 	strd	r5, r5, [r4, #132]	; 0x84
        Image::setBitmap(bmp);
9000704a:	f00e fa5c 	bl	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9000704e:	f04f 32ff 	mov.w	r2, #4294967295
        : TextAreaWithWildcardBase(), wc1(0)
90007052:	4960      	ldr	r1, [pc, #384]	; (900071d4 <_ZN15Screen2ViewBaseC1Ev+0x200>)
          updateTicksInterval(updateInterval),
90007054:	2301      	movs	r3, #1
          running(false)
90007056:	4860      	ldr	r0, [pc, #384]	; (900071d8 <_ZN15Screen2ViewBaseC1Ev+0x204>)
          startId(BITMAP_INVALID),
90007058:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
9000705c:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007060:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
          updateTicksInterval(updateInterval),
90007064:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
90007068:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
          running(false)
9000706c:	66e0      	str	r0, [r4, #108]	; 0x6c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
9000706e:	4630      	mov	r0, r6
        : animationDoneAction(0),
90007070:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
          running(false)
90007074:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
          touchable(false),
90007078:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
9000707c:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
        : color(col)
90007080:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90007084:	f8a4 50dc 	strh.w	r5, [r4, #220]	; 0xdc
90007088:	f8c4 b0de 	str.w	fp, [r4, #222]	; 0xde
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000708c:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
        : x(0), y(0), width(0), height(0)
90007090:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
90007094:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
          nextSibling(0),
90007098:	e9c4 552f 	strd	r5, r5, [r4, #188]	; 0xbc
          cachedAbsX(0),
9000709c:	e9c4 5531 	strd	r5, r5, [r4, #196]	; 0xc4
900070a0:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
900070a4:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
900070a8:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
          nextSibling(0),
900070ac:	e9c4 5542 	strd	r5, r5, [r4, #264]	; 0x108
          cachedAbsX(0),
900070b0:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
          touchable(false),
900070b4:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
900070b8:	f8a4 8120 	strh.w	r8, [r4, #288]	; 0x120
900070bc:	f8a4 816c 	strh.w	r8, [r4, #364]	; 0x16c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900070c0:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
900070c4:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
900070c8:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
900070cc:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
        : color(col)
900070d0:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
900070d4:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
900070d8:	f8c4 b12a 	str.w	fp, [r4, #298]	; 0x12a
900070dc:	f8c4 b176 	str.w	fp, [r4, #374]	; 0x176
              text(0)
900070e0:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
900070e4:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
900070e8:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900070ec:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900070f0:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900070f4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 900071f8 <_ZN15Screen2ViewBaseC1Ev+0x224>
900070f8:	e9c4 524c 	strd	r5, r2, [r4, #304]	; 0x130
900070fc:	e9c4 514f 	strd	r5, r1, [r4, #316]	; 0x13c
        : x(0), y(0), width(0), height(0)
90007100:	e9c4 5551 	strd	r5, r5, [r4, #324]	; 0x144
90007104:	210a      	movs	r1, #10
90007106:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
          nextSibling(0),
9000710a:	e9c4 5555 	strd	r5, r5, [r4, #340]	; 0x154
          cachedAbsX(0),
9000710e:	e9c4 5557 	strd	r5, r5, [r4, #348]	; 0x15c
90007112:	e9c4 5561 	strd	r5, r5, [r4, #388]	; 0x184
90007116:	f00d f85b 	bl	900141d0 <_ZN8touchgfx17AbstractDataGraphC1Es>
9000711a:	4930      	ldr	r1, [pc, #192]	; (900071dc <_ZN15Screen2ViewBaseC1Ev+0x208>)
9000711c:	2301      	movs	r3, #1
        return i * scale;
9000711e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007122:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
{
public:
    GraphWrapAndOverwrite()
        : GraphWrapAndOverwriteData(CAPACITY, y)
90007126:	f504 7137 	add.w	r1, r4, #732	; 0x2dc
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000712a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
9000712e:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007130:	f8c4 12d0 	str.w	r1, [r4, #720]	; 0x2d0
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90007134:	4629      	mov	r1, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007136:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
9000713a:	e9c4 35b2 	strd	r3, r5, [r4, #712]	; 0x2c8
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000713e:	f00c fd02 	bl	90013b46 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>
90007142:	4a27      	ldr	r2, [pc, #156]	; (900071e0 <_ZN15Screen2ViewBaseC1Ev+0x20c>)
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
90007144:	f504 734d 	add.w	r3, r4, #820	; 0x334
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
90007148:	f504 7041 	add.w	r0, r4, #772	; 0x304
9000714c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
        : DynamicDataGraph(capacity, values), current(0)
90007150:	f8a4 52d8 	strh.w	r5, [r4, #728]	; 0x2d8
90007154:	ee08 0a10 	vmov	s16, r0
90007158:	9303      	str	r3, [sp, #12]
9000715a:	f00c fca7 	bl	90013aac <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
9000715e:	2302      	movs	r3, #2
90007160:	4a20      	ldr	r2, [pc, #128]	; (900071e4 <_ZN15Screen2ViewBaseC1Ev+0x210>)
        : widgetWidth(0)
90007162:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338
90007166:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
9000716a:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
9000716e:	f8d8 3000 	ldr.w	r3, [r8]
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
        : AbstractPainter()
90007172:	4a1d      	ldr	r2, [pc, #116]	; (900071e8 <_ZN15Screen2ViewBaseC1Ev+0x214>)
90007174:	f8c4 2334 	str.w	r2, [r4, #820]	; 0x334
90007178:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9000717c:	2a00      	cmp	r2, #0
9000717e:	d03f      	beq.n	90007200 <_ZN15Screen2ViewBaseC1Ev+0x22c>
90007180:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90007182:	2800      	cmp	r0, #0
90007184:	f000 83d7 	beq.w	90007936 <_ZN15Screen2ViewBaseC1Ev+0x962>
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
90007188:	6803      	ldr	r3, [r0, #0]
9000718a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 900071fc <_ZN15Screen2ViewBaseC1Ev+0x228>
9000718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007190:	454a      	cmp	r2, r9
90007192:	d043      	beq.n	9000721c <_ZN15Screen2ViewBaseC1Ev+0x248>
90007194:	4790      	blx	r2
        return auxiliaryLCD;
90007196:	f8d8 3000 	ldr.w	r3, [r8]
9000719a:	fab0 f580 	clz	r5, r0
9000719e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900071a0:	096d      	lsrs	r5, r5, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
900071a2:	b140      	cbz	r0, 900071b6 <_ZN15Screen2ViewBaseC1Ev+0x1e2>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
900071a4:	6803      	ldr	r3, [r0, #0]
900071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071a8:	454b      	cmp	r3, r9
900071aa:	d037      	beq.n	9000721c <_ZN15Screen2ViewBaseC1Ev+0x248>
900071ac:	4798      	blx	r3
900071ae:	2800      	cmp	r0, #0
900071b0:	bf08      	it	eq
900071b2:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
900071b6:	bb8d      	cbnz	r5, 9000721c <_ZN15Screen2ViewBaseC1Ev+0x248>
900071b8:	4b0c      	ldr	r3, [pc, #48]	; (900071ec <_ZN15Screen2ViewBaseC1Ev+0x218>)
900071ba:	212c      	movs	r1, #44	; 0x2c
900071bc:	4a0c      	ldr	r2, [pc, #48]	; (900071f0 <_ZN15Screen2ViewBaseC1Ev+0x21c>)
900071be:	480d      	ldr	r0, [pc, #52]	; (900071f4 <_ZN15Screen2ViewBaseC1Ev+0x220>)
900071c0:	f01f ffc8 	bl	90027154 <__assert_func>
900071c4:	9002beb0 	.word	0x9002beb0
900071c8:	9002af34 	.word	0x9002af34
900071cc:	9002bf18 	.word	0x9002bf18
900071d0:	9002a210 	.word	0x9002a210
900071d4:	9002a9e8 	.word	0x9002a9e8
900071d8:	9002bda4 	.word	0x9002bda4
900071dc:	9002b9f0 	.word	0x9002b9f0
900071e0:	9002ad84 	.word	0x9002ad84
900071e4:	9002bcb8 	.word	0x9002bcb8
900071e8:	90029b9c 	.word	0x90029b9c
900071ec:	9002ac7c 	.word	0x9002ac7c
900071f0:	9002acdc 	.word	0x9002acdc
900071f4:	9002ad18 	.word	0x9002ad18
900071f8:	24028194 	.word	0x24028194
900071fc:	900023f5 	.word	0x900023f5
        return instance->lcdRef;
90007200:	6898      	ldr	r0, [r3, #8]
90007202:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 900075d0 <_ZN15Screen2ViewBaseC1Ev+0x5fc>
        bool compat = HAL::lcd().framebufferFormat() == format;
90007206:	6802      	ldr	r2, [r0, #0]
90007208:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000720a:	454a      	cmp	r2, r9
9000720c:	d1c2      	bne.n	90007194 <_ZN15Screen2ViewBaseC1Ev+0x1c0>
        return auxiliaryLCD;
9000720e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
90007210:	b120      	cbz	r0, 9000721c <_ZN15Screen2ViewBaseC1Ev+0x248>
        bool compat = HAL::lcd().framebufferFormat() == format;
90007212:	6803      	ldr	r3, [r0, #0]
90007214:	2501      	movs	r5, #1
90007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
90007218:	454b      	cmp	r3, r9
9000721a:	d1c7      	bne.n	900071ac <_ZN15Screen2ViewBaseC1Ev+0x1d8>
9000721c:	4bda      	ldr	r3, [pc, #872]	; (90007588 <_ZN15Screen2ViewBaseC1Ev+0x5b4>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
9000721e:	2500      	movs	r5, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007220:	f04f 3bff 	mov.w	fp, #4294967295
        T::add(text);
90007224:	f504 795f 	add.w	r9, r4, #892	; 0x37c
90007228:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
9000722c:	3324      	adds	r3, #36	; 0x24
9000722e:	f504 7052 	add.w	r0, r4, #840	; 0x348
90007232:	4649      	mov	r1, r9
90007234:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
        : pressed(false), alpha(255), action(0)
90007238:	f44f 437f 	mov.w	r3, #65280	; 0xff00
9000723c:	f8c4 73a4 	str.w	r7, [r4, #932]	; 0x3a4
90007240:	ee08 0a90 	vmov	s17, r0
90007244:	f8a4 3374 	strh.w	r3, [r4, #884]	; 0x374
        touchable = touch;
90007248:	f240 1301 	movw	r3, #257	; 0x101
9000724c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340
90007250:	f104 0804 	add.w	r8, r4, #4
90007254:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
        : T()
90007258:	4bcc      	ldr	r3, [pc, #816]	; (9000758c <_ZN15Screen2ViewBaseC1Ev+0x5b8>)
9000725a:	f8c4 5370 	str.w	r5, [r4, #880]	; 0x370
9000725e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
          touchable(false),
90007262:	f44f 7380 	mov.w	r3, #256	; 0x100
90007266:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
9000726a:	f8a4 33a0 	strh.w	r3, [r4, #928]	; 0x3a0
9000726e:	4bc8      	ldr	r3, [pc, #800]	; (90007590 <_ZN15Screen2ViewBaseC1Ev+0x5bc>)
        : color(col)
90007270:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
90007274:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
90007278:	f64f 73ff 	movw	r3, #65535	; 0xffff
9000727c:	f8a4 53b0 	strh.w	r5, [r4, #944]	; 0x3b0
90007280:	f8a4 33a8 	strh.w	r3, [r4, #936]	; 0x3a8
90007284:	23ff      	movs	r3, #255	; 0xff
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007286:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8
9000728a:	f8c4 33b2 	str.w	r3, [r4, #946]	; 0x3b2
        : x(0), y(0), width(0), height(0)
9000728e:	e9c4 55d3 	strd	r5, r5, [r4, #844]	; 0x34c
90007292:	e9c4 55d5 	strd	r5, r5, [r4, #852]	; 0x354
          nextSibling(0),
90007296:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
          cachedAbsX(0),
9000729a:	e9c4 55d9 	strd	r5, r5, [r4, #868]	; 0x364
9000729e:	e9c4 55e0 	strd	r5, r5, [r4, #896]	; 0x380
900072a2:	e9c4 55e2 	strd	r5, r5, [r4, #904]	; 0x388
          nextSibling(0),
900072a6:	e9c4 55e4 	strd	r5, r5, [r4, #912]	; 0x390
          cachedAbsX(0),
900072aa:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
              text(0)
900072ae:	e9c4 b5ef 	strd	fp, r5, [r4, #956]	; 0x3bc
        : color(0)
900072b2:	e9c4 55f1 	strd	r5, r5, [r4, #964]	; 0x3c4
        T::add(text);
900072b6:	f00b f979 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
900072ba:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
900072be:	4ab5      	ldr	r2, [pc, #724]	; (90007594 <_ZN15Screen2ViewBaseC1Ev+0x5c0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
900072c0:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
900072c4:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
900072c8:	609c      	str	r4, [r3, #8]
900072ca:	605a      	str	r2, [r3, #4]
900072cc:	4ab2      	ldr	r2, [pc, #712]	; (90007598 <_ZN15Screen2ViewBaseC1Ev+0x5c4>)
900072ce:	611d      	str	r5, [r3, #16]
900072d0:	60da      	str	r2, [r3, #12]
900072d2:	f00f f809 	bl	900162e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        rect.x = x;
900072d6:	4bb1      	ldr	r3, [pc, #708]	; (9000759c <_ZN15Screen2ViewBaseC1Ev+0x5c8>)
900072d8:	f104 0140 	add.w	r1, r4, #64	; 0x40
900072dc:	4640      	mov	r0, r8
900072de:	64a3      	str	r3, [r4, #72]	; 0x48
        color = newColor;
900072e0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
900072e4:	6465      	str	r5, [r4, #68]	; 0x44
900072e6:	66a3      	str	r3, [r4, #104]	; 0x68
900072e8:	f00b f960 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
900072ec:	4bac      	ldr	r3, [pc, #688]	; (900075a0 <_ZN15Screen2ViewBaseC1Ev+0x5cc>)
    animatedImage1.setBitmaps(BITMAP_GIPHY_1_ID, BITMAP_GIPHY_5_ID);
900072ee:	2210      	movs	r2, #16
900072f0:	4650      	mov	r0, sl
900072f2:	6723      	str	r3, [r4, #112]	; 0x70
900072f4:	4629      	mov	r1, r5
900072f6:	f00d fc9b 	bl	90014c30 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
900072fa:	4650      	mov	r0, sl
900072fc:	2106      	movs	r1, #6
900072fe:	f00d fcaa 	bl	90014c56 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
90007302:	2301      	movs	r3, #1
90007304:	4650      	mov	r0, sl
90007306:	4629      	mov	r1, r5
90007308:	461a      	mov	r2, r3
9000730a:	f00d fbe9 	bl	90014ae0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
9000730e:	4651      	mov	r1, sl
90007310:	4640      	mov	r0, r8
    minTemperatureTextArea.setXY(16, 143);
90007312:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
90007316:	f00b f949 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000731a:	4aa2      	ldr	r2, [pc, #648]	; (900075a4 <_ZN15Screen2ViewBaseC1Ev+0x5d0>)
        setX(x);
9000731c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
90007320:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
90007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
90007328:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
9000732c:	4a9e      	ldr	r2, [pc, #632]	; (900075a8 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        linespace = space;
9000732e:	f8a4 50dc 	strh.w	r5, [r4, #220]	; 0xdc
90007332:	4293      	cmp	r3, r2
90007334:	f040 8362 	bne.w	900079fc <_ZN15Screen2ViewBaseC1Ev+0xa28>
        boundingArea = calculateBoundingArea();
90007338:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
9000733c:	e9c4 5b39 	strd	r5, fp, [r4, #228]	; 0xe4
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
90007340:	f504 7373 	add.w	r3, r4, #972	; 0x3cc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007344:	f8df b28c 	ldr.w	fp, [pc, #652]	; 900075d4 <_ZN15Screen2ViewBaseC1Ev+0x600>
90007348:	9302      	str	r3, [sp, #8]
9000734a:	f8db 3000 	ldr.w	r3, [fp]
9000734e:	2b00      	cmp	r3, #0
90007350:	f000 838b 	beq.w	90007a6a <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007354:	4b95      	ldr	r3, [pc, #596]	; (900075ac <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
90007356:	881b      	ldrh	r3, [r3, #0]
90007358:	2b02      	cmp	r3, #2
9000735a:	f240 8380 	bls.w	90007a5e <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
9000735e:	4b94      	ldr	r3, [pc, #592]	; (900075b0 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
90007360:	2102      	movs	r1, #2
    temperatureTextArea.setXY(16, 76);
90007362:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
90007366:	6818      	ldr	r0, [r3, #0]
90007368:	f000 fd20 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
9000736c:	4a91      	ldr	r2, [pc, #580]	; (900075b4 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
9000736e:	4603      	mov	r3, r0
90007370:	2104      	movs	r1, #4
90007372:	9802      	ldr	r0, [sp, #8]
90007374:	f013 fd02 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
90007378:	9b02      	ldr	r3, [sp, #8]
    minTemperatureTextArea.resizeToCurrentText();
9000737a:	4650      	mov	r0, sl
9000737c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
90007380:	f00d ffda 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90007384:	2303      	movs	r3, #3
    minTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JNB3));
90007386:	a908      	add	r1, sp, #32
90007388:	4650      	mov	r0, sl
9000738a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
9000738e:	9708      	str	r7, [sp, #32]
90007390:	f00d fff2 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007394:	4651      	mov	r1, sl
90007396:	4640      	mov	r0, r8
90007398:	f00b f908 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
9000739c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
900073a0:	4881      	ldr	r0, [pc, #516]	; (900075a8 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        color = newColor;
900073a2:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900073a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
900073aa:	4b83      	ldr	r3, [pc, #524]	; (900075b8 <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
900073ac:	4282      	cmp	r2, r0
        color = newColor;
900073ae:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
900073b2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
900073b6:	f04f 0300 	mov.w	r3, #0
900073ba:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
900073be:	f040 8328 	bne.w	90007a12 <_ZN15Screen2ViewBaseC1Ev+0xa3e>
900073c2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
900073c6:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900073ca:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DG5G).getText());
900073ce:	f504 7a75 	add.w	sl, r4, #980	; 0x3d4
900073d2:	2b00      	cmp	r3, #0
900073d4:	f000 8349 	beq.w	90007a6a <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900073d8:	4b74      	ldr	r3, [pc, #464]	; (900075ac <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
900073da:	881b      	ldrh	r3, [r3, #0]
900073dc:	2b06      	cmp	r3, #6
900073de:	f240 833e 	bls.w	90007a5e <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
900073e2:	4b73      	ldr	r3, [pc, #460]	; (900075b0 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
900073e4:	2106      	movs	r1, #6
900073e6:	6818      	ldr	r0, [r3, #0]
900073e8:	f000 fce0 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
900073ec:	4a71      	ldr	r2, [pc, #452]	; (900075b4 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
900073ee:	4603      	mov	r3, r0
900073f0:	2104      	movs	r1, #4
900073f2:	4650      	mov	r0, sl
900073f4:	f013 fcc2 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
900073f8:	4628      	mov	r0, r5
900073fa:	f8c4 a13c 	str.w	sl, [r4, #316]	; 0x13c
900073fe:	f00d ff9b 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90007402:	2307      	movs	r3, #7
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DSQV));
90007404:	4628      	mov	r0, r5
90007406:	a908      	add	r1, sp, #32
90007408:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
9000740c:	9708      	str	r7, [sp, #32]
9000740e:	f00d ffb3 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007412:	4629      	mov	r1, r5
90007414:	4640      	mov	r0, r8
90007416:	f00b f8c9 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
9000741a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
9000741e:	4862      	ldr	r0, [pc, #392]	; (900075a8 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        color = newColor;
90007420:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
90007424:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    maxTemperatureTextArea.setXY(16, 108);
90007428:	f504 75a0 	add.w	r5, r4, #320	; 0x140
        rect.x = x;
9000742c:	4b63      	ldr	r3, [pc, #396]	; (900075bc <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
9000742e:	4282      	cmp	r2, r0
        color = newColor;
90007430:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
90007434:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
        linespace = space;
90007438:	f04f 0300 	mov.w	r3, #0
9000743c:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
90007440:	f040 82f3 	bne.w	90007a2a <_ZN15Screen2ViewBaseC1Ev+0xa56>
        boundingArea = calculateBoundingArea();
90007444:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
90007448:	e9c4 315f 	strd	r3, r1, [r4, #380]	; 0x17c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000744c:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HQVR).getText());
90007450:	f504 7a77 	add.w	sl, r4, #988	; 0x3dc
90007454:	2b00      	cmp	r3, #0
90007456:	f000 8308 	beq.w	90007a6a <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000745a:	4b54      	ldr	r3, [pc, #336]	; (900075ac <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
9000745c:	881b      	ldrh	r3, [r3, #0]
9000745e:	2b04      	cmp	r3, #4
90007460:	f240 82fd 	bls.w	90007a5e <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
90007464:	4b52      	ldr	r3, [pc, #328]	; (900075b0 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
90007466:	2104      	movs	r1, #4
90007468:	6818      	ldr	r0, [r3, #0]
9000746a:	f000 fc9f 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
9000746e:	4a51      	ldr	r2, [pc, #324]	; (900075b4 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
90007470:	4603      	mov	r3, r0
90007472:	2104      	movs	r1, #4
90007474:	4650      	mov	r0, sl
90007476:	f013 fc81 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    maxTemperatureTextArea.resizeToCurrentText();
9000747a:	4628      	mov	r0, r5
9000747c:	f8c4 a188 	str.w	sl, [r4, #392]	; 0x188
90007480:	f00d ff5a 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90007484:	2305      	movs	r3, #5
    maxTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XZKY));
90007486:	a908      	add	r1, sp, #32
90007488:	4628      	mov	r0, r5
9000748a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
9000748e:	9708      	str	r7, [sp, #32]
90007490:	f00d ff72 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007494:	4629      	mov	r1, r5
90007496:	4640      	mov	r0, r8
90007498:	f00b f888 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000749c:	4a48      	ldr	r2, [pc, #288]	; (900075c0 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
        setX(x);
9000749e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
        setWidth(width);
900074a2:	f240 11c7 	movw	r1, #455	; 0x1c7
900074a6:	4630      	mov	r0, r6
900074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        rect.x = x;
900074aa:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
        setWidth(width);
900074ae:	4798      	blx	r3
        setHeight(height);
900074b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
900074b4:	213f      	movs	r1, #63	; 0x3f
900074b6:	4630      	mov	r0, r6
900074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900074ba:	4798      	blx	r3
        setScaleX(scale, updateData);
900074bc:	2200      	movs	r2, #0
900074be:	2101      	movs	r1, #1
900074c0:	4630      	mov	r0, r6
900074c2:	f00c fef1 	bl	900142a8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>
        setScaleY(scale, updateData);
900074c6:	2200      	movs	r2, #0
900074c8:	2101      	movs	r1, #1
900074ca:	4630      	mov	r0, r6
900074cc:	f00c ff1e 	bl	9001430c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>
    temperatureGraph.setGraphAreaMargin(0, 0, 0, 0);
900074d0:	2300      	movs	r3, #0
900074d2:	4630      	mov	r0, r6
900074d4:	461a      	mov	r2, r3
900074d6:	4619      	mov	r1, r3
900074d8:	9300      	str	r3, [sp, #0]
900074da:	f00c fe2a 	bl	90014132 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    temperatureGraph.setGraphAreaPadding(0, 0, 0, 0);
900074de:	2300      	movs	r3, #0
900074e0:	4630      	mov	r0, r6
900074e2:	461a      	mov	r2, r3
900074e4:	4619      	mov	r1, r3
900074e6:	9300      	str	r3, [sp, #0]
900074e8:	f00c fd61 	bl	90013fae <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
        return i * scale;
900074ec:	f06f 0327 	mvn.w	r3, #39	; 0x27
900074f0:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900074f4:	4630      	mov	r0, r6
        return i * scale;
900074f6:	fb03 f101 	mul.w	r1, r3, r1
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900074fa:	424a      	negs	r2, r1
900074fc:	f00c fb46 	bl	90013b8c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>
        canvasPainter = &painter;
90007500:	9b03      	ldr	r3, [sp, #12]
    temperatureGraph.addGraphElement(temperatureGraphLine1);
90007502:	ee18 1a10 	vmov	r1, s16
90007506:	4630      	mov	r0, r6
90007508:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
9000750c:	4b2d      	ldr	r3, [pc, #180]	; (900075c4 <_ZN15Screen2ViewBaseC1Ev+0x5f0>)
9000750e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
90007512:	f241 43b8 	movw	r3, #5304	; 0x14b8
90007516:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
9000751a:	2302      	movs	r3, #2
9000751c:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
90007520:	f00c fd50 	bl	90013fc4 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
90007524:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007528:	ed9f 7a27 	vldr	s14, [pc, #156]	; 900075c8 <_ZN15Screen2ViewBaseC1Ev+0x5f4>
9000752c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007530:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000753c:	f280 8255 	bge.w	900079ea <_ZN15Screen2ViewBaseC1Ev+0xa16>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007540:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007544:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007548:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000754c:	ee17 3a10 	vmov	r3, s14
90007550:	3b01      	subs	r3, #1
90007552:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000755a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000755e:	ee17 1a90 	vmov	r1, s15
90007562:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007564:	4630      	mov	r0, r6
90007566:	f00c fef0 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000756a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000756e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 900075cc <_ZN15Screen2ViewBaseC1Ev+0x5f8>
90007572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007576:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000757a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000757e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007582:	f280 8229 	bge.w	900079d8 <_ZN15Screen2ViewBaseC1Ev+0xa04>
90007586:	e037      	b.n	900075f8 <_ZN15Screen2ViewBaseC1Ev+0x624>
90007588:	9002b940 	.word	0x9002b940
9000758c:	9002aa78 	.word	0x9002aa78
90007590:	9002be20 	.word	0x9002be20
90007594:	9002af1c 	.word	0x9002af1c
90007598:	90006879 	.word	0x90006879
9000759c:	011001e0 	.word	0x011001e0
900075a0:	fffb0000 	.word	0xfffb0000
900075a4:	008f0010 	.word	0x008f0010
900075a8:	90005b1d 	.word	0x90005b1d
900075ac:	240281f0 	.word	0x240281f0
900075b0:	240281f8 	.word	0x240281f8
900075b4:	9002a9dc 	.word	0x9002a9dc
900075b8:	004c0010 	.word	0x004c0010
900075bc:	006c0010 	.word	0x006c0010
900075c0:	00c30010 	.word	0x00c30010
900075c4:	ff1497c5 	.word	0xff1497c5
900075c8:	4180c664 	.word	0x4180c664
900075cc:	c210b1f6 	.word	0xc210b1f6
900075d0:	900023f5 	.word	0x900023f5
900075d4:	240281ec 	.word	0x240281ec
900075d8:	c10af208 	.word	0xc10af208
900075dc:	41aa0015 	.word	0x41aa0015
900075e0:	3f90068e 	.word	0x3f90068e
900075e4:	40b6bbed 	.word	0x40b6bbed
900075e8:	be36ffc1 	.word	0xbe36ffc1
900075ec:	c1f1cd8a 	.word	0xc1f1cd8a
900075f0:	40b497cc 	.word	0x40b497cc
900075f4:	421c14ec 	.word	0x421c14ec
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900075f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900075fc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007600:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007604:	ee17 3a10 	vmov	r3, s14
90007608:	3b01      	subs	r3, #1
9000760a:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007616:	ee17 1a90 	vmov	r1, s15
9000761a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000761c:	4630      	mov	r0, r6
9000761e:	f00c fe94 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007622:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007626:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 900075d8 <_ZN15Screen2ViewBaseC1Ev+0x604>
9000762a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000762e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000763a:	f280 81c4 	bge.w	900079c6 <_ZN15Screen2ViewBaseC1Ev+0x9f2>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000763e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007642:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007646:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000764a:	ee17 3a10 	vmov	r3, s14
9000764e:	3b01      	subs	r3, #1
90007650:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007654:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000765c:	ee17 1a90 	vmov	r1, s15
90007660:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007662:	4630      	mov	r0, r6
90007664:	f00c fe71 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007668:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000766c:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 900075dc <_ZN15Screen2ViewBaseC1Ev+0x608>
90007670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007674:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007680:	f280 8198 	bge.w	900079b4 <_ZN15Screen2ViewBaseC1Ev+0x9e0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007684:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007688:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000768c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007690:	ee17 3a10 	vmov	r3, s14
90007694:	3b01      	subs	r3, #1
90007696:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000769e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076a2:	ee17 1a90 	vmov	r1, s15
900076a6:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900076a8:	4630      	mov	r0, r6
900076aa:	f00c fe4e 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900076ae:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900076b2:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 900075e0 <_ZN15Screen2ViewBaseC1Ev+0x60c>
900076b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900076ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900076be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900076c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076c6:	f280 816c 	bge.w	900079a2 <_ZN15Screen2ViewBaseC1Ev+0x9ce>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076ce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076d2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076d6:	ee17 3a10 	vmov	r3, s14
900076da:	3b01      	subs	r3, #1
900076dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
900076e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900076e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076e8:	ee17 1a90 	vmov	r1, s15
900076ec:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900076ee:	4630      	mov	r0, r6
900076f0:	f00c fe2b 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900076f4:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900076f8:	ed1f 7a46 	vldr	s14, [pc, #-280]	; 900075e4 <_ZN15Screen2ViewBaseC1Ev+0x610>
900076fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007700:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000770c:	f280 8140 	bge.w	90007990 <_ZN15Screen2ViewBaseC1Ev+0x9bc>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007710:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007714:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007718:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000771c:	ee17 3a10 	vmov	r3, s14
90007720:	3b01      	subs	r3, #1
90007722:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007726:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000772a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000772e:	ee17 1a90 	vmov	r1, s15
90007732:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007734:	4630      	mov	r0, r6
90007736:	f00c fe08 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000773a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000773e:	ed1f 7a56 	vldr	s14, [pc, #-344]	; 900075e8 <_ZN15Screen2ViewBaseC1Ev+0x614>
90007742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007746:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000774a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007752:	f280 8114 	bge.w	9000797e <_ZN15Screen2ViewBaseC1Ev+0x9aa>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007756:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000775a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000775e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007762:	ee17 3a10 	vmov	r3, s14
90007766:	3b01      	subs	r3, #1
90007768:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000776c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007774:	ee17 1a90 	vmov	r1, s15
90007778:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000777a:	4630      	mov	r0, r6
9000777c:	f00c fde5 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007780:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007784:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 900075ec <_ZN15Screen2ViewBaseC1Ev+0x618>
90007788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000778c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007798:	f280 80e8 	bge.w	9000796c <_ZN15Screen2ViewBaseC1Ev+0x998>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000779c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900077a0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900077a4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900077a8:	ee17 3a10 	vmov	r3, s14
900077ac:	3b01      	subs	r3, #1
900077ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
900077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900077ba:	ee17 1a90 	vmov	r1, s15
900077be:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900077c0:	4630      	mov	r0, r6
900077c2:	f00c fdc2 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900077c6:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900077ca:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 900075f0 <_ZN15Screen2ViewBaseC1Ev+0x61c>
900077ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900077d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900077d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900077da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900077de:	f280 80bc 	bge.w	9000795a <_ZN15Screen2ViewBaseC1Ev+0x986>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900077e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900077e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900077ea:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900077ee:	ee17 3a10 	vmov	r3, s14
900077f2:	3b01      	subs	r3, #1
900077f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
900077f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007800:	ee17 1a90 	vmov	r1, s15
90007804:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007806:	4630      	mov	r0, r6
90007808:	f00c fd9f 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000780c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007810:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 900075f4 <_ZN15Screen2ViewBaseC1Ev+0x620>
90007814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007818:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000781c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007824:	f280 8090 	bge.w	90007948 <_ZN15Screen2ViewBaseC1Ev+0x974>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007828:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000782c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007830:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007834:	ee17 3a10 	vmov	r3, s14
90007838:	3b01      	subs	r3, #1
9000783a:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007846:	ee17 1a90 	vmov	r1, s15
9000784a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000784c:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
9000784e:	ad04      	add	r5, sp, #16
90007850:	f00c fd7b 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
90007854:	4631      	mov	r1, r6
90007856:	4640      	mov	r0, r8
90007858:	f109 063c 	add.w	r6, r9, #60	; 0x3c
9000785c:	f00a fea6 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007860:	9708      	str	r7, [sp, #32]
90007862:	2700      	movs	r7, #0
        text.setTypedText(t);
90007864:	a908      	add	r1, sp, #32
90007866:	4648      	mov	r0, r9
90007868:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
9000786c:	f00d fd84 	bl	90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
90007870:	f8b4 3350 	ldrh.w	r3, [r4, #848]	; 0x350
90007874:	4649      	mov	r1, r9
90007876:	4628      	mov	r0, r5
        return rect.height;
90007878:	f9b4 a352 	ldrsh.w	sl, [r4, #850]	; 0x352
        rect.width = width;
9000787c:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
90007880:	f00d fad2 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90007884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007888:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
9000788c:	4649      	mov	r1, r9
9000788e:	4628      	mov	r0, r5
        rect.height = height;
90007890:	f8a4 a386 	strh.w	sl, [r4, #902]	; 0x386
90007894:	f00d fac8 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
90007898:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
9000789c:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 90007a98 <_ZN15Screen2ViewBaseC1Ev+0xac4>
        setWidth(width);
900078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900078a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900078a6:	4563      	cmp	r3, ip
900078a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        rect.x = x;
900078ac:	f8c4 7380 	str.w	r7, [r4, #896]	; 0x380
        setWidth(width);
900078b0:	f040 80c7 	bne.w	90007a42 <_ZN15Screen2ViewBaseC1Ev+0xa6e>
        rect.width = width;
900078b4:	234e      	movs	r3, #78	; 0x4e
        boundingArea = calculateBoundingArea();
900078b6:	4649      	mov	r1, r9
900078b8:	4628      	mov	r0, r5
900078ba:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
900078be:	f00d fab3 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
900078c2:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
900078c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900078cc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
900078d0:	4a69      	ldr	r2, [pc, #420]	; (90007a78 <_ZN15Screen2ViewBaseC1Ev+0xaa4>)
900078d2:	4293      	cmp	r3, r2
900078d4:	f040 80bf 	bne.w	90007a56 <_ZN15Screen2ViewBaseC1Ev+0xa82>
        rect.height = height;
900078d8:	231c      	movs	r3, #28
        boundingArea = calculateBoundingArea();
900078da:	4649      	mov	r1, r9
900078dc:	4628      	mov	r0, r5
900078de:	f8a4 3386 	strh.w	r3, [r4, #902]	; 0x386
900078e2:	f00d faa1 	bl	90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
900078e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900078ea:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900078ee:	f894 1374 	ldrb.w	r1, [r4, #884]	; 0x374
        colorReleased = newColorReleased;
900078f2:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
900078f6:	4b61      	ldr	r3, [pc, #388]	; (90007a7c <_ZN15Screen2ViewBaseC1Ev+0xaa8>)
900078f8:	4640      	mov	r0, r8
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900078fa:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
900078fc:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
        colorPressed = newColorPressed;
90007900:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
90007904:	ee18 1a90 	vmov	r1, s17
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007908:	bf08      	it	eq
9000790a:	4613      	moveq	r3, r2
        rect.x = x;
9000790c:	4a5c      	ldr	r2, [pc, #368]	; (90007a80 <_ZN15Screen2ViewBaseC1Ev+0xaac>)
        color = newColor;
9000790e:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
    backButton.setAction(flexButtonCallback);
90007912:	f242 0304 	movw	r3, #8196	; 0x2004
90007916:	f8c4 234c 	str.w	r2, [r4, #844]	; 0x34c
9000791a:	4423      	add	r3, r4
9000791c:	4a59      	ldr	r2, [pc, #356]	; (90007a84 <_ZN15Screen2ViewBaseC1Ev+0xab0>)
        action = &callback;
9000791e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
90007922:	f8c4 2350 	str.w	r2, [r4, #848]	; 0x350
90007926:	f00a fe41 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000792a:	4620      	mov	r0, r4
9000792c:	b00b      	add	sp, #44	; 0x2c
9000792e:	ecbd 8b02 	vpop	{d8}
90007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return instance->lcdRef;
90007936:	6898      	ldr	r0, [r3, #8]
90007938:	f8df 9160 	ldr.w	r9, [pc, #352]	; 90007a9c <_ZN15Screen2ViewBaseC1Ev+0xac8>
        bool compat = HAL::lcd().framebufferFormat() == format;
9000793c:	6803      	ldr	r3, [r0, #0]
9000793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007940:	454a      	cmp	r2, r9
90007942:	f43f ac6b 	beq.w	9000721c <_ZN15Screen2ViewBaseC1Ev+0x248>
90007946:	e425      	b.n	90007194 <_ZN15Screen2ViewBaseC1Ev+0x1c0>
            return (int)(fs + 0.5f);
90007948:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9000794c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007954:	ee17 1a90 	vmov	r1, s15
90007958:	e778      	b.n	9000784c <_ZN15Screen2ViewBaseC1Ev+0x878>
9000795a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9000795e:	ee77 7a87 	vadd.f32	s15, s15, s14
90007962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007966:	ee17 1a90 	vmov	r1, s15
9000796a:	e74c      	b.n	90007806 <_ZN15Screen2ViewBaseC1Ev+0x832>
9000796c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007970:	ee77 7a87 	vadd.f32	s15, s15, s14
90007974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007978:	ee17 1a90 	vmov	r1, s15
9000797c:	e720      	b.n	900077c0 <_ZN15Screen2ViewBaseC1Ev+0x7ec>
9000797e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007982:	ee77 7a87 	vadd.f32	s15, s15, s14
90007986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000798a:	ee17 1a90 	vmov	r1, s15
9000798e:	e6f4      	b.n	9000777a <_ZN15Screen2ViewBaseC1Ev+0x7a6>
90007990:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007994:	ee77 7a87 	vadd.f32	s15, s15, s14
90007998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000799c:	ee17 1a90 	vmov	r1, s15
900079a0:	e6c8      	b.n	90007734 <_ZN15Screen2ViewBaseC1Ev+0x760>
900079a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900079a6:	ee77 7a87 	vadd.f32	s15, s15, s14
900079aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079ae:	ee17 1a90 	vmov	r1, s15
900079b2:	e69c      	b.n	900076ee <_ZN15Screen2ViewBaseC1Ev+0x71a>
900079b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900079b8:	ee77 7a87 	vadd.f32	s15, s15, s14
900079bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079c0:	ee17 1a90 	vmov	r1, s15
900079c4:	e670      	b.n	900076a8 <_ZN15Screen2ViewBaseC1Ev+0x6d4>
900079c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900079ca:	ee77 7a87 	vadd.f32	s15, s15, s14
900079ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079d2:	ee17 1a90 	vmov	r1, s15
900079d6:	e644      	b.n	90007662 <_ZN15Screen2ViewBaseC1Ev+0x68e>
900079d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900079dc:	ee77 7a87 	vadd.f32	s15, s15, s14
900079e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079e4:	ee17 1a90 	vmov	r1, s15
900079e8:	e618      	b.n	9000761c <_ZN15Screen2ViewBaseC1Ev+0x648>
900079ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900079ee:	ee77 7a87 	vadd.f32	s15, s15, s14
900079f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079f6:	ee17 1a90 	vmov	r1, s15
900079fa:	e5b3      	b.n	90007564 <_ZN15Screen2ViewBaseC1Ev+0x590>
        boundingArea = calculateBoundingArea();
900079fc:	ad04      	add	r5, sp, #16
900079fe:	4651      	mov	r1, sl
90007a00:	4628      	mov	r0, r5
90007a02:	4798      	blx	r3
90007a04:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
90007a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007a10:	e496      	b.n	90007340 <_ZN15Screen2ViewBaseC1Ev+0x36c>
90007a12:	f10d 0a10 	add.w	sl, sp, #16
90007a16:	4629      	mov	r1, r5
90007a18:	4650      	mov	r0, sl
90007a1a:	4790      	blx	r2
90007a1c:	f504 7398 	add.w	r3, r4, #304	; 0x130
90007a20:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007a28:	e4cf      	b.n	900073ca <_ZN15Screen2ViewBaseC1Ev+0x3f6>
90007a2a:	f10d 0a10 	add.w	sl, sp, #16
90007a2e:	4629      	mov	r1, r5
90007a30:	4650      	mov	r0, sl
90007a32:	4790      	blx	r2
90007a34:	f504 73be 	add.w	r3, r4, #380	; 0x17c
90007a38:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007a40:	e504      	b.n	9000744c <_ZN15Screen2ViewBaseC1Ev+0x478>
        setWidth(width);
90007a42:	214e      	movs	r1, #78	; 0x4e
90007a44:	4648      	mov	r0, r9
90007a46:	4798      	blx	r3
        setHeight(height);
90007a48:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
90007a4c:	4a0a      	ldr	r2, [pc, #40]	; (90007a78 <_ZN15Screen2ViewBaseC1Ev+0xaa4>)
90007a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007a50:	4293      	cmp	r3, r2
90007a52:	f43f af41 	beq.w	900078d8 <_ZN15Screen2ViewBaseC1Ev+0x904>
90007a56:	4648      	mov	r0, r9
90007a58:	211c      	movs	r1, #28
90007a5a:	4798      	blx	r3
90007a5c:	e747      	b.n	900078ee <_ZN15Screen2ViewBaseC1Ev+0x91a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007a5e:	4b0a      	ldr	r3, [pc, #40]	; (90007a88 <_ZN15Screen2ViewBaseC1Ev+0xab4>)
90007a60:	2161      	movs	r1, #97	; 0x61
90007a62:	4a0a      	ldr	r2, [pc, #40]	; (90007a8c <_ZN15Screen2ViewBaseC1Ev+0xab8>)
90007a64:	480a      	ldr	r0, [pc, #40]	; (90007a90 <_ZN15Screen2ViewBaseC1Ev+0xabc>)
90007a66:	f01f fb75 	bl	90027154 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007a6a:	4b0a      	ldr	r3, [pc, #40]	; (90007a94 <_ZN15Screen2ViewBaseC1Ev+0xac0>)
90007a6c:	2160      	movs	r1, #96	; 0x60
90007a6e:	4a07      	ldr	r2, [pc, #28]	; (90007a8c <_ZN15Screen2ViewBaseC1Ev+0xab8>)
90007a70:	4807      	ldr	r0, [pc, #28]	; (90007a90 <_ZN15Screen2ViewBaseC1Ev+0xabc>)
90007a72:	f01f fb6f 	bl	90027154 <__assert_func>
90007a76:	bf00      	nop
90007a78:	90005ad1 	.word	0x90005ad1
90007a7c:	ff9e9d9d 	.word	0xff9e9d9d
90007a80:	0017000d 	.word	0x0017000d
90007a84:	001c004e 	.word	0x001c004e
90007a88:	9002a964 	.word	0x9002a964
90007a8c:	9002a9a4 	.word	0x9002a9a4
90007a90:	9002a91c 	.word	0x9002a91c
90007a94:	9002a89c 	.word	0x9002a89c
90007a98:	90005aa9 	.word	0x90005aa9
90007a9c:	900023f5 	.word	0x900023f5

90007aa0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007aa0:	4770      	bx	lr
90007aa2:	bf00      	nop

90007aa4 <_Z23getFont_verdana_10_4bppv>:
{
90007aa4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007aa6:	4d18      	ldr	r5, [pc, #96]	; (90007b08 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90007aa8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007aaa:	682c      	ldr	r4, [r5, #0]
90007aac:	f3bf 8f5b 	dmb	ish
90007ab0:	f014 0401 	ands.w	r4, r4, #1
90007ab4:	d002      	beq.n	90007abc <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90007ab6:	4815      	ldr	r0, [pc, #84]	; (90007b0c <_Z23getFont_verdana_10_4bppv+0x68>)
90007ab8:	b00f      	add	sp, #60	; 0x3c
90007aba:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007abc:	4628      	mov	r0, r5
90007abe:	f01f fb1c 	bl	900270fa <__cxa_guard_acquire>
90007ac2:	2800      	cmp	r0, #0
90007ac4:	d0f7      	beq.n	90007ab6 <_Z23getFont_verdana_10_4bppv+0x12>
90007ac6:	213f      	movs	r1, #63	; 0x3f
90007ac8:	2201      	movs	r2, #1
90007aca:	230a      	movs	r3, #10
90007acc:	2004      	movs	r0, #4
90007ace:	9204      	str	r2, [sp, #16]
90007ad0:	9300      	str	r3, [sp, #0]
90007ad2:	9003      	str	r0, [sp, #12]
90007ad4:	480d      	ldr	r0, [pc, #52]	; (90007b0c <_Z23getFont_verdana_10_4bppv+0x68>)
90007ad6:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007ada:	490d      	ldr	r1, [pc, #52]	; (90007b10 <_Z23getFont_verdana_10_4bppv+0x6c>)
90007adc:	9108      	str	r1, [sp, #32]
90007ade:	490d      	ldr	r1, [pc, #52]	; (90007b14 <_Z23getFont_verdana_10_4bppv+0x70>)
90007ae0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007ae4:	9107      	str	r1, [sp, #28]
90007ae6:	490c      	ldr	r1, [pc, #48]	; (90007b18 <_Z23getFont_verdana_10_4bppv+0x74>)
90007ae8:	e9cd 4405 	strd	r4, r4, [sp, #20]
90007aec:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007af0:	f7fd ffa2 	bl	90005a38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007af4:	4809      	ldr	r0, [pc, #36]	; (90007b1c <_Z23getFont_verdana_10_4bppv+0x78>)
90007af6:	f01f fb4b 	bl	90027190 <atexit>
90007afa:	4628      	mov	r0, r5
90007afc:	f01f fb09 	bl	90027112 <__cxa_guard_release>
}
90007b00:	4802      	ldr	r0, [pc, #8]	; (90007b0c <_Z23getFont_verdana_10_4bppv+0x68>)
90007b02:	b00f      	add	sp, #60	; 0x3c
90007b04:	bd30      	pop	{r4, r5, pc}
90007b06:	bf00      	nop
90007b08:	2400d09c 	.word	0x2400d09c
90007b0c:	2400d0a0 	.word	0x2400d0a0
90007b10:	9002c3b8 	.word	0x9002c3b8
90007b14:	9002c564 	.word	0x9002c564
90007b18:	90201c38 	.word	0x90201c38
90007b1c:	90007aa1 	.word	0x90007aa1

90007b20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007b20:	4770      	bx	lr
90007b22:	bf00      	nop

90007b24 <_Z23getFont_verdana_20_4bppv>:
{
90007b24:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007b26:	4d19      	ldr	r5, [pc, #100]	; (90007b8c <_Z23getFont_verdana_20_4bppv+0x68>)
{
90007b28:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007b2a:	682c      	ldr	r4, [r5, #0]
90007b2c:	f3bf 8f5b 	dmb	ish
90007b30:	f014 0401 	ands.w	r4, r4, #1
90007b34:	d002      	beq.n	90007b3c <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90007b36:	4816      	ldr	r0, [pc, #88]	; (90007b90 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007b38:	b00f      	add	sp, #60	; 0x3c
90007b3a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007b3c:	4628      	mov	r0, r5
90007b3e:	f01f fadc 	bl	900270fa <__cxa_guard_acquire>
90007b42:	2800      	cmp	r0, #0
90007b44:	d0f7      	beq.n	90007b36 <_Z23getFont_verdana_20_4bppv+0x12>
90007b46:	213f      	movs	r1, #63	; 0x3f
90007b48:	4a12      	ldr	r2, [pc, #72]	; (90007b94 <_Z23getFont_verdana_20_4bppv+0x70>)
90007b4a:	2301      	movs	r3, #1
90007b4c:	2014      	movs	r0, #20
90007b4e:	9208      	str	r2, [sp, #32]
90007b50:	2204      	movs	r2, #4
90007b52:	9304      	str	r3, [sp, #16]
90007b54:	9000      	str	r0, [sp, #0]
90007b56:	9401      	str	r4, [sp, #4]
90007b58:	480d      	ldr	r0, [pc, #52]	; (90007b90 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007b5a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007b5e:	490e      	ldr	r1, [pc, #56]	; (90007b98 <_Z23getFont_verdana_20_4bppv+0x74>)
90007b60:	e9cd 3305 	strd	r3, r3, [sp, #20]
90007b64:	9107      	str	r1, [sp, #28]
90007b66:	2318      	movs	r3, #24
90007b68:	490c      	ldr	r1, [pc, #48]	; (90007b9c <_Z23getFont_verdana_20_4bppv+0x78>)
90007b6a:	e9cd 4202 	strd	r4, r2, [sp, #8]
90007b6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007b72:	2260      	movs	r2, #96	; 0x60
90007b74:	f7fd ff60 	bl	90005a38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007b78:	4809      	ldr	r0, [pc, #36]	; (90007ba0 <_Z23getFont_verdana_20_4bppv+0x7c>)
90007b7a:	f01f fb09 	bl	90027190 <atexit>
90007b7e:	4628      	mov	r0, r5
90007b80:	f01f fac7 	bl	90027112 <__cxa_guard_release>
}
90007b84:	4802      	ldr	r0, [pc, #8]	; (90007b90 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007b86:	b00f      	add	sp, #60	; 0x3c
90007b88:	bd30      	pop	{r4, r5, pc}
90007b8a:	bf00      	nop
90007b8c:	2400d0cc 	.word	0x2400d0cc
90007b90:	2400d0d0 	.word	0x2400d0d0
90007b94:	9002c3bc 	.word	0x9002c3bc
90007b98:	9002c568 	.word	0x9002c568
90007b9c:	90201c48 	.word	0x90201c48
90007ba0:	90007b21 	.word	0x90007b21

90007ba4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007ba4:	4770      	bx	lr
90007ba6:	bf00      	nop

90007ba8 <_Z23getFont_verdana_40_4bppv>:
{
90007ba8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007baa:	4d18      	ldr	r5, [pc, #96]	; (90007c0c <_Z23getFont_verdana_40_4bppv+0x64>)
{
90007bac:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007bae:	682c      	ldr	r4, [r5, #0]
90007bb0:	f3bf 8f5b 	dmb	ish
90007bb4:	f014 0401 	ands.w	r4, r4, #1
90007bb8:	d002      	beq.n	90007bc0 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90007bba:	4815      	ldr	r0, [pc, #84]	; (90007c10 <_Z23getFont_verdana_40_4bppv+0x68>)
90007bbc:	b00f      	add	sp, #60	; 0x3c
90007bbe:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007bc0:	4628      	mov	r0, r5
90007bc2:	f01f fa9a 	bl	900270fa <__cxa_guard_acquire>
90007bc6:	2800      	cmp	r0, #0
90007bc8:	d0f7      	beq.n	90007bba <_Z23getFont_verdana_40_4bppv+0x12>
90007bca:	213f      	movs	r1, #63	; 0x3f
90007bcc:	2201      	movs	r2, #1
90007bce:	2328      	movs	r3, #40	; 0x28
90007bd0:	2004      	movs	r0, #4
90007bd2:	9204      	str	r2, [sp, #16]
90007bd4:	9300      	str	r3, [sp, #0]
90007bd6:	9003      	str	r0, [sp, #12]
90007bd8:	480d      	ldr	r0, [pc, #52]	; (90007c10 <_Z23getFont_verdana_40_4bppv+0x68>)
90007bda:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007bde:	490d      	ldr	r1, [pc, #52]	; (90007c14 <_Z23getFont_verdana_40_4bppv+0x6c>)
90007be0:	9108      	str	r1, [sp, #32]
90007be2:	490d      	ldr	r1, [pc, #52]	; (90007c18 <_Z23getFont_verdana_40_4bppv+0x70>)
90007be4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007be8:	9107      	str	r1, [sp, #28]
90007bea:	490c      	ldr	r1, [pc, #48]	; (90007c1c <_Z23getFont_verdana_40_4bppv+0x74>)
90007bec:	e9cd 4405 	strd	r4, r4, [sp, #20]
90007bf0:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007bf4:	f7fd ff20 	bl	90005a38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007bf8:	4809      	ldr	r0, [pc, #36]	; (90007c20 <_Z23getFont_verdana_40_4bppv+0x78>)
90007bfa:	f01f fac9 	bl	90027190 <atexit>
90007bfe:	4628      	mov	r0, r5
90007c00:	f01f fa87 	bl	90027112 <__cxa_guard_release>
}
90007c04:	4802      	ldr	r0, [pc, #8]	; (90007c10 <_Z23getFont_verdana_40_4bppv+0x68>)
90007c06:	b00f      	add	sp, #60	; 0x3c
90007c08:	bd30      	pop	{r4, r5, pc}
90007c0a:	bf00      	nop
90007c0c:	2400d0fc 	.word	0x2400d0fc
90007c10:	2400d100 	.word	0x2400d100
90007c14:	9002c560 	.word	0x9002c560
90007c18:	9002c56c 	.word	0x9002c56c
90007c1c:	90202188 	.word	0x90202188
90007c20:	90007ba5 	.word	0x90007ba5

90007c24 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90007c24:	2000      	movs	r0, #0
90007c26:	4770      	bx	lr

90007c28 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90007c28:	2000      	movs	r0, #0
90007c2a:	4770      	bx	lr

90007c2c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90007c2c:	b40e      	push	{r1, r2, r3}
90007c2e:	b500      	push	{lr}
90007c30:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90007c32:	2100      	movs	r1, #0
{
90007c34:	ab03      	add	r3, sp, #12
90007c36:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90007c3a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90007c3c:	f010 ff42 	bl	90018ac4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90007c40:	b002      	add	sp, #8
90007c42:	f85d eb04 	ldr.w	lr, [sp], #4
90007c46:	b003      	add	sp, #12
90007c48:	4770      	bx	lr
90007c4a:	bf00      	nop

90007c4c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90007c4c:	b40c      	push	{r2, r3}
90007c4e:	b500      	push	{lr}
90007c50:	b083      	sub	sp, #12
90007c52:	ab04      	add	r3, sp, #16
90007c54:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90007c58:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90007c5a:	f010 ff33 	bl	90018ac4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90007c5e:	b003      	add	sp, #12
90007c60:	f85d eb04 	ldr.w	lr, [sp], #4
90007c64:	b002      	add	sp, #8
90007c66:	4770      	bx	lr

90007c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90007c68:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90007c6a:	b510      	push	{r4, lr}
90007c6c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90007c6e:	b133      	cbz	r3, 90007c7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90007c70:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90007c72:	b39b      	cbz	r3, 90007cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90007c74:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90007c76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90007c7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90007c7c:	b923      	cbnz	r3, 90007c88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90007c7e:	4620      	mov	r0, r4
}
90007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90007c84:	f012 b9ce 	b.w	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90007c88:	f012 faca 	bl	9001a220 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90007c8c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90007c8e:	2b01      	cmp	r3, #1
90007c90:	d92a      	bls.n	90007ce8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90007c92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90007c94:	1c53      	adds	r3, r2, #1
90007c96:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90007c98:	2b09      	cmp	r3, #9
90007c9a:	d812      	bhi.n	90007cc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90007c9c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90007ca0:	f640 103f 	movw	r0, #2367	; 0x93f
90007ca4:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90007ca6:	4281      	cmp	r1, r0
90007ca8:	d1e9      	bne.n	90007c7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90007caa:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007cae:	0052      	lsls	r2, r2, #1
90007cb0:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90007cb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90007cb6:	4422      	add	r2, r4
90007cb8:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90007cbc:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90007cbe:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90007cc0:	e7dd      	b.n	90007c7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90007cc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90007cc6:	f640 113f 	movw	r1, #2367	; 0x93f
90007cca:	89db      	ldrh	r3, [r3, #14]
90007ccc:	428b      	cmp	r3, r1
90007cce:	d1d6      	bne.n	90007c7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90007cd0:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007cd4:	2300      	movs	r3, #0
90007cd6:	0052      	lsls	r2, r2, #1
90007cd8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90007cda:	e7ea      	b.n	90007cb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90007cdc:	4b05      	ldr	r3, [pc, #20]	; (90007cf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90007cde:	21c5      	movs	r1, #197	; 0xc5
90007ce0:	4a05      	ldr	r2, [pc, #20]	; (90007cf8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90007ce2:	4806      	ldr	r0, [pc, #24]	; (90007cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90007ce4:	f01f fa36 	bl	90027154 <__assert_func>
            assert(offset < used);
90007ce8:	4b05      	ldr	r3, [pc, #20]	; (90007d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90007cea:	21cb      	movs	r1, #203	; 0xcb
90007cec:	4a05      	ldr	r2, [pc, #20]	; (90007d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90007cee:	4803      	ldr	r0, [pc, #12]	; (90007cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90007cf0:	f01f fa30 	bl	90027154 <__assert_func>
90007cf4:	9002af60 	.word	0x9002af60
90007cf8:	9002af6c 	.word	0x9002af6c
90007cfc:	9002b018 	.word	0x9002b018
90007d00:	9002b064 	.word	0x9002b064
90007d04:	9002b074 	.word	0x9002b074

90007d08 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90007d08:	f012 b955 	b.w	90019fb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90007d0c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90007d0c:	b510      	push	{r4, lr}
90007d0e:	b086      	sub	sp, #24
90007d10:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90007d14:	ac0a      	add	r4, sp, #40	; 0x28
{
90007d16:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90007d1a:	461a      	mov	r2, r3
90007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90007d1e:	4661      	mov	r1, ip
90007d20:	9401      	str	r4, [sp, #4]
90007d22:	9300      	str	r3, [sp, #0]
90007d24:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
90007d26:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90007d28:	f00f fb6a 	bl	90017400 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90007d2c:	b006      	add	sp, #24
90007d2e:	bd10      	pop	{r4, pc}

90007d30 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90007d30:	b9e0      	cbnz	r0, 90007d6c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90007d32:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90007d34:	4b13      	ldr	r3, [pc, #76]	; (90007d84 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90007d36:	681b      	ldr	r3, [r3, #0]
90007d38:	b1cb      	cbz	r3, 90007d6e <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007d3a:	4c13      	ldr	r4, [pc, #76]	; (90007d88 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007d3c:	4813      	ldr	r0, [pc, #76]	; (90007d8c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90007d3e:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007d42:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007d44:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007d46:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90007d48:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007d4a:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90007d4c:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90007d4e:	4b10      	ldr	r3, [pc, #64]	; (90007d90 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90007d50:	2200      	movs	r2, #0
90007d52:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90007d54:	f000 f83a 	bl	90007dcc <_ZN17TypedTextDatabase8getFontsEv>
90007d58:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90007d5a:	f000 f835 	bl	90007dc8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90007d5e:	4b0d      	ldr	r3, [pc, #52]	; (90007d94 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90007d60:	4a0d      	ldr	r2, [pc, #52]	; (90007d98 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90007d62:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90007d64:	4b0d      	ldr	r3, [pc, #52]	; (90007d9c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90007d66:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90007d68:	8018      	strh	r0, [r3, #0]
    }
}
90007d6a:	bd38      	pop	{r3, r4, r5, pc}
90007d6c:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007d6e:	4c0c      	ldr	r4, [pc, #48]	; (90007da0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90007d70:	4905      	ldr	r1, [pc, #20]	; (90007d88 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007d72:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90007d74:	480b      	ldr	r0, [pc, #44]	; (90007da4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90007d76:	4b05      	ldr	r3, [pc, #20]	; (90007d8c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90007d78:	4a0b      	ldr	r2, [pc, #44]	; (90007da8 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90007d7a:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90007d7c:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90007d7e:	2c00      	cmp	r4, #0
90007d80:	d1e5      	bne.n	90007d4e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90007d82:	bd38      	pop	{r3, r4, r5, pc}
90007d84:	2400d12c 	.word	0x2400d12c
90007d88:	2400d130 	.word	0x2400d130
90007d8c:	2400d134 	.word	0x2400d134
90007d90:	2400d138 	.word	0x2400d138
90007d94:	240281ec 	.word	0x240281ec
90007d98:	240281f4 	.word	0x240281f4
90007d9c:	240281f0 	.word	0x240281f0
90007da0:	90202270 	.word	0x90202270
90007da4:	902021c8 	.word	0x902021c8
90007da8:	90202198 	.word	0x90202198

90007dac <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90007dac:	4a04      	ldr	r2, [pc, #16]	; (90007dc0 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90007dae:	4b05      	ldr	r3, [pc, #20]	; (90007dc4 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90007db0:	6812      	ldr	r2, [r2, #0]
90007db2:	681b      	ldr	r3, [r3, #0]
90007db4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90007db8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90007dbc:	4770      	bx	lr
90007dbe:	bf00      	nop
90007dc0:	2400d134 	.word	0x2400d134
90007dc4:	2400d130 	.word	0x2400d130

90007dc8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90007dc8:	200c      	movs	r0, #12
90007dca:	4770      	bx	lr

90007dcc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90007dcc:	4800      	ldr	r0, [pc, #0]	; (90007dd0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90007dce:	4770      	bx	lr
90007dd0:	2400d13c 	.word	0x2400d13c

90007dd4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90007dd4:	b510      	push	{r4, lr}
};
90007dd6:	4c05      	ldr	r4, [pc, #20]	; (90007dec <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90007dd8:	f7ff fea4 	bl	90007b24 <_Z23getFont_verdana_20_4bppv>
};
90007ddc:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90007dde:	f7ff fee3 	bl	90007ba8 <_Z23getFont_verdana_40_4bppv>
};
90007de2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90007de4:	f7ff fe5e 	bl	90007aa4 <_Z23getFont_verdana_10_4bppv>
};
90007de8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90007dea:	bd10      	pop	{r4, pc}
90007dec:	2400d13c 	.word	0x2400d13c

90007df0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90007df0:	4770      	bx	lr
90007df2:	bf00      	nop

90007df4 <_ZN19FrontendApplicationD0Ev>:
90007df4:	b510      	push	{r4, lr}
90007df6:	4604      	mov	r4, r0
90007df8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90007dfc:	f01f f97b 	bl	900270f6 <_ZdlPvj>
90007e00:	4620      	mov	r0, r4
90007e02:	bd10      	pop	{r4, pc}

90007e04 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90007e04:	b510      	push	{r4, lr}
90007e06:	4604      	mov	r4, r0
    {
        model.tick();
90007e08:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90007e0c:	f000 f822 	bl	90007e54 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90007e10:	4620      	mov	r0, r4
    }
90007e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90007e16:	f00f bf8d 	b.w	90017d34 <_ZN8touchgfx11Application15handleTickEventEv>
90007e1a:	bf00      	nop

90007e1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90007e1c:	b510      	push	{r4, lr}
90007e1e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90007e20:	f7fd fd66 	bl	900058f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90007e24:	4b01      	ldr	r3, [pc, #4]	; (90007e2c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
90007e26:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90007e28:	6023      	str	r3, [r4, #0]
}
90007e2a:	bd10      	pop	{r4, pc}
90007e2c:	9002b150 	.word	0x9002b150

90007e30 <_ZN13ModelListener14setTemperatureEi>:
    }
    virtual void setTemperature(int temperature) {};
90007e30:	4770      	bx	lr
90007e32:	bf00      	nop

90007e34 <_ZN13ModelListener11setHumidityEi>:
    virtual void setHumidity(int humidity) {};
90007e34:	4770      	bx	lr
90007e36:	bf00      	nop

90007e38 <_ZN13ModelListener17setMaxTemperatureEi>:
    virtual void setMaxTemperature(int temperature) {};
90007e38:	4770      	bx	lr
90007e3a:	bf00      	nop

90007e3c <_ZN13ModelListener17setMinTemperatureEi>:
    virtual void setMinTemperature(int temperature) {};
90007e3c:	4770      	bx	lr
90007e3e:	bf00      	nop

90007e40 <_ZN13ModelListener23setTemperatureGraphDataEPs>:
    virtual void setTemperatureGraphData(short int* data) {};
90007e40:	4770      	bx	lr
90007e42:	bf00      	nop

90007e44 <_ZN5ModelC1Ev>:
extern "C"
{
	extern ApplicationContext_TypeDef applicationContext;
}
#endif
Model::Model() : modelListener(0),
90007e44:	2200      	movs	r2, #0
		temperature(0),
90007e46:	e9c0 2200 	strd	r2, r2, [r0]
		maxTemperature(0),
		minTemperature(0),
90007e4a:	e9c0 2202 	strd	r2, r2, [r0, #8]
		temperatureGraphData(NULL),
90007e4e:	e9c0 2204 	strd	r2, r2, [r0, #16]
		humidity(0)
{

}
90007e52:	4770      	bx	lr

90007e54 <_ZN5Model4tickEv>:

void Model::tick()
{
90007e54:	b510      	push	{r4, lr}
90007e56:	4604      	mov	r4, r0
#ifndef SIMULATOR
	modelListener->setHumidity(applicationContext.humidity);
90007e58:	6800      	ldr	r0, [r0, #0]
90007e5a:	4920      	ldr	r1, [pc, #128]	; (90007edc <_ZN5Model4tickEv+0x88>)
90007e5c:	6803      	ldr	r3, [r0, #0]
90007e5e:	68da      	ldr	r2, [r3, #12]
90007e60:	428a      	cmp	r2, r1
90007e62:	d110      	bne.n	90007e86 <_ZN5Model4tickEv+0x32>

	modelListener->setTemperature(applicationContext.temperature);
90007e64:	689a      	ldr	r2, [r3, #8]
90007e66:	491e      	ldr	r1, [pc, #120]	; (90007ee0 <_ZN5Model4tickEv+0x8c>)
90007e68:	428a      	cmp	r2, r1
90007e6a:	d115      	bne.n	90007e98 <_ZN5Model4tickEv+0x44>
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90007e6c:	691a      	ldr	r2, [r3, #16]
90007e6e:	491d      	ldr	r1, [pc, #116]	; (90007ee4 <_ZN5Model4tickEv+0x90>)
90007e70:	428a      	cmp	r2, r1
90007e72:	d11a      	bne.n	90007eaa <_ZN5Model4tickEv+0x56>
	modelListener->setMinTemperature(applicationContext.minTemperature);
90007e74:	695a      	ldr	r2, [r3, #20]
90007e76:	491c      	ldr	r1, [pc, #112]	; (90007ee8 <_ZN5Model4tickEv+0x94>)
90007e78:	428a      	cmp	r2, r1
90007e7a:	d120      	bne.n	90007ebe <_ZN5Model4tickEv+0x6a>

	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0]);
90007e7c:	699b      	ldr	r3, [r3, #24]
90007e7e:	4a1b      	ldr	r2, [pc, #108]	; (90007eec <_ZN5Model4tickEv+0x98>)
90007e80:	4293      	cmp	r3, r2
90007e82:	d126      	bne.n	90007ed2 <_ZN5Model4tickEv+0x7e>

	#endif
}
90007e84:	bd10      	pop	{r4, pc}
	modelListener->setHumidity(applicationContext.humidity);
90007e86:	4b1a      	ldr	r3, [pc, #104]	; (90007ef0 <_ZN5Model4tickEv+0x9c>)
90007e88:	7959      	ldrb	r1, [r3, #5]
90007e8a:	4790      	blx	r2
	modelListener->setTemperature(applicationContext.temperature);
90007e8c:	6820      	ldr	r0, [r4, #0]
90007e8e:	4914      	ldr	r1, [pc, #80]	; (90007ee0 <_ZN5Model4tickEv+0x8c>)
90007e90:	6803      	ldr	r3, [r0, #0]
90007e92:	689a      	ldr	r2, [r3, #8]
90007e94:	428a      	cmp	r2, r1
90007e96:	d0e9      	beq.n	90007e6c <_ZN5Model4tickEv+0x18>
90007e98:	4b15      	ldr	r3, [pc, #84]	; (90007ef0 <_ZN5Model4tickEv+0x9c>)
90007e9a:	7919      	ldrb	r1, [r3, #4]
90007e9c:	4790      	blx	r2
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90007e9e:	6820      	ldr	r0, [r4, #0]
90007ea0:	4910      	ldr	r1, [pc, #64]	; (90007ee4 <_ZN5Model4tickEv+0x90>)
90007ea2:	6803      	ldr	r3, [r0, #0]
90007ea4:	691a      	ldr	r2, [r3, #16]
90007ea6:	428a      	cmp	r2, r1
90007ea8:	d0e4      	beq.n	90007e74 <_ZN5Model4tickEv+0x20>
90007eaa:	4b11      	ldr	r3, [pc, #68]	; (90007ef0 <_ZN5Model4tickEv+0x9c>)
90007eac:	f9b3 1000 	ldrsh.w	r1, [r3]
90007eb0:	4790      	blx	r2
	modelListener->setMinTemperature(applicationContext.minTemperature);
90007eb2:	6820      	ldr	r0, [r4, #0]
90007eb4:	490c      	ldr	r1, [pc, #48]	; (90007ee8 <_ZN5Model4tickEv+0x94>)
90007eb6:	6803      	ldr	r3, [r0, #0]
90007eb8:	695a      	ldr	r2, [r3, #20]
90007eba:	428a      	cmp	r2, r1
90007ebc:	d0de      	beq.n	90007e7c <_ZN5Model4tickEv+0x28>
90007ebe:	4b0c      	ldr	r3, [pc, #48]	; (90007ef0 <_ZN5Model4tickEv+0x9c>)
90007ec0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
90007ec4:	4790      	blx	r2
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0]);
90007ec6:	6820      	ldr	r0, [r4, #0]
90007ec8:	4a08      	ldr	r2, [pc, #32]	; (90007eec <_ZN5Model4tickEv+0x98>)
90007eca:	6803      	ldr	r3, [r0, #0]
90007ecc:	699b      	ldr	r3, [r3, #24]
90007ece:	4293      	cmp	r3, r2
90007ed0:	d0d8      	beq.n	90007e84 <_ZN5Model4tickEv+0x30>
90007ed2:	4908      	ldr	r1, [pc, #32]	; (90007ef4 <_ZN5Model4tickEv+0xa0>)
}
90007ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0]);
90007ed8:	4718      	bx	r3
90007eda:	bf00      	nop
90007edc:	90007e35 	.word	0x90007e35
90007ee0:	90007e31 	.word	0x90007e31
90007ee4:	90007e39 	.word	0x90007e39
90007ee8:	90007e3d 	.word	0x90007e3d
90007eec:	90007e41 	.word	0x90007e41
90007ef0:	2400cd78 	.word	0x2400cd78
90007ef4:	2400cd80 	.word	0x2400cd80

90007ef8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90007ef8:	4770      	bx	lr
90007efa:	bf00      	nop

90007efc <_ZThn4_N16Screen1PresenterD1Ev>:
90007efc:	3804      	subs	r0, #4
90007efe:	4770      	bx	lr

90007f00 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90007f00:	4770      	bx	lr
90007f02:	bf00      	nop

90007f04 <_ZN16Screen1Presenter14setTemperatureEi>:
{

}

void Screen1Presenter::setTemperature(int value) {
	view.setTemperature(value);
90007f04:	68c0      	ldr	r0, [r0, #12]
90007f06:	6803      	ldr	r3, [r0, #0]
90007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007f0a:	4718      	bx	r3

90007f0c <_ZN16Screen1Presenter11setHumidityEi>:
}
void Screen1Presenter::setHumidity(int value) {
	view.setHumidity(value);
90007f0c:	68c0      	ldr	r0, [r0, #12]
90007f0e:	6803      	ldr	r3, [r0, #0]
90007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007f12:	4718      	bx	r3

90007f14 <_ZN16Screen1PresenterD0Ev>:
90007f14:	b510      	push	{r4, lr}
90007f16:	4604      	mov	r4, r0
90007f18:	2110      	movs	r1, #16
90007f1a:	f01f f8ec 	bl	900270f6 <_ZdlPvj>
90007f1e:	4620      	mov	r0, r4
90007f20:	bd10      	pop	{r4, pc}
90007f22:	bf00      	nop

90007f24 <_ZThn4_N16Screen1PresenterD0Ev>:
90007f24:	b500      	push	{lr}
90007f26:	3804      	subs	r0, #4
90007f28:	b083      	sub	sp, #12
90007f2a:	2110      	movs	r1, #16
90007f2c:	9001      	str	r0, [sp, #4]
90007f2e:	f01f f8e2 	bl	900270f6 <_ZdlPvj>
90007f32:	9801      	ldr	r0, [sp, #4]
90007f34:	b003      	add	sp, #12
90007f36:	f85d fb04 	ldr.w	pc, [sp], #4
90007f3a:	bf00      	nop

90007f3c <_ZThn4_N16Screen1Presenter14setTemperatureEi>:
90007f3c:	6880      	ldr	r0, [r0, #8]
90007f3e:	6803      	ldr	r3, [r0, #0]
90007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007f42:	4718      	bx	r3

90007f44 <_ZThn4_N16Screen1Presenter11setHumidityEi>:
90007f44:	6880      	ldr	r0, [r0, #8]
90007f46:	6803      	ldr	r3, [r0, #0]
90007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007f4a:	4718      	bx	r3

90007f4c <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90007f4c:	4a06      	ldr	r2, [pc, #24]	; (90007f68 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90007f4e:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90007f50:	b410      	push	{r4}
    ModelListener() : model(0) {}
90007f52:	2400      	movs	r4, #0
90007f54:	6084      	str	r4, [r0, #8]
    : view(v)
90007f56:	f102 0408 	add.w	r4, r2, #8
90007f5a:	3228      	adds	r2, #40	; 0x28
90007f5c:	e9c0 4200 	strd	r4, r2, [r0]
}
90007f60:	f85d 4b04 	ldr.w	r4, [sp], #4
90007f64:	4770      	bx	lr
90007f66:	bf00      	nop
90007f68:	9002b194 	.word	0x9002b194

90007f6c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90007f6c:	4770      	bx	lr
90007f6e:	bf00      	nop

90007f70 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90007f70:	4b03      	ldr	r3, [pc, #12]	; (90007f80 <_ZN11Screen1ViewD1Ev+0x10>)
90007f72:	b510      	push	{r4, lr}
90007f74:	4604      	mov	r4, r0
90007f76:	6003      	str	r3, [r0, #0]
90007f78:	f7fd fdda 	bl	90005b30 <_ZN15Screen1ViewBaseD1Ev>
90007f7c:	4620      	mov	r0, r4
90007f7e:	bd10      	pop	{r4, pc}
90007f80:	9002b1e4 	.word	0x9002b1e4

90007f84 <_ZN11Screen1ViewD0Ev>:
90007f84:	4b06      	ldr	r3, [pc, #24]	; (90007fa0 <_ZN11Screen1ViewD0Ev+0x1c>)
90007f86:	b510      	push	{r4, lr}
90007f88:	4604      	mov	r4, r0
90007f8a:	6003      	str	r3, [r0, #0]
90007f8c:	f7fd fdd0 	bl	90005b30 <_ZN15Screen1ViewBaseD1Ev>
90007f90:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90007f94:	4620      	mov	r0, r4
90007f96:	f01f f8ae 	bl	900270f6 <_ZdlPvj>
90007f9a:	4620      	mov	r0, r4
90007f9c:	bd10      	pop	{r4, pc}
90007f9e:	bf00      	nop
90007fa0:	9002b1e4 	.word	0x9002b1e4

90007fa4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90007fa4:	b510      	push	{r4, lr}
90007fa6:	4604      	mov	r4, r0
90007fa8:	f7fd ff82 	bl	90005eb0 <_ZN15Screen1ViewBaseC1Ev>
90007fac:	4b01      	ldr	r3, [pc, #4]	; (90007fb4 <_ZN11Screen1ViewC1Ev+0x10>)
}
90007fae:	4620      	mov	r0, r4
Screen1View::Screen1View()
90007fb0:	6023      	str	r3, [r4, #0]
}
90007fb2:	bd10      	pop	{r4, pc}
90007fb4:	9002b1e4 	.word	0x9002b1e4

90007fb8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90007fb8:	f7fd bdbc 	b.w	90005b34 <_ZN15Screen1ViewBase11setupScreenEv>

90007fbc <_ZN11Screen1View14setTemperatureEi>:

void Screen1View::setTemperature(int value) {
90007fbc:	b510      	push	{r4, lr}
90007fbe:	4604      	mov	r4, r0
90007fc0:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
90007fc2:	4a06      	ldr	r2, [pc, #24]	; (90007fdc <_ZN11Screen1View14setTemperatureEi+0x20>)
90007fc4:	2104      	movs	r1, #4
90007fc6:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
90007fca:	f012 fed7 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
90007fce:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
90007fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
90007fd6:	f010 bea0 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90007fda:	bf00      	nop
90007fdc:	9002b1d8 	.word	0x9002b1d8

90007fe0 <_ZN11Screen1View11setHumidityEi>:

void Screen1View::setHumidity(int value) {
90007fe0:	b510      	push	{r4, lr}
90007fe2:	4604      	mov	r4, r0
90007fe4:	460b      	mov	r3, r1
	Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%d", value);
90007fe6:	4a06      	ldr	r2, [pc, #24]	; (90008000 <_ZN11Screen1View11setHumidityEi+0x20>)
90007fe8:	2104      	movs	r1, #4
90007fea:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
90007fee:	f012 fec5 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	humidityTextArea.invalidate();
90007ff2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
90007ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	humidityTextArea.invalidate();
90007ffa:	f010 be8e 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90007ffe:	bf00      	nop
90008000:	9002b1d8 	.word	0x9002b1d8

90008004 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
90008004:	4770      	bx	lr
90008006:	bf00      	nop

90008008 <_ZThn4_N16Screen2PresenterD1Ev>:
90008008:	3804      	subs	r0, #4
9000800a:	4770      	bx	lr

9000800c <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
9000800c:	4770      	bx	lr
9000800e:	bf00      	nop

90008010 <_ZN16Screen2Presenter14setTemperatureEi>:
{

}

void Screen2Presenter::setTemperature(int value) {
	view.setTemperature(value);
90008010:	68c0      	ldr	r0, [r0, #12]
90008012:	6803      	ldr	r3, [r0, #0]
90008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008016:	4718      	bx	r3

90008018 <_ZN16Screen2Presenter17setMaxTemperatureEi>:
};

void Screen2Presenter::setMaxTemperature(int value) {
	view.setMaxTemperature(value);
90008018:	68c0      	ldr	r0, [r0, #12]
9000801a:	6803      	ldr	r3, [r0, #0]
9000801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000801e:	4718      	bx	r3

90008020 <_ZN16Screen2Presenter17setMinTemperatureEi>:
};

void Screen2Presenter::setMinTemperature(int value) {
	view.setMinTemperature(value);
90008020:	68c0      	ldr	r0, [r0, #12]
90008022:	6803      	ldr	r3, [r0, #0]
90008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90008026:	4718      	bx	r3

90008028 <_ZN16Screen2Presenter23setTemperatureGraphDataEPs>:
};

void Screen2Presenter::setTemperatureGraphData(short int* data) {
	view.setTemperatureGraphData(data);
90008028:	68c0      	ldr	r0, [r0, #12]
9000802a:	6803      	ldr	r3, [r0, #0]
9000802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000802e:	4718      	bx	r3

90008030 <_ZN16Screen2PresenterD0Ev>:
90008030:	b510      	push	{r4, lr}
90008032:	4604      	mov	r4, r0
90008034:	2110      	movs	r1, #16
90008036:	f01f f85e 	bl	900270f6 <_ZdlPvj>
9000803a:	4620      	mov	r0, r4
9000803c:	bd10      	pop	{r4, pc}
9000803e:	bf00      	nop

90008040 <_ZThn4_N16Screen2PresenterD0Ev>:
90008040:	b500      	push	{lr}
90008042:	3804      	subs	r0, #4
90008044:	b083      	sub	sp, #12
90008046:	2110      	movs	r1, #16
90008048:	9001      	str	r0, [sp, #4]
9000804a:	f01f f854 	bl	900270f6 <_ZdlPvj>
9000804e:	9801      	ldr	r0, [sp, #4]
90008050:	b003      	add	sp, #12
90008052:	f85d fb04 	ldr.w	pc, [sp], #4
90008056:	bf00      	nop

90008058 <_ZThn4_N16Screen2Presenter14setTemperatureEi>:
90008058:	6880      	ldr	r0, [r0, #8]
9000805a:	6803      	ldr	r3, [r0, #0]
9000805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000805e:	4718      	bx	r3

90008060 <_ZThn4_N16Screen2Presenter17setMaxTemperatureEi>:
90008060:	6880      	ldr	r0, [r0, #8]
90008062:	6803      	ldr	r3, [r0, #0]
90008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008066:	4718      	bx	r3

90008068 <_ZThn4_N16Screen2Presenter17setMinTemperatureEi>:
90008068:	6880      	ldr	r0, [r0, #8]
9000806a:	6803      	ldr	r3, [r0, #0]
9000806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000806e:	4718      	bx	r3

90008070 <_ZThn4_N16Screen2Presenter23setTemperatureGraphDataEPs>:
90008070:	6880      	ldr	r0, [r0, #8]
90008072:	6803      	ldr	r3, [r0, #0]
90008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90008076:	4718      	bx	r3

90008078 <_ZN16Screen2PresenterC1ER11Screen2View>:
    : view(v)
90008078:	4a06      	ldr	r2, [pc, #24]	; (90008094 <_ZN16Screen2PresenterC1ER11Screen2View+0x1c>)
9000807a:	60c1      	str	r1, [r0, #12]
Screen2Presenter::Screen2Presenter(Screen2View& v)
9000807c:	b410      	push	{r4}
9000807e:	2400      	movs	r4, #0
90008080:	6084      	str	r4, [r0, #8]
    : view(v)
90008082:	f102 0408 	add.w	r4, r2, #8
90008086:	3230      	adds	r2, #48	; 0x30
90008088:	e9c0 4200 	strd	r4, r2, [r0]
}
9000808c:	f85d 4b04 	ldr.w	r4, [sp], #4
90008090:	4770      	bx	lr
90008092:	bf00      	nop
90008094:	9002b218 	.word	0x9002b218

90008098 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
90008098:	4770      	bx	lr
9000809a:	bf00      	nop

9000809c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
9000809c:	4b03      	ldr	r3, [pc, #12]	; (900080ac <_ZN11Screen2ViewD1Ev+0x10>)
9000809e:	b510      	push	{r4, lr}
900080a0:	4604      	mov	r4, r0
900080a2:	6003      	str	r3, [r0, #0]
900080a4:	f7fe fbc2 	bl	9000682c <_ZN15Screen2ViewBaseD1Ev>
900080a8:	4620      	mov	r0, r4
900080aa:	bd10      	pop	{r4, pc}
900080ac:	9002b26c 	.word	0x9002b26c

900080b0 <_ZN11Screen2ViewD0Ev>:
900080b0:	4b06      	ldr	r3, [pc, #24]	; (900080cc <_ZN11Screen2ViewD0Ev+0x1c>)
900080b2:	b510      	push	{r4, lr}
900080b4:	4604      	mov	r4, r0
900080b6:	6003      	str	r3, [r0, #0]
900080b8:	f7fe fbb8 	bl	9000682c <_ZN15Screen2ViewBaseD1Ev>
900080bc:	f242 0114 	movw	r1, #8212	; 0x2014
900080c0:	4620      	mov	r0, r4
900080c2:	f01f f818 	bl	900270f6 <_ZdlPvj>
900080c6:	4620      	mov	r0, r4
900080c8:	bd10      	pop	{r4, pc}
900080ca:	bf00      	nop
900080cc:	9002b26c 	.word	0x9002b26c

900080d0 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
900080d0:	b510      	push	{r4, lr}
900080d2:	4604      	mov	r4, r0
900080d4:	f7fe ff7e 	bl	90006fd4 <_ZN15Screen2ViewBaseC1Ev>
900080d8:	4b01      	ldr	r3, [pc, #4]	; (900080e0 <_ZN11Screen2ViewC1Ev+0x10>)
}
900080da:	4620      	mov	r0, r4
Screen2View::Screen2View()
900080dc:	6023      	str	r3, [r4, #0]
}
900080de:	bd10      	pop	{r4, pc}
900080e0:	9002b26c 	.word	0x9002b26c

900080e4 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
900080e4:	f7fe bb4c 	b.w	90006780 <_ZN15Screen2ViewBase11setupScreenEv>

900080e8 <_ZN11Screen2View14setTemperatureEi>:

void Screen2View::setTemperature(int value) {
900080e8:	b510      	push	{r4, lr}
900080ea:	4604      	mov	r4, r0
900080ec:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
900080ee:	4a06      	ldr	r2, [pc, #24]	; (90008108 <_ZN11Screen2View14setTemperatureEi+0x20>)
900080f0:	2104      	movs	r1, #4
900080f2:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
900080f6:	f012 fe41 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
900080fa:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
900080fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
90008102:	f010 be0a 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90008106:	bf00      	nop
90008108:	9002b1d8 	.word	0x9002b1d8

9000810c <_ZN11Screen2View17setMaxTemperatureEi>:

void Screen2View::setMaxTemperature(int value) {
9000810c:	b510      	push	{r4, lr}
9000810e:	4604      	mov	r4, r0
90008110:	460b      	mov	r3, r1
	Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%d", value);
90008112:	4a06      	ldr	r2, [pc, #24]	; (9000812c <_ZN11Screen2View17setMaxTemperatureEi+0x20>)
90008114:	2104      	movs	r1, #4
90008116:	f500 7077 	add.w	r0, r0, #988	; 0x3dc
9000811a:	f012 fe2f 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	maxTemperatureTextArea.invalidate();
9000811e:	f504 70a0 	add.w	r0, r4, #320	; 0x140
};
90008122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	maxTemperatureTextArea.invalidate();
90008126:	f010 bdf8 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
9000812a:	bf00      	nop
9000812c:	9002b1d8 	.word	0x9002b1d8

90008130 <_ZN11Screen2View17setMinTemperatureEi>:

void Screen2View::setMinTemperature(int value) {
90008130:	b510      	push	{r4, lr}
90008132:	4604      	mov	r4, r0
90008134:	460b      	mov	r3, r1
	Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%d", value);
90008136:	4a06      	ldr	r2, [pc, #24]	; (90008150 <_ZN11Screen2View17setMinTemperatureEi+0x20>)
90008138:	2104      	movs	r1, #4
9000813a:	f500 7073 	add.w	r0, r0, #972	; 0x3cc
9000813e:	f012 fe1d 	bl	9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	minTemperatureTextArea.invalidate();
90008142:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
90008146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	minTemperatureTextArea.invalidate();
9000814a:	f010 bde6 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
9000814e:	bf00      	nop
90008150:	9002b1d8 	.word	0x9002b1d8

90008154 <_ZN11Screen2View23setTemperatureGraphDataEPs>:

void Screen2View::setTemperatureGraphData(short int* data) {
90008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	temperatureGraph.clear();
90008156:	f500 77c6 	add.w	r7, r0, #396	; 0x18c
void Screen2View::setTemperatureGraphData(short int* data) {
9000815a:	4606      	mov	r6, r0
9000815c:	1e8c      	subs	r4, r1, #2
9000815e:	f101 0512 	add.w	r5, r1, #18
	temperatureGraph.clear();
90008162:	4638      	mov	r0, r7
90008164:	f00c fb51 	bl	9001480a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>
	for(int i = 0; i < 10; ++i) {
	  temperatureGraph.addDataPoint(data[i]);
90008168:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
        return addDataPointScaled(int2scaledY(y));
9000816c:	4638      	mov	r0, r7
        return i * scale;
9000816e:	f8d6 11c0 	ldr.w	r1, [r6, #448]	; 0x1c0
        return addDataPointScaled(int2scaledY(y));
90008172:	fb03 f101 	mul.w	r1, r3, r1
90008176:	f00c f8e8 	bl	9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
	for(int i = 0; i < 10; ++i) {
9000817a:	42a5      	cmp	r5, r4
9000817c:	d1f4      	bne.n	90008168 <_ZN11Screen2View23setTemperatureGraphDataEPs+0x14>
	}
};
9000817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90008180 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90008180:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90008184:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90008186:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000818a:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000818e:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90008190:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90008192:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90008196:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
9000819a:	4770      	bx	lr

9000819c <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
9000819c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900081a0:	2b01      	cmp	r3, #1
900081a2:	d102      	bne.n	900081aa <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
900081a4:	2300      	movs	r3, #0
900081a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
900081aa:	2000      	movs	r0, #0
900081ac:	4770      	bx	lr
900081ae:	bf00      	nop

900081b0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
900081b0:	2000      	movs	r0, #0
900081b2:	4770      	bx	lr

900081b4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900081b4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900081b6:	6904      	ldr	r4, [r0, #16]
900081b8:	8900      	ldrh	r0, [r0, #8]
900081ba:	46a4      	mov	ip, r4
}
900081bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900081c0:	4760      	bx	ip
900081c2:	bf00      	nop

900081c4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900081c4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900081c6:	68c4      	ldr	r4, [r0, #12]
900081c8:	8900      	ldrh	r0, [r0, #8]
900081ca:	46a4      	mov	ip, r4
}
900081cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900081d0:	4760      	bx	ip
900081d2:	bf00      	nop

900081d4 <FT5336_GestureConfig>:
{
900081d4:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
900081d6:	f100 0518 	add.w	r5, r0, #24
{
900081da:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
900081dc:	7809      	ldrb	r1, [r1, #0]
900081de:	4628      	mov	r0, r5
900081e0:	f000 f96c 	bl	900084bc <ft5336_radian_value>
900081e4:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
900081e6:	7931      	ldrb	r1, [r6, #4]
900081e8:	4628      	mov	r0, r5
900081ea:	f000 f975 	bl	900084d8 <ft5336_offset_left_right>
900081ee:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
900081f0:	7a31      	ldrb	r1, [r6, #8]
900081f2:	4628      	mov	r0, r5
900081f4:	f000 f97e 	bl	900084f4 <ft5336_offset_up_down>
900081f8:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900081fa:	7b31      	ldrb	r1, [r6, #12]
900081fc:	4628      	mov	r0, r5
900081fe:	f000 f987 	bl	90008510 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90008202:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90008204:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90008206:	4628      	mov	r0, r5
90008208:	f000 f990 	bl	9000852c <ft5336_distance_up_down>
9000820c:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
9000820e:	7d31      	ldrb	r1, [r6, #20]
90008210:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90008212:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008214:	f000 f998 	bl	90008548 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90008218:	42c4      	cmn	r4, r0
}
9000821a:	bf14      	ite	ne
9000821c:	f04f 30ff 	movne.w	r0, #4294967295
90008220:	2000      	moveq	r0, #0
90008222:	bd70      	pop	{r4, r5, r6, pc}

90008224 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90008224:	3018      	adds	r0, #24
90008226:	f000 b9ab 	b.w	90008580 <ft5336_chip_id>
9000822a:	bf00      	nop

9000822c <FT5336_GetState>:
{
9000822c:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000822e:	f100 0518 	add.w	r5, r0, #24
{
90008232:	b083      	sub	sp, #12
90008234:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008236:	4628      	mov	r0, r5
90008238:	a901      	add	r1, sp, #4
9000823a:	f000 f931 	bl	900084a0 <ft5336_td_status>
9000823e:	bb10      	cbnz	r0, 90008286 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90008240:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90008244:	2b05      	cmp	r3, #5
90008246:	bf94      	ite	ls
90008248:	4619      	movls	r1, r3
9000824a:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
9000824c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
9000824e:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008250:	4628      	mov	r0, r5
90008252:	2103      	movs	r1, #3
90008254:	eb0d 0203 	add.w	r2, sp, r3
90008258:	f000 f910 	bl	9000847c <ft5336_read_reg>
9000825c:	b9b0      	cbnz	r0, 9000828c <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000825e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90008262:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90008266:	0212      	lsls	r2, r2, #8
90008268:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
9000826c:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000826e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90008272:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90008276:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90008278:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000827c:	430b      	orrs	r3, r1
9000827e:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90008282:	b003      	add	sp, #12
90008284:	bd30      	pop	{r4, r5, pc}
90008286:	f04f 31ff 	mov.w	r1, #4294967295
9000828a:	e7df      	b.n	9000824c <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
9000828c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90008290:	e7f7      	b.n	90008282 <FT5336_GetState+0x56>
90008292:	bf00      	nop

90008294 <FT5336_GetMultiTouchState>:
{
90008294:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008296:	f100 0518 	add.w	r5, r0, #24
{
9000829a:	b088      	sub	sp, #32
9000829c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000829e:	4628      	mov	r0, r5
900082a0:	4669      	mov	r1, sp
900082a2:	f000 f8fd 	bl	900084a0 <ft5336_td_status>
900082a6:	2800      	cmp	r0, #0
900082a8:	f040 809a 	bne.w	900083e0 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900082ac:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900082b0:	2b05      	cmp	r3, #5
900082b2:	bf94      	ite	ls
900082b4:	4619      	movls	r1, r3
900082b6:	2100      	movhi	r1, #0
900082b8:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900082ba:	231e      	movs	r3, #30
900082bc:	466a      	mov	r2, sp
900082be:	4628      	mov	r0, r5
900082c0:	2103      	movs	r1, #3
900082c2:	f000 f8db 	bl	9000847c <ft5336_read_reg>
900082c6:	2800      	cmp	r0, #0
900082c8:	f040 808d 	bne.w	900083e6 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082cc:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082d4:	020a      	lsls	r2, r1, #8
900082d6:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082da:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082dc:	f89d c007 	ldrb.w	ip, [sp, #7]
900082e0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900082e4:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900082ea:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082ee:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082f0:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900082f4:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900082f6:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082f8:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082fa:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900082fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008300:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008302:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008306:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000830a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000830c:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000830e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008312:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008314:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008316:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008318:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000831c:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000831e:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008320:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008324:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008328:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000832a:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000832c:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000832e:	ea45 050c 	orr.w	r5, r5, ip
90008332:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008336:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000833a:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000833c:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000833e:	0212      	lsls	r2, r2, #8
90008340:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008344:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008346:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000834a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000834e:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008350:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008352:	f89d 300e 	ldrb.w	r3, [sp, #14]
90008356:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008358:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000835c:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000835e:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008360:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008364:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008366:	f89d 200f 	ldrb.w	r2, [sp, #15]
9000836a:	4313      	orrs	r3, r2
9000836c:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000836e:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008370:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008374:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008378:	020a      	lsls	r2, r1, #8
9000837a:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000837e:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008380:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008384:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008386:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000838a:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000838c:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008390:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008392:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008394:	f89d 1018 	ldrb.w	r1, [sp, #24]
90008398:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000839a:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000839c:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000839e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900083a2:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900083a4:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900083a8:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900083aa:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900083ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
900083b2:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900083b4:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900083b6:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900083b8:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900083bc:	6625      	str	r5, [r4, #96]	; 0x60
900083be:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900083c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900083c4:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900083c6:	021b      	lsls	r3, r3, #8
900083c8:	f89d 101b 	ldrb.w	r1, [sp, #27]
900083cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900083d0:	430b      	orrs	r3, r1
900083d2:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900083d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
900083d8:	4313      	orrs	r3, r2
900083da:	6163      	str	r3, [r4, #20]
}
900083dc:	b008      	add	sp, #32
900083de:	bd70      	pop	{r4, r5, r6, pc}
900083e0:	f04f 31ff 	mov.w	r1, #4294967295
900083e4:	e768      	b.n	900082b8 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
900083e6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900083ea:	e7f7      	b.n	900083dc <FT5336_GetMultiTouchState+0x148>

900083ec <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
900083ec:	3018      	adds	r0, #24
900083ee:	f000 b84d 	b.w	9000848c <ft5336_gest_id>
900083f2:	bf00      	nop

900083f4 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
900083f4:	2101      	movs	r1, #1
900083f6:	3018      	adds	r0, #24
900083f8:	f000 b8b4 	b.w	90008564 <ft5336_g_mode>

900083fc <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
900083fc:	2100      	movs	r1, #0
900083fe:	3018      	adds	r0, #24
90008400:	f000 b8b0 	b.w	90008564 <ft5336_g_mode>

90008404 <FT5336_Init>:
{
90008404:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90008406:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
9000840a:	b98d      	cbnz	r5, 90008430 <FT5336_Init+0x2c>
    pObj->IO.Init();
9000840c:	4606      	mov	r6, r0
9000840e:	4604      	mov	r4, r0
90008410:	f856 3b18 	ldr.w	r3, [r6], #24
90008414:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90008416:	4629      	mov	r1, r5
90008418:	4630      	mov	r0, r6
9000841a:	f000 f8a3 	bl	90008564 <ft5336_g_mode>
  if(ret != FT5336_OK)
9000841e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90008420:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90008424:	bf18      	it	ne
90008426:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90008428:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
9000842c:	4240      	negs	r0, r0
}
9000842e:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90008430:	2000      	movs	r0, #0
}
90008432:	bd70      	pop	{r4, r5, r6, pc}

90008434 <FT5336_ClearIT>:
90008434:	2000      	movs	r0, #0
90008436:	4770      	bx	lr

90008438 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90008438:	b1c0      	cbz	r0, 9000846c <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
9000843a:	890a      	ldrh	r2, [r1, #8]
{
9000843c:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
9000843e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90008442:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90008444:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90008448:	694a      	ldr	r2, [r1, #20]
9000844a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
9000844e:	4909      	ldr	r1, [pc, #36]	; (90008474 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90008450:	60c5      	str	r5, [r0, #12]
90008452:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
90008456:	4a08      	ldr	r2, [pc, #32]	; (90008478 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90008458:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000845c:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
9000845e:	b10b      	cbz	r3, 90008464 <FT5336_RegisterBusIO+0x2c>
}
90008460:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90008462:	4718      	bx	r3
}
90008464:	f04f 30ff 	mov.w	r0, #4294967295
90008468:	bc30      	pop	{r4, r5}
9000846a:	4770      	bx	lr
9000846c:	f04f 30ff 	mov.w	r0, #4294967295
90008470:	4770      	bx	lr
90008472:	bf00      	nop
90008474:	900081b5 	.word	0x900081b5
90008478:	900081c5 	.word	0x900081c5

9000847c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
9000847c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000847e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90008482:	46a4      	mov	ip, r4
}
90008484:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008488:	4760      	bx	ip
9000848a:	bf00      	nop

9000848c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
9000848c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000848e:	2301      	movs	r3, #1
{
90008490:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008492:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90008496:	4619      	mov	r1, r3
90008498:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
9000849a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000849e:	4760      	bx	ip

900084a0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
900084a0:	b538      	push	{r3, r4, r5, lr}
900084a2:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900084a4:	2301      	movs	r3, #1
900084a6:	2102      	movs	r1, #2
900084a8:	4622      	mov	r2, r4
900084aa:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
900084ae:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
900084b0:	b918      	cbnz	r0, 900084ba <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900084b2:	7823      	ldrb	r3, [r4, #0]
900084b4:	f003 030f 	and.w	r3, r3, #15
900084b8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
900084ba:	bd38      	pop	{r3, r4, r5, pc}

900084bc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
900084bc:	b510      	push	{r4, lr}
900084be:	460c      	mov	r4, r1
900084c0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084c2:	2301      	movs	r3, #1
900084c4:	2191      	movs	r1, #145	; 0x91
{
900084c6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084ca:	f10d 0207 	add.w	r2, sp, #7
900084ce:	6804      	ldr	r4, [r0, #0]
900084d0:	6880      	ldr	r0, [r0, #8]
900084d2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
900084d4:	b002      	add	sp, #8
900084d6:	bd10      	pop	{r4, pc}

900084d8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900084d8:	b510      	push	{r4, lr}
900084da:	460c      	mov	r4, r1
900084dc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084de:	2301      	movs	r3, #1
900084e0:	2192      	movs	r1, #146	; 0x92
{
900084e2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084e6:	f10d 0207 	add.w	r2, sp, #7
900084ea:	6804      	ldr	r4, [r0, #0]
900084ec:	6880      	ldr	r0, [r0, #8]
900084ee:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
900084f0:	b002      	add	sp, #8
900084f2:	bd10      	pop	{r4, pc}

900084f4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900084f4:	b510      	push	{r4, lr}
900084f6:	460c      	mov	r4, r1
900084f8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084fa:	2301      	movs	r3, #1
900084fc:	2193      	movs	r1, #147	; 0x93
{
900084fe:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008502:	f10d 0207 	add.w	r2, sp, #7
90008506:	6804      	ldr	r4, [r0, #0]
90008508:	6880      	ldr	r0, [r0, #8]
9000850a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
9000850c:	b002      	add	sp, #8
9000850e:	bd10      	pop	{r4, pc}

90008510 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008510:	b510      	push	{r4, lr}
90008512:	460c      	mov	r4, r1
90008514:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008516:	2301      	movs	r3, #1
90008518:	2194      	movs	r1, #148	; 0x94
{
9000851a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000851e:	f10d 0207 	add.w	r2, sp, #7
90008522:	6804      	ldr	r4, [r0, #0]
90008524:	6880      	ldr	r0, [r0, #8]
90008526:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90008528:	b002      	add	sp, #8
9000852a:	bd10      	pop	{r4, pc}

9000852c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
9000852c:	b510      	push	{r4, lr}
9000852e:	460c      	mov	r4, r1
90008530:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008532:	2301      	movs	r3, #1
90008534:	2195      	movs	r1, #149	; 0x95
{
90008536:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000853a:	f10d 0207 	add.w	r2, sp, #7
9000853e:	6804      	ldr	r4, [r0, #0]
90008540:	6880      	ldr	r0, [r0, #8]
90008542:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90008544:	b002      	add	sp, #8
90008546:	bd10      	pop	{r4, pc}

90008548 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90008548:	b510      	push	{r4, lr}
9000854a:	460c      	mov	r4, r1
9000854c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000854e:	2301      	movs	r3, #1
90008550:	2196      	movs	r1, #150	; 0x96
{
90008552:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008556:	f10d 0207 	add.w	r2, sp, #7
9000855a:	6804      	ldr	r4, [r0, #0]
9000855c:	6880      	ldr	r0, [r0, #8]
9000855e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90008560:	b002      	add	sp, #8
90008562:	bd10      	pop	{r4, pc}

90008564 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90008564:	b510      	push	{r4, lr}
90008566:	460c      	mov	r4, r1
90008568:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000856a:	2301      	movs	r3, #1
9000856c:	21a4      	movs	r1, #164	; 0xa4
{
9000856e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008572:	f10d 0207 	add.w	r2, sp, #7
90008576:	6804      	ldr	r4, [r0, #0]
90008578:	6880      	ldr	r0, [r0, #8]
9000857a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
9000857c:	b002      	add	sp, #8
9000857e:	bd10      	pop	{r4, pc}

90008580 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008580:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008582:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90008586:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008588:	2301      	movs	r3, #1
9000858a:	46a4      	mov	ip, r4
9000858c:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
9000858e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008592:	4760      	bx	ip

90008594 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008596:	680b      	ldr	r3, [r1, #0]
{
90008598:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000859a:	4c2a      	ldr	r4, [pc, #168]	; (90008644 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000859c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
900085a0:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
900085a2:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
900085a4:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085a6:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
900085a8:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900085aa:	2301      	movs	r3, #1
900085ac:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
900085ae:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085b0:	f005 fd2a 	bl	9000e008 <HAL_SDRAM_SendCommand>
900085b4:	2800      	cmp	r0, #0
900085b6:	d142      	bne.n	9000863e <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900085b8:	f000 ff46 	bl	90009448 <HAL_GetTick>
900085bc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
900085be:	f000 ff43 	bl	90009448 <HAL_GetTick>
900085c2:	4286      	cmp	r6, r0
900085c4:	d0fb      	beq.n	900085be <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900085c6:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900085c8:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
900085ca:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085cc:	491d      	ldr	r1, [pc, #116]	; (90008644 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900085ce:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
900085d0:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
900085d2:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085d4:	4638      	mov	r0, r7
900085d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
900085da:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
900085dc:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085de:	f005 fd13 	bl	9000e008 <HAL_SDRAM_SendCommand>
900085e2:	bb60      	cbnz	r0, 9000863e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085e4:	4917      	ldr	r1, [pc, #92]	; (90008644 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
900085e6:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
900085ea:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085ec:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
900085ee:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
900085f2:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
900085f8:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085fa:	f005 fd05 	bl	9000e008 <HAL_SDRAM_SendCommand>
900085fe:	b9f0      	cbnz	r0, 9000863e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008600:	4910      	ldr	r1, [pc, #64]	; (90008644 <MT48LC4M32B2_Init+0xb0>)
90008602:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008604:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90008608:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
9000860a:	696a      	ldr	r2, [r5, #20]
9000860c:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
9000860e:	69aa      	ldr	r2, [r5, #24]
90008610:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008612:	69ea      	ldr	r2, [r5, #28]
90008614:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90008616:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90008618:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000861a:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
9000861c:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008620:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008624:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008626:	f005 fcef 	bl	9000e008 <HAL_SDRAM_SendCommand>
9000862a:	b940      	cbnz	r0, 9000863e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
9000862c:	68a9      	ldr	r1, [r5, #8]
9000862e:	4638      	mov	r0, r7
90008630:	f005 fd0a 	bl	9000e048 <HAL_SDRAM_ProgramRefreshRate>
90008634:	3800      	subs	r0, #0
90008636:	bf18      	it	ne
90008638:	2001      	movne	r0, #1
9000863a:	4240      	negs	r0, r0
}
9000863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
9000863e:	f04f 30ff 	mov.w	r0, #4294967295
}
90008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008644:	2400d148 	.word	0x2400d148

90008648 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90008648:	4a10      	ldr	r2, [pc, #64]	; (9000868c <BSP_I2C4_DeInit+0x44>)
{
9000864a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
9000864c:	6813      	ldr	r3, [r2, #0]
9000864e:	3b01      	subs	r3, #1
90008650:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90008652:	b10b      	cbz	r3, 90008658 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90008654:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90008656:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90008658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000865c:	480c      	ldr	r0, [pc, #48]	; (90008690 <BSP_I2C4_DeInit+0x48>)
9000865e:	f001 faaf 	bl	90009bc0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90008662:	480b      	ldr	r0, [pc, #44]	; (90008690 <BSP_I2C4_DeInit+0x48>)
90008664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90008668:	f001 faaa 	bl	90009bc0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
9000866c:	4a09      	ldr	r2, [pc, #36]	; (90008694 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
9000866e:	480a      	ldr	r0, [pc, #40]	; (90008698 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90008670:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90008674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008678:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
9000867c:	f001 fd48 	bl	9000a110 <HAL_I2C_DeInit>
90008680:	2800      	cmp	r0, #0
90008682:	d0e7      	beq.n	90008654 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90008684:	f06f 0007 	mvn.w	r0, #7
}
90008688:	bd08      	pop	{r3, pc}
9000868a:	bf00      	nop
9000868c:	2400d158 	.word	0x2400d158
90008690:	58020c00 	.word	0x58020c00
90008694:	58024400 	.word	0x58024400
90008698:	2400db60 	.word	0x2400db60

9000869c <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
9000869c:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000869e:	2201      	movs	r2, #1
{
900086a0:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
900086a2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900086a6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900086aa:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900086ae:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
900086b2:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
900086b4:	f001 fcd4 	bl	9000a060 <HAL_I2C_Init>
900086b8:	b108      	cbz	r0, 900086be <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
900086ba:	2001      	movs	r0, #1
}
900086bc:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900086be:	4601      	mov	r1, r0
900086c0:	4620      	mov	r0, r4
900086c2:	f001 ffe3 	bl	9000a68c <HAL_I2CEx_ConfigAnalogFilter>
900086c6:	2800      	cmp	r0, #0
900086c8:	d1f7      	bne.n	900086ba <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900086ca:	4601      	mov	r1, r0
900086cc:	4620      	mov	r0, r4
900086ce:	f002 f807 	bl	9000a6e0 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
900086d2:	3800      	subs	r0, #0
900086d4:	bf18      	it	ne
900086d6:	2001      	movne	r0, #1
}
900086d8:	bd10      	pop	{r4, pc}
900086da:	bf00      	nop

900086dc <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
900086dc:	4b99      	ldr	r3, [pc, #612]	; (90008944 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
900086de:	489a      	ldr	r0, [pc, #616]	; (90008948 <BSP_I2C4_Init+0x26c>)
900086e0:	4a9a      	ldr	r2, [pc, #616]	; (9000894c <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
900086e2:	6819      	ldr	r1, [r3, #0]
{
900086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900086e8:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
900086ea:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
900086ec:	9103      	str	r1, [sp, #12]
900086ee:	b119      	cbz	r1, 900086f8 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
900086f0:	2000      	movs	r0, #0
}
900086f2:	b01f      	add	sp, #124	; 0x7c
900086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
900086f8:	2201      	movs	r2, #1
900086fa:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900086fc:	f001 ffc0 	bl	9000a680 <HAL_I2C_GetState>
90008700:	2800      	cmp	r0, #0
90008702:	d1f5      	bne.n	900086f0 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008704:	4c92      	ldr	r4, [pc, #584]	; (90008950 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008706:	f44f 5080 	mov.w	r0, #4096	; 0x1000
9000870a:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000870c:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000870e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008712:	2600      	movs	r6, #0
90008714:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008716:	f043 0308 	orr.w	r3, r3, #8
9000871a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000871e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008722:	f003 0308 	and.w	r3, r3, #8
90008726:	9315      	str	r3, [sp, #84]	; 0x54
90008728:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000872a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000872e:	f043 0308 	orr.w	r3, r3, #8
90008732:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008736:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000873a:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000873c:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008740:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008744:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008746:	a918      	add	r1, sp, #96	; 0x60
90008748:	4882      	ldr	r0, [pc, #520]	; (90008954 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000874a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000874c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008750:	f001 f904 	bl	9000995c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008754:	2312      	movs	r3, #18
90008756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
9000875a:	a918      	add	r1, sp, #96	; 0x60
9000875c:	487d      	ldr	r0, [pc, #500]	; (90008954 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
9000875e:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008760:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90008764:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008768:	f001 f8f8 	bl	9000995c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
9000876c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008774:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90008778:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
9000877c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008780:	9317      	str	r3, [sp, #92]	; 0x5c
90008782:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90008784:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000878c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90008790:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008798:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
9000879c:	f004 fc94 	bl	9000d0c8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900087a0:	2800      	cmp	r0, #0
900087a2:	f000 81f6 	beq.w	90008b92 <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900087a6:	4b6c      	ldr	r3, [pc, #432]	; (90008958 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
900087a8:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900087ac:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900087ae:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900087b2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90008960 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900087b6:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900087b8:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900087bc:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900087be:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900087c0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900087c4:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
900087c8:	4b64      	ldr	r3, [pc, #400]	; (9000895c <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900087ca:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900087ce:	0079      	lsls	r1, r7, #1
900087d0:	681b      	ldr	r3, [r3, #0]
900087d2:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
900087d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
900087da:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900087dc:	4699      	mov	r9, r3
900087de:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900087e0:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
900087e4:	46b8      	mov	r8, r7
900087e6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
900087ea:	bf94      	ite	ls
900087ec:	2101      	movls	r1, #1
900087ee:	2100      	movhi	r1, #0
900087f0:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
900087f4:	f001 0101 	and.w	r1, r1, #1
900087f8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
900087fc:	bf38      	it	cc
900087fe:	2100      	movcc	r1, #0
90008800:	429c      	cmp	r4, r3
90008802:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90008806:	9105      	str	r1, [sp, #20]
90008808:	bf8c      	ite	hi
9000880a:	2100      	movhi	r1, #0
9000880c:	2101      	movls	r1, #1
9000880e:	459c      	cmp	ip, r3
90008810:	bf38      	it	cc
90008812:	2100      	movcc	r1, #0
90008814:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90008818:	9106      	str	r1, [sp, #24]
9000881a:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000881e:	9104      	str	r1, [sp, #16]
90008820:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90008824:	9111      	str	r1, [sp, #68]	; 0x44
90008826:	bf94      	ite	ls
90008828:	2101      	movls	r1, #1
9000882a:	2100      	movhi	r1, #0
9000882c:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90008830:	f001 0e01 	and.w	lr, r1, #1
90008834:	bf38      	it	cc
90008836:	f04f 0e00 	movcc.w	lr, #0
9000883a:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000883c:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008840:	f8cd e01c 	str.w	lr, [sp, #28]
90008844:	bf8c      	ite	hi
90008846:	f04f 0e00 	movhi.w	lr, #0
9000884a:	f04f 0e01 	movls.w	lr, #1
9000884e:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008850:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008852:	bf38      	it	cc
90008854:	f04f 0e00 	movcc.w	lr, #0
90008858:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
9000885c:	bf98      	it	ls
9000885e:	2101      	movls	r1, #1
90008860:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90008864:	f8cd e020 	str.w	lr, [sp, #32]
90008868:	f001 0101 	and.w	r1, r1, #1
9000886c:	bf38      	it	cc
9000886e:	2100      	movcc	r1, #0
90008870:	4284      	cmp	r4, r0
90008872:	9109      	str	r1, [sp, #36]	; 0x24
90008874:	4601      	mov	r1, r0
90008876:	bf8c      	ite	hi
90008878:	2000      	movhi	r0, #0
9000887a:	2001      	movls	r0, #1
9000887c:	458c      	cmp	ip, r1
9000887e:	bf38      	it	cc
90008880:	2000      	movcc	r0, #0
90008882:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90008886:	900b      	str	r0, [sp, #44]	; 0x2c
90008888:	bf94      	ite	ls
9000888a:	2001      	movls	r0, #1
9000888c:	2000      	movhi	r0, #0
9000888e:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90008892:	f000 0001 	and.w	r0, r0, #1
90008896:	bf38      	it	cc
90008898:	2000      	movcc	r0, #0
9000889a:	900c      	str	r0, [sp, #48]	; 0x30
9000889c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
900088a0:	4284      	cmp	r4, r0
900088a2:	bf8c      	ite	hi
900088a4:	f04f 0e00 	movhi.w	lr, #0
900088a8:	f04f 0e01 	movls.w	lr, #1
900088ac:	4584      	cmp	ip, r0
900088ae:	bf38      	it	cc
900088b0:	f04f 0e00 	movcc.w	lr, #0
900088b4:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
900088b8:	4670      	mov	r0, lr
900088ba:	bf94      	ite	ls
900088bc:	2001      	movls	r0, #1
900088be:	2000      	movhi	r0, #0
900088c0:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
900088c4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900088c8:	f04f 0e00 	mov.w	lr, #0
900088cc:	f000 0001 	and.w	r0, r0, #1
900088d0:	bf38      	it	cc
900088d2:	2000      	movcc	r0, #0
900088d4:	900e      	str	r0, [sp, #56]	; 0x38
900088d6:	9804      	ldr	r0, [sp, #16]
900088d8:	4284      	cmp	r4, r0
900088da:	4602      	mov	r2, r0
900088dc:	bf8c      	ite	hi
900088de:	2200      	movhi	r2, #0
900088e0:	2201      	movls	r2, #1
900088e2:	4584      	cmp	ip, r0
900088e4:	bf38      	it	cc
900088e6:	2200      	movcc	r2, #0
900088e8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
900088ec:	920f      	str	r2, [sp, #60]	; 0x3c
900088ee:	bf94      	ite	ls
900088f0:	2201      	movls	r2, #1
900088f2:	2200      	movhi	r2, #0
900088f4:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
900088f8:	f002 0201 	and.w	r2, r2, #1
900088fc:	bf38      	it	cc
900088fe:	2200      	movcc	r2, #0
90008900:	9210      	str	r2, [sp, #64]	; 0x40
90008902:	9a11      	ldr	r2, [sp, #68]	; 0x44
90008904:	4294      	cmp	r4, r2
90008906:	4613      	mov	r3, r2
90008908:	bf8c      	ite	hi
9000890a:	2300      	movhi	r3, #0
9000890c:	2301      	movls	r3, #1
9000890e:	4594      	cmp	ip, r2
90008910:	bf38      	it	cc
90008912:	2300      	movcc	r3, #0
90008914:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90008918:	9311      	str	r3, [sp, #68]	; 0x44
9000891a:	bf94      	ite	ls
9000891c:	2301      	movls	r3, #1
9000891e:	2300      	movhi	r3, #0
90008920:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90008924:	f003 0301 	and.w	r3, r3, #1
90008928:	bf38      	it	cc
9000892a:	2300      	movcc	r3, #0
9000892c:	9312      	str	r3, [sp, #72]	; 0x48
9000892e:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90008932:	429c      	cmp	r4, r3
90008934:	bf8c      	ite	hi
90008936:	2200      	movhi	r2, #0
90008938:	2201      	movls	r2, #1
9000893a:	459c      	cmp	ip, r3
9000893c:	bf38      	it	cc
9000893e:	2200      	movcc	r2, #0
90008940:	9204      	str	r2, [sp, #16]
90008942:	e014      	b.n	9000896e <BSP_I2C4_Init+0x292>
90008944:	2400d158 	.word	0x2400d158
90008948:	2400db60 	.word	0x2400db60
9000894c:	58001c00 	.word	0x58001c00
90008950:	58024400 	.word	0x58024400
90008954:	58020c00 	.word	0x58020c00
90008958:	3b9aca00 	.word	0x3b9aca00
9000895c:	2400db5c 	.word	0x2400db5c
90008960:	2400d15c 	.word	0x2400d15c
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008964:	f1be 0f10 	cmp.w	lr, #16
90008968:	44b8      	add	r8, r7
9000896a:	f000 826c 	beq.w	90008e46 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
9000896e:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90008972:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90008974:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90008978:	d3f4      	bcc.n	90008964 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000897a:	ebbb 0205 	subs.w	r2, fp, r5
9000897e:	bf18      	it	ne
90008980:	2201      	movne	r2, #1
90008982:	2c00      	cmp	r4, #0
90008984:	bf18      	it	ne
90008986:	2200      	movne	r2, #0
90008988:	2a00      	cmp	r2, #0
9000898a:	f040 824a 	bne.w	90008e22 <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000898e:	45bc      	cmp	ip, r7
90008990:	bf34      	ite	cc
90008992:	2200      	movcc	r2, #0
90008994:	2201      	movcs	r2, #1
90008996:	42bc      	cmp	r4, r7
90008998:	bf88      	it	hi
9000899a:	2200      	movhi	r2, #0
            if(presc != prev_presc)
9000899c:	45ab      	cmp	fp, r5
9000899e:	bf0c      	ite	eq
900089a0:	2200      	moveq	r2, #0
900089a2:	f002 0201 	andne.w	r2, r2, #1
900089a6:	2a00      	cmp	r2, #0
900089a8:	f000 80fd 	beq.w	90008ba6 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089ac:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900089b0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089b4:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089b6:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089ba:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089be:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089c2:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089c4:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900089c6:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089c8:	f200 81a5 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
900089cc:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900089ce:	9906      	ldr	r1, [sp, #24]
900089d0:	45ab      	cmp	fp, r5
900089d2:	bf0c      	ite	eq
900089d4:	2100      	moveq	r1, #0
900089d6:	f001 0101 	andne.w	r1, r1, #1
900089da:	2900      	cmp	r1, #0
900089dc:	f000 80ff 	beq.w	90008bde <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089e0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900089e4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089e8:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089ea:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089ee:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089f2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089f6:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089f8:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900089fa:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089fc:	f200 818b 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008a00:	460a      	mov	r2, r1
90008a02:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a04:	9908      	ldr	r1, [sp, #32]
90008a06:	45ab      	cmp	fp, r5
90008a08:	bf0c      	ite	eq
90008a0a:	2100      	moveq	r1, #0
90008a0c:	f001 0101 	andne.w	r1, r1, #1
90008a10:	2900      	cmp	r1, #0
90008a12:	f000 80ff 	beq.w	90008c14 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a16:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a1a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a1e:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a20:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a24:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a28:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a2c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a2e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a30:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a32:	f200 8170 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008a36:	460a      	mov	r2, r1
90008a38:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008a3c:	45ab      	cmp	fp, r5
90008a3e:	bf0c      	ite	eq
90008a40:	2100      	moveq	r1, #0
90008a42:	f001 0101 	andne.w	r1, r1, #1
90008a46:	2900      	cmp	r1, #0
90008a48:	f000 80fe 	beq.w	90008c48 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a4c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a50:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a54:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a56:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a5a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a5e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a62:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a64:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a66:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a68:	f200 8155 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008a6c:	460a      	mov	r2, r1
90008a6e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a70:	990d      	ldr	r1, [sp, #52]	; 0x34
90008a72:	45ab      	cmp	fp, r5
90008a74:	bf0c      	ite	eq
90008a76:	2100      	moveq	r1, #0
90008a78:	f001 0101 	andne.w	r1, r1, #1
90008a7c:	2900      	cmp	r1, #0
90008a7e:	f000 80fd 	beq.w	90008c7c <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a82:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a86:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a8a:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a8c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a90:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a94:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a98:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a9a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a9c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a9e:	f200 813a 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008aa2:	460a      	mov	r2, r1
90008aa4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008aa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
90008aa8:	45ab      	cmp	fp, r5
90008aaa:	bf0c      	ite	eq
90008aac:	2100      	moveq	r1, #0
90008aae:	f001 0101 	andne.w	r1, r1, #1
90008ab2:	2900      	cmp	r1, #0
90008ab4:	f000 80fc 	beq.w	90008cb0 <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ab8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008abc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ac0:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ac2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ac6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008aca:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ace:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ad0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ad2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ad4:	f200 811f 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008ad8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008ada:	9e11      	ldr	r6, [sp, #68]	; 0x44
90008adc:	455d      	cmp	r5, fp
90008ade:	bf0c      	ite	eq
90008ae0:	2600      	moveq	r6, #0
90008ae2:	f006 0601 	andne.w	r6, r6, #1
90008ae6:	2e00      	cmp	r6, #0
90008ae8:	f000 80fb 	beq.w	90008ce2 <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008aec:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008af0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008af4:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008af6:	4650      	mov	r0, sl
90008af8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008afc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b00:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008b04:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b06:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b08:	f200 8105 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008b0c:	4631      	mov	r1, r6
90008b0e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008b10:	9e04      	ldr	r6, [sp, #16]
90008b12:	455d      	cmp	r5, fp
90008b14:	bf0c      	ite	eq
90008b16:	2600      	moveq	r6, #0
90008b18:	f006 0601 	andne.w	r6, r6, #1
90008b1c:	2e00      	cmp	r6, #0
90008b1e:	f000 817c 	beq.w	90008e1a <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b22:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008b26:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b2a:	4650      	mov	r0, sl
90008b2c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90008b30:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b34:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008b38:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b3a:	f04f 030f 	mov.w	r3, #15
90008b3e:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b40:	f200 80e9 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008b44:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90008b46:	e70d      	b.n	90008964 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90008b48:	9a07      	ldr	r2, [sp, #28]
90008b4a:	9b08      	ldr	r3, [sp, #32]
90008b4c:	3214      	adds	r2, #20
90008b4e:	3301      	adds	r3, #1
90008b50:	9207      	str	r2, [sp, #28]
90008b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90008b54:	9308      	str	r3, [sp, #32]
90008b56:	4293      	cmp	r3, r2
90008b58:	f040 80ff 	bne.w	90008d5a <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
90008b5c:	297f      	cmp	r1, #127	; 0x7f
90008b5e:	d818      	bhi.n	90008b92 <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008b60:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90008b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008b66:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90008b6a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008b6e:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90008b70:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008b72:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008b74:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008b78:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008b7c:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008b80:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90008b82:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008b84:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90008b86:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008b8a:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008b8c:	430b      	orrs	r3, r1
90008b8e:	4313      	orrs	r3, r2
90008b90:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008b92:	9903      	ldr	r1, [sp, #12]
90008b94:	48b5      	ldr	r0, [pc, #724]	; (90008e6c <BSP_I2C4_Init+0x790>)
90008b96:	f7ff fd81 	bl	9000869c <MX_I2C4_Init>
90008b9a:	2800      	cmp	r0, #0
90008b9c:	f43f ada8 	beq.w	900086f0 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
90008ba0:	f06f 0007 	mvn.w	r0, #7
  return ret;
90008ba4:	e5a5      	b.n	900086f2 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
90008ba6:	4632      	mov	r2, r6
90008ba8:	9905      	ldr	r1, [sp, #20]
90008baa:	45ab      	cmp	fp, r5
90008bac:	bf0c      	ite	eq
90008bae:	2100      	moveq	r1, #0
90008bb0:	f001 0101 	andne.w	r1, r1, #1
90008bb4:	2900      	cmp	r1, #0
90008bb6:	f43f af0a 	beq.w	900089ce <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bba:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008bbe:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bc2:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bc4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bc8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bcc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bd0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bd2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008bd4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bd6:	f200 809e 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008bda:	460a      	mov	r2, r1
90008bdc:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008bde:	9907      	ldr	r1, [sp, #28]
90008be0:	45ab      	cmp	fp, r5
90008be2:	bf0c      	ite	eq
90008be4:	2100      	moveq	r1, #0
90008be6:	f001 0101 	andne.w	r1, r1, #1
90008bea:	2900      	cmp	r1, #0
90008bec:	f43f af0a 	beq.w	90008a04 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bf0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008bf4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bf8:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bfa:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bfe:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c02:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c06:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c08:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c0a:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c0c:	f200 8083 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008c10:	460a      	mov	r2, r1
90008c12:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008c14:	9909      	ldr	r1, [sp, #36]	; 0x24
90008c16:	45ab      	cmp	fp, r5
90008c18:	bf0c      	ite	eq
90008c1a:	2100      	moveq	r1, #0
90008c1c:	f001 0101 	andne.w	r1, r1, #1
90008c20:	2900      	cmp	r1, #0
90008c22:	f43f af0a 	beq.w	90008a3a <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c26:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c2a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c2e:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c30:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c34:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c38:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c3c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c3e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c40:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c42:	d868      	bhi.n	90008d16 <BSP_I2C4_Init+0x63a>
90008c44:	460a      	mov	r2, r1
90008c46:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008c48:	990c      	ldr	r1, [sp, #48]	; 0x30
90008c4a:	45ab      	cmp	fp, r5
90008c4c:	bf0c      	ite	eq
90008c4e:	2100      	moveq	r1, #0
90008c50:	f001 0101 	andne.w	r1, r1, #1
90008c54:	2900      	cmp	r1, #0
90008c56:	f43f af0b 	beq.w	90008a70 <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c5a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c5e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c62:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c64:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c68:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c6c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c70:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c72:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c74:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c76:	d84e      	bhi.n	90008d16 <BSP_I2C4_Init+0x63a>
90008c78:	460a      	mov	r2, r1
90008c7a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008c7c:	990e      	ldr	r1, [sp, #56]	; 0x38
90008c7e:	45ab      	cmp	fp, r5
90008c80:	bf0c      	ite	eq
90008c82:	2100      	moveq	r1, #0
90008c84:	f001 0101 	andne.w	r1, r1, #1
90008c88:	2900      	cmp	r1, #0
90008c8a:	f43f af0c 	beq.w	90008aa6 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c8e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c92:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c96:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c98:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c9c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ca0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ca4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ca6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ca8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008caa:	d834      	bhi.n	90008d16 <BSP_I2C4_Init+0x63a>
90008cac:	460a      	mov	r2, r1
90008cae:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008cb0:	9910      	ldr	r1, [sp, #64]	; 0x40
90008cb2:	45ab      	cmp	fp, r5
90008cb4:	bf0c      	ite	eq
90008cb6:	2100      	moveq	r1, #0
90008cb8:	f001 0101 	andne.w	r1, r1, #1
90008cbc:	2900      	cmp	r1, #0
90008cbe:	f000 80ae 	beq.w	90008e1e <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cc2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008cc6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008cca:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ccc:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008cd0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cd4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008cd8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cda:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008cdc:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008cde:	d81a      	bhi.n	90008d16 <BSP_I2C4_Init+0x63a>
90008ce0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008ce2:	9e12      	ldr	r6, [sp, #72]	; 0x48
90008ce4:	455d      	cmp	r5, fp
90008ce6:	bf0c      	ite	eq
90008ce8:	2600      	moveq	r6, #0
90008cea:	f006 0601 	andne.w	r6, r6, #1
90008cee:	2e00      	cmp	r6, #0
90008cf0:	f43f af0e 	beq.w	90008b10 <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cf4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008cf8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cfc:	4650      	mov	r0, sl
90008cfe:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90008d02:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008d06:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008d0a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008d0c:	f04f 030e 	mov.w	r3, #14
90008d10:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008d12:	f67f af17 	bls.w	90008b44 <BSP_I2C4_Init+0x468>
90008d16:	4b56      	ldr	r3, [pc, #344]	; (90008e70 <BSP_I2C4_Init+0x794>)
90008d18:	900b      	str	r0, [sp, #44]	; 0x2c
90008d1a:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90008d1e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90008d22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90008d24:	f240 4201 	movw	r2, #1025	; 0x401
90008d28:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008d2c:	f640 1ac4 	movw	sl, #2500	; 0x9c4
90008d30:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008d32:	f240 4b12 	movw	fp, #1042	; 0x412
90008d36:	920d      	str	r2, [sp, #52]	; 0x34
90008d38:	9a02      	ldr	r2, [sp, #8]
90008d3a:	4296      	cmp	r6, r2
90008d3c:	bf38      	it	cc
90008d3e:	4616      	movcc	r6, r2
90008d40:	4a4c      	ldr	r2, [pc, #304]	; (90008e74 <BSP_I2C4_Init+0x798>)
90008d42:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008d44:	2200      	movs	r2, #0
90008d46:	9208      	str	r2, [sp, #32]
90008d48:	f04f 32ff 	mov.w	r2, #4294967295
90008d4c:	4611      	mov	r1, r2
90008d4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
90008d52:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90008d56:	920c      	str	r2, [sp, #48]	; 0x30
90008d58:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90008d5a:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90008d5c:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90008d60:	6818      	ldr	r0, [r3, #0]
90008d62:	9b02      	ldr	r3, [sp, #8]
90008d64:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90008d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90008d6a:	1a1b      	subs	r3, r3, r0
90008d6c:	ea4f 0943 	mov.w	r9, r3, lsl #1
90008d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90008d72:	eb03 0e00 	add.w	lr, r3, r0
90008d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90008d78:	4403      	add	r3, r0
90008d7a:	9309      	str	r3, [sp, #36]	; 0x24
90008d7c:	e006      	b.n	90008d8c <BSP_I2C4_Init+0x6b0>
90008d7e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90008d82:	4486      	add	lr, r0
90008d84:	eba9 0900 	sub.w	r9, r9, r0
90008d88:	f43f aede 	beq.w	90008b48 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90008d8c:	f240 5214 	movw	r2, #1300	; 0x514
90008d90:	f8cd 8004 	str.w	r8, [sp, #4]
90008d94:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008d98:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90008d9c:	4596      	cmp	lr, r2
90008d9e:	d9ee      	bls.n	90008d7e <BSP_I2C4_Init+0x6a2>
90008da0:	9a02      	ldr	r2, [sp, #8]
90008da2:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90008da6:	d2ea      	bcs.n	90008d7e <BSP_I2C4_Init+0x6a2>
90008da8:	f640 0c34 	movw	ip, #2100	; 0x834
90008dac:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008dae:	f8cd 9018 	str.w	r9, [sp, #24]
90008db2:	2200      	movs	r2, #0
90008db4:	ebac 0c03 	sub.w	ip, ip, r3
90008db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90008dba:	4689      	mov	r9, r1
90008dbc:	4473      	add	r3, lr
90008dbe:	e9cd e804 	strd	lr, r8, [sp, #16]
90008dc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
90008dc6:	f8dd e01c 	ldr.w	lr, [sp, #28]
90008dca:	e005      	b.n	90008dd8 <BSP_I2C4_Init+0x6fc>
90008dcc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90008dd0:	4403      	add	r3, r0
90008dd2:	eba4 0400 	sub.w	r4, r4, r0
90008dd6:	d01a      	beq.n	90008e0e <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008dd8:	eb0c 0103 	add.w	r1, ip, r3
90008ddc:	4617      	mov	r7, r2
90008dde:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90008de2:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008de4:	42b1      	cmp	r1, r6
90008de6:	d9f1      	bls.n	90008dcc <BSP_I2C4_Init+0x6f0>
90008de8:	455d      	cmp	r5, fp
90008dea:	d8ef      	bhi.n	90008dcc <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90008dec:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90008df0:	bf28      	it	cs
90008df2:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90008df4:	458a      	cmp	sl, r1
90008df6:	d9e9      	bls.n	90008dcc <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90008df8:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008dfa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90008dfe:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90008e00:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008e02:	4403      	add	r3, r0
90008e04:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90008e08:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008e0c:	d1e4      	bne.n	90008dd8 <BSP_I2C4_Init+0x6fc>
90008e0e:	4649      	mov	r1, r9
90008e10:	f8dd 9018 	ldr.w	r9, [sp, #24]
90008e14:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90008e18:	e7b1      	b.n	90008d7e <BSP_I2C4_Init+0x6a2>
90008e1a:	460e      	mov	r6, r1
90008e1c:	e5a2      	b.n	90008964 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90008e1e:	4611      	mov	r1, r2
90008e20:	e65b      	b.n	90008ada <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008e22:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008e26:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008e2a:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008e2c:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008e30:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008e34:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008e38:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008e3a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008e3c:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008e3e:	f63f af6a 	bhi.w	90008d16 <BSP_I2C4_Init+0x63a>
90008e42:	46ab      	mov	fp, r5
90008e44:	e6b0      	b.n	90008ba8 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90008e46:	3501      	adds	r5, #1
90008e48:	9b02      	ldr	r3, [sp, #8]
90008e4a:	2d10      	cmp	r5, #16
90008e4c:	441f      	add	r7, r3
90008e4e:	f47f acc7 	bne.w	900087e0 <BSP_I2C4_Init+0x104>
90008e52:	b126      	cbz	r6, 90008e5e <BSP_I2C4_Init+0x782>
90008e54:	4b06      	ldr	r3, [pc, #24]	; (90008e70 <BSP_I2C4_Init+0x794>)
90008e56:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90008e5a:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90008e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90008e60:	2b00      	cmp	r3, #0
90008e62:	f43f ae96 	beq.w	90008b92 <BSP_I2C4_Init+0x4b6>
90008e66:	4b03      	ldr	r3, [pc, #12]	; (90008e74 <BSP_I2C4_Init+0x798>)
90008e68:	930b      	str	r3, [sp, #44]	; 0x2c
90008e6a:	e75a      	b.n	90008d22 <BSP_I2C4_Init+0x646>
90008e6c:	2400db60 	.word	0x2400db60
90008e70:	2400db5c 	.word	0x2400db5c
90008e74:	2400d15c 	.word	0x2400d15c

90008e78 <BSP_I2C4_WriteReg>:
{
90008e78:	b530      	push	{r4, r5, lr}
90008e7a:	4614      	mov	r4, r2
90008e7c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90008e7e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90008e82:	460a      	mov	r2, r1
90008e84:	9301      	str	r3, [sp, #4]
90008e86:	4601      	mov	r1, r0
90008e88:	2301      	movs	r3, #1
90008e8a:	4809      	ldr	r0, [pc, #36]	; (90008eb0 <BSP_I2C4_WriteReg+0x38>)
90008e8c:	9502      	str	r5, [sp, #8]
90008e8e:	9400      	str	r4, [sp, #0]
90008e90:	f001 f958 	bl	9000a144 <HAL_I2C_Mem_Write>
90008e94:	b908      	cbnz	r0, 90008e9a <BSP_I2C4_WriteReg+0x22>
}
90008e96:	b005      	add	sp, #20
90008e98:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90008e9a:	4805      	ldr	r0, [pc, #20]	; (90008eb0 <BSP_I2C4_WriteReg+0x38>)
90008e9c:	f001 fbf4 	bl	9000a688 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90008ea0:	2804      	cmp	r0, #4
90008ea2:	bf0c      	ite	eq
90008ea4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90008ea8:	f06f 0003 	mvnne.w	r0, #3
90008eac:	e7f3      	b.n	90008e96 <BSP_I2C4_WriteReg+0x1e>
90008eae:	bf00      	nop
90008eb0:	2400db60 	.word	0x2400db60

90008eb4 <BSP_I2C4_ReadReg>:
{
90008eb4:	b530      	push	{r4, r5, lr}
90008eb6:	4614      	mov	r4, r2
90008eb8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90008eba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90008ebe:	460a      	mov	r2, r1
90008ec0:	9301      	str	r3, [sp, #4]
90008ec2:	4601      	mov	r1, r0
90008ec4:	2301      	movs	r3, #1
90008ec6:	4809      	ldr	r0, [pc, #36]	; (90008eec <BSP_I2C4_ReadReg+0x38>)
90008ec8:	9502      	str	r5, [sp, #8]
90008eca:	9400      	str	r4, [sp, #0]
90008ecc:	f001 fa6e 	bl	9000a3ac <HAL_I2C_Mem_Read>
90008ed0:	b908      	cbnz	r0, 90008ed6 <BSP_I2C4_ReadReg+0x22>
}
90008ed2:	b005      	add	sp, #20
90008ed4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90008ed6:	4805      	ldr	r0, [pc, #20]	; (90008eec <BSP_I2C4_ReadReg+0x38>)
90008ed8:	f001 fbd6 	bl	9000a688 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90008edc:	2804      	cmp	r0, #4
90008ede:	bf0c      	ite	eq
90008ee0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90008ee4:	f06f 0003 	mvnne.w	r0, #3
90008ee8:	e7f3      	b.n	90008ed2 <BSP_I2C4_ReadReg+0x1e>
90008eea:	bf00      	nop
90008eec:	2400db60 	.word	0x2400db60

90008ef0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90008ef0:	f000 baaa 	b.w	90009448 <HAL_GetTick>

90008ef4 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90008ef4:	b970      	cbnz	r0, 90008f14 <BSP_SDRAM_DeInit+0x20>
{
90008ef6:	b510      	push	{r4, lr}
90008ef8:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90008efa:	4808      	ldr	r0, [pc, #32]	; (90008f1c <BSP_SDRAM_DeInit+0x28>)
90008efc:	f005 f876 	bl	9000dfec <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90008f00:	207a      	movs	r0, #122	; 0x7a
90008f02:	f000 fb0b 	bl	9000951c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90008f06:	4b06      	ldr	r3, [pc, #24]	; (90008f20 <BSP_SDRAM_DeInit+0x2c>)
90008f08:	4806      	ldr	r0, [pc, #24]	; (90008f24 <BSP_SDRAM_DeInit+0x30>)
90008f0a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90008f0c:	f003 f98e 	bl	9000c22c <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90008f10:	4620      	mov	r0, r4
}
90008f12:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90008f14:	f06f 0001 	mvn.w	r0, #1
}
90008f18:	4770      	bx	lr
90008f1a:	bf00      	nop
90008f1c:	2400dbb4 	.word	0x2400dbb4
90008f20:	52000040 	.word	0x52000040
90008f24:	2400dbe8 	.word	0x2400dbe8

90008f28 <MX_SDRAM_BANK2_Init>:
{
90008f28:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90008f2a:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90008f2c:	2200      	movs	r2, #0
{
90008f2e:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90008f30:	4c13      	ldr	r4, [pc, #76]	; (90008f80 <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90008f32:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90008f34:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90008f36:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90008f38:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90008f3a:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90008f3c:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90008f3e:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90008f40:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90008f44:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90008f46:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90008f48:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90008f4a:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90008f4c:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90008f52:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008f54:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90008f58:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90008f5a:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008f5c:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90008f60:	2204      	movs	r2, #4
90008f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90008f66:	2202      	movs	r2, #2
90008f68:	2302      	movs	r3, #2
90008f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90008f6e:	4b05      	ldr	r3, [pc, #20]	; (90008f84 <MX_SDRAM_BANK2_Init+0x5c>)
90008f70:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90008f72:	f005 f811 	bl	9000df98 <HAL_SDRAM_Init>
}
90008f76:	3800      	subs	r0, #0
90008f78:	bf18      	it	ne
90008f7a:	2001      	movne	r0, #1
90008f7c:	b009      	add	sp, #36	; 0x24
90008f7e:	bd30      	pop	{r4, r5, pc}
90008f80:	2400dbb4 	.word	0x2400dbb4
90008f84:	52004140 	.word	0x52004140

90008f88 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90008f88:	2800      	cmp	r0, #0
90008f8a:	f040 80d2 	bne.w	90009132 <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90008f8e:	4b6c      	ldr	r3, [pc, #432]	; (90009140 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90008f90:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90008f92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90008f9a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90008f9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90008fa0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90008fa2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008fa6:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90008fa8:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90008fac:	4c65      	ldr	r4, [pc, #404]	; (90009144 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90008fae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90008fb2:	4e65      	ldr	r6, [pc, #404]	; (90009148 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90008fb4:	9201      	str	r2, [sp, #4]
90008fb6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90008fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008fbc:	f042 0201 	orr.w	r2, r2, #1
90008fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90008fc4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008fc8:	f002 0201 	and.w	r2, r2, #1
90008fcc:	9202      	str	r2, [sp, #8]
90008fce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90008fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008fd4:	f042 0208 	orr.w	r2, r2, #8
90008fd8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008fe0:	f002 0208 	and.w	r2, r2, #8
90008fe4:	9203      	str	r2, [sp, #12]
90008fe6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90008fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008fec:	f042 0210 	orr.w	r2, r2, #16
90008ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008ff8:	f002 0210 	and.w	r2, r2, #16
90008ffc:	9204      	str	r2, [sp, #16]
90008ffe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90009000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009004:	f042 0220 	orr.w	r2, r2, #32
90009008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000900c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009010:	f002 0220 	and.w	r2, r2, #32
90009014:	9205      	str	r2, [sp, #20]
90009016:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90009018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000901c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009020:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009028:	f002 0240 	and.w	r2, r2, #64	; 0x40
9000902c:	9206      	str	r2, [sp, #24]
9000902e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90009038:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000903c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90009040:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009042:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009048:	e9cd 0108 	strd	r0, r1, [sp, #32]
9000904c:	2001      	movs	r0, #1
9000904e:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009050:	9307      	str	r3, [sp, #28]
90009052:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009054:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90009058:	a908      	add	r1, sp, #32
9000905a:	483c      	ldr	r0, [pc, #240]	; (9000914c <BSP_SDRAM_Init+0x1c4>)
9000905c:	f000 fc7e 	bl	9000995c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90009060:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90009064:	a908      	add	r1, sp, #32
90009066:	483a      	ldr	r0, [pc, #232]	; (90009150 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90009068:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000906a:	f000 fc77 	bl	9000995c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000906e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90009072:	a908      	add	r1, sp, #32
90009074:	4837      	ldr	r0, [pc, #220]	; (90009154 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90009076:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90009078:	f000 fc70 	bl	9000995c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
9000907c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90009080:	a908      	add	r1, sp, #32
90009082:	4835      	ldr	r0, [pc, #212]	; (90009158 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90009084:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90009086:	f000 fc69 	bl	9000995c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000908a:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000908c:	a908      	add	r1, sp, #32
9000908e:	4833      	ldr	r0, [pc, #204]	; (9000915c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009090:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90009092:	f000 fc63 	bl	9000995c <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90009096:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
9000909c:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
900090a0:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900090a2:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
900090a4:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900090a6:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900090a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900090ac:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900090ae:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900090b0:	4a2b      	ldr	r2, [pc, #172]	; (90009160 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900090b2:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900090b4:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900090b6:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900090b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900090bc:	f640 0308 	movw	r3, #2056	; 0x808
900090c0:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900090c2:	2320      	movs	r3, #32
900090c4:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900090c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900090ca:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900090ce:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
900090d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
900090d4:	f003 f8aa 	bl	9000c22c <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
900090d8:	4620      	mov	r0, r4
900090da:	f003 f82d 	bl	9000c138 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900090de:	462a      	mov	r2, r5
900090e0:	210f      	movs	r1, #15
900090e2:	207a      	movs	r0, #122	; 0x7a
900090e4:	f000 f9ce 	bl	90009484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900090e8:	207a      	movs	r0, #122	; 0x7a
900090ea:	f000 fa09 	bl	90009500 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900090ee:	2210      	movs	r2, #16
900090f0:	2104      	movs	r1, #4
900090f2:	4630      	mov	r0, r6
900090f4:	f7ff ff18 	bl	90008f28 <MX_SDRAM_BANK2_Init>
900090f8:	b9f0      	cbnz	r0, 90009138 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900090fa:	491a      	ldr	r1, [pc, #104]	; (90009164 <BSP_SDRAM_Init+0x1dc>)
900090fc:	2208      	movs	r2, #8
900090fe:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90009100:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90009102:	e9c1 2300 	strd	r2, r3, [r1]
90009106:	f240 6203 	movw	r2, #1539	; 0x603
9000910a:	2300      	movs	r3, #0
9000910c:	e9c1 2302 	strd	r2, r3, [r1, #8]
90009110:	2200      	movs	r2, #0
90009112:	2330      	movs	r3, #48	; 0x30
90009114:	e9c1 2304 	strd	r2, r3, [r1, #16]
90009118:	2200      	movs	r2, #0
9000911a:	f44f 7300 	mov.w	r3, #512	; 0x200
9000911e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90009122:	f7ff fa37 	bl	90008594 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90009126:	2800      	cmp	r0, #0
90009128:	bf18      	it	ne
9000912a:	f06f 0004 	mvnne.w	r0, #4
}
9000912e:	b00e      	add	sp, #56	; 0x38
90009130:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90009132:	f06f 0001 	mvn.w	r0, #1
}
90009136:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90009138:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000913c:	e7f7      	b.n	9000912e <BSP_SDRAM_Init+0x1a6>
9000913e:	bf00      	nop
90009140:	58024400 	.word	0x58024400
90009144:	2400dc54 	.word	0x2400dc54
90009148:	2400dbb4 	.word	0x2400dbb4
9000914c:	58020c00 	.word	0x58020c00
90009150:	58021000 	.word	0x58021000
90009154:	58021400 	.word	0x58021400
90009158:	58021800 	.word	0x58021800
9000915c:	58021c00 	.word	0x58021c00
90009160:	52000040 	.word	0x52000040
90009164:	2400dcc0 	.word	0x2400dcc0

90009168 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90009168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000916c:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
9000916e:	2800      	cmp	r0, #0
90009170:	d16b      	bne.n	9000924a <BSP_TS_Init+0xe2>
90009172:	680b      	ldr	r3, [r1, #0]
90009174:	460c      	mov	r4, r1
90009176:	1e5a      	subs	r2, r3, #1
90009178:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
9000917c:	d265      	bcs.n	9000924a <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000917e:	684a      	ldr	r2, [r1, #4]
90009180:	1e51      	subs	r1, r2, #1
90009182:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90009186:	d260      	bcs.n	9000924a <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90009188:	4293      	cmp	r3, r2
9000918a:	bf28      	it	cs
9000918c:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000918e:	68e2      	ldr	r2, [r4, #12]
90009190:	429a      	cmp	r2, r3
90009192:	d85a      	bhi.n	9000924a <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90009194:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90009196:	4b31      	ldr	r3, [pc, #196]	; (9000925c <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009198:	4d31      	ldr	r5, [pc, #196]	; (90009260 <BSP_TS_Init+0xf8>)
9000919a:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
9000919c:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
900091a0:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900091a2:	4a30      	ldr	r2, [pc, #192]	; (90009264 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900091a4:	4b30      	ldr	r3, [pc, #192]	; (90009268 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900091a6:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900091a8:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900091aa:	4a30      	ldr	r2, [pc, #192]	; (9000926c <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
900091ac:	4b30      	ldr	r3, [pc, #192]	; (90009270 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
900091ae:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900091b0:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900091b2:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
900091b4:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900091b6:	f7ff f93f 	bl	90008438 <FT5336_RegisterBusIO>
900091ba:	2800      	cmp	r0, #0
900091bc:	d14b      	bne.n	90009256 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
900091be:	a901      	add	r1, sp, #4
900091c0:	4628      	mov	r0, r5
900091c2:	f7ff f82f 	bl	90008224 <FT5336_ReadID>
900091c6:	2800      	cmp	r0, #0
900091c8:	d145      	bne.n	90009256 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
900091ca:	9b01      	ldr	r3, [sp, #4]
900091cc:	2b51      	cmp	r3, #81	; 0x51
900091ce:	d142      	bne.n	90009256 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900091d0:	4b28      	ldr	r3, [pc, #160]	; (90009274 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900091d2:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
900091d4:	4f28      	ldr	r7, [pc, #160]	; (90009278 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900091d6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90009280 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
900091da:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900091dc:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900091e0:	681b      	ldr	r3, [r3, #0]
900091e2:	4798      	blx	r3
900091e4:	4606      	mov	r6, r0
900091e6:	2800      	cmp	r0, #0
900091e8:	d135      	bne.n	90009256 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900091ea:	4d24      	ldr	r5, [pc, #144]	; (9000927c <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900091ec:	a902      	add	r1, sp, #8
900091ee:	6838      	ldr	r0, [r7, #0]
900091f0:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900091f4:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900091f8:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900091fa:	e9c5 7200 	strd	r7, r2, [r5]
900091fe:	68a2      	ldr	r2, [r4, #8]
90009200:	60aa      	str	r2, [r5, #8]
90009202:	68e2      	ldr	r2, [r4, #12]
90009204:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009206:	4798      	blx	r3
90009208:	2800      	cmp	r0, #0
9000920a:	db18      	blt.n	9000923e <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
9000920c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90009210:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009214:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009216:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000921a:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000921c:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000921e:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009220:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009222:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009226:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000922a:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000922c:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000922e:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009230:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009232:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009234:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90009236:	4630      	mov	r0, r6
90009238:	b008      	add	sp, #32
9000923a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000923e:	f06f 0604 	mvn.w	r6, #4
}
90009242:	4630      	mov	r0, r6
90009244:	b008      	add	sp, #32
90009246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
9000924a:	f06f 0601 	mvn.w	r6, #1
}
9000924e:	4630      	mov	r0, r6
90009250:	b008      	add	sp, #32
90009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90009256:	f04f 36ff 	mov.w	r6, #4294967295
9000925a:	e7ec      	b.n	90009236 <BSP_TS_Init+0xce>
9000925c:	900086dd 	.word	0x900086dd
90009260:	2400dce0 	.word	0x2400dce0
90009264:	90008649 	.word	0x90008649
90009268:	90008eb5 	.word	0x90008eb5
9000926c:	90008e79 	.word	0x90008e79
90009270:	90008ef1 	.word	0x90008ef1
90009274:	24000024 	.word	0x24000024
90009278:	2400dd08 	.word	0x2400dd08
9000927c:	2400dd0c 	.word	0x2400dd0c
90009280:	2400dd4c 	.word	0x2400dd4c

90009284 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90009284:	2800      	cmp	r0, #0
90009286:	d157      	bne.n	90009338 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009288:	4b2d      	ldr	r3, [pc, #180]	; (90009340 <BSP_TS_GetState+0xbc>)
9000928a:	4a2e      	ldr	r2, [pc, #184]	; (90009344 <BSP_TS_GetState+0xc0>)
9000928c:	681b      	ldr	r3, [r3, #0]
9000928e:	6810      	ldr	r0, [r2, #0]
90009290:	691b      	ldr	r3, [r3, #16]
{
90009292:	b5f0      	push	{r4, r5, r6, r7, lr}
90009294:	b085      	sub	sp, #20
90009296:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009298:	a901      	add	r1, sp, #4
9000929a:	4798      	blx	r3
9000929c:	2800      	cmp	r0, #0
9000929e:	db41      	blt.n	90009324 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
900092a0:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900092a2:	4b29      	ldr	r3, [pc, #164]	; (90009348 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
900092a4:	b93d      	cbnz	r5, 900092b6 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900092a6:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
900092a8:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
900092ac:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900092ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900092b2:	b005      	add	sp, #20
900092b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900092b6:	6898      	ldr	r0, [r3, #8]
900092b8:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
900092ba:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900092be:	d435      	bmi.n	9000932c <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
900092c0:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
900092c2:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
900092c4:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
900092c6:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
900092ca:	bf1c      	itt	ne
900092cc:	f106 32ff 	addne.w	r2, r6, #4294967295
900092d0:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
900092d4:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
900092d8:	6958      	ldr	r0, [r3, #20]
900092da:	bf18      	it	ne
900092dc:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
900092de:	681f      	ldr	r7, [r3, #0]
900092e0:	fb07 f202 	mul.w	r2, r7, r2
900092e4:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900092e8:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
900092ea:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900092ec:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
900092f0:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
900092f2:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900092f4:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
900092f6:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900092f8:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900092fc:	bf8c      	ite	hi
900092fe:	1b90      	subhi	r0, r2, r6
90009300:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90009302:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009304:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90009306:	bf8c      	ite	hi
90009308:	1b4f      	subhi	r7, r1, r5
9000930a:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000930c:	42b8      	cmp	r0, r7
9000930e:	bf38      	it	cc
90009310:	4638      	movcc	r0, r7
90009312:	68df      	ldr	r7, [r3, #12]
90009314:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90009316:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000931a:	d20a      	bcs.n	90009332 <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
9000931c:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
9000931e:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90009320:	b005      	add	sp, #20
90009322:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90009324:	f06f 0004 	mvn.w	r0, #4
}
90009328:	b005      	add	sp, #20
9000932a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
9000932c:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
9000932e:	463a      	mov	r2, r7
90009330:	e7c8      	b.n	900092c4 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90009332:	e9c4 6501 	strd	r6, r5, [r4, #4]
90009336:	e7bc      	b.n	900092b2 <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90009338:	f06f 0001 	mvn.w	r0, #1
}
9000933c:	4770      	bx	lr
9000933e:	bf00      	nop
90009340:	2400dd4c 	.word	0x2400dd4c
90009344:	2400dd08 	.word	0x2400dd08
90009348:	2400dd0c 	.word	0x2400dd0c

9000934c <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
9000934c:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000934e:	4c19      	ldr	r4, [pc, #100]	; (900093b4 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90009350:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90009352:	4b19      	ldr	r3, [pc, #100]	; (900093b8 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90009354:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90009358:	4818      	ldr	r0, [pc, #96]	; (900093bc <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000935a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000935e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90009362:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90009364:	4c16      	ldr	r4, [pc, #88]	; (900093c0 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90009366:	f041 0101 	orr.w	r1, r1, #1
9000936a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
9000936c:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
9000936e:	6819      	ldr	r1, [r3, #0]
90009370:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90009372:	4914      	ldr	r1, [pc, #80]	; (900093c4 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90009374:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90009376:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90009378:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
9000937a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
9000937c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
9000937e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90009380:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90009382:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90009384:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90009386:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90009388:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
9000938a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
9000938c:	6818      	ldr	r0, [r3, #0]
9000938e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90009392:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90009394:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90009396:	6823      	ldr	r3, [r4, #0]
90009398:	4019      	ands	r1, r3
9000939a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000939e:	d203      	bcs.n	900093a8 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900093a0:	4b09      	ldr	r3, [pc, #36]	; (900093c8 <SystemInit+0x7c>)
900093a2:	2201      	movs	r2, #1
900093a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900093a8:	4a08      	ldr	r2, [pc, #32]	; (900093cc <SystemInit+0x80>)
900093aa:	4b02      	ldr	r3, [pc, #8]	; (900093b4 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
900093ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900093b0:	609a      	str	r2, [r3, #8]
}
900093b2:	4770      	bx	lr
900093b4:	e000ed00 	.word	0xe000ed00
900093b8:	58024400 	.word	0x58024400
900093bc:	eaf6ed7f 	.word	0xeaf6ed7f
900093c0:	5c001000 	.word	0x5c001000
900093c4:	ffff0000 	.word	0xffff0000
900093c8:	51008000 	.word	0x51008000
900093cc:	90000000 	.word	0x90000000

900093d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900093d0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900093d2:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093d4:	4c12      	ldr	r4, [pc, #72]	; (90009420 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900093d6:	f000 f843 	bl	90009460 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900093da:	f003 fc65 	bl	9000cca8 <HAL_RCC_GetSysClockFreq>
900093de:	4b11      	ldr	r3, [pc, #68]	; (90009424 <HAL_Init+0x54>)
900093e0:	4911      	ldr	r1, [pc, #68]	; (90009428 <HAL_Init+0x58>)
900093e2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093e4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900093e6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093ea:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900093ee:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093f0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900093f2:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900093f6:	490d      	ldr	r1, [pc, #52]	; (9000942c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093f8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900093fc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900093fe:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90009402:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009404:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009406:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009408:	f7fb fc76 	bl	90004cf8 <HAL_InitTick>
9000940c:	b110      	cbz	r0, 90009414 <HAL_Init+0x44>
  {
    return HAL_ERROR;
9000940e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90009410:	4620      	mov	r0, r4
90009412:	bd10      	pop	{r4, pc}
90009414:	4604      	mov	r4, r0
  HAL_MspInit();
90009416:	f7fb fa2d 	bl	90004874 <HAL_MspInit>
}
9000941a:	4620      	mov	r0, r4
9000941c:	bd10      	pop	{r4, pc}
9000941e:	bf00      	nop
90009420:	24000058 	.word	0x24000058
90009424:	58024400 	.word	0x58024400
90009428:	9002b2a8 	.word	0x9002b2a8
9000942c:	24000054 	.word	0x24000054

90009430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90009430:	4a03      	ldr	r2, [pc, #12]	; (90009440 <HAL_IncTick+0x10>)
90009432:	4b04      	ldr	r3, [pc, #16]	; (90009444 <HAL_IncTick+0x14>)
90009434:	6811      	ldr	r1, [r2, #0]
90009436:	781b      	ldrb	r3, [r3, #0]
90009438:	440b      	add	r3, r1
9000943a:	6013      	str	r3, [r2, #0]
}
9000943c:	4770      	bx	lr
9000943e:	bf00      	nop
90009440:	2400dd50 	.word	0x2400dd50
90009444:	2400005c 	.word	0x2400005c

90009448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90009448:	4b01      	ldr	r3, [pc, #4]	; (90009450 <HAL_GetTick+0x8>)
9000944a:	6818      	ldr	r0, [r3, #0]
}
9000944c:	4770      	bx	lr
9000944e:	bf00      	nop
90009450:	2400dd50 	.word	0x2400dd50

90009454 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90009454:	4b01      	ldr	r3, [pc, #4]	; (9000945c <HAL_GetREVID+0x8>)
90009456:	6818      	ldr	r0, [r3, #0]
}
90009458:	0c00      	lsrs	r0, r0, #16
9000945a:	4770      	bx	lr
9000945c:	5c001000 	.word	0x5c001000

90009460 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90009460:	4906      	ldr	r1, [pc, #24]	; (9000947c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90009462:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90009466:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90009468:	4b05      	ldr	r3, [pc, #20]	; (90009480 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000946a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000946c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90009470:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90009474:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90009476:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90009478:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
9000947a:	4770      	bx	lr
9000947c:	e000ed00 	.word	0xe000ed00
90009480:	05fa0000 	.word	0x05fa0000

90009484 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90009484:	4b1b      	ldr	r3, [pc, #108]	; (900094f4 <HAL_NVIC_SetPriority+0x70>)
90009486:	68db      	ldr	r3, [r3, #12]
90009488:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000948c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000948e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009492:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90009496:	f1be 0f04 	cmp.w	lr, #4
9000949a:	bf28      	it	cs
9000949c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900094a0:	f1bc 0f06 	cmp.w	ip, #6
900094a4:	d91a      	bls.n	900094dc <HAL_NVIC_SetPriority+0x58>
900094a6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900094a8:	f04f 3cff 	mov.w	ip, #4294967295
900094ac:	fa0c fc03 	lsl.w	ip, ip, r3
900094b0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900094b4:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
900094b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900094ba:	fa0c fc0e 	lsl.w	ip, ip, lr
900094be:	ea21 010c 	bic.w	r1, r1, ip
900094c2:	fa01 f103 	lsl.w	r1, r1, r3
900094c6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
900094ca:	db0a      	blt.n	900094e2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900094cc:	0109      	lsls	r1, r1, #4
900094ce:	4b0a      	ldr	r3, [pc, #40]	; (900094f8 <HAL_NVIC_SetPriority+0x74>)
900094d0:	b2c9      	uxtb	r1, r1
900094d2:	4403      	add	r3, r0
900094d4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
900094d8:	f85d fb04 	ldr.w	pc, [sp], #4
900094dc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900094de:	4613      	mov	r3, r2
900094e0:	e7e8      	b.n	900094b4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900094e2:	f000 000f 	and.w	r0, r0, #15
900094e6:	0109      	lsls	r1, r1, #4
900094e8:	4b04      	ldr	r3, [pc, #16]	; (900094fc <HAL_NVIC_SetPriority+0x78>)
900094ea:	b2c9      	uxtb	r1, r1
900094ec:	4403      	add	r3, r0
900094ee:	7619      	strb	r1, [r3, #24]
900094f0:	f85d fb04 	ldr.w	pc, [sp], #4
900094f4:	e000ed00 	.word	0xe000ed00
900094f8:	e000e100 	.word	0xe000e100
900094fc:	e000ecfc 	.word	0xe000ecfc

90009500 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009500:	2800      	cmp	r0, #0
90009502:	db07      	blt.n	90009514 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009504:	2301      	movs	r3, #1
90009506:	f000 011f 	and.w	r1, r0, #31
9000950a:	4a03      	ldr	r2, [pc, #12]	; (90009518 <HAL_NVIC_EnableIRQ+0x18>)
9000950c:	0940      	lsrs	r0, r0, #5
9000950e:	408b      	lsls	r3, r1
90009510:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90009514:	4770      	bx	lr
90009516:	bf00      	nop
90009518:	e000e100 	.word	0xe000e100

9000951c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000951c:	2800      	cmp	r0, #0
9000951e:	db0c      	blt.n	9000953a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009520:	0943      	lsrs	r3, r0, #5
90009522:	2201      	movs	r2, #1
90009524:	f000 001f 	and.w	r0, r0, #31
90009528:	4904      	ldr	r1, [pc, #16]	; (9000953c <HAL_NVIC_DisableIRQ+0x20>)
9000952a:	3320      	adds	r3, #32
9000952c:	4082      	lsls	r2, r0
9000952e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90009532:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009536:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
9000953a:	4770      	bx	lr
9000953c:	e000e100 	.word	0xe000e100

90009540 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90009540:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009544:	4b04      	ldr	r3, [pc, #16]	; (90009558 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90009546:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000954a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000954e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90009550:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90009554:	4770      	bx	lr
90009556:	bf00      	nop
90009558:	e000ed00 	.word	0xe000ed00

9000955c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
9000955c:	4b06      	ldr	r3, [pc, #24]	; (90009578 <HAL_MPU_Enable+0x1c>)
9000955e:	f040 0001 	orr.w	r0, r0, #1
90009562:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90009566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009568:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000956c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000956e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009572:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90009576:	4770      	bx	lr
90009578:	e000ed00 	.word	0xe000ed00

9000957c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
9000957c:	4a17      	ldr	r2, [pc, #92]	; (900095dc <HAL_MPU_ConfigRegion+0x60>)
9000957e:	7843      	ldrb	r3, [r0, #1]
90009580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90009584:	7801      	ldrb	r1, [r0, #0]
90009586:	b321      	cbz	r1, 900095d2 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90009588:	6843      	ldr	r3, [r0, #4]
{
9000958a:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
9000958c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009590:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009592:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009596:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90009598:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000959c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900095a0:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900095a4:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900095a6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900095a8:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900095ac:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900095b0:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900095b4:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900095b8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
900095bc:	7a01      	ldrb	r1, [r0, #8]
900095be:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
900095c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900095c6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900095ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
900095ce:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
900095d2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
900095d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
900095da:	4770      	bx	lr
900095dc:	e000ed00 	.word	0xe000ed00

900095e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
900095e0:	2800      	cmp	r0, #0
900095e2:	d036      	beq.n	90009652 <HAL_CRC_Init+0x72>
{
900095e4:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
900095e6:	7f43      	ldrb	r3, [r0, #29]
900095e8:	4604      	mov	r4, r0
900095ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900095ee:	b363      	cbz	r3, 9000964a <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
900095f0:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
900095f2:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
900095f4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
900095f6:	b9f3      	cbnz	r3, 90009636 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
900095f8:	6823      	ldr	r3, [r4, #0]
900095fa:	4a17      	ldr	r2, [pc, #92]	; (90009658 <HAL_CRC_Init+0x78>)
900095fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
900095fe:	689a      	ldr	r2, [r3, #8]
90009600:	f022 0218 	bic.w	r2, r2, #24
90009604:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90009606:	7962      	ldrb	r2, [r4, #5]
90009608:	b18a      	cbz	r2, 9000962e <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
9000960a:	6922      	ldr	r2, [r4, #16]
9000960c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
9000960e:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009610:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009614:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90009618:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
9000961a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
9000961c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
9000961e:	689a      	ldr	r2, [r3, #8]
90009620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90009624:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90009626:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009628:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
9000962a:	7761      	strb	r1, [r4, #29]
}
9000962c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
9000962e:	f04f 32ff 	mov.w	r2, #4294967295
90009632:	611a      	str	r2, [r3, #16]
90009634:	e7eb      	b.n	9000960e <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90009636:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
9000963a:	4620      	mov	r0, r4
9000963c:	f000 f80e 	bl	9000965c <HAL_CRCEx_Polynomial_Set>
90009640:	b908      	cbnz	r0, 90009646 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009642:	6823      	ldr	r3, [r4, #0]
90009644:	e7df      	b.n	90009606 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90009646:	2001      	movs	r0, #1
}
90009648:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
9000964a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
9000964c:	f7fb f92c 	bl	900048a8 <HAL_CRC_MspInit>
90009650:	e7ce      	b.n	900095f0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90009652:	2001      	movs	r0, #1
}
90009654:	4770      	bx	lr
90009656:	bf00      	nop
90009658:	04c11db7 	.word	0x04c11db7

9000965c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
9000965c:	07cb      	lsls	r3, r1, #31
9000965e:	d51a      	bpl.n	90009696 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009660:	231e      	movs	r3, #30
{
90009662:	b410      	push	{r4}
90009664:	e001      	b.n	9000966a <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009666:	3b01      	subs	r3, #1
90009668:	d317      	bcc.n	9000969a <HAL_CRCEx_Polynomial_Set+0x3e>
9000966a:	fa21 fc03 	lsr.w	ip, r1, r3
9000966e:	f01c 0f01 	tst.w	ip, #1
90009672:	d0f8      	beq.n	90009666 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90009674:	2a18      	cmp	r2, #24
90009676:	d811      	bhi.n	9000969c <HAL_CRCEx_Polynomial_Set+0x40>
90009678:	e8df f002 	tbb	[pc, r2]
9000967c:	10101016 	.word	0x10101016
90009680:	10101010 	.word	0x10101010
90009684:	10101024 	.word	0x10101024
90009688:	10101010 	.word	0x10101010
9000968c:	10101021 	.word	0x10101021
90009690:	10101010 	.word	0x10101010
90009694:	14          	.byte	0x14
90009695:	00          	.byte	0x00
    status =  HAL_ERROR;
90009696:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90009698:	4770      	bx	lr
    switch (PolyLength)
9000969a:	b12a      	cbz	r2, 900096a8 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
9000969c:	2001      	movs	r0, #1
}
9000969e:	f85d 4b04 	ldr.w	r4, [sp], #4
900096a2:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
900096a4:	2b06      	cmp	r3, #6
900096a6:	d8f9      	bhi.n	9000969c <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
900096a8:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900096aa:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
900096ac:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900096ae:	68a3      	ldr	r3, [r4, #8]
900096b0:	f023 0318 	bic.w	r3, r3, #24
900096b4:	4313      	orrs	r3, r2
900096b6:	60a3      	str	r3, [r4, #8]
}
900096b8:	f85d 4b04 	ldr.w	r4, [sp], #4
900096bc:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
900096be:	2b07      	cmp	r3, #7
900096c0:	d9f2      	bls.n	900096a8 <HAL_CRCEx_Polynomial_Set+0x4c>
900096c2:	e7eb      	b.n	9000969c <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
900096c4:	2b0f      	cmp	r3, #15
900096c6:	d9ef      	bls.n	900096a8 <HAL_CRCEx_Polynomial_Set+0x4c>
900096c8:	e7e8      	b.n	9000969c <HAL_CRCEx_Polynomial_Set+0x40>
900096ca:	bf00      	nop

900096cc <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900096cc:	2800      	cmp	r0, #0
900096ce:	d035      	beq.n	9000973c <HAL_DMA2D_Init+0x70>
{
900096d0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900096d2:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
900096d6:	4604      	mov	r4, r0
900096d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900096dc:	b34b      	cbz	r3, 90009732 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096de:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900096e0:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096e2:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900096e4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096e8:	69e1      	ldr	r1, [r4, #28]
900096ea:	681d      	ldr	r5, [r3, #0]
900096ec:	4814      	ldr	r0, [pc, #80]	; (90009740 <HAL_DMA2D_Init+0x74>)
900096ee:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900096f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096f2:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900096f4:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096f6:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900096f8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900096fa:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900096fc:	4302      	orrs	r2, r0
900096fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009700:	4810      	ldr	r0, [pc, #64]	; (90009744 <HAL_DMA2D_Init+0x78>)
90009702:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009704:	4910      	ldr	r1, [pc, #64]	; (90009748 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009706:	4302      	orrs	r2, r0
90009708:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000970a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000970c:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000970e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009712:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009714:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009716:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009718:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000971a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000971e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009720:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90009724:	430a      	orrs	r2, r1
90009726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90009728:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000972a:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000972c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90009730:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90009732:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90009736:	f7fb f8cf 	bl	900048d8 <HAL_DMA2D_MspInit>
9000973a:	e7d0      	b.n	900096de <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
9000973c:	2001      	movs	r0, #1
}
9000973e:	4770      	bx	lr
90009740:	fff8ffbf 	.word	0xfff8ffbf
90009744:	fffffef8 	.word	0xfffffef8
90009748:	ffff0000 	.word	0xffff0000

9000974c <HAL_DMA2D_LineEventCallback>:
9000974c:	4770      	bx	lr
9000974e:	bf00      	nop

90009750 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90009750:	4770      	bx	lr
90009752:	bf00      	nop

90009754 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009754:	6803      	ldr	r3, [r0, #0]
{
90009756:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009758:	685d      	ldr	r5, [r3, #4]
{
9000975a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
9000975c:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000975e:	07ea      	lsls	r2, r5, #31
90009760:	d501      	bpl.n	90009766 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90009762:	05f1      	lsls	r1, r6, #23
90009764:	d456      	bmi.n	90009814 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90009766:	06aa      	lsls	r2, r5, #26
90009768:	d501      	bpl.n	9000976e <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
9000976a:	04b3      	lsls	r3, r6, #18
9000976c:	d43b      	bmi.n	900097e6 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000976e:	0728      	lsls	r0, r5, #28
90009770:	d501      	bpl.n	90009776 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90009772:	0531      	lsls	r1, r6, #20
90009774:	d421      	bmi.n	900097ba <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90009776:	076a      	lsls	r2, r5, #29
90009778:	d501      	bpl.n	9000977e <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
9000977a:	0573      	lsls	r3, r6, #21
9000977c:	d472      	bmi.n	90009864 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
9000977e:	07a8      	lsls	r0, r5, #30
90009780:	d501      	bpl.n	90009786 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90009782:	05b1      	lsls	r1, r6, #22
90009784:	d404      	bmi.n	90009790 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90009786:	06ea      	lsls	r2, r5, #27
90009788:	d501      	bpl.n	9000978e <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
9000978a:	04f3      	lsls	r3, r6, #19
9000978c:	d457      	bmi.n	9000983e <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
9000978e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90009790:	6823      	ldr	r3, [r4, #0]
90009792:	681a      	ldr	r2, [r3, #0]
90009794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90009798:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
9000979a:	2202      	movs	r2, #2
9000979c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000979e:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900097a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
900097a2:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
900097a4:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
900097a6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900097aa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
900097ae:	6a23      	ldr	r3, [r4, #32]
900097b0:	2b00      	cmp	r3, #0
900097b2:	d0e8      	beq.n	90009786 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
900097b4:	4620      	mov	r0, r4
900097b6:	4798      	blx	r3
900097b8:	e7e5      	b.n	90009786 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
900097ba:	6823      	ldr	r3, [r4, #0]
900097bc:	681a      	ldr	r2, [r3, #0]
900097be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
900097c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
900097c4:	2208      	movs	r2, #8
900097c6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900097c8:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900097ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
900097cc:	4313      	orrs	r3, r2
900097ce:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900097d0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900097d4:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
900097d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
900097d8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
900097dc:	2b00      	cmp	r3, #0
900097de:	d0ca      	beq.n	90009776 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
900097e0:	4620      	mov	r0, r4
900097e2:	4798      	blx	r3
900097e4:	e7c7      	b.n	90009776 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
900097e6:	6823      	ldr	r3, [r4, #0]
900097e8:	681a      	ldr	r2, [r3, #0]
900097ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
900097ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
900097f0:	2220      	movs	r2, #32
900097f2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900097f4:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900097f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
900097f8:	f043 0302 	orr.w	r3, r3, #2
900097fc:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900097fe:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009802:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009804:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009806:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000980a:	2b00      	cmp	r3, #0
9000980c:	d0af      	beq.n	9000976e <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
9000980e:	4620      	mov	r0, r4
90009810:	4798      	blx	r3
90009812:	e7ac      	b.n	9000976e <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90009814:	681a      	ldr	r2, [r3, #0]
90009816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000981a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000981c:	6e42      	ldr	r2, [r0, #100]	; 0x64
9000981e:	f042 0201 	orr.w	r2, r2, #1
90009822:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90009824:	2201      	movs	r2, #1
90009826:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009828:	2304      	movs	r3, #4
9000982a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000982e:	2300      	movs	r3, #0
90009830:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009834:	6a43      	ldr	r3, [r0, #36]	; 0x24
90009836:	2b00      	cmp	r3, #0
90009838:	d095      	beq.n	90009766 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
9000983a:	4798      	blx	r3
9000983c:	e793      	b.n	90009766 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000983e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90009840:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009842:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90009844:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90009846:	681a      	ldr	r2, [r3, #0]
90009848:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000984c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
9000984e:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90009850:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009852:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009854:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009858:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000985a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
9000985e:	f7ff ff77 	bl	90009750 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90009862:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009864:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009866:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009868:	681a      	ldr	r2, [r3, #0]
9000986a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
9000986e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90009870:	2204      	movs	r2, #4
90009872:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009874:	f7ff ff6a 	bl	9000974c <HAL_DMA2D_LineEventCallback>
90009878:	e781      	b.n	9000977e <HAL_DMA2D_IRQHandler+0x2a>
9000987a:	bf00      	nop

9000987c <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000987c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90009880:	2a01      	cmp	r2, #1
90009882:	d065      	beq.n	90009950 <HAL_DMA2D_ConfigLayer+0xd4>
90009884:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009886:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000988a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000988c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90009890:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90009892:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009894:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90009898:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000989c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000989e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
900098a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900098a2:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900098a4:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900098a8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
900098ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900098ae:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900098b2:	ea42 0204 	orr.w	r2, r2, r4
900098b6:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900098ba:	d922      	bls.n	90009902 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900098bc:	6b45      	ldr	r5, [r0, #52]	; 0x34
900098be:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
900098c2:	b981      	cbnz	r1, 900098e6 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900098c4:	6818      	ldr	r0, [r3, #0]
900098c6:	4923      	ldr	r1, [pc, #140]	; (90009954 <HAL_DMA2D_ConfigLayer+0xd8>)
900098c8:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900098ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900098cc:	4029      	ands	r1, r5
900098ce:	4311      	orrs	r1, r2
900098d0:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900098d2:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900098d4:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
900098d6:	2101      	movs	r1, #1

  return HAL_OK;
900098d8:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
900098da:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
900098de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
900098e2:	bc70      	pop	{r4, r5, r6}
900098e4:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
900098e6:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098e8:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
900098ea:	d129      	bne.n	90009940 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098ec:	69e5      	ldr	r5, [r4, #28]
900098ee:	491a      	ldr	r1, [pc, #104]	; (90009958 <HAL_DMA2D_ConfigLayer+0xdc>)
900098f0:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
900098f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098f6:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
900098fa:	4311      	orrs	r1, r2
900098fc:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098fe:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009900:	e7e8      	b.n	900098d4 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90009902:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009904:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90009908:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000990a:	b961      	cbnz	r1, 90009926 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000990c:	6819      	ldr	r1, [r3, #0]
9000990e:	4a11      	ldr	r2, [pc, #68]	; (90009954 <HAL_DMA2D_ConfigLayer+0xd8>)
90009910:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009912:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009914:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009916:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009918:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000991c:	4322      	orrs	r2, r4
9000991e:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009920:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009922:	6288      	str	r0, [r1, #40]	; 0x28
90009924:	e7d6      	b.n	900098d4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009926:	6819      	ldr	r1, [r3, #0]
90009928:	4a0a      	ldr	r2, [pc, #40]	; (90009954 <HAL_DMA2D_ConfigLayer+0xd8>)
9000992a:	69cd      	ldr	r5, [r1, #28]
9000992c:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000992e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009930:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90009932:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009934:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009938:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000993a:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000993c:	620c      	str	r4, [r1, #32]
9000993e:	e7c9      	b.n	900098d4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009940:	69e5      	ldr	r5, [r4, #28]
90009942:	4904      	ldr	r1, [pc, #16]	; (90009954 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009944:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009946:	4029      	ands	r1, r5
90009948:	4311      	orrs	r1, r2
9000994a:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000994c:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000994e:	e7c1      	b.n	900098d4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90009950:	2002      	movs	r0, #2
}
90009952:	4770      	bx	lr
90009954:	00ccfff0 	.word	0x00ccfff0
90009958:	00c0fff0 	.word	0x00c0fff0

9000995c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
9000995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009960:	680c      	ldr	r4, [r1, #0]
{
90009962:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009964:	2c00      	cmp	r4, #0
90009966:	f000 80a7 	beq.w	90009ab8 <HAL_GPIO_Init+0x15c>
9000996a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000996e:	4f8a      	ldr	r7, [pc, #552]	; (90009b98 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90009970:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90009972:	2201      	movs	r2, #1
90009974:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90009976:	ea12 0e04 	ands.w	lr, r2, r4
9000997a:	f000 8096 	beq.w	90009aaa <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000997e:	684d      	ldr	r5, [r1, #4]
90009980:	f005 0903 	and.w	r9, r5, #3
90009984:	f109 36ff 	add.w	r6, r9, #4294967295
90009988:	2e01      	cmp	r6, #1
9000998a:	f240 8098 	bls.w	90009abe <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000998e:	f1b9 0f03 	cmp.w	r9, #3
90009992:	f040 80d2 	bne.w	90009b3a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009996:	fa09 f20c 	lsl.w	r2, r9, ip
9000999a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
9000999e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900099a0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900099a4:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900099a8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
900099ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900099ae:	d07c      	beq.n	90009aaa <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900099b0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
900099b4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900099b8:	f003 0903 	and.w	r9, r3, #3
900099bc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900099be:	f042 0202 	orr.w	r2, r2, #2
900099c2:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900099c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900099ca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
900099ce:	f508 6880 	add.w	r8, r8, #1024	; 0x400
900099d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900099d6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900099da:	f002 0202 	and.w	r2, r2, #2
900099de:	9201      	str	r2, [sp, #4]
900099e0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
900099e2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900099e6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900099ea:	4e6c      	ldr	r6, [pc, #432]	; (90009b9c <HAL_GPIO_Init+0x240>)
900099ec:	42b0      	cmp	r0, r6
900099ee:	d028      	beq.n	90009a42 <HAL_GPIO_Init+0xe6>
900099f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
900099f4:	42b0      	cmp	r0, r6
900099f6:	f000 80ac 	beq.w	90009b52 <HAL_GPIO_Init+0x1f6>
900099fa:	4e69      	ldr	r6, [pc, #420]	; (90009ba0 <HAL_GPIO_Init+0x244>)
900099fc:	42b0      	cmp	r0, r6
900099fe:	f000 80ad 	beq.w	90009b5c <HAL_GPIO_Init+0x200>
90009a02:	4e68      	ldr	r6, [pc, #416]	; (90009ba4 <HAL_GPIO_Init+0x248>)
90009a04:	42b0      	cmp	r0, r6
90009a06:	f000 809f 	beq.w	90009b48 <HAL_GPIO_Init+0x1ec>
90009a0a:	4e67      	ldr	r6, [pc, #412]	; (90009ba8 <HAL_GPIO_Init+0x24c>)
90009a0c:	42b0      	cmp	r0, r6
90009a0e:	f000 80af 	beq.w	90009b70 <HAL_GPIO_Init+0x214>
90009a12:	4e66      	ldr	r6, [pc, #408]	; (90009bac <HAL_GPIO_Init+0x250>)
90009a14:	42b0      	cmp	r0, r6
90009a16:	f000 80b0 	beq.w	90009b7a <HAL_GPIO_Init+0x21e>
90009a1a:	4e65      	ldr	r6, [pc, #404]	; (90009bb0 <HAL_GPIO_Init+0x254>)
90009a1c:	42b0      	cmp	r0, r6
90009a1e:	f000 80a2 	beq.w	90009b66 <HAL_GPIO_Init+0x20a>
90009a22:	4e64      	ldr	r6, [pc, #400]	; (90009bb4 <HAL_GPIO_Init+0x258>)
90009a24:	42b0      	cmp	r0, r6
90009a26:	f000 80ad 	beq.w	90009b84 <HAL_GPIO_Init+0x228>
90009a2a:	4e63      	ldr	r6, [pc, #396]	; (90009bb8 <HAL_GPIO_Init+0x25c>)
90009a2c:	42b0      	cmp	r0, r6
90009a2e:	f000 80ae 	beq.w	90009b8e <HAL_GPIO_Init+0x232>
90009a32:	4e62      	ldr	r6, [pc, #392]	; (90009bbc <HAL_GPIO_Init+0x260>)
90009a34:	42b0      	cmp	r0, r6
90009a36:	bf0c      	ite	eq
90009a38:	2609      	moveq	r6, #9
90009a3a:	260a      	movne	r6, #10
90009a3c:	fa06 f609 	lsl.w	r6, r6, r9
90009a40:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90009a42:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90009a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90009a4a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
90009a4e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90009a52:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90009a54:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009a58:	bf0c      	ite	eq
90009a5a:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009a5c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90009a60:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
90009a64:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
90009a68:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90009a6c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009a70:	bf0c      	ite	eq
90009a72:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009a74:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90009a78:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
90009a7c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
90009a80:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90009a84:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009a88:	bf0c      	ite	eq
90009a8a:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009a8c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90009a90:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90009a92:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90009a96:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90009a9a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
90009a9e:	bf54      	ite	pl
90009aa0:	4032      	andpl	r2, r6
          temp |= iocurrent;
90009aa2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90009aa6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90009aaa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009aac:	f10c 0c02 	add.w	ip, ip, #2
90009ab0:	fa34 f203 	lsrs.w	r2, r4, r3
90009ab4:	f47f af5d 	bne.w	90009972 <HAL_GPIO_Init+0x16>
  }
}
90009ab8:	b003      	add	sp, #12
90009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009abe:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90009ac2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009ac4:	fa08 f80c 	lsl.w	r8, r8, ip
90009ac8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009acc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009ace:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009ad2:	fa06 f60c 	lsl.w	r6, r6, ip
90009ad6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90009ada:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009adc:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90009ae0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009ae4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90009ae6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009aea:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90009aec:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90009aee:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90009af0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009af4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90009af6:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009afa:	fa06 f60c 	lsl.w	r6, r6, ip
90009afe:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90009b02:	fa09 f20c 	lsl.w	r2, r9, ip
90009b06:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90009b08:	f47f af49 	bne.w	9000999e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
90009b0c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90009b10:	f003 0b07 	and.w	fp, r3, #7
90009b14:	260f      	movs	r6, #15
90009b16:	eb00 0989 	add.w	r9, r0, r9, lsl #2
90009b1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
90009b1e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90009b22:	fa06 f60b 	lsl.w	r6, r6, fp
90009b26:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90009b2a:	690e      	ldr	r6, [r1, #16]
90009b2c:	fa06 f60b 	lsl.w	r6, r6, fp
90009b30:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90009b34:	f8c9 6020 	str.w	r6, [r9, #32]
90009b38:	e731      	b.n	9000999e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009b3a:	f04f 0803 	mov.w	r8, #3
90009b3e:	fa08 f80c 	lsl.w	r8, r8, ip
90009b42:	ea6f 0808 	mvn.w	r8, r8
90009b46:	e7d2      	b.n	90009aee <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90009b48:	2603      	movs	r6, #3
90009b4a:	fa06 f609 	lsl.w	r6, r6, r9
90009b4e:	4332      	orrs	r2, r6
90009b50:	e777      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b52:	2601      	movs	r6, #1
90009b54:	fa06 f609 	lsl.w	r6, r6, r9
90009b58:	4332      	orrs	r2, r6
90009b5a:	e772      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b5c:	2602      	movs	r6, #2
90009b5e:	fa06 f609 	lsl.w	r6, r6, r9
90009b62:	4332      	orrs	r2, r6
90009b64:	e76d      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b66:	2606      	movs	r6, #6
90009b68:	fa06 f609 	lsl.w	r6, r6, r9
90009b6c:	4332      	orrs	r2, r6
90009b6e:	e768      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b70:	2604      	movs	r6, #4
90009b72:	fa06 f609 	lsl.w	r6, r6, r9
90009b76:	4332      	orrs	r2, r6
90009b78:	e763      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b7a:	2605      	movs	r6, #5
90009b7c:	fa06 f609 	lsl.w	r6, r6, r9
90009b80:	4332      	orrs	r2, r6
90009b82:	e75e      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b84:	2607      	movs	r6, #7
90009b86:	fa06 f609 	lsl.w	r6, r6, r9
90009b8a:	4332      	orrs	r2, r6
90009b8c:	e759      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b8e:	2608      	movs	r6, #8
90009b90:	fa06 f609 	lsl.w	r6, r6, r9
90009b94:	4332      	orrs	r2, r6
90009b96:	e754      	b.n	90009a42 <HAL_GPIO_Init+0xe6>
90009b98:	58024400 	.word	0x58024400
90009b9c:	58020000 	.word	0x58020000
90009ba0:	58020800 	.word	0x58020800
90009ba4:	58020c00 	.word	0x58020c00
90009ba8:	58021000 	.word	0x58021000
90009bac:	58021400 	.word	0x58021400
90009bb0:	58021800 	.word	0x58021800
90009bb4:	58021c00 	.word	0x58021c00
90009bb8:	58022000 	.word	0x58022000
90009bbc:	58022400 	.word	0x58022400

90009bc0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90009bc0:	2900      	cmp	r1, #0
90009bc2:	f000 80a4 	beq.w	90009d0e <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
90009bc6:	2300      	movs	r3, #0
{
90009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90009bcc:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90009d38 <HAL_GPIO_DeInit+0x178>
90009bd0:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009bd2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90009d3c <HAL_GPIO_DeInit+0x17c>
90009bd6:	f8df a168 	ldr.w	sl, [pc, #360]	; 90009d40 <HAL_GPIO_DeInit+0x180>
90009bda:	f8df b168 	ldr.w	fp, [pc, #360]	; 90009d44 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90009bde:	f04f 0e01 	mov.w	lr, #1
90009be2:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90009be6:	ea12 0c01 	ands.w	ip, r2, r1
90009bea:	d06b      	beq.n	90009cc4 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
90009bec:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009bf0:	f003 0403 	and.w	r4, r3, #3
90009bf4:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009bf6:	4540      	cmp	r0, r8
90009bf8:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009bfa:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
90009bfe:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009c00:	fa06 f604 	lsl.w	r6, r6, r4
90009c04:	ea07 0706 	and.w	r7, r7, r6
90009c08:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009c0a:	d01f      	beq.n	90009c4c <HAL_GPIO_DeInit+0x8c>
90009c0c:	4550      	cmp	r0, sl
90009c0e:	d01a      	beq.n	90009c46 <HAL_GPIO_DeInit+0x86>
90009c10:	4558      	cmp	r0, fp
90009c12:	d05e      	beq.n	90009cd2 <HAL_GPIO_DeInit+0x112>
90009c14:	4f43      	ldr	r7, [pc, #268]	; (90009d24 <HAL_GPIO_DeInit+0x164>)
90009c16:	42b8      	cmp	r0, r7
90009c18:	d065      	beq.n	90009ce6 <HAL_GPIO_DeInit+0x126>
90009c1a:	4f43      	ldr	r7, [pc, #268]	; (90009d28 <HAL_GPIO_DeInit+0x168>)
90009c1c:	42b8      	cmp	r0, r7
90009c1e:	d067      	beq.n	90009cf0 <HAL_GPIO_DeInit+0x130>
90009c20:	4f42      	ldr	r7, [pc, #264]	; (90009d2c <HAL_GPIO_DeInit+0x16c>)
90009c22:	42b8      	cmp	r0, r7
90009c24:	d05a      	beq.n	90009cdc <HAL_GPIO_DeInit+0x11c>
90009c26:	4f42      	ldr	r7, [pc, #264]	; (90009d30 <HAL_GPIO_DeInit+0x170>)
90009c28:	42b8      	cmp	r0, r7
90009c2a:	d06b      	beq.n	90009d04 <HAL_GPIO_DeInit+0x144>
90009c2c:	4f41      	ldr	r7, [pc, #260]	; (90009d34 <HAL_GPIO_DeInit+0x174>)
90009c2e:	42b8      	cmp	r0, r7
90009c30:	d06e      	beq.n	90009d10 <HAL_GPIO_DeInit+0x150>
90009c32:	f8df e114 	ldr.w	lr, [pc, #276]	; 90009d48 <HAL_GPIO_DeInit+0x188>
90009c36:	4570      	cmp	r0, lr
90009c38:	d05f      	beq.n	90009cfa <HAL_GPIO_DeInit+0x13a>
90009c3a:	f8df e110 	ldr.w	lr, [pc, #272]	; 90009d4c <HAL_GPIO_DeInit+0x18c>
90009c3e:	4570      	cmp	r0, lr
90009c40:	d06b      	beq.n	90009d1a <HAL_GPIO_DeInit+0x15a>
90009c42:	f04f 0e0a 	mov.w	lr, #10
90009c46:	fa0e f404 	lsl.w	r4, lr, r4
90009c4a:	e000      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009c4c:	2400      	movs	r4, #0
90009c4e:	9f01      	ldr	r7, [sp, #4]
90009c50:	42a7      	cmp	r7, r4
90009c52:	d119      	bne.n	90009c88 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90009c54:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90009c58:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
90009c5c:	ea27 070c 	bic.w	r7, r7, ip
90009c60:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90009c64:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90009c68:	ea27 070c 	bic.w	r7, r7, ip
90009c6c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90009c70:	6867      	ldr	r7, [r4, #4]
90009c72:	ea27 070c 	bic.w	r7, r7, ip
90009c76:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90009c78:	6827      	ldr	r7, [r4, #0]
90009c7a:	ea27 070c 	bic.w	r7, r7, ip
90009c7e:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90009c80:	68ac      	ldr	r4, [r5, #8]
90009c82:	ea24 0406 	bic.w	r4, r4, r6
90009c86:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c88:	005d      	lsls	r5, r3, #1
90009c8a:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c8c:	f003 0607 	and.w	r6, r3, #7
90009c90:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c92:	40ac      	lsls	r4, r5
90009c94:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c96:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c98:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c9a:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c9c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c9e:	08dd      	lsrs	r5, r3, #3
90009ca0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90009ca4:	6a2e      	ldr	r6, [r5, #32]
90009ca6:	ea26 0607 	bic.w	r6, r6, r7
90009caa:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90009cac:	68c5      	ldr	r5, [r0, #12]
90009cae:	ea25 0504 	bic.w	r5, r5, r4
90009cb2:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90009cb4:	6845      	ldr	r5, [r0, #4]
90009cb6:	ea25 0202 	bic.w	r2, r5, r2
90009cba:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009cbc:	6882      	ldr	r2, [r0, #8]
90009cbe:	ea22 0204 	bic.w	r2, r2, r4
90009cc2:	6082      	str	r2, [r0, #8]
    }

    position++;
90009cc4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90009cc6:	fa31 f203 	lsrs.w	r2, r1, r3
90009cca:	d188      	bne.n	90009bde <HAL_GPIO_DeInit+0x1e>
  }
}
90009ccc:	b003      	add	sp, #12
90009cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009cd2:	f04f 0e02 	mov.w	lr, #2
90009cd6:	fa0e f404 	lsl.w	r4, lr, r4
90009cda:	e7b8      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009cdc:	f04f 0e05 	mov.w	lr, #5
90009ce0:	fa0e f404 	lsl.w	r4, lr, r4
90009ce4:	e7b3      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009ce6:	f04f 0e03 	mov.w	lr, #3
90009cea:	fa0e f404 	lsl.w	r4, lr, r4
90009cee:	e7ae      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009cf0:	f04f 0e04 	mov.w	lr, #4
90009cf4:	fa0e f404 	lsl.w	r4, lr, r4
90009cf8:	e7a9      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009cfa:	f04f 0e08 	mov.w	lr, #8
90009cfe:	fa0e f404 	lsl.w	r4, lr, r4
90009d02:	e7a4      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009d04:	f04f 0e06 	mov.w	lr, #6
90009d08:	fa0e f404 	lsl.w	r4, lr, r4
90009d0c:	e79f      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009d0e:	4770      	bx	lr
90009d10:	f04f 0e07 	mov.w	lr, #7
90009d14:	fa0e f404 	lsl.w	r4, lr, r4
90009d18:	e799      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009d1a:	f04f 0e09 	mov.w	lr, #9
90009d1e:	fa0e f404 	lsl.w	r4, lr, r4
90009d22:	e794      	b.n	90009c4e <HAL_GPIO_DeInit+0x8e>
90009d24:	58020c00 	.word	0x58020c00
90009d28:	58021000 	.word	0x58021000
90009d2c:	58021400 	.word	0x58021400
90009d30:	58021800 	.word	0x58021800
90009d34:	58021c00 	.word	0x58021c00
90009d38:	58000400 	.word	0x58000400
90009d3c:	58020000 	.word	0x58020000
90009d40:	58020400 	.word	0x58020400
90009d44:	58020800 	.word	0x58020800
90009d48:	58022000 	.word	0x58022000
90009d4c:	58022400 	.word	0x58022400

90009d50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90009d50:	6903      	ldr	r3, [r0, #16]
90009d52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90009d54:	bf14      	ite	ne
90009d56:	2001      	movne	r0, #1
90009d58:	2000      	moveq	r0, #0
90009d5a:	4770      	bx	lr

90009d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90009d5c:	b902      	cbnz	r2, 90009d60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90009d5e:	0409      	lsls	r1, r1, #16
90009d60:	6181      	str	r1, [r0, #24]
  }
}
90009d62:	4770      	bx	lr

90009d64 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90009d64:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90009d66:	ea01 0203 	and.w	r2, r1, r3
90009d6a:	ea21 0103 	bic.w	r1, r1, r3
90009d6e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90009d72:	6181      	str	r1, [r0, #24]
}
90009d74:	4770      	bx	lr
90009d76:	bf00      	nop

90009d78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90009d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90009d7c:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90009d7e:	f04f 0820 	mov.w	r8, #32
{
90009d82:	4605      	mov	r5, r0
90009d84:	460e      	mov	r6, r1
90009d86:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90009d88:	6998      	ldr	r0, [r3, #24]
90009d8a:	f010 0902 	ands.w	r9, r0, #2
90009d8e:	f040 809e 	bne.w	90009ece <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
90009d92:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90009d94:	f014 0410 	ands.w	r4, r4, #16
90009d98:	d068      	beq.n	90009e6c <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009d9a:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90009d9c:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90009d9e:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009da0:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009da2:	1c71      	adds	r1, r6, #1
90009da4:	699a      	ldr	r2, [r3, #24]
90009da6:	d163      	bne.n	90009e70 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
90009da8:	0690      	lsls	r0, r2, #26
90009daa:	f100 8093 	bmi.w	90009ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90009dae:	f1ba 0f00 	cmp.w	sl, #0
90009db2:	d104      	bne.n	90009dbe <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90009db4:	699c      	ldr	r4, [r3, #24]
90009db6:	06a1      	lsls	r1, r4, #26
90009db8:	d5fc      	bpl.n	90009db4 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90009dba:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90009dbe:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90009dc2:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90009dc4:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90009dc6:	05d0      	lsls	r0, r2, #23
90009dc8:	d530      	bpl.n	90009e2c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009dca:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009dce:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90009dd0:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009dd4:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009dd6:	d504      	bpl.n	90009de2 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90009ddc:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009de0:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009de2:	0591      	lsls	r1, r2, #22
90009de4:	d504      	bpl.n	90009df0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009de6:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90009dea:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009dee:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90009df0:	699a      	ldr	r2, [r3, #24]
90009df2:	0790      	lsls	r0, r2, #30
90009df4:	d501      	bpl.n	90009dfa <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
90009df6:	2200      	movs	r2, #0
90009df8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90009dfa:	699a      	ldr	r2, [r3, #24]
90009dfc:	07d1      	lsls	r1, r2, #31
90009dfe:	d403      	bmi.n	90009e08 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90009e00:	699a      	ldr	r2, [r3, #24]
90009e02:	f042 0201 	orr.w	r2, r2, #1
90009e06:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90009e08:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009e0a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90009e0c:	4834      	ldr	r0, [pc, #208]	; (90009ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
90009e0e:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90009e10:	4002      	ands	r2, r0
      return HAL_ERROR;
90009e12:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90009e14:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90009e16:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90009e18:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90009e1c:	4323      	orrs	r3, r4
90009e1e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90009e20:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009e24:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90009e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009e2c:	0550      	lsls	r0, r2, #21
90009e2e:	d4d3      	bmi.n	90009dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009e30:	0592      	lsls	r2, r2, #22
90009e32:	d4d8      	bmi.n	90009de6 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90009e34:	2900      	cmp	r1, #0
90009e36:	d1db      	bne.n	90009df0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90009e38:	1c72      	adds	r2, r6, #1
90009e3a:	d0a5      	beq.n	90009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009e3c:	f7ff fb04 	bl	90009448 <HAL_GetTick>
90009e40:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90009e42:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009e44:	42b0      	cmp	r0, r6
90009e46:	d801      	bhi.n	90009e4c <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
90009e48:	2e00      	cmp	r6, #0
90009e4a:	d19d      	bne.n	90009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90009e4c:	699a      	ldr	r2, [r3, #24]
90009e4e:	f012 0202 	ands.w	r2, r2, #2
90009e52:	d199      	bne.n	90009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009e54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009e56:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90009e58:	2001      	movs	r0, #1
90009e5a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009e5e:	430b      	orrs	r3, r1
90009e60:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009e62:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90009e66:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
90009e6a:	e7dd      	b.n	90009e28 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90009e6c:	4621      	mov	r1, r4
90009e6e:	e7a9      	b.n	90009dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009e70:	0692      	lsls	r2, r2, #26
90009e72:	d42f      	bmi.n	90009ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90009e74:	f1ba 0f00 	cmp.w	sl, #0
90009e78:	d1a1      	bne.n	90009dbe <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009e7a:	f7ff fae5 	bl	90009448 <HAL_GetTick>
90009e7e:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009e80:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009e82:	4286      	cmp	r6, r0
90009e84:	d301      	bcc.n	90009e8a <I2C_WaitOnTXISFlagUntilTimeout+0x112>
90009e86:	2e00      	cmp	r6, #0
90009e88:	d18b      	bne.n	90009da2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009e8a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90009e8c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009e90:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90009e92:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009e94:	0409      	lsls	r1, r1, #16
90009e96:	d50b      	bpl.n	90009eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
90009e98:	0441      	lsls	r1, r0, #17
90009e9a:	d409      	bmi.n	90009eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90009e9c:	2a20      	cmp	r2, #32
90009e9e:	d007      	beq.n	90009eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90009ea0:	685a      	ldr	r2, [r3, #4]
90009ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90009ea6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90009ea8:	f7ff face 	bl	90009448 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009eac:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90009eae:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009eb0:	699a      	ldr	r2, [r3, #24]
90009eb2:	0690      	lsls	r0, r2, #26
90009eb4:	f53f af75 	bmi.w	90009da2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009eb8:	f7ff fac6 	bl	90009448 <HAL_GetTick>
90009ebc:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009ebe:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009ec0:	2819      	cmp	r0, #25
90009ec2:	d9f5      	bls.n	90009eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90009ec4:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
90009ec8:	f04f 0a01 	mov.w	sl, #1
90009ecc:	e769      	b.n	90009da2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
90009ece:	2000      	movs	r0, #0
}
90009ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90009ed4:	f1ba 0f00 	cmp.w	sl, #0
90009ed8:	f43f af6f 	beq.w	90009dba <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90009edc:	e76f      	b.n	90009dbe <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90009ede:	bf00      	nop
90009ee0:	fe00e800 	.word	0xfe00e800

90009ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90009ee8:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009eea:	6802      	ldr	r2, [r0, #0]
{
90009eec:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009eee:	6991      	ldr	r1, [r2, #24]
90009ef0:	068c      	lsls	r4, r1, #26
90009ef2:	d469      	bmi.n	90009fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90009ef4:	4606      	mov	r6, r0
90009ef6:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009ef8:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90009efc:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90009efe:	f014 0410 	ands.w	r4, r4, #16
90009f02:	d064      	beq.n	90009fce <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90009f04:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009f06:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
90009f08:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009f0a:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90009f0e:	46aa      	mov	sl, r5
90009f10:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009f12:	699a      	ldr	r2, [r3, #24]
90009f14:	d15d      	bne.n	90009fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90009f16:	0690      	lsls	r0, r2, #26
90009f18:	f100 8083 	bmi.w	9000a022 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90009f1c:	f1ba 0f00 	cmp.w	sl, #0
90009f20:	d104      	bne.n	90009f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90009f22:	699c      	ldr	r4, [r3, #24]
90009f24:	06a1      	lsls	r1, r4, #26
90009f26:	d5fc      	bpl.n	90009f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90009f28:	2220      	movs	r2, #32
90009f2a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90009f2c:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90009f30:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90009f32:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90009f34:	05d0      	lsls	r0, r2, #23
90009f36:	d530      	bpl.n	90009f9a <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009f38:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009f3c:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90009f3e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009f42:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009f44:	d504      	bpl.n	90009f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90009f4a:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009f4e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009f50:	0591      	lsls	r1, r2, #22
90009f52:	d504      	bpl.n	90009f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009f54:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90009f58:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009f5c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90009f5e:	699a      	ldr	r2, [r3, #24]
90009f60:	0795      	lsls	r5, r2, #30
90009f62:	d501      	bpl.n	90009f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90009f64:	2200      	movs	r2, #0
90009f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90009f68:	699a      	ldr	r2, [r3, #24]
90009f6a:	07d0      	lsls	r0, r2, #31
90009f6c:	d403      	bmi.n	90009f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90009f6e:	699a      	ldr	r2, [r3, #24]
90009f70:	f042 0201 	orr.w	r2, r2, #1
90009f74:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
90009f76:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009f78:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90009f7a:	4837      	ldr	r0, [pc, #220]	; (9000a058 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
90009f7c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90009f7e:	4002      	ands	r2, r0
      return HAL_ERROR;
90009f80:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90009f82:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90009f84:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
90009f86:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90009f8a:	4323      	orrs	r3, r4
90009f8c:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90009f8e:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009f92:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90009f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009f9a:	0550      	lsls	r0, r2, #21
90009f9c:	d4d3      	bmi.n	90009f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009f9e:	0592      	lsls	r2, r2, #22
90009fa0:	d4d8      	bmi.n	90009f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90009fa2:	2900      	cmp	r1, #0
90009fa4:	d1db      	bne.n	90009f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009fa6:	f7ff fa4f 	bl	90009448 <HAL_GetTick>
90009faa:	eba0 0008 	sub.w	r0, r0, r8
90009fae:	42b8      	cmp	r0, r7
90009fb0:	d801      	bhi.n	90009fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
90009fb2:	2f00      	cmp	r7, #0
90009fb4:	d132      	bne.n	9000a01c <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90009fb6:	6832      	ldr	r2, [r6, #0]
90009fb8:	6991      	ldr	r1, [r2, #24]
90009fba:	4613      	mov	r3, r2
90009fbc:	f011 0120 	ands.w	r1, r1, #32
90009fc0:	d034      	beq.n	9000a02c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009fc2:	6991      	ldr	r1, [r2, #24]
90009fc4:	0689      	lsls	r1, r1, #26
90009fc6:	d599      	bpl.n	90009efc <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
90009fc8:	2000      	movs	r0, #0
}
90009fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90009fce:	4621      	mov	r1, r4
90009fd0:	e7af      	b.n	90009f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009fd2:	0692      	lsls	r2, r2, #26
90009fd4:	d425      	bmi.n	9000a022 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90009fd6:	f1ba 0f00 	cmp.w	sl, #0
90009fda:	d1a7      	bne.n	90009f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009fdc:	f7ff fa34 	bl	90009448 <HAL_GetTick>
90009fe0:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009fe2:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009fe4:	4287      	cmp	r7, r0
90009fe6:	d301      	bcc.n	90009fec <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
90009fe8:	2f00      	cmp	r7, #0
90009fea:	d191      	bne.n	90009f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009fec:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90009fee:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009ff2:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90009ff4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009ff6:	0409      	lsls	r1, r1, #16
90009ff8:	d503      	bpl.n	9000a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
90009ffa:	0441      	lsls	r1, r0, #17
90009ffc:	d401      	bmi.n	9000a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90009ffe:	2a20      	cmp	r2, #32
9000a000:	d121      	bne.n	9000a046 <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a002:	699a      	ldr	r2, [r3, #24]
9000a004:	0690      	lsls	r0, r2, #26
9000a006:	d483      	bmi.n	90009f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a008:	f7ff fa1e 	bl	90009448 <HAL_GetTick>
9000a00c:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a00e:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a010:	2819      	cmp	r0, #25
9000a012:	d9f6      	bls.n	9000a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a014:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000a016:	f04f 0a01 	mov.w	sl, #1
9000a01a:	e779      	b.n	90009f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a01c:	6833      	ldr	r3, [r6, #0]
9000a01e:	461a      	mov	r2, r3
9000a020:	e7cf      	b.n	90009fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
9000a022:	f1ba 0f00 	cmp.w	sl, #0
9000a026:	f43f af7f 	beq.w	90009f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000a02a:	e77f      	b.n	90009f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a02c:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a02e:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
9000a030:	2001      	movs	r0, #1
9000a032:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a036:	4313      	orrs	r3, r2
9000a038:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a03a:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a03e:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a046:	685a      	ldr	r2, [r3, #4]
9000a048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a04c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a04e:	f7ff f9fb 	bl	90009448 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a052:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000a054:	4604      	mov	r4, r0
9000a056:	e7d4      	b.n	9000a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000a058:	fe00e800 	.word	0xfe00e800

9000a05c <HAL_I2C_MspInit>:
}
9000a05c:	4770      	bx	lr
9000a05e:	bf00      	nop

9000a060 <HAL_I2C_Init>:
  if (hi2c == NULL)
9000a060:	2800      	cmp	r0, #0
9000a062:	d04e      	beq.n	9000a102 <HAL_I2C_Init+0xa2>
{
9000a064:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000a066:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000a06a:	4604      	mov	r4, r0
9000a06c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a070:	2b00      	cmp	r3, #0
9000a072:	d041      	beq.n	9000a0f8 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
9000a074:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a076:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a078:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a07a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000a07e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a084:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000a086:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a08a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
9000a08c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a08e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000a090:	689a      	ldr	r2, [r3, #8]
9000a092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000a096:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a098:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a09a:	d029      	beq.n	9000a0f0 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a09c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a0a0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a0a2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a0a4:	d102      	bne.n	9000a0ac <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000a0a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000a0aa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a0ac:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
9000a0ae:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a0b2:	4915      	ldr	r1, [pc, #84]	; (9000a108 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a0b4:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a0b6:	4301      	orrs	r1, r0
9000a0b8:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000a0ba:	68d9      	ldr	r1, [r3, #12]
9000a0bc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
9000a0c0:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
9000a0c2:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a0c6:	4302      	orrs	r2, r0
9000a0c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a0cc:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a0d0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a0d2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a0d4:	4301      	orrs	r1, r0
  return HAL_OK;
9000a0d6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a0d8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000a0da:	6819      	ldr	r1, [r3, #0]
9000a0dc:	f041 0101 	orr.w	r1, r1, #1
9000a0e0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a0e2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000a0e4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000a0e8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a0ea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a0ee:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a0f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a0f4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a0f6:	e7d9      	b.n	9000a0ac <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000a0f8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000a0fc:	f7ff ffae 	bl	9000a05c <HAL_I2C_MspInit>
9000a100:	e7b8      	b.n	9000a074 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000a102:	2001      	movs	r0, #1
}
9000a104:	4770      	bx	lr
9000a106:	bf00      	nop
9000a108:	02008000 	.word	0x02008000

9000a10c <HAL_I2C_MspDeInit>:
9000a10c:	4770      	bx	lr
9000a10e:	bf00      	nop

9000a110 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000a110:	b1b0      	cbz	r0, 9000a140 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000a112:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a114:	2324      	movs	r3, #36	; 0x24
{
9000a116:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a118:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
9000a11c:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000a11e:	6813      	ldr	r3, [r2, #0]
9000a120:	f023 0301 	bic.w	r3, r3, #1
9000a124:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000a126:	f7ff fff1 	bl	9000a10c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a12a:	2300      	movs	r3, #0
9000a12c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000a12e:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000a130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
9000a134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000a138:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a13a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000a13e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000a140:	2001      	movs	r0, #1
}
9000a142:	4770      	bx	lr

9000a144 <HAL_I2C_Mem_Write>:
{
9000a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a148:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a14a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a14e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a152:	2b20      	cmp	r3, #32
{
9000a154:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a156:	d132      	bne.n	9000a1be <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000a158:	9b08      	ldr	r3, [sp, #32]
9000a15a:	4604      	mov	r4, r0
9000a15c:	b34b      	cbz	r3, 9000a1b2 <HAL_I2C_Mem_Write+0x6e>
9000a15e:	f1ba 0f00 	cmp.w	sl, #0
9000a162:	d026      	beq.n	9000a1b2 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
9000a164:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a168:	2b01      	cmp	r3, #1
9000a16a:	d028      	beq.n	9000a1be <HAL_I2C_Mem_Write+0x7a>
9000a16c:	2301      	movs	r3, #1
9000a16e:	460e      	mov	r6, r1
9000a170:	4691      	mov	r9, r2
9000a172:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a176:	f7ff f967 	bl	90009448 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a17a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000a17c:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a17e:	699a      	ldr	r2, [r3, #24]
9000a180:	0411      	lsls	r1, r2, #16
9000a182:	d51f      	bpl.n	9000a1c4 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a184:	f7ff f960 	bl	90009448 <HAL_GetTick>
9000a188:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a18a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a18c:	2819      	cmp	r0, #25
9000a18e:	d9f6      	bls.n	9000a17e <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a190:	699a      	ldr	r2, [r3, #24]
9000a192:	0412      	lsls	r2, r2, #16
9000a194:	d5f3      	bpl.n	9000a17e <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a196:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a198:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a19a:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a19c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a19e:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a1a0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a1a4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a1a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a1aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a1b2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a1b6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a1b8:	6463      	str	r3, [r4, #68]	; 0x44
}
9000a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000a1be:	2002      	movs	r0, #2
}
9000a1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000a1c4:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a1c6:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a1c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a1cc:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a1ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a1d2:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a1d4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a1d6:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a1d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a1dc:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a1de:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1e0:	496d      	ldr	r1, [pc, #436]	; (9000a398 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
9000a1e2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1e6:	685a      	ldr	r2, [r3, #4]
9000a1e8:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a1ea:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a1f2:	496a      	ldr	r1, [pc, #424]	; (9000a39c <HAL_I2C_Mem_Write+0x258>)
9000a1f4:	4332      	orrs	r2, r6
9000a1f6:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a1f8:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1fa:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a1fc:	4639      	mov	r1, r7
9000a1fe:	f7ff fdbb 	bl	90009d78 <I2C_WaitOnTXISFlagUntilTimeout>
9000a202:	2800      	cmp	r0, #0
9000a204:	d175      	bne.n	9000a2f2 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a206:	f1b8 0f01 	cmp.w	r8, #1
9000a20a:	d00a      	beq.n	9000a222 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a20c:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000a210:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a212:	4639      	mov	r1, r7
9000a214:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a216:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a218:	462a      	mov	r2, r5
9000a21a:	f7ff fdad 	bl	90009d78 <I2C_WaitOnTXISFlagUntilTimeout>
9000a21e:	2800      	cmp	r0, #0
9000a220:	d167      	bne.n	9000a2f2 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a222:	fa5f f389 	uxtb.w	r3, r9
9000a226:	6822      	ldr	r2, [r4, #0]
9000a228:	6293      	str	r3, [r2, #40]	; 0x28
9000a22a:	1c78      	adds	r0, r7, #1
9000a22c:	d14a      	bne.n	9000a2c4 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a22e:	6993      	ldr	r3, [r2, #24]
9000a230:	0619      	lsls	r1, r3, #24
9000a232:	d5fc      	bpl.n	9000a22e <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a234:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a236:	b29b      	uxth	r3, r3
9000a238:	2bff      	cmp	r3, #255	; 0xff
9000a23a:	f240 808a 	bls.w	9000a352 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a23e:	6853      	ldr	r3, [r2, #4]
9000a240:	4957      	ldr	r1, [pc, #348]	; (9000a3a0 <HAL_I2C_Mem_Write+0x25c>)
9000a242:	400b      	ands	r3, r1
9000a244:	4957      	ldr	r1, [pc, #348]	; (9000a3a4 <HAL_I2C_Mem_Write+0x260>)
9000a246:	4333      	orrs	r3, r6
9000a248:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a24a:	23ff      	movs	r3, #255	; 0xff
9000a24c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a24e:	6051      	str	r1, [r2, #4]
9000a250:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9000a3a0 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a254:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a258:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9000a3a4 <HAL_I2C_Mem_Write+0x260>
9000a25c:	e004      	b.n	9000a268 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000a25e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a260:	b29b      	uxth	r3, r3
9000a262:	2b00      	cmp	r3, #0
9000a264:	f000 8083 	beq.w	9000a36e <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a268:	462a      	mov	r2, r5
9000a26a:	4639      	mov	r1, r7
9000a26c:	4620      	mov	r0, r4
9000a26e:	f7ff fd83 	bl	90009d78 <I2C_WaitOnTXISFlagUntilTimeout>
9000a272:	2800      	cmp	r0, #0
9000a274:	d16b      	bne.n	9000a34e <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a276:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a278:	6821      	ldr	r1, [r4, #0]
9000a27a:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000a27e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a280:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000a282:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000a284:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000a286:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000a288:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000a28a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
9000a28c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000a28e:	b292      	uxth	r2, r2
9000a290:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a292:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
9000a294:	b292      	uxth	r2, r2
9000a296:	2a00      	cmp	r2, #0
9000a298:	d0e1      	beq.n	9000a25e <HAL_I2C_Mem_Write+0x11a>
9000a29a:	2b00      	cmp	r3, #0
9000a29c:	d1df      	bne.n	9000a25e <HAL_I2C_Mem_Write+0x11a>
9000a29e:	1c78      	adds	r0, r7, #1
9000a2a0:	d12c      	bne.n	9000a2fc <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a2a2:	698b      	ldr	r3, [r1, #24]
9000a2a4:	061a      	lsls	r2, r3, #24
9000a2a6:	d5fc      	bpl.n	9000a2a2 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a2a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a2aa:	b29b      	uxth	r3, r3
9000a2ac:	2bff      	cmp	r3, #255	; 0xff
9000a2ae:	d940      	bls.n	9000a332 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a2b0:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a2b2:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a2b6:	ea03 0308 	and.w	r3, r3, r8
9000a2ba:	4333      	orrs	r3, r6
9000a2bc:	ea43 0309 	orr.w	r3, r3, r9
9000a2c0:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000a2c2:	e7cc      	b.n	9000a25e <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a2c4:	6993      	ldr	r3, [r2, #24]
9000a2c6:	061b      	lsls	r3, r3, #24
9000a2c8:	d4b4      	bmi.n	9000a234 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a2ca:	f7ff f8bd 	bl	90009448 <HAL_GetTick>
9000a2ce:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a2d0:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a2d2:	4287      	cmp	r7, r0
9000a2d4:	d301      	bcc.n	9000a2da <HAL_I2C_Mem_Write+0x196>
9000a2d6:	2f00      	cmp	r7, #0
9000a2d8:	d1a7      	bne.n	9000a22a <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a2da:	6993      	ldr	r3, [r2, #24]
9000a2dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a2e0:	d1a3      	bne.n	9000a22a <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a2e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a2e4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a2e6:	430a      	orrs	r2, r1
9000a2e8:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a2ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a2ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a2f2:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a2f4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a2f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000a2fa:	e75e      	b.n	9000a1ba <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a2fc:	698b      	ldr	r3, [r1, #24]
9000a2fe:	061b      	lsls	r3, r3, #24
9000a300:	d4d2      	bmi.n	9000a2a8 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a302:	f7ff f8a1 	bl	90009448 <HAL_GetTick>
9000a306:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a308:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a30a:	4287      	cmp	r7, r0
9000a30c:	d301      	bcc.n	9000a312 <HAL_I2C_Mem_Write+0x1ce>
9000a30e:	2f00      	cmp	r7, #0
9000a310:	d1c5      	bne.n	9000a29e <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a312:	698b      	ldr	r3, [r1, #24]
9000a314:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a318:	d1c1      	bne.n	9000a29e <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a31a:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a31c:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a31e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a320:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a324:	430a      	orrs	r2, r1
9000a326:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a328:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000a330:	e743      	b.n	9000a1ba <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000a332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a334:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a336:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000a338:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a33a:	684b      	ldr	r3, [r1, #4]
9000a33c:	ea03 0308 	and.w	r3, r3, r8
9000a340:	4333      	orrs	r3, r6
9000a342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a34a:	604b      	str	r3, [r1, #4]
}
9000a34c:	e787      	b.n	9000a25e <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000a34e:	2001      	movs	r0, #1
9000a350:	e733      	b.n	9000a1ba <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000a352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a354:	4812      	ldr	r0, [pc, #72]	; (9000a3a0 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000a356:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a358:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000a35a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a35c:	6853      	ldr	r3, [r2, #4]
9000a35e:	4003      	ands	r3, r0
9000a360:	4333      	orrs	r3, r6
9000a362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a36a:	6053      	str	r3, [r2, #4]
}
9000a36c:	e770      	b.n	9000a250 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a36e:	462a      	mov	r2, r5
9000a370:	4639      	mov	r1, r7
9000a372:	4620      	mov	r0, r4
9000a374:	f7ff fdb6 	bl	90009ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
9000a378:	2800      	cmp	r0, #0
9000a37a:	d1e8      	bne.n	9000a34e <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a37c:	6823      	ldr	r3, [r4, #0]
9000a37e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a380:	4d09      	ldr	r5, [pc, #36]	; (9000a3a8 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a382:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a384:	685a      	ldr	r2, [r3, #4]
9000a386:	402a      	ands	r2, r5
9000a388:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a38a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a38e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a392:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000a396:	e710      	b.n	9000a1ba <HAL_I2C_Mem_Write+0x76>
9000a398:	fc009800 	.word	0xfc009800
9000a39c:	01002000 	.word	0x01002000
9000a3a0:	fc009c00 	.word	0xfc009c00
9000a3a4:	01ff0000 	.word	0x01ff0000
9000a3a8:	fe00e800 	.word	0xfe00e800

9000a3ac <HAL_I2C_Mem_Read>:
{
9000a3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a3b0:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a3b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a3b6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a3ba:	2b20      	cmp	r3, #32
{
9000a3bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a3be:	d137      	bne.n	9000a430 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
9000a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000a3c2:	4683      	mov	fp, r0
9000a3c4:	b36b      	cbz	r3, 9000a422 <HAL_I2C_Mem_Read+0x76>
9000a3c6:	f1b9 0f00 	cmp.w	r9, #0
9000a3ca:	d02a      	beq.n	9000a422 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
9000a3cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a3d0:	2b01      	cmp	r3, #1
9000a3d2:	d02d      	beq.n	9000a430 <HAL_I2C_Mem_Read+0x84>
9000a3d4:	2301      	movs	r3, #1
9000a3d6:	460f      	mov	r7, r1
9000a3d8:	4690      	mov	r8, r2
9000a3da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a3de:	f7ff f833 	bl	90009448 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a3e2:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
9000a3e6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a3e8:	699a      	ldr	r2, [r3, #24]
9000a3ea:	0410      	lsls	r0, r2, #16
9000a3ec:	d523      	bpl.n	9000a436 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a3ee:	f7ff f82b 	bl	90009448 <HAL_GetTick>
9000a3f2:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a3f4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a3f8:	2819      	cmp	r0, #25
9000a3fa:	d9f5      	bls.n	9000a3e8 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a3fc:	699a      	ldr	r2, [r3, #24]
9000a3fe:	0411      	lsls	r1, r2, #16
9000a400:	d5f2      	bpl.n	9000a3e8 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a402:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a406:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a408:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a40a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a40c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a40e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a412:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a416:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a41a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000a41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a422:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a426:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a428:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
9000a42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000a430:	2002      	movs	r0, #2
}
9000a432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
9000a436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a438:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a43a:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a43e:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a440:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a444:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a446:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a44a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a44c:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a450:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a454:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
9000a458:	4983      	ldr	r1, [pc, #524]	; (9000a668 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
9000a45a:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a45e:	685a      	ldr	r2, [r3, #4]
9000a460:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a462:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000a464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a468:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a46a:	433a      	orrs	r2, r7
9000a46c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000a470:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a472:	4632      	mov	r2, r6
9000a474:	f7ff fc80 	bl	90009d78 <I2C_WaitOnTXISFlagUntilTimeout>
9000a478:	2800      	cmp	r0, #0
9000a47a:	f040 8091 	bne.w	9000a5a0 <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a47e:	2c01      	cmp	r4, #1
9000a480:	d00c      	beq.n	9000a49c <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a482:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000a486:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a48a:	4629      	mov	r1, r5
9000a48c:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a48e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a490:	4632      	mov	r2, r6
9000a492:	f7ff fc71 	bl	90009d78 <I2C_WaitOnTXISFlagUntilTimeout>
9000a496:	2800      	cmp	r0, #0
9000a498:	f040 8082 	bne.w	9000a5a0 <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a49c:	fa5f f388 	uxtb.w	r3, r8
9000a4a0:	f8db 4000 	ldr.w	r4, [fp]
9000a4a4:	62a3      	str	r3, [r4, #40]	; 0x28
9000a4a6:	1c6a      	adds	r2, r5, #1
9000a4a8:	d160      	bne.n	9000a56c <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a4aa:	69a3      	ldr	r3, [r4, #24]
9000a4ac:	065b      	lsls	r3, r3, #25
9000a4ae:	d5fc      	bpl.n	9000a4aa <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a4b0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a4b4:	b29b      	uxth	r3, r3
9000a4b6:	2bff      	cmp	r3, #255	; 0xff
9000a4b8:	f240 80ae 	bls.w	9000a618 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a4bc:	6863      	ldr	r3, [r4, #4]
9000a4be:	4a6a      	ldr	r2, [pc, #424]	; (9000a668 <HAL_I2C_Mem_Read+0x2bc>)
9000a4c0:	4013      	ands	r3, r2
9000a4c2:	4a6a      	ldr	r2, [pc, #424]	; (9000a66c <HAL_I2C_Mem_Read+0x2c0>)
9000a4c4:	433b      	orrs	r3, r7
9000a4c6:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a4c8:	23ff      	movs	r3, #255	; 0xff
9000a4ca:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a4ce:	6062      	str	r2, [r4, #4]
9000a4d0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000a678 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a4d4:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a4d8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000a67c <HAL_I2C_Mem_Read+0x2d0>
9000a4dc:	1c69      	adds	r1, r5, #1
9000a4de:	d127      	bne.n	9000a530 <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a4e0:	69a3      	ldr	r3, [r4, #24]
9000a4e2:	075a      	lsls	r2, r3, #29
9000a4e4:	d5fc      	bpl.n	9000a4e0 <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000a4e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a4e8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
9000a4ec:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000a4ee:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000a4f2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
9000a4f6:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000a4f8:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000a4fa:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000a4fc:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
9000a500:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
9000a504:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000a508:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a50a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000a50e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a510:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000a512:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a516:	b10a      	cbz	r2, 9000a51c <HAL_I2C_Mem_Read+0x170>
9000a518:	2b00      	cmp	r3, #0
9000a51a:	d046      	beq.n	9000a5aa <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
9000a51c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a520:	b29b      	uxth	r3, r3
9000a522:	2b00      	cmp	r3, #0
9000a524:	f000 8088 	beq.w	9000a638 <HAL_I2C_Mem_Read+0x28c>
9000a528:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a52a:	f8db 4000 	ldr.w	r4, [fp]
9000a52e:	d0d7      	beq.n	9000a4e0 <HAL_I2C_Mem_Read+0x134>
9000a530:	69a3      	ldr	r3, [r4, #24]
9000a532:	075b      	lsls	r3, r3, #29
9000a534:	d4d7      	bmi.n	9000a4e6 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a536:	f7fe ff87 	bl	90009448 <HAL_GetTick>
9000a53a:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a53c:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a540:	4285      	cmp	r5, r0
9000a542:	d301      	bcc.n	9000a548 <HAL_I2C_Mem_Read+0x19c>
9000a544:	2d00      	cmp	r5, #0
9000a546:	d1c9      	bne.n	9000a4dc <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a548:	69a3      	ldr	r3, [r4, #24]
9000a54a:	f013 0304 	ands.w	r3, r3, #4
9000a54e:	d1c5      	bne.n	9000a4dc <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a550:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a554:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a556:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a558:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a55c:	430a      	orrs	r2, r1
9000a55e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a562:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a566:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
9000a56a:	e75f      	b.n	9000a42c <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a56c:	69a3      	ldr	r3, [r4, #24]
9000a56e:	0658      	lsls	r0, r3, #25
9000a570:	d49e      	bmi.n	9000a4b0 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a572:	f7fe ff69 	bl	90009448 <HAL_GetTick>
9000a576:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a578:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a57c:	4285      	cmp	r5, r0
9000a57e:	d301      	bcc.n	9000a584 <HAL_I2C_Mem_Read+0x1d8>
9000a580:	2d00      	cmp	r5, #0
9000a582:	d190      	bne.n	9000a4a6 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a584:	69a3      	ldr	r3, [r4, #24]
9000a586:	f013 0340 	ands.w	r3, r3, #64	; 0x40
9000a58a:	d18c      	bne.n	9000a4a6 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a58c:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a590:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a592:	430a      	orrs	r2, r1
9000a594:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a598:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a59c:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a5a0:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a5a2:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a5a4:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
9000a5a8:	e740      	b.n	9000a42c <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a5aa:	f8db 2000 	ldr.w	r2, [fp]
9000a5ae:	1c68      	adds	r0, r5, #1
9000a5b0:	d111      	bne.n	9000a5d6 <HAL_I2C_Mem_Read+0x22a>
9000a5b2:	6993      	ldr	r3, [r2, #24]
9000a5b4:	0619      	lsls	r1, r3, #24
9000a5b6:	d5fc      	bpl.n	9000a5b2 <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a5b8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a5bc:	b29b      	uxth	r3, r3
9000a5be:	2bff      	cmp	r3, #255	; 0xff
9000a5c0:	d91a      	bls.n	9000a5f8 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a5c2:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a5c4:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a5c8:	ea03 0308 	and.w	r3, r3, r8
9000a5cc:	433b      	orrs	r3, r7
9000a5ce:	ea43 0309 	orr.w	r3, r3, r9
9000a5d2:	6053      	str	r3, [r2, #4]
}
9000a5d4:	e7a2      	b.n	9000a51c <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a5d6:	6993      	ldr	r3, [r2, #24]
9000a5d8:	061b      	lsls	r3, r3, #24
9000a5da:	d4ed      	bmi.n	9000a5b8 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a5dc:	f7fe ff34 	bl	90009448 <HAL_GetTick>
9000a5e0:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a5e2:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a5e6:	4285      	cmp	r5, r0
9000a5e8:	d301      	bcc.n	9000a5ee <HAL_I2C_Mem_Read+0x242>
9000a5ea:	2d00      	cmp	r5, #0
9000a5ec:	d1df      	bne.n	9000a5ae <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a5ee:	6993      	ldr	r3, [r2, #24]
9000a5f0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a5f4:	d1db      	bne.n	9000a5ae <HAL_I2C_Mem_Read+0x202>
9000a5f6:	e7ab      	b.n	9000a550 <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
9000a5f8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a5fc:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a5fe:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000a600:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a604:	6853      	ldr	r3, [r2, #4]
9000a606:	ea03 0308 	and.w	r3, r3, r8
9000a60a:	433b      	orrs	r3, r7
9000a60c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a614:	6053      	str	r3, [r2, #4]
}
9000a616:	e781      	b.n	9000a51c <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
9000a618:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a61c:	4912      	ldr	r1, [pc, #72]	; (9000a668 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
9000a61e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a620:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
9000a622:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a626:	6863      	ldr	r3, [r4, #4]
9000a628:	400b      	ands	r3, r1
9000a62a:	433b      	orrs	r3, r7
9000a62c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a630:	4a0f      	ldr	r2, [pc, #60]	; (9000a670 <HAL_I2C_Mem_Read+0x2c4>)
9000a632:	431a      	orrs	r2, r3
9000a634:	6062      	str	r2, [r4, #4]
}
9000a636:	e74b      	b.n	9000a4d0 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a638:	4632      	mov	r2, r6
9000a63a:	4629      	mov	r1, r5
9000a63c:	4658      	mov	r0, fp
9000a63e:	f7ff fc51 	bl	90009ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
9000a642:	b970      	cbnz	r0, 9000a662 <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a644:	f8db 3000 	ldr.w	r3, [fp]
9000a648:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a64a:	4c0a      	ldr	r4, [pc, #40]	; (9000a674 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a64c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a64e:	685a      	ldr	r2, [r3, #4]
9000a650:	4022      	ands	r2, r4
9000a652:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a654:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a658:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a65c:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
9000a660:	e6e4      	b.n	9000a42c <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000a662:	2001      	movs	r0, #1
9000a664:	e6e2      	b.n	9000a42c <HAL_I2C_Mem_Read+0x80>
9000a666:	bf00      	nop
9000a668:	fc009800 	.word	0xfc009800
9000a66c:	01ff2400 	.word	0x01ff2400
9000a670:	02002400 	.word	0x02002400
9000a674:	fe00e800 	.word	0xfe00e800
9000a678:	fc009c00 	.word	0xfc009c00
9000a67c:	01ff0000 	.word	0x01ff0000

9000a680 <HAL_I2C_GetState>:
  return hi2c->State;
9000a680:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
9000a684:	4770      	bx	lr
9000a686:	bf00      	nop

9000a688 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
9000a688:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
9000a68a:	4770      	bx	lr

9000a68c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000a68c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000a690:	2a20      	cmp	r2, #32
9000a692:	d123      	bne.n	9000a6dc <HAL_I2CEx_ConfigAnalogFilter+0x50>
9000a694:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000a698:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000a69c:	4603      	mov	r3, r0
9000a69e:	2a01      	cmp	r2, #1
9000a6a0:	d01c      	beq.n	9000a6dc <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000a6a2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a6a4:	2024      	movs	r0, #36	; 0x24
{
9000a6a6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a6a8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a6ac:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000a6b0:	6810      	ldr	r0, [r2, #0]
9000a6b2:	f020 0001 	bic.w	r0, r0, #1
9000a6b6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000a6b8:	6810      	ldr	r0, [r2, #0]
9000a6ba:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000a6be:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000a6c0:	6810      	ldr	r0, [r2, #0]
9000a6c2:	4301      	orrs	r1, r0

    return HAL_OK;
9000a6c4:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
9000a6c6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000a6c8:	6811      	ldr	r1, [r2, #0]
9000a6ca:	f041 0101 	orr.w	r1, r1, #1
9000a6ce:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000a6d0:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a6d4:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000a6d8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000a6dc:	2002      	movs	r0, #2
}
9000a6de:	4770      	bx	lr

9000a6e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000a6e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000a6e4:	2a20      	cmp	r2, #32
9000a6e6:	d122      	bne.n	9000a72e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
9000a6e8:	4603      	mov	r3, r0
{
9000a6ea:	b500      	push	{lr}
9000a6ec:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000a6f0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000a6f4:	2a01      	cmp	r2, #1
9000a6f6:	d01c      	beq.n	9000a732 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000a6f8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a6fa:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a6fc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a700:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
9000a704:	6810      	ldr	r0, [r2, #0]
9000a706:	f020 0001 	bic.w	r0, r0, #1
9000a70a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000a70c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000a70e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000a712:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
9000a716:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
9000a718:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000a71a:	6811      	ldr	r1, [r2, #0]
9000a71c:	f041 0101 	orr.w	r1, r1, #1
9000a720:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000a722:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a726:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000a72a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000a72e:	2002      	movs	r0, #2
}
9000a730:	4770      	bx	lr
    return HAL_BUSY;
9000a732:	2002      	movs	r0, #2
}
9000a734:	f85d fb04 	ldr.w	pc, [sp], #4

9000a738 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
9000a738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a73c:	460d      	mov	r5, r1
9000a73e:	4614      	mov	r4, r2
9000a740:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000a742:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
9000a744:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
9000a746:	2701      	movs	r7, #1
  p = 0;
9000a748:	f04f 0800 	mov.w	r8, #0
9000a74c:	e006      	b.n	9000a75c <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000a74e:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000a752:	eb06 0308 	add.w	r3, r6, r8
9000a756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000a75a:	d837      	bhi.n	9000a7cc <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
9000a75c:	eb05 0008 	add.w	r0, r5, r8
9000a760:	4632      	mov	r2, r6
9000a762:	4639      	mov	r1, r7
    while (i != 0UL)
9000a764:	b116      	cbz	r6, 9000a76c <JPEG_Bits_To_SizeCodes+0x34>
      p++;
9000a766:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
9000a768:	f01c ffa8 	bl	900276bc <memset>
  for (l = 0; l < 16UL; l++)
9000a76c:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000a76e:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000a772:	d1ec      	bne.n	9000a74e <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
9000a774:	2300      	movs	r3, #0
9000a776:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
9000a77a:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000a77e:	7828      	ldrb	r0, [r5, #0]
9000a780:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000a782:	b300      	cbz	r0, 9000a7c6 <JPEG_Bits_To_SizeCodes+0x8e>
9000a784:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000a788:	2701      	movs	r7, #1
  p = 0;
9000a78a:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
9000a78c:	4288      	cmp	r0, r1
9000a78e:	d10f      	bne.n	9000a7b0 <JPEG_Bits_To_SizeCodes+0x78>
9000a790:	eb02 0008 	add.w	r0, r2, r8
9000a794:	1c56      	adds	r6, r2, #1
9000a796:	eb05 0c02 	add.w	ip, r5, r2
9000a79a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000a79e:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000a7a0:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
9000a7a4:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
9000a7a6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000a7aa:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000a7ac:	458e      	cmp	lr, r1
9000a7ae:	d0f7      	beq.n	9000a7a0 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000a7b0:	291f      	cmp	r1, #31
9000a7b2:	d80b      	bhi.n	9000a7cc <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000a7b4:	fa07 f001 	lsl.w	r0, r7, r1
9000a7b8:	4298      	cmp	r0, r3
9000a7ba:	d907      	bls.n	9000a7cc <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000a7bc:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000a7be:	005b      	lsls	r3, r3, #1
    si++;
9000a7c0:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000a7c2:	2800      	cmp	r0, #0
9000a7c4:	d1e2      	bne.n	9000a78c <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
9000a7c6:	2000      	movs	r0, #0
}
9000a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000a7cc:	2001      	movs	r0, #1
}
9000a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000a7d2:	bf00      	nop

9000a7d4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
9000a7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
9000a7d6:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000a7da:	460d      	mov	r5, r1
9000a7dc:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000a7de:	ab01      	add	r3, sp, #4
9000a7e0:	aa43      	add	r2, sp, #268	; 0x10c
9000a7e2:	a902      	add	r1, sp, #8
9000a7e4:	f7ff ffa8 	bl	9000a738 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000a7e8:	b9d0      	cbnz	r0, 9000a820 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000a7ea:	9f01      	ldr	r7, [sp, #4]
9000a7ec:	b1c7      	cbz	r7, 9000a820 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000a7ee:	370f      	adds	r7, #15
9000a7f0:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
9000a7f4:	a902      	add	r1, sp, #8
9000a7f6:	f104 0c0f 	add.w	ip, r4, #15
9000a7fa:	4427      	add	r7, r4
9000a7fc:	e009      	b.n	9000a812 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000a802:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a804:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a808:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a80c:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a80e:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000a810:	d006      	beq.n	9000a820 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000a812:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000a816:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a818:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000a81c:	d9ef      	bls.n	9000a7fe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000a81e:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a820:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
9000a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000a826:	bf00      	nop

9000a828 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
9000a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000a82c:	6804      	ldr	r4, [r0, #0]
{
9000a82e:	b093      	sub	sp, #76	; 0x4c
9000a830:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000a832:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
9000a836:	429a      	cmp	r2, r3
9000a838:	f000 809d 	beq.w	9000a976 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000a83c:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000a840:	429a      	cmp	r2, r3
9000a842:	d003      	beq.n	9000a84c <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
9000a844:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a846:	b013      	add	sp, #76	; 0x4c
9000a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000a84c:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000a850:	a903      	add	r1, sp, #12
9000a852:	f7ff ffbf 	bl	9000a7d4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
9000a856:	2800      	cmp	r0, #0
9000a858:	d1f5      	bne.n	9000a846 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
9000a85a:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a85e:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a862:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
9000a866:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a868:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
9000a86c:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a86e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
9000a872:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a876:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
9000a87a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a87e:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
9000a882:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a884:	f89d 9015 	ldrb.w	r9, [sp, #21]
9000a888:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a88c:	f89d c014 	ldrb.w	ip, [sp, #20]
9000a890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a894:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a898:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a89c:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8a0:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8a2:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9000a8aa:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000a8ae:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8b2:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8b6:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8ba:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000a8be:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8c2:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
9000a8c4:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8c8:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000a8cc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8d0:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
9000a8d2:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8d6:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8d8:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
9000a8dc:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8e0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8e4:	f89d 600f 	ldrb.w	r6, [sp, #15]
9000a8e8:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8ec:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8f0:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8f2:	9b01      	ldr	r3, [sp, #4]
9000a8f4:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8f8:	f89d 500d 	ldrb.w	r5, [sp, #13]
9000a8fc:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a900:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
9000a904:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a908:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
9000a90a:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a90e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a912:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9000a916:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a91a:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a91e:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a922:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
9000a926:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
9000a92a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000a92e:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a932:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
9000a936:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a938:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000a93c:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000a93e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000a942:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a946:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
9000a94a:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a94c:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000a950:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000a952:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000a956:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a95a:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000a95e:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a960:	f89d 3018 	ldrb.w	r3, [sp, #24]
9000a964:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
9000a968:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000a96c:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000a970:	b013      	add	sp, #76	; 0x4c
9000a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000a976:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
9000a97a:	e769      	b.n	9000a850 <JPEG_Set_HuffDC_Mem+0x28>

9000a97c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000a97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000a980:	6804      	ldr	r4, [r0, #0]
{
9000a982:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
9000a986:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000a988:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
9000a98c:	429a      	cmp	r2, r3
9000a98e:	d042      	beq.n	9000aa16 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000a990:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
9000a994:	429a      	cmp	r2, r3
9000a996:	d004      	beq.n	9000a9a2 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000a998:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a99a:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000a99e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000a9a2:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000a9a6:	4628      	mov	r0, r5
9000a9a8:	466b      	mov	r3, sp
9000a9aa:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000a9ae:	a901      	add	r1, sp, #4
9000a9b0:	f7ff fec2 	bl	9000a738 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000a9b4:	2800      	cmp	r0, #0
9000a9b6:	d1f0      	bne.n	9000a99a <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000a9b8:	9b00      	ldr	r3, [sp, #0]
9000a9ba:	b37b      	cbz	r3, 9000aa1c <JPEG_Set_HuffAC_Mem+0xa0>
9000a9bc:	330f      	adds	r3, #15
9000a9be:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000a9c2:	f10d 0c04 	add.w	ip, sp, #4
9000a9c6:	f105 020f 	add.w	r2, r5, #15
9000a9ca:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a9ce:	ae42      	add	r6, sp, #264	; 0x108
9000a9d0:	e011      	b.n	9000a9f6 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
9000a9d2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000a9d6:	2ba1      	cmp	r3, #161	; 0xa1
9000a9d8:	d8de      	bhi.n	9000a998 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a9da:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a9de:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000a9e2:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000a9e6:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a9e8:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a9ec:	4631      	mov	r1, r6
9000a9ee:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a9f2:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
9000a9f4:	d013      	beq.n	9000aa1e <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000a9f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000a9fa:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000a9fc:	2900      	cmp	r1, #0
9000a9fe:	d0ec      	beq.n	9000a9da <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
9000aa00:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
9000aa02:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000aa06:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000aa08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
9000aa0c:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000aa10:	d1df      	bne.n	9000a9d2 <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
9000aa12:	23a1      	movs	r3, #161	; 0xa1
9000aa14:	e7e1      	b.n	9000a9da <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000aa16:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000aa1a:	e7c4      	b.n	9000a9a6 <JPEG_Set_HuffAC_Mem+0x2a>
9000aa1c:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000aa1e:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000aa22:	4a1a      	ldr	r2, [pc, #104]	; (9000aa8c <JPEG_Set_HuffAC_Mem+0x110>)
9000aa24:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000aa28:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000aa2c:	6023      	str	r3, [r4, #0]
9000aa2e:	6063      	str	r3, [r4, #4]
9000aa30:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
9000aa34:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000aa36:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000aa3a:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000aa3c:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000aa40:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
9000aa44:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000aa46:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000aa4a:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000aa4c:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000aa50:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa52:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa56:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa5a:	0212      	lsls	r2, r2, #8
9000aa5c:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa60:	021b      	lsls	r3, r3, #8
9000aa62:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa66:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000aa6a:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa70:	433a      	orrs	r2, r7
    while (i > 1UL)
9000aa72:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aa74:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000aa78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000aa7c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000aa80:	d1e7      	bne.n	9000aa52 <JPEG_Set_HuffAC_Mem+0xd6>
}
9000aa82:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000aa86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000aa8a:	bf00      	nop
9000aa8c:	0fd10fd0 	.word	0x0fd10fd0

9000aa90 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000aa90:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000aa92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000aa96:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000aa98:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000aa9a:	f003 0303 	and.w	r3, r3, #3
9000aa9e:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000aaa0:	6803      	ldr	r3, [r0, #0]
9000aaa2:	685a      	ldr	r2, [r3, #4]
9000aaa4:	bf0c      	ite	eq
9000aaa6:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000aaaa:	f022 0208 	bicne.w	r2, r2, #8
9000aaae:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000aab0:	681a      	ldr	r2, [r3, #0]
9000aab2:	f022 0201 	bic.w	r2, r2, #1
9000aab6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000aab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aaba:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000aabe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000aac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000aac6:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000aac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aaca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000aace:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000aad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000aad2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000aad6:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000aad8:	681a      	ldr	r2, [r3, #0]
9000aada:	f042 0201 	orr.w	r2, r2, #1
9000aade:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000aae0:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000aae2:	f002 020c 	and.w	r2, r2, #12
9000aae6:	2a08      	cmp	r2, #8
9000aae8:	d00a      	beq.n	9000ab00 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000aaea:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000aaec:	f002 020c 	and.w	r2, r2, #12
9000aaf0:	2a0c      	cmp	r2, #12
9000aaf2:	d000      	beq.n	9000aaf6 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
9000aaf4:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000aaf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aaf8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000aafc:	631a      	str	r2, [r3, #48]	; 0x30
}
9000aafe:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000ab00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000ab02:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000ab06:	631a      	str	r2, [r3, #48]	; 0x30
9000ab08:	4770      	bx	lr
9000ab0a:	bf00      	nop

9000ab0c <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000ab0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000ab0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
9000ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000ab12:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
9000ab14:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000ab16:	42aa      	cmp	r2, r5
9000ab18:	d32d      	bcc.n	9000ab76 <JPEG_DMA_StartProcess+0x6a>
9000ab1a:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000ab1c:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000ab1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000ab20:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000ab22:	42b3      	cmp	r3, r6
9000ab24:	d327      	bcc.n	9000ab76 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000ab26:	4f1b      	ldr	r7, [pc, #108]	; (9000ab94 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000ab28:	f8df c074 	ldr.w	ip, [pc, #116]	; 9000aba0 <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000ab2c:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000ab2e:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000ab32:	4919      	ldr	r1, [pc, #100]	; (9000ab98 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
9000ab34:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000ab36:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000ab38:	4918      	ldr	r1, [pc, #96]	; (9000ab9c <JPEG_DMA_StartProcess+0x90>)
9000ab3a:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000ab3c:	b1a5      	cbz	r5, 9000ab68 <JPEG_DMA_StartProcess+0x5c>
9000ab3e:	b19e      	cbz	r6, 9000ab68 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000ab40:	fbb2 f1f5 	udiv	r1, r2, r5
9000ab44:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000ab48:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000ab4a:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000ab4c:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000ab4e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000ab50:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000ab52:	fbb3 f2f6 	udiv	r2, r3, r6
9000ab56:	fb06 3212 	mls	r2, r6, r2, r3
9000ab5a:	1a9b      	subs	r3, r3, r2
9000ab5c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000ab5e:	9500      	str	r5, [sp, #0]
9000ab60:	69e2      	ldr	r2, [r4, #28]
9000ab62:	f001 fbb5 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000ab66:	b148      	cbz	r0, 9000ab7c <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000ab68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000ab6a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000ab6c:	f043 0304 	orr.w	r3, r3, #4
9000ab70:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000ab72:	b003      	add	sp, #12
9000ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000ab76:	2001      	movs	r0, #1
}
9000ab78:	b003      	add	sp, #12
9000ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000ab7c:	6822      	ldr	r2, [r4, #0]
9000ab7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ab80:	69a1      	ldr	r1, [r4, #24]
9000ab82:	3240      	adds	r2, #64	; 0x40
9000ab84:	9500      	str	r5, [sp, #0]
9000ab86:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000ab88:	f001 fba2 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000ab8c:	2800      	cmp	r0, #0
9000ab8e:	d0f3      	beq.n	9000ab78 <JPEG_DMA_StartProcess+0x6c>
9000ab90:	e7ea      	b.n	9000ab68 <JPEG_DMA_StartProcess+0x5c>
9000ab92:	bf00      	nop
9000ab94:	9000b0c5 	.word	0x9000b0c5
9000ab98:	9000b33d 	.word	0x9000b33d
9000ab9c:	9000b3bd 	.word	0x9000b3bd
9000aba0:	9000b0f1 	.word	0x9000b0f1

9000aba4 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000aba4:	6803      	ldr	r3, [r0, #0]
9000aba6:	685a      	ldr	r2, [r3, #4]
9000aba8:	f002 0203 	and.w	r2, r2, #3
9000abac:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000abae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000abb2:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000abb4:	f000 8094 	beq.w	9000ace0 <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000abb8:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000abba:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000abbc:	f014 0403 	ands.w	r4, r4, #3
9000abc0:	d172      	bne.n	9000aca8 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000abc2:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000abc4:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000abc6:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000abc8:	68da      	ldr	r2, [r3, #12]
9000abca:	0c12      	lsrs	r2, r2, #16
9000abcc:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000abce:	4a5f      	ldr	r2, [pc, #380]	; (9000ad4c <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000abd0:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000abd4:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
9000abd8:	2600      	movs	r6, #0
9000abda:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000abde:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000abe2:	f241 3488 	movw	r4, #5000	; 0x1388
9000abe6:	e033      	b.n	9000ac50 <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000abe8:	f892 8001 	ldrb.w	r8, [r2, #1]
9000abec:	fb0e f707 	mul.w	r7, lr, r7
9000abf0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000abf2:	f811 8008 	ldrb.w	r8, [r1, r8]
9000abf6:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000abfa:	2f64      	cmp	r7, #100	; 0x64
9000abfc:	d961      	bls.n	9000acc2 <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000abfe:	fbb4 f7f7 	udiv	r7, r4, r7
9000ac02:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac04:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000ac08:	2f01      	cmp	r7, #1
9000ac0a:	d03d      	beq.n	9000ac88 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ac0c:	f892 8002 	ldrb.w	r8, [r2, #2]
9000ac10:	fb0e f707 	mul.w	r7, lr, r7
9000ac14:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000ac16:	f811 8008 	ldrb.w	r8, [r1, r8]
9000ac1a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000ac1e:	2f64      	cmp	r7, #100	; 0x64
9000ac20:	d94a      	bls.n	9000acb8 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
9000ac22:	fbb4 f7f7 	udiv	r7, r4, r7
9000ac26:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac28:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000ac2a:	2b01      	cmp	r3, #1
9000ac2c:	d030      	beq.n	9000ac90 <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ac2e:	78d7      	ldrb	r7, [r2, #3]
9000ac30:	fb0e f303 	mul.w	r3, lr, r3
9000ac34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000ac36:	5dcf      	ldrb	r7, [r1, r7]
9000ac38:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000ac3c:	2b64      	cmp	r3, #100	; 0x64
9000ac3e:	d94a      	bls.n	9000acd6 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000ac40:	fbb4 f3f3 	udiv	r3, r4, r3
9000ac44:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac46:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000ac48:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac4c:	4295      	cmp	r5, r2
9000ac4e:	d025      	beq.n	9000ac9c <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000ac50:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac54:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000ac56:	2f01      	cmp	r7, #1
9000ac58:	d02c      	beq.n	9000acb4 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ac5a:	f892 8000 	ldrb.w	r8, [r2]
9000ac5e:	fb0e f707 	mul.w	r7, lr, r7
9000ac62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000ac64:	f811 8008 	ldrb.w	r8, [r1, r8]
9000ac68:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000ac6c:	2f64      	cmp	r7, #100	; 0x64
9000ac6e:	d92d      	bls.n	9000accc <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
9000ac70:	fbb4 f7f7 	udiv	r7, r4, r7
9000ac74:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac76:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000ac7a:	2f01      	cmp	r7, #1
9000ac7c:	d1b4      	bne.n	9000abe8 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac7e:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000ac82:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000ac84:	2f01      	cmp	r7, #1
9000ac86:	d1c1      	bne.n	9000ac0c <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac88:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000ac8a:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000ac8c:	2b01      	cmp	r3, #1
9000ac8e:	d1ce      	bne.n	9000ac2e <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac90:	3204      	adds	r2, #4
        quality += 100UL;
9000ac92:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000ac94:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac98:	4295      	cmp	r5, r2
9000ac9a:	d1d9      	bne.n	9000ac50 <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
9000ac9c:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000ac9e:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000aca0:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000aca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000aca8:	f002 0203 	and.w	r2, r2, #3
9000acac:	2a03      	cmp	r2, #3
9000acae:	d14a      	bne.n	9000ad46 <HAL_JPEG_GetInfo.part.0+0x1a2>
9000acb0:	2430      	movs	r4, #48	; 0x30
9000acb2:	e016      	b.n	9000ace2 <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
9000acb4:	3664      	adds	r6, #100	; 0x64
9000acb6:	e7de      	b.n	9000ac76 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
9000acb8:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000acbc:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000acc0:	e7b2      	b.n	9000ac28 <HAL_JPEG_GetInfo.part.0+0x84>
9000acc2:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000acc6:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000acca:	e79b      	b.n	9000ac04 <HAL_JPEG_GetInfo.part.0+0x60>
9000accc:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000acd0:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000acd4:	e7cf      	b.n	9000ac76 <HAL_JPEG_GetInfo.part.0+0xd2>
9000acd6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000acda:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000acde:	e7b2      	b.n	9000ac46 <HAL_JPEG_GetInfo.part.0+0xa2>
9000ace0:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ace2:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000ace4:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ace8:	0c12      	lsrs	r2, r2, #16
9000acea:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000acee:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000acf0:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000acf2:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000acf4:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000acf6:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000acf8:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000acfc:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000ad00:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000ad04:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000ad08:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000ad0c:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000ad10:	d108      	bne.n	9000ad24 <HAL_JPEG_GetInfo.part.0+0x180>
9000ad12:	2d01      	cmp	r5, #1
9000ad14:	d106      	bne.n	9000ad24 <HAL_JPEG_GetInfo.part.0+0x180>
9000ad16:	f016 0f0f 	tst.w	r6, #15
9000ad1a:	bf0c      	ite	eq
9000ad1c:	2401      	moveq	r4, #1
9000ad1e:	2400      	movne	r4, #0
9000ad20:	0064      	lsls	r4, r4, #1
9000ad22:	e754      	b.n	9000abce <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000ad24:	ea42 020c 	orr.w	r2, r2, ip
9000ad28:	f012 040f 	ands.w	r4, r2, #15
9000ad2c:	f43f af4f 	beq.w	9000abce <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000ad30:	ea4c 0206 	orr.w	r2, ip, r6
9000ad34:	f3c2 0203 	ubfx	r2, r2, #0, #4
9000ad38:	2d03      	cmp	r5, #3
9000ad3a:	bf08      	it	eq
9000ad3c:	2a00      	cmpeq	r2, #0
9000ad3e:	bf0c      	ite	eq
9000ad40:	2401      	moveq	r4, #1
9000ad42:	2400      	movne	r4, #0
9000ad44:	e743      	b.n	9000abce <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
9000ad46:	2001      	movs	r0, #1
}
9000ad48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ad4c:	9002b4d8 	.word	0x9002b4d8

9000ad50 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000ad50:	2800      	cmp	r0, #0
9000ad52:	f000 810b 	beq.w	9000af6c <HAL_JPEG_Init+0x21c>
{
9000ad56:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000ad58:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000ad5c:	4604      	mov	r4, r0
9000ad5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ad62:	2b00      	cmp	r3, #0
9000ad64:	f000 80fd 	beq.w	9000af62 <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000ad68:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000ad6a:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
9000ad6c:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000ad6e:	4880      	ldr	r0, [pc, #512]	; (9000af70 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000ad70:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000ad74:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad76:	f041 0101 	orr.w	r1, r1, #1
9000ad7a:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000ad7c:	6811      	ldr	r1, [r2, #0]
9000ad7e:	f021 0101 	bic.w	r1, r1, #1
9000ad82:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000ad84:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad86:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000ad8a:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000ad8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad8e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000ad92:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000ad94:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad96:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000ad9a:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000ad9c:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000ad9e:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000ada2:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000ada4:	4973      	ldr	r1, [pc, #460]	; (9000af74 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000ada6:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ada8:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000adaa:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000adac:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000adb0:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000adb4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000adb8:	4b6f      	ldr	r3, [pc, #444]	; (9000af78 <HAL_JPEG_Init+0x228>)
9000adba:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000adbe:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000adc2:	486e      	ldr	r0, [pc, #440]	; (9000af7c <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000adc4:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000adc8:	4b6d      	ldr	r3, [pc, #436]	; (9000af80 <HAL_JPEG_Init+0x230>)
9000adca:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000adce:	496d      	ldr	r1, [pc, #436]	; (9000af84 <HAL_JPEG_Init+0x234>)
9000add0:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000add4:	4b6c      	ldr	r3, [pc, #432]	; (9000af88 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000add6:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000adda:	486c      	ldr	r0, [pc, #432]	; (9000af8c <HAL_JPEG_Init+0x23c>)
9000addc:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
9000ade0:	496b      	ldr	r1, [pc, #428]	; (9000af90 <HAL_JPEG_Init+0x240>)
9000ade2:	4b6c      	ldr	r3, [pc, #432]	; (9000af94 <HAL_JPEG_Init+0x244>)
9000ade4:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000ade8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000adec:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000adf0:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
9000adf4:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000adf8:	4967      	ldr	r1, [pc, #412]	; (9000af98 <HAL_JPEG_Init+0x248>)
9000adfa:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000adfc:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000ae00:	430b      	orrs	r3, r1
  *address = value;
9000ae02:	4966      	ldr	r1, [pc, #408]	; (9000af9c <HAL_JPEG_Init+0x24c>)
9000ae04:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000ae08:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000ae0c:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
9000ae10:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ae12:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000ae16:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000ae18:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000ae1c:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
9000ae20:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ae22:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000ae26:	ea43 030c 	orr.w	r3, r3, ip
9000ae2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ae2e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000ae32:	d1eb      	bne.n	9000ae0c <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000ae34:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae38:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000ae3c:	4856      	ldr	r0, [pc, #344]	; (9000af98 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae3e:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000ae40:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000ae42:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000ae46:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000ae4a:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000ae4e:	4003      	ands	r3, r0
  *address = value;
9000ae50:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae54:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000ae58:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
9000ae5c:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000ae60:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000ae64:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000ae68:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000ae6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000ae6e:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000ae72:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000ae76:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000ae78:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000ae7a:	4b49      	ldr	r3, [pc, #292]	; (9000afa0 <HAL_JPEG_Init+0x250>)
  *address = value;
9000ae7c:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000ae80:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000ae84:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
9000ae88:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000ae8c:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000ae90:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000ae94:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000ae96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000ae9a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000ae9e:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000aea2:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000aea4:	483f      	ldr	r0, [pc, #252]	; (9000afa4 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000aea6:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000aea8:	4b3f      	ldr	r3, [pc, #252]	; (9000afa8 <HAL_JPEG_Init+0x258>)
  *address = value;
9000aeaa:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000aeae:	493f      	ldr	r1, [pc, #252]	; (9000afac <HAL_JPEG_Init+0x25c>)
9000aeb0:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000aeb4:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000aeb8:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000aebc:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000aec0:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000aec4:	493a      	ldr	r1, [pc, #232]	; (9000afb0 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000aec6:	b29b      	uxth	r3, r3
9000aec8:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000aecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000aed0:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000aed4:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000aed8:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000aeda:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000aede:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
9000aee0:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000aee4:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000aee8:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000aeea:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000aeee:	ea43 030e 	orr.w	r3, r3, lr
9000aef2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000aef6:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000aefa:	d1eb      	bne.n	9000aed4 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000aefc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
9000af00:	4926      	ldr	r1, [pc, #152]	; (9000af9c <HAL_JPEG_Init+0x24c>)
9000af02:	4620      	mov	r0, r4
9000af04:	f7ff fd3a 	bl	9000a97c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000af08:	b118      	cbz	r0, 9000af12 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000af0a:	2301      	movs	r3, #1
    return HAL_ERROR;
9000af0c:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000af0e:	6523      	str	r3, [r4, #80]	; 0x50
}
9000af10:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
9000af12:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
9000af14:	4620      	mov	r0, r4
9000af16:	4926      	ldr	r1, [pc, #152]	; (9000afb0 <HAL_JPEG_Init+0x260>)
9000af18:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000af1c:	f7ff fd2e 	bl	9000a97c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000af20:	2800      	cmp	r0, #0
9000af22:	d1f2      	bne.n	9000af0a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000af24:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000af26:	4620      	mov	r0, r4
9000af28:	4922      	ldr	r1, [pc, #136]	; (9000afb4 <HAL_JPEG_Init+0x264>)
9000af2a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000af2e:	f7ff fc7b 	bl	9000a828 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000af32:	2800      	cmp	r0, #0
9000af34:	d1e9      	bne.n	9000af0a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000af36:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000af38:	4620      	mov	r0, r4
9000af3a:	491f      	ldr	r1, [pc, #124]	; (9000afb8 <HAL_JPEG_Init+0x268>)
9000af3c:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000af40:	f7ff fc72 	bl	9000a828 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000af44:	2800      	cmp	r0, #0
9000af46:	d1e0      	bne.n	9000af0a <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000af48:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000af4a:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000af4c:	6853      	ldr	r3, [r2, #4]
9000af4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000af52:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000af54:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000af56:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000af58:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
9000af5c:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000af5e:	6560      	str	r0, [r4, #84]	; 0x54
}
9000af60:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000af62:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000af66:	f7f9 fcdb 	bl	90004920 <HAL_JPEG_MspInit>
9000af6a:	e6fd      	b.n	9000ad68 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
9000af6c:	2001      	movs	r0, #1
}
9000af6e:	4770      	bx	lr
9000af70:	9002b498 	.word	0x9002b498
9000af74:	9002b420 	.word	0x9002b420
9000af78:	01050100 	.word	0x01050100
9000af7c:	0b0a0908 	.word	0x0b0a0908
9000af80:	07060504 	.word	0x07060504
9000af84:	03020100 	.word	0x03020100
9000af88:	7d010000 	.word	0x7d010000
9000af8c:	04040505 	.word	0x04040505
9000af90:	03040203 	.word	0x03040203
9000af94:	03010200 	.word	0x03010200
9000af98:	ffff0000 	.word	0xffff0000
9000af9c:	9002b36c 	.word	0x9002b36c
9000afa0:	09080706 	.word	0x09080706
9000afa4:	01000404 	.word	0x01000404
9000afa8:	04040201 	.word	0x04040201
9000afac:	05070403 	.word	0x05070403
9000afb0:	9002b2b8 	.word	0x9002b2b8
9000afb4:	9002b47c 	.word	0x9002b47c
9000afb8:	9002b460 	.word	0x9002b460

9000afbc <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000afbc:	2b00      	cmp	r3, #0
9000afbe:	bf18      	it	ne
9000afc0:	2900      	cmpne	r1, #0
9000afc2:	d03b      	beq.n	9000b03c <HAL_JPEG_Decode_DMA+0x80>
{
9000afc4:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000afc6:	fab0 f580 	clz	r5, r0
9000afca:	4604      	mov	r4, r0
9000afcc:	096d      	lsrs	r5, r5, #5
9000afce:	b330      	cbz	r0, 9000b01e <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
9000afd0:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
9000afd4:	f1bc 0f01 	cmp.w	ip, #1
9000afd8:	d02e      	beq.n	9000b038 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000afda:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000afde:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000afe2:	45f4      	cmp	ip, lr
9000afe4:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000afe8:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000afec:	d119      	bne.n	9000b022 <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000afee:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
9000aff0:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
9000aff4:	9b04      	ldr	r3, [sp, #16]
9000aff6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000aff8:	2304      	movs	r3, #4
9000affa:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000affe:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b000:	f023 030f 	bic.w	r3, r3, #15
9000b004:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000b006:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b008:	f043 030e 	orr.w	r3, r3, #14
9000b00c:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000b00e:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
9000b010:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
9000b012:	f7ff fd3d 	bl	9000aa90 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000b016:	f7ff fd79 	bl	9000ab0c <JPEG_DMA_StartProcess>
9000b01a:	b930      	cbnz	r0, 9000b02a <HAL_JPEG_Decode_DMA+0x6e>
}
9000b01c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b01e:	2001      	movs	r0, #1
}
9000b020:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000b022:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000b024:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000b028:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b02a:	2306      	movs	r3, #6
      return HAL_ERROR;
9000b02c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000b02e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b032:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000b036:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000b038:	2002      	movs	r0, #2
}
9000b03a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b03c:	2001      	movs	r0, #1
}
9000b03e:	4770      	bx	lr

9000b040 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b040:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b042:	f003 030c 	and.w	r3, r3, #12
9000b046:	2b0c      	cmp	r3, #12
9000b048:	d01a      	beq.n	9000b080 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b04a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b04c:	f003 030c 	and.w	r3, r3, #12
9000b050:	2b08      	cmp	r3, #8
9000b052:	d001      	beq.n	9000b058 <HAL_JPEG_Pause+0x18>
}
9000b054:	2000      	movs	r0, #0
9000b056:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b058:	07ca      	lsls	r2, r1, #31
9000b05a:	d41f      	bmi.n	9000b09c <HAL_JPEG_Pause+0x5c>
9000b05c:	f04f 3cff 	mov.w	ip, #4294967295
9000b060:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b064:	078b      	lsls	r3, r1, #30
9000b066:	d504      	bpl.n	9000b072 <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b068:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b06a:	4694      	mov	ip, r2
9000b06c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b070:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b072:	6802      	ldr	r2, [r0, #0]
}
9000b074:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b076:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b078:	ea03 030c 	and.w	r3, r3, ip
9000b07c:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b07e:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b080:	07cb      	lsls	r3, r1, #31
9000b082:	d503      	bpl.n	9000b08c <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b084:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b08a:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b08c:	0789      	lsls	r1, r1, #30
9000b08e:	d5e1      	bpl.n	9000b054 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b090:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b096:	6543      	str	r3, [r0, #84]	; 0x54
}
9000b098:	2000      	movs	r0, #0
9000b09a:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b09c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b09e:	f06f 0c06 	mvn.w	ip, #6
9000b0a2:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000b0a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b0aa:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b0ac:	e7da      	b.n	9000b064 <HAL_JPEG_Pause+0x24>
9000b0ae:	bf00      	nop

9000b0b0 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000b0b0:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000b0b2:	6282      	str	r2, [r0, #40]	; 0x28
}
9000b0b4:	4770      	bx	lr
9000b0b6:	bf00      	nop

9000b0b8 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000b0b8:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000b0ba:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000b0bc:	4770      	bx	lr
9000b0be:	bf00      	nop

9000b0c0 <HAL_JPEG_EncodeCpltCallback>:
9000b0c0:	4770      	bx	lr
9000b0c2:	bf00      	nop

9000b0c4 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b0c4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b0c6:	2101      	movs	r1, #1
{
9000b0c8:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b0ca:	6803      	ldr	r3, [r0, #0]
9000b0cc:	681a      	ldr	r2, [r3, #0]
9000b0ce:	f022 0201 	bic.w	r2, r2, #1
9000b0d2:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b0d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b0d6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b0da:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b0dc:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b0e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000b0e2:	f043 0304 	orr.w	r3, r3, #4
9000b0e6:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000b0e8:	f7f6 fbb8 	bl	9000185c <HAL_JPEG_ErrorCallback>
}
9000b0ec:	bd08      	pop	{r3, pc}
9000b0ee:	bf00      	nop

9000b0f0 <JPEG_MDMAInCpltCallback>:
{
9000b0f0:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b0f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b0f4:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b0f8:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b0fa:	6822      	ldr	r2, [r4, #0]
9000b0fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b0fe:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
9000b102:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b104:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b106:	400b      	ands	r3, r1
9000b108:	2b0c      	cmp	r3, #12
9000b10a:	d001      	beq.n	9000b110 <JPEG_MDMAInCpltCallback+0x20>
}
9000b10c:	b003      	add	sp, #12
9000b10e:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b110:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b112:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b116:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b118:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b11a:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b11e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b120:	1a9b      	subs	r3, r3, r2
9000b122:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b124:	6a21      	ldr	r1, [r4, #32]
9000b126:	f7f6 fb31 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000b12a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b12c:	42ab      	cmp	r3, r5
9000b12e:	d311      	bcc.n	9000b154 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
9000b130:	b305      	cbz	r5, 9000b174 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b132:	fbb3 f2f5 	udiv	r2, r3, r5
9000b136:	fb05 3212 	mls	r2, r5, r2, r3
9000b13a:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b13c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b13e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b140:	04d1      	lsls	r1, r2, #19
9000b142:	d400      	bmi.n	9000b146 <JPEG_MDMAInCpltCallback+0x56>
9000b144:	b963      	cbnz	r3, 9000b160 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b146:	6822      	ldr	r2, [r4, #0]
9000b148:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b14a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
9000b14e:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b150:	b003      	add	sp, #12
9000b152:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000b154:	b1cb      	cbz	r3, 9000b18a <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000b156:	0798      	lsls	r0, r3, #30
9000b158:	d119      	bne.n	9000b18e <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b15a:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b15c:	04d2      	lsls	r2, r2, #19
9000b15e:	d4f2      	bmi.n	9000b146 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b160:	6822      	ldr	r2, [r4, #0]
9000b162:	2501      	movs	r5, #1
9000b164:	69a1      	ldr	r1, [r4, #24]
9000b166:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b168:	3240      	adds	r2, #64	; 0x40
9000b16a:	9500      	str	r5, [sp, #0]
9000b16c:	f001 f8b0 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000b170:	2800      	cmp	r0, #0
9000b172:	d0e8      	beq.n	9000b146 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b174:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b176:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000b178:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b17a:	f043 0304 	orr.w	r3, r3, #4
9000b17e:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b180:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000b184:	f7f6 fb6a 	bl	9000185c <HAL_JPEG_ErrorCallback>
        return;
9000b188:	e7c0      	b.n	9000b10c <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b18a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b18c:	e7db      	b.n	9000b146 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
9000b18e:	f023 0303 	bic.w	r3, r3, #3
9000b192:	3304      	adds	r3, #4
9000b194:	e7d2      	b.n	9000b13c <JPEG_MDMAInCpltCallback+0x4c>
9000b196:	bf00      	nop

9000b198 <JPEG_DMA_PollResidualData>:
{
9000b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b19a:	6802      	ldr	r2, [r0, #0]
9000b19c:	2610      	movs	r6, #16
{
9000b19e:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b1a0:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b1a2:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b1a6:	d11d      	bne.n	9000b1e4 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b1a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b1aa:	06df      	lsls	r7, r3, #27
9000b1ac:	d51a      	bpl.n	9000b1e4 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000b1ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b1b0:	69e7      	ldr	r7, [r4, #28]
9000b1b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b1b4:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b1b6:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b1b8:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b1ba:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b1bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
9000b1be:	69e2      	ldr	r2, [r4, #28]
9000b1c0:	443a      	add	r2, r7
9000b1c2:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b1c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b1c6:	69e2      	ldr	r2, [r4, #28]
9000b1c8:	4402      	add	r2, r0
9000b1ca:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b1cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b1ce:	69e2      	ldr	r2, [r4, #28]
9000b1d0:	440a      	add	r2, r1
9000b1d2:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
9000b1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b1d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000b1d8:	3304      	adds	r3, #4
9000b1da:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b1de:	4293      	cmp	r3, r2
9000b1e0:	d021      	beq.n	9000b226 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b1e2:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
9000b1e4:	3e01      	subs	r6, #1
9000b1e6:	d1db      	bne.n	9000b1a0 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000b1e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b1ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b1ec:	06d8      	lsls	r0, r3, #27
9000b1ee:	d501      	bpl.n	9000b1f4 <JPEG_DMA_PollResidualData+0x5c>
9000b1f0:	048b      	lsls	r3, r1, #18
9000b1f2:	d417      	bmi.n	9000b224 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b1f4:	6813      	ldr	r3, [r2, #0]
9000b1f6:	f023 0301 	bic.w	r3, r3, #1
9000b1fa:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
9000b1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b1fe:	b9eb      	cbnz	r3, 9000b23c <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
9000b200:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b202:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b204:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b206:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b208:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b20c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b210:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b214:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b216:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b218:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b21a:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b21e:	d00a      	beq.n	9000b236 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b220:	f7ff ff4e 	bl	9000b0c0 <HAL_JPEG_EncodeCpltCallback>
}
9000b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b226:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b228:	4620      	mov	r0, r4
9000b22a:	69e1      	ldr	r1, [r4, #28]
9000b22c:	f7f6 face 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b230:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000b232:	6265      	str	r5, [r4, #36]	; 0x24
9000b234:	e7d6      	b.n	9000b1e4 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b236:	f7f6 fb13 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b23c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b23e:	4620      	mov	r0, r4
9000b240:	69e1      	ldr	r1, [r4, #28]
9000b242:	f7f6 fac3 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b246:	2300      	movs	r3, #0
9000b248:	6263      	str	r3, [r4, #36]	; 0x24
9000b24a:	e7d9      	b.n	9000b200 <JPEG_DMA_PollResidualData+0x68>

9000b24c <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
9000b24c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b24e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000b252:	d028      	beq.n	9000b2a6 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b254:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b256:	f003 030c 	and.w	r3, r3, #12
9000b25a:	2b0c      	cmp	r3, #12
{
9000b25c:	b570      	push	{r4, r5, r6, lr}
9000b25e:	4604      	mov	r4, r0
9000b260:	b082      	sub	sp, #8
9000b262:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b264:	d007      	beq.n	9000b276 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b266:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b268:	f003 030c 	and.w	r3, r3, #12
9000b26c:	2b08      	cmp	r3, #8
9000b26e:	d037      	beq.n	9000b2e0 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000b270:	2000      	movs	r0, #0
}
9000b272:	b002      	add	sp, #8
9000b274:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b276:	07c8      	lsls	r0, r1, #31
9000b278:	d417      	bmi.n	9000b2aa <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b27a:	07a9      	lsls	r1, r5, #30
9000b27c:	d5f8      	bpl.n	9000b270 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b27e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b284:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b286:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b288:	041a      	lsls	r2, r3, #16
9000b28a:	d453      	bmi.n	9000b334 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b28c:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b28e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000b290:	2a00      	cmp	r2, #0
9000b292:	d13e      	bne.n	9000b312 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b294:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b296:	2206      	movs	r2, #6
          return HAL_ERROR;
9000b298:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b29a:	f043 0304 	orr.w	r3, r3, #4
9000b29e:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b2a0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
9000b2a4:	e7e5      	b.n	9000b272 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000b2a6:	2001      	movs	r0, #1
}
9000b2a8:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b2aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b2ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b2ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b2b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b2b4:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000b2b6:	2a00      	cmp	r2, #0
9000b2b8:	d0ec      	beq.n	9000b294 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000b2ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b2bc:	fbb3 f1f2 	udiv	r1, r3, r2
9000b2c0:	fb02 3211 	mls	r2, r2, r1, r3
9000b2c4:	1a9b      	subs	r3, r3, r2
9000b2c6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000b2c8:	2b00      	cmp	r3, #0
9000b2ca:	d0d6      	beq.n	9000b27a <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b2cc:	6822      	ldr	r2, [r4, #0]
9000b2ce:	2601      	movs	r6, #1
9000b2d0:	3240      	adds	r2, #64	; 0x40
9000b2d2:	9600      	str	r6, [sp, #0]
9000b2d4:	69a1      	ldr	r1, [r4, #24]
9000b2d6:	f000 fffb 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000b2da:	2800      	cmp	r0, #0
9000b2dc:	d0cd      	beq.n	9000b27a <HAL_JPEG_Resume+0x2e>
9000b2de:	e7d9      	b.n	9000b294 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b2e0:	f011 0101 	ands.w	r1, r1, #1
9000b2e4:	d013      	beq.n	9000b30e <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b2e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b2e8:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b2ea:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b2f0:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b2f2:	07ab      	lsls	r3, r5, #30
9000b2f4:	d504      	bpl.n	9000b300 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b2f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000b2f8:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b2fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b2fe:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b300:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000b302:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b304:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b306:	430b      	orrs	r3, r1
9000b308:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b30a:	b002      	add	sp, #8
9000b30c:	bd70      	pop	{r4, r5, r6, pc}
9000b30e:	2228      	movs	r2, #40	; 0x28
9000b310:	e7ef      	b.n	9000b2f2 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b314:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b316:	fbb3 f1f2 	udiv	r1, r3, r2
9000b31a:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b31e:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b320:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b322:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b324:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b326:	9500      	str	r5, [sp, #0]
9000b328:	69e2      	ldr	r2, [r4, #28]
9000b32a:	f000 ffd1 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000b32e:	2800      	cmp	r0, #0
9000b330:	d09e      	beq.n	9000b270 <HAL_JPEG_Resume+0x24>
9000b332:	e7af      	b.n	9000b294 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
9000b334:	4620      	mov	r0, r4
9000b336:	f7ff ff2f 	bl	9000b198 <JPEG_DMA_PollResidualData>
9000b33a:	e799      	b.n	9000b270 <HAL_JPEG_Resume+0x24>

9000b33c <JPEG_MDMAOutCpltCallback>:
{
9000b33c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b33e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b340:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b344:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b346:	6823      	ldr	r3, [r4, #0]
9000b348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b34a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b34e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b350:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b352:	400a      	ands	r2, r1
9000b354:	2a0c      	cmp	r2, #12
9000b356:	d001      	beq.n	9000b35c <JPEG_MDMAOutCpltCallback+0x20>
}
9000b358:	b003      	add	sp, #12
9000b35a:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b35e:	0692      	lsls	r2, r2, #26
9000b360:	d505      	bpl.n	9000b36e <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b364:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b368:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b36a:	b003      	add	sp, #12
9000b36c:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b36e:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b370:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b374:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b376:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b378:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000b37c:	1a9b      	subs	r3, r3, r2
9000b37e:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b380:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b382:	f7f6 fa23 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b386:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b388:	049b      	lsls	r3, r3, #18
9000b38a:	d501      	bpl.n	9000b390 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b38c:	6823      	ldr	r3, [r4, #0]
9000b38e:	e7e8      	b.n	9000b362 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b390:	6821      	ldr	r1, [r4, #0]
9000b392:	2501      	movs	r5, #1
9000b394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b396:	69e2      	ldr	r2, [r4, #28]
9000b398:	3144      	adds	r1, #68	; 0x44
9000b39a:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b39c:	9500      	str	r5, [sp, #0]
9000b39e:	f000 ff97 	bl	9000c2d0 <HAL_MDMA_Start_IT>
9000b3a2:	2800      	cmp	r0, #0
9000b3a4:	d0f2      	beq.n	9000b38c <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b3a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b3a8:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
9000b3aa:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b3ac:	f043 0304 	orr.w	r3, r3, #4
9000b3b0:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b3b2:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000b3b6:	f7f6 fa51 	bl	9000185c <HAL_JPEG_ErrorCallback>
          return;
9000b3ba:	e7cd      	b.n	9000b358 <JPEG_MDMAOutCpltCallback+0x1c>

9000b3bc <JPEG_MDMAOutAbortCallback>:
{
9000b3bc:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b3be:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b3c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b3c2:	041a      	lsls	r2, r3, #16
9000b3c4:	d400      	bmi.n	9000b3c8 <JPEG_MDMAOutAbortCallback+0xc>
}
9000b3c6:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b3c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b3ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b3cc:	681b      	ldr	r3, [r3, #0]
9000b3ce:	695b      	ldr	r3, [r3, #20]
9000b3d0:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000b3d4:	1ad3      	subs	r3, r2, r3
9000b3d6:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b3d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b3da:	429a      	cmp	r2, r3
9000b3dc:	d025      	beq.n	9000b42a <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000b3de:	6822      	ldr	r2, [r4, #0]
9000b3e0:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000b3e2:	f015 0510 	ands.w	r5, r5, #16
9000b3e6:	d118      	bne.n	9000b41a <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
9000b3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b3ea:	bb4b      	cbnz	r3, 9000b440 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b3ec:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000b3ee:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b3f0:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b3f2:	f023 0301 	bic.w	r3, r3, #1
9000b3f6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000b3f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b3fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b3fc:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b400:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b404:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b408:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b40a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b40c:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b40e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b412:	d012      	beq.n	9000b43a <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b414:	f7ff fe54 	bl	9000b0c0 <HAL_JPEG_EncodeCpltCallback>
}
9000b418:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b41a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b41c:	049b      	lsls	r3, r3, #18
9000b41e:	d4d2      	bmi.n	9000b3c6 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000b420:	4620      	mov	r0, r4
}
9000b422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000b426:	f7ff beb7 	b.w	9000b198 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b42a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b42c:	4620      	mov	r0, r4
9000b42e:	69e1      	ldr	r1, [r4, #28]
9000b430:	f7f6 f9cc 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000b434:	2300      	movs	r3, #0
9000b436:	6263      	str	r3, [r4, #36]	; 0x24
9000b438:	e7d1      	b.n	9000b3de <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b43a:	f7f6 fa11 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b43e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b440:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b442:	4620      	mov	r0, r4
9000b444:	69e1      	ldr	r1, [r4, #28]
9000b446:	f7f6 f9c1 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b44a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b44c:	6265      	str	r5, [r4, #36]	; 0x24
9000b44e:	e7cd      	b.n	9000b3ec <JPEG_MDMAOutAbortCallback+0x30>

9000b450 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b450:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b452:	f003 0303 	and.w	r3, r3, #3
9000b456:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b458:	6803      	ldr	r3, [r0, #0]
{
9000b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b45e:	4604      	mov	r4, r0
9000b460:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b462:	d01f      	beq.n	9000b4a4 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000b464:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b466:	04d7      	lsls	r7, r2, #19
9000b468:	d407      	bmi.n	9000b47a <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000b46a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b46c:	0796      	lsls	r6, r2, #30
9000b46e:	f100 811d 	bmi.w	9000b6ac <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
9000b472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b474:	0750      	lsls	r0, r2, #29
9000b476:	f100 81b1 	bmi.w	9000b7dc <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b47a:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b47c:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b480:	d107      	bne.n	9000b492 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000b482:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000b484:	f016 0608 	ands.w	r6, r6, #8
9000b488:	d14c      	bne.n	9000b524 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b48a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b48c:	06d2      	lsls	r2, r2, #27
9000b48e:	f100 81e3 	bmi.w	9000b858 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b494:	f002 0238 	and.w	r2, r2, #56	; 0x38
9000b498:	2a20      	cmp	r2, #32
9000b49a:	d01a      	beq.n	9000b4d2 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000b49c:	2000      	movs	r0, #0
}
9000b49e:	b002      	add	sp, #8
9000b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b4a6:	0652      	lsls	r2, r2, #25
9000b4a8:	d5dc      	bpl.n	9000b464 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000b4aa:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000b4ac:	9101      	str	r1, [sp, #4]
9000b4ae:	f7ff fb79 	bl	9000aba4 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000b4b2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b4b4:	9901      	ldr	r1, [sp, #4]
9000b4b6:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000b4b8:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b4ba:	f7f6 f915 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000b4be:	6823      	ldr	r3, [r4, #0]
9000b4c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b4c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000b4c6:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000b4c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000b4ce:	639a      	str	r2, [r3, #56]	; 0x38
9000b4d0:	e7c8      	b.n	9000b464 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b4d2:	681a      	ldr	r2, [r3, #0]
9000b4d4:	f022 0201 	bic.w	r2, r2, #1
9000b4d8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b4da:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b4dc:	f002 020c 	and.w	r2, r2, #12
9000b4e0:	2a08      	cmp	r2, #8
9000b4e2:	f000 81e6 	beq.w	9000b8b2 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b4e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b4ec:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b4f0:	2b00      	cmp	r3, #0
9000b4f2:	f040 81e3 	bne.w	9000b8bc <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000b4f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b4f8:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b4fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b4fc:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b4fe:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b502:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b504:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
9000b508:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b50c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b50e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b510:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b514:	f000 81c9 	beq.w	9000b8aa <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b518:	f7ff fdd2 	bl	9000b0c0 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000b51c:	4628      	mov	r0, r5
}
9000b51e:	b002      	add	sp, #8
9000b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000b524:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b528:	3220      	adds	r2, #32
9000b52a:	4296      	cmp	r6, r2
9000b52c:	f0c0 81e4 	bcc.w	9000b8f8 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000b530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b532:	69e1      	ldr	r1, [r4, #28]
9000b534:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b536:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b538:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b53a:	69e2      	ldr	r2, [r4, #28]
9000b53c:	440a      	add	r2, r1
9000b53e:	0a19      	lsrs	r1, r3, #8
9000b540:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b542:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b544:	69e2      	ldr	r2, [r4, #28]
9000b546:	440a      	add	r2, r1
9000b548:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b54a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b54c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b54e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b550:	69e2      	ldr	r2, [r4, #28]
9000b552:	440a      	add	r2, r1
9000b554:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b556:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b558:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b55a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b55c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b55e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b560:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b562:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b564:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b566:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b568:	69e2      	ldr	r2, [r4, #28]
9000b56a:	440a      	add	r2, r1
9000b56c:	0a19      	lsrs	r1, r3, #8
9000b56e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b570:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b572:	69e2      	ldr	r2, [r4, #28]
9000b574:	440a      	add	r2, r1
9000b576:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b578:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b57a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b57c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b57e:	69e2      	ldr	r2, [r4, #28]
9000b580:	440a      	add	r2, r1
9000b582:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b584:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b586:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b588:	3304      	adds	r3, #4
9000b58a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b58c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b58e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b590:	69e1      	ldr	r1, [r4, #28]
9000b592:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b594:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b596:	69e2      	ldr	r2, [r4, #28]
9000b598:	440a      	add	r2, r1
9000b59a:	0a19      	lsrs	r1, r3, #8
9000b59c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b59e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5a0:	69e2      	ldr	r2, [r4, #28]
9000b5a2:	440a      	add	r2, r1
9000b5a4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5a6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5a8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5ac:	69e2      	ldr	r2, [r4, #28]
9000b5ae:	440a      	add	r2, r1
9000b5b0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b5b4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b5b6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5b8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b5ba:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b5bc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5be:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b5c0:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b5c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5c4:	69e2      	ldr	r2, [r4, #28]
9000b5c6:	440a      	add	r2, r1
9000b5c8:	0a19      	lsrs	r1, r3, #8
9000b5ca:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5ce:	69e2      	ldr	r2, [r4, #28]
9000b5d0:	440a      	add	r2, r1
9000b5d2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5d4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5d6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5da:	69e2      	ldr	r2, [r4, #28]
9000b5dc:	440a      	add	r2, r1
9000b5de:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b5e2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b5e4:	3304      	adds	r3, #4
9000b5e6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b5e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b5ec:	69e1      	ldr	r1, [r4, #28]
9000b5ee:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b5f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5f2:	69e2      	ldr	r2, [r4, #28]
9000b5f4:	440a      	add	r2, r1
9000b5f6:	0a19      	lsrs	r1, r3, #8
9000b5f8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5fc:	69e2      	ldr	r2, [r4, #28]
9000b5fe:	440a      	add	r2, r1
9000b600:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b602:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b604:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b606:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b608:	69e2      	ldr	r2, [r4, #28]
9000b60a:	440a      	add	r2, r1
9000b60c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b610:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b612:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b614:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b616:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b618:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b61a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b61c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b61e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b620:	69e2      	ldr	r2, [r4, #28]
9000b622:	440a      	add	r2, r1
9000b624:	0a19      	lsrs	r1, r3, #8
9000b626:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b628:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b62a:	69e2      	ldr	r2, [r4, #28]
9000b62c:	440a      	add	r2, r1
9000b62e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b630:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b632:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b634:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b636:	69e2      	ldr	r2, [r4, #28]
9000b638:	440a      	add	r2, r1
9000b63a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b63c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b63e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b640:	3304      	adds	r3, #4
9000b642:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b644:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b646:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b648:	69e1      	ldr	r1, [r4, #28]
9000b64a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b64c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b64e:	69e2      	ldr	r2, [r4, #28]
9000b650:	440a      	add	r2, r1
9000b652:	0a19      	lsrs	r1, r3, #8
9000b654:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b656:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b658:	69e2      	ldr	r2, [r4, #28]
9000b65a:	440a      	add	r2, r1
9000b65c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b65e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b660:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b662:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b664:	69e2      	ldr	r2, [r4, #28]
9000b666:	440a      	add	r2, r1
9000b668:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b66a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b66c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b66e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b670:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b672:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b674:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b676:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b678:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b67a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b67c:	69e2      	ldr	r2, [r4, #28]
9000b67e:	440a      	add	r2, r1
9000b680:	0a19      	lsrs	r1, r3, #8
9000b682:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b684:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b686:	69e2      	ldr	r2, [r4, #28]
9000b688:	440a      	add	r2, r1
9000b68a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b68c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b68e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b690:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b692:	69e2      	ldr	r2, [r4, #28]
9000b694:	440a      	add	r2, r1
9000b696:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b698:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b69a:	3304      	adds	r3, #4
9000b69c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b6a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b6a2:	429a      	cmp	r2, r3
9000b6a4:	f000 82ae 	beq.w	9000bc04 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b6a8:	6823      	ldr	r3, [r4, #0]
9000b6aa:	e6f2      	b.n	9000b492 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000b6ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b6ae:	2a00      	cmp	r2, #0
9000b6b0:	f000 810c 	beq.w	9000b8cc <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b6b4:	6a21      	ldr	r1, [r4, #32]
9000b6b6:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b6b8:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b6ba:	f240 81a4 	bls.w	9000ba06 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b6be:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b6c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000b6c2:	04cd      	lsls	r5, r1, #19
9000b6c4:	f53f aed9 	bmi.w	9000b47a <JPEG_Process+0x2a>
9000b6c8:	2a00      	cmp	r2, #0
9000b6ca:	f43f aed6 	beq.w	9000b47a <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000b6ce:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000b6d0:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
9000b6d4:	f240 8203 	bls.w	9000bade <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6d8:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000b6da:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6dc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6de:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6e0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6e2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6e4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b6e6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6e8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b6ec:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6ee:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6f2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b6f4:	6a21      	ldr	r1, [r4, #32]
9000b6f6:	3104      	adds	r1, #4
9000b6f8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b6fa:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6fc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6fe:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b700:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b702:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b704:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b706:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b708:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b70c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b70e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b712:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b714:	6a21      	ldr	r1, [r4, #32]
9000b716:	3104      	adds	r1, #4
9000b718:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b71a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b71c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b71e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b720:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b722:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b724:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b726:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b728:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b72c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b72e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b732:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b734:	6a21      	ldr	r1, [r4, #32]
9000b736:	3104      	adds	r1, #4
9000b738:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b73a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b73c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b73e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b740:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b742:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b744:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b746:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b748:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b74c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b74e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b752:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b754:	6a21      	ldr	r1, [r4, #32]
9000b756:	3104      	adds	r1, #4
9000b758:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b75a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b75c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b75e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b760:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b762:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b764:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b766:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b768:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b76c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b76e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b772:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b774:	6a21      	ldr	r1, [r4, #32]
9000b776:	3104      	adds	r1, #4
9000b778:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b77a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b77c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b77e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b780:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b782:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b784:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b786:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b788:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b78c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b78e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b792:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b794:	6a21      	ldr	r1, [r4, #32]
9000b796:	3104      	adds	r1, #4
9000b798:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b79a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b79c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b79e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7a0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b7a2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7a4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b7a6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b7a8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b7ac:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7ae:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b7b2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b7b4:	6a21      	ldr	r1, [r4, #32]
9000b7b6:	3104      	adds	r1, #4
9000b7b8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b7ba:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b7bc:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b7be:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7c0:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b7c2:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7c4:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b7c6:	7849      	ldrb	r1, [r1, #1]
9000b7c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000b7cc:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b7ce:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b7d2:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b7d4:	6a22      	ldr	r2, [r4, #32]
9000b7d6:	3204      	adds	r2, #4
9000b7d8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000b7da:	e64e      	b.n	9000b47a <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000b7dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b7de:	2a00      	cmp	r2, #0
9000b7e0:	d074      	beq.n	9000b8cc <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b7e2:	6a21      	ldr	r1, [r4, #32]
9000b7e4:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b7e6:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b7e8:	f200 8164 	bhi.w	9000bab4 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000b7ec:	428a      	cmp	r2, r1
9000b7ee:	f040 810c 	bne.w	9000ba0a <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b7f2:	6a21      	ldr	r1, [r4, #32]
9000b7f4:	4620      	mov	r0, r4
9000b7f6:	f7f5 ffc9 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000b7fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b7fc:	2a04      	cmp	r2, #4
9000b7fe:	d902      	bls.n	9000b806 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000b800:	f022 0203 	bic.w	r2, r2, #3
9000b804:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000b806:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b808:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000b80a:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b80c:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000b80e:	04c9      	lsls	r1, r1, #19
9000b810:	f53f ae33 	bmi.w	9000b47a <JPEG_Process+0x2a>
9000b814:	2a00      	cmp	r2, #0
9000b816:	f43f ae30 	beq.w	9000b47a <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000b81a:	0891      	lsrs	r1, r2, #2
9000b81c:	f040 8203 	bne.w	9000bc26 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b820:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b822:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000b824:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b826:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000b828:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b82c:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000b82e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b830:	d010      	beq.n	9000b854 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b832:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b834:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b836:	5c69      	ldrb	r1, [r5, r1]
9000b838:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000b83c:	6a21      	ldr	r1, [r4, #32]
9000b83e:	f101 0101 	add.w	r1, r1, #1
9000b842:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b844:	d106      	bne.n	9000b854 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b846:	6a22      	ldr	r2, [r4, #32]
9000b848:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
9000b84a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b84c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000b850:	3201      	adds	r2, #1
9000b852:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000b854:	6418      	str	r0, [r3, #64]	; 0x40
9000b856:	e610      	b.n	9000b47a <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000b858:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b85a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000b85c:	3204      	adds	r2, #4
9000b85e:	4295      	cmp	r5, r2
9000b860:	f0c0 80d5 	bcc.w	9000ba0e <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
9000b864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b866:	69e1      	ldr	r1, [r4, #28]
9000b868:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b86a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b86c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b86e:	69e2      	ldr	r2, [r4, #28]
9000b870:	440a      	add	r2, r1
9000b872:	0a19      	lsrs	r1, r3, #8
9000b874:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b876:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b878:	69e2      	ldr	r2, [r4, #28]
9000b87a:	440a      	add	r2, r1
9000b87c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b87e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b880:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b882:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b884:	69e2      	ldr	r2, [r4, #28]
9000b886:	440a      	add	r2, r1
9000b888:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b88c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000b88e:	3304      	adds	r3, #4
9000b890:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b892:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b894:	429a      	cmp	r2, r3
9000b896:	f47f af07 	bne.w	9000b6a8 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b89a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b89c:	4620      	mov	r0, r4
9000b89e:	69e1      	ldr	r1, [r4, #28]
9000b8a0:	f7f5 ff94 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b8a4:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b8a6:	6266      	str	r6, [r4, #36]	; 0x24
9000b8a8:	e5f3      	b.n	9000b492 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b8aa:	f7f5 ffd9 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000b8ae:	4628      	mov	r0, r5
9000b8b0:	e5f5      	b.n	9000b49e <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b8b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b8b4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b8b8:	631a      	str	r2, [r3, #48]	; 0x30
9000b8ba:	e614      	b.n	9000b4e6 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b8bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b8be:	4620      	mov	r0, r4
9000b8c0:	69e1      	ldr	r1, [r4, #28]
9000b8c2:	f7f5 ff83 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b8c6:	2300      	movs	r3, #0
9000b8c8:	6263      	str	r3, [r4, #36]	; 0x24
9000b8ca:	e614      	b.n	9000b4f6 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b8cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b8ce:	f002 020c 	and.w	r2, r2, #12
9000b8d2:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b8d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b8d6:	f000 80fd 	beq.w	9000bad4 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b8da:	f002 020c 	and.w	r2, r2, #12
9000b8de:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b8e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b8e2:	f47f adca 	bne.w	9000b47a <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b8e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000b8ea:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b8ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b8ee:	f022 0206 	bic.w	r2, r2, #6
9000b8f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b8f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b8f6:	e5c0      	b.n	9000b47a <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000b8f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b8fa:	4296      	cmp	r6, r2
9000b8fc:	f67f adc9 	bls.w	9000b492 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000b900:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b902:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
9000b904:	0880      	lsrs	r0, r0, #2
9000b906:	d020      	beq.n	9000b94a <JPEG_Process+0x4fa>
9000b908:	4629      	mov	r1, r5
9000b90a:	e000      	b.n	9000b90e <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000b90c:	6823      	ldr	r3, [r4, #0]
9000b90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000b910:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b912:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b914:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000b916:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b918:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b91a:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b91c:	69e2      	ldr	r2, [r4, #28]
9000b91e:	4432      	add	r2, r6
9000b920:	ea4f 2613 	mov.w	r6, r3, lsr #8
9000b924:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b926:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b928:	69e2      	ldr	r2, [r4, #28]
9000b92a:	4432      	add	r2, r6
9000b92c:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b930:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b934:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b936:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b938:	69e2      	ldr	r2, [r4, #28]
9000b93a:	4432      	add	r2, r6
9000b93c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b940:	f103 0304 	add.w	r3, r3, #4
9000b944:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000b946:	d1e1      	bne.n	9000b90c <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b94c:	42b3      	cmp	r3, r6
9000b94e:	f000 8161 	beq.w	9000bc14 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000b952:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b956:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000b958:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
9000b95c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000b95e:	d00e      	beq.n	9000b97e <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b960:	f005 0303 	and.w	r3, r5, #3
9000b964:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b966:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000b968:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b96a:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000b96c:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b96e:	fa27 f303 	lsr.w	r3, r7, r3
9000b972:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000b974:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b976:	f103 0301 	add.w	r3, r3, #1
9000b97a:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000b97c:	d1f0      	bne.n	9000b960 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000b97e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b982:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b984:	69e1      	ldr	r1, [r4, #28]
9000b986:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000b988:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b98c:	f7f5 ff1e 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b990:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000b992:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000b996:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b998:	f63f ae86 	bhi.w	9000b6a8 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b99c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000b9a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9a2:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b9a4:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9a8:	fa27 f003 	lsr.w	r0, r7, r3
9000b9ac:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000b9ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9b0:	f102 0201 	add.w	r2, r2, #1
9000b9b4:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b9b6:	f43f ae77 	beq.w	9000b6a8 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9ba:	f103 0208 	add.w	r2, r3, #8
9000b9be:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b9c0:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b9c2:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9c6:	fa27 f202 	lsr.w	r2, r7, r2
9000b9ca:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000b9cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9ce:	f102 0201 	add.w	r2, r2, #1
9000b9d2:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b9d4:	f108 0202 	add.w	r2, r8, #2
9000b9d8:	f43f ae66 	beq.w	9000b6a8 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9dc:	3310      	adds	r3, #16
9000b9de:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b9e0:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b9e2:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9e4:	fa27 f303 	lsr.w	r3, r7, r3
9000b9e8:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000b9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b9ec:	f103 0301 	add.w	r3, r3, #1
9000b9f0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b9f2:	f47f ae59 	bne.w	9000b6a8 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b9f8:	0e3f      	lsrs	r7, r7, #24
9000b9fa:	69e2      	ldr	r2, [r4, #28]
9000b9fc:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba00:	3301      	adds	r3, #1
9000ba02:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000ba04:	e650      	b.n	9000b6a8 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000ba06:	428a      	cmp	r2, r1
9000ba08:	d056      	beq.n	9000bab8 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000ba0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000ba0c:	e535      	b.n	9000b47a <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000ba0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba10:	4295      	cmp	r5, r2
9000ba12:	f67f ad3e 	bls.w	9000b492 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000ba16:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000ba18:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000ba1a:	0880      	lsrs	r0, r0, #2
9000ba1c:	d020      	beq.n	9000ba60 <JPEG_Process+0x610>
9000ba1e:	4631      	mov	r1, r6
9000ba20:	e000      	b.n	9000ba24 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000ba22:	6823      	ldr	r3, [r4, #0]
9000ba24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000ba26:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba28:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba2a:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000ba2c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba2e:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000ba30:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000ba32:	69e2      	ldr	r2, [r4, #28]
9000ba34:	442a      	add	r2, r5
9000ba36:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000ba3a:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000ba3e:	69e2      	ldr	r2, [r4, #28]
9000ba40:	442a      	add	r2, r5
9000ba42:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba46:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba4a:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000ba4e:	69e2      	ldr	r2, [r4, #28]
9000ba50:	442a      	add	r2, r5
9000ba52:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000ba54:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba56:	f103 0304 	add.w	r3, r3, #4
9000ba5a:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000ba5c:	d1e1      	bne.n	9000ba22 <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000ba5e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000ba60:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba62:	429d      	cmp	r5, r3
9000ba64:	f000 80d6 	beq.w	9000bc14 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000ba68:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000ba6c:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000ba6e:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000ba72:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000ba74:	d00e      	beq.n	9000ba94 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000ba76:	f006 0303 	and.w	r3, r6, #3
9000ba7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba7c:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000ba7e:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000ba80:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000ba82:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000ba84:	fa27 f303 	lsr.w	r3, r7, r3
9000ba88:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000ba8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba8c:	f103 0301 	add.w	r3, r3, #1
9000ba90:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000ba92:	d1f0      	bne.n	9000ba76 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000ba94:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000ba98:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba9a:	69e1      	ldr	r1, [r4, #28]
9000ba9c:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000ba9e:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000baa2:	f7f5 fe93 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000baa6:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000baa8:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000baac:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000baae:	f67f af75 	bls.w	9000b99c <JPEG_Process+0x54c>
9000bab2:	e5f9      	b.n	9000b6a8 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bab4:	1a52      	subs	r2, r2, r1
9000bab6:	e6a9      	b.n	9000b80c <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bab8:	6a21      	ldr	r1, [r4, #32]
9000baba:	4620      	mov	r0, r4
9000babc:	f7f5 fe66 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000bac0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bac2:	2a04      	cmp	r2, #4
9000bac4:	d902      	bls.n	9000bacc <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000bac6:	f022 0203 	bic.w	r2, r2, #3
9000baca:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000bacc:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bace:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000bad0:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000bad2:	e5f5      	b.n	9000b6c0 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000bad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000bad8:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bada:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000badc:	e4cd      	b.n	9000b47a <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000bade:	2a03      	cmp	r2, #3
9000bae0:	f240 80a4 	bls.w	9000bc2c <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000bae4:	2900      	cmp	r1, #0
9000bae6:	f43f acc8 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000baea:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000baec:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000baee:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000baf0:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000baf4:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000baf6:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000baf8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bafa:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bafe:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb00:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb04:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb08:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb0c:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb0e:	6a20      	ldr	r0, [r4, #32]
9000bb10:	f100 0004 	add.w	r0, r0, #4
9000bb14:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb16:	f43f acb0 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb1a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb1c:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb1e:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb22:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb24:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb26:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb28:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb2c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb2e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb32:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb36:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb3a:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb3c:	6a20      	ldr	r0, [r4, #32]
9000bb3e:	f100 0004 	add.w	r0, r0, #4
9000bb42:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb44:	f43f ac99 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb48:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb4a:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb4c:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb50:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb52:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb54:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb56:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb5a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb5c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb60:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb64:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb68:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb6a:	6a20      	ldr	r0, [r4, #32]
9000bb6c:	f100 0004 	add.w	r0, r0, #4
9000bb70:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb72:	f43f ac82 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb76:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb78:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb7a:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb7e:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb80:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb82:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb84:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb88:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb8a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb8e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb92:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb96:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb98:	6a20      	ldr	r0, [r4, #32]
9000bb9a:	f100 0004 	add.w	r0, r0, #4
9000bb9e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bba0:	f43f ac6b 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bba4:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bba6:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bba8:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbac:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbae:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbb0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbb2:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bbb6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbb8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bbbc:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbc0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbc4:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bbc6:	6a20      	ldr	r0, [r4, #32]
9000bbc8:	f100 0004 	add.w	r0, r0, #4
9000bbcc:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bbce:	f43f ac54 	beq.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bbd2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bbd4:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbd6:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbda:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbdc:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbde:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbe0:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bbe4:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbe6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bbea:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbee:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbf2:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bbf4:	6a20      	ldr	r0, [r4, #32]
9000bbf6:	f100 0004 	add.w	r0, r0, #4
9000bbfa:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bbfc:	f47f ac3d 	bne.w	9000b47a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bc00:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc02:	e5db      	b.n	9000b7bc <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bc04:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bc06:	4620      	mov	r0, r4
9000bc08:	69e1      	ldr	r1, [r4, #28]
9000bc0a:	f7f5 fddf 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bc0e:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bc10:	6265      	str	r5, [r4, #36]	; 0x24
9000bc12:	e43e      	b.n	9000b492 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bc14:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bc16:	4620      	mov	r0, r4
9000bc18:	69e1      	ldr	r1, [r4, #28]
9000bc1a:	f7f5 fdd7 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bc1e:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bc20:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bc22:	6262      	str	r2, [r4, #36]	; 0x24
9000bc24:	e435      	b.n	9000b492 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000bc26:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc28:	69a0      	ldr	r0, [r4, #24]
9000bc2a:	e5c7      	b.n	9000b7bc <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc2c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bc2e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000bc30:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc32:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000bc34:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc38:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000bc3a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bc3c:	d010      	beq.n	9000bc60 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc3e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bc40:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc42:	5c28      	ldrb	r0, [r5, r0]
9000bc44:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000bc48:	6a20      	ldr	r0, [r4, #32]
9000bc4a:	f100 0001 	add.w	r0, r0, #1
9000bc4e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bc50:	d106      	bne.n	9000bc60 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc52:	6a22      	ldr	r2, [r4, #32]
9000bc54:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000bc56:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bc58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000bc5c:	3201      	adds	r2, #1
9000bc5e:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000bc60:	6419      	str	r1, [r3, #64]	; 0x40
9000bc62:	e40a      	b.n	9000b47a <JPEG_Process+0x2a>

9000bc64 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000bc64:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000bc68:	3b03      	subs	r3, #3
9000bc6a:	2b01      	cmp	r3, #1
9000bc6c:	d900      	bls.n	9000bc70 <HAL_JPEG_IRQHandler+0xc>
9000bc6e:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bc70:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc72:	f003 030c 	and.w	r3, r3, #12
9000bc76:	2b08      	cmp	r3, #8
{
9000bc78:	b530      	push	{r4, r5, lr}
9000bc7a:	4604      	mov	r4, r0
9000bc7c:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bc7e:	d006      	beq.n	9000bc8e <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bc80:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc82:	f003 030c 	and.w	r3, r3, #12
9000bc86:	2b0c      	cmp	r3, #12
9000bc88:	d006      	beq.n	9000bc98 <HAL_JPEG_IRQHandler+0x34>
}
9000bc8a:	b003      	add	sp, #12
9000bc8c:	bd30      	pop	{r4, r5, pc}
9000bc8e:	b003      	add	sp, #12
9000bc90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000bc94:	f7ff bbdc 	b.w	9000b450 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bc98:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc9a:	f003 0303 	and.w	r3, r3, #3
9000bc9e:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000bca0:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bca2:	d045      	beq.n	9000bd30 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000bca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bca6:	0692      	lsls	r2, r2, #26
9000bca8:	d5ef      	bpl.n	9000bc8a <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000bcaa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000bcac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000bcae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000bcb2:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bcb4:	681a      	ldr	r2, [r3, #0]
9000bcb6:	f022 0201 	bic.w	r2, r2, #1
9000bcba:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000bcbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bcbe:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000bcc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000bcc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000bcc6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000bcca:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000bccc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bcd0:	2b02      	cmp	r3, #2
9000bcd2:	d052      	beq.n	9000bd7a <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000bcd4:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000bcd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bcda:	2b02      	cmp	r3, #2
9000bcdc:	d03f      	beq.n	9000bd5e <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bcde:	6803      	ldr	r3, [r0, #0]
9000bce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000bce2:	695b      	ldr	r3, [r3, #20]
9000bce4:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000bce8:	1ad3      	subs	r3, r2, r3
9000bcea:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000bcec:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bcee:	429a      	cmp	r2, r3
9000bcf0:	d046      	beq.n	9000bd80 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000bcf2:	6822      	ldr	r2, [r4, #0]
9000bcf4:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000bcf6:	f015 0510 	ands.w	r5, r5, #16
9000bcfa:	d135      	bne.n	9000bd68 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000bcfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bcfe:	2b00      	cmp	r3, #0
9000bd00:	d149      	bne.n	9000bd96 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bd02:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000bd04:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bd06:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bd08:	f023 0301 	bic.w	r3, r3, #1
9000bd0c:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000bd0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bd10:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bd12:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000bd16:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bd1a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bd1e:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bd20:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bd22:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bd24:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bd28:	d032      	beq.n	9000bd90 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000bd2a:	f7ff f9c9 	bl	9000b0c0 <HAL_JPEG_EncodeCpltCallback>
9000bd2e:	e7ac      	b.n	9000bc8a <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000bd30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bd32:	0651      	lsls	r1, r2, #25
9000bd34:	d5b6      	bpl.n	9000bca4 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000bd36:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000bd38:	9101      	str	r1, [sp, #4]
9000bd3a:	f7fe ff33 	bl	9000aba4 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000bd3e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000bd40:	9901      	ldr	r1, [sp, #4]
9000bd42:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000bd44:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000bd46:	f7f5 fccf 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000bd4a:	6823      	ldr	r3, [r4, #0]
9000bd4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bd4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000bd52:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000bd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000bd56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000bd5a:	639a      	str	r2, [r3, #56]	; 0x38
9000bd5c:	e7a2      	b.n	9000bca4 <HAL_JPEG_IRQHandler+0x40>
}
9000bd5e:	b003      	add	sp, #12
9000bd60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000bd64:	f000 bb30 	b.w	9000c3c8 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000bd68:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bd6a:	049b      	lsls	r3, r3, #18
9000bd6c:	d48d      	bmi.n	9000bc8a <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000bd6e:	4620      	mov	r0, r4
}
9000bd70:	b003      	add	sp, #12
9000bd72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000bd76:	f7ff ba0f 	b.w	9000b198 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000bd7a:	f000 fb25 	bl	9000c3c8 <HAL_MDMA_Abort_IT>
9000bd7e:	e7a9      	b.n	9000bcd4 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd80:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd82:	4620      	mov	r0, r4
9000bd84:	69e1      	ldr	r1, [r4, #28]
9000bd86:	f7f5 fd21 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000bd8a:	2300      	movs	r3, #0
9000bd8c:	6263      	str	r3, [r4, #36]	; 0x24
9000bd8e:	e7b0      	b.n	9000bcf2 <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bd90:	f7f5 fd66 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
9000bd94:	e779      	b.n	9000bc8a <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd96:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd98:	4620      	mov	r0, r4
9000bd9a:	69e1      	ldr	r1, [r4, #28]
9000bd9c:	f7f5 fd16 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bda0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bda2:	6265      	str	r5, [r4, #36]	; 0x24
9000bda4:	e7ad      	b.n	9000bd02 <HAL_JPEG_IRQHandler+0x9e>
9000bda6:	bf00      	nop

9000bda8 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000bda8:	2800      	cmp	r0, #0
9000bdaa:	d067      	beq.n	9000be7c <HAL_LTDC_Init+0xd4>
{
9000bdac:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000bdae:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000bdb2:	4604      	mov	r4, r0
9000bdb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000bdb8:	2b00      	cmp	r3, #0
9000bdba:	d05a      	beq.n	9000be72 <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bdbc:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bdbe:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bdc0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bdc4:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bdc8:	4302      	orrs	r2, r0
9000bdca:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bdcc:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bdce:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000bdd0:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bdd2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000bdd6:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000bdd8:	4929      	ldr	r1, [pc, #164]	; (9000be80 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bdda:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bddc:	6998      	ldr	r0, [r3, #24]
9000bdde:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000bde0:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bde2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000bde4:	689a      	ldr	r2, [r3, #8]
9000bde6:	400a      	ands	r2, r1
9000bde8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000bdea:	689a      	ldr	r2, [r3, #8]
9000bdec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000bdf0:	69a0      	ldr	r0, [r4, #24]
9000bdf2:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000bdf4:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000bdf6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000bdf8:	68da      	ldr	r2, [r3, #12]
9000bdfa:	400a      	ands	r2, r1
9000bdfc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000bdfe:	68da      	ldr	r2, [r3, #12]
9000be00:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000be04:	6a20      	ldr	r0, [r4, #32]
9000be06:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000be08:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000be0a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000be0c:	691a      	ldr	r2, [r3, #16]
9000be0e:	400a      	ands	r2, r1
9000be10:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000be12:	691a      	ldr	r2, [r3, #16]
9000be14:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000be18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000be1a:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000be1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000be1e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000be20:	695a      	ldr	r2, [r3, #20]
9000be22:	400a      	ands	r2, r1
9000be24:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000be26:	695a      	ldr	r2, [r3, #20]
9000be28:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000be2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000be2e:	430a      	orrs	r2, r1
9000be30:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000be32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000be34:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000be38:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000be3c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000be40:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000be42:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000be44:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000be48:	432a      	orrs	r2, r5
9000be4a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000be4e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000be50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000be54:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000be56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be58:	f042 0206 	orr.w	r2, r2, #6
9000be5c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000be5e:	699a      	ldr	r2, [r3, #24]
9000be60:	f042 0201 	orr.w	r2, r2, #1
9000be64:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000be66:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000be68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000be6c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000be70:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000be72:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000be76:	f7f8 fddf 	bl	90004a38 <HAL_LTDC_MspInit>
9000be7a:	e79f      	b.n	9000bdbc <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000be7c:	2001      	movs	r0, #1
}
9000be7e:	4770      	bx	lr
9000be80:	f000f800 	.word	0xf000f800

9000be84 <HAL_LTDC_ErrorCallback>:
9000be84:	4770      	bx	lr
9000be86:	bf00      	nop

9000be88 <HAL_LTDC_ReloadEventCallback>:
9000be88:	4770      	bx	lr
9000be8a:	bf00      	nop

9000be8c <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000be8c:	6803      	ldr	r3, [r0, #0]
{
9000be8e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000be90:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000be92:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000be94:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000be96:	076a      	lsls	r2, r5, #29
9000be98:	d501      	bpl.n	9000be9e <HAL_LTDC_IRQHandler+0x12>
9000be9a:	0771      	lsls	r1, r6, #29
9000be9c:	d41d      	bmi.n	9000beda <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000be9e:	07aa      	lsls	r2, r5, #30
9000bea0:	d501      	bpl.n	9000bea6 <HAL_LTDC_IRQHandler+0x1a>
9000bea2:	07b3      	lsls	r3, r6, #30
9000bea4:	d42d      	bmi.n	9000bf02 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000bea6:	07e8      	lsls	r0, r5, #31
9000bea8:	d501      	bpl.n	9000beae <HAL_LTDC_IRQHandler+0x22>
9000beaa:	07f1      	lsls	r1, r6, #31
9000beac:	d440      	bmi.n	9000bf30 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000beae:	072a      	lsls	r2, r5, #28
9000beb0:	d501      	bpl.n	9000beb6 <HAL_LTDC_IRQHandler+0x2a>
9000beb2:	0733      	lsls	r3, r6, #28
9000beb4:	d400      	bmi.n	9000beb8 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000beb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000beb8:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000beba:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000bebc:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000bebe:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000bec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bec2:	f022 0208 	bic.w	r2, r2, #8
9000bec6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000bec8:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000beca:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000becc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bed0:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000bed4:	f7ff ffd8 	bl	9000be88 <HAL_LTDC_ReloadEventCallback>
}
9000bed8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000beda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bedc:	f022 0204 	bic.w	r2, r2, #4
9000bee0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000bee2:	2204      	movs	r2, #4
9000bee4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000bee6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000beea:	f043 0301 	orr.w	r3, r3, #1
9000beee:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000bef2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000bef4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bef8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000befc:	f7ff ffc2 	bl	9000be84 <HAL_LTDC_ErrorCallback>
9000bf00:	e7cd      	b.n	9000be9e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000bf02:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000bf04:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000bf06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bf08:	f022 0202 	bic.w	r2, r2, #2
9000bf0c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000bf0e:	2202      	movs	r2, #2
9000bf10:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000bf12:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000bf14:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000bf18:	f043 0302 	orr.w	r3, r3, #2
9000bf1c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000bf20:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000bf22:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bf26:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000bf2a:	f7ff ffab 	bl	9000be84 <HAL_LTDC_ErrorCallback>
9000bf2e:	e7ba      	b.n	9000bea6 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000bf30:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000bf32:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000bf34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bf36:	f022 0201 	bic.w	r2, r2, #1
9000bf3a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000bf3c:	2201      	movs	r2, #1
9000bf3e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000bf40:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000bf42:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bf46:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000bf4a:	f7f6 fcbd 	bl	900028c8 <HAL_LTDC_LineEventCallback>
9000bf4e:	e7ae      	b.n	9000beae <HAL_LTDC_IRQHandler+0x22>

9000bf50 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000bf50:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000bf54:	2b01      	cmp	r3, #1
9000bf56:	f000 80c0 	beq.w	9000c0da <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bf5a:	2302      	movs	r3, #2
{
9000bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf60:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bf64:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bf68:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000bf6c:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf6e:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf72:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bf74:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf78:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf7a:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000bf7e:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bf80:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000bf84:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf86:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf8a:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000bf8e:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000c0f0 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf92:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000bf96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000bf9a:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000bf9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bfa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bfa4:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bfa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bfaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000bfac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bfb0:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bfb2:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bfb4:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bfb8:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000bfba:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bfbc:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bfc0:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000bfc4:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bfc6:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bfc8:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000bfcc:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bfd0:	440b      	add	r3, r1
9000bfd2:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000bfd6:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bfda:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bfde:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bfe2:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bfe6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bfea:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bfec:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000bff0:	68ab      	ldr	r3, [r5, #8]
9000bff2:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000bff6:	3301      	adds	r3, #1
9000bff8:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000bffc:	4403      	add	r3, r0
9000bffe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c002:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c004:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000c008:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000c00c:	f023 0307 	bic.w	r3, r3, #7
9000c010:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c014:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c018:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000c01c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000c01e:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000c022:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c026:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000c02a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000c02e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000c032:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000c036:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000c03a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000c03e:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000c042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000c046:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000c04a:	696b      	ldr	r3, [r5, #20]
9000c04c:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c050:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c054:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c056:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c05a:	6a28      	ldr	r0, [r5, #32]
9000c05c:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c05e:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c062:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000c066:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000c06a:	2300      	movs	r3, #0
9000c06c:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000c070:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000c072:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c076:	bb59      	cbnz	r1, 9000c0d0 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000c078:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c07a:	1abf      	subs	r7, r7, r2
9000c07c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000c07e:	fb03 f707 	mul.w	r7, r3, r7
9000c082:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c086:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c088:	3707      	adds	r7, #7
9000c08a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000c08e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000c092:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000c096:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c09a:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000c09e:	4b12      	ldr	r3, [pc, #72]	; (9000c0e8 <HAL_LTDC_ConfigLayer+0x198>)
9000c0a0:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000c0a4:	400b      	ands	r3, r1
9000c0a6:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c0aa:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c0ae:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000c0b0:	f859 3006 	ldr.w	r3, [r9, r6]
9000c0b4:	4313      	orrs	r3, r2
9000c0b6:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000c0ba:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c0bc:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000c0c0:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000c0c2:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000c0c6:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000c0ca:	b003      	add	sp, #12
9000c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000c0d0:	3901      	subs	r1, #1
9000c0d2:	2906      	cmp	r1, #6
9000c0d4:	d903      	bls.n	9000c0de <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c0d6:	2301      	movs	r3, #1
9000c0d8:	e7cf      	b.n	9000c07a <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000c0da:	2002      	movs	r0, #2
}
9000c0dc:	4770      	bx	lr
9000c0de:	4b03      	ldr	r3, [pc, #12]	; (9000c0ec <HAL_LTDC_ConfigLayer+0x19c>)
9000c0e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000c0e4:	e7c9      	b.n	9000c07a <HAL_LTDC_ConfigLayer+0x12a>
9000c0e6:	bf00      	nop
9000c0e8:	fffff800 	.word	0xfffff800
9000c0ec:	9002b518 	.word	0x9002b518
9000c0f0:	fffff8f8 	.word	0xfffff8f8

9000c0f4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000c0f4:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000c0f8:	2a01      	cmp	r2, #1
9000c0fa:	d019      	beq.n	9000c130 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c0fc:	6802      	ldr	r2, [r0, #0]
9000c0fe:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c100:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000c102:	f04f 0c00 	mov.w	ip, #0
{
9000c106:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c108:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c10c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000c10e:	4c09      	ldr	r4, [pc, #36]	; (9000c134 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c110:	f020 0001 	bic.w	r0, r0, #1
9000c114:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c116:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000c118:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000c11a:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000c11c:	4301      	orrs	r1, r0
9000c11e:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c120:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000c124:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000c126:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000c12a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c12e:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000c130:	2002      	movs	r0, #2
}
9000c132:	4770      	bx	lr
9000c134:	50001000 	.word	0x50001000

9000c138 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000c138:	b538      	push	{r3, r4, r5, lr}
9000c13a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000c13c:	f7fd f984 	bl	90009448 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000c140:	2c00      	cmp	r4, #0
9000c142:	d05a      	beq.n	9000c1fa <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000c144:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c146:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000c148:	2100      	movs	r1, #0
9000c14a:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c14c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000c150:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000c154:	68da      	ldr	r2, [r3, #12]
9000c156:	f022 0201 	bic.w	r2, r2, #1
9000c15a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c15c:	e005      	b.n	9000c16a <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000c15e:	f7fd f973 	bl	90009448 <HAL_GetTick>
9000c162:	1b43      	subs	r3, r0, r5
9000c164:	2b05      	cmp	r3, #5
9000c166:	d841      	bhi.n	9000c1ec <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c168:	6823      	ldr	r3, [r4, #0]
9000c16a:	68da      	ldr	r2, [r3, #12]
9000c16c:	07d2      	lsls	r2, r2, #31
9000c16e:	d4f6      	bmi.n	9000c15e <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c170:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000c174:	69e0      	ldr	r0, [r4, #28]
9000c176:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c178:	68e1      	ldr	r1, [r4, #12]
9000c17a:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c17c:	4302      	orrs	r2, r0
9000c17e:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c180:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c182:	4302      	orrs	r2, r0
9000c184:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c186:	4302      	orrs	r2, r0
9000c188:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000c18a:	4302      	orrs	r2, r0
9000c18c:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000c18e:	4302      	orrs	r2, r0
9000c190:	68a0      	ldr	r0, [r4, #8]
9000c192:	4302      	orrs	r2, r0
9000c194:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c196:	3801      	subs	r0, #1
9000c198:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c19c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c19e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c1a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000c1a4:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c1a6:	d103      	bne.n	9000c1b0 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000c1a8:	691a      	ldr	r2, [r3, #16]
9000c1aa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000c1ae:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000c1b0:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c1b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000c1b4:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000c1b6:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c1b8:	db30      	blt.n	9000c21c <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000c1ba:	b292      	uxth	r2, r2
9000c1bc:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000c1be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000c1c0:	2a00      	cmp	r2, #0
9000c1c2:	db1c      	blt.n	9000c1fe <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c1c4:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c1c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c1ca:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c1ce:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c1d0:	d021      	beq.n	9000c216 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000c1d2:	b2c0      	uxtb	r0, r0
9000c1d4:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000c1d6:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000c1d8:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000c1da:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000c1dc:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c1de:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000c1e0:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000c1e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000c1e6:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000c1ea:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c1ec:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c1ee:	2303      	movs	r3, #3
      return HAL_ERROR;
9000c1f0:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c1f2:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c1f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000c1f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000c1fa:	2001      	movs	r0, #1
}
9000c1fc:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c1fe:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000c200:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c202:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c206:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000c20a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c20c:	6a19      	ldr	r1, [r3, #32]
9000c20e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c212:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c214:	d1dd      	bne.n	9000c1d2 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000c216:	2200      	movs	r2, #0
9000c218:	629a      	str	r2, [r3, #40]	; 0x28
9000c21a:	e7dc      	b.n	9000c1d6 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c21c:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000c21e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c220:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c224:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c226:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c228:	621a      	str	r2, [r3, #32]
9000c22a:	e7c8      	b.n	9000c1be <HAL_MDMA_Init+0x86>

9000c22c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000c22c:	b1f8      	cbz	r0, 9000c26e <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000c22e:	6802      	ldr	r2, [r0, #0]
9000c230:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000c232:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000c234:	68d0      	ldr	r0, [r2, #12]
{
9000c236:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000c238:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c23c:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000c23e:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000c240:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000c242:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000c244:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000c246:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000c248:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000c24a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000c24c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000c24e:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000c250:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000c252:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000c254:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c256:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c258:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000c25a:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000c25e:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000c262:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000c266:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000c268:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000c26c:	4770      	bx	lr
    return HAL_ERROR;
9000c26e:	2001      	movs	r0, #1
}
9000c270:	4770      	bx	lr
9000c272:	bf00      	nop

9000c274 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000c274:	b310      	cbz	r0, 9000c2bc <HAL_MDMA_ConfigPostRequestMask+0x48>
9000c276:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000c278:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c27c:	2801      	cmp	r0, #1
9000c27e:	d01f      	beq.n	9000c2c0 <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000c280:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000c282:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c286:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000c28a:	45f4      	cmp	ip, lr
9000c28c:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000c290:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c294:	d004      	beq.n	9000c2a0 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000c296:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000c298:	2200      	movs	r2, #0
9000c29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000c29e:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000c2a0:	681d      	ldr	r5, [r3, #0]
9000c2a2:	692c      	ldr	r4, [r5, #16]
9000c2a4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000c2a8:	d1f6      	bne.n	9000c298 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000c2aa:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000c2ac:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c2ae:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000c2b0:	b941      	cbnz	r1, 9000c2c4 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c2b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c2b6:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c2b8:	612a      	str	r2, [r5, #16]
9000c2ba:	e7ed      	b.n	9000c298 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000c2bc:	2001      	movs	r0, #1
9000c2be:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000c2c0:	2002      	movs	r0, #2
}
9000c2c2:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c2c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c2c8:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c2ca:	612a      	str	r2, [r5, #16]
9000c2cc:	e7e4      	b.n	9000c298 <HAL_MDMA_ConfigPostRequestMask+0x24>
9000c2ce:	bf00      	nop

9000c2d0 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000c2d0:	2800      	cmp	r0, #0
9000c2d2:	d06f      	beq.n	9000c3b4 <HAL_MDMA_Start_IT+0xe4>
9000c2d4:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000c2d6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c2da:	2801      	cmp	r0, #1
9000c2dc:	d072      	beq.n	9000c3c4 <HAL_MDMA_Start_IT+0xf4>
9000c2de:	2001      	movs	r0, #1
9000c2e0:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c2e4:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000c2e8:	2801      	cmp	r0, #1
9000c2ea:	d004      	beq.n	9000c2f6 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000c2ec:	2300      	movs	r3, #0
    return HAL_BUSY;
9000c2ee:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000c2f0:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000c2f4:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c2f6:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c2f8:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c2fc:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000c300:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c302:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c304:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c308:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000c30c:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c310:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c314:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c318:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000c31c:	68e5      	ldr	r5, [r4, #12]
9000c31e:	f025 0501 	bic.w	r5, r5, #1
9000c322:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c324:	6965      	ldr	r5, [r4, #20]
9000c326:	ea00 0005 	and.w	r0, r0, r5
9000c32a:	ea40 0003 	orr.w	r0, r0, r3
9000c32e:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c330:	6963      	ldr	r3, [r4, #20]
9000c332:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000c336:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000c33a:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000c33c:	f04f 031f 	mov.w	r3, #31
9000c340:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000c342:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000c344:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000c346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c348:	bf0c      	ite	eq
9000c34a:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c34e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c352:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000c356:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c35a:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000c35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c35e:	bf0c      	ite	eq
9000c360:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000c364:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000c368:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000c36a:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000c36e:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000c370:	68e3      	ldr	r3, [r4, #12]
9000c372:	f043 0306 	orr.w	r3, r3, #6
9000c376:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000c378:	b11a      	cbz	r2, 9000c382 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000c37a:	68e3      	ldr	r3, [r4, #12]
9000c37c:	f043 0310 	orr.w	r3, r3, #16
9000c380:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c382:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000c386:	b11b      	cbz	r3, 9000c390 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000c388:	68e3      	ldr	r3, [r4, #12]
9000c38a:	f043 0308 	orr.w	r3, r3, #8
9000c38e:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000c390:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000c394:	b11b      	cbz	r3, 9000c39e <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000c396:	68e3      	ldr	r3, [r4, #12]
9000c398:	f043 0320 	orr.w	r3, r3, #32
9000c39c:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000c39e:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c3a0:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000c3a4:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c3a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000c3ac:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c3ae:	d003      	beq.n	9000c3b8 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000c3b0:	2000      	movs	r0, #0
}
9000c3b2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000c3b4:	2001      	movs	r0, #1
9000c3b6:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c3b8:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000c3ba:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c3bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c3c0:	60e3      	str	r3, [r4, #12]
}
9000c3c2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000c3c4:	2002      	movs	r0, #2
}
9000c3c6:	4770      	bx	lr

9000c3c8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000c3c8:	4603      	mov	r3, r0
9000c3ca:	b188      	cbz	r0, 9000c3f0 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000c3cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000c3d0:	2a02      	cmp	r2, #2
9000c3d2:	d003      	beq.n	9000c3dc <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c3d4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000c3d6:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c3d8:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000c3da:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000c3dc:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c3de:	2104      	movs	r1, #4
  return HAL_OK;
9000c3e0:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c3e2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000c3e6:	68d3      	ldr	r3, [r2, #12]
9000c3e8:	f023 0301 	bic.w	r3, r3, #1
9000c3ec:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000c3ee:	4770      	bx	lr
    return HAL_ERROR;
9000c3f0:	2001      	movs	r0, #1
}
9000c3f2:	4770      	bx	lr

9000c3f4 <HAL_MDMA_IRQHandler>:
{
9000c3f4:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000c3f6:	2300      	movs	r3, #0
{
9000c3f8:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c3fa:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000c3fe:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000c400:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c402:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c404:	4b57      	ldr	r3, [pc, #348]	; (9000c564 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c406:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c408:	4a57      	ldr	r2, [pc, #348]	; (9000c568 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000c40a:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c40c:	6823      	ldr	r3, [r4, #0]
9000c40e:	441a      	add	r2, r3
9000c410:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000c414:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c418:	4202      	tst	r2, r0
9000c41a:	f000 80a0 	beq.w	9000c55e <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000c41e:	681a      	ldr	r2, [r3, #0]
9000c420:	07d1      	lsls	r1, r2, #31
9000c422:	d529      	bpl.n	9000c478 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000c424:	68da      	ldr	r2, [r3, #12]
9000c426:	0792      	lsls	r2, r2, #30
9000c428:	d526      	bpl.n	9000c478 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000c42a:	68da      	ldr	r2, [r3, #12]
9000c42c:	f022 0202 	bic.w	r2, r2, #2
9000c430:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000c432:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c434:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000c436:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c438:	bf54      	ite	pl
9000c43a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000c43e:	f041 0102 	orrmi.w	r1, r1, #2
9000c442:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000c444:	0591      	lsls	r1, r2, #22
9000c446:	d503      	bpl.n	9000c450 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000c448:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c44a:	f041 0104 	orr.w	r1, r1, #4
9000c44e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000c450:	05d0      	lsls	r0, r2, #23
9000c452:	d503      	bpl.n	9000c45c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000c454:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c456:	f041 0108 	orr.w	r1, r1, #8
9000c45a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000c45c:	0551      	lsls	r1, r2, #21
9000c45e:	d503      	bpl.n	9000c468 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000c460:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c462:	f041 0110 	orr.w	r1, r1, #16
9000c466:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000c468:	0510      	lsls	r0, r2, #20
9000c46a:	d503      	bpl.n	9000c474 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000c46c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000c46e:	f042 0220 	orr.w	r2, r2, #32
9000c472:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000c474:	2201      	movs	r2, #1
9000c476:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000c478:	681a      	ldr	r2, [r3, #0]
9000c47a:	06d1      	lsls	r1, r2, #27
9000c47c:	d509      	bpl.n	9000c492 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000c47e:	68da      	ldr	r2, [r3, #12]
9000c480:	0692      	lsls	r2, r2, #26
9000c482:	d506      	bpl.n	9000c492 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c484:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000c486:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c488:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000c48a:	b112      	cbz	r2, 9000c492 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000c48c:	4620      	mov	r0, r4
9000c48e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000c490:	6823      	ldr	r3, [r4, #0]
9000c492:	681a      	ldr	r2, [r3, #0]
9000c494:	0710      	lsls	r0, r2, #28
9000c496:	d509      	bpl.n	9000c4ac <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000c498:	68da      	ldr	r2, [r3, #12]
9000c49a:	06d1      	lsls	r1, r2, #27
9000c49c:	d506      	bpl.n	9000c4ac <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c49e:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000c4a0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c4a2:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000c4a4:	b112      	cbz	r2, 9000c4ac <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000c4a6:	4620      	mov	r0, r4
9000c4a8:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000c4aa:	6823      	ldr	r3, [r4, #0]
9000c4ac:	681a      	ldr	r2, [r3, #0]
9000c4ae:	0752      	lsls	r2, r2, #29
9000c4b0:	d509      	bpl.n	9000c4c6 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000c4b2:	68da      	ldr	r2, [r3, #12]
9000c4b4:	0710      	lsls	r0, r2, #28
9000c4b6:	d506      	bpl.n	9000c4c6 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c4b8:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c4ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c4bc:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c4be:	b112      	cbz	r2, 9000c4c6 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000c4c0:	4620      	mov	r0, r4
9000c4c2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000c4c4:	6823      	ldr	r3, [r4, #0]
9000c4c6:	681a      	ldr	r2, [r3, #0]
9000c4c8:	0791      	lsls	r1, r2, #30
9000c4ca:	d516      	bpl.n	9000c4fa <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000c4cc:	68da      	ldr	r2, [r3, #12]
9000c4ce:	0752      	lsls	r2, r2, #29
9000c4d0:	d513      	bpl.n	9000c4fa <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000c4d2:	68da      	ldr	r2, [r3, #12]
9000c4d4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000c4d8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000c4da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000c4de:	2a04      	cmp	r2, #4
9000c4e0:	d034      	beq.n	9000c54c <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c4e2:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000c4e4:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c4e6:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000c4e8:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000c4ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000c4ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000c4f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000c4f4:	b10b      	cbz	r3, 9000c4fa <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000c4f6:	4620      	mov	r0, r4
9000c4f8:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000c4fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000c4fc:	2b00      	cmp	r3, #0
9000c4fe:	d02e      	beq.n	9000c55e <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000c500:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c502:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000c504:	4b19      	ldr	r3, [pc, #100]	; (9000c56c <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c506:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000c50a:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000c50e:	68cb      	ldr	r3, [r1, #12]
9000c510:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c514:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000c516:	60cb      	str	r3, [r1, #12]
9000c518:	e002      	b.n	9000c520 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000c51a:	68cb      	ldr	r3, [r1, #12]
9000c51c:	07d8      	lsls	r0, r3, #31
9000c51e:	d504      	bpl.n	9000c52a <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000c520:	9b01      	ldr	r3, [sp, #4]
9000c522:	3301      	adds	r3, #1
9000c524:	4293      	cmp	r3, r2
9000c526:	9301      	str	r3, [sp, #4]
9000c528:	d9f7      	bls.n	9000c51a <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000c52a:	2300      	movs	r3, #0
9000c52c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c530:	68cb      	ldr	r3, [r1, #12]
9000c532:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c534:	bf4c      	ite	mi
9000c536:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000c538:	2301      	movpl	r3, #1
9000c53a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000c53e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000c540:	b16b      	cbz	r3, 9000c55e <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000c542:	4620      	mov	r0, r4
}
9000c544:	b003      	add	sp, #12
9000c546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000c54a:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000c54c:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000c54e:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000c550:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000c552:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000c556:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000c55a:	2b00      	cmp	r3, #0
9000c55c:	d1f1      	bne.n	9000c542 <HAL_MDMA_IRQHandler+0x14e>
}
9000c55e:	b003      	add	sp, #12
9000c560:	bd30      	pop	{r4, r5, pc}
9000c562:	bf00      	nop
9000c564:	24000054 	.word	0x24000054
9000c568:	adffffc0 	.word	0xadffffc0
9000c56c:	1b4e81b5 	.word	0x1b4e81b5

9000c570 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000c570:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000c572:	4c10      	ldr	r4, [pc, #64]	; (9000c5b4 <HAL_PWREx_ConfigSupply+0x44>)
9000c574:	68e3      	ldr	r3, [r4, #12]
9000c576:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000c57a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000c57c:	d105      	bne.n	9000c58a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000c57e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000c582:	1a18      	subs	r0, r3, r0
9000c584:	bf18      	it	ne
9000c586:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000c588:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000c58a:	f023 0307 	bic.w	r3, r3, #7
9000c58e:	4303      	orrs	r3, r0
9000c590:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000c592:	f7fc ff59 	bl	90009448 <HAL_GetTick>
9000c596:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000c598:	e005      	b.n	9000c5a6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000c59a:	f7fc ff55 	bl	90009448 <HAL_GetTick>
9000c59e:	1b40      	subs	r0, r0, r5
9000c5a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000c5a4:	d804      	bhi.n	9000c5b0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000c5a6:	6863      	ldr	r3, [r4, #4]
9000c5a8:	049b      	lsls	r3, r3, #18
9000c5aa:	d5f6      	bpl.n	9000c59a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000c5ac:	2000      	movs	r0, #0
}
9000c5ae:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000c5b0:	2001      	movs	r0, #1
}
9000c5b2:	bd38      	pop	{r3, r4, r5, pc}
9000c5b4:	58024800 	.word	0x58024800

9000c5b8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c5b8:	4b3b      	ldr	r3, [pc, #236]	; (9000c6a8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000c5ba:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000c5be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000c5c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000c5c2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c5c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000c5c8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000c5cc:	d038      	beq.n	9000c640 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c5ce:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000c5d2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c5d6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c5da:	fb05 f101 	mul.w	r1, r5, r1
9000c5de:	2a01      	cmp	r2, #1
9000c5e0:	ee07 1a90 	vmov	s15, r1
9000c5e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000c5e8:	d002      	beq.n	9000c5f0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000c5ea:	2a02      	cmp	r2, #2
9000c5ec:	d04e      	beq.n	9000c68c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000c5ee:	b34a      	cbz	r2, 9000c644 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c5f0:	ee07 0a90 	vmov	s15, r0
9000c5f4:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000c6ac <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000c5f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c5fe:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c602:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000c6b0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c60a:	ee07 3a90 	vmov	s15, r3
9000c60e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c616:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c61a:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c61e:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000c622:	4b21      	ldr	r3, [pc, #132]	; (9000c6a8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000c624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c626:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c62a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000c62c:	ee07 3a90 	vmov	s15, r3
9000c630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000c634:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c63c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000c640:	bc30      	pop	{r4, r5}
9000c642:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c644:	681a      	ldr	r2, [r3, #0]
9000c646:	0692      	lsls	r2, r2, #26
9000c648:	d527      	bpl.n	9000c69a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c64a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c64c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c650:	4a18      	ldr	r2, [pc, #96]	; (9000c6b4 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c652:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c658:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c660:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c6b0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c668:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c66a:	ee06 3a90 	vmov	s13, r3
9000c66e:	ee06 2a10 	vmov	s12, r2
9000c672:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c676:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c67a:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c67e:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c682:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c686:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c68a:	e7ca      	b.n	9000c622 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c68c:	ee07 0a90 	vmov	s15, r0
9000c690:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c6b8 <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000c694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c698:	e7b0      	b.n	9000c5fc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c69a:	ee07 0a90 	vmov	s15, r0
9000c69e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c6bc <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000c6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6a6:	e7a9      	b.n	9000c5fc <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000c6a8:	58024400 	.word	0x58024400
9000c6ac:	4a742400 	.word	0x4a742400
9000c6b0:	39000000 	.word	0x39000000
9000c6b4:	03d09000 	.word	0x03d09000
9000c6b8:	4bbebc20 	.word	0x4bbebc20
9000c6bc:	4c742400 	.word	0x4c742400

9000c6c0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000c6c0:	2800      	cmp	r0, #0
9000c6c2:	f000 81e8 	beq.w	9000ca96 <HAL_RCC_OscConfig+0x3d6>
{
9000c6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000c6c8:	6803      	ldr	r3, [r0, #0]
9000c6ca:	4604      	mov	r4, r0
9000c6cc:	07d9      	lsls	r1, r3, #31
9000c6ce:	d52e      	bpl.n	9000c72e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c6d0:	49a4      	ldr	r1, [pc, #656]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c6d2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c6d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c6d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000c6da:	2a10      	cmp	r2, #16
9000c6dc:	f000 8107 	beq.w	9000c8ee <HAL_RCC_OscConfig+0x22e>
9000c6e0:	2a18      	cmp	r2, #24
9000c6e2:	f000 80ff 	beq.w	9000c8e4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c6e6:	6863      	ldr	r3, [r4, #4]
9000c6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000c6ec:	f000 812a 	beq.w	9000c944 <HAL_RCC_OscConfig+0x284>
9000c6f0:	2b00      	cmp	r3, #0
9000c6f2:	f000 8168 	beq.w	9000c9c6 <HAL_RCC_OscConfig+0x306>
9000c6f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000c6fa:	4b9a      	ldr	r3, [pc, #616]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c6fc:	681a      	ldr	r2, [r3, #0]
9000c6fe:	f000 8289 	beq.w	9000cc14 <HAL_RCC_OscConfig+0x554>
9000c702:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000c706:	601a      	str	r2, [r3, #0]
9000c708:	681a      	ldr	r2, [r3, #0]
9000c70a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000c70e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000c710:	f7fc fe9a 	bl	90009448 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c714:	4e93      	ldr	r6, [pc, #588]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000c716:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c718:	e005      	b.n	9000c726 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000c71a:	f7fc fe95 	bl	90009448 <HAL_GetTick>
9000c71e:	1b40      	subs	r0, r0, r5
9000c720:	2864      	cmp	r0, #100	; 0x64
9000c722:	f200 814e 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c726:	6833      	ldr	r3, [r6, #0]
9000c728:	039b      	lsls	r3, r3, #14
9000c72a:	d5f6      	bpl.n	9000c71a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000c72c:	6823      	ldr	r3, [r4, #0]
9000c72e:	079d      	lsls	r5, r3, #30
9000c730:	f100 808a 	bmi.w	9000c848 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000c734:	06d9      	lsls	r1, r3, #27
9000c736:	d533      	bpl.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c738:	4a8a      	ldr	r2, [pc, #552]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c73a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c73c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c73e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000c742:	2b08      	cmp	r3, #8
9000c744:	f000 80e3 	beq.w	9000c90e <HAL_RCC_OscConfig+0x24e>
9000c748:	2b18      	cmp	r3, #24
9000c74a:	f000 80db 	beq.w	9000c904 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000c74e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000c750:	4d84      	ldr	r5, [pc, #528]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000c752:	2b00      	cmp	r3, #0
9000c754:	f000 816f 	beq.w	9000ca36 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000c758:	682b      	ldr	r3, [r5, #0]
9000c75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c75e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c760:	f7fc fe72 	bl	90009448 <HAL_GetTick>
9000c764:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000c766:	e005      	b.n	9000c774 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000c768:	f7fc fe6e 	bl	90009448 <HAL_GetTick>
9000c76c:	1b80      	subs	r0, r0, r6
9000c76e:	2802      	cmp	r0, #2
9000c770:	f200 8127 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000c774:	682b      	ldr	r3, [r5, #0]
9000c776:	05db      	lsls	r3, r3, #23
9000c778:	d5f6      	bpl.n	9000c768 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000c77a:	f7fc fe6b 	bl	90009454 <HAL_GetREVID>
9000c77e:	f241 0303 	movw	r3, #4099	; 0x1003
9000c782:	4298      	cmp	r0, r3
9000c784:	f200 826d 	bhi.w	9000cc62 <HAL_RCC_OscConfig+0x5a2>
9000c788:	6a22      	ldr	r2, [r4, #32]
9000c78a:	686b      	ldr	r3, [r5, #4]
9000c78c:	2a20      	cmp	r2, #32
9000c78e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000c792:	bf0c      	ite	eq
9000c794:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000c798:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000c79c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000c79e:	6823      	ldr	r3, [r4, #0]
9000c7a0:	071d      	lsls	r5, r3, #28
9000c7a2:	d516      	bpl.n	9000c7d2 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000c7a4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000c7a6:	4d6f      	ldr	r5, [pc, #444]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000c7a8:	2b00      	cmp	r3, #0
9000c7aa:	f000 8122 	beq.w	9000c9f2 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000c7ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c7b0:	f043 0301 	orr.w	r3, r3, #1
9000c7b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000c7b6:	f7fc fe47 	bl	90009448 <HAL_GetTick>
9000c7ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000c7bc:	e005      	b.n	9000c7ca <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000c7be:	f7fc fe43 	bl	90009448 <HAL_GetTick>
9000c7c2:	1b80      	subs	r0, r0, r6
9000c7c4:	2802      	cmp	r0, #2
9000c7c6:	f200 80fc 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000c7ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c7cc:	0798      	lsls	r0, r3, #30
9000c7ce:	d5f6      	bpl.n	9000c7be <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000c7d0:	6823      	ldr	r3, [r4, #0]
9000c7d2:	069a      	lsls	r2, r3, #26
9000c7d4:	d516      	bpl.n	9000c804 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000c7d6:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000c7d8:	4d62      	ldr	r5, [pc, #392]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000c7da:	2b00      	cmp	r3, #0
9000c7dc:	f000 811a 	beq.w	9000ca14 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000c7e0:	682b      	ldr	r3, [r5, #0]
9000c7e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000c7e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000c7e8:	f7fc fe2e 	bl	90009448 <HAL_GetTick>
9000c7ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000c7ee:	e005      	b.n	9000c7fc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000c7f0:	f7fc fe2a 	bl	90009448 <HAL_GetTick>
9000c7f4:	1b80      	subs	r0, r0, r6
9000c7f6:	2802      	cmp	r0, #2
9000c7f8:	f200 80e3 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000c7fc:	682b      	ldr	r3, [r5, #0]
9000c7fe:	049f      	lsls	r7, r3, #18
9000c800:	d5f6      	bpl.n	9000c7f0 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000c802:	6823      	ldr	r3, [r4, #0]
9000c804:	0759      	lsls	r1, r3, #29
9000c806:	f100 80a3 	bmi.w	9000c950 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000c80a:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c80c:	b1d0      	cbz	r0, 9000c844 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000c80e:	4d55      	ldr	r5, [pc, #340]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c810:	692b      	ldr	r3, [r5, #16]
9000c812:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000c816:	2b18      	cmp	r3, #24
9000c818:	f000 81ae 	beq.w	9000cb78 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000c81c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000c81e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000c820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000c824:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000c826:	f000 8142 	beq.w	9000caae <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000c82a:	f7fc fe0d 	bl	90009448 <HAL_GetTick>
9000c82e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000c830:	e005      	b.n	9000c83e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000c832:	f7fc fe09 	bl	90009448 <HAL_GetTick>
9000c836:	1b00      	subs	r0, r0, r4
9000c838:	2802      	cmp	r0, #2
9000c83a:	f200 80c2 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000c83e:	682b      	ldr	r3, [r5, #0]
9000c840:	019b      	lsls	r3, r3, #6
9000c842:	d4f6      	bmi.n	9000c832 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000c844:	2000      	movs	r0, #0
}
9000c846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c848:	4a46      	ldr	r2, [pc, #280]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c84a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c84c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000c84e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000c852:	d12d      	bne.n	9000c8b0 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000c854:	4b43      	ldr	r3, [pc, #268]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c856:	68e2      	ldr	r2, [r4, #12]
9000c858:	681b      	ldr	r3, [r3, #0]
9000c85a:	0759      	lsls	r1, r3, #29
9000c85c:	d501      	bpl.n	9000c862 <HAL_RCC_OscConfig+0x1a2>
9000c85e:	2a00      	cmp	r2, #0
9000c860:	d04e      	beq.n	9000c900 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c862:	4d40      	ldr	r5, [pc, #256]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c864:	682b      	ldr	r3, [r5, #0]
9000c866:	f023 0319 	bic.w	r3, r3, #25
9000c86a:	4313      	orrs	r3, r2
9000c86c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c86e:	f7fc fdeb 	bl	90009448 <HAL_GetTick>
9000c872:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c874:	e005      	b.n	9000c882 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000c876:	f7fc fde7 	bl	90009448 <HAL_GetTick>
9000c87a:	1b80      	subs	r0, r0, r6
9000c87c:	2802      	cmp	r0, #2
9000c87e:	f200 80a0 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c882:	682b      	ldr	r3, [r5, #0]
9000c884:	075b      	lsls	r3, r3, #29
9000c886:	d5f6      	bpl.n	9000c876 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000c888:	f7fc fde4 	bl	90009454 <HAL_GetREVID>
9000c88c:	f241 0303 	movw	r3, #4099	; 0x1003
9000c890:	4298      	cmp	r0, r3
9000c892:	f200 80f7 	bhi.w	9000ca84 <HAL_RCC_OscConfig+0x3c4>
9000c896:	6922      	ldr	r2, [r4, #16]
9000c898:	686b      	ldr	r3, [r5, #4]
9000c89a:	2a40      	cmp	r2, #64	; 0x40
9000c89c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000c8a0:	bf0c      	ite	eq
9000c8a2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000c8a6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000c8aa:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000c8ac:	6823      	ldr	r3, [r4, #0]
9000c8ae:	e741      	b.n	9000c734 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000c8b0:	2b18      	cmp	r3, #24
9000c8b2:	f000 80e3 	beq.w	9000ca7c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c8b6:	4d2b      	ldr	r5, [pc, #172]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000c8b8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c8ba:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000c8bc:	2a00      	cmp	r2, #0
9000c8be:	f000 80cc 	beq.w	9000ca5a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c8c2:	f023 0319 	bic.w	r3, r3, #25
9000c8c6:	4313      	orrs	r3, r2
9000c8c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c8ca:	f7fc fdbd 	bl	90009448 <HAL_GetTick>
9000c8ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c8d0:	e004      	b.n	9000c8dc <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000c8d2:	f7fc fdb9 	bl	90009448 <HAL_GetTick>
9000c8d6:	1b80      	subs	r0, r0, r6
9000c8d8:	2802      	cmp	r0, #2
9000c8da:	d872      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c8dc:	682b      	ldr	r3, [r5, #0]
9000c8de:	075f      	lsls	r7, r3, #29
9000c8e0:	d5f7      	bpl.n	9000c8d2 <HAL_RCC_OscConfig+0x212>
9000c8e2:	e7d1      	b.n	9000c888 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000c8e4:	f001 0103 	and.w	r1, r1, #3
9000c8e8:	2902      	cmp	r1, #2
9000c8ea:	f47f aefc 	bne.w	9000c6e6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000c8ee:	4a1d      	ldr	r2, [pc, #116]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c8f0:	6812      	ldr	r2, [r2, #0]
9000c8f2:	0392      	lsls	r2, r2, #14
9000c8f4:	f57f af1b 	bpl.w	9000c72e <HAL_RCC_OscConfig+0x6e>
9000c8f8:	6862      	ldr	r2, [r4, #4]
9000c8fa:	2a00      	cmp	r2, #0
9000c8fc:	f47f af17 	bne.w	9000c72e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000c900:	2001      	movs	r0, #1
}
9000c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000c904:	f002 0203 	and.w	r2, r2, #3
9000c908:	2a01      	cmp	r2, #1
9000c90a:	f47f af20 	bne.w	9000c74e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000c90e:	4b15      	ldr	r3, [pc, #84]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c910:	681b      	ldr	r3, [r3, #0]
9000c912:	05da      	lsls	r2, r3, #23
9000c914:	d502      	bpl.n	9000c91c <HAL_RCC_OscConfig+0x25c>
9000c916:	69e3      	ldr	r3, [r4, #28]
9000c918:	2b80      	cmp	r3, #128	; 0x80
9000c91a:	d1f1      	bne.n	9000c900 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000c91c:	f7fc fd9a 	bl	90009454 <HAL_GetREVID>
9000c920:	f241 0303 	movw	r3, #4099	; 0x1003
9000c924:	4298      	cmp	r0, r3
9000c926:	f200 80b8 	bhi.w	9000ca9a <HAL_RCC_OscConfig+0x3da>
9000c92a:	6a22      	ldr	r2, [r4, #32]
9000c92c:	2a20      	cmp	r2, #32
9000c92e:	f000 81a7 	beq.w	9000cc80 <HAL_RCC_OscConfig+0x5c0>
9000c932:	490c      	ldr	r1, [pc, #48]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c934:	684b      	ldr	r3, [r1, #4]
9000c936:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000c93a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000c93e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000c940:	6823      	ldr	r3, [r4, #0]
9000c942:	e72d      	b.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c944:	4a07      	ldr	r2, [pc, #28]	; (9000c964 <HAL_RCC_OscConfig+0x2a4>)
9000c946:	6813      	ldr	r3, [r2, #0]
9000c948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c94c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000c94e:	e6df      	b.n	9000c710 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000c950:	4d05      	ldr	r5, [pc, #20]	; (9000c968 <HAL_RCC_OscConfig+0x2a8>)
9000c952:	682b      	ldr	r3, [r5, #0]
9000c954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000c958:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000c95a:	f7fc fd75 	bl	90009448 <HAL_GetTick>
9000c95e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c960:	e009      	b.n	9000c976 <HAL_RCC_OscConfig+0x2b6>
9000c962:	bf00      	nop
9000c964:	58024400 	.word	0x58024400
9000c968:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000c96c:	f7fc fd6c 	bl	90009448 <HAL_GetTick>
9000c970:	1b80      	subs	r0, r0, r6
9000c972:	2864      	cmp	r0, #100	; 0x64
9000c974:	d825      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c976:	682b      	ldr	r3, [r5, #0]
9000c978:	05da      	lsls	r2, r3, #23
9000c97a:	d5f7      	bpl.n	9000c96c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000c97c:	68a3      	ldr	r3, [r4, #8]
9000c97e:	2b01      	cmp	r3, #1
9000c980:	f000 8178 	beq.w	9000cc74 <HAL_RCC_OscConfig+0x5b4>
9000c984:	2b00      	cmp	r3, #0
9000c986:	f000 8153 	beq.w	9000cc30 <HAL_RCC_OscConfig+0x570>
9000c98a:	2b05      	cmp	r3, #5
9000c98c:	4ba5      	ldr	r3, [pc, #660]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
9000c98e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000c990:	f000 817f 	beq.w	9000cc92 <HAL_RCC_OscConfig+0x5d2>
9000c994:	f022 0201 	bic.w	r2, r2, #1
9000c998:	671a      	str	r2, [r3, #112]	; 0x70
9000c99a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000c99c:	f022 0204 	bic.w	r2, r2, #4
9000c9a0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000c9a2:	f7fc fd51 	bl	90009448 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c9a6:	4e9f      	ldr	r6, [pc, #636]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c9a8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000c9ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c9ae:	e004      	b.n	9000c9ba <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c9b0:	f7fc fd4a 	bl	90009448 <HAL_GetTick>
9000c9b4:	1b40      	subs	r0, r0, r5
9000c9b6:	42b8      	cmp	r0, r7
9000c9b8:	d803      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c9ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000c9bc:	079b      	lsls	r3, r3, #30
9000c9be:	d5f7      	bpl.n	9000c9b0 <HAL_RCC_OscConfig+0x2f0>
9000c9c0:	e723      	b.n	9000c80a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000c9c2:	2003      	movs	r0, #3
}
9000c9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c9c6:	4d97      	ldr	r5, [pc, #604]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
9000c9c8:	682b      	ldr	r3, [r5, #0]
9000c9ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000c9ce:	602b      	str	r3, [r5, #0]
9000c9d0:	682b      	ldr	r3, [r5, #0]
9000c9d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000c9d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c9d8:	f7fc fd36 	bl	90009448 <HAL_GetTick>
9000c9dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000c9de:	e004      	b.n	9000c9ea <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000c9e0:	f7fc fd32 	bl	90009448 <HAL_GetTick>
9000c9e4:	1b80      	subs	r0, r0, r6
9000c9e6:	2864      	cmp	r0, #100	; 0x64
9000c9e8:	d8eb      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000c9ea:	682b      	ldr	r3, [r5, #0]
9000c9ec:	039f      	lsls	r7, r3, #14
9000c9ee:	d4f7      	bmi.n	9000c9e0 <HAL_RCC_OscConfig+0x320>
9000c9f0:	e69c      	b.n	9000c72c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000c9f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c9f4:	f023 0301 	bic.w	r3, r3, #1
9000c9f8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000c9fa:	f7fc fd25 	bl	90009448 <HAL_GetTick>
9000c9fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000ca00:	e004      	b.n	9000ca0c <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000ca02:	f7fc fd21 	bl	90009448 <HAL_GetTick>
9000ca06:	1b80      	subs	r0, r0, r6
9000ca08:	2802      	cmp	r0, #2
9000ca0a:	d8da      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000ca0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ca0e:	0799      	lsls	r1, r3, #30
9000ca10:	d4f7      	bmi.n	9000ca02 <HAL_RCC_OscConfig+0x342>
9000ca12:	e6dd      	b.n	9000c7d0 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000ca14:	682b      	ldr	r3, [r5, #0]
9000ca16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000ca1a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000ca1c:	f7fc fd14 	bl	90009448 <HAL_GetTick>
9000ca20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000ca22:	e004      	b.n	9000ca2e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000ca24:	f7fc fd10 	bl	90009448 <HAL_GetTick>
9000ca28:	1b80      	subs	r0, r0, r6
9000ca2a:	2802      	cmp	r0, #2
9000ca2c:	d8c9      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000ca2e:	682b      	ldr	r3, [r5, #0]
9000ca30:	0498      	lsls	r0, r3, #18
9000ca32:	d4f7      	bmi.n	9000ca24 <HAL_RCC_OscConfig+0x364>
9000ca34:	e6e5      	b.n	9000c802 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000ca36:	682b      	ldr	r3, [r5, #0]
9000ca38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000ca3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ca3e:	f7fc fd03 	bl	90009448 <HAL_GetTick>
9000ca42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000ca44:	e004      	b.n	9000ca50 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000ca46:	f7fc fcff 	bl	90009448 <HAL_GetTick>
9000ca4a:	1b80      	subs	r0, r0, r6
9000ca4c:	2802      	cmp	r0, #2
9000ca4e:	d8b8      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000ca50:	682b      	ldr	r3, [r5, #0]
9000ca52:	05df      	lsls	r7, r3, #23
9000ca54:	d4f7      	bmi.n	9000ca46 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000ca56:	6823      	ldr	r3, [r4, #0]
9000ca58:	e6a2      	b.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000ca5a:	f023 0301 	bic.w	r3, r3, #1
9000ca5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ca60:	f7fc fcf2 	bl	90009448 <HAL_GetTick>
9000ca64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000ca66:	e004      	b.n	9000ca72 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000ca68:	f7fc fcee 	bl	90009448 <HAL_GetTick>
9000ca6c:	1b80      	subs	r0, r0, r6
9000ca6e:	2802      	cmp	r0, #2
9000ca70:	d8a7      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000ca72:	682b      	ldr	r3, [r5, #0]
9000ca74:	0758      	lsls	r0, r3, #29
9000ca76:	d4f7      	bmi.n	9000ca68 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ca78:	6823      	ldr	r3, [r4, #0]
9000ca7a:	e65b      	b.n	9000c734 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000ca7c:	0790      	lsls	r0, r2, #30
9000ca7e:	f47f af1a 	bne.w	9000c8b6 <HAL_RCC_OscConfig+0x1f6>
9000ca82:	e6e7      	b.n	9000c854 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000ca84:	686b      	ldr	r3, [r5, #4]
9000ca86:	6922      	ldr	r2, [r4, #16]
9000ca88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000ca8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000ca90:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ca92:	6823      	ldr	r3, [r4, #0]
9000ca94:	e64e      	b.n	9000c734 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000ca96:	2001      	movs	r0, #1
}
9000ca98:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ca9a:	4a62      	ldr	r2, [pc, #392]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
9000ca9c:	6a21      	ldr	r1, [r4, #32]
9000ca9e:	68d3      	ldr	r3, [r2, #12]
9000caa0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000caa4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000caa8:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000caaa:	6823      	ldr	r3, [r4, #0]
9000caac:	e678      	b.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000caae:	f7fc fccb 	bl	90009448 <HAL_GetTick>
9000cab2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cab4:	e004      	b.n	9000cac0 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cab6:	f7fc fcc7 	bl	90009448 <HAL_GetTick>
9000caba:	1b80      	subs	r0, r0, r6
9000cabc:	2802      	cmp	r0, #2
9000cabe:	d880      	bhi.n	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cac0:	682b      	ldr	r3, [r5, #0]
9000cac2:	0199      	lsls	r1, r3, #6
9000cac4:	d4f7      	bmi.n	9000cab6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000cac6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000cac8:	4b57      	ldr	r3, [pc, #348]	; (9000cc28 <HAL_RCC_OscConfig+0x568>)
9000caca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000cacc:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cace:	4957      	ldr	r1, [pc, #348]	; (9000cc2c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cad0:	4e54      	ldr	r6, [pc, #336]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000cad2:	4313      	orrs	r3, r2
9000cad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000cad6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000cada:	62ab      	str	r3, [r5, #40]	; 0x28
9000cadc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000cae0:	3b01      	subs	r3, #1
9000cae2:	3a01      	subs	r2, #1
9000cae4:	025b      	lsls	r3, r3, #9
9000cae6:	0412      	lsls	r2, r2, #16
9000cae8:	b29b      	uxth	r3, r3
9000caea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000caee:	4313      	orrs	r3, r2
9000caf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000caf2:	3a01      	subs	r2, #1
9000caf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000caf8:	4313      	orrs	r3, r2
9000cafa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000cafc:	3a01      	subs	r2, #1
9000cafe:	0612      	lsls	r2, r2, #24
9000cb00:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000cb04:	4313      	orrs	r3, r2
9000cb06:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000cb08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb0a:	f023 0301 	bic.w	r3, r3, #1
9000cb0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cb10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000cb12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000cb14:	4011      	ands	r1, r2
9000cb16:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000cb1a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000cb1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000cb20:	f023 030c 	bic.w	r3, r3, #12
9000cb24:	4313      	orrs	r3, r2
9000cb26:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000cb28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000cb2c:	f023 0302 	bic.w	r3, r3, #2
9000cb30:	4313      	orrs	r3, r2
9000cb32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000cb34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000cb3a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000cb3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000cb42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000cb44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000cb4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000cb4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cb4e:	f043 0301 	orr.w	r3, r3, #1
9000cb52:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000cb54:	682b      	ldr	r3, [r5, #0]
9000cb56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000cb5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cb5c:	f7fc fc74 	bl	90009448 <HAL_GetTick>
9000cb60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cb62:	e005      	b.n	9000cb70 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cb64:	f7fc fc70 	bl	90009448 <HAL_GetTick>
9000cb68:	1b00      	subs	r0, r0, r4
9000cb6a:	2802      	cmp	r0, #2
9000cb6c:	f63f af29 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cb70:	6833      	ldr	r3, [r6, #0]
9000cb72:	019a      	lsls	r2, r3, #6
9000cb74:	d5f6      	bpl.n	9000cb64 <HAL_RCC_OscConfig+0x4a4>
9000cb76:	e665      	b.n	9000c844 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000cb78:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000cb7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000cb7c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000cb7e:	f43f ae62 	beq.w	9000c846 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000cb82:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000cb86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000cb88:	428b      	cmp	r3, r1
9000cb8a:	f47f aeb9 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000cb8e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000cb92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000cb94:	429a      	cmp	r2, r3
9000cb96:	f47f aeb3 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000cb9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000cb9c:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000cba0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000cba2:	429a      	cmp	r2, r3
9000cba4:	f47f aeac 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000cba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000cbaa:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000cbae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000cbb0:	429a      	cmp	r2, r3
9000cbb2:	f47f aea5 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000cbb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000cbb8:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000cbbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000cbbe:	429a      	cmp	r2, r3
9000cbc0:	f47f ae9e 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000cbc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000cbc6:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000cbca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000cbcc:	429e      	cmp	r6, r3
9000cbce:	f47f ae97 	bne.w	9000c900 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000cbd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000cbd4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000cbd6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000cbda:	429a      	cmp	r2, r3
9000cbdc:	f43f ae32 	beq.w	9000c844 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000cbe0:	4a10      	ldr	r2, [pc, #64]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
9000cbe2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000cbe4:	f023 0301 	bic.w	r3, r3, #1
9000cbe8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000cbea:	f7fc fc2d 	bl	90009448 <HAL_GetTick>
9000cbee:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000cbf0:	f7fc fc2a 	bl	90009448 <HAL_GetTick>
9000cbf4:	42a8      	cmp	r0, r5
9000cbf6:	d0fb      	beq.n	9000cbf0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cbf8:	4a0a      	ldr	r2, [pc, #40]	; (9000cc24 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000cbfa:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cbfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000cbfe:	4b0b      	ldr	r3, [pc, #44]	; (9000cc2c <HAL_RCC_OscConfig+0x56c>)
9000cc00:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000cc02:	4023      	ands	r3, r4
9000cc04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000cc08:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000cc0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000cc0c:	f043 0301 	orr.w	r3, r3, #1
9000cc10:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cc14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000cc18:	601a      	str	r2, [r3, #0]
9000cc1a:	681a      	ldr	r2, [r3, #0]
9000cc1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000cc20:	601a      	str	r2, [r3, #0]
9000cc22:	e575      	b.n	9000c710 <HAL_RCC_OscConfig+0x50>
9000cc24:	58024400 	.word	0x58024400
9000cc28:	fffffc0c 	.word	0xfffffc0c
9000cc2c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cc30:	4d1c      	ldr	r5, [pc, #112]	; (9000cca4 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cc32:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cc36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cc38:	f023 0301 	bic.w	r3, r3, #1
9000cc3c:	672b      	str	r3, [r5, #112]	; 0x70
9000cc3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cc40:	f023 0304 	bic.w	r3, r3, #4
9000cc44:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000cc46:	f7fc fbff 	bl	90009448 <HAL_GetTick>
9000cc4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000cc4c:	e005      	b.n	9000cc5a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cc4e:	f7fc fbfb 	bl	90009448 <HAL_GetTick>
9000cc52:	1b80      	subs	r0, r0, r6
9000cc54:	42b8      	cmp	r0, r7
9000cc56:	f63f aeb4 	bhi.w	9000c9c2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000cc5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cc5c:	0798      	lsls	r0, r3, #30
9000cc5e:	d4f6      	bmi.n	9000cc4e <HAL_RCC_OscConfig+0x58e>
9000cc60:	e5d3      	b.n	9000c80a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cc62:	68eb      	ldr	r3, [r5, #12]
9000cc64:	6a22      	ldr	r2, [r4, #32]
9000cc66:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000cc6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000cc6e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cc70:	6823      	ldr	r3, [r4, #0]
9000cc72:	e595      	b.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cc74:	4a0b      	ldr	r2, [pc, #44]	; (9000cca4 <HAL_RCC_OscConfig+0x5e4>)
9000cc76:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000cc78:	f043 0301 	orr.w	r3, r3, #1
9000cc7c:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000cc7e:	e690      	b.n	9000c9a2 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cc80:	4a08      	ldr	r2, [pc, #32]	; (9000cca4 <HAL_RCC_OscConfig+0x5e4>)
9000cc82:	6853      	ldr	r3, [r2, #4]
9000cc84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000cc88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000cc8c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cc8e:	6823      	ldr	r3, [r4, #0]
9000cc90:	e586      	b.n	9000c7a0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cc92:	f042 0204 	orr.w	r2, r2, #4
9000cc96:	671a      	str	r2, [r3, #112]	; 0x70
9000cc98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000cc9a:	f042 0201 	orr.w	r2, r2, #1
9000cc9e:	671a      	str	r2, [r3, #112]	; 0x70
9000cca0:	e67f      	b.n	9000c9a2 <HAL_RCC_OscConfig+0x2e2>
9000cca2:	bf00      	nop
9000cca4:	58024400 	.word	0x58024400

9000cca8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000cca8:	4a47      	ldr	r2, [pc, #284]	; (9000cdc8 <HAL_RCC_GetSysClockFreq+0x120>)
9000ccaa:	6913      	ldr	r3, [r2, #16]
9000ccac:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ccb0:	2b10      	cmp	r3, #16
9000ccb2:	d004      	beq.n	9000ccbe <HAL_RCC_GetSysClockFreq+0x16>
9000ccb4:	2b18      	cmp	r3, #24
9000ccb6:	d00d      	beq.n	9000ccd4 <HAL_RCC_GetSysClockFreq+0x2c>
9000ccb8:	b11b      	cbz	r3, 9000ccc2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000ccba:	4844      	ldr	r0, [pc, #272]	; (9000cdcc <HAL_RCC_GetSysClockFreq+0x124>)
9000ccbc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ccbe:	4844      	ldr	r0, [pc, #272]	; (9000cdd0 <HAL_RCC_GetSysClockFreq+0x128>)
9000ccc0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ccc2:	6813      	ldr	r3, [r2, #0]
9000ccc4:	0699      	lsls	r1, r3, #26
9000ccc6:	d54a      	bpl.n	9000cd5e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ccc8:	6813      	ldr	r3, [r2, #0]
9000ccca:	4842      	ldr	r0, [pc, #264]	; (9000cdd4 <HAL_RCC_GetSysClockFreq+0x12c>)
9000cccc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000ccd0:	40d8      	lsrs	r0, r3
9000ccd2:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ccd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000ccd6:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000ccd8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000ccda:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000ccdc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cce0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cce2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000cce6:	d038      	beq.n	9000cd5a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cce8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000ccec:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ccf0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000ccf4:	fb05 f101 	mul.w	r1, r5, r1
9000ccf8:	2b01      	cmp	r3, #1
9000ccfa:	ee07 1a90 	vmov	s15, r1
9000ccfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000cd02:	d002      	beq.n	9000cd0a <HAL_RCC_GetSysClockFreq+0x62>
9000cd04:	2b02      	cmp	r3, #2
9000cd06:	d02c      	beq.n	9000cd62 <HAL_RCC_GetSysClockFreq+0xba>
9000cd08:	b393      	cbz	r3, 9000cd70 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd0a:	ee07 0a90 	vmov	s15, r0
9000cd0e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000cdd8 <HAL_RCC_GetSysClockFreq+0x130>
9000cd12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd16:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000cd18:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000cd1c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000cddc <HAL_RCC_GetSysClockFreq+0x134>
9000cd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000cd24:	ee07 3a90 	vmov	s15, r3
9000cd28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000cd2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd30:	eee7 7a25 	vfma.f32	s15, s14, s11
9000cd34:	ee77 7a86 	vadd.f32	s15, s15, s12
9000cd38:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000cd3c:	4b22      	ldr	r3, [pc, #136]	; (9000cdc8 <HAL_RCC_GetSysClockFreq+0x120>)
9000cd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cd40:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000cd44:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000cd46:	ee07 3a90 	vmov	s15, r3
9000cd4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000cd4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000cd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000cd56:	ee17 0a90 	vmov	r0, s15
}
9000cd5a:	bc30      	pop	{r4, r5}
9000cd5c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000cd5e:	481d      	ldr	r0, [pc, #116]	; (9000cdd4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000cd60:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd62:	ee07 0a90 	vmov	s15, r0
9000cd66:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000cde0 <HAL_RCC_GetSysClockFreq+0x138>
9000cd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd6e:	e7d2      	b.n	9000cd16 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cd70:	6813      	ldr	r3, [r2, #0]
9000cd72:	069b      	lsls	r3, r3, #26
9000cd74:	d520      	bpl.n	9000cdb8 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd76:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd78:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd7c:	4915      	ldr	r1, [pc, #84]	; (9000cdd4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd7e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000cd82:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd84:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd8c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000cddc <HAL_RCC_GetSysClockFreq+0x134>
9000cd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd94:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd96:	ee06 3a90 	vmov	s13, r3
9000cd9a:	ee06 1a10 	vmov	s12, r1
9000cd9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000cda2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000cda6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000cdaa:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000cdae:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000cdb2:	ee66 6a87 	vmul.f32	s13, s13, s14
9000cdb6:	e7c1      	b.n	9000cd3c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cdb8:	ee07 0a90 	vmov	s15, r0
9000cdbc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000cde4 <HAL_RCC_GetSysClockFreq+0x13c>
9000cdc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cdc4:	e7a7      	b.n	9000cd16 <HAL_RCC_GetSysClockFreq+0x6e>
9000cdc6:	bf00      	nop
9000cdc8:	58024400 	.word	0x58024400
9000cdcc:	003d0900 	.word	0x003d0900
9000cdd0:	017d7840 	.word	0x017d7840
9000cdd4:	03d09000 	.word	0x03d09000
9000cdd8:	4a742400 	.word	0x4a742400
9000cddc:	39000000 	.word	0x39000000
9000cde0:	4bbebc20 	.word	0x4bbebc20
9000cde4:	4c742400 	.word	0x4c742400

9000cde8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000cde8:	2800      	cmp	r0, #0
9000cdea:	f000 810c 	beq.w	9000d006 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000cdee:	4a8c      	ldr	r2, [pc, #560]	; (9000d020 <HAL_RCC_ClockConfig+0x238>)
9000cdf0:	6813      	ldr	r3, [r2, #0]
9000cdf2:	f003 030f 	and.w	r3, r3, #15
9000cdf6:	428b      	cmp	r3, r1
{
9000cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cdfc:	4604      	mov	r4, r0
9000cdfe:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000ce00:	d20c      	bcs.n	9000ce1c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000ce02:	6813      	ldr	r3, [r2, #0]
9000ce04:	f023 030f 	bic.w	r3, r3, #15
9000ce08:	430b      	orrs	r3, r1
9000ce0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000ce0c:	6813      	ldr	r3, [r2, #0]
9000ce0e:	f003 030f 	and.w	r3, r3, #15
9000ce12:	428b      	cmp	r3, r1
9000ce14:	d002      	beq.n	9000ce1c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000ce16:	2001      	movs	r0, #1
}
9000ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000ce1c:	6823      	ldr	r3, [r4, #0]
9000ce1e:	075f      	lsls	r7, r3, #29
9000ce20:	d50b      	bpl.n	9000ce3a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000ce22:	4980      	ldr	r1, [pc, #512]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ce24:	6920      	ldr	r0, [r4, #16]
9000ce26:	698a      	ldr	r2, [r1, #24]
9000ce28:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ce2c:	4290      	cmp	r0, r2
9000ce2e:	d904      	bls.n	9000ce3a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000ce30:	698a      	ldr	r2, [r1, #24]
9000ce32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ce36:	4302      	orrs	r2, r0
9000ce38:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000ce3a:	071e      	lsls	r6, r3, #28
9000ce3c:	d50b      	bpl.n	9000ce56 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000ce3e:	4979      	ldr	r1, [pc, #484]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ce40:	6960      	ldr	r0, [r4, #20]
9000ce42:	69ca      	ldr	r2, [r1, #28]
9000ce44:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ce48:	4290      	cmp	r0, r2
9000ce4a:	d904      	bls.n	9000ce56 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000ce4c:	69ca      	ldr	r2, [r1, #28]
9000ce4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ce52:	4302      	orrs	r2, r0
9000ce54:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000ce56:	06d8      	lsls	r0, r3, #27
9000ce58:	d50b      	bpl.n	9000ce72 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000ce5a:	4972      	ldr	r1, [pc, #456]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ce5c:	69a0      	ldr	r0, [r4, #24]
9000ce5e:	69ca      	ldr	r2, [r1, #28]
9000ce60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000ce64:	4290      	cmp	r0, r2
9000ce66:	d904      	bls.n	9000ce72 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000ce68:	69ca      	ldr	r2, [r1, #28]
9000ce6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000ce6e:	4302      	orrs	r2, r0
9000ce70:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000ce72:	0699      	lsls	r1, r3, #26
9000ce74:	d50b      	bpl.n	9000ce8e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000ce76:	496b      	ldr	r1, [pc, #428]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ce78:	69e0      	ldr	r0, [r4, #28]
9000ce7a:	6a0a      	ldr	r2, [r1, #32]
9000ce7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ce80:	4290      	cmp	r0, r2
9000ce82:	d904      	bls.n	9000ce8e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000ce84:	6a0a      	ldr	r2, [r1, #32]
9000ce86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ce8a:	4302      	orrs	r2, r0
9000ce8c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000ce8e:	079a      	lsls	r2, r3, #30
9000ce90:	f140 80ab 	bpl.w	9000cfea <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ce94:	4863      	ldr	r0, [pc, #396]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ce96:	68e1      	ldr	r1, [r4, #12]
9000ce98:	6982      	ldr	r2, [r0, #24]
9000ce9a:	f002 020f 	and.w	r2, r2, #15
9000ce9e:	4291      	cmp	r1, r2
9000cea0:	d904      	bls.n	9000ceac <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000cea2:	6982      	ldr	r2, [r0, #24]
9000cea4:	f022 020f 	bic.w	r2, r2, #15
9000cea8:	430a      	orrs	r2, r1
9000ceaa:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000ceac:	07d8      	lsls	r0, r3, #31
9000ceae:	d530      	bpl.n	9000cf12 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000ceb0:	4a5c      	ldr	r2, [pc, #368]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000ceb2:	68a1      	ldr	r1, [r4, #8]
9000ceb4:	6993      	ldr	r3, [r2, #24]
9000ceb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000ceba:	430b      	orrs	r3, r1
9000cebc:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000cebe:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000cec0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000cec2:	2902      	cmp	r1, #2
9000cec4:	f000 80a1 	beq.w	9000d00a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000cec8:	2903      	cmp	r1, #3
9000ceca:	f000 8098 	beq.w	9000cffe <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000cece:	2901      	cmp	r1, #1
9000ced0:	f000 80a1 	beq.w	9000d016 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ced4:	0758      	lsls	r0, r3, #29
9000ced6:	d59e      	bpl.n	9000ce16 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ced8:	4e52      	ldr	r6, [pc, #328]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ceda:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000cede:	6933      	ldr	r3, [r6, #16]
9000cee0:	f023 0307 	bic.w	r3, r3, #7
9000cee4:	430b      	orrs	r3, r1
9000cee6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000cee8:	f7fc faae 	bl	90009448 <HAL_GetTick>
9000ceec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ceee:	e005      	b.n	9000cefc <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000cef0:	f7fc faaa 	bl	90009448 <HAL_GetTick>
9000cef4:	1bc0      	subs	r0, r0, r7
9000cef6:	4540      	cmp	r0, r8
9000cef8:	f200 808b 	bhi.w	9000d012 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000cefc:	6933      	ldr	r3, [r6, #16]
9000cefe:	6862      	ldr	r2, [r4, #4]
9000cf00:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cf04:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000cf08:	d1f2      	bne.n	9000cef0 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000cf0a:	6823      	ldr	r3, [r4, #0]
9000cf0c:	0799      	lsls	r1, r3, #30
9000cf0e:	d506      	bpl.n	9000cf1e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000cf10:	68e1      	ldr	r1, [r4, #12]
9000cf12:	4844      	ldr	r0, [pc, #272]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cf14:	6982      	ldr	r2, [r0, #24]
9000cf16:	f002 020f 	and.w	r2, r2, #15
9000cf1a:	428a      	cmp	r2, r1
9000cf1c:	d869      	bhi.n	9000cff2 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000cf1e:	4940      	ldr	r1, [pc, #256]	; (9000d020 <HAL_RCC_ClockConfig+0x238>)
9000cf20:	680a      	ldr	r2, [r1, #0]
9000cf22:	f002 020f 	and.w	r2, r2, #15
9000cf26:	42aa      	cmp	r2, r5
9000cf28:	d90a      	bls.n	9000cf40 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000cf2a:	680a      	ldr	r2, [r1, #0]
9000cf2c:	f022 020f 	bic.w	r2, r2, #15
9000cf30:	432a      	orrs	r2, r5
9000cf32:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000cf34:	680a      	ldr	r2, [r1, #0]
9000cf36:	f002 020f 	and.w	r2, r2, #15
9000cf3a:	42aa      	cmp	r2, r5
9000cf3c:	f47f af6b 	bne.w	9000ce16 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000cf40:	075a      	lsls	r2, r3, #29
9000cf42:	d50b      	bpl.n	9000cf5c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000cf44:	4937      	ldr	r1, [pc, #220]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cf46:	6920      	ldr	r0, [r4, #16]
9000cf48:	698a      	ldr	r2, [r1, #24]
9000cf4a:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cf4e:	4290      	cmp	r0, r2
9000cf50:	d204      	bcs.n	9000cf5c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000cf52:	698a      	ldr	r2, [r1, #24]
9000cf54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000cf58:	4302      	orrs	r2, r0
9000cf5a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000cf5c:	071f      	lsls	r7, r3, #28
9000cf5e:	d50b      	bpl.n	9000cf78 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000cf60:	4930      	ldr	r1, [pc, #192]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cf62:	6960      	ldr	r0, [r4, #20]
9000cf64:	69ca      	ldr	r2, [r1, #28]
9000cf66:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cf6a:	4290      	cmp	r0, r2
9000cf6c:	d204      	bcs.n	9000cf78 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000cf6e:	69ca      	ldr	r2, [r1, #28]
9000cf70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000cf74:	4302      	orrs	r2, r0
9000cf76:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000cf78:	06de      	lsls	r6, r3, #27
9000cf7a:	d50b      	bpl.n	9000cf94 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000cf7c:	4929      	ldr	r1, [pc, #164]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cf7e:	69a0      	ldr	r0, [r4, #24]
9000cf80:	69ca      	ldr	r2, [r1, #28]
9000cf82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000cf86:	4290      	cmp	r0, r2
9000cf88:	d204      	bcs.n	9000cf94 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000cf8a:	69ca      	ldr	r2, [r1, #28]
9000cf8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000cf90:	4302      	orrs	r2, r0
9000cf92:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000cf94:	069d      	lsls	r5, r3, #26
9000cf96:	d50b      	bpl.n	9000cfb0 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000cf98:	4a22      	ldr	r2, [pc, #136]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cf9a:	69e1      	ldr	r1, [r4, #28]
9000cf9c:	6a13      	ldr	r3, [r2, #32]
9000cf9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000cfa2:	4299      	cmp	r1, r3
9000cfa4:	d204      	bcs.n	9000cfb0 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000cfa6:	6a13      	ldr	r3, [r2, #32]
9000cfa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000cfac:	430b      	orrs	r3, r1
9000cfae:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cfb0:	f7ff fe7a 	bl	9000cca8 <HAL_RCC_GetSysClockFreq>
9000cfb4:	4a1b      	ldr	r2, [pc, #108]	; (9000d024 <HAL_RCC_ClockConfig+0x23c>)
9000cfb6:	4603      	mov	r3, r0
9000cfb8:	481b      	ldr	r0, [pc, #108]	; (9000d028 <HAL_RCC_ClockConfig+0x240>)
9000cfba:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfbc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cfbe:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000cfc2:	4d1a      	ldr	r5, [pc, #104]	; (9000d02c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfc4:	f002 020f 	and.w	r2, r2, #15
9000cfc8:	4c19      	ldr	r4, [pc, #100]	; (9000d030 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cfca:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfcc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cfce:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000cfd2:	4818      	ldr	r0, [pc, #96]	; (9000d034 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfd4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cfd8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000cfda:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000cfdc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfde:	40d3      	lsrs	r3, r2
9000cfe0:	6023      	str	r3, [r4, #0]
}
9000cfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000cfe6:	f7f7 be87 	b.w	90004cf8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000cfea:	07da      	lsls	r2, r3, #31
9000cfec:	f53f af60 	bmi.w	9000ceb0 <HAL_RCC_ClockConfig+0xc8>
9000cff0:	e795      	b.n	9000cf1e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000cff2:	6982      	ldr	r2, [r0, #24]
9000cff4:	f022 020f 	bic.w	r2, r2, #15
9000cff8:	430a      	orrs	r2, r1
9000cffa:	6182      	str	r2, [r0, #24]
9000cffc:	e78f      	b.n	9000cf1e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cffe:	019f      	lsls	r7, r3, #6
9000d000:	f53f af6a 	bmi.w	9000ced8 <HAL_RCC_ClockConfig+0xf0>
9000d004:	e707      	b.n	9000ce16 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000d006:	2001      	movs	r0, #1
}
9000d008:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d00a:	039b      	lsls	r3, r3, #14
9000d00c:	f53f af64 	bmi.w	9000ced8 <HAL_RCC_ClockConfig+0xf0>
9000d010:	e701      	b.n	9000ce16 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000d012:	2003      	movs	r0, #3
9000d014:	e700      	b.n	9000ce18 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000d016:	05de      	lsls	r6, r3, #23
9000d018:	f53f af5e 	bmi.w	9000ced8 <HAL_RCC_ClockConfig+0xf0>
9000d01c:	e6fb      	b.n	9000ce16 <HAL_RCC_ClockConfig+0x2e>
9000d01e:	bf00      	nop
9000d020:	52002000 	.word	0x52002000
9000d024:	58024400 	.word	0x58024400
9000d028:	9002b2a8 	.word	0x9002b2a8
9000d02c:	24000054 	.word	0x24000054
9000d030:	24000058 	.word	0x24000058
9000d034:	24000060 	.word	0x24000060

9000d038 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d038:	4a1c      	ldr	r2, [pc, #112]	; (9000d0ac <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000d03a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d03c:	6913      	ldr	r3, [r2, #16]
9000d03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d042:	2b10      	cmp	r3, #16
9000d044:	d021      	beq.n	9000d08a <HAL_RCC_GetPCLK1Freq+0x52>
9000d046:	2b18      	cmp	r3, #24
9000d048:	d02a      	beq.n	9000d0a0 <HAL_RCC_GetPCLK1Freq+0x68>
9000d04a:	b303      	cbz	r3, 9000d08e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d04c:	4818      	ldr	r0, [pc, #96]	; (9000d0b0 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d04e:	4a17      	ldr	r2, [pc, #92]	; (9000d0ac <HAL_RCC_GetPCLK1Freq+0x74>)
9000d050:	4918      	ldr	r1, [pc, #96]	; (9000d0b4 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000d052:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d054:	4c18      	ldr	r4, [pc, #96]	; (9000d0b8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d056:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d05a:	4d18      	ldr	r5, [pc, #96]	; (9000d0bc <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d05c:	5ccb      	ldrb	r3, [r1, r3]
9000d05e:	f003 031f 	and.w	r3, r3, #31
9000d062:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d064:	6993      	ldr	r3, [r2, #24]
9000d066:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d06a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d06c:	5ccb      	ldrb	r3, [r1, r3]
9000d06e:	f003 031f 	and.w	r3, r3, #31
9000d072:	fa20 f303 	lsr.w	r3, r0, r3
9000d076:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000d078:	69d2      	ldr	r2, [r2, #28]
9000d07a:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000d07e:	5c88      	ldrb	r0, [r1, r2]
9000d080:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000d084:	fa23 f000 	lsr.w	r0, r3, r0
9000d088:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d08a:	480d      	ldr	r0, [pc, #52]	; (9000d0c0 <HAL_RCC_GetPCLK1Freq+0x88>)
9000d08c:	e7df      	b.n	9000d04e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d08e:	6813      	ldr	r3, [r2, #0]
9000d090:	069b      	lsls	r3, r3, #26
9000d092:	d508      	bpl.n	9000d0a6 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d094:	6813      	ldr	r3, [r2, #0]
9000d096:	480b      	ldr	r0, [pc, #44]	; (9000d0c4 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d098:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d09c:	40d8      	lsrs	r0, r3
9000d09e:	e7d6      	b.n	9000d04e <HAL_RCC_GetPCLK1Freq+0x16>
9000d0a0:	f7ff fa8a 	bl	9000c5b8 <HAL_RCC_GetSysClockFreq.part.0>
9000d0a4:	e7d3      	b.n	9000d04e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d0a6:	4807      	ldr	r0, [pc, #28]	; (9000d0c4 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d0a8:	e7d1      	b.n	9000d04e <HAL_RCC_GetPCLK1Freq+0x16>
9000d0aa:	bf00      	nop
9000d0ac:	58024400 	.word	0x58024400
9000d0b0:	003d0900 	.word	0x003d0900
9000d0b4:	9002b2a8 	.word	0x9002b2a8
9000d0b8:	24000058 	.word	0x24000058
9000d0bc:	24000054 	.word	0x24000054
9000d0c0:	017d7840 	.word	0x017d7840
9000d0c4:	03d09000 	.word	0x03d09000

9000d0c8 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d0c8:	4a1c      	ldr	r2, [pc, #112]	; (9000d13c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000d0ca:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d0cc:	6913      	ldr	r3, [r2, #16]
9000d0ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d0d2:	2b10      	cmp	r3, #16
9000d0d4:	d021      	beq.n	9000d11a <HAL_RCC_GetPCLK2Freq+0x52>
9000d0d6:	2b18      	cmp	r3, #24
9000d0d8:	d02a      	beq.n	9000d130 <HAL_RCC_GetPCLK2Freq+0x68>
9000d0da:	b303      	cbz	r3, 9000d11e <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d0dc:	4818      	ldr	r0, [pc, #96]	; (9000d140 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d0de:	4a17      	ldr	r2, [pc, #92]	; (9000d13c <HAL_RCC_GetPCLK2Freq+0x74>)
9000d0e0:	4918      	ldr	r1, [pc, #96]	; (9000d144 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000d0e2:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d0e4:	4c18      	ldr	r4, [pc, #96]	; (9000d148 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d0e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d0ea:	4d18      	ldr	r5, [pc, #96]	; (9000d14c <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d0ec:	5ccb      	ldrb	r3, [r1, r3]
9000d0ee:	f003 031f 	and.w	r3, r3, #31
9000d0f2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d0f4:	6993      	ldr	r3, [r2, #24]
9000d0f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d0fa:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d0fc:	5ccb      	ldrb	r3, [r1, r3]
9000d0fe:	f003 031f 	and.w	r3, r3, #31
9000d102:	fa20 f303 	lsr.w	r3, r0, r3
9000d106:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000d108:	69d2      	ldr	r2, [r2, #28]
9000d10a:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000d10e:	5c88      	ldrb	r0, [r1, r2]
9000d110:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000d114:	fa23 f000 	lsr.w	r0, r3, r0
9000d118:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d11a:	480d      	ldr	r0, [pc, #52]	; (9000d150 <HAL_RCC_GetPCLK2Freq+0x88>)
9000d11c:	e7df      	b.n	9000d0de <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d11e:	6813      	ldr	r3, [r2, #0]
9000d120:	069b      	lsls	r3, r3, #26
9000d122:	d508      	bpl.n	9000d136 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d124:	6813      	ldr	r3, [r2, #0]
9000d126:	480b      	ldr	r0, [pc, #44]	; (9000d154 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d128:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d12c:	40d8      	lsrs	r0, r3
9000d12e:	e7d6      	b.n	9000d0de <HAL_RCC_GetPCLK2Freq+0x16>
9000d130:	f7ff fa42 	bl	9000c5b8 <HAL_RCC_GetSysClockFreq.part.0>
9000d134:	e7d3      	b.n	9000d0de <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d136:	4807      	ldr	r0, [pc, #28]	; (9000d154 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d138:	e7d1      	b.n	9000d0de <HAL_RCC_GetPCLK2Freq+0x16>
9000d13a:	bf00      	nop
9000d13c:	58024400 	.word	0x58024400
9000d140:	003d0900 	.word	0x003d0900
9000d144:	9002b2a8 	.word	0x9002b2a8
9000d148:	24000058 	.word	0x24000058
9000d14c:	24000054 	.word	0x24000054
9000d150:	017d7840 	.word	0x017d7840
9000d154:	03d09000 	.word	0x03d09000

9000d158 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d158:	4b13      	ldr	r3, [pc, #76]	; (9000d1a8 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000d15a:	223f      	movs	r2, #63	; 0x3f
9000d15c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d15e:	691a      	ldr	r2, [r3, #16]
9000d160:	f002 0207 	and.w	r2, r2, #7
9000d164:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000d166:	699a      	ldr	r2, [r3, #24]
9000d168:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000d16c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000d16e:	699a      	ldr	r2, [r3, #24]
9000d170:	f002 020f 	and.w	r2, r2, #15
9000d174:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000d176:	699a      	ldr	r2, [r3, #24]
9000d178:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d17c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000d17e:	69da      	ldr	r2, [r3, #28]
9000d180:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d184:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000d186:	69da      	ldr	r2, [r3, #28]
9000d188:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d18c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d18e:	6a1b      	ldr	r3, [r3, #32]
{
9000d190:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d192:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d196:	4c05      	ldr	r4, [pc, #20]	; (9000d1ac <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d198:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d19a:	6823      	ldr	r3, [r4, #0]
}
9000d19c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d1a0:	f003 030f 	and.w	r3, r3, #15
9000d1a4:	600b      	str	r3, [r1, #0]
}
9000d1a6:	4770      	bx	lr
9000d1a8:	58024400 	.word	0x58024400
9000d1ac:	52002000 	.word	0x52002000

9000d1b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d1b2:	4c3a      	ldr	r4, [pc, #232]	; (9000d29c <RCCEx_PLL2_Config+0xec>)
9000d1b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d1b6:	f003 0303 	and.w	r3, r3, #3
9000d1ba:	2b03      	cmp	r3, #3
9000d1bc:	d067      	beq.n	9000d28e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000d1be:	6823      	ldr	r3, [r4, #0]
9000d1c0:	4606      	mov	r6, r0
9000d1c2:	460f      	mov	r7, r1
9000d1c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000d1c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d1ca:	f7fc f93d 	bl	90009448 <HAL_GetTick>
9000d1ce:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d1d0:	e004      	b.n	9000d1dc <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d1d2:	f7fc f939 	bl	90009448 <HAL_GetTick>
9000d1d6:	1b43      	subs	r3, r0, r5
9000d1d8:	2b02      	cmp	r3, #2
9000d1da:	d856      	bhi.n	9000d28a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d1dc:	6823      	ldr	r3, [r4, #0]
9000d1de:	011a      	lsls	r2, r3, #4
9000d1e0:	d4f7      	bmi.n	9000d1d2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000d1e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d1e4:	6832      	ldr	r2, [r6, #0]
9000d1e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000d1ea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d1ee:	62a3      	str	r3, [r4, #40]	; 0x28
9000d1f0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d1f4:	3b01      	subs	r3, #1
9000d1f6:	3a01      	subs	r2, #1
9000d1f8:	025b      	lsls	r3, r3, #9
9000d1fa:	0412      	lsls	r2, r2, #16
9000d1fc:	b29b      	uxth	r3, r3
9000d1fe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d202:	4313      	orrs	r3, r2
9000d204:	6872      	ldr	r2, [r6, #4]
9000d206:	3a01      	subs	r2, #1
9000d208:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d20c:	4313      	orrs	r3, r2
9000d20e:	6932      	ldr	r2, [r6, #16]
9000d210:	3a01      	subs	r2, #1
9000d212:	0612      	lsls	r2, r2, #24
9000d214:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d218:	4313      	orrs	r3, r2
9000d21a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000d21c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d21e:	6972      	ldr	r2, [r6, #20]
9000d220:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d224:	4313      	orrs	r3, r2
9000d226:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d228:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d22a:	69b3      	ldr	r3, [r6, #24]
9000d22c:	f022 0220 	bic.w	r2, r2, #32
9000d230:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d232:	4b1b      	ldr	r3, [pc, #108]	; (9000d2a0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d234:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000d236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d238:	f022 0210 	bic.w	r2, r2, #16
9000d23c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d23e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000d240:	69f2      	ldr	r2, [r6, #28]
9000d242:	400b      	ands	r3, r1
9000d244:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d248:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000d24a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d24c:	f043 0310 	orr.w	r3, r3, #16
9000d250:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d254:	b1ef      	cbz	r7, 9000d292 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d256:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000d258:	bf0c      	ite	eq
9000d25a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000d25e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000d262:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000d264:	4c0d      	ldr	r4, [pc, #52]	; (9000d29c <RCCEx_PLL2_Config+0xec>)
9000d266:	6823      	ldr	r3, [r4, #0]
9000d268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000d26c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d26e:	f7fc f8eb 	bl	90009448 <HAL_GetTick>
9000d272:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d274:	e004      	b.n	9000d280 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d276:	f7fc f8e7 	bl	90009448 <HAL_GetTick>
9000d27a:	1b40      	subs	r0, r0, r5
9000d27c:	2802      	cmp	r0, #2
9000d27e:	d804      	bhi.n	9000d28a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d280:	6823      	ldr	r3, [r4, #0]
9000d282:	011b      	lsls	r3, r3, #4
9000d284:	d5f7      	bpl.n	9000d276 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000d286:	2000      	movs	r0, #0
}
9000d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d28a:	2003      	movs	r0, #3
}
9000d28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d28e:	2001      	movs	r0, #1
}
9000d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000d296:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d298:	e7e4      	b.n	9000d264 <RCCEx_PLL2_Config+0xb4>
9000d29a:	bf00      	nop
9000d29c:	58024400 	.word	0x58024400
9000d2a0:	ffff0007 	.word	0xffff0007

9000d2a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d2a6:	4c3a      	ldr	r4, [pc, #232]	; (9000d390 <RCCEx_PLL3_Config+0xec>)
9000d2a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d2aa:	f003 0303 	and.w	r3, r3, #3
9000d2ae:	2b03      	cmp	r3, #3
9000d2b0:	d067      	beq.n	9000d382 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000d2b2:	6823      	ldr	r3, [r4, #0]
9000d2b4:	4606      	mov	r6, r0
9000d2b6:	460f      	mov	r7, r1
9000d2b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000d2bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d2be:	f7fc f8c3 	bl	90009448 <HAL_GetTick>
9000d2c2:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d2c4:	e004      	b.n	9000d2d0 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d2c6:	f7fc f8bf 	bl	90009448 <HAL_GetTick>
9000d2ca:	1b43      	subs	r3, r0, r5
9000d2cc:	2b02      	cmp	r3, #2
9000d2ce:	d856      	bhi.n	9000d37e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d2d0:	6823      	ldr	r3, [r4, #0]
9000d2d2:	009a      	lsls	r2, r3, #2
9000d2d4:	d4f7      	bmi.n	9000d2c6 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000d2d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d2d8:	6832      	ldr	r2, [r6, #0]
9000d2da:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000d2de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000d2e2:	62a3      	str	r3, [r4, #40]	; 0x28
9000d2e4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d2e8:	3b01      	subs	r3, #1
9000d2ea:	3a01      	subs	r2, #1
9000d2ec:	025b      	lsls	r3, r3, #9
9000d2ee:	0412      	lsls	r2, r2, #16
9000d2f0:	b29b      	uxth	r3, r3
9000d2f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d2f6:	4313      	orrs	r3, r2
9000d2f8:	6872      	ldr	r2, [r6, #4]
9000d2fa:	3a01      	subs	r2, #1
9000d2fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d300:	4313      	orrs	r3, r2
9000d302:	6932      	ldr	r2, [r6, #16]
9000d304:	3a01      	subs	r2, #1
9000d306:	0612      	lsls	r2, r2, #24
9000d308:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d30c:	4313      	orrs	r3, r2
9000d30e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000d310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d312:	6972      	ldr	r2, [r6, #20]
9000d314:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000d318:	4313      	orrs	r3, r2
9000d31a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d31c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d31e:	69b3      	ldr	r3, [r6, #24]
9000d320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000d324:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d326:	4b1b      	ldr	r3, [pc, #108]	; (9000d394 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d328:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000d32a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d32c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000d330:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d332:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000d334:	69f2      	ldr	r2, [r6, #28]
9000d336:	400b      	ands	r3, r1
9000d338:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d33c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000d33e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d344:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d348:	b1ef      	cbz	r7, 9000d386 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d34a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000d34c:	bf0c      	ite	eq
9000d34e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000d352:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000d356:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000d358:	4c0d      	ldr	r4, [pc, #52]	; (9000d390 <RCCEx_PLL3_Config+0xec>)
9000d35a:	6823      	ldr	r3, [r4, #0]
9000d35c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000d360:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d362:	f7fc f871 	bl	90009448 <HAL_GetTick>
9000d366:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d368:	e004      	b.n	9000d374 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d36a:	f7fc f86d 	bl	90009448 <HAL_GetTick>
9000d36e:	1b40      	subs	r0, r0, r5
9000d370:	2802      	cmp	r0, #2
9000d372:	d804      	bhi.n	9000d37e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d374:	6823      	ldr	r3, [r4, #0]
9000d376:	009b      	lsls	r3, r3, #2
9000d378:	d5f7      	bpl.n	9000d36a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000d37a:	2000      	movs	r0, #0
}
9000d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d37e:	2003      	movs	r0, #3
}
9000d380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d382:	2001      	movs	r0, #1
}
9000d384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000d38a:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d38c:	e7e4      	b.n	9000d358 <RCCEx_PLL3_Config+0xb4>
9000d38e:	bf00      	nop
9000d390:	58024400 	.word	0x58024400
9000d394:	ffff0007 	.word	0xffff0007

9000d398 <HAL_RCCEx_PeriphCLKConfig>:
{
9000d398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d39c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000d3a0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d3a2:	011d      	lsls	r5, r3, #4
9000d3a4:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000d3a8:	d523      	bpl.n	9000d3f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d3aa:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000d3ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d3b0:	f000 8553 	beq.w	9000de5a <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000d3b4:	d812      	bhi.n	9000d3dc <HAL_RCCEx_PeriphCLKConfig+0x44>
9000d3b6:	2900      	cmp	r1, #0
9000d3b8:	f000 85a9 	beq.w	9000df0e <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000d3bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d3c0:	f040 85a2 	bne.w	9000df08 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000d3c4:	2102      	movs	r1, #2
9000d3c6:	3008      	adds	r0, #8
9000d3c8:	f7ff fef2 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d3cc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000d3ce:	2e00      	cmp	r6, #0
9000d3d0:	f040 8522 	bne.w	9000de18 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d3d4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d3d6:	e9d4 3200 	ldrd	r3, r2, [r4]
9000d3da:	e003      	b.n	9000d3e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d3dc:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d3e0:	f040 8592 	bne.w	9000df08 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d3e4:	4dae      	ldr	r5, [pc, #696]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d3e6:	2600      	movs	r6, #0
9000d3e8:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000d3ea:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000d3ee:	4301      	orrs	r1, r0
9000d3f0:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d3f2:	05d8      	lsls	r0, r3, #23
9000d3f4:	d50a      	bpl.n	9000d40c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000d3f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000d3f8:	2904      	cmp	r1, #4
9000d3fa:	d806      	bhi.n	9000d40a <HAL_RCCEx_PeriphCLKConfig+0x72>
9000d3fc:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d400:	053d0536 	.word	0x053d0536
9000d404:	0323051a 	.word	0x0323051a
9000d408:	0323      	.short	0x0323
9000d40a:	2601      	movs	r6, #1
9000d40c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000d40e:	0599      	lsls	r1, r3, #22
9000d410:	d51d      	bpl.n	9000d44e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000d412:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000d414:	2980      	cmp	r1, #128	; 0x80
9000d416:	f000 8516 	beq.w	9000de46 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000d41a:	f200 80f9 	bhi.w	9000d610 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000d41e:	2900      	cmp	r1, #0
9000d420:	f000 8433 	beq.w	9000dc8a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000d424:	2940      	cmp	r1, #64	; 0x40
9000d426:	f040 80fa 	bne.w	9000d61e <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d42a:	2100      	movs	r1, #0
9000d42c:	f104 0008 	add.w	r0, r4, #8
9000d430:	f7ff febe 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d434:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d436:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d43a:	2d00      	cmp	r5, #0
9000d43c:	f040 83fe 	bne.w	9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000d440:	4f97      	ldr	r7, [pc, #604]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d442:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000d444:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d446:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000d44a:	4301      	orrs	r1, r0
9000d44c:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d44e:	055f      	lsls	r7, r3, #21
9000d450:	d521      	bpl.n	9000d496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d452:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000d456:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000d45a:	f000 8521 	beq.w	9000dea0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000d45e:	f200 80e1 	bhi.w	9000d624 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000d462:	2900      	cmp	r1, #0
9000d464:	f000 8418 	beq.w	9000dc98 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000d468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d46c:	f040 80e2 	bne.w	9000d634 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d470:	2100      	movs	r1, #0
9000d472:	f104 0008 	add.w	r0, r4, #8
9000d476:	f7ff fe9b 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d47a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d47c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d480:	2d00      	cmp	r5, #0
9000d482:	f040 83e2 	bne.w	9000dc4a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000d486:	4f86      	ldr	r7, [pc, #536]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d488:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000d48c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d48e:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000d492:	4301      	orrs	r1, r0
9000d494:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d496:	0518      	lsls	r0, r3, #20
9000d498:	d521      	bpl.n	9000d4de <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000d49a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000d49e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000d4a2:	f000 84bd 	beq.w	9000de20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000d4a6:	f200 80c8 	bhi.w	9000d63a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000d4aa:	2900      	cmp	r1, #0
9000d4ac:	f000 83e7 	beq.w	9000dc7e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000d4b0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000d4b4:	f040 80c9 	bne.w	9000d64a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d4b8:	2100      	movs	r1, #0
9000d4ba:	f104 0008 	add.w	r0, r4, #8
9000d4be:	f7ff fe77 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d4c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d4c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d4c8:	2d00      	cmp	r5, #0
9000d4ca:	f040 83b5 	bne.w	9000dc38 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000d4ce:	4f74      	ldr	r7, [pc, #464]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d4d0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000d4d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d4d6:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000d4da:	4301      	orrs	r1, r0
9000d4dc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d4de:	0199      	lsls	r1, r3, #6
9000d4e0:	d518      	bpl.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000d4e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000d4e4:	2920      	cmp	r1, #32
9000d4e6:	f000 841f 	beq.w	9000dd28 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000d4ea:	f200 80b1 	bhi.w	9000d650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000d4ee:	b139      	cbz	r1, 9000d500 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000d4f0:	2910      	cmp	r1, #16
9000d4f2:	f040 80b0 	bne.w	9000d656 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d4f6:	486a      	ldr	r0, [pc, #424]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d4f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000d4fa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000d4fe:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000d500:	2d00      	cmp	r5, #0
9000d502:	f040 83d8 	bne.w	9000dcb6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000d506:	4f66      	ldr	r7, [pc, #408]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d508:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000d50a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000d50c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000d510:	4301      	orrs	r1, r0
9000d512:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000d514:	04df      	lsls	r7, r3, #19
9000d516:	d51f      	bpl.n	9000d558 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000d518:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000d51a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000d51e:	f000 84b5 	beq.w	9000de8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000d522:	f200 809b 	bhi.w	9000d65c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000d526:	2900      	cmp	r1, #0
9000d528:	f000 83a3 	beq.w	9000dc72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000d52c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000d530:	f040 809c 	bne.w	9000d66c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d534:	2100      	movs	r1, #0
9000d536:	f104 0008 	add.w	r0, r4, #8
9000d53a:	f7ff fe39 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d53e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000d540:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d544:	2d00      	cmp	r5, #0
9000d546:	f040 837b 	bne.w	9000dc40 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000d54a:	4f55      	ldr	r7, [pc, #340]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d54c:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000d54e:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d550:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000d554:	4301      	orrs	r1, r0
9000d556:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000d558:	0498      	lsls	r0, r3, #18
9000d55a:	d51d      	bpl.n	9000d598 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000d55c:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000d55e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000d562:	f000 8410 	beq.w	9000dd86 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000d566:	f200 8084 	bhi.w	9000d672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000d56a:	b159      	cbz	r1, 9000d584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d56c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d570:	f040 8087 	bne.w	9000d682 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d574:	2101      	movs	r1, #1
9000d576:	f104 0008 	add.w	r0, r4, #8
9000d57a:	f7ff fe19 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d57e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000d580:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d584:	2d00      	cmp	r5, #0
9000d586:	f040 839a 	bne.w	9000dcbe <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000d58a:	4f45      	ldr	r7, [pc, #276]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d58c:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000d58e:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d590:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000d594:	4301      	orrs	r1, r0
9000d596:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000d598:	0459      	lsls	r1, r3, #17
9000d59a:	d51d      	bpl.n	9000d5d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000d59c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000d5a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d5a4:	f000 83fb 	beq.w	9000dd9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000d5a8:	d86e      	bhi.n	9000d688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000d5aa:	b151      	cbz	r1, 9000d5c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d5ac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d5b0:	d172      	bne.n	9000d698 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d5b2:	2101      	movs	r1, #1
9000d5b4:	f104 0008 	add.w	r0, r4, #8
9000d5b8:	f7ff fdfa 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d5bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000d5be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d5c2:	2d00      	cmp	r5, #0
9000d5c4:	f040 837f 	bne.w	9000dcc6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000d5c8:	4f35      	ldr	r7, [pc, #212]	; (9000d6a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d5ca:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000d5ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d5d0:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000d5d4:	4301      	orrs	r1, r0
9000d5d6:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000d5d8:	041f      	lsls	r7, r3, #16
9000d5da:	d50d      	bpl.n	9000d5f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000d5dc:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000d5de:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d5e2:	f000 83c8 	beq.w	9000dd76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000d5e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d5ea:	f000 823b 	beq.w	9000da64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000d5ee:	2900      	cmp	r1, #0
9000d5f0:	f000 8240 	beq.w	9000da74 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000d5f4:	2601      	movs	r6, #1
9000d5f6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000d5f8:	01d8      	lsls	r0, r3, #7
9000d5fa:	d562      	bpl.n	9000d6c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000d5fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000d5fe:	2903      	cmp	r1, #3
9000d600:	f200 84bf 	bhi.w	9000df82 <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000d604:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d608:	004e0053 	.word	0x004e0053
9000d60c:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000d610:	29c0      	cmp	r1, #192	; 0xc0
9000d612:	f43f af12 	beq.w	9000d43a <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000d616:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000d61a:	f43f af0e 	beq.w	9000d43a <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000d61e:	2601      	movs	r6, #1
9000d620:	4635      	mov	r5, r6
9000d622:	e714      	b.n	9000d44e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d624:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000d628:	f43f af2a 	beq.w	9000d480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000d62c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000d630:	f43f af26 	beq.w	9000d480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000d634:	2601      	movs	r6, #1
9000d636:	4635      	mov	r5, r6
9000d638:	e72d      	b.n	9000d496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000d63a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000d63e:	f43f af43 	beq.w	9000d4c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000d642:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000d646:	f43f af3f 	beq.w	9000d4c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000d64a:	2601      	movs	r6, #1
9000d64c:	4635      	mov	r5, r6
9000d64e:	e746      	b.n	9000d4de <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000d650:	2930      	cmp	r1, #48	; 0x30
9000d652:	f43f af55 	beq.w	9000d500 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000d656:	2601      	movs	r6, #1
9000d658:	4635      	mov	r5, r6
9000d65a:	e75b      	b.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000d65c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000d660:	f43f af70 	beq.w	9000d544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000d664:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000d668:	f43f af6c 	beq.w	9000d544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000d66c:	2601      	movs	r6, #1
9000d66e:	4635      	mov	r5, r6
9000d670:	e772      	b.n	9000d558 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000d672:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000d676:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000d67a:	d083      	beq.n	9000d584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d67c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000d680:	d080      	beq.n	9000d584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d682:	2601      	movs	r6, #1
9000d684:	4635      	mov	r5, r6
9000d686:	e787      	b.n	9000d598 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000d688:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000d68c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000d690:	d097      	beq.n	9000d5c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d692:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000d696:	d094      	beq.n	9000d5c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d698:	2601      	movs	r6, #1
9000d69a:	4635      	mov	r5, r6
9000d69c:	e79c      	b.n	9000d5d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000d69e:	bf00      	nop
9000d6a0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d6a4:	4839      	ldr	r0, [pc, #228]	; (9000d78c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d6a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000d6a8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000d6ac:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000d6ae:	2d00      	cmp	r5, #0
9000d6b0:	f040 8303 	bne.w	9000dcba <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000d6b4:	4f35      	ldr	r7, [pc, #212]	; (9000d78c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d6b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000d6b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000d6ba:	f021 0103 	bic.w	r1, r1, #3
9000d6be:	4301      	orrs	r1, r0
9000d6c0:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000d6c2:	0259      	lsls	r1, r3, #9
9000d6c4:	f100 826a 	bmi.w	9000db9c <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000d6c8:	07d8      	lsls	r0, r3, #31
9000d6ca:	d52f      	bpl.n	9000d72c <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000d6cc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000d6ce:	2928      	cmp	r1, #40	; 0x28
9000d6d0:	d82a      	bhi.n	9000d728 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000d6d2:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d6d6:	020a      	.short	0x020a
9000d6d8:	00290029 	.word	0x00290029
9000d6dc:	00290029 	.word	0x00290029
9000d6e0:	00290029 	.word	0x00290029
9000d6e4:	02020029 	.word	0x02020029
9000d6e8:	00290029 	.word	0x00290029
9000d6ec:	00290029 	.word	0x00290029
9000d6f0:	00290029 	.word	0x00290029
9000d6f4:	04070029 	.word	0x04070029
9000d6f8:	00290029 	.word	0x00290029
9000d6fc:	00290029 	.word	0x00290029
9000d700:	00290029 	.word	0x00290029
9000d704:	020a0029 	.word	0x020a0029
9000d708:	00290029 	.word	0x00290029
9000d70c:	00290029 	.word	0x00290029
9000d710:	00290029 	.word	0x00290029
9000d714:	020a0029 	.word	0x020a0029
9000d718:	00290029 	.word	0x00290029
9000d71c:	00290029 	.word	0x00290029
9000d720:	00290029 	.word	0x00290029
9000d724:	020a0029 	.word	0x020a0029
9000d728:	2601      	movs	r6, #1
9000d72a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000d72c:	0799      	lsls	r1, r3, #30
9000d72e:	d51d      	bpl.n	9000d76c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000d730:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000d732:	2905      	cmp	r1, #5
9000d734:	f200 8421 	bhi.w	9000df7a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000d738:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d73c:	0006000e 	.word	0x0006000e
9000d740:	000e03c8 	.word	0x000e03c8
9000d744:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d748:	2101      	movs	r1, #1
9000d74a:	f104 0008 	add.w	r0, r4, #8
9000d74e:	f7ff fd2f 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d752:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000d754:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d758:	2d00      	cmp	r5, #0
9000d75a:	f040 82b8 	bne.w	9000dcce <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000d75e:	4f0b      	ldr	r7, [pc, #44]	; (9000d78c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d760:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000d762:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d764:	f021 0107 	bic.w	r1, r1, #7
9000d768:	4301      	orrs	r1, r0
9000d76a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000d76c:	075f      	lsls	r7, r3, #29
9000d76e:	d522      	bpl.n	9000d7b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000d770:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000d774:	2905      	cmp	r1, #5
9000d776:	f200 8408 	bhi.w	9000df8a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000d77a:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d77e:	0011      	.short	0x0011
9000d780:	039b0009 	.word	0x039b0009
9000d784:	00110011 	.word	0x00110011
9000d788:	0011      	.short	0x0011
9000d78a:	bf00      	nop
9000d78c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d790:	2101      	movs	r1, #1
9000d792:	f104 0008 	add.w	r0, r4, #8
9000d796:	f7ff fd0b 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d79a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000d79c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d7a0:	2d00      	cmp	r5, #0
9000d7a2:	f040 8286 	bne.w	9000dcb2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000d7a6:	4fae      	ldr	r7, [pc, #696]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d7a8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000d7ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d7ae:	f021 0107 	bic.w	r1, r1, #7
9000d7b2:	4301      	orrs	r1, r0
9000d7b4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000d7b6:	0698      	lsls	r0, r3, #26
9000d7b8:	d51f      	bpl.n	9000d7fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000d7ba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000d7be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d7c2:	f000 82f7 	beq.w	9000ddb4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000d7c6:	f200 810b 	bhi.w	9000d9e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
9000d7ca:	b159      	cbz	r1, 9000d7e4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d7cc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d7d0:	f040 8110 	bne.w	9000d9f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d7d4:	2100      	movs	r1, #0
9000d7d6:	f104 0008 	add.w	r0, r4, #8
9000d7da:	f7ff fce9 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d7de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000d7e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d7e4:	2d00      	cmp	r5, #0
9000d7e6:	f040 8260 	bne.w	9000dcaa <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000d7ea:	4f9d      	ldr	r7, [pc, #628]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d7ec:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000d7f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d7f2:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000d7f6:	4301      	orrs	r1, r0
9000d7f8:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000d7fa:	0659      	lsls	r1, r3, #25
9000d7fc:	d51f      	bpl.n	9000d83e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000d7fe:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000d802:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000d806:	f000 829b 	beq.w	9000dd40 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000d80a:	f200 80f6 	bhi.w	9000d9fa <HAL_RCCEx_PeriphCLKConfig+0x662>
9000d80e:	b159      	cbz	r1, 9000d828 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000d810:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000d814:	f040 80fb 	bne.w	9000da0e <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d818:	2100      	movs	r1, #0
9000d81a:	f104 0008 	add.w	r0, r4, #8
9000d81e:	f7ff fcc7 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d822:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000d824:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d828:	2d00      	cmp	r5, #0
9000d82a:	f040 824e 	bne.w	9000dcca <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000d82e:	4f8c      	ldr	r7, [pc, #560]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d830:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000d834:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d836:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000d83a:	4301      	orrs	r1, r0
9000d83c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000d83e:	061f      	lsls	r7, r3, #24
9000d840:	d51f      	bpl.n	9000d882 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000d842:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000d846:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000d84a:	f000 8289 	beq.w	9000dd60 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000d84e:	f200 80e1 	bhi.w	9000da14 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000d852:	b159      	cbz	r1, 9000d86c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000d854:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000d858:	f040 80e6 	bne.w	9000da28 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d85c:	2100      	movs	r1, #0
9000d85e:	f104 0008 	add.w	r0, r4, #8
9000d862:	f7ff fca5 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000d866:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000d868:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d86c:	2d00      	cmp	r5, #0
9000d86e:	f040 8228 	bne.w	9000dcc2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000d872:	4f7b      	ldr	r7, [pc, #492]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d874:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000d878:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d87a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000d87e:	4301      	orrs	r1, r0
9000d880:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000d882:	0718      	lsls	r0, r3, #28
9000d884:	d50b      	bpl.n	9000d89e <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000d886:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000d88a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000d88e:	f000 82a9 	beq.w	9000dde4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000d892:	4f73      	ldr	r7, [pc, #460]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d894:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d896:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000d89a:	4301      	orrs	r1, r0
9000d89c:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000d89e:	06d9      	lsls	r1, r3, #27
9000d8a0:	d50b      	bpl.n	9000d8ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000d8a2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000d8a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000d8aa:	f000 82a8 	beq.w	9000ddfe <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000d8ae:	4f6c      	ldr	r7, [pc, #432]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d8b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d8b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000d8b6:	4301      	orrs	r1, r0
9000d8b8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000d8ba:	031f      	lsls	r7, r3, #12
9000d8bc:	d50e      	bpl.n	9000d8dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000d8be:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000d8c2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d8c6:	f000 80f4 	beq.w	9000dab2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000d8ca:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000d8ce:	f000 80f8 	beq.w	9000dac2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000d8d2:	2900      	cmp	r1, #0
9000d8d4:	f000 821c 	beq.w	9000dd10 <HAL_RCCEx_PeriphCLKConfig+0x978>
9000d8d8:	2601      	movs	r6, #1
9000d8da:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000d8dc:	0358      	lsls	r0, r3, #13
9000d8de:	d50f      	bpl.n	9000d900 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000d8e0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000d8e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d8e8:	f000 80cf 	beq.w	9000da8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000d8ec:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d8f0:	f000 80d3 	beq.w	9000da9a <HAL_RCCEx_PeriphCLKConfig+0x702>
9000d8f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d8f8:	f000 8202 	beq.w	9000dd00 <HAL_RCCEx_PeriphCLKConfig+0x968>
9000d8fc:	2601      	movs	r6, #1
9000d8fe:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000d900:	03d9      	lsls	r1, r3, #15
9000d902:	d509      	bpl.n	9000d918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000d904:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000d906:	2900      	cmp	r1, #0
9000d908:	f000 81f1 	beq.w	9000dcee <HAL_RCCEx_PeriphCLKConfig+0x956>
9000d90c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d910:	f000 819d 	beq.w	9000dc4e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000d914:	2601      	movs	r6, #1
9000d916:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000d918:	009f      	lsls	r7, r3, #2
9000d91a:	f100 80f1 	bmi.w	9000db00 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000d91e:	0398      	lsls	r0, r3, #14
9000d920:	d50c      	bpl.n	9000d93c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000d922:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000d926:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000d92a:	f000 81d8 	beq.w	9000dcde <HAL_RCCEx_PeriphCLKConfig+0x946>
9000d92e:	d97e      	bls.n	9000da2e <HAL_RCCEx_PeriphCLKConfig+0x696>
9000d930:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000d934:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000d938:	d07b      	beq.n	9000da32 <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000d93a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000d93c:	02d9      	lsls	r1, r3, #11
9000d93e:	d506      	bpl.n	9000d94e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000d940:	4847      	ldr	r0, [pc, #284]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d942:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000d944:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000d946:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000d94a:	4329      	orrs	r1, r5
9000d94c:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000d94e:	00df      	lsls	r7, r3, #3
9000d950:	d507      	bpl.n	9000d962 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000d952:	4843      	ldr	r0, [pc, #268]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d954:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000d958:	6901      	ldr	r1, [r0, #16]
9000d95a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000d95e:	4329      	orrs	r1, r5
9000d960:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000d962:	029d      	lsls	r5, r3, #10
9000d964:	d506      	bpl.n	9000d974 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000d966:	483e      	ldr	r0, [pc, #248]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d968:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000d96a:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000d96c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000d970:	4329      	orrs	r1, r5
9000d972:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000d974:	0058      	lsls	r0, r3, #1
9000d976:	d509      	bpl.n	9000d98c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000d978:	4939      	ldr	r1, [pc, #228]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d97a:	6908      	ldr	r0, [r1, #16]
9000d97c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000d980:	6108      	str	r0, [r1, #16]
9000d982:	6908      	ldr	r0, [r1, #16]
9000d984:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000d988:	4328      	orrs	r0, r5
9000d98a:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000d98c:	2b00      	cmp	r3, #0
9000d98e:	da06      	bge.n	9000d99e <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000d990:	4833      	ldr	r0, [pc, #204]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d992:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000d994:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000d996:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000d99a:	4329      	orrs	r1, r5
9000d99c:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000d99e:	0219      	lsls	r1, r3, #8
9000d9a0:	d507      	bpl.n	9000d9b2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000d9a2:	492f      	ldr	r1, [pc, #188]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d9a4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000d9a8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000d9aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000d9ae:	4303      	orrs	r3, r0
9000d9b0:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000d9b2:	07d3      	lsls	r3, r2, #31
9000d9b4:	f100 80b0 	bmi.w	9000db18 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000d9b8:	0797      	lsls	r7, r2, #30
9000d9ba:	f100 80ba 	bmi.w	9000db32 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000d9be:	0755      	lsls	r5, r2, #29
9000d9c0:	f100 80c4 	bmi.w	9000db4c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000d9c4:	0710      	lsls	r0, r2, #28
9000d9c6:	f100 80ce 	bmi.w	9000db66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000d9ca:	06d1      	lsls	r1, r2, #27
9000d9cc:	f100 80d8 	bmi.w	9000db80 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000d9d0:	0692      	lsls	r2, r2, #26
9000d9d2:	f100 8125 	bmi.w	9000dc20 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000d9d6:	1e30      	subs	r0, r6, #0
9000d9d8:	bf18      	it	ne
9000d9da:	2001      	movne	r0, #1
}
9000d9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000d9e0:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000d9e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000d9e8:	f43f aefc 	beq.w	9000d7e4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d9ec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000d9f0:	f43f aef8 	beq.w	9000d7e4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d9f4:	2601      	movs	r6, #1
9000d9f6:	4635      	mov	r5, r6
9000d9f8:	e6ff      	b.n	9000d7fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000d9fa:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000d9fe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000da02:	f43f af11 	beq.w	9000d828 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000da06:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000da0a:	f43f af0d 	beq.w	9000d828 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000da0e:	2601      	movs	r6, #1
9000da10:	4635      	mov	r5, r6
9000da12:	e714      	b.n	9000d83e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000da14:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000da18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000da1c:	f43f af26 	beq.w	9000d86c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000da20:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000da24:	f43f af22 	beq.w	9000d86c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000da28:	2601      	movs	r6, #1
9000da2a:	4635      	mov	r5, r6
9000da2c:	e729      	b.n	9000d882 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000da2e:	2900      	cmp	r1, #0
9000da30:	d183      	bne.n	9000d93a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000da32:	2d00      	cmp	r5, #0
9000da34:	f040 8151 	bne.w	9000dcda <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000da38:	4d09      	ldr	r5, [pc, #36]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000da3a:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000da3c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000da40:	4301      	orrs	r1, r0
9000da42:	6569      	str	r1, [r5, #84]	; 0x54
9000da44:	e77a      	b.n	9000d93c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000da46:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000da48:	2d00      	cmp	r5, #0
9000da4a:	f040 80fb 	bne.w	9000dc44 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000da4e:	4f04      	ldr	r7, [pc, #16]	; (9000da60 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000da50:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000da52:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000da54:	f021 0107 	bic.w	r1, r1, #7
9000da58:	4301      	orrs	r1, r0
9000da5a:	6539      	str	r1, [r7, #80]	; 0x50
9000da5c:	e4d7      	b.n	9000d40e <HAL_RCCEx_PeriphCLKConfig+0x76>
9000da5e:	bf00      	nop
9000da60:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000da64:	2101      	movs	r1, #1
9000da66:	f104 0008 	add.w	r0, r4, #8
9000da6a:	f7ff fba1 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000da6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000da70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da74:	2d00      	cmp	r5, #0
9000da76:	f040 811a 	bne.w	9000dcae <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000da7a:	4fb7      	ldr	r7, [pc, #732]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000da7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000da7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000da80:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000da84:	4301      	orrs	r1, r0
9000da86:	6539      	str	r1, [r7, #80]	; 0x50
9000da88:	e5b6      	b.n	9000d5f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000da8a:	2101      	movs	r1, #1
9000da8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000da90:	f7ff fc08 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000da94:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000da96:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da9a:	2d00      	cmp	r5, #0
9000da9c:	f040 811b 	bne.w	9000dcd6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000daa0:	4fad      	ldr	r7, [pc, #692]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000daa2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000daa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000daa8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000daac:	4301      	orrs	r1, r0
9000daae:	6579      	str	r1, [r7, #84]	; 0x54
9000dab0:	e726      	b.n	9000d900 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dab2:	2102      	movs	r1, #2
9000dab4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dab8:	f7ff fbf4 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000dabc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000dabe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dac2:	2d00      	cmp	r5, #0
9000dac4:	f040 8105 	bne.w	9000dcd2 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000dac8:	4fa3      	ldr	r7, [pc, #652]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000daca:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000dace:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dad0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000dad4:	4301      	orrs	r1, r0
9000dad6:	65b9      	str	r1, [r7, #88]	; 0x58
9000dad8:	e700      	b.n	9000d8dc <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dada:	2101      	movs	r1, #1
9000dadc:	f104 0008 	add.w	r0, r4, #8
9000dae0:	f7ff fb66 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000dae4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000dae6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000daea:	2d00      	cmp	r5, #0
9000daec:	f040 80db 	bne.w	9000dca6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000daf0:	4f99      	ldr	r7, [pc, #612]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000daf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000daf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000daf6:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000dafa:	4301      	orrs	r1, r0
9000dafc:	6579      	str	r1, [r7, #84]	; 0x54
9000dafe:	e615      	b.n	9000d72c <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000db00:	2102      	movs	r1, #2
9000db02:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000db06:	f7ff fbcd 	bl	9000d2a4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000db0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000db0e:	2800      	cmp	r0, #0
9000db10:	f43f af05 	beq.w	9000d91e <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000db14:	2601      	movs	r6, #1
9000db16:	e702      	b.n	9000d91e <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000db18:	2100      	movs	r1, #0
9000db1a:	f104 0008 	add.w	r0, r4, #8
9000db1e:	f7ff fb47 	bl	9000d1b0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000db22:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000db24:	2800      	cmp	r0, #0
9000db26:	f43f af47 	beq.w	9000d9b8 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000db2a:	0797      	lsls	r7, r2, #30
9000db2c:	4606      	mov	r6, r0
9000db2e:	f57f af46 	bpl.w	9000d9be <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000db32:	2101      	movs	r1, #1
9000db34:	f104 0008 	add.w	r0, r4, #8
9000db38:	f7ff fb3a 	bl	9000d1b0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000db3c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000db3e:	2800      	cmp	r0, #0
9000db40:	f43f af3d 	beq.w	9000d9be <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000db44:	0755      	lsls	r5, r2, #29
9000db46:	4606      	mov	r6, r0
9000db48:	f57f af3c 	bpl.w	9000d9c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000db4c:	2102      	movs	r1, #2
9000db4e:	f104 0008 	add.w	r0, r4, #8
9000db52:	f7ff fb2d 	bl	9000d1b0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000db56:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000db58:	2800      	cmp	r0, #0
9000db5a:	f43f af33 	beq.w	9000d9c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000db5e:	4606      	mov	r6, r0
9000db60:	0710      	lsls	r0, r2, #28
9000db62:	f57f af32 	bpl.w	9000d9ca <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000db66:	2100      	movs	r1, #0
9000db68:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000db6c:	f7ff fb9a 	bl	9000d2a4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000db70:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000db72:	2800      	cmp	r0, #0
9000db74:	f43f af29 	beq.w	9000d9ca <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000db78:	06d1      	lsls	r1, r2, #27
9000db7a:	4606      	mov	r6, r0
9000db7c:	f57f af28 	bpl.w	9000d9d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000db80:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000db84:	2101      	movs	r1, #1
9000db86:	4628      	mov	r0, r5
9000db88:	f7ff fb8c 	bl	9000d2a4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000db8c:	2800      	cmp	r0, #0
9000db8e:	f000 80c9 	beq.w	9000dd24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000db92:	6863      	ldr	r3, [r4, #4]
9000db94:	069b      	lsls	r3, r3, #26
9000db96:	d54c      	bpl.n	9000dc32 <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000db98:	4606      	mov	r6, r0
9000db9a:	e043      	b.n	9000dc24 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000db9c:	4f6f      	ldr	r7, [pc, #444]	; (9000dd5c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000db9e:	683b      	ldr	r3, [r7, #0]
9000dba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000dba4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000dba6:	f7fb fc4f 	bl	90009448 <HAL_GetTick>
9000dbaa:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000dbac:	e006      	b.n	9000dbbc <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000dbae:	f7fb fc4b 	bl	90009448 <HAL_GetTick>
9000dbb2:	eba0 0008 	sub.w	r0, r0, r8
9000dbb6:	2864      	cmp	r0, #100	; 0x64
9000dbb8:	f200 81a0 	bhi.w	9000defc <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000dbbc:	683b      	ldr	r3, [r7, #0]
9000dbbe:	05da      	lsls	r2, r3, #23
9000dbc0:	d5f5      	bpl.n	9000dbae <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000dbc2:	2d00      	cmp	r5, #0
9000dbc4:	f040 81d4 	bne.w	9000df70 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000dbc8:	4a63      	ldr	r2, [pc, #396]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dbca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000dbce:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000dbd0:	4059      	eors	r1, r3
9000dbd2:	f411 7f40 	tst.w	r1, #768	; 0x300
9000dbd6:	d00b      	beq.n	9000dbf0 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000dbd8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000dbda:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000dbdc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000dbe0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000dbe4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000dbe6:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000dbe8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000dbec:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000dbee:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000dbf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000dbf4:	f000 819e 	beq.w	9000df34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000dbf8:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000dbfc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000dc00:	f000 81ac 	beq.w	9000df5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000dc04:	4954      	ldr	r1, [pc, #336]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc06:	690a      	ldr	r2, [r1, #16]
9000dc08:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000dc0c:	610a      	str	r2, [r1, #16]
9000dc0e:	4852      	ldr	r0, [pc, #328]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc10:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000dc14:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000dc16:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000dc18:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000dc1c:	6701      	str	r1, [r0, #112]	; 0x70
9000dc1e:	e553      	b.n	9000d6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dc20:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dc24:	2102      	movs	r1, #2
9000dc26:	4628      	mov	r0, r5
9000dc28:	f7ff fb3c 	bl	9000d2a4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000dc2c:	2800      	cmp	r0, #0
9000dc2e:	f43f aed2 	beq.w	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000dc32:	2001      	movs	r0, #1
}
9000dc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000dc38:	462e      	mov	r6, r5
9000dc3a:	e450      	b.n	9000d4de <HAL_RCCEx_PeriphCLKConfig+0x146>
9000dc3c:	462e      	mov	r6, r5
9000dc3e:	e406      	b.n	9000d44e <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000dc40:	462e      	mov	r6, r5
9000dc42:	e489      	b.n	9000d558 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000dc44:	462e      	mov	r6, r5
9000dc46:	f7ff bbe2 	b.w	9000d40e <HAL_RCCEx_PeriphCLKConfig+0x76>
9000dc4a:	462e      	mov	r6, r5
9000dc4c:	e423      	b.n	9000d496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dc4e:	2102      	movs	r1, #2
9000dc50:	f104 0008 	add.w	r0, r4, #8
9000dc54:	f7ff faac 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000dc58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000dc5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dc5e:	2d00      	cmp	r5, #0
9000dc60:	d14c      	bne.n	9000dcfc <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000dc62:	4f3d      	ldr	r7, [pc, #244]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc64:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000dc66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000dc68:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000dc6c:	4301      	orrs	r1, r0
9000dc6e:	64f9      	str	r1, [r7, #76]	; 0x4c
9000dc70:	e652      	b.n	9000d918 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc72:	4839      	ldr	r0, [pc, #228]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc74:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc76:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc7a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc7c:	e462      	b.n	9000d544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc7e:	4836      	ldr	r0, [pc, #216]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc80:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc82:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc86:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc88:	e41e      	b.n	9000d4c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc8a:	4833      	ldr	r0, [pc, #204]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc8c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc8e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc92:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc94:	f7ff bbd1 	b.w	9000d43a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc98:	482f      	ldr	r0, [pc, #188]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc9a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc9c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dca0:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dca2:	f7ff bbed 	b.w	9000d480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000dca6:	462e      	mov	r6, r5
9000dca8:	e540      	b.n	9000d72c <HAL_RCCEx_PeriphCLKConfig+0x394>
9000dcaa:	462e      	mov	r6, r5
9000dcac:	e5a5      	b.n	9000d7fa <HAL_RCCEx_PeriphCLKConfig+0x462>
9000dcae:	462e      	mov	r6, r5
9000dcb0:	e4a2      	b.n	9000d5f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000dcb2:	462e      	mov	r6, r5
9000dcb4:	e57f      	b.n	9000d7b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000dcb6:	462e      	mov	r6, r5
9000dcb8:	e42c      	b.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000dcba:	462e      	mov	r6, r5
9000dcbc:	e501      	b.n	9000d6c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000dcbe:	462e      	mov	r6, r5
9000dcc0:	e46a      	b.n	9000d598 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000dcc2:	462e      	mov	r6, r5
9000dcc4:	e5dd      	b.n	9000d882 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000dcc6:	462e      	mov	r6, r5
9000dcc8:	e486      	b.n	9000d5d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000dcca:	462e      	mov	r6, r5
9000dccc:	e5b7      	b.n	9000d83e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000dcce:	462e      	mov	r6, r5
9000dcd0:	e54c      	b.n	9000d76c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000dcd2:	462e      	mov	r6, r5
9000dcd4:	e602      	b.n	9000d8dc <HAL_RCCEx_PeriphCLKConfig+0x544>
9000dcd6:	462e      	mov	r6, r5
9000dcd8:	e612      	b.n	9000d900 <HAL_RCCEx_PeriphCLKConfig+0x568>
9000dcda:	462e      	mov	r6, r5
9000dcdc:	e62e      	b.n	9000d93c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dcde:	4f1e      	ldr	r7, [pc, #120]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000dce2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000dce6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000dce8:	2d00      	cmp	r5, #0
9000dcea:	d1f6      	bne.n	9000dcda <HAL_RCCEx_PeriphCLKConfig+0x942>
9000dcec:	e6a4      	b.n	9000da38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dcee:	481a      	ldr	r0, [pc, #104]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dcf0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dcf2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dcf6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dcf8:	2d00      	cmp	r5, #0
9000dcfa:	d0b2      	beq.n	9000dc62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000dcfc:	462e      	mov	r6, r5
9000dcfe:	e60b      	b.n	9000d918 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dd00:	4815      	ldr	r0, [pc, #84]	; (9000dd58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dd02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dd04:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dd08:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dd0a:	2d00      	cmp	r5, #0
9000dd0c:	d1e3      	bne.n	9000dcd6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000dd0e:	e6c7      	b.n	9000daa0 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dd10:	f104 0008 	add.w	r0, r4, #8
9000dd14:	f7ff fa4c 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000dd18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000dd1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd1e:	2d00      	cmp	r5, #0
9000dd20:	d1d7      	bne.n	9000dcd2 <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000dd22:	e6d1      	b.n	9000dac8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000dd24:	6862      	ldr	r2, [r4, #4]
9000dd26:	e653      	b.n	9000d9d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dd28:	2102      	movs	r1, #2
9000dd2a:	f104 0008 	add.w	r0, r4, #8
9000dd2e:	f7ff fa3f 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000dd32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000dd34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd38:	2d00      	cmp	r5, #0
9000dd3a:	d1bc      	bne.n	9000dcb6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000dd3c:	f7ff bbe3 	b.w	9000d506 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dd40:	2102      	movs	r1, #2
9000dd42:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd46:	f7ff faad 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000dd4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000dd4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd50:	2d00      	cmp	r5, #0
9000dd52:	d1ba      	bne.n	9000dcca <HAL_RCCEx_PeriphCLKConfig+0x932>
9000dd54:	e56b      	b.n	9000d82e <HAL_RCCEx_PeriphCLKConfig+0x496>
9000dd56:	bf00      	nop
9000dd58:	58024400 	.word	0x58024400
9000dd5c:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dd60:	2102      	movs	r1, #2
9000dd62:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd66:	f7ff fa9d 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000dd6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000dd6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd70:	2d00      	cmp	r5, #0
9000dd72:	d1a6      	bne.n	9000dcc2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000dd74:	e57d      	b.n	9000d872 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dd76:	4886      	ldr	r0, [pc, #536]	; (9000df90 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000dd78:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dd7a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dd7e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dd80:	2d00      	cmp	r5, #0
9000dd82:	d194      	bne.n	9000dcae <HAL_RCCEx_PeriphCLKConfig+0x916>
9000dd84:	e679      	b.n	9000da7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dd86:	2101      	movs	r1, #1
9000dd88:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd8c:	f7ff fa8a 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000dd90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000dd92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd96:	2d00      	cmp	r5, #0
9000dd98:	d191      	bne.n	9000dcbe <HAL_RCCEx_PeriphCLKConfig+0x926>
9000dd9a:	f7ff bbf6 	b.w	9000d58a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dd9e:	2101      	movs	r1, #1
9000dda0:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dda4:	f7ff fa7e 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000dda8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000ddaa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ddae:	2d00      	cmp	r5, #0
9000ddb0:	d189      	bne.n	9000dcc6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000ddb2:	e409      	b.n	9000d5c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000ddb4:	2102      	movs	r1, #2
9000ddb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ddba:	f7ff fa73 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000ddbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000ddc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ddc4:	2d00      	cmp	r5, #0
9000ddc6:	f47f af70 	bne.w	9000dcaa <HAL_RCCEx_PeriphCLKConfig+0x912>
9000ddca:	e50e      	b.n	9000d7ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ddcc:	2102      	movs	r1, #2
9000ddce:	f104 0008 	add.w	r0, r4, #8
9000ddd2:	f7ff f9ed 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000ddd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000ddd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dddc:	2d00      	cmp	r5, #0
9000ddde:	f47f af6c 	bne.w	9000dcba <HAL_RCCEx_PeriphCLKConfig+0x922>
9000dde2:	e467      	b.n	9000d6b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000dde4:	2102      	movs	r1, #2
9000dde6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ddea:	f7ff fa5b 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000ddee:	2800      	cmp	r0, #0
9000ddf0:	f040 8094 	bne.w	9000df1c <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000ddf4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000ddf8:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ddfc:	e549      	b.n	9000d892 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000ddfe:	2102      	movs	r1, #2
9000de00:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de04:	f7ff fa4e 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de08:	2800      	cmp	r0, #0
9000de0a:	f040 808d 	bne.w	9000df28 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000de0e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000de12:	e9d4 3200 	ldrd	r3, r2, [r4]
9000de16:	e54a      	b.n	9000d8ae <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000de18:	e9d4 3200 	ldrd	r3, r2, [r4]
9000de1c:	f7ff bae9 	b.w	9000d3f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de20:	2100      	movs	r1, #0
9000de22:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de26:	f7ff fa3d 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000de2c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de30:	f7ff bb4a 	b.w	9000d4c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de34:	2100      	movs	r1, #0
9000de36:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de3a:	f7ff fa33 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000de40:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de44:	e600      	b.n	9000da48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de46:	2100      	movs	r1, #0
9000de48:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de4c:	f7ff fa2a 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000de52:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de56:	f7ff baf0 	b.w	9000d43a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000de5a:	2102      	movs	r1, #2
9000de5c:	3028      	adds	r0, #40	; 0x28
9000de5e:	f7ff fa21 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de62:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000de64:	2e00      	cmp	r6, #0
9000de66:	f43f aab5 	beq.w	9000d3d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000de6a:	e7d5      	b.n	9000de18 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000de6c:	4848      	ldr	r0, [pc, #288]	; (9000df90 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000de6e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000de70:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000de72:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000de76:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000de78:	e5e6      	b.n	9000da48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000de7a:	2100      	movs	r1, #0
9000de7c:	f104 0008 	add.w	r0, r4, #8
9000de80:	f7ff f996 	bl	9000d1b0 <RCCEx_PLL2_Config>
9000de84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000de86:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de8a:	e5dd      	b.n	9000da48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de8c:	2100      	movs	r1, #0
9000de8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de92:	f7ff fa07 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000de96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000de98:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de9c:	f7ff bb52 	b.w	9000d544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000dea0:	2100      	movs	r1, #0
9000dea2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dea6:	f7ff f9fd 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000deaa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000deac:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000deb0:	f7ff bae6 	b.w	9000d480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000deb4:	2101      	movs	r1, #1
9000deb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000deba:	f7ff f9f3 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000debe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000dec0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dec4:	2d00      	cmp	r5, #0
9000dec6:	f47f aef4 	bne.w	9000dcb2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000deca:	e46c      	b.n	9000d7a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000decc:	2101      	movs	r1, #1
9000dece:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ded2:	f7ff f9e7 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000ded6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000ded8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dedc:	2d00      	cmp	r5, #0
9000dede:	f47f aef6 	bne.w	9000dcce <HAL_RCCEx_PeriphCLKConfig+0x936>
9000dee2:	e43c      	b.n	9000d75e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dee4:	2101      	movs	r1, #1
9000dee6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000deea:	f7ff f9db 	bl	9000d2a4 <RCCEx_PLL3_Config>
9000deee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000def0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000def4:	2d00      	cmp	r5, #0
9000def6:	f47f aed6 	bne.w	9000dca6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000defa:	e5f9      	b.n	9000daf0 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000defc:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000defe:	e9d4 3200 	ldrd	r3, r2, [r4]
9000df02:	4635      	mov	r5, r6
9000df04:	f7ff bbe0 	b.w	9000d6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000df08:	2601      	movs	r6, #1
9000df0a:	f7ff ba72 	b.w	9000d3f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000df0e:	4d20      	ldr	r5, [pc, #128]	; (9000df90 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000df10:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000df12:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000df16:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000df18:	f7ff ba64 	b.w	9000d3e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000df1c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000df20:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000df22:	e9d4 3200 	ldrd	r3, r2, [r4]
9000df26:	e4b4      	b.n	9000d892 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000df28:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000df2c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000df2e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000df32:	e4bc      	b.n	9000d8ae <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000df34:	f7fb fa88 	bl	90009448 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000df38:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000df90 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000df3c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000df3e:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000df42:	e004      	b.n	9000df4e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000df44:	f7fb fa80 	bl	90009448 <HAL_GetTick>
9000df48:	1bc0      	subs	r0, r0, r7
9000df4a:	4548      	cmp	r0, r9
9000df4c:	d8d6      	bhi.n	9000defc <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000df4e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000df52:	079b      	lsls	r3, r3, #30
9000df54:	d5f6      	bpl.n	9000df44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000df56:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000df5a:	e64d      	b.n	9000dbf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000df5c:	480c      	ldr	r0, [pc, #48]	; (9000df90 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000df5e:	4a0d      	ldr	r2, [pc, #52]	; (9000df94 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000df60:	6901      	ldr	r1, [r0, #16]
9000df62:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000df66:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000df6a:	430a      	orrs	r2, r1
9000df6c:	6102      	str	r2, [r0, #16]
9000df6e:	e64e      	b.n	9000dc0e <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000df70:	e9d4 3200 	ldrd	r3, r2, [r4]
9000df74:	462e      	mov	r6, r5
9000df76:	f7ff bba7 	b.w	9000d6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000df7a:	2601      	movs	r6, #1
9000df7c:	4635      	mov	r5, r6
9000df7e:	f7ff bbf5 	b.w	9000d76c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000df82:	2601      	movs	r6, #1
9000df84:	4635      	mov	r5, r6
9000df86:	f7ff bb9c 	b.w	9000d6c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000df8a:	2601      	movs	r6, #1
9000df8c:	4635      	mov	r5, r6
9000df8e:	e412      	b.n	9000d7b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000df90:	58024400 	.word	0x58024400
9000df94:	00ffffcf 	.word	0x00ffffcf

9000df98 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000df98:	b318      	cbz	r0, 9000dfe2 <HAL_SDRAM_Init+0x4a>
{
9000df9a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000df9c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000dfa0:	4604      	mov	r4, r0
9000dfa2:	460d      	mov	r5, r1
9000dfa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000dfa8:	b1b3      	cbz	r3, 9000dfd8 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000dfaa:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000dfac:	2302      	movs	r3, #2
9000dfae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000dfb2:	f851 0b04 	ldr.w	r0, [r1], #4
9000dfb6:	f000 fa39 	bl	9000e42c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000dfba:	6862      	ldr	r2, [r4, #4]
9000dfbc:	4629      	mov	r1, r5
9000dfbe:	6820      	ldr	r0, [r4, #0]
9000dfc0:	f000 fa72 	bl	9000e4a8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000dfc4:	4a08      	ldr	r2, [pc, #32]	; (9000dfe8 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000dfc6:	2101      	movs	r1, #1

  return HAL_OK;
9000dfc8:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000dfca:	6813      	ldr	r3, [r2, #0]
9000dfcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000dfd0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000dfd2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000dfd6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000dfd8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000dfdc:	f7f6 fdda 	bl	90004b94 <HAL_SDRAM_MspInit>
9000dfe0:	e7e3      	b.n	9000dfaa <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000dfe2:	2001      	movs	r0, #1
}
9000dfe4:	4770      	bx	lr
9000dfe6:	bf00      	nop
9000dfe8:	52004000 	.word	0x52004000

9000dfec <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000dfec:	b510      	push	{r4, lr}
9000dfee:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000dff0:	f7f6 fe4c 	bl	90004c8c <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000dff4:	e9d4 0100 	ldrd	r0, r1, [r4]
9000dff8:	f000 faa4 	bl	9000e544 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000dffc:	2000      	movs	r0, #0
9000dffe:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000e002:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000e006:	bd10      	pop	{r4, pc}

9000e008 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000e008:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e00a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e00e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000e010:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e012:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000e014:	d004      	beq.n	9000e020 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000e016:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000e01a:	2e01      	cmp	r6, #1
9000e01c:	d001      	beq.n	9000e022 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000e01e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e020:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e022:	2302      	movs	r3, #2
9000e024:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e026:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e028:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e02c:	f000 fa9e 	bl	9000e56c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000e030:	682b      	ldr	r3, [r5, #0]
9000e032:	2b02      	cmp	r3, #2
9000e034:	d003      	beq.n	9000e03e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000e036:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000e038:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000e03c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e03e:	2305      	movs	r3, #5
  return HAL_OK;
9000e040:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e042:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000e046:	bd70      	pop	{r4, r5, r6, pc}

9000e048 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000e048:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e04a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e04e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e050:	2b02      	cmp	r3, #2
9000e052:	b2d8      	uxtb	r0, r3
9000e054:	d005      	beq.n	9000e062 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000e056:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000e05a:	2b01      	cmp	r3, #1
9000e05c:	b2dd      	uxtb	r5, r3
9000e05e:	d001      	beq.n	9000e064 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000e060:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e062:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e064:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e066:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e068:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e06c:	f000 fa96 	bl	9000e59c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000e070:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000e072:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000e076:	bd38      	pop	{r3, r4, r5, pc}

9000e078 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000e078:	4770      	bx	lr
9000e07a:	bf00      	nop

9000e07c <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000e07c:	2800      	cmp	r0, #0
9000e07e:	f000 80a5 	beq.w	9000e1cc <HAL_TIM_Base_Init+0x150>
{
9000e082:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000e084:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e088:	4604      	mov	r4, r0
9000e08a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e08e:	2b00      	cmp	r3, #0
9000e090:	d076      	beq.n	9000e180 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000e092:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e094:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e096:	494e      	ldr	r1, [pc, #312]	; (9000e1d0 <HAL_TIM_Base_Init+0x154>)
9000e098:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000e09c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e0a0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000e0a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e0a6:	fab1 f181 	clz	r1, r1
9000e0aa:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000e0ae:	d027      	beq.n	9000e100 <HAL_TIM_Base_Init+0x84>
9000e0b0:	bb31      	cbnz	r1, 9000e100 <HAL_TIM_Base_Init+0x84>
9000e0b2:	4848      	ldr	r0, [pc, #288]	; (9000e1d4 <HAL_TIM_Base_Init+0x158>)
9000e0b4:	4d48      	ldr	r5, [pc, #288]	; (9000e1d8 <HAL_TIM_Base_Init+0x15c>)
9000e0b6:	4282      	cmp	r2, r0
9000e0b8:	d067      	beq.n	9000e18a <HAL_TIM_Base_Init+0x10e>
9000e0ba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e0be:	4282      	cmp	r2, r0
9000e0c0:	d063      	beq.n	9000e18a <HAL_TIM_Base_Init+0x10e>
9000e0c2:	1b55      	subs	r5, r2, r5
9000e0c4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e0c8:	fab5 f585 	clz	r5, r5
9000e0cc:	4282      	cmp	r2, r0
9000e0ce:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000e0d2:	d063      	beq.n	9000e19c <HAL_TIM_Base_Init+0x120>
9000e0d4:	2d00      	cmp	r5, #0
9000e0d6:	d161      	bne.n	9000e19c <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e0d8:	4840      	ldr	r0, [pc, #256]	; (9000e1dc <HAL_TIM_Base_Init+0x160>)
9000e0da:	4941      	ldr	r1, [pc, #260]	; (9000e1e0 <HAL_TIM_Base_Init+0x164>)
9000e0dc:	428a      	cmp	r2, r1
9000e0de:	bf18      	it	ne
9000e0e0:	4282      	cmpne	r2, r0
9000e0e2:	d065      	beq.n	9000e1b0 <HAL_TIM_Base_Init+0x134>
9000e0e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000e0e8:	428a      	cmp	r2, r1
9000e0ea:	d061      	beq.n	9000e1b0 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e0ec:	69a0      	ldr	r0, [r4, #24]
9000e0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e0f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e0f4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e0f6:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000e0f8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e0fa:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e0fc:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e0fe:	e023      	b.n	9000e148 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e100:	4d35      	ldr	r5, [pc, #212]	; (9000e1d8 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e106:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e108:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000e10a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e10c:	fab5 f585 	clz	r5, r5
9000e110:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e112:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e118:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e11a:	69a0      	ldr	r0, [r4, #24]
9000e11c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e120:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e122:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e124:	68e3      	ldr	r3, [r4, #12]
9000e126:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e128:	6863      	ldr	r3, [r4, #4]
9000e12a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e12c:	b951      	cbnz	r1, 9000e144 <HAL_TIM_Base_Init+0xc8>
9000e12e:	b94d      	cbnz	r5, 9000e144 <HAL_TIM_Base_Init+0xc8>
9000e130:	492a      	ldr	r1, [pc, #168]	; (9000e1dc <HAL_TIM_Base_Init+0x160>)
9000e132:	4b2b      	ldr	r3, [pc, #172]	; (9000e1e0 <HAL_TIM_Base_Init+0x164>)
9000e134:	429a      	cmp	r2, r3
9000e136:	bf18      	it	ne
9000e138:	428a      	cmpne	r2, r1
9000e13a:	d003      	beq.n	9000e144 <HAL_TIM_Base_Init+0xc8>
9000e13c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000e140:	429a      	cmp	r2, r3
9000e142:	d101      	bne.n	9000e148 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000e144:	6963      	ldr	r3, [r4, #20]
9000e146:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000e148:	2301      	movs	r3, #1
  return HAL_OK;
9000e14a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000e14c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000e14e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e152:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000e156:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000e15a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000e15e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000e162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000e166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e16a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e16e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e172:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000e176:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000e17a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000e17e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000e180:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000e184:	f7ff ff78 	bl	9000e078 <HAL_TIM_Base_MspInit>
9000e188:	e783      	b.n	9000e092 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e18a:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e190:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e192:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000e196:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e198:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e19a:	e7ba      	b.n	9000e112 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000e19c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e1a2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e1a4:	480f      	ldr	r0, [pc, #60]	; (9000e1e4 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e1a6:	4282      	cmp	r2, r0
9000e1a8:	d0b3      	beq.n	9000e112 <HAL_TIM_Base_Init+0x96>
9000e1aa:	2d00      	cmp	r5, #0
9000e1ac:	d1b1      	bne.n	9000e112 <HAL_TIM_Base_Init+0x96>
9000e1ae:	e793      	b.n	9000e0d8 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e1b0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e1b6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e1b8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e1ba:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e1bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e1c0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000e1c2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000e1c4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e1c6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e1c8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e1ca:	e7b1      	b.n	9000e130 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000e1cc:	2001      	movs	r0, #1
}
9000e1ce:	4770      	bx	lr
9000e1d0:	40010000 	.word	0x40010000
9000e1d4:	40000400 	.word	0x40000400
9000e1d8:	40010400 	.word	0x40010400
9000e1dc:	40014000 	.word	0x40014000
9000e1e0:	40014400 	.word	0x40014400
9000e1e4:	40000c00 	.word	0x40000c00

9000e1e8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000e1e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e1ec:	2b01      	cmp	r3, #1
9000e1ee:	d141      	bne.n	9000e274 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e1f0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e1f2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e1f4:	4b24      	ldr	r3, [pc, #144]	; (9000e288 <HAL_TIM_Base_Start_IT+0xa0>)
9000e1f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000e1fa:	bf18      	it	ne
9000e1fc:	429a      	cmpne	r2, r3
{
9000e1fe:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e200:	bf0c      	ite	eq
9000e202:	2301      	moveq	r3, #1
9000e204:	2300      	movne	r3, #0
9000e206:	4d21      	ldr	r5, [pc, #132]	; (9000e28c <HAL_TIM_Base_Start_IT+0xa4>)
9000e208:	4c21      	ldr	r4, [pc, #132]	; (9000e290 <HAL_TIM_Base_Start_IT+0xa8>)
9000e20a:	42aa      	cmp	r2, r5
9000e20c:	bf08      	it	eq
9000e20e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000e212:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e216:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e218:	42a2      	cmp	r2, r4
9000e21a:	bf08      	it	eq
9000e21c:	f043 0301 	orreq.w	r3, r3, #1
9000e220:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e224:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e228:	481a      	ldr	r0, [pc, #104]	; (9000e294 <HAL_TIM_Base_Start_IT+0xac>)
9000e22a:	42a2      	cmp	r2, r4
9000e22c:	bf08      	it	eq
9000e22e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e232:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e234:	4282      	cmp	r2, r0
9000e236:	bf08      	it	eq
9000e238:	f043 0301 	orreq.w	r3, r3, #1
9000e23c:	4916      	ldr	r1, [pc, #88]	; (9000e298 <HAL_TIM_Base_Start_IT+0xb0>)
9000e23e:	428a      	cmp	r2, r1
9000e240:	bf08      	it	eq
9000e242:	f043 0301 	orreq.w	r3, r3, #1
9000e246:	b933      	cbnz	r3, 9000e256 <HAL_TIM_Base_Start_IT+0x6e>
9000e248:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000e24c:	1a10      	subs	r0, r2, r0
9000e24e:	fab0 f080 	clz	r0, r0
9000e252:	0940      	lsrs	r0, r0, #5
9000e254:	b198      	cbz	r0, 9000e27e <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000e256:	6891      	ldr	r1, [r2, #8]
9000e258:	4b10      	ldr	r3, [pc, #64]	; (9000e29c <HAL_TIM_Base_Start_IT+0xb4>)
9000e25a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000e25c:	2b06      	cmp	r3, #6
9000e25e:	d00b      	beq.n	9000e278 <HAL_TIM_Base_Start_IT+0x90>
9000e260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000e264:	d008      	beq.n	9000e278 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000e266:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000e268:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000e26a:	f043 0301 	orr.w	r3, r3, #1
9000e26e:	6013      	str	r3, [r2, #0]
}
9000e270:	bc30      	pop	{r4, r5}
9000e272:	4770      	bx	lr
    return HAL_ERROR;
9000e274:	2001      	movs	r0, #1
}
9000e276:	4770      	bx	lr
  return HAL_OK;
9000e278:	2000      	movs	r0, #0
}
9000e27a:	bc30      	pop	{r4, r5}
9000e27c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000e27e:	6813      	ldr	r3, [r2, #0]
9000e280:	f043 0301 	orr.w	r3, r3, #1
9000e284:	6013      	str	r3, [r2, #0]
9000e286:	e7f3      	b.n	9000e270 <HAL_TIM_Base_Start_IT+0x88>
9000e288:	40010000 	.word	0x40010000
9000e28c:	40000400 	.word	0x40000400
9000e290:	40000800 	.word	0x40000800
9000e294:	40010400 	.word	0x40010400
9000e298:	40001800 	.word	0x40001800
9000e29c:	00010007 	.word	0x00010007

9000e2a0 <HAL_TIM_OC_DelayElapsedCallback>:
9000e2a0:	4770      	bx	lr
9000e2a2:	bf00      	nop

9000e2a4 <HAL_TIM_IC_CaptureCallback>:
9000e2a4:	4770      	bx	lr
9000e2a6:	bf00      	nop

9000e2a8 <HAL_TIM_PWM_PulseFinishedCallback>:
9000e2a8:	4770      	bx	lr
9000e2aa:	bf00      	nop

9000e2ac <HAL_TIM_TriggerCallback>:
9000e2ac:	4770      	bx	lr
9000e2ae:	bf00      	nop

9000e2b0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e2b0:	6803      	ldr	r3, [r0, #0]
9000e2b2:	691a      	ldr	r2, [r3, #16]
9000e2b4:	0791      	lsls	r1, r2, #30
{
9000e2b6:	b510      	push	{r4, lr}
9000e2b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e2ba:	d502      	bpl.n	9000e2c2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000e2bc:	68da      	ldr	r2, [r3, #12]
9000e2be:	0792      	lsls	r2, r2, #30
9000e2c0:	d468      	bmi.n	9000e394 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e2c2:	691a      	ldr	r2, [r3, #16]
9000e2c4:	0752      	lsls	r2, r2, #29
9000e2c6:	d502      	bpl.n	9000e2ce <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000e2c8:	68da      	ldr	r2, [r3, #12]
9000e2ca:	0750      	lsls	r0, r2, #29
9000e2cc:	d44f      	bmi.n	9000e36e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e2ce:	691a      	ldr	r2, [r3, #16]
9000e2d0:	0711      	lsls	r1, r2, #28
9000e2d2:	d502      	bpl.n	9000e2da <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000e2d4:	68da      	ldr	r2, [r3, #12]
9000e2d6:	0712      	lsls	r2, r2, #28
9000e2d8:	d437      	bmi.n	9000e34a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e2da:	691a      	ldr	r2, [r3, #16]
9000e2dc:	06d0      	lsls	r0, r2, #27
9000e2de:	d502      	bpl.n	9000e2e6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000e2e0:	68da      	ldr	r2, [r3, #12]
9000e2e2:	06d1      	lsls	r1, r2, #27
9000e2e4:	d41e      	bmi.n	9000e324 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e2e6:	691a      	ldr	r2, [r3, #16]
9000e2e8:	07d2      	lsls	r2, r2, #31
9000e2ea:	d502      	bpl.n	9000e2f2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000e2ec:	68da      	ldr	r2, [r3, #12]
9000e2ee:	07d0      	lsls	r0, r2, #31
9000e2f0:	d469      	bmi.n	9000e3c6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e2f2:	691a      	ldr	r2, [r3, #16]
9000e2f4:	0611      	lsls	r1, r2, #24
9000e2f6:	d502      	bpl.n	9000e2fe <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e2f8:	68da      	ldr	r2, [r3, #12]
9000e2fa:	0612      	lsls	r2, r2, #24
9000e2fc:	d46b      	bmi.n	9000e3d6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e2fe:	691a      	ldr	r2, [r3, #16]
9000e300:	05d0      	lsls	r0, r2, #23
9000e302:	d502      	bpl.n	9000e30a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e304:	68da      	ldr	r2, [r3, #12]
9000e306:	0611      	lsls	r1, r2, #24
9000e308:	d46d      	bmi.n	9000e3e6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e30a:	691a      	ldr	r2, [r3, #16]
9000e30c:	0652      	lsls	r2, r2, #25
9000e30e:	d502      	bpl.n	9000e316 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000e310:	68da      	ldr	r2, [r3, #12]
9000e312:	0650      	lsls	r0, r2, #25
9000e314:	d46f      	bmi.n	9000e3f6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e316:	691a      	ldr	r2, [r3, #16]
9000e318:	0691      	lsls	r1, r2, #26
9000e31a:	d502      	bpl.n	9000e322 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000e31c:	68da      	ldr	r2, [r3, #12]
9000e31e:	0692      	lsls	r2, r2, #26
9000e320:	d449      	bmi.n	9000e3b6 <HAL_TIM_IRQHandler+0x106>
}
9000e322:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e324:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e328:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000e32a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e32c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e32e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000e330:	69db      	ldr	r3, [r3, #28]
9000e332:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e336:	d16f      	bne.n	9000e418 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e338:	f7ff ffb2 	bl	9000e2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e33c:	4620      	mov	r0, r4
9000e33e:	f7ff ffb3 	bl	9000e2a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e342:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e344:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e346:	7722      	strb	r2, [r4, #28]
9000e348:	e7cd      	b.n	9000e2e6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e34a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e34e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000e350:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e352:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e354:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000e356:	69db      	ldr	r3, [r3, #28]
9000e358:	079b      	lsls	r3, r3, #30
9000e35a:	d15a      	bne.n	9000e412 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e35c:	f7ff ffa0 	bl	9000e2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e360:	4620      	mov	r0, r4
9000e362:	f7ff ffa1 	bl	9000e2a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e366:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e368:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e36a:	7722      	strb	r2, [r4, #28]
9000e36c:	e7b5      	b.n	9000e2da <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e36e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e372:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000e374:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e376:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e378:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000e37a:	699b      	ldr	r3, [r3, #24]
9000e37c:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e380:	d144      	bne.n	9000e40c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e382:	f7ff ff8d 	bl	9000e2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e386:	4620      	mov	r0, r4
9000e388:	f7ff ff8e 	bl	9000e2a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e38c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e38e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e390:	7722      	strb	r2, [r4, #28]
9000e392:	e79c      	b.n	9000e2ce <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e394:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e398:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e39a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e39c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000e39e:	699b      	ldr	r3, [r3, #24]
9000e3a0:	0799      	lsls	r1, r3, #30
9000e3a2:	d130      	bne.n	9000e406 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000e3a4:	f7ff ff7c 	bl	9000e2a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e3a8:	4620      	mov	r0, r4
9000e3aa:	f7ff ff7d 	bl	9000e2a8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e3ae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e3b0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e3b2:	7722      	strb	r2, [r4, #28]
9000e3b4:	e785      	b.n	9000e2c2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e3b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000e3ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e3bc:	611a      	str	r2, [r3, #16]
}
9000e3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000e3c2:	f000 b82d 	b.w	9000e420 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e3c6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000e3ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e3cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000e3ce:	f7f6 fa45 	bl	9000485c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e3d2:	6823      	ldr	r3, [r4, #0]
9000e3d4:	e78d      	b.n	9000e2f2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e3d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000e3da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e3dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000e3de:	f000 f821 	bl	9000e424 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e3e2:	6823      	ldr	r3, [r4, #0]
9000e3e4:	e78b      	b.n	9000e2fe <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e3e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000e3ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e3ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000e3ee:	f000 f81b 	bl	9000e428 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e3f2:	6823      	ldr	r3, [r4, #0]
9000e3f4:	e789      	b.n	9000e30a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e3f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000e3fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e3fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000e3fe:	f7ff ff55 	bl	9000e2ac <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e402:	6823      	ldr	r3, [r4, #0]
9000e404:	e787      	b.n	9000e316 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000e406:	f7ff ff4d 	bl	9000e2a4 <HAL_TIM_IC_CaptureCallback>
9000e40a:	e7d0      	b.n	9000e3ae <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000e40c:	f7ff ff4a 	bl	9000e2a4 <HAL_TIM_IC_CaptureCallback>
9000e410:	e7bc      	b.n	9000e38c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000e412:	f7ff ff47 	bl	9000e2a4 <HAL_TIM_IC_CaptureCallback>
9000e416:	e7a6      	b.n	9000e366 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000e418:	f7ff ff44 	bl	9000e2a4 <HAL_TIM_IC_CaptureCallback>
9000e41c:	e791      	b.n	9000e342 <HAL_TIM_IRQHandler+0x92>
9000e41e:	bf00      	nop

9000e420 <HAL_TIMEx_CommutCallback>:
9000e420:	4770      	bx	lr
9000e422:	bf00      	nop

9000e424 <HAL_TIMEx_BreakCallback>:
9000e424:	4770      	bx	lr
9000e426:	bf00      	nop

9000e428 <HAL_TIMEx_Break2Callback>:
9000e428:	4770      	bx	lr
9000e42a:	bf00      	nop

9000e42c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e42c:	680b      	ldr	r3, [r1, #0]
{
9000e42e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e430:	b9d3      	cbnz	r3, 9000e468 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e432:	6804      	ldr	r4, [r0, #0]
9000e434:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000e438:	684a      	ldr	r2, [r1, #4]
9000e43a:	4023      	ands	r3, r4
9000e43c:	4313      	orrs	r3, r2
9000e43e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e442:	4323      	orrs	r3, r4
9000e444:	4313      	orrs	r3, r2
9000e446:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000e44a:	4323      	orrs	r3, r4
9000e44c:	4313      	orrs	r3, r2
9000e44e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000e452:	4323      	orrs	r3, r4
9000e454:	4313      	orrs	r3, r2
9000e456:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000e45a:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000e45c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e460:	4313      	orrs	r3, r2
9000e462:	6003      	str	r3, [r0, #0]
}
9000e464:	2000      	movs	r0, #0
9000e466:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e468:	6802      	ldr	r2, [r0, #0]
9000e46a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000e46e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000e472:	4322      	orrs	r2, r4
9000e474:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000e476:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e478:	4b0a      	ldr	r3, [pc, #40]	; (9000e4a4 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e47a:	4322      	orrs	r2, r4
9000e47c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e47e:	6842      	ldr	r2, [r0, #4]
9000e480:	4013      	ands	r3, r2
9000e482:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000e486:	4323      	orrs	r3, r4
9000e488:	4313      	orrs	r3, r2
9000e48a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000e48e:	4323      	orrs	r3, r4
9000e490:	4313      	orrs	r3, r2
9000e492:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000e496:	4323      	orrs	r3, r4
}
9000e498:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e49c:	4313      	orrs	r3, r2
9000e49e:	6043      	str	r3, [r0, #4]
}
9000e4a0:	2000      	movs	r0, #0
9000e4a2:	4770      	bx	lr
9000e4a4:	ffff8000 	.word	0xffff8000

9000e4a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000e4a8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000e4aa:	bb0a      	cbnz	r2, 9000e4f0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e4ac:	6883      	ldr	r3, [r0, #8]
9000e4ae:	e9d1 2400 	ldrd	r2, r4, [r1]
9000e4b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000e4b6:	3c01      	subs	r4, #1
9000e4b8:	3a01      	subs	r2, #1
9000e4ba:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000e4be:	4313      	orrs	r3, r2
9000e4c0:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e4c4:	3c01      	subs	r4, #1
9000e4c6:	3a01      	subs	r2, #1
9000e4c8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000e4cc:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000e4d0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000e4d4:	698a      	ldr	r2, [r1, #24]
9000e4d6:	3d01      	subs	r5, #1
9000e4d8:	1e61      	subs	r1, r4, #1
9000e4da:	3a01      	subs	r2, #1
9000e4dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000e4e0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000e4e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000e4e8:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e4ea:	6083      	str	r3, [r0, #8]
}
9000e4ec:	2000      	movs	r0, #0
9000e4ee:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e4f0:	6885      	ldr	r5, [r0, #8]
9000e4f2:	68ca      	ldr	r2, [r1, #12]
9000e4f4:	4b12      	ldr	r3, [pc, #72]	; (9000e540 <FMC_SDRAM_Timing_Init+0x98>)
9000e4f6:	1e54      	subs	r4, r2, #1
9000e4f8:	694a      	ldr	r2, [r1, #20]
9000e4fa:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e4fc:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e4fe:	3a01      	subs	r2, #1
9000e500:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e504:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e508:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e50c:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e510:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e512:	68c3      	ldr	r3, [r0, #12]
9000e514:	3c01      	subs	r4, #1
9000e516:	3a01      	subs	r2, #1
9000e518:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000e51c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000e520:	690c      	ldr	r4, [r1, #16]
9000e522:	4313      	orrs	r3, r2
9000e524:	698a      	ldr	r2, [r1, #24]
9000e526:	1e61      	subs	r1, r4, #1
9000e528:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000e52c:	3a01      	subs	r2, #1
9000e52e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000e532:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000e536:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e538:	60c3      	str	r3, [r0, #12]
}
9000e53a:	2000      	movs	r0, #0
9000e53c:	4770      	bx	lr
9000e53e:	bf00      	nop
9000e540:	ff0f0fff 	.word	0xff0f0fff

9000e544 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000e544:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000e546:	2200      	movs	r2, #0
{
9000e548:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000e54a:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000e54e:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000e552:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000e556:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000e55a:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000e55c:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000e560:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000e562:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000e564:	619a      	str	r2, [r3, #24]
}
9000e566:	bc30      	pop	{r4, r5}
9000e568:	4770      	bx	lr
9000e56a:	bf00      	nop

9000e56c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000e56c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e56e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000e572:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e574:	6900      	ldr	r0, [r0, #16]
9000e576:	4323      	orrs	r3, r4
9000e578:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000e57c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000e580:	4c05      	ldr	r4, [pc, #20]	; (9000e598 <FMC_SDRAM_SendCommand+0x2c>)
9000e582:	3901      	subs	r1, #1
9000e584:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000e586:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e588:	4323      	orrs	r3, r4
}
9000e58a:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e58e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000e592:	6113      	str	r3, [r2, #16]
}
9000e594:	4770      	bx	lr
9000e596:	bf00      	nop
9000e598:	ffc00000 	.word	0xffc00000

9000e59c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000e59c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e59e:	4b05      	ldr	r3, [pc, #20]	; (9000e5b4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000e5a0:	2000      	movs	r0, #0
{
9000e5a2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e5a4:	6954      	ldr	r4, [r2, #20]
9000e5a6:	4023      	ands	r3, r4
}
9000e5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e5ac:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000e5b0:	6151      	str	r1, [r2, #20]
}
9000e5b2:	4770      	bx	lr
9000e5b4:	ffffc001 	.word	0xffffc001

9000e5b8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
9000e5b8:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
9000e5ba:	f003 f94b 	bl	90011854 <pvTimerGetTimerID>

  if (callb != NULL) {
9000e5be:	b120      	cbz	r0, 9000e5ca <TimerCallback+0x12>
    callb->func (callb->arg);
9000e5c0:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
9000e5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
9000e5c8:	4718      	bx	r3
}
9000e5ca:	bd10      	pop	{r4, pc}

9000e5cc <SysTick_Handler>:
void SysTick_Handler (void) {
9000e5cc:	b508      	push	{r3, lr}
  SysTick->CTRL;
9000e5ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e5d2:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000e5d4:	f002 fd30 	bl	90011038 <xTaskGetSchedulerState>
9000e5d8:	2801      	cmp	r0, #1
9000e5da:	d100      	bne.n	9000e5de <SysTick_Handler+0x12>
}
9000e5dc:	bd08      	pop	{r3, pc}
9000e5de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000e5e2:	f000 bd2f 	b.w	9000f044 <xPortSysTickHandler>
9000e5e6:	bf00      	nop

9000e5e8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000e5e8:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
9000e5ec:	b92b      	cbnz	r3, 9000e5fa <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
9000e5ee:	4b06      	ldr	r3, [pc, #24]	; (9000e608 <osKernelInitialize+0x20>)
9000e5f0:	6818      	ldr	r0, [r3, #0]
9000e5f2:	b928      	cbnz	r0, 9000e600 <osKernelInitialize+0x18>
      KernelState = osKernelReady;
9000e5f4:	2201      	movs	r2, #1
9000e5f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000e5f8:	4770      	bx	lr
    stat = osErrorISR;
9000e5fa:	f06f 0005 	mvn.w	r0, #5
9000e5fe:	4770      	bx	lr
      stat = osError;
9000e600:	f04f 30ff 	mov.w	r0, #4294967295
}
9000e604:	4770      	bx	lr
9000e606:	bf00      	nop
9000e608:	2400dfb4 	.word	0x2400dfb4

9000e60c <osKernelStart>:
osStatus_t osKernelStart (void) {
9000e60c:	b510      	push	{r4, lr}
9000e60e:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000e612:	b974      	cbnz	r4, 9000e632 <osKernelStart+0x26>
    if (KernelState == osKernelReady) {
9000e614:	4b08      	ldr	r3, [pc, #32]	; (9000e638 <osKernelStart+0x2c>)
9000e616:	681a      	ldr	r2, [r3, #0]
9000e618:	2a01      	cmp	r2, #1
9000e61a:	d107      	bne.n	9000e62c <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000e61c:	4907      	ldr	r1, [pc, #28]	; (9000e63c <osKernelStart+0x30>)
      KernelState = osKernelRunning;
9000e61e:	2202      	movs	r2, #2
9000e620:	77cc      	strb	r4, [r1, #31]
9000e622:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
9000e624:	f002 fa96 	bl	90010b54 <vTaskStartScheduler>
      stat = osOK;
9000e628:	4620      	mov	r0, r4
}
9000e62a:	bd10      	pop	{r4, pc}
      stat = osError;
9000e62c:	f04f 30ff 	mov.w	r0, #4294967295
}
9000e630:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e632:	f06f 0005 	mvn.w	r0, #5
}
9000e636:	bd10      	pop	{r4, pc}
9000e638:	2400dfb4 	.word	0x2400dfb4
9000e63c:	e000ed00 	.word	0xe000ed00

9000e640 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000e640:	b5f0      	push	{r4, r5, r6, r7, lr}
  hTask = NULL;
9000e642:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000e644:	b087      	sub	sp, #28
9000e646:	4614      	mov	r4, r2
  hTask = NULL;
9000e648:	9505      	str	r5, [sp, #20]
9000e64a:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
9000e64e:	bb5a      	cbnz	r2, 9000e6a8 <osThreadNew+0x68>
9000e650:	4606      	mov	r6, r0
9000e652:	b348      	cbz	r0, 9000e6a8 <osThreadNew+0x68>
    if (attr != NULL) {
9000e654:	b1e4      	cbz	r4, 9000e690 <osThreadNew+0x50>
      if (attr->priority != osPriorityNone) {
9000e656:	69a7      	ldr	r7, [r4, #24]
9000e658:	bb4f      	cbnz	r7, 9000e6ae <osThreadNew+0x6e>
9000e65a:	2718      	movs	r7, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000e65c:	6863      	ldr	r3, [r4, #4]
9000e65e:	07db      	lsls	r3, r3, #31
9000e660:	d422      	bmi.n	9000e6a8 <osThreadNew+0x68>
      if (attr->stack_size > 0U) {
9000e662:	6963      	ldr	r3, [r4, #20]
9000e664:	b33b      	cbz	r3, 9000e6b6 <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
9000e666:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000e66a:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000e66c:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000e66e:	b338      	cbz	r0, 9000e6c0 <osThreadNew+0x80>
9000e670:	68e2      	ldr	r2, [r4, #12]
9000e672:	2a5f      	cmp	r2, #95	; 0x5f
9000e674:	d918      	bls.n	9000e6a8 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000e676:	6924      	ldr	r4, [r4, #16]
9000e678:	b1b3      	cbz	r3, 9000e6a8 <osThreadNew+0x68>
9000e67a:	b1ac      	cbz	r4, 9000e6a8 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000e67c:	460b      	mov	r3, r1
9000e67e:	4662      	mov	r2, ip
9000e680:	4629      	mov	r1, r5
9000e682:	9700      	str	r7, [sp, #0]
9000e684:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000e688:	4630      	mov	r0, r6
9000e68a:	f002 f8c7 	bl	9001081c <xTaskCreateStatic>
9000e68e:	e00c      	b.n	9000e6aa <osThreadNew+0x6a>
9000e690:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000e692:	2718      	movs	r7, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000e694:	460b      	mov	r3, r1
9000e696:	4621      	mov	r1, r4
9000e698:	ac05      	add	r4, sp, #20
9000e69a:	4630      	mov	r0, r6
9000e69c:	9700      	str	r7, [sp, #0]
9000e69e:	9401      	str	r4, [sp, #4]
9000e6a0:	f002 f966 	bl	90010970 <xTaskCreate>
9000e6a4:	2801      	cmp	r0, #1
9000e6a6:	d009      	beq.n	9000e6bc <osThreadNew+0x7c>
        return (NULL);
9000e6a8:	2000      	movs	r0, #0
}
9000e6aa:	b007      	add	sp, #28
9000e6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000e6ae:	1e7a      	subs	r2, r7, #1
9000e6b0:	2a37      	cmp	r2, #55	; 0x37
9000e6b2:	d9d3      	bls.n	9000e65c <osThreadNew+0x1c>
9000e6b4:	e7f8      	b.n	9000e6a8 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000e6b6:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000e6ba:	e7d6      	b.n	9000e66a <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000e6bc:	9805      	ldr	r0, [sp, #20]
9000e6be:	e7f4      	b.n	9000e6aa <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000e6c0:	68e3      	ldr	r3, [r4, #12]
9000e6c2:	2b00      	cmp	r3, #0
9000e6c4:	d1f1      	bne.n	9000e6aa <osThreadNew+0x6a>
9000e6c6:	6923      	ldr	r3, [r4, #16]
9000e6c8:	2b00      	cmp	r3, #0
9000e6ca:	d1ee      	bne.n	9000e6aa <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000e6cc:	fa1f f28c 	uxth.w	r2, ip
9000e6d0:	462c      	mov	r4, r5
9000e6d2:	e7df      	b.n	9000e694 <osThreadNew+0x54>

9000e6d4 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
9000e6d4:	b510      	push	{r4, lr}
9000e6d6:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000e6da:	b92c      	cbnz	r4, 9000e6e8 <osDelay+0x14>
    if (ticks != 0U) {
9000e6dc:	b900      	cbnz	r0, 9000e6e0 <osDelay+0xc>
}
9000e6de:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000e6e0:	f002 f9e2 	bl	90010aa8 <vTaskDelay>
    stat = osOK;
9000e6e4:	4620      	mov	r0, r4
}
9000e6e6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e6e8:	f06f 0005 	mvn.w	r0, #5
}
9000e6ec:	bd10      	pop	{r4, pc}
9000e6ee:	bf00      	nop

9000e6f0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
9000e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e6f4:	461c      	mov	r4, r3
9000e6f6:	b082      	sub	sp, #8
9000e6f8:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
9000e6fc:	b9bb      	cbnz	r3, 9000e72e <osTimerNew+0x3e>
9000e6fe:	4605      	mov	r5, r0
9000e700:	b1a8      	cbz	r0, 9000e72e <osTimerNew+0x3e>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
9000e702:	2008      	movs	r0, #8
9000e704:	460e      	mov	r6, r1
9000e706:	4617      	mov	r7, r2
9000e708:	f000 fa5e 	bl	9000ebc8 <pvPortMalloc>

    if (callb != NULL) {
9000e70c:	4680      	mov	r8, r0
9000e70e:	b170      	cbz	r0, 9000e72e <osTimerNew+0x3e>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
9000e710:	3e00      	subs	r6, #0
      callb->arg  = argument;
9000e712:	e9c0 5700 	strd	r5, r7, [r0]
      if (type == osTimerOnce) {
9000e716:	bf18      	it	ne
9000e718:	2601      	movne	r6, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
9000e71a:	b1ec      	cbz	r4, 9000e758 <osTimerNew+0x68>
        if (attr->name != NULL) {
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000e71c:	68a3      	ldr	r3, [r4, #8]
        if (attr->name != NULL) {
9000e71e:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000e720:	b1b3      	cbz	r3, 9000e750 <osTimerNew+0x60>
9000e722:	68e2      	ldr	r2, [r4, #12]
9000e724:	2a2b      	cmp	r2, #43	; 0x2b
9000e726:	d806      	bhi.n	9000e736 <osTimerNew+0x46>
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
9000e728:	4640      	mov	r0, r8
9000e72a:	f000 fb0b 	bl	9000ed44 <vPortFree>
9000e72e:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
9000e730:	b002      	add	sp, #8
9000e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
9000e736:	4c0e      	ldr	r4, [pc, #56]	; (9000e770 <osTimerNew+0x80>)
9000e738:	4632      	mov	r2, r6
9000e73a:	2101      	movs	r1, #1
9000e73c:	e9cd 4300 	strd	r4, r3, [sp]
9000e740:	4643      	mov	r3, r8
9000e742:	f002 ffd3 	bl	900116ec <xTimerCreateStatic>
      if ((hTimer == NULL) && (callb != NULL)) {
9000e746:	2800      	cmp	r0, #0
9000e748:	d0ee      	beq.n	9000e728 <osTimerNew+0x38>
}
9000e74a:	b002      	add	sp, #8
9000e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e750:	68e3      	ldr	r3, [r4, #12]
9000e752:	2b00      	cmp	r3, #0
9000e754:	d1e8      	bne.n	9000e728 <osTimerNew+0x38>
9000e756:	4604      	mov	r4, r0
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
9000e758:	4d05      	ldr	r5, [pc, #20]	; (9000e770 <osTimerNew+0x80>)
9000e75a:	4643      	mov	r3, r8
9000e75c:	4632      	mov	r2, r6
9000e75e:	4620      	mov	r0, r4
9000e760:	2101      	movs	r1, #1
9000e762:	9500      	str	r5, [sp, #0]
9000e764:	f002 ff5a 	bl	9001161c <xTimerCreate>
      if ((hTimer == NULL) && (callb != NULL)) {
9000e768:	2800      	cmp	r0, #0
9000e76a:	d1ee      	bne.n	9000e74a <osTimerNew+0x5a>
9000e76c:	e7dc      	b.n	9000e728 <osTimerNew+0x38>
9000e76e:	bf00      	nop
9000e770:	9000e5b9 	.word	0x9000e5b9

9000e774 <osTimerStart>:
9000e774:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
9000e778:	b973      	cbnz	r3, 9000e798 <osTimerStart+0x24>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
9000e77a:	b510      	push	{r4, lr}
9000e77c:	b082      	sub	sp, #8
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
9000e77e:	b170      	cbz	r0, 9000e79e <osTimerStart+0x2a>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
9000e780:	460a      	mov	r2, r1
9000e782:	9300      	str	r3, [sp, #0]
9000e784:	2104      	movs	r1, #4
9000e786:	f003 f831 	bl	900117ec <xTimerGenericCommand>
      stat = osOK;
    } else {
      stat = osErrorResource;
9000e78a:	2801      	cmp	r0, #1
9000e78c:	bf0c      	ite	eq
9000e78e:	2000      	moveq	r0, #0
9000e790:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
9000e794:	b002      	add	sp, #8
9000e796:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e798:	f06f 0005 	mvn.w	r0, #5
}
9000e79c:	4770      	bx	lr
    stat = osErrorParameter;
9000e79e:	f06f 0003 	mvn.w	r0, #3
9000e7a2:	e7f7      	b.n	9000e794 <osTimerStart+0x20>

9000e7a4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000e7a4:	b570      	push	{r4, r5, r6, lr}
9000e7a6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000e7aa:	b9db      	cbnz	r3, 9000e7e4 <osMutexNew+0x40>
    if (attr != NULL) {
9000e7ac:	4604      	mov	r4, r0
9000e7ae:	b1e0      	cbz	r0, 9000e7ea <osMutexNew+0x46>
      type = attr->attr_bits;
9000e7b0:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000e7b2:	0733      	lsls	r3, r6, #28
9000e7b4:	d416      	bmi.n	9000e7e4 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e7b6:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000e7b8:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e7bc:	68c3      	ldr	r3, [r0, #12]
9000e7be:	b181      	cbz	r1, 9000e7e2 <osMutexNew+0x3e>
9000e7c0:	2b4f      	cmp	r3, #79	; 0x4f
9000e7c2:	d90f      	bls.n	9000e7e4 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000e7c4:	b31e      	cbz	r6, 9000e80e <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000e7c6:	2004      	movs	r0, #4
9000e7c8:	f001 f84e 	bl	9000f868 <xQueueCreateMutexStatic>
9000e7cc:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000e7ce:	b14d      	cbz	r5, 9000e7e4 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000e7d0:	6821      	ldr	r1, [r4, #0]
9000e7d2:	4628      	mov	r0, r5
9000e7d4:	f001 fd7e 	bl	900102d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000e7d8:	b12e      	cbz	r6, 9000e7e6 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000e7da:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000e7de:	4628      	mov	r0, r5
9000e7e0:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e7e2:	b163      	cbz	r3, 9000e7fe <osMutexNew+0x5a>
  hMutex = NULL;
9000e7e4:	2500      	movs	r5, #0
}
9000e7e6:	4628      	mov	r0, r5
9000e7e8:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000e7ea:	2001      	movs	r0, #1
9000e7ec:	f001 f8ac 	bl	9000f948 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e7f0:	4605      	mov	r5, r0
9000e7f2:	2800      	cmp	r0, #0
9000e7f4:	d0f6      	beq.n	9000e7e4 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000e7f6:	4621      	mov	r1, r4
9000e7f8:	f001 fd6c 	bl	900102d4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000e7fc:	e7f3      	b.n	9000e7e6 <osMutexNew+0x42>
            if (rmtx != 0U) {
9000e7fe:	b15e      	cbz	r6, 9000e818 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000e800:	2004      	movs	r0, #4
9000e802:	f001 f8a1 	bl	9000f948 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e806:	4605      	mov	r5, r0
9000e808:	2800      	cmp	r0, #0
9000e80a:	d1e1      	bne.n	9000e7d0 <osMutexNew+0x2c>
9000e80c:	e7ea      	b.n	9000e7e4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000e80e:	2001      	movs	r0, #1
9000e810:	f001 f82a 	bl	9000f868 <xQueueCreateMutexStatic>
9000e814:	4605      	mov	r5, r0
9000e816:	e7da      	b.n	9000e7ce <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000e818:	2001      	movs	r0, #1
9000e81a:	f001 f895 	bl	9000f948 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e81e:	4605      	mov	r5, r0
9000e820:	e7d5      	b.n	9000e7ce <osMutexNew+0x2a>
9000e822:	bf00      	nop

9000e824 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000e824:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000e828:	f000 0301 	and.w	r3, r0, #1
9000e82c:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000e830:	b9a8      	cbnz	r0, 9000e85e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000e832:	b1ba      	cbz	r2, 9000e864 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000e834:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000e836:	b510      	push	{r4, lr}
9000e838:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000e83a:	b953      	cbnz	r3, 9000e852 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000e83c:	f001 fafc 	bl	9000fe38 <xQueueSemaphoreTake>
9000e840:	2801      	cmp	r0, #1
9000e842:	d00a      	beq.n	9000e85a <osMutexAcquire+0x36>
          stat = osErrorResource;
9000e844:	2c00      	cmp	r4, #0
9000e846:	bf14      	ite	ne
9000e848:	f06f 0001 	mvnne.w	r0, #1
9000e84c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000e850:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000e852:	f001 fc79 	bl	90010148 <xQueueTakeMutexRecursive>
9000e856:	2801      	cmp	r0, #1
9000e858:	d1f4      	bne.n	9000e844 <osMutexAcquire+0x20>
  stat = osOK;
9000e85a:	2000      	movs	r0, #0
}
9000e85c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e85e:	f06f 0005 	mvn.w	r0, #5
9000e862:	4770      	bx	lr
    stat = osErrorParameter;
9000e864:	f06f 0003 	mvn.w	r0, #3
}
9000e868:	4770      	bx	lr
9000e86a:	bf00      	nop

9000e86c <osMutexRelease>:
9000e86c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000e870:	b9ba      	cbnz	r2, 9000e8a2 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000e872:	b510      	push	{r4, lr}
9000e874:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000e878:	b1b4      	cbz	r4, 9000e8a8 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000e87a:	f000 0301 	and.w	r3, r0, #1
9000e87e:	b943      	cbnz	r3, 9000e892 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000e880:	461a      	mov	r2, r3
9000e882:	4619      	mov	r1, r3
9000e884:	4620      	mov	r0, r4
9000e886:	f000 fe6d 	bl	9000f564 <xQueueGenericSend>
9000e88a:	2801      	cmp	r0, #1
9000e88c:	d106      	bne.n	9000e89c <osMutexRelease+0x30>
  stat = osOK;
9000e88e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000e890:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000e892:	4620      	mov	r0, r4
9000e894:	f001 f838 	bl	9000f908 <xQueueGiveMutexRecursive>
9000e898:	2801      	cmp	r0, #1
9000e89a:	d0f8      	beq.n	9000e88e <osMutexRelease+0x22>
        stat = osErrorResource;
9000e89c:	f06f 0002 	mvn.w	r0, #2
}
9000e8a0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e8a2:	f06f 0005 	mvn.w	r0, #5
}
9000e8a6:	4770      	bx	lr
    stat = osErrorParameter;
9000e8a8:	f06f 0003 	mvn.w	r0, #3
}
9000e8ac:	bd10      	pop	{r4, pc}
9000e8ae:	bf00      	nop

9000e8b0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e8b2:	b083      	sub	sp, #12
9000e8b4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000e8b8:	b98e      	cbnz	r6, 9000e8de <osSemaphoreNew+0x2e>
9000e8ba:	4605      	mov	r5, r0
9000e8bc:	b178      	cbz	r0, 9000e8de <osSemaphoreNew+0x2e>
9000e8be:	4288      	cmp	r0, r1
9000e8c0:	460f      	mov	r7, r1
9000e8c2:	d30c      	bcc.n	9000e8de <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000e8c4:	4614      	mov	r4, r2
9000e8c6:	b182      	cbz	r2, 9000e8ea <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e8c8:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000e8cc:	b15a      	cbz	r2, 9000e8e6 <osSemaphoreNew+0x36>
9000e8ce:	2b4f      	cmp	r3, #79	; 0x4f
9000e8d0:	d905      	bls.n	9000e8de <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000e8d2:	2801      	cmp	r0, #1
9000e8d4:	d032      	beq.n	9000e93c <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000e8d6:	f000 fd9d 	bl	9000f414 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000e8da:	4605      	mov	r5, r0
9000e8dc:	b978      	cbnz	r0, 9000e8fe <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000e8de:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000e8e0:	4628      	mov	r0, r5
9000e8e2:	b003      	add	sp, #12
9000e8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e8e6:	2b00      	cmp	r3, #0
9000e8e8:	d1f9      	bne.n	9000e8de <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000e8ea:	2d01      	cmp	r5, #1
9000e8ec:	d00f      	beq.n	9000e90e <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000e8ee:	4628      	mov	r0, r5
9000e8f0:	4639      	mov	r1, r7
9000e8f2:	f000 fdf1 	bl	9000f4d8 <xQueueCreateCountingSemaphore>
9000e8f6:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000e8f8:	2d00      	cmp	r5, #0
9000e8fa:	d0f0      	beq.n	9000e8de <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000e8fc:	b104      	cbz	r4, 9000e900 <osSemaphoreNew+0x50>
          name = attr->name;
9000e8fe:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000e900:	4628      	mov	r0, r5
9000e902:	4621      	mov	r1, r4
9000e904:	f001 fce6 	bl	900102d4 <vQueueAddToRegistry>
}
9000e908:	4628      	mov	r0, r5
9000e90a:	b003      	add	sp, #12
9000e90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000e90e:	4628      	mov	r0, r5
9000e910:	2203      	movs	r2, #3
9000e912:	2100      	movs	r1, #0
9000e914:	f000 fd3c 	bl	9000f390 <xQueueGenericCreate>
9000e918:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000e91a:	2d00      	cmp	r5, #0
9000e91c:	d0df      	beq.n	9000e8de <osSemaphoreNew+0x2e>
9000e91e:	2f00      	cmp	r7, #0
9000e920:	d0ea      	beq.n	9000e8f8 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000e922:	2300      	movs	r3, #0
9000e924:	4628      	mov	r0, r5
9000e926:	461a      	mov	r2, r3
9000e928:	4619      	mov	r1, r3
9000e92a:	f000 fe1b 	bl	9000f564 <xQueueGenericSend>
9000e92e:	2801      	cmp	r0, #1
9000e930:	d0e4      	beq.n	9000e8fc <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000e932:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000e934:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000e936:	f001 fc87 	bl	90010248 <vQueueDelete>
      if (hSemaphore != NULL) {
9000e93a:	e7d1      	b.n	9000e8e0 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000e93c:	4613      	mov	r3, r2
9000e93e:	2203      	movs	r2, #3
9000e940:	4631      	mov	r1, r6
9000e942:	9200      	str	r2, [sp, #0]
9000e944:	4632      	mov	r2, r6
9000e946:	f000 fcb7 	bl	9000f2b8 <xQueueGenericCreateStatic>
9000e94a:	4605      	mov	r5, r0
9000e94c:	e7e5      	b.n	9000e91a <osSemaphoreNew+0x6a>
9000e94e:	bf00      	nop

9000e950 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000e950:	b370      	cbz	r0, 9000e9b0 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000e952:	b510      	push	{r4, lr}
9000e954:	460c      	mov	r4, r1
9000e956:	b082      	sub	sp, #8
9000e958:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000e95c:	b1c3      	cbz	r3, 9000e990 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000e95e:	bb21      	cbnz	r1, 9000e9aa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000e960:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000e962:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000e964:	f001 fc10 	bl	90010188 <xQueueReceiveFromISR>
9000e968:	2801      	cmp	r0, #1
9000e96a:	d11a      	bne.n	9000e9a2 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000e96c:	9b01      	ldr	r3, [sp, #4]
9000e96e:	b913      	cbnz	r3, 9000e976 <osSemaphoreAcquire+0x26>
  stat = osOK;
9000e970:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000e972:	b002      	add	sp, #8
9000e974:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000e976:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e97e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e982:	f3bf 8f4f 	dsb	sy
9000e986:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000e98a:	4620      	mov	r0, r4
}
9000e98c:	b002      	add	sp, #8
9000e98e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000e990:	f001 fa52 	bl	9000fe38 <xQueueSemaphoreTake>
9000e994:	2801      	cmp	r0, #1
9000e996:	d0eb      	beq.n	9000e970 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000e998:	b11c      	cbz	r4, 9000e9a2 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000e99a:	f06f 0001 	mvn.w	r0, #1
}
9000e99e:	b002      	add	sp, #8
9000e9a0:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000e9a2:	f06f 0002 	mvn.w	r0, #2
}
9000e9a6:	b002      	add	sp, #8
9000e9a8:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000e9aa:	f06f 0003 	mvn.w	r0, #3
9000e9ae:	e7e0      	b.n	9000e972 <osSemaphoreAcquire+0x22>
9000e9b0:	f06f 0003 	mvn.w	r0, #3
}
9000e9b4:	4770      	bx	lr
9000e9b6:	bf00      	nop

9000e9b8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000e9b8:	b330      	cbz	r0, 9000ea08 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000e9ba:	b510      	push	{r4, lr}
9000e9bc:	b082      	sub	sp, #8
9000e9be:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000e9c2:	b1ab      	cbz	r3, 9000e9f0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000e9c4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000e9c6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000e9c8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000e9ca:	f001 f85f 	bl	9000fa8c <xQueueGiveFromISR>
9000e9ce:	2801      	cmp	r0, #1
9000e9d0:	d117      	bne.n	9000ea02 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000e9d2:	9b01      	ldr	r3, [sp, #4]
9000e9d4:	b193      	cbz	r3, 9000e9fc <osSemaphoreRelease+0x44>
9000e9d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e9de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e9e2:	f3bf 8f4f 	dsb	sy
9000e9e6:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000e9ea:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000e9ec:	b002      	add	sp, #8
9000e9ee:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000e9f0:	461a      	mov	r2, r3
9000e9f2:	4619      	mov	r1, r3
9000e9f4:	f000 fdb6 	bl	9000f564 <xQueueGenericSend>
9000e9f8:	2801      	cmp	r0, #1
9000e9fa:	d102      	bne.n	9000ea02 <osSemaphoreRelease+0x4a>
  stat = osOK;
9000e9fc:	2000      	movs	r0, #0
}
9000e9fe:	b002      	add	sp, #8
9000ea00:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000ea02:	f06f 0002 	mvn.w	r0, #2
9000ea06:	e7fa      	b.n	9000e9fe <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000ea08:	f06f 0003 	mvn.w	r0, #3
}
9000ea0c:	4770      	bx	lr
9000ea0e:	bf00      	nop

9000ea10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ea12:	b083      	sub	sp, #12
9000ea14:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000ea18:	b987      	cbnz	r7, 9000ea3c <osMessageQueueNew+0x2c>
9000ea1a:	4605      	mov	r5, r0
9000ea1c:	b170      	cbz	r0, 9000ea3c <osMessageQueueNew+0x2c>
9000ea1e:	b169      	cbz	r1, 9000ea3c <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000ea20:	4614      	mov	r4, r2
9000ea22:	b17a      	cbz	r2, 9000ea44 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ea24:	6893      	ldr	r3, [r2, #8]
9000ea26:	b1cb      	cbz	r3, 9000ea5c <osMessageQueueNew+0x4c>
9000ea28:	68d2      	ldr	r2, [r2, #12]
9000ea2a:	2a4f      	cmp	r2, #79	; 0x4f
9000ea2c:	d906      	bls.n	9000ea3c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ea2e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ea30:	b122      	cbz	r2, 9000ea3c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ea32:	fb01 f505 	mul.w	r5, r1, r5
9000ea36:	6966      	ldr	r6, [r4, #20]
9000ea38:	42ae      	cmp	r6, r5
9000ea3a:	d21f      	bcs.n	9000ea7c <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000ea3c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000ea3e:	4628      	mov	r0, r5
9000ea40:	b003      	add	sp, #12
9000ea42:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000ea44:	f000 fca4 	bl	9000f390 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000ea48:	4605      	mov	r5, r0
9000ea4a:	2800      	cmp	r0, #0
9000ea4c:	d0f6      	beq.n	9000ea3c <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000ea4e:	4628      	mov	r0, r5
9000ea50:	4621      	mov	r1, r4
9000ea52:	f001 fc3f 	bl	900102d4 <vQueueAddToRegistry>
}
9000ea56:	4628      	mov	r0, r5
9000ea58:	b003      	add	sp, #12
9000ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000ea5c:	68d3      	ldr	r3, [r2, #12]
9000ea5e:	2b00      	cmp	r3, #0
9000ea60:	d1ec      	bne.n	9000ea3c <osMessageQueueNew+0x2c>
9000ea62:	6913      	ldr	r3, [r2, #16]
9000ea64:	2b00      	cmp	r3, #0
9000ea66:	d1e9      	bne.n	9000ea3c <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000ea68:	6952      	ldr	r2, [r2, #20]
9000ea6a:	2a00      	cmp	r2, #0
9000ea6c:	d1e6      	bne.n	9000ea3c <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000ea6e:	f000 fc8f 	bl	9000f390 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000ea72:	4605      	mov	r5, r0
9000ea74:	2800      	cmp	r0, #0
9000ea76:	d0e1      	beq.n	9000ea3c <osMessageQueueNew+0x2c>
        name = attr->name;
9000ea78:	6824      	ldr	r4, [r4, #0]
9000ea7a:	e7e8      	b.n	9000ea4e <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000ea7c:	9700      	str	r7, [sp, #0]
9000ea7e:	f000 fc1b 	bl	9000f2b8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000ea82:	4605      	mov	r5, r0
9000ea84:	2800      	cmp	r0, #0
9000ea86:	d1f7      	bne.n	9000ea78 <osMessageQueueNew+0x68>
9000ea88:	e7d8      	b.n	9000ea3c <osMessageQueueNew+0x2c>
9000ea8a:	bf00      	nop

9000ea8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000ea8c:	b530      	push	{r4, r5, lr}
9000ea8e:	461c      	mov	r4, r3
9000ea90:	b083      	sub	sp, #12
9000ea92:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000ea96:	b30b      	cbz	r3, 9000eadc <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000ea98:	3c00      	subs	r4, #0
9000ea9a:	bf18      	it	ne
9000ea9c:	2401      	movne	r4, #1
9000ea9e:	2900      	cmp	r1, #0
9000eaa0:	bf08      	it	eq
9000eaa2:	f044 0401 	orreq.w	r4, r4, #1
9000eaa6:	bb7c      	cbnz	r4, 9000eb08 <osMessageQueuePut+0x7c>
9000eaa8:	fab0 f480 	clz	r4, r0
9000eaac:	0964      	lsrs	r4, r4, #5
9000eaae:	b358      	cbz	r0, 9000eb08 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000eab0:	4623      	mov	r3, r4
9000eab2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000eab4:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000eab6:	f000 ff7f 	bl	9000f9b8 <xQueueGenericSendFromISR>
9000eaba:	2801      	cmp	r0, #1
9000eabc:	d120      	bne.n	9000eb00 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000eabe:	9b01      	ldr	r3, [sp, #4]
9000eac0:	b1db      	cbz	r3, 9000eafa <osMessageQueuePut+0x6e>
9000eac2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eaca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eace:	f3bf 8f4f 	dsb	sy
9000ead2:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ead6:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000ead8:	b003      	add	sp, #12
9000eada:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000eadc:	b1a0      	cbz	r0, 9000eb08 <osMessageQueuePut+0x7c>
9000eade:	fab1 f381 	clz	r3, r1
9000eae2:	095b      	lsrs	r3, r3, #5
9000eae4:	b181      	cbz	r1, 9000eb08 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000eae6:	4622      	mov	r2, r4
9000eae8:	f000 fd3c 	bl	9000f564 <xQueueGenericSend>
9000eaec:	2801      	cmp	r0, #1
9000eaee:	d004      	beq.n	9000eafa <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000eaf0:	b134      	cbz	r4, 9000eb00 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000eaf2:	f06f 0001 	mvn.w	r0, #1
}
9000eaf6:	b003      	add	sp, #12
9000eaf8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000eafa:	2000      	movs	r0, #0
}
9000eafc:	b003      	add	sp, #12
9000eafe:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000eb00:	f06f 0002 	mvn.w	r0, #2
}
9000eb04:	b003      	add	sp, #12
9000eb06:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000eb08:	f06f 0003 	mvn.w	r0, #3
9000eb0c:	e7e4      	b.n	9000ead8 <osMessageQueuePut+0x4c>
9000eb0e:	bf00      	nop

9000eb10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000eb10:	b530      	push	{r4, r5, lr}
9000eb12:	461c      	mov	r4, r3
9000eb14:	b083      	sub	sp, #12
9000eb16:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000eb1a:	b303      	cbz	r3, 9000eb5e <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000eb1c:	3c00      	subs	r4, #0
9000eb1e:	bf18      	it	ne
9000eb20:	2401      	movne	r4, #1
9000eb22:	2900      	cmp	r1, #0
9000eb24:	bf08      	it	eq
9000eb26:	f044 0401 	orreq.w	r4, r4, #1
9000eb2a:	bb5c      	cbnz	r4, 9000eb84 <osMessageQueueGet+0x74>
9000eb2c:	fab0 f480 	clz	r4, r0
9000eb30:	0964      	lsrs	r4, r4, #5
9000eb32:	b338      	cbz	r0, 9000eb84 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000eb34:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000eb36:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000eb38:	f001 fb26 	bl	90010188 <xQueueReceiveFromISR>
9000eb3c:	2801      	cmp	r0, #1
9000eb3e:	d11d      	bne.n	9000eb7c <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000eb40:	9b01      	ldr	r3, [sp, #4]
9000eb42:	b1c3      	cbz	r3, 9000eb76 <osMessageQueueGet+0x66>
9000eb44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eb48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eb4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eb50:	f3bf 8f4f 	dsb	sy
9000eb54:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000eb58:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000eb5a:	b003      	add	sp, #12
9000eb5c:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000eb5e:	b188      	cbz	r0, 9000eb84 <osMessageQueueGet+0x74>
9000eb60:	b181      	cbz	r1, 9000eb84 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000eb62:	4622      	mov	r2, r4
9000eb64:	f000 ffea 	bl	9000fb3c <xQueueReceive>
9000eb68:	2801      	cmp	r0, #1
9000eb6a:	d004      	beq.n	9000eb76 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000eb6c:	b134      	cbz	r4, 9000eb7c <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000eb6e:	f06f 0001 	mvn.w	r0, #1
}
9000eb72:	b003      	add	sp, #12
9000eb74:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000eb76:	2000      	movs	r0, #0
}
9000eb78:	b003      	add	sp, #12
9000eb7a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000eb7c:	f06f 0002 	mvn.w	r0, #2
}
9000eb80:	b003      	add	sp, #12
9000eb82:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000eb84:	f06f 0003 	mvn.w	r0, #3
9000eb88:	e7e7      	b.n	9000eb5a <osMessageQueueGet+0x4a>
9000eb8a:	bf00      	nop

9000eb8c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000eb8c:	4b04      	ldr	r3, [pc, #16]	; (9000eba0 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000eb8e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000eb90:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000eb92:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000eb94:	4c03      	ldr	r4, [pc, #12]	; (9000eba4 <vApplicationGetIdleTaskMemory+0x18>)
9000eb96:	600c      	str	r4, [r1, #0]
}
9000eb98:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000eb9c:	6013      	str	r3, [r2, #0]
}
9000eb9e:	4770      	bx	lr
9000eba0:	2400df54 	.word	0x2400df54
9000eba4:	2400dd54 	.word	0x2400dd54

9000eba8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000eba8:	4b05      	ldr	r3, [pc, #20]	; (9000ebc0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000ebaa:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000ebac:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000ebae:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000ebb2:	4c04      	ldr	r4, [pc, #16]	; (9000ebc4 <vApplicationGetTimerTaskMemory+0x1c>)
9000ebb4:	600c      	str	r4, [r1, #0]
}
9000ebb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000ebba:	6013      	str	r3, [r2, #0]
}
9000ebbc:	4770      	bx	lr
9000ebbe:	bf00      	nop
9000ebc0:	2400e3b8 	.word	0x2400e3b8
9000ebc4:	2400dfb8 	.word	0x2400dfb8

9000ebc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000ebc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ebcc:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000ebce:	f002 f85d 	bl	90010c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000ebd2:	4a54      	ldr	r2, [pc, #336]	; (9000ed24 <pvPortMalloc+0x15c>)
9000ebd4:	6816      	ldr	r6, [r2, #0]
9000ebd6:	2e00      	cmp	r6, #0
9000ebd8:	d06f      	beq.n	9000ecba <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000ebda:	4b53      	ldr	r3, [pc, #332]	; (9000ed28 <pvPortMalloc+0x160>)
9000ebdc:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000ebde:	423d      	tst	r5, r7
9000ebe0:	d12e      	bne.n	9000ec40 <pvPortMalloc+0x78>
9000ebe2:	b36d      	cbz	r5, 9000ec40 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000ebe4:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000ebe8:	076d      	lsls	r5, r5, #29
9000ebea:	d002      	beq.n	9000ebf2 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000ebec:	f024 0407 	bic.w	r4, r4, #7
9000ebf0:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000ebf2:	b32c      	cbz	r4, 9000ec40 <pvPortMalloc+0x78>
9000ebf4:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000ed40 <pvPortMalloc+0x178>
9000ebf8:	f8dc 5000 	ldr.w	r5, [ip]
9000ebfc:	42a5      	cmp	r5, r4
9000ebfe:	d31f      	bcc.n	9000ec40 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000ec00:	484a      	ldr	r0, [pc, #296]	; (9000ed2c <pvPortMalloc+0x164>)
9000ec02:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000ec04:	e003      	b.n	9000ec0e <pvPortMalloc+0x46>
9000ec06:	681a      	ldr	r2, [r3, #0]
9000ec08:	b122      	cbz	r2, 9000ec14 <pvPortMalloc+0x4c>
9000ec0a:	4618      	mov	r0, r3
9000ec0c:	4613      	mov	r3, r2
9000ec0e:	6859      	ldr	r1, [r3, #4]
9000ec10:	42a1      	cmp	r1, r4
9000ec12:	d3f8      	bcc.n	9000ec06 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000ec14:	42b3      	cmp	r3, r6
9000ec16:	d013      	beq.n	9000ec40 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000ec18:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ec1a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000ec1c:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ec20:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000ec22:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ec26:	d929      	bls.n	9000ec7c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000ec28:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000ec2a:	0748      	lsls	r0, r1, #29
9000ec2c:	d00f      	beq.n	9000ec4e <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec32:	f383 8811 	msr	BASEPRI, r3
9000ec36:	f3bf 8f6f 	isb	sy
9000ec3a:	f3bf 8f4f 	dsb	sy
9000ec3e:	e7fe      	b.n	9000ec3e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000ec40:	f04f 0800 	mov.w	r8, #0
9000ec44:	f002 f82a 	bl	90010c9c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000ec48:	4640      	mov	r0, r8
9000ec4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000ec4e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ec50:	4a36      	ldr	r2, [pc, #216]	; (9000ed2c <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000ec52:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ec54:	4614      	mov	r4, r2
9000ec56:	6812      	ldr	r2, [r2, #0]
9000ec58:	4291      	cmp	r1, r2
9000ec5a:	d8fb      	bhi.n	9000ec54 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000ec5c:	6860      	ldr	r0, [r4, #4]
9000ec5e:	eb04 0e00 	add.w	lr, r4, r0
9000ec62:	4571      	cmp	r1, lr
9000ec64:	d04a      	beq.n	9000ecfc <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ec66:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ec6a:	eb01 000e 	add.w	r0, r1, lr
9000ec6e:	4282      	cmp	r2, r0
9000ec70:	d050      	beq.n	9000ed14 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000ec72:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ec74:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000ec76:	bf18      	it	ne
9000ec78:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ec7a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ec7c:	4a2c      	ldr	r2, [pc, #176]	; (9000ed30 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ec7e:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000ec80:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ec82:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ec84:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ec88:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000ec8a:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000ec8e:	bf38      	it	cc
9000ec90:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000ec92:	4a28      	ldr	r2, [pc, #160]	; (9000ed34 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000ec94:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000ec98:	6813      	ldr	r3, [r2, #0]
9000ec9a:	3301      	adds	r3, #1
9000ec9c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000ec9e:	f001 fffd 	bl	90010c9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000eca2:	f018 0f07 	tst.w	r8, #7
9000eca6:	d0cf      	beq.n	9000ec48 <pvPortMalloc+0x80>
9000eca8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ecac:	f383 8811 	msr	BASEPRI, r3
9000ecb0:	f3bf 8f6f 	isb	sy
9000ecb4:	f3bf 8f4f 	dsb	sy
9000ecb8:	e7fe      	b.n	9000ecb8 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000ecba:	4b1f      	ldr	r3, [pc, #124]	; (9000ed38 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000ecbc:	075e      	lsls	r6, r3, #29
9000ecbe:	d117      	bne.n	9000ecf0 <pvPortMalloc+0x128>
9000ecc0:	4e1e      	ldr	r6, [pc, #120]	; (9000ed3c <pvPortMalloc+0x174>)
9000ecc2:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000ecc4:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ecc6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ecca:	4818      	ldr	r0, [pc, #96]	; (9000ed2c <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000eccc:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000ecd0:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000ecd2:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ecd4:	4a16      	ldr	r2, [pc, #88]	; (9000ed30 <pvPortMalloc+0x168>)
9000ecd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ecd8:	4a19      	ldr	r2, [pc, #100]	; (9000ed40 <pvPortMalloc+0x178>)
9000ecda:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ecdc:	4a12      	ldr	r2, [pc, #72]	; (9000ed28 <pvPortMalloc+0x160>)
9000ecde:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000ece0:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ece2:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000ece6:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000ecea:	e9c1 6300 	strd	r6, r3, [r1]
}
9000ecee:	e776      	b.n	9000ebde <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000ecf0:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000ecf2:	4e12      	ldr	r6, [pc, #72]	; (9000ed3c <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000ecf4:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ecf8:	460b      	mov	r3, r1
9000ecfa:	e7e3      	b.n	9000ecc4 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ecfc:	6849      	ldr	r1, [r1, #4]
9000ecfe:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed02:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ed06:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed0a:	428a      	cmp	r2, r1
9000ed0c:	d001      	beq.n	9000ed12 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed0e:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000ed10:	e7b3      	b.n	9000ec7a <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed12:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000ed14:	42b2      	cmp	r2, r6
9000ed16:	d0ac      	beq.n	9000ec72 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000ed18:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed1a:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000ed1c:	4470      	add	r0, lr
9000ed1e:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed20:	e7a7      	b.n	9000ec72 <pvPortMalloc+0xaa>
9000ed22:	bf00      	nop
9000ed24:	2400e418 	.word	0x2400e418
9000ed28:	24026abc 	.word	0x24026abc
9000ed2c:	24026ad0 	.word	0x24026ad0
9000ed30:	24026ac4 	.word	0x24026ac4
9000ed34:	24026ac8 	.word	0x24026ac8
9000ed38:	2400e41c 	.word	0x2400e41c
9000ed3c:	24026abc 	.word	0x24026abc
9000ed40:	24026ac0 	.word	0x24026ac0

9000ed44 <vPortFree>:
	if( pv != NULL )
9000ed44:	b1d0      	cbz	r0, 9000ed7c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000ed46:	4a2c      	ldr	r2, [pc, #176]	; (9000edf8 <vPortFree+0xb4>)
9000ed48:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000ed4c:	6812      	ldr	r2, [r2, #0]
9000ed4e:	4213      	tst	r3, r2
9000ed50:	d00b      	beq.n	9000ed6a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000ed52:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000ed56:	b191      	cbz	r1, 9000ed7e <vPortFree+0x3a>
9000ed58:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ed5c:	f383 8811 	msr	BASEPRI, r3
9000ed60:	f3bf 8f6f 	isb	sy
9000ed64:	f3bf 8f4f 	dsb	sy
9000ed68:	e7fe      	b.n	9000ed68 <vPortFree+0x24>
9000ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ed6e:	f383 8811 	msr	BASEPRI, r3
9000ed72:	f3bf 8f6f 	isb	sy
9000ed76:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000ed7a:	e7fe      	b.n	9000ed7a <vPortFree+0x36>
9000ed7c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ed7e:	ea23 0302 	bic.w	r3, r3, r2
{
9000ed82:	b530      	push	{r4, r5, lr}
9000ed84:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ed86:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000ed8a:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000ed8e:	4d1b      	ldr	r5, [pc, #108]	; (9000edfc <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ed90:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000ed92:	f001 ff7b 	bl	90010c8c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000ed96:	9801      	ldr	r0, [sp, #4]
9000ed98:	682a      	ldr	r2, [r5, #0]
9000ed9a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ed9e:	4b18      	ldr	r3, [pc, #96]	; (9000ee00 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000eda0:	440a      	add	r2, r1
9000eda2:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000eda4:	461a      	mov	r2, r3
9000eda6:	681b      	ldr	r3, [r3, #0]
9000eda8:	429c      	cmp	r4, r3
9000edaa:	d8fb      	bhi.n	9000eda4 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000edac:	6850      	ldr	r0, [r2, #4]
9000edae:	eb02 0c00 	add.w	ip, r2, r0
9000edb2:	4564      	cmp	r4, ip
9000edb4:	d00f      	beq.n	9000edd6 <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000edb6:	1860      	adds	r0, r4, r1
9000edb8:	4283      	cmp	r3, r0
9000edba:	d014      	beq.n	9000ede6 <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000edbc:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000edbe:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000edc0:	bf18      	it	ne
9000edc2:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000edc4:	4a0f      	ldr	r2, [pc, #60]	; (9000ee04 <vPortFree+0xc0>)
9000edc6:	6813      	ldr	r3, [r2, #0]
9000edc8:	3301      	adds	r3, #1
9000edca:	6013      	str	r3, [r2, #0]
}
9000edcc:	b003      	add	sp, #12
9000edce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000edd2:	f001 bf63 	b.w	90010c9c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000edd6:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000edd8:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000edda:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000eddc:	4283      	cmp	r3, r0
9000edde:	d001      	beq.n	9000ede4 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ede0:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000ede2:	e7ef      	b.n	9000edc4 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ede4:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000ede6:	4808      	ldr	r0, [pc, #32]	; (9000ee08 <vPortFree+0xc4>)
9000ede8:	6800      	ldr	r0, [r0, #0]
9000edea:	4283      	cmp	r3, r0
9000edec:	d0e6      	beq.n	9000edbc <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000edee:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000edf2:	4401      	add	r1, r0
9000edf4:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000edf6:	e7e1      	b.n	9000edbc <vPortFree+0x78>
9000edf8:	24026abc 	.word	0x24026abc
9000edfc:	24026ac0 	.word	0x24026ac0
9000ee00:	24026ad0 	.word	0x24026ad0
9000ee04:	24026acc 	.word	0x24026acc
9000ee08:	2400e418 	.word	0x2400e418

9000ee0c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ee0c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000ee10:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000ee14:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000ee16:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000ee18:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ee1a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ee1c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000ee20:	4770      	bx	lr
9000ee22:	bf00      	nop

9000ee24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000ee24:	2300      	movs	r3, #0
9000ee26:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000ee28:	4770      	bx	lr
9000ee2a:	bf00      	nop

9000ee2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000ee2c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000ee2e:	6802      	ldr	r2, [r0, #0]
{
9000ee30:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000ee32:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000ee34:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000ee36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000ee38:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000ee3a:	689c      	ldr	r4, [r3, #8]
9000ee3c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000ee3e:	6099      	str	r1, [r3, #8]
}
9000ee40:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000ee44:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000ee46:	6002      	str	r2, [r0, #0]
}
9000ee48:	4770      	bx	lr
9000ee4a:	bf00      	nop

9000ee4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000ee4c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000ee4e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000ee50:	1c6b      	adds	r3, r5, #1
9000ee52:	d010      	beq.n	9000ee76 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000ee54:	f100 0308 	add.w	r3, r0, #8
9000ee58:	461c      	mov	r4, r3
9000ee5a:	685b      	ldr	r3, [r3, #4]
9000ee5c:	681a      	ldr	r2, [r3, #0]
9000ee5e:	42aa      	cmp	r2, r5
9000ee60:	d9fa      	bls.n	9000ee58 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000ee62:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000ee64:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000ee66:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000ee68:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000ee6a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000ee6c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000ee6e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000ee70:	6002      	str	r2, [r0, #0]
}
9000ee72:	bc30      	pop	{r4, r5}
9000ee74:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000ee76:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000ee78:	6863      	ldr	r3, [r4, #4]
9000ee7a:	e7f2      	b.n	9000ee62 <vListInsert+0x16>

9000ee7c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000ee7c:	6903      	ldr	r3, [r0, #16]
{
9000ee7e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000ee80:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000ee82:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000ee86:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000ee88:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000ee8c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000ee8e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000ee90:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000ee94:	bf08      	it	eq
9000ee96:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000ee98:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000ee9a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000ee9c:	3a01      	subs	r2, #1
9000ee9e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000eea0:	6818      	ldr	r0, [r3, #0]
}
9000eea2:	4770      	bx	lr

9000eea4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000eea4:	4808      	ldr	r0, [pc, #32]	; (9000eec8 <prvPortStartFirstTask+0x24>)
9000eea6:	6800      	ldr	r0, [r0, #0]
9000eea8:	6800      	ldr	r0, [r0, #0]
9000eeaa:	f380 8808 	msr	MSP, r0
9000eeae:	f04f 0000 	mov.w	r0, #0
9000eeb2:	f380 8814 	msr	CONTROL, r0
9000eeb6:	b662      	cpsie	i
9000eeb8:	b661      	cpsie	f
9000eeba:	f3bf 8f4f 	dsb	sy
9000eebe:	f3bf 8f6f 	isb	sy
9000eec2:	df00      	svc	0
9000eec4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000eec6:	0000      	.short	0x0000
9000eec8:	e000ed08 	.word	0xe000ed08

9000eecc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000eecc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000eedc <vPortEnableVFP+0x10>
9000eed0:	6801      	ldr	r1, [r0, #0]
9000eed2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000eed6:	6001      	str	r1, [r0, #0]
9000eed8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000eeda:	0000      	.short	0x0000
9000eedc:	e000ed88 	.word	0xe000ed88

9000eee0 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000eee0:	4b0e      	ldr	r3, [pc, #56]	; (9000ef1c <prvTaskExitError+0x3c>)
{
9000eee2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000eee4:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000eee6:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000eee8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000eeea:	3301      	adds	r3, #1
9000eeec:	d008      	beq.n	9000ef00 <prvTaskExitError+0x20>
9000eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eef2:	f383 8811 	msr	BASEPRI, r3
9000eef6:	f3bf 8f6f 	isb	sy
9000eefa:	f3bf 8f4f 	dsb	sy
9000eefe:	e7fe      	b.n	9000eefe <prvTaskExitError+0x1e>
9000ef00:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef04:	f383 8811 	msr	BASEPRI, r3
9000ef08:	f3bf 8f6f 	isb	sy
9000ef0c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000ef10:	9b01      	ldr	r3, [sp, #4]
9000ef12:	2b00      	cmp	r3, #0
9000ef14:	d0fc      	beq.n	9000ef10 <prvTaskExitError+0x30>
}
9000ef16:	b002      	add	sp, #8
9000ef18:	4770      	bx	lr
9000ef1a:	bf00      	nop
9000ef1c:	24000064 	.word	0x24000064

9000ef20 <pxPortInitialiseStack>:
{
9000ef20:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000ef22:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000ef26:	4809      	ldr	r0, [pc, #36]	; (9000ef4c <pxPortInitialiseStack+0x2c>)
{
9000ef28:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000ef2a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000ef2e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000ef32:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000ef36:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000ef3a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000ef3e:	f06f 0102 	mvn.w	r1, #2
}
9000ef42:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000ef46:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000ef4a:	4770      	bx	lr
9000ef4c:	9000eee1 	.word	0x9000eee1

9000ef50 <SVC_Handler>:
	__asm volatile (
9000ef50:	4b07      	ldr	r3, [pc, #28]	; (9000ef70 <pxCurrentTCBConst2>)
9000ef52:	6819      	ldr	r1, [r3, #0]
9000ef54:	6808      	ldr	r0, [r1, #0]
9000ef56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ef5a:	f380 8809 	msr	PSP, r0
9000ef5e:	f3bf 8f6f 	isb	sy
9000ef62:	f04f 0000 	mov.w	r0, #0
9000ef66:	f380 8811 	msr	BASEPRI, r0
9000ef6a:	4770      	bx	lr
9000ef6c:	f3af 8000 	nop.w

9000ef70 <pxCurrentTCBConst2>:
9000ef70:	24026b20 	.word	0x24026b20

9000ef74 <vPortEnterCritical>:
9000ef74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef78:	f383 8811 	msr	BASEPRI, r3
9000ef7c:	f3bf 8f6f 	isb	sy
9000ef80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000ef84:	4a0b      	ldr	r2, [pc, #44]	; (9000efb4 <vPortEnterCritical+0x40>)
9000ef86:	6813      	ldr	r3, [r2, #0]
9000ef88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000ef8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000ef8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000ef8e:	d000      	beq.n	9000ef92 <vPortEnterCritical+0x1e>
}
9000ef90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000ef92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ef96:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000ef9a:	b2db      	uxtb	r3, r3
9000ef9c:	2b00      	cmp	r3, #0
9000ef9e:	d0f7      	beq.n	9000ef90 <vPortEnterCritical+0x1c>
9000efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000efa4:	f383 8811 	msr	BASEPRI, r3
9000efa8:	f3bf 8f6f 	isb	sy
9000efac:	f3bf 8f4f 	dsb	sy
9000efb0:	e7fe      	b.n	9000efb0 <vPortEnterCritical+0x3c>
9000efb2:	bf00      	nop
9000efb4:	24000064 	.word	0x24000064

9000efb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000efb8:	4a08      	ldr	r2, [pc, #32]	; (9000efdc <vPortExitCritical+0x24>)
9000efba:	6813      	ldr	r3, [r2, #0]
9000efbc:	b943      	cbnz	r3, 9000efd0 <vPortExitCritical+0x18>
9000efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
9000efc2:	f383 8811 	msr	BASEPRI, r3
9000efc6:	f3bf 8f6f 	isb	sy
9000efca:	f3bf 8f4f 	dsb	sy
9000efce:	e7fe      	b.n	9000efce <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000efd0:	3b01      	subs	r3, #1
9000efd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000efd4:	b90b      	cbnz	r3, 9000efda <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000efd6:	f383 8811 	msr	BASEPRI, r3
}
9000efda:	4770      	bx	lr
9000efdc:	24000064 	.word	0x24000064

9000efe0 <PendSV_Handler>:
	__asm volatile
9000efe0:	f3ef 8009 	mrs	r0, PSP
9000efe4:	f3bf 8f6f 	isb	sy
9000efe8:	4b15      	ldr	r3, [pc, #84]	; (9000f040 <pxCurrentTCBConst>)
9000efea:	681a      	ldr	r2, [r3, #0]
9000efec:	f01e 0f10 	tst.w	lr, #16
9000eff0:	bf08      	it	eq
9000eff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000eff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000effa:	6010      	str	r0, [r2, #0]
9000effc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000f000:	f04f 0050 	mov.w	r0, #80	; 0x50
9000f004:	f380 8811 	msr	BASEPRI, r0
9000f008:	f3bf 8f4f 	dsb	sy
9000f00c:	f3bf 8f6f 	isb	sy
9000f010:	f001 fe80 	bl	90010d14 <vTaskSwitchContext>
9000f014:	f04f 0000 	mov.w	r0, #0
9000f018:	f380 8811 	msr	BASEPRI, r0
9000f01c:	bc09      	pop	{r0, r3}
9000f01e:	6819      	ldr	r1, [r3, #0]
9000f020:	6808      	ldr	r0, [r1, #0]
9000f022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f026:	f01e 0f10 	tst.w	lr, #16
9000f02a:	bf08      	it	eq
9000f02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000f030:	f380 8809 	msr	PSP, r0
9000f034:	f3bf 8f6f 	isb	sy
9000f038:	4770      	bx	lr
9000f03a:	bf00      	nop
9000f03c:	f3af 8000 	nop.w

9000f040 <pxCurrentTCBConst>:
9000f040:	24026b20 	.word	0x24026b20

9000f044 <xPortSysTickHandler>:
{
9000f044:	b508      	push	{r3, lr}
	__asm volatile
9000f046:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f04a:	f383 8811 	msr	BASEPRI, r3
9000f04e:	f3bf 8f6f 	isb	sy
9000f052:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000f056:	f001 fe37 	bl	90010cc8 <xTaskIncrementTick>
9000f05a:	b128      	cbz	r0, 9000f068 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000f05c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f064:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000f068:	2300      	movs	r3, #0
9000f06a:	f383 8811 	msr	BASEPRI, r3
}
9000f06e:	bd08      	pop	{r3, pc}

9000f070 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f070:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000f074:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f076:	4806      	ldr	r0, [pc, #24]	; (9000f090 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f078:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f07a:	4906      	ldr	r1, [pc, #24]	; (9000f094 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000f07c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f07e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f080:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f082:	fba1 1303 	umull	r1, r3, r1, r3
9000f086:	099b      	lsrs	r3, r3, #6
9000f088:	3b01      	subs	r3, #1
9000f08a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f08c:	6110      	str	r0, [r2, #16]
}
9000f08e:	4770      	bx	lr
9000f090:	24000054 	.word	0x24000054
9000f094:	10624dd3 	.word	0x10624dd3

9000f098 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f098:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f09c:	4a48      	ldr	r2, [pc, #288]	; (9000f1c0 <xPortStartScheduler+0x128>)
9000f09e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000f0a2:	4291      	cmp	r1, r2
9000f0a4:	d041      	beq.n	9000f12a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f0a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000f0aa:	4b46      	ldr	r3, [pc, #280]	; (9000f1c4 <xPortStartScheduler+0x12c>)
9000f0ac:	429a      	cmp	r2, r3
9000f0ae:	d033      	beq.n	9000f118 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f0b0:	4b45      	ldr	r3, [pc, #276]	; (9000f1c8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f0b2:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f0b4:	4945      	ldr	r1, [pc, #276]	; (9000f1cc <xPortStartScheduler+0x134>)
{
9000f0b6:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f0b8:	781a      	ldrb	r2, [r3, #0]
{
9000f0ba:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f0bc:	4c44      	ldr	r4, [pc, #272]	; (9000f1d0 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f0be:	b2d2      	uxtb	r2, r2
9000f0c0:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f0c2:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f0c4:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f0c6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f0c8:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f0ca:	b2db      	uxtb	r3, r3
9000f0cc:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f0d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f0d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f0d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f0dc:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f0de:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f0e0:	d511      	bpl.n	9000f106 <xPortStartScheduler+0x6e>
9000f0e2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f0e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000f0e8:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f0ea:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f0ec:	005b      	lsls	r3, r3, #1
9000f0ee:	b2db      	uxtb	r3, r3
9000f0f0:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f0f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000f0f8:	0609      	lsls	r1, r1, #24
9000f0fa:	d4f3      	bmi.n	9000f0e4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000f0fc:	2803      	cmp	r0, #3
9000f0fe:	6020      	str	r0, [r4, #0]
9000f100:	f88d 3007 	strb.w	r3, [sp, #7]
9000f104:	d01a      	beq.n	9000f13c <xPortStartScheduler+0xa4>
	__asm volatile
9000f106:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f10a:	f383 8811 	msr	BASEPRI, r3
9000f10e:	f3bf 8f6f 	isb	sy
9000f112:	f3bf 8f4f 	dsb	sy
9000f116:	e7fe      	b.n	9000f116 <xPortStartScheduler+0x7e>
9000f118:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f11c:	f383 8811 	msr	BASEPRI, r3
9000f120:	f3bf 8f6f 	isb	sy
9000f124:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f128:	e7fe      	b.n	9000f128 <xPortStartScheduler+0x90>
9000f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f12e:	f383 8811 	msr	BASEPRI, r3
9000f132:	f3bf 8f6f 	isb	sy
9000f136:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f13a:	e7fe      	b.n	9000f13a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f13c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f13e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f142:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f146:	4a20      	ldr	r2, [pc, #128]	; (9000f1c8 <xPortStartScheduler+0x130>)
9000f148:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000f14a:	4e22      	ldr	r6, [pc, #136]	; (9000f1d4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f14c:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000f14e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f150:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f152:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000f15a:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000f15e:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f162:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000f166:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000f16a:	f7ff ff81 	bl	9000f070 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000f16e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000f170:	f7ff feac 	bl	9000eecc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000f174:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000f178:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000f17c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000f180:	f7ff fe90 	bl	9000eea4 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000f184:	f001 fdc6 	bl	90010d14 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000f188:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000f18a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000f18c:	3301      	adds	r3, #1
9000f18e:	d008      	beq.n	9000f1a2 <xPortStartScheduler+0x10a>
9000f190:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f194:	f383 8811 	msr	BASEPRI, r3
9000f198:	f3bf 8f6f 	isb	sy
9000f19c:	f3bf 8f4f 	dsb	sy
9000f1a0:	e7fe      	b.n	9000f1a0 <xPortStartScheduler+0x108>
9000f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f1a6:	f383 8811 	msr	BASEPRI, r3
9000f1aa:	f3bf 8f6f 	isb	sy
9000f1ae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f1b2:	9b03      	ldr	r3, [sp, #12]
9000f1b4:	2b00      	cmp	r3, #0
9000f1b6:	d0fc      	beq.n	9000f1b2 <xPortStartScheduler+0x11a>
}
9000f1b8:	2000      	movs	r0, #0
9000f1ba:	b004      	add	sp, #16
9000f1bc:	bd70      	pop	{r4, r5, r6, pc}
9000f1be:	bf00      	nop
9000f1c0:	410fc271 	.word	0x410fc271
9000f1c4:	410fc270 	.word	0x410fc270
9000f1c8:	e000e400 	.word	0xe000e400
9000f1cc:	24026ad8 	.word	0x24026ad8
9000f1d0:	24026adc 	.word	0x24026adc
9000f1d4:	24000064 	.word	0x24000064

9000f1d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000f1d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000f1dc:	2b0f      	cmp	r3, #15
9000f1de:	d90e      	bls.n	9000f1fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f1e0:	4911      	ldr	r1, [pc, #68]	; (9000f228 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f1e2:	4a12      	ldr	r2, [pc, #72]	; (9000f22c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f1e4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f1e6:	7812      	ldrb	r2, [r2, #0]
9000f1e8:	429a      	cmp	r2, r3
9000f1ea:	d908      	bls.n	9000f1fe <vPortValidateInterruptPriority+0x26>
9000f1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f1f0:	f383 8811 	msr	BASEPRI, r3
9000f1f4:	f3bf 8f6f 	isb	sy
9000f1f8:	f3bf 8f4f 	dsb	sy
9000f1fc:	e7fe      	b.n	9000f1fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000f1fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f202:	4a0b      	ldr	r2, [pc, #44]	; (9000f230 <vPortValidateInterruptPriority+0x58>)
9000f204:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000f208:	6812      	ldr	r2, [r2, #0]
9000f20a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000f20e:	4293      	cmp	r3, r2
9000f210:	d908      	bls.n	9000f224 <vPortValidateInterruptPriority+0x4c>
9000f212:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f216:	f383 8811 	msr	BASEPRI, r3
9000f21a:	f3bf 8f6f 	isb	sy
9000f21e:	f3bf 8f4f 	dsb	sy
9000f222:	e7fe      	b.n	9000f222 <vPortValidateInterruptPriority+0x4a>
	}
9000f224:	4770      	bx	lr
9000f226:	bf00      	nop
9000f228:	e000e3f0 	.word	0xe000e3f0
9000f22c:	24026ad8 	.word	0x24026ad8
9000f230:	24026adc 	.word	0x24026adc

9000f234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000f234:	b570      	push	{r4, r5, r6, lr}
9000f236:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f238:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000f23a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f23c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f23e:	b92a      	cbnz	r2, 9000f24c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f240:	6805      	ldr	r5, [r0, #0]
9000f242:	b365      	cbz	r5, 9000f29e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f244:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f246:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f248:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000f24a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000f24c:	b97d      	cbnz	r5, 9000f26e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f24e:	6840      	ldr	r0, [r0, #4]
9000f250:	f018 fb15 	bl	9002787e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f254:	6863      	ldr	r3, [r4, #4]
9000f256:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f258:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f25a:	68a2      	ldr	r2, [r4, #8]
9000f25c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f25e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f260:	d319      	bcc.n	9000f296 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f262:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f264:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f266:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f268:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f26a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f26c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000f26e:	68c0      	ldr	r0, [r0, #12]
9000f270:	f018 fb05 	bl	9002787e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f274:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f276:	68e3      	ldr	r3, [r4, #12]
9000f278:	4251      	negs	r1, r2
9000f27a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f27c:	6822      	ldr	r2, [r4, #0]
9000f27e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f280:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f282:	d202      	bcs.n	9000f28a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000f284:	68a3      	ldr	r3, [r4, #8]
9000f286:	440b      	add	r3, r1
9000f288:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000f28a:	2d02      	cmp	r5, #2
9000f28c:	d00d      	beq.n	9000f2aa <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f28e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f290:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f292:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f294:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f296:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f298:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f29a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f29c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f29e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f2a0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f2a2:	f001 ff1f 	bl	900110e4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000f2a6:	60a5      	str	r5, [r4, #8]
9000f2a8:	e7ce      	b.n	9000f248 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f2aa:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000f2ac:	f04f 0000 	mov.w	r0, #0
9000f2b0:	bf38      	it	cc
9000f2b2:	2601      	movcc	r6, #1
9000f2b4:	e7c8      	b.n	9000f248 <prvCopyDataToQueue+0x14>
9000f2b6:	bf00      	nop

9000f2b8 <xQueueGenericCreateStatic>:
	{
9000f2b8:	b530      	push	{r4, r5, lr}
9000f2ba:	b083      	sub	sp, #12
9000f2bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f2c0:	b940      	cbnz	r0, 9000f2d4 <xQueueGenericCreateStatic+0x1c>
9000f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2c6:	f383 8811 	msr	BASEPRI, r3
9000f2ca:	f3bf 8f6f 	isb	sy
9000f2ce:	f3bf 8f4f 	dsb	sy
9000f2d2:	e7fe      	b.n	9000f2d2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000f2d4:	461d      	mov	r5, r3
9000f2d6:	b153      	cbz	r3, 9000f2ee <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000f2d8:	b30a      	cbz	r2, 9000f31e <xQueueGenericCreateStatic+0x66>
9000f2da:	b989      	cbnz	r1, 9000f300 <xQueueGenericCreateStatic+0x48>
9000f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2e0:	f383 8811 	msr	BASEPRI, r3
9000f2e4:	f3bf 8f6f 	isb	sy
9000f2e8:	f3bf 8f4f 	dsb	sy
9000f2ec:	e7fe      	b.n	9000f2ec <xQueueGenericCreateStatic+0x34>
9000f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2f2:	f383 8811 	msr	BASEPRI, r3
9000f2f6:	f3bf 8f6f 	isb	sy
9000f2fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f2fe:	e7fe      	b.n	9000f2fe <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f300:	b16a      	cbz	r2, 9000f31e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f302:	2350      	movs	r3, #80	; 0x50
9000f304:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f306:	9b01      	ldr	r3, [sp, #4]
9000f308:	2b50      	cmp	r3, #80	; 0x50
9000f30a:	d013      	beq.n	9000f334 <xQueueGenericCreateStatic+0x7c>
9000f30c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f310:	f383 8811 	msr	BASEPRI, r3
9000f314:	f3bf 8f6f 	isb	sy
9000f318:	f3bf 8f4f 	dsb	sy
9000f31c:	e7fe      	b.n	9000f31c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f31e:	2900      	cmp	r1, #0
9000f320:	d0ef      	beq.n	9000f302 <xQueueGenericCreateStatic+0x4a>
9000f322:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f326:	f383 8811 	msr	BASEPRI, r3
9000f32a:	f3bf 8f6f 	isb	sy
9000f32e:	f3bf 8f4f 	dsb	sy
9000f332:	e7fe      	b.n	9000f332 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f334:	2900      	cmp	r1, #0
9000f336:	bf08      	it	eq
9000f338:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000f33a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000f33c:	6429      	str	r1, [r5, #64]	; 0x40
9000f33e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f340:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f342:	2201      	movs	r2, #1
9000f344:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000f348:	f7ff fe14 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f34c:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f34e:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f350:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f352:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f354:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000f358:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f35c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f35e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f360:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f362:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f364:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f366:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f36a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f36c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f370:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f374:	f7ff fd4a 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f378:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f37c:	f7ff fd46 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f380:	f7ff fe1a 	bl	9000efb8 <vPortExitCritical>
	}
9000f384:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f386:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000f38a:	b003      	add	sp, #12
9000f38c:	bd30      	pop	{r4, r5, pc}
9000f38e:	bf00      	nop

9000f390 <xQueueGenericCreate>:
	{
9000f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f392:	b940      	cbnz	r0, 9000f3a6 <xQueueGenericCreate+0x16>
9000f394:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f398:	f383 8811 	msr	BASEPRI, r3
9000f39c:	f3bf 8f6f 	isb	sy
9000f3a0:	f3bf 8f4f 	dsb	sy
9000f3a4:	e7fe      	b.n	9000f3a4 <xQueueGenericCreate+0x14>
9000f3a6:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f3a8:	fb01 f000 	mul.w	r0, r1, r0
9000f3ac:	460e      	mov	r6, r1
9000f3ae:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f3b0:	3050      	adds	r0, #80	; 0x50
9000f3b2:	f7ff fc09 	bl	9000ebc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f3b6:	4604      	mov	r4, r0
9000f3b8:	b340      	cbz	r0, 9000f40c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f3ba:	2300      	movs	r3, #0
9000f3bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f3c0:	b336      	cbz	r6, 9000f410 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000f3c6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000f3c8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f3cc:	f7ff fdd2 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3d0:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f3d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f3d6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3d8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000f3dc:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3e0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3e4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3e6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f3e8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000f3ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3ec:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f3ee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000f3f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f3f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f3f8:	f7ff fd08 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f3fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f400:	f7ff fd04 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f404:	f7ff fdd8 	bl	9000efb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f408:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000f40c:	4620      	mov	r0, r4
9000f40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000f410:	4603      	mov	r3, r0
9000f412:	e7d8      	b.n	9000f3c6 <xQueueGenericCreate+0x36>

9000f414 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000f414:	b940      	cbnz	r0, 9000f428 <xQueueCreateCountingSemaphoreStatic+0x14>
9000f416:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f41a:	f383 8811 	msr	BASEPRI, r3
9000f41e:	f3bf 8f6f 	isb	sy
9000f422:	f3bf 8f4f 	dsb	sy
9000f426:	e7fe      	b.n	9000f426 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f428:	4288      	cmp	r0, r1
9000f42a:	d208      	bcs.n	9000f43e <xQueueCreateCountingSemaphoreStatic+0x2a>
9000f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f430:	f383 8811 	msr	BASEPRI, r3
9000f434:	f3bf 8f6f 	isb	sy
9000f438:	f3bf 8f4f 	dsb	sy
9000f43c:	e7fe      	b.n	9000f43c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000f43e:	b530      	push	{r4, r5, lr}
9000f440:	4615      	mov	r5, r2
9000f442:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000f444:	2a00      	cmp	r2, #0
9000f446:	d03d      	beq.n	9000f4c4 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f448:	2350      	movs	r3, #80	; 0x50
9000f44a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f44c:	9b03      	ldr	r3, [sp, #12]
9000f44e:	2b50      	cmp	r3, #80	; 0x50
9000f450:	d008      	beq.n	9000f464 <xQueueCreateCountingSemaphoreStatic+0x50>
9000f452:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f456:	f383 8811 	msr	BASEPRI, r3
9000f45a:	f3bf 8f6f 	isb	sy
9000f45e:	f3bf 8f4f 	dsb	sy
9000f462:	e7fe      	b.n	9000f462 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000f464:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f466:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f468:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000f46a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f46c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f470:	6414      	str	r4, [r2, #64]	; 0x40
9000f472:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f474:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000f476:	f7ff fd7d 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f47a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f47c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f47e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f480:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000f484:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f488:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f48c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f48e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f490:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f492:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f494:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f498:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f49c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f4a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f4a4:	f7ff fcb2 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f4a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f4ac:	f7ff fcae 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f4b0:	f7ff fd82 	bl	9000efb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f4b4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f4b6:	9901      	ldr	r1, [sp, #4]
	}
9000f4b8:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f4ba:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f4be:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000f4c0:	b005      	add	sp, #20
9000f4c2:	bd30      	pop	{r4, r5, pc}
9000f4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4c8:	f383 8811 	msr	BASEPRI, r3
9000f4cc:	f3bf 8f6f 	isb	sy
9000f4d0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f4d4:	e7fe      	b.n	9000f4d4 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000f4d6:	bf00      	nop

9000f4d8 <xQueueCreateCountingSemaphore>:
	{
9000f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000f4da:	b940      	cbnz	r0, 9000f4ee <xQueueCreateCountingSemaphore+0x16>
9000f4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4e0:	f383 8811 	msr	BASEPRI, r3
9000f4e4:	f3bf 8f6f 	isb	sy
9000f4e8:	f3bf 8f4f 	dsb	sy
9000f4ec:	e7fe      	b.n	9000f4ec <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f4ee:	4288      	cmp	r0, r1
9000f4f0:	4604      	mov	r4, r0
9000f4f2:	460e      	mov	r6, r1
9000f4f4:	d208      	bcs.n	9000f508 <xQueueCreateCountingSemaphore+0x30>
9000f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4fa:	f383 8811 	msr	BASEPRI, r3
9000f4fe:	f3bf 8f6f 	isb	sy
9000f502:	f3bf 8f4f 	dsb	sy
9000f506:	e7fe      	b.n	9000f506 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f508:	2050      	movs	r0, #80	; 0x50
9000f50a:	f7ff fb5d 	bl	9000ebc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f50e:	4605      	mov	r5, r0
9000f510:	b330      	cbz	r0, 9000f560 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f512:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f514:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000f516:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f518:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f51c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000f51e:	f7ff fd29 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f522:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f524:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f526:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f52a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f52c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000f530:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f534:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f536:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f538:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f53a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f53c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f53e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f540:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f544:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f548:	f7ff fc60 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f54c:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f550:	f7ff fc5c 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f554:	f7ff fd30 	bl	9000efb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f558:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f55a:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000f55c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000f560:	4628      	mov	r0, r5
9000f562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000f564 <xQueueGenericSend>:
{
9000f564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000f568:	b084      	sub	sp, #16
9000f56a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000f56c:	2800      	cmp	r0, #0
9000f56e:	f000 8103 	beq.w	9000f778 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f572:	4688      	mov	r8, r1
9000f574:	4604      	mov	r4, r0
9000f576:	461f      	mov	r7, r3
9000f578:	2900      	cmp	r1, #0
9000f57a:	f000 8097 	beq.w	9000f6ac <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000f57e:	2f02      	cmp	r7, #2
9000f580:	d10b      	bne.n	9000f59a <xQueueGenericSend+0x36>
9000f582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f584:	2b01      	cmp	r3, #1
9000f586:	d008      	beq.n	9000f59a <xQueueGenericSend+0x36>
9000f588:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f58c:	f383 8811 	msr	BASEPRI, r3
9000f590:	f3bf 8f6f 	isb	sy
9000f594:	f3bf 8f4f 	dsb	sy
9000f598:	e7fe      	b.n	9000f598 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f59a:	f001 fd4d 	bl	90011038 <xTaskGetSchedulerState>
9000f59e:	2800      	cmp	r0, #0
9000f5a0:	f000 80f3 	beq.w	9000f78a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f5a4:	f1a7 0902 	sub.w	r9, r7, #2
9000f5a8:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f5aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f5ae:	fab9 f989 	clz	r9, r9
9000f5b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000f5b6:	f7ff fcdd 	bl	9000ef74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f5ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f5bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f5be:	429a      	cmp	r2, r3
9000f5c0:	f0c0 80f0 	bcc.w	9000f7a4 <xQueueGenericSend+0x240>
9000f5c4:	f1b9 0f00 	cmp.w	r9, #0
9000f5c8:	f040 80ec 	bne.w	9000f7a4 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000f5cc:	9b01      	ldr	r3, [sp, #4]
9000f5ce:	2b00      	cmp	r3, #0
9000f5d0:	f000 8101 	beq.w	9000f7d6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000f5d4:	2d00      	cmp	r5, #0
9000f5d6:	f000 80cb 	beq.w	9000f770 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000f5da:	f7ff fced 	bl	9000efb8 <vPortExitCritical>
		vTaskSuspendAll();
9000f5de:	f001 fb55 	bl	90010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000f5e2:	f7ff fcc7 	bl	9000ef74 <vPortEnterCritical>
9000f5e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f5ea:	2bff      	cmp	r3, #255	; 0xff
9000f5ec:	d102      	bne.n	9000f5f4 <xQueueGenericSend+0x90>
9000f5ee:	2300      	movs	r3, #0
9000f5f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000f5f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f5f8:	2bff      	cmp	r3, #255	; 0xff
9000f5fa:	d102      	bne.n	9000f602 <xQueueGenericSend+0x9e>
9000f5fc:	2300      	movs	r3, #0
9000f5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000f602:	f7ff fcd9 	bl	9000efb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000f606:	a901      	add	r1, sp, #4
9000f608:	a802      	add	r0, sp, #8
9000f60a:	f001 fcc1 	bl	90010f90 <xTaskCheckForTimeOut>
9000f60e:	2800      	cmp	r0, #0
9000f610:	f040 80e5 	bne.w	9000f7de <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000f614:	f7ff fcae 	bl	9000ef74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000f618:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f61a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f61c:	429a      	cmp	r2, r3
9000f61e:	d052      	beq.n	9000f6c6 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000f620:	f7ff fcca 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f624:	f7ff fca6 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f628:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000f62c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f62e:	2d00      	cmp	r5, #0
9000f630:	dc04      	bgt.n	9000f63c <xQueueGenericSend+0xd8>
9000f632:	e011      	b.n	9000f658 <xQueueGenericSend+0xf4>
			--cTxLock;
9000f634:	1e6a      	subs	r2, r5, #1
9000f636:	b2d3      	uxtb	r3, r2
9000f638:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f63a:	b16b      	cbz	r3, 9000f658 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f63c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f63e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f640:	b153      	cbz	r3, 9000f658 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f642:	f001 fc4f 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f646:	2800      	cmp	r0, #0
9000f648:	d0f4      	beq.n	9000f634 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000f64a:	f001 fce9 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000f64e:	1e6a      	subs	r2, r5, #1
9000f650:	b2d3      	uxtb	r3, r2
9000f652:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f654:	2b00      	cmp	r3, #0
9000f656:	d1f1      	bne.n	9000f63c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000f658:	23ff      	movs	r3, #255	; 0xff
9000f65a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f65e:	f7ff fcab 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f662:	f7ff fc87 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f666:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000f66a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f66c:	2d00      	cmp	r5, #0
9000f66e:	dd14      	ble.n	9000f69a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f670:	f104 0a10 	add.w	sl, r4, #16
9000f674:	e003      	b.n	9000f67e <xQueueGenericSend+0x11a>
				--cRxLock;
9000f676:	1e6a      	subs	r2, r5, #1
9000f678:	b2d3      	uxtb	r3, r2
9000f67a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f67c:	b16b      	cbz	r3, 9000f69a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f67e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f680:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f682:	b153      	cbz	r3, 9000f69a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f684:	f001 fc2e 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f688:	2800      	cmp	r0, #0
9000f68a:	d0f4      	beq.n	9000f676 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000f68c:	f001 fcc8 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000f690:	1e6a      	subs	r2, r5, #1
9000f692:	b2d3      	uxtb	r3, r2
9000f694:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f696:	2b00      	cmp	r3, #0
9000f698:	d1f1      	bne.n	9000f67e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000f69a:	23ff      	movs	r3, #255	; 0xff
9000f69c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f6a0:	f7ff fc8a 	bl	9000efb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000f6a4:	f001 fafa 	bl	90010c9c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f6a8:	2501      	movs	r5, #1
9000f6aa:	e784      	b.n	9000f5b6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f6ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f6ae:	2b00      	cmp	r3, #0
9000f6b0:	f43f af65 	beq.w	9000f57e <xQueueGenericSend+0x1a>
9000f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6b8:	f383 8811 	msr	BASEPRI, r3
9000f6bc:	f3bf 8f6f 	isb	sy
9000f6c0:	f3bf 8f4f 	dsb	sy
9000f6c4:	e7fe      	b.n	9000f6c4 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000f6c6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000f6ca:	f7ff fc75 	bl	9000efb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000f6ce:	9901      	ldr	r1, [sp, #4]
9000f6d0:	4650      	mov	r0, sl
9000f6d2:	f001 fb79 	bl	90010dc8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000f6d6:	f7ff fc4d 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f6da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f6de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f6e0:	2d00      	cmp	r5, #0
9000f6e2:	dc04      	bgt.n	9000f6ee <xQueueGenericSend+0x18a>
9000f6e4:	e011      	b.n	9000f70a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000f6e6:	1e6b      	subs	r3, r5, #1
9000f6e8:	b2da      	uxtb	r2, r3
9000f6ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f6ec:	b16a      	cbz	r2, 9000f70a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f6f0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f6f2:	b153      	cbz	r3, 9000f70a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f6f4:	f001 fbf6 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f6f8:	2800      	cmp	r0, #0
9000f6fa:	d0f4      	beq.n	9000f6e6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000f6fc:	f001 fc90 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000f700:	1e6b      	subs	r3, r5, #1
9000f702:	b2da      	uxtb	r2, r3
9000f704:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f706:	2a00      	cmp	r2, #0
9000f708:	d1f1      	bne.n	9000f6ee <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000f70a:	23ff      	movs	r3, #255	; 0xff
9000f70c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f710:	f7ff fc52 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f714:	f7ff fc2e 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f718:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f71c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f71e:	2d00      	cmp	r5, #0
9000f720:	dc04      	bgt.n	9000f72c <xQueueGenericSend+0x1c8>
9000f722:	e011      	b.n	9000f748 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000f724:	1e6b      	subs	r3, r5, #1
9000f726:	b2da      	uxtb	r2, r3
9000f728:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f72a:	b16a      	cbz	r2, 9000f748 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f72c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f72e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f730:	b153      	cbz	r3, 9000f748 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f732:	f001 fbd7 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f736:	2800      	cmp	r0, #0
9000f738:	d0f4      	beq.n	9000f724 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000f73a:	f001 fc71 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000f73e:	1e6b      	subs	r3, r5, #1
9000f740:	b2da      	uxtb	r2, r3
9000f742:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f744:	2a00      	cmp	r2, #0
9000f746:	d1f1      	bne.n	9000f72c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000f748:	23ff      	movs	r3, #255	; 0xff
9000f74a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f74e:	f7ff fc33 	bl	9000efb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000f752:	f001 faa3 	bl	90010c9c <xTaskResumeAll>
9000f756:	2800      	cmp	r0, #0
9000f758:	d1a6      	bne.n	9000f6a8 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000f75a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f762:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f766:	f3bf 8f4f 	dsb	sy
9000f76a:	f3bf 8f6f 	isb	sy
9000f76e:	e79b      	b.n	9000f6a8 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000f770:	a802      	add	r0, sp, #8
9000f772:	f001 fc01 	bl	90010f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000f776:	e730      	b.n	9000f5da <xQueueGenericSend+0x76>
9000f778:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f77c:	f383 8811 	msr	BASEPRI, r3
9000f780:	f3bf 8f6f 	isb	sy
9000f784:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f788:	e7fe      	b.n	9000f788 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f78a:	9b01      	ldr	r3, [sp, #4]
9000f78c:	2b00      	cmp	r3, #0
9000f78e:	f43f af09 	beq.w	9000f5a4 <xQueueGenericSend+0x40>
9000f792:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f796:	f383 8811 	msr	BASEPRI, r3
9000f79a:	f3bf 8f6f 	isb	sy
9000f79e:	f3bf 8f4f 	dsb	sy
9000f7a2:	e7fe      	b.n	9000f7a2 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f7a4:	463a      	mov	r2, r7
9000f7a6:	4641      	mov	r1, r8
9000f7a8:	4620      	mov	r0, r4
9000f7aa:	f7ff fd43 	bl	9000f234 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000f7b0:	2b00      	cmp	r3, #0
9000f7b2:	d152      	bne.n	9000f85a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000f7b4:	b148      	cbz	r0, 9000f7ca <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000f7b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f7be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f7c2:	f3bf 8f4f 	dsb	sy
9000f7c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000f7ca:	f7ff fbf5 	bl	9000efb8 <vPortExitCritical>
				return pdPASS;
9000f7ce:	2001      	movs	r0, #1
}
9000f7d0:	b004      	add	sp, #16
9000f7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000f7d6:	f7ff fbef 	bl	9000efb8 <vPortExitCritical>
					return errQUEUE_FULL;
9000f7da:	4648      	mov	r0, r9
9000f7dc:	e7f8      	b.n	9000f7d0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000f7de:	f7ff fbc9 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f7e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f7e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f7e8:	2d00      	cmp	r5, #0
9000f7ea:	dd10      	ble.n	9000f80e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f7ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000f7f0:	e003      	b.n	9000f7fa <xQueueGenericSend+0x296>
			--cTxLock;
9000f7f2:	1e6b      	subs	r3, r5, #1
9000f7f4:	b2da      	uxtb	r2, r3
9000f7f6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f7f8:	b14a      	cbz	r2, 9000f80e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f7fc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f7fe:	b133      	cbz	r3, 9000f80e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f800:	f001 fb70 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f804:	2800      	cmp	r0, #0
9000f806:	d0f4      	beq.n	9000f7f2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000f808:	f001 fc0a 	bl	90011020 <vTaskMissedYield>
9000f80c:	e7f1      	b.n	9000f7f2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f80e:	23ff      	movs	r3, #255	; 0xff
9000f810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f814:	f7ff fbd0 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f818:	f7ff fbac 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f81c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f820:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f822:	2d00      	cmp	r5, #0
9000f824:	dd10      	ble.n	9000f848 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f826:	f104 0610 	add.w	r6, r4, #16
9000f82a:	e003      	b.n	9000f834 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000f82c:	1e6b      	subs	r3, r5, #1
9000f82e:	b2da      	uxtb	r2, r3
9000f830:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f832:	b14a      	cbz	r2, 9000f848 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f834:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f836:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f838:	b133      	cbz	r3, 9000f848 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f83a:	f001 fb53 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f83e:	2800      	cmp	r0, #0
9000f840:	d0f4      	beq.n	9000f82c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000f842:	f001 fbed 	bl	90011020 <vTaskMissedYield>
9000f846:	e7f1      	b.n	9000f82c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000f848:	23ff      	movs	r3, #255	; 0xff
9000f84a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f84e:	f7ff fbb3 	bl	9000efb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000f852:	f001 fa23 	bl	90010c9c <xTaskResumeAll>
			return errQUEUE_FULL;
9000f856:	2000      	movs	r0, #0
9000f858:	e7ba      	b.n	9000f7d0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f85a:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f85e:	f001 fb41 	bl	90010ee4 <xTaskRemoveFromEventList>
9000f862:	2800      	cmp	r0, #0
9000f864:	d0b1      	beq.n	9000f7ca <xQueueGenericSend+0x266>
9000f866:	e7a6      	b.n	9000f7b6 <xQueueGenericSend+0x252>

9000f868 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000f868:	b179      	cbz	r1, 9000f88a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f86a:	2350      	movs	r3, #80	; 0x50
	{
9000f86c:	b570      	push	{r4, r5, r6, lr}
9000f86e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f870:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f872:	9b01      	ldr	r3, [sp, #4]
9000f874:	2b50      	cmp	r3, #80	; 0x50
9000f876:	d011      	beq.n	9000f89c <xQueueCreateMutexStatic+0x34>
9000f878:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f87c:	f383 8811 	msr	BASEPRI, r3
9000f880:	f3bf 8f6f 	isb	sy
9000f884:	f3bf 8f4f 	dsb	sy
9000f888:	e7fe      	b.n	9000f888 <xQueueCreateMutexStatic+0x20>
9000f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f88e:	f383 8811 	msr	BASEPRI, r3
9000f892:	f3bf 8f6f 	isb	sy
9000f896:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f89a:	e7fe      	b.n	9000f89a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000f89c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f89e:	2301      	movs	r3, #1
9000f8a0:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f8a2:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f8a4:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000f8a8:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f8aa:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000f8ac:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f8b0:	f7ff fb60 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8b4:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000f8b6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8b8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f8ba:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000f8bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f8c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8c4:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000f8c8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8cc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8ce:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8d0:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f8d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8d6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f8da:	f7ff fa97 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f8de:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f8e2:	f7ff fa93 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f8e6:	f7ff fb67 	bl	9000efb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f8ea:	4633      	mov	r3, r6
9000f8ec:	4632      	mov	r2, r6
9000f8ee:	4631      	mov	r1, r6
9000f8f0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000f8f2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000f8f6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000f8f8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000f8fa:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f8fc:	f7ff fe32 	bl	9000f564 <xQueueGenericSend>
	}
9000f900:	4620      	mov	r0, r4
9000f902:	b002      	add	sp, #8
9000f904:	bd70      	pop	{r4, r5, r6, pc}
9000f906:	bf00      	nop

9000f908 <xQueueGiveMutexRecursive>:
	{
9000f908:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000f90a:	b138      	cbz	r0, 9000f91c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000f90c:	6885      	ldr	r5, [r0, #8]
9000f90e:	4604      	mov	r4, r0
9000f910:	f001 fb8c 	bl	9001102c <xTaskGetCurrentTaskHandle>
9000f914:	4285      	cmp	r5, r0
9000f916:	d00a      	beq.n	9000f92e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000f918:	2000      	movs	r0, #0
	}
9000f91a:	bd38      	pop	{r3, r4, r5, pc}
9000f91c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f920:	f383 8811 	msr	BASEPRI, r3
9000f924:	f3bf 8f6f 	isb	sy
9000f928:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000f92c:	e7fe      	b.n	9000f92c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000f92e:	68e3      	ldr	r3, [r4, #12]
9000f930:	3b01      	subs	r3, #1
9000f932:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000f934:	b10b      	cbz	r3, 9000f93a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000f936:	2001      	movs	r0, #1
	}
9000f938:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000f93a:	461a      	mov	r2, r3
9000f93c:	4619      	mov	r1, r3
9000f93e:	4620      	mov	r0, r4
9000f940:	f7ff fe10 	bl	9000f564 <xQueueGenericSend>
			xReturn = pdPASS;
9000f944:	2001      	movs	r0, #1
	}
9000f946:	bd38      	pop	{r3, r4, r5, pc}

9000f948 <xQueueCreateMutex>:
	{
9000f948:	b570      	push	{r4, r5, r6, lr}
9000f94a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f94c:	2050      	movs	r0, #80	; 0x50
9000f94e:	f7ff f93b 	bl	9000ebc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f952:	4604      	mov	r4, r0
9000f954:	b370      	cbz	r0, 9000f9b4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f956:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000f958:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f95a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f95c:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f960:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f964:	f7ff fb06 	bl	9000ef74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f968:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f96a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f96c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f970:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f972:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000f976:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f97a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f97c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f97e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000f980:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f982:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f986:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f98a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f98e:	f7ff fa3d 	bl	9000ee0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f992:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f996:	f7ff fa39 	bl	9000ee0c <vListInitialise>
	taskEXIT_CRITICAL();
9000f99a:	f7ff fb0d 	bl	9000efb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f99e:	4633      	mov	r3, r6
9000f9a0:	4632      	mov	r2, r6
9000f9a2:	4631      	mov	r1, r6
9000f9a4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000f9a6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000f9aa:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000f9ac:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000f9ae:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f9b0:	f7ff fdd8 	bl	9000f564 <xQueueGenericSend>
	}
9000f9b4:	4620      	mov	r0, r4
9000f9b6:	bd70      	pop	{r4, r5, r6, pc}

9000f9b8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000f9b8:	2800      	cmp	r0, #0
9000f9ba:	d04e      	beq.n	9000fa5a <xQueueGenericSendFromISR+0xa2>
{
9000f9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f9c0:	460e      	mov	r6, r1
9000f9c2:	4604      	mov	r4, r0
9000f9c4:	4617      	mov	r7, r2
9000f9c6:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f9c8:	b339      	cbz	r1, 9000fa1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000f9ca:	2d02      	cmp	r5, #2
9000f9cc:	d10b      	bne.n	9000f9e6 <xQueueGenericSendFromISR+0x2e>
9000f9ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f9d0:	2b01      	cmp	r3, #1
9000f9d2:	d008      	beq.n	9000f9e6 <xQueueGenericSendFromISR+0x2e>
9000f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9d8:	f383 8811 	msr	BASEPRI, r3
9000f9dc:	f3bf 8f6f 	isb	sy
9000f9e0:	f3bf 8f4f 	dsb	sy
9000f9e4:	e7fe      	b.n	9000f9e4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000f9e6:	f7ff fbf7 	bl	9000f1d8 <vPortValidateInterruptPriority>
	__asm volatile
9000f9ea:	f3ef 8811 	mrs	r8, BASEPRI
9000f9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9f2:	f383 8811 	msr	BASEPRI, r3
9000f9f6:	f3bf 8f6f 	isb	sy
9000f9fa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f9fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000fa00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fa02:	429a      	cmp	r2, r3
9000fa04:	d315      	bcc.n	9000fa32 <xQueueGenericSendFromISR+0x7a>
9000fa06:	f1a5 0002 	sub.w	r0, r5, #2
9000fa0a:	fab0 f080 	clz	r0, r0
9000fa0e:	0940      	lsrs	r0, r0, #5
9000fa10:	b978      	cbnz	r0, 9000fa32 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000fa12:	f388 8811 	msr	BASEPRI, r8
}
9000fa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fa1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000fa1c:	2b00      	cmp	r3, #0
9000fa1e:	d0d4      	beq.n	9000f9ca <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa24:	f383 8811 	msr	BASEPRI, r3
9000fa28:	f3bf 8f6f 	isb	sy
9000fa2c:	f3bf 8f4f 	dsb	sy
9000fa30:	e7fe      	b.n	9000fa30 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000fa32:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000fa34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000fa38:	4631      	mov	r1, r6
9000fa3a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000fa3c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fa3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000fa40:	f7ff fbf8 	bl	9000f234 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000fa44:	1c6b      	adds	r3, r5, #1
9000fa46:	d011      	beq.n	9000fa6c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fa48:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000fa4a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fa4c:	b25b      	sxtb	r3, r3
9000fa4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000fa52:	f388 8811 	msr	BASEPRI, r8
}
9000fa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000fa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa5e:	f383 8811 	msr	BASEPRI, r3
9000fa62:	f3bf 8f6f 	isb	sy
9000fa66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000fa6a:	e7fe      	b.n	9000fa6a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000fa6e:	b90b      	cbnz	r3, 9000fa74 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000fa70:	2001      	movs	r0, #1
9000fa72:	e7ce      	b.n	9000fa12 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fa74:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fa78:	f001 fa34 	bl	90010ee4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000fa7c:	2800      	cmp	r0, #0
9000fa7e:	d0f7      	beq.n	9000fa70 <xQueueGenericSendFromISR+0xb8>
9000fa80:	2f00      	cmp	r7, #0
9000fa82:	d0f5      	beq.n	9000fa70 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fa84:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000fa86:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fa88:	603b      	str	r3, [r7, #0]
9000fa8a:	e7c2      	b.n	9000fa12 <xQueueGenericSendFromISR+0x5a>

9000fa8c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000fa8c:	b360      	cbz	r0, 9000fae8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000fa8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000fa90:	b570      	push	{r4, r5, r6, lr}
9000fa92:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000fa94:	b143      	cbz	r3, 9000faa8 <xQueueGiveFromISR+0x1c>
9000fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa9a:	f383 8811 	msr	BASEPRI, r3
9000fa9e:	f3bf 8f6f 	isb	sy
9000faa2:	f3bf 8f4f 	dsb	sy
9000faa6:	e7fe      	b.n	9000faa6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000faa8:	6803      	ldr	r3, [r0, #0]
9000faaa:	460d      	mov	r5, r1
9000faac:	b32b      	cbz	r3, 9000fafa <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000faae:	f7ff fb93 	bl	9000f1d8 <vPortValidateInterruptPriority>
	__asm volatile
9000fab2:	f3ef 8611 	mrs	r6, BASEPRI
9000fab6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000faba:	f383 8811 	msr	BASEPRI, r3
9000fabe:	f3bf 8f6f 	isb	sy
9000fac2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000fac8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000faca:	429a      	cmp	r2, r3
9000facc:	d921      	bls.n	9000fb12 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000face:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000fad2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000fad4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000fad6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000fad8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000fada:	d01e      	beq.n	9000fb1a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fadc:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000fade:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fae0:	b25b      	sxtb	r3, r3
9000fae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000fae6:	e015      	b.n	9000fb14 <xQueueGiveFromISR+0x88>
	__asm volatile
9000fae8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000faec:	f383 8811 	msr	BASEPRI, r3
9000faf0:	f3bf 8f6f 	isb	sy
9000faf4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000faf8:	e7fe      	b.n	9000faf8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000fafa:	6883      	ldr	r3, [r0, #8]
9000fafc:	2b00      	cmp	r3, #0
9000fafe:	d0d6      	beq.n	9000faae <xQueueGiveFromISR+0x22>
9000fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb04:	f383 8811 	msr	BASEPRI, r3
9000fb08:	f3bf 8f6f 	isb	sy
9000fb0c:	f3bf 8f4f 	dsb	sy
9000fb10:	e7fe      	b.n	9000fb10 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000fb12:	2000      	movs	r0, #0
	__asm volatile
9000fb14:	f386 8811 	msr	BASEPRI, r6
}
9000fb18:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000fb1c:	b90b      	cbnz	r3, 9000fb22 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000fb1e:	2001      	movs	r0, #1
9000fb20:	e7f8      	b.n	9000fb14 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb22:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fb26:	f001 f9dd 	bl	90010ee4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000fb2a:	2d00      	cmp	r5, #0
9000fb2c:	d0f7      	beq.n	9000fb1e <xQueueGiveFromISR+0x92>
9000fb2e:	2800      	cmp	r0, #0
9000fb30:	d0f5      	beq.n	9000fb1e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fb32:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000fb34:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fb36:	602b      	str	r3, [r5, #0]
9000fb38:	e7ec      	b.n	9000fb14 <xQueueGiveFromISR+0x88>
9000fb3a:	bf00      	nop

9000fb3c <xQueueReceive>:
{
9000fb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000fb40:	b085      	sub	sp, #20
9000fb42:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000fb44:	2800      	cmp	r0, #0
9000fb46:	f000 815c 	beq.w	9000fe02 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fb4a:	460f      	mov	r7, r1
9000fb4c:	4604      	mov	r4, r0
9000fb4e:	2900      	cmp	r1, #0
9000fb50:	d079      	beq.n	9000fc46 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fb52:	f001 fa71 	bl	90011038 <xTaskGetSchedulerState>
9000fb56:	2800      	cmp	r0, #0
9000fb58:	f000 8081 	beq.w	9000fc5e <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000fb5c:	f7ff fa0a 	bl	9000ef74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fb60:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fb62:	2d00      	cmp	r5, #0
9000fb64:	f040 8138 	bne.w	9000fdd8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fb68:	9b01      	ldr	r3, [sp, #4]
9000fb6a:	2b00      	cmp	r3, #0
9000fb6c:	f000 80d5 	beq.w	9000fd1a <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000fb70:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb72:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000fb76:	a802      	add	r0, sp, #8
9000fb78:	f001 f9fe 	bl	90010f78 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000fb7c:	f7ff fa1c 	bl	9000efb8 <vPortExitCritical>
		vTaskSuspendAll();
9000fb80:	f001 f884 	bl	90010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fb84:	f7ff f9f6 	bl	9000ef74 <vPortEnterCritical>
9000fb88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fb8c:	2bff      	cmp	r3, #255	; 0xff
9000fb8e:	d101      	bne.n	9000fb94 <xQueueReceive+0x58>
9000fb90:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000fb94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fb98:	2bff      	cmp	r3, #255	; 0xff
9000fb9a:	d101      	bne.n	9000fba0 <xQueueReceive+0x64>
9000fb9c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000fba0:	f7ff fa0a 	bl	9000efb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000fba4:	a901      	add	r1, sp, #4
9000fba6:	a802      	add	r0, sp, #8
9000fba8:	f001 f9f2 	bl	90010f90 <xTaskCheckForTimeOut>
9000fbac:	2800      	cmp	r0, #0
9000fbae:	d163      	bne.n	9000fc78 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000fbb0:	f7ff f9e0 	bl	9000ef74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fbb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fbb6:	2b00      	cmp	r3, #0
9000fbb8:	f000 80b5 	beq.w	9000fd26 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000fbbc:	f7ff f9fc 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fbc0:	f7ff f9d8 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fbc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fbc8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbca:	2d00      	cmp	r5, #0
9000fbcc:	dc04      	bgt.n	9000fbd8 <xQueueReceive+0x9c>
9000fbce:	e011      	b.n	9000fbf4 <xQueueReceive+0xb8>
			--cTxLock;
9000fbd0:	1e6b      	subs	r3, r5, #1
9000fbd2:	b2da      	uxtb	r2, r3
9000fbd4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbd6:	b16a      	cbz	r2, 9000fbf4 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbda:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbdc:	b153      	cbz	r3, 9000fbf4 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbde:	f001 f981 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fbe2:	2800      	cmp	r0, #0
9000fbe4:	d0f4      	beq.n	9000fbd0 <xQueueReceive+0x94>
						vTaskMissedYield();
9000fbe6:	f001 fa1b 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000fbea:	1e6b      	subs	r3, r5, #1
9000fbec:	b2da      	uxtb	r2, r3
9000fbee:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbf0:	2a00      	cmp	r2, #0
9000fbf2:	d1f1      	bne.n	9000fbd8 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000fbf4:	23ff      	movs	r3, #255	; 0xff
9000fbf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fbfa:	f7ff f9dd 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fbfe:	f7ff f9b9 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fc02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fc06:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc08:	2d00      	cmp	r5, #0
9000fc0a:	dd14      	ble.n	9000fc36 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc0c:	f104 0910 	add.w	r9, r4, #16
9000fc10:	e003      	b.n	9000fc1a <xQueueReceive+0xde>
				--cRxLock;
9000fc12:	1e6b      	subs	r3, r5, #1
9000fc14:	b2da      	uxtb	r2, r3
9000fc16:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc18:	b16a      	cbz	r2, 9000fc36 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc1a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc1c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc1e:	b153      	cbz	r3, 9000fc36 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc20:	f001 f960 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fc24:	2800      	cmp	r0, #0
9000fc26:	d0f4      	beq.n	9000fc12 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000fc28:	f001 f9fa 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000fc2c:	1e6b      	subs	r3, r5, #1
9000fc2e:	b2da      	uxtb	r2, r3
9000fc30:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc32:	2a00      	cmp	r2, #0
9000fc34:	d1f1      	bne.n	9000fc1a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000fc36:	23ff      	movs	r3, #255	; 0xff
9000fc38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fc3c:	f7ff f9bc 	bl	9000efb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000fc40:	f001 f82c 	bl	90010c9c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000fc44:	e060      	b.n	9000fd08 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fc46:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000fc48:	2b00      	cmp	r3, #0
9000fc4a:	d082      	beq.n	9000fb52 <xQueueReceive+0x16>
	__asm volatile
9000fc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc50:	f383 8811 	msr	BASEPRI, r3
9000fc54:	f3bf 8f6f 	isb	sy
9000fc58:	f3bf 8f4f 	dsb	sy
9000fc5c:	e7fe      	b.n	9000fc5c <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fc5e:	9b01      	ldr	r3, [sp, #4]
9000fc60:	2b00      	cmp	r3, #0
9000fc62:	f43f af7b 	beq.w	9000fb5c <xQueueReceive+0x20>
9000fc66:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc6a:	f383 8811 	msr	BASEPRI, r3
9000fc6e:	f3bf 8f6f 	isb	sy
9000fc72:	f3bf 8f4f 	dsb	sy
9000fc76:	e7fe      	b.n	9000fc76 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000fc78:	f7ff f97c 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fc7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fc80:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc82:	2d00      	cmp	r5, #0
9000fc84:	dc04      	bgt.n	9000fc90 <xQueueReceive+0x154>
9000fc86:	e011      	b.n	9000fcac <xQueueReceive+0x170>
			--cTxLock;
9000fc88:	1e6b      	subs	r3, r5, #1
9000fc8a:	b2da      	uxtb	r2, r3
9000fc8c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc8e:	b16a      	cbz	r2, 9000fcac <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc90:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc92:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc94:	b153      	cbz	r3, 9000fcac <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc96:	f001 f925 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fc9a:	2800      	cmp	r0, #0
9000fc9c:	d0f4      	beq.n	9000fc88 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000fc9e:	f001 f9bf 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000fca2:	1e6b      	subs	r3, r5, #1
9000fca4:	b2da      	uxtb	r2, r3
9000fca6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fca8:	2a00      	cmp	r2, #0
9000fcaa:	d1f1      	bne.n	9000fc90 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000fcac:	23ff      	movs	r3, #255	; 0xff
9000fcae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fcb2:	f7ff f981 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fcb6:	f7ff f95d 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fcba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fcbe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcc0:	2d00      	cmp	r5, #0
9000fcc2:	dd14      	ble.n	9000fcee <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcc4:	f104 0910 	add.w	r9, r4, #16
9000fcc8:	e003      	b.n	9000fcd2 <xQueueReceive+0x196>
				--cRxLock;
9000fcca:	1e6b      	subs	r3, r5, #1
9000fccc:	b2da      	uxtb	r2, r3
9000fcce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcd0:	b16a      	cbz	r2, 9000fcee <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fcd2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcd4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fcd6:	b153      	cbz	r3, 9000fcee <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcd8:	f001 f904 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fcdc:	2800      	cmp	r0, #0
9000fcde:	d0f4      	beq.n	9000fcca <xQueueReceive+0x18e>
					vTaskMissedYield();
9000fce0:	f001 f99e 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000fce4:	1e6b      	subs	r3, r5, #1
9000fce6:	b2da      	uxtb	r2, r3
9000fce8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcea:	2a00      	cmp	r2, #0
9000fcec:	d1f1      	bne.n	9000fcd2 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000fcee:	23ff      	movs	r3, #255	; 0xff
9000fcf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fcf4:	f7ff f960 	bl	9000efb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000fcf8:	f000 ffd0 	bl	90010c9c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000fcfc:	f7ff f93a 	bl	9000ef74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fd00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fd02:	b153      	cbz	r3, 9000fd1a <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000fd04:	f7ff f958 	bl	9000efb8 <vPortExitCritical>
		taskENTER_CRITICAL();
9000fd08:	f7ff f934 	bl	9000ef74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fd0c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fd0e:	2d00      	cmp	r5, #0
9000fd10:	d162      	bne.n	9000fdd8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fd12:	9b01      	ldr	r3, [sp, #4]
9000fd14:	2b00      	cmp	r3, #0
9000fd16:	f47f af31 	bne.w	9000fb7c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000fd1a:	f7ff f94d 	bl	9000efb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000fd1e:	2000      	movs	r0, #0
}
9000fd20:	b005      	add	sp, #20
9000fd22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000fd26:	f7ff f947 	bl	9000efb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000fd2a:	9901      	ldr	r1, [sp, #4]
9000fd2c:	4630      	mov	r0, r6
9000fd2e:	f001 f84b 	bl	90010dc8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000fd32:	f7ff f91f 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fd36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fd3a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fd3c:	2d00      	cmp	r5, #0
9000fd3e:	dc04      	bgt.n	9000fd4a <xQueueReceive+0x20e>
9000fd40:	e011      	b.n	9000fd66 <xQueueReceive+0x22a>
			--cTxLock;
9000fd42:	1e6b      	subs	r3, r5, #1
9000fd44:	b2da      	uxtb	r2, r3
9000fd46:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fd48:	b16a      	cbz	r2, 9000fd66 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fd4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd4c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fd4e:	b153      	cbz	r3, 9000fd66 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd50:	f001 f8c8 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fd54:	2800      	cmp	r0, #0
9000fd56:	d0f4      	beq.n	9000fd42 <xQueueReceive+0x206>
						vTaskMissedYield();
9000fd58:	f001 f962 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000fd5c:	1e6b      	subs	r3, r5, #1
9000fd5e:	b2da      	uxtb	r2, r3
9000fd60:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fd62:	2a00      	cmp	r2, #0
9000fd64:	d1f1      	bne.n	9000fd4a <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000fd66:	23ff      	movs	r3, #255	; 0xff
9000fd68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fd6c:	f7ff f924 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fd70:	f7ff f900 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fd74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fd78:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd7a:	2d00      	cmp	r5, #0
9000fd7c:	dd14      	ble.n	9000fda8 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd7e:	f104 0910 	add.w	r9, r4, #16
9000fd82:	e003      	b.n	9000fd8c <xQueueReceive+0x250>
				--cRxLock;
9000fd84:	1e6b      	subs	r3, r5, #1
9000fd86:	b2da      	uxtb	r2, r3
9000fd88:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd8a:	b16a      	cbz	r2, 9000fda8 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd8c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd8e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd90:	b153      	cbz	r3, 9000fda8 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd92:	f001 f8a7 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fd96:	2800      	cmp	r0, #0
9000fd98:	d0f4      	beq.n	9000fd84 <xQueueReceive+0x248>
					vTaskMissedYield();
9000fd9a:	f001 f941 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000fd9e:	1e6b      	subs	r3, r5, #1
9000fda0:	b2da      	uxtb	r2, r3
9000fda2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fda4:	2a00      	cmp	r2, #0
9000fda6:	d1f1      	bne.n	9000fd8c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000fda8:	23ff      	movs	r3, #255	; 0xff
9000fdaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fdae:	f7ff f903 	bl	9000efb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000fdb2:	f000 ff73 	bl	90010c9c <xTaskResumeAll>
9000fdb6:	2800      	cmp	r0, #0
9000fdb8:	d1a6      	bne.n	9000fd08 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000fdba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fdc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fdc6:	f3bf 8f4f 	dsb	sy
9000fdca:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000fdce:	f7ff f8d1 	bl	9000ef74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fdd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fdd4:	2d00      	cmp	r5, #0
9000fdd6:	d09c      	beq.n	9000fd12 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000fdd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000fdda:	b152      	cbz	r2, 9000fdf2 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fddc:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fdde:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fde0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fde2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fde4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fde6:	d301      	bcc.n	9000fdec <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000fde8:	6821      	ldr	r1, [r4, #0]
9000fdea:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000fdec:	4638      	mov	r0, r7
9000fdee:	f017 fd46 	bl	9002787e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000fdf2:	3d01      	subs	r5, #1
9000fdf4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fdf6:	6923      	ldr	r3, [r4, #16]
9000fdf8:	b963      	cbnz	r3, 9000fe14 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000fdfa:	f7ff f8dd 	bl	9000efb8 <vPortExitCritical>
				return pdPASS;
9000fdfe:	2001      	movs	r0, #1
9000fe00:	e78e      	b.n	9000fd20 <xQueueReceive+0x1e4>
9000fe02:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe06:	f383 8811 	msr	BASEPRI, r3
9000fe0a:	f3bf 8f6f 	isb	sy
9000fe0e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000fe12:	e7fe      	b.n	9000fe12 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fe14:	f104 0010 	add.w	r0, r4, #16
9000fe18:	f001 f864 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fe1c:	2800      	cmp	r0, #0
9000fe1e:	d0ec      	beq.n	9000fdfa <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000fe20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fe24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fe28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fe2c:	f3bf 8f4f 	dsb	sy
9000fe30:	f3bf 8f6f 	isb	sy
9000fe34:	e7e1      	b.n	9000fdfa <xQueueReceive+0x2be>
9000fe36:	bf00      	nop

9000fe38 <xQueueSemaphoreTake>:
{
9000fe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000fe3c:	b084      	sub	sp, #16
9000fe3e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000fe40:	2800      	cmp	r0, #0
9000fe42:	d05c      	beq.n	9000fefe <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000fe44:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000fe46:	4604      	mov	r4, r0
9000fe48:	b147      	cbz	r7, 9000fe5c <xQueueSemaphoreTake+0x24>
9000fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe4e:	f383 8811 	msr	BASEPRI, r3
9000fe52:	f3bf 8f6f 	isb	sy
9000fe56:	f3bf 8f4f 	dsb	sy
9000fe5a:	e7fe      	b.n	9000fe5a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fe5c:	f001 f8ec 	bl	90011038 <xTaskGetSchedulerState>
9000fe60:	4605      	mov	r5, r0
9000fe62:	2800      	cmp	r0, #0
9000fe64:	d054      	beq.n	9000ff10 <xQueueSemaphoreTake+0xd8>
9000fe66:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fe68:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000fe6c:	f7ff f882 	bl	9000ef74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000fe70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000fe72:	2b00      	cmp	r3, #0
9000fe74:	f040 8149 	bne.w	9001010a <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fe78:	9b01      	ldr	r3, [sp, #4]
9000fe7a:	2b00      	cmp	r3, #0
9000fe7c:	f000 813a 	beq.w	900100f4 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000fe80:	2d00      	cmp	r5, #0
9000fe82:	f000 809d 	beq.w	9000ffc0 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000fe86:	f7ff f897 	bl	9000efb8 <vPortExitCritical>
		vTaskSuspendAll();
9000fe8a:	f000 feff 	bl	90010c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fe8e:	f7ff f871 	bl	9000ef74 <vPortEnterCritical>
9000fe92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fe96:	2bff      	cmp	r3, #255	; 0xff
9000fe98:	d102      	bne.n	9000fea0 <xQueueSemaphoreTake+0x68>
9000fe9a:	2300      	movs	r3, #0
9000fe9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000fea0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fea4:	2bff      	cmp	r3, #255	; 0xff
9000fea6:	d102      	bne.n	9000feae <xQueueSemaphoreTake+0x76>
9000fea8:	2300      	movs	r3, #0
9000feaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000feae:	f7ff f883 	bl	9000efb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000feb2:	a901      	add	r1, sp, #4
9000feb4:	a802      	add	r0, sp, #8
9000feb6:	f001 f86b 	bl	90010f90 <xTaskCheckForTimeOut>
9000feba:	2800      	cmp	r0, #0
9000febc:	d135      	bne.n	9000ff2a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000febe:	f7ff f859 	bl	9000ef74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fec4:	2b00      	cmp	r3, #0
9000fec6:	f000 80a4 	beq.w	90010012 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000feca:	f7ff f875 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fece:	f7ff f851 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fed2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fed6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fed8:	2d00      	cmp	r5, #0
9000feda:	dc05      	bgt.n	9000fee8 <xQueueSemaphoreTake+0xb0>
9000fedc:	e074      	b.n	9000ffc8 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000fede:	1e6b      	subs	r3, r5, #1
9000fee0:	b2da      	uxtb	r2, r3
9000fee2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fee4:	2a00      	cmp	r2, #0
9000fee6:	d06f      	beq.n	9000ffc8 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000feea:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000feec:	2b00      	cmp	r3, #0
9000feee:	d06b      	beq.n	9000ffc8 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fef0:	f000 fff8 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fef4:	2800      	cmp	r0, #0
9000fef6:	d0f2      	beq.n	9000fede <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000fef8:	f001 f892 	bl	90011020 <vTaskMissedYield>
9000fefc:	e7ef      	b.n	9000fede <xQueueSemaphoreTake+0xa6>
9000fefe:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff02:	f383 8811 	msr	BASEPRI, r3
9000ff06:	f3bf 8f6f 	isb	sy
9000ff0a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000ff0e:	e7fe      	b.n	9000ff0e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ff10:	9b01      	ldr	r3, [sp, #4]
9000ff12:	2b00      	cmp	r3, #0
9000ff14:	f000 80d4 	beq.w	900100c0 <xQueueSemaphoreTake+0x288>
9000ff18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff1c:	f383 8811 	msr	BASEPRI, r3
9000ff20:	f3bf 8f6f 	isb	sy
9000ff24:	f3bf 8f4f 	dsb	sy
9000ff28:	e7fe      	b.n	9000ff28 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000ff2a:	f7ff f823 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ff2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ff32:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ff34:	2d00      	cmp	r5, #0
9000ff36:	dc04      	bgt.n	9000ff42 <xQueueSemaphoreTake+0x10a>
9000ff38:	e011      	b.n	9000ff5e <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000ff3a:	1e6b      	subs	r3, r5, #1
9000ff3c:	b2da      	uxtb	r2, r3
9000ff3e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ff40:	b16a      	cbz	r2, 9000ff5e <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ff42:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ff44:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ff46:	b153      	cbz	r3, 9000ff5e <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ff48:	f000 ffcc 	bl	90010ee4 <xTaskRemoveFromEventList>
9000ff4c:	2800      	cmp	r0, #0
9000ff4e:	d0f4      	beq.n	9000ff3a <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000ff50:	f001 f866 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
9000ff54:	1e6b      	subs	r3, r5, #1
9000ff56:	b2da      	uxtb	r2, r3
9000ff58:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ff5a:	2a00      	cmp	r2, #0
9000ff5c:	d1f1      	bne.n	9000ff42 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000ff5e:	23ff      	movs	r3, #255	; 0xff
9000ff60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ff64:	f7ff f828 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ff68:	f7ff f804 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ff6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ff70:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff72:	2d00      	cmp	r5, #0
9000ff74:	dd14      	ble.n	9000ffa0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff76:	f104 0810 	add.w	r8, r4, #16
9000ff7a:	e003      	b.n	9000ff84 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000ff7c:	1e6b      	subs	r3, r5, #1
9000ff7e:	b2da      	uxtb	r2, r3
9000ff80:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff82:	b16a      	cbz	r2, 9000ffa0 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff84:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff86:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff88:	b153      	cbz	r3, 9000ffa0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff8a:	f000 ffab 	bl	90010ee4 <xTaskRemoveFromEventList>
9000ff8e:	2800      	cmp	r0, #0
9000ff90:	d0f4      	beq.n	9000ff7c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000ff92:	f001 f845 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
9000ff96:	1e6b      	subs	r3, r5, #1
9000ff98:	b2da      	uxtb	r2, r3
9000ff9a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff9c:	2a00      	cmp	r2, #0
9000ff9e:	d1f1      	bne.n	9000ff84 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000ffa0:	23ff      	movs	r3, #255	; 0xff
9000ffa2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ffa6:	f7ff f807 	bl	9000efb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ffaa:	f000 fe77 	bl	90010c9c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ffae:	f7fe ffe1 	bl	9000ef74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ffb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ffb4:	2b00      	cmp	r3, #0
9000ffb6:	d07c      	beq.n	900100b2 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000ffb8:	f7fe fffe 	bl	9000efb8 <vPortExitCritical>
	return xReturn;
9000ffbc:	2501      	movs	r5, #1
9000ffbe:	e755      	b.n	9000fe6c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ffc0:	a802      	add	r0, sp, #8
9000ffc2:	f000 ffd9 	bl	90010f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ffc6:	e75e      	b.n	9000fe86 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ffc8:	23ff      	movs	r3, #255	; 0xff
9000ffca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ffce:	f7fe fff3 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ffd2:	f7fe ffcf 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ffd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ffda:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ffdc:	2d00      	cmp	r5, #0
9000ffde:	dd10      	ble.n	90010002 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ffe0:	f104 0810 	add.w	r8, r4, #16
9000ffe4:	e003      	b.n	9000ffee <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000ffe6:	1e6b      	subs	r3, r5, #1
9000ffe8:	b2da      	uxtb	r2, r3
9000ffea:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ffec:	b14a      	cbz	r2, 90010002 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ffee:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fff0:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fff2:	b133      	cbz	r3, 90010002 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fff4:	f000 ff76 	bl	90010ee4 <xTaskRemoveFromEventList>
9000fff8:	2800      	cmp	r0, #0
9000fffa:	d0f4      	beq.n	9000ffe6 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000fffc:	f001 f810 	bl	90011020 <vTaskMissedYield>
90010000:	e7f1      	b.n	9000ffe6 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
90010002:	23ff      	movs	r3, #255	; 0xff
90010004:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010008:	f7fe ffd6 	bl	9000efb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9001000c:	f000 fe46 	bl	90010c9c <xTaskResumeAll>
90010010:	e7d4      	b.n	9000ffbc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
90010012:	f7fe ffd1 	bl	9000efb8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90010016:	6823      	ldr	r3, [r4, #0]
90010018:	2b00      	cmp	r3, #0
9001001a:	d062      	beq.n	900100e2 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9001001c:	9901      	ldr	r1, [sp, #4]
9001001e:	4630      	mov	r0, r6
90010020:	f000 fed2 	bl	90010dc8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
90010024:	f7fe ffa6 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90010028:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9001002c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001002e:	2d00      	cmp	r5, #0
90010030:	dc04      	bgt.n	9001003c <xQueueSemaphoreTake+0x204>
90010032:	e00d      	b.n	90010050 <xQueueSemaphoreTake+0x218>
			--cTxLock;
90010034:	1e6b      	subs	r3, r5, #1
90010036:	b2da      	uxtb	r2, r3
90010038:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001003a:	b14a      	cbz	r2, 90010050 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001003c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001003e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010040:	b133      	cbz	r3, 90010050 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010042:	f000 ff4f 	bl	90010ee4 <xTaskRemoveFromEventList>
90010046:	2800      	cmp	r0, #0
90010048:	d0f4      	beq.n	90010034 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9001004a:	f000 ffe9 	bl	90011020 <vTaskMissedYield>
9001004e:	e7f1      	b.n	90010034 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
90010050:	23ff      	movs	r3, #255	; 0xff
90010052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90010056:	f7fe ffaf 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9001005a:	f7fe ff8b 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001005e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010062:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010064:	2d00      	cmp	r5, #0
90010066:	dd10      	ble.n	9001008a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010068:	f104 0810 	add.w	r8, r4, #16
9001006c:	e003      	b.n	90010076 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9001006e:	1e6b      	subs	r3, r5, #1
90010070:	b2da      	uxtb	r2, r3
90010072:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010074:	b14a      	cbz	r2, 9001008a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010076:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010078:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001007a:	b133      	cbz	r3, 9001008a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001007c:	f000 ff32 	bl	90010ee4 <xTaskRemoveFromEventList>
90010080:	2800      	cmp	r0, #0
90010082:	d0f4      	beq.n	9001006e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
90010084:	f000 ffcc 	bl	90011020 <vTaskMissedYield>
90010088:	e7f1      	b.n	9001006e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9001008a:	23ff      	movs	r3, #255	; 0xff
9001008c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010090:	f7fe ff92 	bl	9000efb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90010094:	f000 fe02 	bl	90010c9c <xTaskResumeAll>
90010098:	2800      	cmp	r0, #0
9001009a:	d18f      	bne.n	9000ffbc <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9001009c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900100a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900100a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900100a8:	f3bf 8f4f 	dsb	sy
900100ac:	f3bf 8f6f 	isb	sy
900100b0:	e784      	b.n	9000ffbc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
900100b2:	f7fe ff81 	bl	9000efb8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
900100b6:	b92f      	cbnz	r7, 900100c4 <xQueueSemaphoreTake+0x28c>
}
900100b8:	4638      	mov	r0, r7
900100ba:	b004      	add	sp, #16
900100bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900100c0:	4607      	mov	r7, r0
900100c2:	e6d1      	b.n	9000fe68 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
900100c4:	f7fe ff56 	bl	9000ef74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
900100c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900100ca:	b119      	cbz	r1, 900100d4 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
900100cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
900100ce:	6819      	ldr	r1, [r3, #0]
900100d0:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
900100d4:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
900100d6:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
900100d8:	f001 f84a 	bl	90011170 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
900100dc:	f7fe ff6c 	bl	9000efb8 <vPortExitCritical>
900100e0:	e7ea      	b.n	900100b8 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
900100e2:	f7fe ff47 	bl	9000ef74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
900100e6:	68a0      	ldr	r0, [r4, #8]
900100e8:	f000 ffb6 	bl	90011058 <xTaskPriorityInherit>
900100ec:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
900100ee:	f7fe ff63 	bl	9000efb8 <vPortExitCritical>
900100f2:	e793      	b.n	9001001c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
900100f4:	2f00      	cmp	r7, #0
900100f6:	d0f1      	beq.n	900100dc <xQueueSemaphoreTake+0x2a4>
900100f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900100fc:	f383 8811 	msr	BASEPRI, r3
90010100:	f3bf 8f6f 	isb	sy
90010104:	f3bf 8f4f 	dsb	sy
90010108:	e7fe      	b.n	90010108 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001010a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9001010c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001010e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90010110:	b12a      	cbz	r2, 9001011e <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010112:	6923      	ldr	r3, [r4, #16]
90010114:	b93b      	cbnz	r3, 90010126 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
90010116:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
90010118:	f7fe ff4e 	bl	9000efb8 <vPortExitCritical>
				return pdPASS;
9001011c:	e7cc      	b.n	900100b8 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9001011e:	f001 f87b 	bl	90011218 <pvTaskIncrementMutexHeldCount>
90010122:	60a0      	str	r0, [r4, #8]
90010124:	e7f5      	b.n	90010112 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010126:	f104 0010 	add.w	r0, r4, #16
9001012a:	f000 fedb 	bl	90010ee4 <xTaskRemoveFromEventList>
9001012e:	2800      	cmp	r0, #0
90010130:	d0f1      	beq.n	90010116 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
90010132:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001013a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9001013e:	f3bf 8f4f 	dsb	sy
90010142:	f3bf 8f6f 	isb	sy
90010146:	e7e6      	b.n	90010116 <xQueueSemaphoreTake+0x2de>

90010148 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
90010148:	b1a8      	cbz	r0, 90010176 <xQueueTakeMutexRecursive+0x2e>
	{
9001014a:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9001014c:	6886      	ldr	r6, [r0, #8]
9001014e:	4604      	mov	r4, r0
90010150:	460d      	mov	r5, r1
90010152:	f000 ff6b 	bl	9001102c <xTaskGetCurrentTaskHandle>
90010156:	4286      	cmp	r6, r0
90010158:	d008      	beq.n	9001016c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9001015a:	4629      	mov	r1, r5
9001015c:	4620      	mov	r0, r4
9001015e:	f7ff fe6b 	bl	9000fe38 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
90010162:	b110      	cbz	r0, 9001016a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010164:	68e3      	ldr	r3, [r4, #12]
90010166:	3301      	adds	r3, #1
90010168:	60e3      	str	r3, [r4, #12]
	}
9001016a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9001016c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9001016e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010170:	4403      	add	r3, r0
90010172:	60e3      	str	r3, [r4, #12]
	}
90010174:	bd70      	pop	{r4, r5, r6, pc}
90010176:	f04f 0350 	mov.w	r3, #80	; 0x50
9001017a:	f383 8811 	msr	BASEPRI, r3
9001017e:	f3bf 8f6f 	isb	sy
90010182:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
90010186:	e7fe      	b.n	90010186 <xQueueTakeMutexRecursive+0x3e>

90010188 <xQueueReceiveFromISR>:
{
90010188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9001018c:	b310      	cbz	r0, 900101d4 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001018e:	460e      	mov	r6, r1
90010190:	4604      	mov	r4, r0
90010192:	4617      	mov	r7, r2
90010194:	b191      	cbz	r1, 900101bc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90010196:	f7ff f81f 	bl	9000f1d8 <vPortValidateInterruptPriority>
	__asm volatile
9001019a:	f3ef 8911 	mrs	r9, BASEPRI
9001019e:	f04f 0350 	mov.w	r3, #80	; 0x50
900101a2:	f383 8811 	msr	BASEPRI, r3
900101a6:	f3bf 8f6f 	isb	sy
900101aa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900101ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900101b0:	b9cd      	cbnz	r5, 900101e6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
900101b2:	4628      	mov	r0, r5
	__asm volatile
900101b4:	f389 8811 	msr	BASEPRI, r9
}
900101b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900101bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
900101be:	2b00      	cmp	r3, #0
900101c0:	d0e9      	beq.n	90010196 <xQueueReceiveFromISR+0xe>
	__asm volatile
900101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900101c6:	f383 8811 	msr	BASEPRI, r3
900101ca:	f3bf 8f6f 	isb	sy
900101ce:	f3bf 8f4f 	dsb	sy
900101d2:	e7fe      	b.n	900101d2 <xQueueReceiveFromISR+0x4a>
900101d4:	f04f 0350 	mov.w	r3, #80	; 0x50
900101d8:	f383 8811 	msr	BASEPRI, r3
900101dc:	f3bf 8f6f 	isb	sy
900101e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
900101e4:	e7fe      	b.n	900101e4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
900101e6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900101ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
900101ec:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900101f0:	b142      	cbz	r2, 90010204 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900101f2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900101f4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900101f6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900101f8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900101fa:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900101fc:	d215      	bcs.n	9001022a <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900101fe:	4630      	mov	r0, r6
90010200:	f017 fb3d 	bl	9002787e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90010204:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
90010206:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9001020a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9001020c:	d009      	beq.n	90010222 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9001020e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
90010212:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90010214:	b25b      	sxtb	r3, r3
90010216:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9001021a:	f389 8811 	msr	BASEPRI, r9
}
9001021e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010222:	6923      	ldr	r3, [r4, #16]
90010224:	b923      	cbnz	r3, 90010230 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
90010226:	2001      	movs	r0, #1
90010228:	e7c4      	b.n	900101b4 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9001022a:	6821      	ldr	r1, [r4, #0]
9001022c:	60e1      	str	r1, [r4, #12]
9001022e:	e7e6      	b.n	900101fe <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010230:	f104 0010 	add.w	r0, r4, #16
90010234:	f000 fe56 	bl	90010ee4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
90010238:	2f00      	cmp	r7, #0
9001023a:	d0f4      	beq.n	90010226 <xQueueReceiveFromISR+0x9e>
9001023c:	2800      	cmp	r0, #0
9001023e:	d0f2      	beq.n	90010226 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
90010240:	2301      	movs	r3, #1
			xReturn = pdPASS;
90010242:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
90010244:	603b      	str	r3, [r7, #0]
90010246:	e7b5      	b.n	900101b4 <xQueueReceiveFromISR+0x2c>

90010248 <vQueueDelete>:
	configASSERT( pxQueue );
90010248:	b1e0      	cbz	r0, 90010284 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9001024a:	4b21      	ldr	r3, [pc, #132]	; (900102d0 <vQueueDelete+0x88>)
9001024c:	685a      	ldr	r2, [r3, #4]
9001024e:	4290      	cmp	r0, r2
90010250:	d02b      	beq.n	900102aa <vQueueDelete+0x62>
90010252:	68da      	ldr	r2, [r3, #12]
90010254:	4290      	cmp	r0, r2
90010256:	d02a      	beq.n	900102ae <vQueueDelete+0x66>
90010258:	695a      	ldr	r2, [r3, #20]
9001025a:	4290      	cmp	r0, r2
9001025c:	d029      	beq.n	900102b2 <vQueueDelete+0x6a>
9001025e:	69da      	ldr	r2, [r3, #28]
90010260:	4290      	cmp	r0, r2
90010262:	d028      	beq.n	900102b6 <vQueueDelete+0x6e>
90010264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010266:	4290      	cmp	r0, r2
90010268:	d027      	beq.n	900102ba <vQueueDelete+0x72>
9001026a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9001026c:	4290      	cmp	r0, r2
9001026e:	d014      	beq.n	9001029a <vQueueDelete+0x52>
90010270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90010272:	4290      	cmp	r0, r2
90010274:	d023      	beq.n	900102be <vQueueDelete+0x76>
90010276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90010278:	4290      	cmp	r0, r2
9001027a:	d022      	beq.n	900102c2 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9001027c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
90010280:	b14b      	cbz	r3, 90010296 <vQueueDelete+0x4e>
}
90010282:	4770      	bx	lr
	__asm volatile
90010284:	f04f 0350 	mov.w	r3, #80	; 0x50
90010288:	f383 8811 	msr	BASEPRI, r3
9001028c:	f3bf 8f6f 	isb	sy
90010290:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010294:	e7fe      	b.n	90010294 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
90010296:	f7fe bd55 	b.w	9000ed44 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001029a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9001029c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
900102a0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 900102c8 <vQueueDelete+0x80>
900102a4:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
900102a8:	e7e8      	b.n	9001027c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900102aa:	2200      	movs	r2, #0
900102ac:	e7f6      	b.n	9001029c <vQueueDelete+0x54>
900102ae:	2201      	movs	r2, #1
900102b0:	e7f4      	b.n	9001029c <vQueueDelete+0x54>
900102b2:	2202      	movs	r2, #2
900102b4:	e7f2      	b.n	9001029c <vQueueDelete+0x54>
900102b6:	2203      	movs	r2, #3
900102b8:	e7f0      	b.n	9001029c <vQueueDelete+0x54>
900102ba:	2204      	movs	r2, #4
900102bc:	e7ee      	b.n	9001029c <vQueueDelete+0x54>
900102be:	2206      	movs	r2, #6
900102c0:	e7ec      	b.n	9001029c <vQueueDelete+0x54>
900102c2:	2207      	movs	r2, #7
900102c4:	e7ea      	b.n	9001029c <vQueueDelete+0x54>
900102c6:	bf00      	nop
	...
900102d0:	24026ae0 	.word	0x24026ae0

900102d4 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
900102d4:	4b12      	ldr	r3, [pc, #72]	; (90010320 <vQueueAddToRegistry+0x4c>)
900102d6:	681a      	ldr	r2, [r3, #0]
900102d8:	b17a      	cbz	r2, 900102fa <vQueueAddToRegistry+0x26>
900102da:	689a      	ldr	r2, [r3, #8]
900102dc:	b162      	cbz	r2, 900102f8 <vQueueAddToRegistry+0x24>
900102de:	691a      	ldr	r2, [r3, #16]
900102e0:	b192      	cbz	r2, 90010308 <vQueueAddToRegistry+0x34>
900102e2:	699a      	ldr	r2, [r3, #24]
900102e4:	b192      	cbz	r2, 9001030c <vQueueAddToRegistry+0x38>
900102e6:	6a1a      	ldr	r2, [r3, #32]
900102e8:	b192      	cbz	r2, 90010310 <vQueueAddToRegistry+0x3c>
900102ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900102ec:	b192      	cbz	r2, 90010314 <vQueueAddToRegistry+0x40>
900102ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900102f0:	b192      	cbz	r2, 90010318 <vQueueAddToRegistry+0x44>
900102f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900102f4:	b192      	cbz	r2, 9001031c <vQueueAddToRegistry+0x48>
	}
900102f6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900102f8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
900102fa:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
900102fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90010302:	f8cc 0004 	str.w	r0, [ip, #4]
	}
90010306:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90010308:	2202      	movs	r2, #2
9001030a:	e7f6      	b.n	900102fa <vQueueAddToRegistry+0x26>
9001030c:	2203      	movs	r2, #3
9001030e:	e7f4      	b.n	900102fa <vQueueAddToRegistry+0x26>
90010310:	2204      	movs	r2, #4
90010312:	e7f2      	b.n	900102fa <vQueueAddToRegistry+0x26>
90010314:	2205      	movs	r2, #5
90010316:	e7f0      	b.n	900102fa <vQueueAddToRegistry+0x26>
90010318:	2206      	movs	r2, #6
9001031a:	e7ee      	b.n	900102fa <vQueueAddToRegistry+0x26>
9001031c:	2207      	movs	r2, #7
9001031e:	e7ec      	b.n	900102fa <vQueueAddToRegistry+0x26>
90010320:	24026ae0 	.word	0x24026ae0

90010324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90010324:	b570      	push	{r4, r5, r6, lr}
90010326:	4605      	mov	r5, r0
90010328:	460e      	mov	r6, r1
9001032a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9001032c:	f7fe fe22 	bl	9000ef74 <vPortEnterCritical>
90010330:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
90010334:	2bff      	cmp	r3, #255	; 0xff
90010336:	d102      	bne.n	9001033e <vQueueWaitForMessageRestricted+0x1a>
90010338:	2300      	movs	r3, #0
9001033a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9001033e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
90010342:	2bff      	cmp	r3, #255	; 0xff
90010344:	d102      	bne.n	9001034c <vQueueWaitForMessageRestricted+0x28>
90010346:	2300      	movs	r3, #0
90010348:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9001034c:	f7fe fe34 	bl	9000efb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90010350:	6bab      	ldr	r3, [r5, #56]	; 0x38
90010352:	2b00      	cmp	r3, #0
90010354:	d043      	beq.n	900103de <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
90010356:	f7fe fe0d 	bl	9000ef74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001035a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9001035e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010360:	2c00      	cmp	r4, #0
90010362:	dd14      	ble.n	9001038e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010364:	f105 0624 	add.w	r6, r5, #36	; 0x24
90010368:	e003      	b.n	90010372 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9001036a:	1e63      	subs	r3, r4, #1
9001036c:	b2da      	uxtb	r2, r3
9001036e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010370:	b16a      	cbz	r2, 9001038e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010374:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010376:	b153      	cbz	r3, 9001038e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010378:	f000 fdb4 	bl	90010ee4 <xTaskRemoveFromEventList>
9001037c:	2800      	cmp	r0, #0
9001037e:	d0f4      	beq.n	9001036a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
90010380:	f000 fe4e 	bl	90011020 <vTaskMissedYield>
			--cTxLock;
90010384:	1e63      	subs	r3, r4, #1
90010386:	b2da      	uxtb	r2, r3
90010388:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001038a:	2a00      	cmp	r2, #0
9001038c:	d1f1      	bne.n	90010372 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9001038e:	23ff      	movs	r3, #255	; 0xff
90010390:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
90010394:	f7fe fe10 	bl	9000efb8 <vPortExitCritical>
	taskENTER_CRITICAL();
90010398:	f7fe fdec 	bl	9000ef74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001039c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
900103a0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900103a2:	2c00      	cmp	r4, #0
900103a4:	dd14      	ble.n	900103d0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900103a6:	f105 0610 	add.w	r6, r5, #16
900103aa:	e003      	b.n	900103b4 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
900103ac:	1e63      	subs	r3, r4, #1
900103ae:	b2da      	uxtb	r2, r3
900103b0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900103b2:	b16a      	cbz	r2, 900103d0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900103b4:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900103b6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900103b8:	b153      	cbz	r3, 900103d0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900103ba:	f000 fd93 	bl	90010ee4 <xTaskRemoveFromEventList>
900103be:	2800      	cmp	r0, #0
900103c0:	d0f4      	beq.n	900103ac <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
900103c2:	f000 fe2d 	bl	90011020 <vTaskMissedYield>
				--cRxLock;
900103c6:	1e63      	subs	r3, r4, #1
900103c8:	b2da      	uxtb	r2, r3
900103ca:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900103cc:	2a00      	cmp	r2, #0
900103ce:	d1f1      	bne.n	900103b4 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
900103d0:	23ff      	movs	r3, #255	; 0xff
900103d2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
900103d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
900103da:	f7fe bded 	b.w	9000efb8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
900103de:	4622      	mov	r2, r4
900103e0:	4631      	mov	r1, r6
900103e2:	f105 0024 	add.w	r0, r5, #36	; 0x24
900103e6:	f000 fd33 	bl	90010e50 <vTaskPlaceOnEventListRestricted>
900103ea:	e7b4      	b.n	90010356 <vQueueWaitForMessageRestricted+0x32>

900103ec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
900103ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900103f0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
900103f2:	f7fe fdbf 	bl	9000ef74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
900103f6:	4a34      	ldr	r2, [pc, #208]	; (900104c8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
900103f8:	4e34      	ldr	r6, [pc, #208]	; (900104cc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
900103fa:	6813      	ldr	r3, [r2, #0]
900103fc:	3301      	adds	r3, #1
900103fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90010400:	6833      	ldr	r3, [r6, #0]
90010402:	2b00      	cmp	r3, #0
90010404:	d032      	beq.n	9001046c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90010406:	4c32      	ldr	r4, [pc, #200]	; (900104d0 <prvAddNewTaskToReadyList+0xe4>)
90010408:	6823      	ldr	r3, [r4, #0]
9001040a:	b33b      	cbz	r3, 9001045c <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001040c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9001040e:	4f31      	ldr	r7, [pc, #196]	; (900104d4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90010410:	4a31      	ldr	r2, [pc, #196]	; (900104d8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90010412:	4932      	ldr	r1, [pc, #200]	; (900104dc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
90010414:	6813      	ldr	r3, [r2, #0]
90010416:	3301      	adds	r3, #1
90010418:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9001041a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9001041c:	680b      	ldr	r3, [r1, #0]
9001041e:	4283      	cmp	r3, r0
90010420:	d200      	bcs.n	90010424 <prvAddNewTaskToReadyList+0x38>
90010422:	6008      	str	r0, [r1, #0]
90010424:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90010428:	1d29      	adds	r1, r5, #4
9001042a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9001042e:	f7fe fcfd 	bl	9000ee2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90010432:	f7fe fdc1 	bl	9000efb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90010436:	6823      	ldr	r3, [r4, #0]
90010438:	b173      	cbz	r3, 90010458 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9001043a:	6832      	ldr	r2, [r6, #0]
9001043c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9001043e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90010440:	429a      	cmp	r2, r3
90010442:	d209      	bcs.n	90010458 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
90010444:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001044c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010450:	f3bf 8f4f 	dsb	sy
90010454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90010458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001045c:	6833      	ldr	r3, [r6, #0]
9001045e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010462:	4f1c      	ldr	r7, [pc, #112]	; (900104d4 <prvAddNewTaskToReadyList+0xe8>)
90010464:	4283      	cmp	r3, r0
90010466:	d8d3      	bhi.n	90010410 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
90010468:	6035      	str	r5, [r6, #0]
9001046a:	e7d1      	b.n	90010410 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9001046c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9001046e:	6813      	ldr	r3, [r2, #0]
90010470:	2b01      	cmp	r3, #1
90010472:	d003      	beq.n	9001047c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90010474:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010476:	4f17      	ldr	r7, [pc, #92]	; (900104d4 <prvAddNewTaskToReadyList+0xe8>)
90010478:	4c15      	ldr	r4, [pc, #84]	; (900104d0 <prvAddNewTaskToReadyList+0xe4>)
9001047a:	e7c9      	b.n	90010410 <prvAddNewTaskToReadyList+0x24>
9001047c:	4f15      	ldr	r7, [pc, #84]	; (900104d4 <prvAddNewTaskToReadyList+0xe8>)
9001047e:	463c      	mov	r4, r7
90010480:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010484:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90010486:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010488:	f7fe fcc0 	bl	9000ee0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9001048c:	45a0      	cmp	r8, r4
9001048e:	d1f9      	bne.n	90010484 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
90010490:	f8df 9060 	ldr.w	r9, [pc, #96]	; 900104f4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
90010494:	f8df 8060 	ldr.w	r8, [pc, #96]	; 900104f8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
90010498:	4648      	mov	r0, r9
9001049a:	4c0d      	ldr	r4, [pc, #52]	; (900104d0 <prvAddNewTaskToReadyList+0xe4>)
9001049c:	f7fe fcb6 	bl	9000ee0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
900104a0:	4640      	mov	r0, r8
900104a2:	f7fe fcb3 	bl	9000ee0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
900104a6:	480e      	ldr	r0, [pc, #56]	; (900104e0 <prvAddNewTaskToReadyList+0xf4>)
900104a8:	f7fe fcb0 	bl	9000ee0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
900104ac:	480d      	ldr	r0, [pc, #52]	; (900104e4 <prvAddNewTaskToReadyList+0xf8>)
900104ae:	f7fe fcad 	bl	9000ee0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
900104b2:	480d      	ldr	r0, [pc, #52]	; (900104e8 <prvAddNewTaskToReadyList+0xfc>)
900104b4:	f7fe fcaa 	bl	9000ee0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
900104b8:	4b0c      	ldr	r3, [pc, #48]	; (900104ec <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
900104ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
900104bc:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
900104c0:	4b0b      	ldr	r3, [pc, #44]	; (900104f0 <prvAddNewTaskToReadyList+0x104>)
900104c2:	f8c3 8000 	str.w	r8, [r3]
}
900104c6:	e7a3      	b.n	90010410 <prvAddNewTaskToReadyList+0x24>
900104c8:	24026f8c 	.word	0x24026f8c
900104cc:	24026b20 	.word	0x24026b20
900104d0:	24026fe8 	.word	0x24026fe8
900104d4:	24026b2c 	.word	0x24026b2c
900104d8:	24026f98 	.word	0x24026f98
900104dc:	24026f9c 	.word	0x24026f9c
900104e0:	24026fd4 	.word	0x24026fd4
900104e4:	24027000 	.word	0x24027000
900104e8:	24026fec 	.word	0x24026fec
900104ec:	24026b24 	.word	0x24026b24
900104f0:	24026b28 	.word	0x24026b28
900104f4:	24026fa0 	.word	0x24026fa0
900104f8:	24026fb4 	.word	0x24026fb4

900104fc <prvIdleTask>:
{
900104fc:	b580      	push	{r7, lr}
900104fe:	4c22      	ldr	r4, [pc, #136]	; (90010588 <prvIdleTask+0x8c>)
				taskYIELD();
90010500:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90010504:	4e21      	ldr	r6, [pc, #132]	; (9001058c <prvIdleTask+0x90>)
90010506:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9001050a:	4d21      	ldr	r5, [pc, #132]	; (90010590 <prvIdleTask+0x94>)
9001050c:	4f21      	ldr	r7, [pc, #132]	; (90010594 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9001050e:	6823      	ldr	r3, [r4, #0]
90010510:	b353      	cbz	r3, 90010568 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
90010512:	f7fe fd2f 	bl	9000ef74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010516:	68f3      	ldr	r3, [r6, #12]
90010518:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9001051c:	f10a 0004 	add.w	r0, sl, #4
90010520:	f7fe fcac 	bl	9000ee7c <uxListRemove>
				--uxCurrentNumberOfTasks;
90010524:	682b      	ldr	r3, [r5, #0]
90010526:	3b01      	subs	r3, #1
90010528:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9001052a:	6823      	ldr	r3, [r4, #0]
9001052c:	3b01      	subs	r3, #1
9001052e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
90010530:	f7fe fd42 	bl	9000efb8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90010534:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
90010538:	b163      	cbz	r3, 90010554 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9001053a:	2b01      	cmp	r3, #1
9001053c:	d020      	beq.n	90010580 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9001053e:	2b02      	cmp	r3, #2
90010540:	d0e5      	beq.n	9001050e <prvIdleTask+0x12>
90010542:	f04f 0350 	mov.w	r3, #80	; 0x50
90010546:	f383 8811 	msr	BASEPRI, r3
9001054a:	f3bf 8f6f 	isb	sy
9001054e:	f3bf 8f4f 	dsb	sy
90010552:	e7fe      	b.n	90010552 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
90010554:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
90010558:	f7fe fbf4 	bl	9000ed44 <vPortFree>
				vPortFree( pxTCB );
9001055c:	4650      	mov	r0, sl
9001055e:	f7fe fbf1 	bl	9000ed44 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90010562:	6823      	ldr	r3, [r4, #0]
90010564:	2b00      	cmp	r3, #0
90010566:	d1d4      	bne.n	90010512 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90010568:	683b      	ldr	r3, [r7, #0]
9001056a:	2b01      	cmp	r3, #1
9001056c:	d905      	bls.n	9001057a <prvIdleTask+0x7e>
				taskYIELD();
9001056e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
90010572:	f3bf 8f4f 	dsb	sy
90010576:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9001057a:	f7f3 fd81 	bl	90004080 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9001057e:	e7c6      	b.n	9001050e <prvIdleTask+0x12>
				vPortFree( pxTCB );
90010580:	4650      	mov	r0, sl
90010582:	f7fe fbdf 	bl	9000ed44 <vPortFree>
90010586:	e7c2      	b.n	9001050e <prvIdleTask+0x12>
90010588:	24026f90 	.word	0x24026f90
9001058c:	24027000 	.word	0x24027000
90010590:	24026f8c 	.word	0x24026f8c
90010594:	24026b2c 	.word	0x24026b2c

90010598 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010598:	4b4a      	ldr	r3, [pc, #296]	; (900106c4 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9001059a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9001059e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
900105a0:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
900105a2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
900105a4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
900105a6:	2e00      	cmp	r6, #0
900105a8:	d040      	beq.n	9001062c <xTaskIncrementTick.part.0+0x94>
900105aa:	f8df b12c 	ldr.w	fp, [pc, #300]	; 900106d8 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
900105ae:	f8db 3000 	ldr.w	r3, [fp]
900105b2:	429e      	cmp	r6, r3
900105b4:	d347      	bcc.n	90010646 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900105b6:	4f44      	ldr	r7, [pc, #272]	; (900106c8 <xTaskIncrementTick.part.0+0x130>)
900105b8:	683b      	ldr	r3, [r7, #0]
900105ba:	681d      	ldr	r5, [r3, #0]
900105bc:	2d00      	cmp	r5, #0
900105be:	d077      	beq.n	900106b0 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
900105c0:	2500      	movs	r5, #0
900105c2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 900106dc <xTaskIncrementTick.part.0+0x144>
900105c6:	f8df a118 	ldr.w	sl, [pc, #280]	; 900106e0 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
900105ca:	f8df 8118 	ldr.w	r8, [pc, #280]	; 900106e4 <xTaskIncrementTick.part.0+0x14c>
900105ce:	e022      	b.n	90010616 <xTaskIncrementTick.part.0+0x7e>
900105d0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900105d2:	f7fe fc53 	bl	9000ee7c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
900105d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900105d8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
900105dc:	9901      	ldr	r1, [sp, #4]
900105de:	b113      	cbz	r3, 900105e6 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900105e0:	f7fe fc4c 	bl	9000ee7c <uxListRemove>
900105e4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
900105e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900105e8:	f8d8 2000 	ldr.w	r2, [r8]
900105ec:	eb03 0083 	add.w	r0, r3, r3, lsl #2
900105f0:	4293      	cmp	r3, r2
900105f2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
900105f6:	d901      	bls.n	900105fc <xTaskIncrementTick.part.0+0x64>
900105f8:	f8c8 3000 	str.w	r3, [r8]
900105fc:	f7fe fc16 	bl	9000ee2c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010600:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010604:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90010608:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9001060a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9001060c:	4291      	cmp	r1, r2
9001060e:	bf28      	it	cs
90010610:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010612:	2b00      	cmp	r3, #0
90010614:	d050      	beq.n	900106b8 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010616:	683b      	ldr	r3, [r7, #0]
90010618:	68db      	ldr	r3, [r3, #12]
9001061a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9001061c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9001061e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
90010620:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010622:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
90010624:	d2d4      	bcs.n	900105d0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
90010626:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9001062a:	e011      	b.n	90010650 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9001062c:	4b26      	ldr	r3, [pc, #152]	; (900106c8 <xTaskIncrementTick.part.0+0x130>)
9001062e:	681a      	ldr	r2, [r3, #0]
90010630:	6812      	ldr	r2, [r2, #0]
90010632:	b30a      	cbz	r2, 90010678 <xTaskIncrementTick.part.0+0xe0>
90010634:	f04f 0350 	mov.w	r3, #80	; 0x50
90010638:	f383 8811 	msr	BASEPRI, r3
9001063c:	f3bf 8f6f 	isb	sy
90010640:	f3bf 8f4f 	dsb	sy
90010644:	e7fe      	b.n	90010644 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
90010646:	2500      	movs	r5, #0
90010648:	f8df 9090 	ldr.w	r9, [pc, #144]	; 900106dc <xTaskIncrementTick.part.0+0x144>
9001064c:	f8df a090 	ldr.w	sl, [pc, #144]	; 900106e0 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010650:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
90010654:	491d      	ldr	r1, [pc, #116]	; (900106cc <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9001065c:	009b      	lsls	r3, r3, #2
9001065e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
90010662:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
90010664:	2a02      	cmp	r2, #2
90010666:	bf28      	it	cs
90010668:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9001066a:	2b00      	cmp	r3, #0
}
9001066c:	bf0c      	ite	eq
9001066e:	4628      	moveq	r0, r5
90010670:	2001      	movne	r0, #1
90010672:	b003      	add	sp, #12
90010674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
90010678:	4a15      	ldr	r2, [pc, #84]	; (900106d0 <xTaskIncrementTick.part.0+0x138>)
9001067a:	6818      	ldr	r0, [r3, #0]
9001067c:	6811      	ldr	r1, [r2, #0]
9001067e:	6019      	str	r1, [r3, #0]
90010680:	4914      	ldr	r1, [pc, #80]	; (900106d4 <xTaskIncrementTick.part.0+0x13c>)
90010682:	6010      	str	r0, [r2, #0]
90010684:	680a      	ldr	r2, [r1, #0]
90010686:	3201      	adds	r2, #1
90010688:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9001068a:	681a      	ldr	r2, [r3, #0]
9001068c:	6812      	ldr	r2, [r2, #0]
9001068e:	b932      	cbnz	r2, 9001069e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90010690:	f8df b044 	ldr.w	fp, [pc, #68]	; 900106d8 <xTaskIncrementTick.part.0+0x140>
90010694:	f04f 33ff 	mov.w	r3, #4294967295
90010698:	f8cb 3000 	str.w	r3, [fp]
9001069c:	e787      	b.n	900105ae <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001069e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900106a0:	f8df b034 	ldr.w	fp, [pc, #52]	; 900106d8 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900106a4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900106a6:	68db      	ldr	r3, [r3, #12]
900106a8:	685b      	ldr	r3, [r3, #4]
900106aa:	f8cb 3000 	str.w	r3, [fp]
	}
}
900106ae:	e77e      	b.n	900105ae <xTaskIncrementTick.part.0+0x16>
900106b0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 900106dc <xTaskIncrementTick.part.0+0x144>
900106b4:	f8df a028 	ldr.w	sl, [pc, #40]	; 900106e0 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900106b8:	f04f 33ff 	mov.w	r3, #4294967295
900106bc:	f8cb 3000 	str.w	r3, [fp]
					break;
900106c0:	e7c6      	b.n	90010650 <xTaskIncrementTick.part.0+0xb8>
900106c2:	bf00      	nop
900106c4:	24027014 	.word	0x24027014
900106c8:	24026b24 	.word	0x24026b24
900106cc:	24027018 	.word	0x24027018
900106d0:	24026b28 	.word	0x24026b28
900106d4:	24026fcc 	.word	0x24026fcc
900106d8:	24026fc8 	.word	0x24026fc8
900106dc:	24026b2c 	.word	0x24026b2c
900106e0:	24026b20 	.word	0x24026b20
900106e4:	24026f9c 	.word	0x24026f9c

900106e8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
900106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
900106ec:	4d41      	ldr	r5, [pc, #260]	; (900107f4 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
900106ee:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
900106f0:	f7fe fc40 	bl	9000ef74 <vPortEnterCritical>
		--uxSchedulerSuspended;
900106f4:	682b      	ldr	r3, [r5, #0]
900106f6:	3b01      	subs	r3, #1
900106f8:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900106fa:	682b      	ldr	r3, [r5, #0]
900106fc:	2b00      	cmp	r3, #0
900106fe:	d161      	bne.n	900107c4 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90010700:	4b3d      	ldr	r3, [pc, #244]	; (900107f8 <xTaskResumeAll.part.0+0x110>)
90010702:	681b      	ldr	r3, [r3, #0]
90010704:	2b00      	cmp	r3, #0
90010706:	d05d      	beq.n	900107c4 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010708:	4e3c      	ldr	r6, [pc, #240]	; (900107fc <xTaskResumeAll.part.0+0x114>)
9001070a:	6833      	ldr	r3, [r6, #0]
9001070c:	2b00      	cmp	r3, #0
9001070e:	d06e      	beq.n	900107ee <xTaskResumeAll.part.0+0x106>
90010710:	4f3b      	ldr	r7, [pc, #236]	; (90010800 <xTaskResumeAll.part.0+0x118>)
90010712:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 90010810 <xTaskResumeAll.part.0+0x128>
90010716:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 90010814 <xTaskResumeAll.part.0+0x12c>
9001071a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 90010818 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001071e:	68f3      	ldr	r3, [r6, #12]
90010720:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010722:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010726:	f104 0018 	add.w	r0, r4, #24
9001072a:	f7fe fba7 	bl	9000ee7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9001072e:	4658      	mov	r0, fp
90010730:	f7fe fba4 	bl	9000ee7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90010734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010736:	683a      	ldr	r2, [r7, #0]
90010738:	4659      	mov	r1, fp
9001073a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9001073e:	4293      	cmp	r3, r2
90010740:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010744:	d900      	bls.n	90010748 <xTaskResumeAll.part.0+0x60>
90010746:	603b      	str	r3, [r7, #0]
90010748:	f7fe fb70 	bl	9000ee2c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9001074c:	f8d8 3000 	ldr.w	r3, [r8]
90010750:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010754:	429a      	cmp	r2, r3
90010756:	d33d      	bcc.n	900107d4 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
90010758:	2301      	movs	r3, #1
9001075a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9001075e:	6833      	ldr	r3, [r6, #0]
90010760:	2b00      	cmp	r3, #0
90010762:	d1dc      	bne.n	9001071e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010764:	4b27      	ldr	r3, [pc, #156]	; (90010804 <xTaskResumeAll.part.0+0x11c>)
90010766:	681a      	ldr	r2, [r3, #0]
90010768:	6812      	ldr	r2, [r2, #0]
9001076a:	2a00      	cmp	r2, #0
9001076c:	d03a      	beq.n	900107e4 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001076e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010770:	4b25      	ldr	r3, [pc, #148]	; (90010808 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010772:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010774:	68d2      	ldr	r2, [r2, #12]
90010776:	6852      	ldr	r2, [r2, #4]
90010778:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9001077a:	4e24      	ldr	r6, [pc, #144]	; (9001080c <xTaskResumeAll.part.0+0x124>)
9001077c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9001077e:	b194      	cbz	r4, 900107a6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
90010780:	2701      	movs	r7, #1
90010782:	e006      	b.n	90010792 <xTaskResumeAll.part.0+0xaa>
90010784:	f7ff ff08 	bl	90010598 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
90010788:	b108      	cbz	r0, 9001078e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9001078a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9001078e:	3c01      	subs	r4, #1
90010790:	d008      	beq.n	900107a4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010792:	682b      	ldr	r3, [r5, #0]
90010794:	2b00      	cmp	r3, #0
90010796:	d0f5      	beq.n	90010784 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
90010798:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9001079a:	3c01      	subs	r4, #1
		++xPendedTicks;
9001079c:	f103 0301 	add.w	r3, r3, #1
900107a0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
900107a2:	d1f6      	bne.n	90010792 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
900107a4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
900107a6:	f8da 3000 	ldr.w	r3, [sl]
900107aa:	b15b      	cbz	r3, 900107c4 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
900107ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900107b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900107b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900107b8:	f3bf 8f4f 	dsb	sy
900107bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
900107c0:	2001      	movs	r0, #1
900107c2:	e000      	b.n	900107c6 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
900107c4:	2000      	movs	r0, #0
900107c6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
900107c8:	f7fe fbf6 	bl	9000efb8 <vPortExitCritical>
}
900107cc:	9801      	ldr	r0, [sp, #4]
900107ce:	b003      	add	sp, #12
900107d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900107d4:	6833      	ldr	r3, [r6, #0]
900107d6:	2b00      	cmp	r3, #0
900107d8:	d1a1      	bne.n	9001071e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900107da:	4b0a      	ldr	r3, [pc, #40]	; (90010804 <xTaskResumeAll.part.0+0x11c>)
900107dc:	681a      	ldr	r2, [r3, #0]
900107de:	6812      	ldr	r2, [r2, #0]
900107e0:	2a00      	cmp	r2, #0
900107e2:	d1c4      	bne.n	9001076e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
900107e4:	4b08      	ldr	r3, [pc, #32]	; (90010808 <xTaskResumeAll.part.0+0x120>)
900107e6:	f04f 32ff 	mov.w	r2, #4294967295
900107ea:	601a      	str	r2, [r3, #0]
900107ec:	e7c5      	b.n	9001077a <xTaskResumeAll.part.0+0x92>
900107ee:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010818 <xTaskResumeAll.part.0+0x130>
900107f2:	e7c2      	b.n	9001077a <xTaskResumeAll.part.0+0x92>
900107f4:	24026f94 	.word	0x24026f94
900107f8:	24026f8c 	.word	0x24026f8c
900107fc:	24026fd4 	.word	0x24026fd4
90010800:	24026f9c 	.word	0x24026f9c
90010804:	24026b24 	.word	0x24026b24
90010808:	24026fc8 	.word	0x24026fc8
9001080c:	24026fd0 	.word	0x24026fd0
90010810:	24026b2c 	.word	0x24026b2c
90010814:	24026b20 	.word	0x24026b20
90010818:	24027018 	.word	0x24027018

9001081c <xTaskCreateStatic>:
	{
9001081c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010820:	b083      	sub	sp, #12
90010822:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
90010824:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
90010828:	b1bb      	cbz	r3, 9001085a <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9001082a:	b16c      	cbz	r4, 90010848 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9001082c:	2360      	movs	r3, #96	; 0x60
9001082e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
90010830:	9b01      	ldr	r3, [sp, #4]
90010832:	2b60      	cmp	r3, #96	; 0x60
90010834:	d01a      	beq.n	9001086c <xTaskCreateStatic+0x50>
90010836:	f04f 0350 	mov.w	r3, #80	; 0x50
9001083a:	f383 8811 	msr	BASEPRI, r3
9001083e:	f3bf 8f6f 	isb	sy
90010842:	f3bf 8f4f 	dsb	sy
90010846:	e7fe      	b.n	90010846 <xTaskCreateStatic+0x2a>
90010848:	f04f 0350 	mov.w	r3, #80	; 0x50
9001084c:	f383 8811 	msr	BASEPRI, r3
90010850:	f3bf 8f6f 	isb	sy
90010854:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90010858:	e7fe      	b.n	90010858 <xTaskCreateStatic+0x3c>
9001085a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001085e:	f383 8811 	msr	BASEPRI, r3
90010862:	f3bf 8f6f 	isb	sy
90010866:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9001086a:	e7fe      	b.n	9001086a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9001086c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001086e:	0096      	lsls	r6, r2, #2
90010870:	4607      	mov	r7, r0
90010872:	460d      	mov	r5, r1
90010874:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010876:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010878:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9001087a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001087c:	4632      	mov	r2, r6
9001087e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010880:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010884:	f016 ff1a 	bl	900276bc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010888:	1f32      	subs	r2, r6, #4
9001088a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9001088c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9001088e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
90010892:	2d00      	cmp	r5, #0
90010894:	d069      	beq.n	9001096a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010896:	782b      	ldrb	r3, [r5, #0]
90010898:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9001089c:	2b00      	cmp	r3, #0
9001089e:	d03b      	beq.n	90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108a0:	786b      	ldrb	r3, [r5, #1]
900108a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
900108a6:	2b00      	cmp	r3, #0
900108a8:	d036      	beq.n	90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108aa:	78ab      	ldrb	r3, [r5, #2]
900108ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
900108b0:	b393      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108b2:	78eb      	ldrb	r3, [r5, #3]
900108b4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
900108b8:	b373      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108ba:	792b      	ldrb	r3, [r5, #4]
900108bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
900108c0:	b353      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108c2:	796b      	ldrb	r3, [r5, #5]
900108c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
900108c8:	b333      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108ca:	79ab      	ldrb	r3, [r5, #6]
900108cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
900108d0:	b313      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108d2:	79eb      	ldrb	r3, [r5, #7]
900108d4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
900108d8:	b1f3      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108da:	7a2b      	ldrb	r3, [r5, #8]
900108dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
900108e0:	b1d3      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108e2:	7a6b      	ldrb	r3, [r5, #9]
900108e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
900108e8:	b1b3      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108ea:	7aab      	ldrb	r3, [r5, #10]
900108ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
900108f0:	b193      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108f2:	7aeb      	ldrb	r3, [r5, #11]
900108f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
900108f8:	b173      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900108fa:	7b2b      	ldrb	r3, [r5, #12]
900108fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010900:	b153      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010902:	7b6b      	ldrb	r3, [r5, #13]
90010904:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010908:	b133      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001090a:	7bab      	ldrb	r3, [r5, #14]
9001090c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010910:	b113      	cbz	r3, 90010918 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010912:	7beb      	ldrb	r3, [r5, #15]
90010914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010918:	2300      	movs	r3, #0
9001091a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9001091e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
90010920:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010922:	1d20      	adds	r0, r4, #4
90010924:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010926:	6526      	str	r6, [r4, #80]	; 0x50
90010928:	bf28      	it	cs
9001092a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9001092c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9001092e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010930:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010934:	f7fe fa76 	bl	9000ee24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010938:	f104 0018 	add.w	r0, r4, #24
9001093c:	f7fe fa72 	bl	9000ee24 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010940:	4642      	mov	r2, r8
90010942:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
90010944:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010946:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010948:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9001094a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9001094c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9001094e:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010950:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010954:	f7fe fae4 	bl	9000ef20 <pxPortInitialiseStack>
90010958:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9001095a:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9001095c:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9001095e:	f7ff fd45 	bl	900103ec <prvAddNewTaskToReadyList>
	}
90010962:	4620      	mov	r0, r4
90010964:	b003      	add	sp, #12
90010966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9001096a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9001096e:	e7d6      	b.n	9001091e <xTaskCreateStatic+0x102>

90010970 <xTaskCreate>:
	{
90010970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90010974:	0096      	lsls	r6, r2, #2
	{
90010976:	4680      	mov	r8, r0
90010978:	460d      	mov	r5, r1
9001097a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9001097c:	4630      	mov	r0, r6
9001097e:	f7fe f923 	bl	9000ebc8 <pvPortMalloc>
			if( pxStack != NULL )
90010982:	2800      	cmp	r0, #0
90010984:	f000 8083 	beq.w	90010a8e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90010988:	4607      	mov	r7, r0
9001098a:	2060      	movs	r0, #96	; 0x60
9001098c:	f7fe f91c 	bl	9000ebc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
90010990:	4604      	mov	r4, r0
90010992:	2800      	cmp	r0, #0
90010994:	d07f      	beq.n	90010a96 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010996:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90010998:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001099a:	4632      	mov	r2, r6
9001099c:	4638      	mov	r0, r7
9001099e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
900109a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900109a4:	f016 fe8a 	bl	900276bc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900109a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
900109ac:	2d00      	cmp	r5, #0
900109ae:	d078      	beq.n	90010aa2 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109b0:	782b      	ldrb	r3, [r5, #0]
900109b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
900109b6:	2b00      	cmp	r3, #0
900109b8:	d03b      	beq.n	90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109ba:	786b      	ldrb	r3, [r5, #1]
900109bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
900109c0:	2b00      	cmp	r3, #0
900109c2:	d036      	beq.n	90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109c4:	78ab      	ldrb	r3, [r5, #2]
900109c6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
900109ca:	b393      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109cc:	78eb      	ldrb	r3, [r5, #3]
900109ce:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
900109d2:	b373      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109d4:	792b      	ldrb	r3, [r5, #4]
900109d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
900109da:	b353      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109dc:	796b      	ldrb	r3, [r5, #5]
900109de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
900109e2:	b333      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109e4:	79ab      	ldrb	r3, [r5, #6]
900109e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
900109ea:	b313      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109ec:	79eb      	ldrb	r3, [r5, #7]
900109ee:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
900109f2:	b1f3      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109f4:	7a2b      	ldrb	r3, [r5, #8]
900109f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
900109fa:	b1d3      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109fc:	7a6b      	ldrb	r3, [r5, #9]
900109fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010a02:	b1b3      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a04:	7aab      	ldrb	r3, [r5, #10]
90010a06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010a0a:	b193      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a0c:	7aeb      	ldrb	r3, [r5, #11]
90010a0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010a12:	b173      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a14:	7b2b      	ldrb	r3, [r5, #12]
90010a16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010a1a:	b153      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a1c:	7b6b      	ldrb	r3, [r5, #13]
90010a1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010a22:	b133      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a24:	7bab      	ldrb	r3, [r5, #14]
90010a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010a2a:	b113      	cbz	r3, 90010a32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010a2c:	7beb      	ldrb	r3, [r5, #15]
90010a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010a32:	2300      	movs	r3, #0
90010a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90010a38:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
90010a3a:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010a3c:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010a3e:	3e04      	subs	r6, #4
90010a40:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010a42:	6527      	str	r7, [r4, #80]	; 0x50
90010a44:	bf28      	it	cs
90010a46:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90010a48:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90010a4a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010a4c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010a50:	f7fe f9e8 	bl	9000ee24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010a54:	f104 0018 	add.w	r0, r4, #24
90010a58:	f7fe f9e4 	bl	9000ee24 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010a5c:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
90010a60:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010a62:	464a      	mov	r2, r9
90010a64:	4641      	mov	r1, r8
90010a66:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010a6a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010a6c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010a6e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010a70:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010a72:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010a76:	f7fe fa53 	bl	9000ef20 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
90010a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010a7c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
90010a7e:	b103      	cbz	r3, 90010a82 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90010a80:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010a82:	4620      	mov	r0, r4
90010a84:	f7ff fcb2 	bl	900103ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90010a88:	2001      	movs	r0, #1
	}
90010a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010a8e:	f04f 30ff 	mov.w	r0, #4294967295
	}
90010a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
90010a96:	4638      	mov	r0, r7
90010a98:	f7fe f954 	bl	9000ed44 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010a9c:	f04f 30ff 	mov.w	r0, #4294967295
90010aa0:	e7f3      	b.n	90010a8a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010aa2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010aa6:	e7c7      	b.n	90010a38 <xTaskCreate+0xc8>

90010aa8 <vTaskDelay>:
	{
90010aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
90010aaa:	b950      	cbnz	r0, 90010ac2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
90010aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010ab4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010ab8:	f3bf 8f4f 	dsb	sy
90010abc:	f3bf 8f6f 	isb	sy
	}
90010ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90010ac2:	4d1e      	ldr	r5, [pc, #120]	; (90010b3c <vTaskDelay+0x94>)
90010ac4:	682b      	ldr	r3, [r5, #0]
90010ac6:	b143      	cbz	r3, 90010ada <vTaskDelay+0x32>
90010ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
90010acc:	f383 8811 	msr	BASEPRI, r3
90010ad0:	f3bf 8f6f 	isb	sy
90010ad4:	f3bf 8f4f 	dsb	sy
90010ad8:	e7fe      	b.n	90010ad8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
90010ada:	682b      	ldr	r3, [r5, #0]
90010adc:	4604      	mov	r4, r0
90010ade:	3301      	adds	r3, #1
90010ae0:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90010ae2:	4b17      	ldr	r3, [pc, #92]	; (90010b40 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010ae4:	4e17      	ldr	r6, [pc, #92]	; (90010b44 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90010ae6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010ae8:	6830      	ldr	r0, [r6, #0]
90010aea:	3004      	adds	r0, #4
90010aec:	f7fe f9c6 	bl	9000ee7c <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90010af0:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010af2:	6833      	ldr	r3, [r6, #0]
90010af4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90010af6:	d315      	bcc.n	90010b24 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010af8:	4b13      	ldr	r3, [pc, #76]	; (90010b48 <vTaskDelay+0xa0>)
90010afa:	6818      	ldr	r0, [r3, #0]
90010afc:	6831      	ldr	r1, [r6, #0]
90010afe:	3104      	adds	r1, #4
90010b00:	f7fe f9a4 	bl	9000ee4c <vListInsert>
	configASSERT( uxSchedulerSuspended );
90010b04:	682b      	ldr	r3, [r5, #0]
90010b06:	b943      	cbnz	r3, 90010b1a <vTaskDelay+0x72>
90010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b0c:	f383 8811 	msr	BASEPRI, r3
90010b10:	f3bf 8f6f 	isb	sy
90010b14:	f3bf 8f4f 	dsb	sy
90010b18:	e7fe      	b.n	90010b18 <vTaskDelay+0x70>
90010b1a:	f7ff fde5 	bl	900106e8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
90010b1e:	2800      	cmp	r0, #0
90010b20:	d0c4      	beq.n	90010aac <vTaskDelay+0x4>
	}
90010b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010b24:	4b09      	ldr	r3, [pc, #36]	; (90010b4c <vTaskDelay+0xa4>)
90010b26:	6818      	ldr	r0, [r3, #0]
90010b28:	6831      	ldr	r1, [r6, #0]
90010b2a:	3104      	adds	r1, #4
90010b2c:	f7fe f98e 	bl	9000ee4c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
90010b30:	4b07      	ldr	r3, [pc, #28]	; (90010b50 <vTaskDelay+0xa8>)
90010b32:	681a      	ldr	r2, [r3, #0]
90010b34:	4294      	cmp	r4, r2
90010b36:	d2e5      	bcs.n	90010b04 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
90010b38:	601c      	str	r4, [r3, #0]
90010b3a:	e7e3      	b.n	90010b04 <vTaskDelay+0x5c>
90010b3c:	24026f94 	.word	0x24026f94
90010b40:	24027014 	.word	0x24027014
90010b44:	24026b20 	.word	0x24026b20
90010b48:	24026b28 	.word	0x24026b28
90010b4c:	24026b24 	.word	0x24026b24
90010b50:	24026fc8 	.word	0x24026fc8

90010b54 <vTaskStartScheduler>:
{
90010b54:	b570      	push	{r4, r5, r6, lr}
90010b56:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90010b58:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90010b5a:	4668      	mov	r0, sp
90010b5c:	aa02      	add	r2, sp, #8
90010b5e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
90010b60:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90010b64:	f7fe f812 	bl	9000eb8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90010b68:	9d00      	ldr	r5, [sp, #0]
90010b6a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
90010b6e:	b1b8      	cbz	r0, 90010ba0 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
90010b70:	b16d      	cbz	r5, 90010b8e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
90010b72:	2260      	movs	r2, #96	; 0x60
90010b74:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
90010b76:	9a03      	ldr	r2, [sp, #12]
90010b78:	2a60      	cmp	r2, #96	; 0x60
90010b7a:	d01a      	beq.n	90010bb2 <vTaskStartScheduler+0x5e>
90010b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b80:	f383 8811 	msr	BASEPRI, r3
90010b84:	f3bf 8f6f 	isb	sy
90010b88:	f3bf 8f4f 	dsb	sy
90010b8c:	e7fe      	b.n	90010b8c <vTaskStartScheduler+0x38>
90010b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b92:	f383 8811 	msr	BASEPRI, r3
90010b96:	f3bf 8f6f 	isb	sy
90010b9a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90010b9e:	e7fe      	b.n	90010b9e <vTaskStartScheduler+0x4a>
90010ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
90010ba4:	f383 8811 	msr	BASEPRI, r3
90010ba8:	f3bf 8f6f 	isb	sy
90010bac:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90010bb0:	e7fe      	b.n	90010bb0 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010bb2:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010bb4:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010bb6:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010bb8:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010bba:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010bbc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010bc0:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010bc2:	f016 fd7b 	bl	900276bc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010bc6:	1f33      	subs	r3, r6, #4
90010bc8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010bca:	492a      	ldr	r1, [pc, #168]	; (90010c74 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010bcc:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010bce:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010bd0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
90010bd4:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010bd6:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90010bda:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
90010bde:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
90010be0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010be4:	f7fe f91e 	bl	9000ee24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010be8:	f105 0018 	add.w	r0, r5, #24
90010bec:	f7fe f91a 	bl	9000ee24 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010bf0:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010bf2:	4622      	mov	r2, r4
90010bf4:	4920      	ldr	r1, [pc, #128]	; (90010c78 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
90010bf6:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010bf8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010bfa:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010bfc:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010bfe:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010c00:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010c02:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010c06:	f7fe f98b 	bl	9000ef20 <pxPortInitialiseStack>
90010c0a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
90010c0c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010c0e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010c10:	f7ff fbec 	bl	900103ec <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
90010c14:	f000 fca4 	bl	90011560 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
90010c18:	2801      	cmp	r0, #1
90010c1a:	d00c      	beq.n	90010c36 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90010c1c:	3001      	adds	r0, #1
90010c1e:	d001      	beq.n	90010c24 <vTaskStartScheduler+0xd0>
}
90010c20:	b004      	add	sp, #16
90010c22:	bd70      	pop	{r4, r5, r6, pc}
90010c24:	f04f 0350 	mov.w	r3, #80	; 0x50
90010c28:	f383 8811 	msr	BASEPRI, r3
90010c2c:	f3bf 8f6f 	isb	sy
90010c30:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90010c34:	e7fe      	b.n	90010c34 <vTaskStartScheduler+0xe0>
90010c36:	f04f 0350 	mov.w	r3, #80	; 0x50
90010c3a:	f383 8811 	msr	BASEPRI, r3
90010c3e:	f3bf 8f6f 	isb	sy
90010c42:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
90010c46:	4b0d      	ldr	r3, [pc, #52]	; (90010c7c <vTaskStartScheduler+0x128>)
90010c48:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
90010c4c:	490c      	ldr	r1, [pc, #48]	; (90010c80 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
90010c4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90010c50:	4b0c      	ldr	r3, [pc, #48]	; (90010c84 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
90010c52:	4a0d      	ldr	r2, [pc, #52]	; (90010c88 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
90010c54:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90010c56:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
90010c58:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
90010c5a:	b143      	cbz	r3, 90010c6e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
90010c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010c5e:	b10b      	cbz	r3, 90010c64 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010c60:	2000      	movs	r0, #0
90010c62:	4798      	blx	r3
}
90010c64:	b004      	add	sp, #16
90010c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
90010c6a:	f7fe ba15 	b.w	9000f098 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
90010c6e:	6813      	ldr	r3, [r2, #0]
90010c70:	e7f4      	b.n	90010c5c <vTaskStartScheduler+0x108>
90010c72:	bf00      	nop
90010c74:	454c4449 	.word	0x454c4449
90010c78:	900104fd 	.word	0x900104fd
90010c7c:	24026fc8 	.word	0x24026fc8
90010c80:	24026fe8 	.word	0x24026fe8
90010c84:	24027014 	.word	0x24027014
90010c88:	24026b20 	.word	0x24026b20

90010c8c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
90010c8c:	4a02      	ldr	r2, [pc, #8]	; (90010c98 <vTaskSuspendAll+0xc>)
90010c8e:	6813      	ldr	r3, [r2, #0]
90010c90:	3301      	adds	r3, #1
90010c92:	6013      	str	r3, [r2, #0]
}
90010c94:	4770      	bx	lr
90010c96:	bf00      	nop
90010c98:	24026f94 	.word	0x24026f94

90010c9c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
90010c9c:	4b06      	ldr	r3, [pc, #24]	; (90010cb8 <xTaskResumeAll+0x1c>)
90010c9e:	681b      	ldr	r3, [r3, #0]
90010ca0:	b943      	cbnz	r3, 90010cb4 <xTaskResumeAll+0x18>
90010ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
90010ca6:	f383 8811 	msr	BASEPRI, r3
90010caa:	f3bf 8f6f 	isb	sy
90010cae:	f3bf 8f4f 	dsb	sy
90010cb2:	e7fe      	b.n	90010cb2 <xTaskResumeAll+0x16>
90010cb4:	f7ff bd18 	b.w	900106e8 <xTaskResumeAll.part.0>
90010cb8:	24026f94 	.word	0x24026f94

90010cbc <xTaskGetTickCount>:
		xTicks = xTickCount;
90010cbc:	4b01      	ldr	r3, [pc, #4]	; (90010cc4 <xTaskGetTickCount+0x8>)
90010cbe:	6818      	ldr	r0, [r3, #0]
}
90010cc0:	4770      	bx	lr
90010cc2:	bf00      	nop
90010cc4:	24027014 	.word	0x24027014

90010cc8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010cc8:	4b05      	ldr	r3, [pc, #20]	; (90010ce0 <xTaskIncrementTick+0x18>)
90010cca:	681b      	ldr	r3, [r3, #0]
90010ccc:	b90b      	cbnz	r3, 90010cd2 <xTaskIncrementTick+0xa>
90010cce:	f7ff bc63 	b.w	90010598 <xTaskIncrementTick.part.0>
		++xPendedTicks;
90010cd2:	4a04      	ldr	r2, [pc, #16]	; (90010ce4 <xTaskIncrementTick+0x1c>)
}
90010cd4:	2000      	movs	r0, #0
		++xPendedTicks;
90010cd6:	6813      	ldr	r3, [r2, #0]
90010cd8:	3301      	adds	r3, #1
90010cda:	6013      	str	r3, [r2, #0]
}
90010cdc:	4770      	bx	lr
90010cde:	bf00      	nop
90010ce0:	24026f94 	.word	0x24026f94
90010ce4:	24026fd0 	.word	0x24026fd0

90010ce8 <vTaskSetApplicationTaskTag>:
	{
90010ce8:	b538      	push	{r3, r4, r5, lr}
90010cea:	460d      	mov	r5, r1
		if( xTask == NULL )
90010cec:	b138      	cbz	r0, 90010cfe <vTaskSetApplicationTaskTag+0x16>
90010cee:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
90010cf0:	f7fe f940 	bl	9000ef74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010cf4:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
90010cfa:	f7fe b95d 	b.w	9000efb8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
90010cfe:	4b04      	ldr	r3, [pc, #16]	; (90010d10 <vTaskSetApplicationTaskTag+0x28>)
90010d00:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
90010d02:	f7fe f937 	bl	9000ef74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010d06:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
90010d0c:	f7fe b954 	b.w	9000efb8 <vPortExitCritical>
90010d10:	24026b20 	.word	0x24026b20

90010d14 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90010d14:	4b27      	ldr	r3, [pc, #156]	; (90010db4 <vTaskSwitchContext+0xa0>)
90010d16:	681b      	ldr	r3, [r3, #0]
90010d18:	b11b      	cbz	r3, 90010d22 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
90010d1a:	4b27      	ldr	r3, [pc, #156]	; (90010db8 <vTaskSwitchContext+0xa4>)
90010d1c:	2201      	movs	r2, #1
90010d1e:	601a      	str	r2, [r3, #0]
90010d20:	4770      	bx	lr
{
90010d22:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
90010d24:	4a24      	ldr	r2, [pc, #144]	; (90010db8 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
90010d26:	4c25      	ldr	r4, [pc, #148]	; (90010dbc <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
90010d28:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
90010d2a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
90010d2c:	2b00      	cmp	r3, #0
90010d2e:	d036      	beq.n	90010d9e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
90010d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010d32:	b10b      	cbz	r3, 90010d38 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010d34:	2001      	movs	r0, #1
90010d36:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d38:	4d21      	ldr	r5, [pc, #132]	; (90010dc0 <vTaskSwitchContext+0xac>)
90010d3a:	4922      	ldr	r1, [pc, #136]	; (90010dc4 <vTaskSwitchContext+0xb0>)
90010d3c:	682b      	ldr	r3, [r5, #0]
90010d3e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90010d42:	0098      	lsls	r0, r3, #2
90010d44:	0092      	lsls	r2, r2, #2
90010d46:	588a      	ldr	r2, [r1, r2]
90010d48:	b942      	cbnz	r2, 90010d5c <vTaskSwitchContext+0x48>
90010d4a:	b1fb      	cbz	r3, 90010d8c <vTaskSwitchContext+0x78>
90010d4c:	3b01      	subs	r3, #1
90010d4e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90010d52:	0098      	lsls	r0, r3, #2
90010d54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90010d58:	2a00      	cmp	r2, #0
90010d5a:	d0f6      	beq.n	90010d4a <vTaskSwitchContext+0x36>
90010d5c:	4418      	add	r0, r3
90010d5e:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
90010d62:	f8dc 1004 	ldr.w	r1, [ip, #4]
90010d66:	4662      	mov	r2, ip
90010d68:	6849      	ldr	r1, [r1, #4]
90010d6a:	3208      	adds	r2, #8
90010d6c:	4291      	cmp	r1, r2
90010d6e:	f8cc 1004 	str.w	r1, [ip, #4]
90010d72:	d01b      	beq.n	90010dac <vTaskSwitchContext+0x98>
90010d74:	68ca      	ldr	r2, [r1, #12]
90010d76:	6022      	str	r2, [r4, #0]
90010d78:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
90010d7a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
90010d7c:	b1a3      	cbz	r3, 90010da8 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
90010d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010d80:	b11b      	cbz	r3, 90010d8a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010d82:	2000      	movs	r0, #0
}
90010d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
90010d88:	4718      	bx	r3
}
90010d8a:	bd70      	pop	{r4, r5, r6, pc}
90010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d90:	f383 8811 	msr	BASEPRI, r3
90010d94:	f3bf 8f6f 	isb	sy
90010d98:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d9c:	e7fe      	b.n	90010d9c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
90010d9e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
90010da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010da2:	2b00      	cmp	r3, #0
90010da4:	d1c6      	bne.n	90010d34 <vTaskSwitchContext+0x20>
90010da6:	e7c7      	b.n	90010d38 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
90010da8:	6823      	ldr	r3, [r4, #0]
90010daa:	e7e8      	b.n	90010d7e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010dac:	6849      	ldr	r1, [r1, #4]
90010dae:	f8cc 1004 	str.w	r1, [ip, #4]
90010db2:	e7df      	b.n	90010d74 <vTaskSwitchContext+0x60>
90010db4:	24026f94 	.word	0x24026f94
90010db8:	24027018 	.word	0x24027018
90010dbc:	24026b20 	.word	0x24026b20
90010dc0:	24026f9c 	.word	0x24026f9c
90010dc4:	24026b2c 	.word	0x24026b2c

90010dc8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
90010dc8:	b1f0      	cbz	r0, 90010e08 <vTaskPlaceOnEventList+0x40>
{
90010dca:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90010dcc:	4d1a      	ldr	r5, [pc, #104]	; (90010e38 <vTaskPlaceOnEventList+0x70>)
90010dce:	460c      	mov	r4, r1
90010dd0:	6829      	ldr	r1, [r5, #0]
90010dd2:	3118      	adds	r1, #24
90010dd4:	f7fe f83a 	bl	9000ee4c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
90010dd8:	4b18      	ldr	r3, [pc, #96]	; (90010e3c <vTaskPlaceOnEventList+0x74>)
90010dda:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010ddc:	6828      	ldr	r0, [r5, #0]
90010dde:	3004      	adds	r0, #4
90010de0:	f7fe f84c 	bl	9000ee7c <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90010de4:	1c63      	adds	r3, r4, #1
90010de6:	d020      	beq.n	90010e2a <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010de8:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010dea:	682b      	ldr	r3, [r5, #0]
90010dec:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90010dee:	d214      	bcs.n	90010e1a <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010df0:	4b13      	ldr	r3, [pc, #76]	; (90010e40 <vTaskPlaceOnEventList+0x78>)
90010df2:	6818      	ldr	r0, [r3, #0]
90010df4:	6829      	ldr	r1, [r5, #0]
90010df6:	3104      	adds	r1, #4
90010df8:	f7fe f828 	bl	9000ee4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010dfc:	4b11      	ldr	r3, [pc, #68]	; (90010e44 <vTaskPlaceOnEventList+0x7c>)
90010dfe:	681a      	ldr	r2, [r3, #0]
90010e00:	4294      	cmp	r4, r2
90010e02:	d200      	bcs.n	90010e06 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
90010e04:	601c      	str	r4, [r3, #0]
}
90010e06:	bd70      	pop	{r4, r5, r6, pc}
90010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
90010e0c:	f383 8811 	msr	BASEPRI, r3
90010e10:	f3bf 8f6f 	isb	sy
90010e14:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
90010e18:	e7fe      	b.n	90010e18 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e1a:	4b0b      	ldr	r3, [pc, #44]	; (90010e48 <vTaskPlaceOnEventList+0x80>)
90010e1c:	6818      	ldr	r0, [r3, #0]
90010e1e:	6829      	ldr	r1, [r5, #0]
}
90010e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e24:	3104      	adds	r1, #4
90010e26:	f7fe b811 	b.w	9000ee4c <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e2a:	6829      	ldr	r1, [r5, #0]
90010e2c:	4807      	ldr	r0, [pc, #28]	; (90010e4c <vTaskPlaceOnEventList+0x84>)
90010e2e:	3104      	adds	r1, #4
}
90010e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e34:	f7fd bffa 	b.w	9000ee2c <vListInsertEnd>
90010e38:	24026b20 	.word	0x24026b20
90010e3c:	24027014 	.word	0x24027014
90010e40:	24026b24 	.word	0x24026b24
90010e44:	24026fc8 	.word	0x24026fc8
90010e48:	24026b28 	.word	0x24026b28
90010e4c:	24026fec 	.word	0x24026fec

90010e50 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
90010e50:	b358      	cbz	r0, 90010eaa <vTaskPlaceOnEventListRestricted+0x5a>
	{
90010e52:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90010e54:	4e1d      	ldr	r6, [pc, #116]	; (90010ecc <vTaskPlaceOnEventListRestricted+0x7c>)
90010e56:	460c      	mov	r4, r1
90010e58:	4615      	mov	r5, r2
90010e5a:	6831      	ldr	r1, [r6, #0]
90010e5c:	3118      	adds	r1, #24
90010e5e:	f7fd ffe5 	bl	9000ee2c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
90010e62:	b165      	cbz	r5, 90010e7e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
90010e64:	4b1a      	ldr	r3, [pc, #104]	; (90010ed0 <vTaskPlaceOnEventListRestricted+0x80>)
90010e66:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010e68:	6830      	ldr	r0, [r6, #0]
90010e6a:	3004      	adds	r0, #4
90010e6c:	f7fe f806 	bl	9000ee7c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e70:	6831      	ldr	r1, [r6, #0]
90010e72:	4818      	ldr	r0, [pc, #96]	; (90010ed4 <vTaskPlaceOnEventListRestricted+0x84>)
90010e74:	3104      	adds	r1, #4
	}
90010e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e7a:	f7fd bfd7 	b.w	9000ee2c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
90010e7e:	4b14      	ldr	r3, [pc, #80]	; (90010ed0 <vTaskPlaceOnEventListRestricted+0x80>)
90010e80:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010e82:	6830      	ldr	r0, [r6, #0]
90010e84:	3004      	adds	r0, #4
90010e86:	f7fd fff9 	bl	9000ee7c <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010e8a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010e8c:	6833      	ldr	r3, [r6, #0]
90010e8e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90010e90:	d214      	bcs.n	90010ebc <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e92:	4b11      	ldr	r3, [pc, #68]	; (90010ed8 <vTaskPlaceOnEventListRestricted+0x88>)
90010e94:	6818      	ldr	r0, [r3, #0]
90010e96:	6831      	ldr	r1, [r6, #0]
90010e98:	3104      	adds	r1, #4
90010e9a:	f7fd ffd7 	bl	9000ee4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010e9e:	4b0f      	ldr	r3, [pc, #60]	; (90010edc <vTaskPlaceOnEventListRestricted+0x8c>)
90010ea0:	681a      	ldr	r2, [r3, #0]
90010ea2:	4294      	cmp	r4, r2
90010ea4:	d200      	bcs.n	90010ea8 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
90010ea6:	601c      	str	r4, [r3, #0]
	}
90010ea8:	bd70      	pop	{r4, r5, r6, pc}
90010eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
90010eae:	f383 8811 	msr	BASEPRI, r3
90010eb2:	f3bf 8f6f 	isb	sy
90010eb6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
90010eba:	e7fe      	b.n	90010eba <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010ebc:	4b08      	ldr	r3, [pc, #32]	; (90010ee0 <vTaskPlaceOnEventListRestricted+0x90>)
90010ebe:	6818      	ldr	r0, [r3, #0]
90010ec0:	6831      	ldr	r1, [r6, #0]
	}
90010ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010ec6:	3104      	adds	r1, #4
90010ec8:	f7fd bfc0 	b.w	9000ee4c <vListInsert>
90010ecc:	24026b20 	.word	0x24026b20
90010ed0:	24027014 	.word	0x24027014
90010ed4:	24026fec 	.word	0x24026fec
90010ed8:	24026b24 	.word	0x24026b24
90010edc:	24026fc8 	.word	0x24026fc8
90010ee0:	24026b28 	.word	0x24026b28

90010ee4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010ee4:	68c3      	ldr	r3, [r0, #12]
{
90010ee6:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010ee8:	68dc      	ldr	r4, [r3, #12]
{
90010eea:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
90010eec:	b35c      	cbz	r4, 90010f46 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90010eee:	f104 0518 	add.w	r5, r4, #24
90010ef2:	4628      	mov	r0, r5
90010ef4:	f7fd ffc2 	bl	9000ee7c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010ef8:	4b19      	ldr	r3, [pc, #100]	; (90010f60 <xTaskRemoveFromEventList+0x7c>)
90010efa:	681b      	ldr	r3, [r3, #0]
90010efc:	b17b      	cbz	r3, 90010f1e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90010efe:	4629      	mov	r1, r5
90010f00:	4818      	ldr	r0, [pc, #96]	; (90010f64 <xTaskRemoveFromEventList+0x80>)
90010f02:	f7fd ff93 	bl	9000ee2c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90010f06:	4b18      	ldr	r3, [pc, #96]	; (90010f68 <xTaskRemoveFromEventList+0x84>)
90010f08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010f0a:	681b      	ldr	r3, [r3, #0]
90010f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010f0e:	429a      	cmp	r2, r3
90010f10:	d922      	bls.n	90010f58 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
90010f12:	2301      	movs	r3, #1
90010f14:	4a15      	ldr	r2, [pc, #84]	; (90010f6c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
90010f16:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
90010f18:	6013      	str	r3, [r2, #0]
}
90010f1a:	b003      	add	sp, #12
90010f1c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90010f1e:	1d21      	adds	r1, r4, #4
90010f20:	4608      	mov	r0, r1
90010f22:	9101      	str	r1, [sp, #4]
90010f24:	f7fd ffaa 	bl	9000ee7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90010f28:	4a11      	ldr	r2, [pc, #68]	; (90010f70 <xTaskRemoveFromEventList+0x8c>)
90010f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010f2c:	6810      	ldr	r0, [r2, #0]
90010f2e:	9901      	ldr	r1, [sp, #4]
90010f30:	4283      	cmp	r3, r0
90010f32:	d900      	bls.n	90010f36 <xTaskRemoveFromEventList+0x52>
90010f34:	6013      	str	r3, [r2, #0]
90010f36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010f3a:	480e      	ldr	r0, [pc, #56]	; (90010f74 <xTaskRemoveFromEventList+0x90>)
90010f3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
90010f40:	f7fd ff74 	bl	9000ee2c <vListInsertEnd>
90010f44:	e7df      	b.n	90010f06 <xTaskRemoveFromEventList+0x22>
90010f46:	f04f 0350 	mov.w	r3, #80	; 0x50
90010f4a:	f383 8811 	msr	BASEPRI, r3
90010f4e:	f3bf 8f6f 	isb	sy
90010f52:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
90010f56:	e7fe      	b.n	90010f56 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
90010f58:	2000      	movs	r0, #0
}
90010f5a:	b003      	add	sp, #12
90010f5c:	bd30      	pop	{r4, r5, pc}
90010f5e:	bf00      	nop
90010f60:	24026f94 	.word	0x24026f94
90010f64:	24026fd4 	.word	0x24026fd4
90010f68:	24026b20 	.word	0x24026b20
90010f6c:	24027018 	.word	0x24027018
90010f70:	24026f9c 	.word	0x24026f9c
90010f74:	24026b2c 	.word	0x24026b2c

90010f78 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010f78:	4a03      	ldr	r2, [pc, #12]	; (90010f88 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
90010f7a:	4b04      	ldr	r3, [pc, #16]	; (90010f8c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010f7c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010f7e:	681b      	ldr	r3, [r3, #0]
90010f80:	e9c0 2300 	strd	r2, r3, [r0]
}
90010f84:	4770      	bx	lr
90010f86:	bf00      	nop
90010f88:	24026fcc 	.word	0x24026fcc
90010f8c:	24027014 	.word	0x24027014

90010f90 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
90010f90:	b328      	cbz	r0, 90010fde <xTaskCheckForTimeOut+0x4e>
{
90010f92:	b5f0      	push	{r4, r5, r6, r7, lr}
90010f94:	460d      	mov	r5, r1
90010f96:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90010f98:	b1c1      	cbz	r1, 90010fcc <xTaskCheckForTimeOut+0x3c>
90010f9a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
90010f9c:	f7fd ffea 	bl	9000ef74 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
90010fa0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
90010fa2:	4a1d      	ldr	r2, [pc, #116]	; (90011018 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
90010fa4:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
90010fa6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
90010fa8:	d030      	beq.n	9001100c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90010faa:	f8df c070 	ldr.w	ip, [pc, #112]	; 9001101c <xTaskCheckForTimeOut+0x8c>
90010fae:	6826      	ldr	r6, [r4, #0]
90010fb0:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010fb4:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90010fb6:	42be      	cmp	r6, r7
90010fb8:	d01a      	beq.n	90010ff0 <xTaskCheckForTimeOut+0x60>
90010fba:	4288      	cmp	r0, r1
90010fbc:	d818      	bhi.n	90010ff0 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
90010fbe:	2001      	movs	r0, #1
90010fc0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010fc2:	f7fd fff9 	bl	9000efb8 <vPortExitCritical>
}
90010fc6:	9801      	ldr	r0, [sp, #4]
90010fc8:	b003      	add	sp, #12
90010fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
90010fd0:	f383 8811 	msr	BASEPRI, r3
90010fd4:	f3bf 8f6f 	isb	sy
90010fd8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
90010fdc:	e7fe      	b.n	90010fdc <xTaskCheckForTimeOut+0x4c>
90010fde:	f04f 0350 	mov.w	r3, #80	; 0x50
90010fe2:	f383 8811 	msr	BASEPRI, r3
90010fe6:	f3bf 8f6f 	isb	sy
90010fea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
90010fee:	e7fe      	b.n	90010fee <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010ff0:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90010ff4:	4573      	cmp	r3, lr
90010ff6:	d90b      	bls.n	90011010 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
90010ff8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010ffa:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010ffe:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
90011000:	4403      	add	r3, r0
			xReturn = pdFALSE;
90011002:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
90011004:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90011006:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9001100a:	e7d9      	b.n	90010fc0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9001100c:	2000      	movs	r0, #0
9001100e:	e7d7      	b.n	90010fc0 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
90011010:	2300      	movs	r3, #0
			xReturn = pdTRUE;
90011012:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
90011014:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
90011016:	e7d3      	b.n	90010fc0 <xTaskCheckForTimeOut+0x30>
90011018:	24027014 	.word	0x24027014
9001101c:	24026fcc 	.word	0x24026fcc

90011020 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
90011020:	4b01      	ldr	r3, [pc, #4]	; (90011028 <vTaskMissedYield+0x8>)
90011022:	2201      	movs	r2, #1
90011024:	601a      	str	r2, [r3, #0]
}
90011026:	4770      	bx	lr
90011028:	24027018 	.word	0x24027018

9001102c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9001102c:	4b01      	ldr	r3, [pc, #4]	; (90011034 <xTaskGetCurrentTaskHandle+0x8>)
9001102e:	6818      	ldr	r0, [r3, #0]
	}
90011030:	4770      	bx	lr
90011032:	bf00      	nop
90011034:	24026b20 	.word	0x24026b20

90011038 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
90011038:	4b05      	ldr	r3, [pc, #20]	; (90011050 <xTaskGetSchedulerState+0x18>)
9001103a:	681b      	ldr	r3, [r3, #0]
9001103c:	b133      	cbz	r3, 9001104c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9001103e:	4b05      	ldr	r3, [pc, #20]	; (90011054 <xTaskGetSchedulerState+0x1c>)
90011040:	6818      	ldr	r0, [r3, #0]
90011042:	fab0 f080 	clz	r0, r0
90011046:	0940      	lsrs	r0, r0, #5
90011048:	0040      	lsls	r0, r0, #1
9001104a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9001104c:	2001      	movs	r0, #1
	}
9001104e:	4770      	bx	lr
90011050:	24026fe8 	.word	0x24026fe8
90011054:	24026f94 	.word	0x24026f94

90011058 <xTaskPriorityInherit>:
	{
90011058:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9001105a:	4604      	mov	r4, r0
	{
9001105c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9001105e:	b1c8      	cbz	r0, 90011094 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90011060:	4d1d      	ldr	r5, [pc, #116]	; (900110d8 <xTaskPriorityInherit+0x80>)
90011062:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90011064:	682a      	ldr	r2, [r5, #0]
90011066:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011068:	4293      	cmp	r3, r2
9001106a:	d215      	bcs.n	90011098 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001106c:	6982      	ldr	r2, [r0, #24]
9001106e:	2a00      	cmp	r2, #0
90011070:	db04      	blt.n	9001107c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011072:	682a      	ldr	r2, [r5, #0]
90011074:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011076:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9001107a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9001107c:	4e17      	ldr	r6, [pc, #92]	; (900110dc <xTaskPriorityInherit+0x84>)
9001107e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90011082:	6962      	ldr	r2, [r4, #20]
90011084:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90011088:	429a      	cmp	r2, r3
9001108a:	d00e      	beq.n	900110aa <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001108c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001108e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011092:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90011094:	b002      	add	sp, #8
90011096:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90011098:	682b      	ldr	r3, [r5, #0]
9001109a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001109e:	4298      	cmp	r0, r3
900110a0:	bf2c      	ite	cs
900110a2:	2000      	movcs	r0, #0
900110a4:	2001      	movcc	r0, #1
	}
900110a6:	b002      	add	sp, #8
900110a8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900110aa:	1d21      	adds	r1, r4, #4
900110ac:	4608      	mov	r0, r1
900110ae:	9101      	str	r1, [sp, #4]
900110b0:	f7fd fee4 	bl	9000ee7c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900110b4:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
900110b6:	4b0a      	ldr	r3, [pc, #40]	; (900110e0 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900110b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
900110ba:	681a      	ldr	r2, [r3, #0]
900110bc:	9901      	ldr	r1, [sp, #4]
900110be:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900110c0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
900110c2:	d900      	bls.n	900110c6 <xTaskPriorityInherit+0x6e>
900110c4:	6018      	str	r0, [r3, #0]
900110c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900110ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
900110ce:	f7fd fead 	bl	9000ee2c <vListInsertEnd>
				xReturn = pdTRUE;
900110d2:	2001      	movs	r0, #1
900110d4:	e7de      	b.n	90011094 <xTaskPriorityInherit+0x3c>
900110d6:	bf00      	nop
900110d8:	24026b20 	.word	0x24026b20
900110dc:	24026b2c 	.word	0x24026b2c
900110e0:	24026f9c 	.word	0x24026f9c

900110e4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
900110e4:	b318      	cbz	r0, 9001112e <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
900110e6:	4b1f      	ldr	r3, [pc, #124]	; (90011164 <xTaskPriorityDisinherit+0x80>)
	{
900110e8:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
900110ea:	681c      	ldr	r4, [r3, #0]
	{
900110ec:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
900110ee:	4284      	cmp	r4, r0
900110f0:	d008      	beq.n	90011104 <xTaskPriorityDisinherit+0x20>
900110f2:	f04f 0350 	mov.w	r3, #80	; 0x50
900110f6:	f383 8811 	msr	BASEPRI, r3
900110fa:	f3bf 8f6f 	isb	sy
900110fe:	f3bf 8f4f 	dsb	sy
90011102:	e7fe      	b.n	90011102 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
90011104:	6d23      	ldr	r3, [r4, #80]	; 0x50
90011106:	b14b      	cbz	r3, 9001111c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90011108:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9001110a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9001110c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9001110e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90011110:	4291      	cmp	r1, r2
90011112:	d000      	beq.n	90011116 <xTaskPriorityDisinherit+0x32>
90011114:	b16b      	cbz	r3, 90011132 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
90011116:	2000      	movs	r0, #0
	}
90011118:	b002      	add	sp, #8
9001111a:	bd10      	pop	{r4, pc}
9001111c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011120:	f383 8811 	msr	BASEPRI, r3
90011124:	f3bf 8f6f 	isb	sy
90011128:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9001112c:	e7fe      	b.n	9001112c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9001112e:	2000      	movs	r0, #0
	}
90011130:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011132:	1d21      	adds	r1, r4, #4
90011134:	4608      	mov	r0, r1
90011136:	9101      	str	r1, [sp, #4]
90011138:	f7fd fea0 	bl	9000ee7c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9001113c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9001113e:	4b0a      	ldr	r3, [pc, #40]	; (90011168 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011140:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
90011144:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
90011146:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011148:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9001114a:	681a      	ldr	r2, [r3, #0]
9001114c:	4290      	cmp	r0, r2
9001114e:	d900      	bls.n	90011152 <xTaskPriorityDisinherit+0x6e>
90011150:	6018      	str	r0, [r3, #0]
90011152:	4b06      	ldr	r3, [pc, #24]	; (9001116c <xTaskPriorityDisinherit+0x88>)
90011154:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90011158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9001115c:	f7fd fe66 	bl	9000ee2c <vListInsertEnd>
					xReturn = pdTRUE;
90011160:	2001      	movs	r0, #1
		return xReturn;
90011162:	e7d9      	b.n	90011118 <xTaskPriorityDisinherit+0x34>
90011164:	24026b20 	.word	0x24026b20
90011168:	24026f9c 	.word	0x24026f9c
9001116c:	24026b2c 	.word	0x24026b2c

90011170 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
90011170:	2800      	cmp	r0, #0
90011172:	d040      	beq.n	900111f6 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
90011174:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
90011176:	b530      	push	{r4, r5, lr}
90011178:	4604      	mov	r4, r0
9001117a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9001117c:	b153      	cbz	r3, 90011194 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9001117e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
90011180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90011182:	4281      	cmp	r1, r0
90011184:	bf38      	it	cc
90011186:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90011188:	2b01      	cmp	r3, #1
9001118a:	d101      	bne.n	90011190 <vTaskPriorityDisinheritAfterTimeout+0x20>
9001118c:	428a      	cmp	r2, r1
9001118e:	d10a      	bne.n	900111a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
90011190:	b003      	add	sp, #12
90011192:	bd30      	pop	{r4, r5, pc}
90011194:	f04f 0350 	mov.w	r3, #80	; 0x50
90011198:	f383 8811 	msr	BASEPRI, r3
9001119c:	f3bf 8f6f 	isb	sy
900111a0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900111a4:	e7fe      	b.n	900111a4 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
900111a6:	4b19      	ldr	r3, [pc, #100]	; (9001120c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
900111a8:	681b      	ldr	r3, [r3, #0]
900111aa:	42a3      	cmp	r3, r4
900111ac:	d024      	beq.n	900111f8 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900111ae:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
900111b0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900111b2:	2b00      	cmp	r3, #0
900111b4:	db02      	blt.n	900111bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900111b6:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
900111ba:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
900111bc:	4d14      	ldr	r5, [pc, #80]	; (90011210 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
900111be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
900111c2:	6961      	ldr	r1, [r4, #20]
900111c4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
900111c8:	4299      	cmp	r1, r3
900111ca:	d1e1      	bne.n	90011190 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900111cc:	1d21      	adds	r1, r4, #4
900111ce:	4608      	mov	r0, r1
900111d0:	9101      	str	r1, [sp, #4]
900111d2:	f7fd fe53 	bl	9000ee7c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
900111d6:	4b0f      	ldr	r3, [pc, #60]	; (90011214 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
900111d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900111da:	681a      	ldr	r2, [r3, #0]
900111dc:	9901      	ldr	r1, [sp, #4]
900111de:	4290      	cmp	r0, r2
900111e0:	d900      	bls.n	900111e4 <vTaskPriorityDisinheritAfterTimeout+0x74>
900111e2:	6018      	str	r0, [r3, #0]
900111e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900111e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
900111ec:	b003      	add	sp, #12
900111ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
900111f2:	f7fd be1b 	b.w	9000ee2c <vListInsertEnd>
900111f6:	4770      	bx	lr
900111f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900111fc:	f383 8811 	msr	BASEPRI, r3
90011200:	f3bf 8f6f 	isb	sy
90011204:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
90011208:	e7fe      	b.n	90011208 <vTaskPriorityDisinheritAfterTimeout+0x98>
9001120a:	bf00      	nop
9001120c:	24026b20 	.word	0x24026b20
90011210:	24026b2c 	.word	0x24026b2c
90011214:	24026f9c 	.word	0x24026f9c

90011218 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
90011218:	4b04      	ldr	r3, [pc, #16]	; (9001122c <pvTaskIncrementMutexHeldCount+0x14>)
9001121a:	681a      	ldr	r2, [r3, #0]
9001121c:	b11a      	cbz	r2, 90011226 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9001121e:	6819      	ldr	r1, [r3, #0]
90011220:	6d0a      	ldr	r2, [r1, #80]	; 0x50
90011222:	3201      	adds	r2, #1
90011224:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
90011226:	6818      	ldr	r0, [r3, #0]
	}
90011228:	4770      	bx	lr
9001122a:	bf00      	nop
9001122c:	24026b20 	.word	0x24026b20

90011230 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
90011230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011234:	4e22      	ldr	r6, [pc, #136]	; (900112c0 <prvSwitchTimerLists+0x90>)
90011236:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
90011238:	f8df 908c 	ldr.w	r9, [pc, #140]	; 900112c8 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9001123c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90011240:	e00d      	b.n	9001125e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011242:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011244:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011246:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90011248:	1d25      	adds	r5, r4, #4
9001124a:	4628      	mov	r0, r5
9001124c:	f7fd fe16 	bl	9000ee7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90011250:	6a23      	ldr	r3, [r4, #32]
90011252:	4620      	mov	r0, r4
90011254:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90011256:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9001125a:	075b      	lsls	r3, r3, #29
9001125c:	d40a      	bmi.n	90011274 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9001125e:	6833      	ldr	r3, [r6, #0]
90011260:	681a      	ldr	r2, [r3, #0]
90011262:	2a00      	cmp	r2, #0
90011264:	d1ed      	bne.n	90011242 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90011266:	4a17      	ldr	r2, [pc, #92]	; (900112c4 <prvSwitchTimerLists+0x94>)
90011268:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9001126a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9001126c:	6031      	str	r1, [r6, #0]
}
9001126e:	b005      	add	sp, #20
90011270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011274:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011276:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011278:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9001127a:	429f      	cmp	r7, r3
9001127c:	d205      	bcs.n	9001128a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001127e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90011280:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011282:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011284:	f7fd fde2 	bl	9000ee4c <vListInsert>
90011288:	e7e9      	b.n	9001125e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001128a:	f8d9 3000 	ldr.w	r3, [r9]
9001128e:	b16b      	cbz	r3, 900112ac <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011290:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011292:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011296:	f7ff fecf 	bl	90011038 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001129a:	2300      	movs	r3, #0
9001129c:	4669      	mov	r1, sp
9001129e:	f8d9 0000 	ldr.w	r0, [r9]
900112a2:	461a      	mov	r2, r3
900112a4:	f7fe f95e 	bl	9000f564 <xQueueGenericSend>
				configASSERT( xResult );
900112a8:	2800      	cmp	r0, #0
900112aa:	d1d8      	bne.n	9001125e <prvSwitchTimerLists+0x2e>
900112ac:	f04f 0350 	mov.w	r3, #80	; 0x50
900112b0:	f383 8811 	msr	BASEPRI, r3
900112b4:	f3bf 8f6f 	isb	sy
900112b8:	f3bf 8f4f 	dsb	sy
900112bc:	e7fe      	b.n	900112bc <prvSwitchTimerLists+0x8c>
900112be:	bf00      	nop
900112c0:	2402701c 	.word	0x2402701c
900112c4:	24027020 	.word	0x24027020
900112c8:	24027140 	.word	0x24027140

900112cc <prvTimerTask>:
{
900112cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900112d0:	4e9f      	ldr	r6, [pc, #636]	; (90011550 <prvTimerTask+0x284>)
900112d2:	b089      	sub	sp, #36	; 0x24
900112d4:	4d9f      	ldr	r5, [pc, #636]	; (90011554 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
900112d6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
900112da:	4c9f      	ldr	r4, [pc, #636]	; (90011558 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
900112dc:	6833      	ldr	r3, [r6, #0]
900112de:	681f      	ldr	r7, [r3, #0]
900112e0:	2f00      	cmp	r7, #0
900112e2:	f000 80b2 	beq.w	9001144a <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900112e6:	68db      	ldr	r3, [r3, #12]
900112e8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
900112ea:	f7ff fccf 	bl	90010c8c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900112ee:	f7ff fce5 	bl	90010cbc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900112f2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900112f4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900112f6:	4290      	cmp	r0, r2
900112f8:	f0c0 80af 	bcc.w	9001145a <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900112fc:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
900112fe:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90011300:	f200 80d0 	bhi.w	900114a4 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
90011304:	f7ff fcca 	bl	90010c9c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011308:	6832      	ldr	r2, [r6, #0]
9001130a:	68d2      	ldr	r2, [r2, #12]
9001130c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90011310:	f10b 0804 	add.w	r8, fp, #4
90011314:	4640      	mov	r0, r8
90011316:	f7fd fdb1 	bl	9000ee7c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001131a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9001131e:	0741      	lsls	r1, r0, #29
90011320:	f100 80d0 	bmi.w	900114c4 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90011324:	f020 0001 	bic.w	r0, r0, #1
90011328:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9001132c:	f8db 3020 	ldr.w	r3, [fp, #32]
90011330:	4658      	mov	r0, fp
90011332:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90011334:	2200      	movs	r2, #0
90011336:	4669      	mov	r1, sp
90011338:	6820      	ldr	r0, [r4, #0]
9001133a:	f7fe fbff 	bl	9000fb3c <xQueueReceive>
9001133e:	2800      	cmp	r0, #0
90011340:	d0cc      	beq.n	900112dc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90011342:	9b00      	ldr	r3, [sp, #0]
90011344:	2b00      	cmp	r3, #0
90011346:	db77      	blt.n	90011438 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90011348:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9001134a:	697b      	ldr	r3, [r7, #20]
9001134c:	b113      	cbz	r3, 90011354 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9001134e:	1d38      	adds	r0, r7, #4
90011350:	f7fd fd94 	bl	9000ee7c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
90011354:	f7ff fcb2 	bl	90010cbc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011358:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9001135a:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9001135c:	4298      	cmp	r0, r3
9001135e:	f0c0 8083 	bcc.w	90011468 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
90011362:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90011364:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90011368:	2b09      	cmp	r3, #9
9001136a:	d8e3      	bhi.n	90011334 <prvTimerTask+0x68>
9001136c:	e8df f003 	tbb	[pc, r3]
90011370:	54050505 	.word	0x54050505
90011374:	05055b3e 	.word	0x05055b3e
90011378:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001137a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001137e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011380:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011384:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011386:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001138a:	9b01      	ldr	r3, [sp, #4]
9001138c:	1899      	adds	r1, r3, r2
9001138e:	bf2c      	ite	cs
90011390:	2001      	movcs	r0, #1
90011392:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90011394:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011396:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90011398:	f200 8086 	bhi.w	900114a8 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001139c:	eba8 0303 	sub.w	r3, r8, r3
900113a0:	429a      	cmp	r2, r3
900113a2:	f200 80c0 	bhi.w	90011526 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900113a6:	6a3b      	ldr	r3, [r7, #32]
900113a8:	4638      	mov	r0, r7
900113aa:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900113ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900113b0:	075b      	lsls	r3, r3, #29
900113b2:	d5bf      	bpl.n	90011334 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
900113b4:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900113b6:	9901      	ldr	r1, [sp, #4]
900113b8:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
900113ba:	b172      	cbz	r2, 900113da <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900113bc:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900113be:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
900113c2:	2300      	movs	r3, #0
900113c4:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900113c6:	f7ff fe37 	bl	90011038 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900113ca:	2300      	movs	r3, #0
900113cc:	a904      	add	r1, sp, #16
900113ce:	6820      	ldr	r0, [r4, #0]
900113d0:	461a      	mov	r2, r3
900113d2:	f7fe f8c7 	bl	9000f564 <xQueueGenericSend>
							configASSERT( xResult );
900113d6:	2800      	cmp	r0, #0
900113d8:	d1ac      	bne.n	90011334 <prvTimerTask+0x68>
900113da:	f04f 0350 	mov.w	r3, #80	; 0x50
900113de:	f383 8811 	msr	BASEPRI, r3
900113e2:	f3bf 8f6f 	isb	sy
900113e6:	f3bf 8f4f 	dsb	sy
900113ea:	e7fe      	b.n	900113ea <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900113ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900113f0:	f043 0301 	orr.w	r3, r3, #1
900113f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
900113f8:	9b01      	ldr	r3, [sp, #4]
900113fa:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900113fc:	2b00      	cmp	r3, #0
900113fe:	f000 809e 	beq.w	9001153e <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90011402:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011404:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011406:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
90011408:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001140a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9001140c:	d856      	bhi.n	900114bc <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9001140e:	4b53      	ldr	r3, [pc, #332]	; (9001155c <prvTimerTask+0x290>)
90011410:	6818      	ldr	r0, [r3, #0]
90011412:	f7fd fd1b 	bl	9000ee4c <vListInsert>
	return xProcessTimerNow;
90011416:	e78d      	b.n	90011334 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90011418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001141c:	f023 0301 	bic.w	r3, r3, #1
90011420:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
90011424:	e786      	b.n	90011334 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
90011426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001142a:	079a      	lsls	r2, r3, #30
9001142c:	d572      	bpl.n	90011514 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9001142e:	f023 0301 	bic.w	r3, r3, #1
90011432:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
90011436:	e77d      	b.n	90011334 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90011438:	9b01      	ldr	r3, [sp, #4]
9001143a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9001143e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
90011440:	9b00      	ldr	r3, [sp, #0]
90011442:	2b00      	cmp	r3, #0
90011444:	f6ff af76 	blt.w	90011334 <prvTimerTask+0x68>
90011448:	e77e      	b.n	90011348 <prvTimerTask+0x7c>
	vTaskSuspendAll();
9001144a:	f7ff fc1f 	bl	90010c8c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001144e:	f7ff fc35 	bl	90010cbc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011452:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90011454:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90011456:	4282      	cmp	r2, r0
90011458:	d909      	bls.n	9001146e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9001145a:	f7ff fee9 	bl	90011230 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9001145e:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
90011462:	f7ff fc1b 	bl	90010c9c <xTaskResumeAll>
90011466:	e765      	b.n	90011334 <prvTimerTask+0x68>
		prvSwitchTimerLists();
90011468:	f7ff fee2 	bl	90011230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9001146c:	e779      	b.n	90011362 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9001146e:	4b3b      	ldr	r3, [pc, #236]	; (9001155c <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
90011470:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90011474:	681a      	ldr	r2, [r3, #0]
90011476:	6812      	ldr	r2, [r2, #0]
90011478:	fab2 f282 	clz	r2, r2
9001147c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9001147e:	eba7 010a 	sub.w	r1, r7, sl
90011482:	6820      	ldr	r0, [r4, #0]
90011484:	f7fe ff4e 	bl	90010324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90011488:	f7ff fc08 	bl	90010c9c <xTaskResumeAll>
9001148c:	2800      	cmp	r0, #0
9001148e:	f47f af51 	bne.w	90011334 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90011492:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90011496:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001149a:	f3bf 8f4f 	dsb	sy
9001149e:	f3bf 8f6f 	isb	sy
900114a2:	e747      	b.n	90011334 <prvTimerTask+0x68>
900114a4:	2200      	movs	r2, #0
900114a6:	e7ea      	b.n	9001147e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
900114a8:	4543      	cmp	r3, r8
900114aa:	d902      	bls.n	900114b2 <prvTimerTask+0x1e6>
900114ac:	2800      	cmp	r0, #0
900114ae:	f43f af7a 	beq.w	900113a6 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900114b2:	1d39      	adds	r1, r7, #4
900114b4:	6830      	ldr	r0, [r6, #0]
900114b6:	f7fd fcc9 	bl	9000ee4c <vListInsert>
	return xProcessTimerNow;
900114ba:	e73b      	b.n	90011334 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900114bc:	6830      	ldr	r0, [r6, #0]
900114be:	f7fd fcc5 	bl	9000ee4c <vListInsert>
900114c2:	e737      	b.n	90011334 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
900114c4:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900114c8:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
900114cc:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
900114ce:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900114d0:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
900114d4:	d322      	bcc.n	9001151c <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900114d6:	ebaa 0307 	sub.w	r3, sl, r7
900114da:	429a      	cmp	r2, r3
900114dc:	d829      	bhi.n	90011532 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
900114de:	6823      	ldr	r3, [r4, #0]
900114e0:	b17b      	cbz	r3, 90011502 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
900114e2:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900114e4:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900114e6:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
900114ea:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900114ec:	f7ff fda4 	bl	90011038 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900114f0:	2300      	movs	r3, #0
900114f2:	a904      	add	r1, sp, #16
900114f4:	6820      	ldr	r0, [r4, #0]
900114f6:	461a      	mov	r2, r3
900114f8:	f7fe f834 	bl	9000f564 <xQueueGenericSend>
			configASSERT( xResult );
900114fc:	2800      	cmp	r0, #0
900114fe:	f47f af15 	bne.w	9001132c <prvTimerTask+0x60>
90011502:	f04f 0350 	mov.w	r3, #80	; 0x50
90011506:	f383 8811 	msr	BASEPRI, r3
9001150a:	f3bf 8f6f 	isb	sy
9001150e:	f3bf 8f4f 	dsb	sy
90011512:	e7fe      	b.n	90011512 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90011514:	4638      	mov	r0, r7
90011516:	f7fd fc15 	bl	9000ed44 <vPortFree>
9001151a:	e70b      	b.n	90011334 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001151c:	4641      	mov	r1, r8
9001151e:	6830      	ldr	r0, [r6, #0]
90011520:	f7fd fc94 	bl	9000ee4c <vListInsert>
	return xProcessTimerNow;
90011524:	e702      	b.n	9001132c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011526:	4b0d      	ldr	r3, [pc, #52]	; (9001155c <prvTimerTask+0x290>)
90011528:	1d39      	adds	r1, r7, #4
9001152a:	6818      	ldr	r0, [r3, #0]
9001152c:	f7fd fc8e 	bl	9000ee4c <vListInsert>
	return xProcessTimerNow;
90011530:	e700      	b.n	90011334 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011532:	4b0a      	ldr	r3, [pc, #40]	; (9001155c <prvTimerTask+0x290>)
90011534:	4641      	mov	r1, r8
90011536:	6818      	ldr	r0, [r3, #0]
90011538:	f7fd fc88 	bl	9000ee4c <vListInsert>
	return xProcessTimerNow;
9001153c:	e6f6      	b.n	9001132c <prvTimerTask+0x60>
9001153e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011542:	f383 8811 	msr	BASEPRI, r3
90011546:	f3bf 8f6f 	isb	sy
9001154a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9001154e:	e7fe      	b.n	9001154e <prvTimerTask+0x282>
90011550:	2402701c 	.word	0x2402701c
90011554:	240270ec 	.word	0x240270ec
90011558:	24027140 	.word	0x24027140
9001155c:	24027020 	.word	0x24027020

90011560 <xTimerCreateTimerTask>:
{
90011560:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
90011562:	4c23      	ldr	r4, [pc, #140]	; (900115f0 <xTimerCreateTimerTask+0x90>)
{
90011564:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90011566:	f7fd fd05 	bl	9000ef74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9001156a:	6825      	ldr	r5, [r4, #0]
9001156c:	b335      	cbz	r5, 900115bc <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9001156e:	f7fd fd23 	bl	9000efb8 <vPortExitCritical>
	if( xTimerQueue != NULL )
90011572:	6823      	ldr	r3, [r4, #0]
90011574:	b1cb      	cbz	r3, 900115aa <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90011576:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011578:	aa07      	add	r2, sp, #28
9001157a:	a906      	add	r1, sp, #24
9001157c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9001157e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90011580:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011584:	f7fd fb10 	bl	9000eba8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011588:	4623      	mov	r3, r4
9001158a:	9a07      	ldr	r2, [sp, #28]
9001158c:	9500      	str	r5, [sp, #0]
9001158e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90011592:	e9cd 1001 	strd	r1, r0, [sp, #4]
90011596:	4917      	ldr	r1, [pc, #92]	; (900115f4 <xTimerCreateTimerTask+0x94>)
90011598:	4817      	ldr	r0, [pc, #92]	; (900115f8 <xTimerCreateTimerTask+0x98>)
9001159a:	f7ff f93f 	bl	9001081c <xTaskCreateStatic>
9001159e:	4b17      	ldr	r3, [pc, #92]	; (900115fc <xTimerCreateTimerTask+0x9c>)
900115a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
900115a2:	b110      	cbz	r0, 900115aa <xTimerCreateTimerTask+0x4a>
}
900115a4:	2001      	movs	r0, #1
900115a6:	b009      	add	sp, #36	; 0x24
900115a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
900115aa:	f04f 0350 	mov.w	r3, #80	; 0x50
900115ae:	f383 8811 	msr	BASEPRI, r3
900115b2:	f3bf 8f6f 	isb	sy
900115b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
900115ba:	e7fe      	b.n	900115ba <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
900115bc:	4f10      	ldr	r7, [pc, #64]	; (90011600 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
900115be:	4e11      	ldr	r6, [pc, #68]	; (90011604 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
900115c0:	4638      	mov	r0, r7
900115c2:	f7fd fc23 	bl	9000ee0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
900115c6:	4630      	mov	r0, r6
900115c8:	f7fd fc20 	bl	9000ee0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
900115cc:	4a0e      	ldr	r2, [pc, #56]	; (90011608 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900115ce:	9500      	str	r5, [sp, #0]
900115d0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
900115d2:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900115d4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
900115d6:	4a0d      	ldr	r2, [pc, #52]	; (9001160c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900115d8:	4b0d      	ldr	r3, [pc, #52]	; (90011610 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
900115da:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900115dc:	4a0d      	ldr	r2, [pc, #52]	; (90011614 <xTimerCreateTimerTask+0xb4>)
900115de:	f7fd fe6b 	bl	9000f2b8 <xQueueGenericCreateStatic>
900115e2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
900115e4:	2800      	cmp	r0, #0
900115e6:	d0c2      	beq.n	9001156e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900115e8:	490b      	ldr	r1, [pc, #44]	; (90011618 <xTimerCreateTimerTask+0xb8>)
900115ea:	f7fe fe73 	bl	900102d4 <vQueueAddToRegistry>
900115ee:	e7be      	b.n	9001156e <xTimerCreateTimerTask+0xe>
900115f0:	24027140 	.word	0x24027140
900115f4:	9002b53c 	.word	0x9002b53c
900115f8:	900112cd 	.word	0x900112cd
900115fc:	24027144 	.word	0x24027144
90011600:	240270c4 	.word	0x240270c4
90011604:	240270d8 	.word	0x240270d8
90011608:	2402701c 	.word	0x2402701c
9001160c:	24027020 	.word	0x24027020
90011610:	240270f0 	.word	0x240270f0
90011614:	24027024 	.word	0x24027024
90011618:	9002b534 	.word	0x9002b534

9001161c <xTimerCreate>:
	{
9001161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011620:	4607      	mov	r7, r0
90011622:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
90011624:	202c      	movs	r0, #44	; 0x2c
	{
90011626:	4688      	mov	r8, r1
90011628:	4616      	mov	r6, r2
9001162a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
9001162c:	f7fd facc 	bl	9000ebc8 <pvPortMalloc>
		if( pxNewTimer != NULL )
90011630:	4604      	mov	r4, r0
90011632:	b1e8      	cbz	r0, 90011670 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
90011634:	2300      	movs	r3, #0
90011636:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
9001163a:	f1b8 0f00 	cmp.w	r8, #0
9001163e:	d01b      	beq.n	90011678 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
90011640:	f8df 909c 	ldr.w	r9, [pc, #156]	; 900116e0 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
90011644:	f7fd fc96 	bl	9000ef74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011648:	f8d9 3000 	ldr.w	r3, [r9]
9001164c:	b1eb      	cbz	r3, 9001168a <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
9001164e:	f7fd fcb3 	bl	9000efb8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011654:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011656:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011658:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
9001165a:	e9c4 8506 	strd	r8, r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
9001165e:	f7fd fbe1 	bl	9000ee24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
90011662:	b12e      	cbz	r6, 90011670 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011664:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90011668:	f043 0304 	orr.w	r3, r3, #4
9001166c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
90011670:	4620      	mov	r0, r4
90011672:	b005      	add	sp, #20
90011674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011678:	f04f 0350 	mov.w	r3, #80	; 0x50
9001167c:	f383 8811 	msr	BASEPRI, r3
90011680:	f3bf 8f6f 	isb	sy
90011684:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011688:	e7fe      	b.n	90011688 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
9001168a:	f8df b058 	ldr.w	fp, [pc, #88]	; 900116e4 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
9001168e:	f8df a058 	ldr.w	sl, [pc, #88]	; 900116e8 <xTimerCreate+0xcc>
			vListInitialise( &xActiveTimerList1 );
90011692:	4658      	mov	r0, fp
90011694:	9303      	str	r3, [sp, #12]
90011696:	f7fd fbb9 	bl	9000ee0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9001169a:	4650      	mov	r0, sl
9001169c:	f7fd fbb6 	bl	9000ee0c <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900116a0:	9b03      	ldr	r3, [sp, #12]
900116a2:	4a0a      	ldr	r2, [pc, #40]	; (900116cc <xTimerCreate+0xb0>)
900116a4:	2110      	movs	r1, #16
900116a6:	9300      	str	r3, [sp, #0]
900116a8:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
900116aa:	4b09      	ldr	r3, [pc, #36]	; (900116d0 <xTimerCreate+0xb4>)
900116ac:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
900116b0:	4b08      	ldr	r3, [pc, #32]	; (900116d4 <xTimerCreate+0xb8>)
900116b2:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900116b6:	4b08      	ldr	r3, [pc, #32]	; (900116d8 <xTimerCreate+0xbc>)
900116b8:	f7fd fdfe 	bl	9000f2b8 <xQueueGenericCreateStatic>
900116bc:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
900116c0:	2800      	cmp	r0, #0
900116c2:	d0c4      	beq.n	9001164e <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900116c4:	4905      	ldr	r1, [pc, #20]	; (900116dc <xTimerCreate+0xc0>)
900116c6:	f7fe fe05 	bl	900102d4 <vQueueAddToRegistry>
900116ca:	e7c0      	b.n	9001164e <xTimerCreate+0x32>
900116cc:	24027024 	.word	0x24027024
900116d0:	2402701c 	.word	0x2402701c
900116d4:	24027020 	.word	0x24027020
900116d8:	240270f0 	.word	0x240270f0
900116dc:	9002b534 	.word	0x9002b534
900116e0:	24027140 	.word	0x24027140
900116e4:	240270c4 	.word	0x240270c4
900116e8:	240270d8 	.word	0x240270d8

900116ec <xTimerCreateStatic>:
	{
900116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
900116f0:	242c      	movs	r4, #44	; 0x2c
	{
900116f2:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
900116f4:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
900116f6:	9c03      	ldr	r4, [sp, #12]
900116f8:	2c2c      	cmp	r4, #44	; 0x2c
900116fa:	d008      	beq.n	9001170e <xTimerCreateStatic+0x22>
900116fc:	f04f 0350 	mov.w	r3, #80	; 0x50
90011700:	f383 8811 	msr	BASEPRI, r3
90011704:	f3bf 8f6f 	isb	sy
90011708:	f3bf 8f4f 	dsb	sy
9001170c:	e7fe      	b.n	9001170c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9001170e:	461d      	mov	r5, r3
90011710:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
90011712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011714:	b343      	cbz	r3, 90011768 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
90011716:	4616      	mov	r6, r2
90011718:	461a      	mov	r2, r3
9001171a:	2302      	movs	r3, #2
9001171c:	460f      	mov	r7, r1
9001171e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011722:	b351      	cbz	r1, 9001177a <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
90011724:	4c29      	ldr	r4, [pc, #164]	; (900117cc <xTimerCreateStatic+0xe0>)
90011726:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
90011728:	f7fd fc24 	bl	9000ef74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9001172c:	f8d4 b000 	ldr.w	fp, [r4]
90011730:	f1bb 0f00 	cmp.w	fp, #0
90011734:	d02a      	beq.n	9001178c <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
90011736:	f7fd fc3f 	bl	9000efb8 <vPortExitCritical>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
9001173a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
9001173c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
9001173e:	1d18      	adds	r0, r3, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011740:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011744:	621a      	str	r2, [r3, #32]
		pxNewTimer->pvTimerID = pvTimerID;
90011746:	e9c3 7506 	strd	r7, r5, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
9001174a:	f7fd fb6b 	bl	9000ee24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
9001174e:	b13e      	cbz	r6, 90011760 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90011754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90011758:	f043 0304 	orr.w	r3, r3, #4
9001175c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
90011760:	980f      	ldr	r0, [sp, #60]	; 0x3c
90011762:	b005      	add	sp, #20
90011764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011768:	f04f 0350 	mov.w	r3, #80	; 0x50
9001176c:	f383 8811 	msr	BASEPRI, r3
90011770:	f3bf 8f6f 	isb	sy
90011774:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
90011778:	e7fe      	b.n	90011778 <xTimerCreateStatic+0x8c>
9001177a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001177e:	f383 8811 	msr	BASEPRI, r3
90011782:	f3bf 8f6f 	isb	sy
90011786:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
9001178a:	e7fe      	b.n	9001178a <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
9001178c:	f8df a054 	ldr.w	sl, [pc, #84]	; 900117e4 <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
90011790:	f8df 9054 	ldr.w	r9, [pc, #84]	; 900117e8 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
90011794:	4650      	mov	r0, sl
90011796:	f7fd fb39 	bl	9000ee0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9001179a:	4648      	mov	r0, r9
9001179c:	f7fd fb36 	bl	9000ee0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
900117a0:	4a0b      	ldr	r2, [pc, #44]	; (900117d0 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
900117a2:	4b0c      	ldr	r3, [pc, #48]	; (900117d4 <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900117a4:	2110      	movs	r1, #16
900117a6:	f8cd b000 	str.w	fp, [sp]
900117aa:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
900117ac:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
900117b0:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900117b4:	4a08      	ldr	r2, [pc, #32]	; (900117d8 <xTimerCreateStatic+0xec>)
900117b6:	4b09      	ldr	r3, [pc, #36]	; (900117dc <xTimerCreateStatic+0xf0>)
900117b8:	f7fd fd7e 	bl	9000f2b8 <xQueueGenericCreateStatic>
900117bc:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
900117be:	2800      	cmp	r0, #0
900117c0:	d0b9      	beq.n	90011736 <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900117c2:	4907      	ldr	r1, [pc, #28]	; (900117e0 <xTimerCreateStatic+0xf4>)
900117c4:	f7fe fd86 	bl	900102d4 <vQueueAddToRegistry>
900117c8:	e7b5      	b.n	90011736 <xTimerCreateStatic+0x4a>
900117ca:	bf00      	nop
900117cc:	24027140 	.word	0x24027140
900117d0:	2402701c 	.word	0x2402701c
900117d4:	24027020 	.word	0x24027020
900117d8:	24027024 	.word	0x24027024
900117dc:	240270f0 	.word	0x240270f0
900117e0:	9002b534 	.word	0x9002b534
900117e4:	240270c4 	.word	0x240270c4
900117e8:	240270d8 	.word	0x240270d8

900117ec <xTimerGenericCommand>:
	configASSERT( xTimer );
900117ec:	b1c8      	cbz	r0, 90011822 <xTimerGenericCommand+0x36>
{
900117ee:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
900117f0:	4e17      	ldr	r6, [pc, #92]	; (90011850 <xTimerGenericCommand+0x64>)
{
900117f2:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
900117f4:	6834      	ldr	r4, [r6, #0]
900117f6:	b18c      	cbz	r4, 9001181c <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
900117f8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900117fa:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
900117fc:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011800:	dc18      	bgt.n	90011834 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011802:	f7ff fc19 	bl	90011038 <xTaskGetSchedulerState>
90011806:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011808:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9001180c:	d01a      	beq.n	90011844 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9001180e:	4669      	mov	r1, sp
90011810:	461a      	mov	r2, r3
90011812:	6830      	ldr	r0, [r6, #0]
90011814:	f7fd fea6 	bl	9000f564 <xQueueGenericSend>
}
90011818:	b004      	add	sp, #16
9001181a:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
9001181c:	4620      	mov	r0, r4
}
9001181e:	b004      	add	sp, #16
90011820:	bd70      	pop	{r4, r5, r6, pc}
90011822:	f04f 0350 	mov.w	r3, #80	; 0x50
90011826:	f383 8811 	msr	BASEPRI, r3
9001182a:	f3bf 8f6f 	isb	sy
9001182e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
90011832:	e7fe      	b.n	90011832 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90011834:	461a      	mov	r2, r3
90011836:	4669      	mov	r1, sp
90011838:	2300      	movs	r3, #0
9001183a:	4620      	mov	r0, r4
9001183c:	f7fe f8bc 	bl	9000f9b8 <xQueueGenericSendFromISR>
}
90011840:	b004      	add	sp, #16
90011842:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011844:	9a08      	ldr	r2, [sp, #32]
90011846:	4669      	mov	r1, sp
90011848:	6830      	ldr	r0, [r6, #0]
9001184a:	f7fd fe8b 	bl	9000f564 <xQueueGenericSend>
9001184e:	e7e6      	b.n	9001181e <xTimerGenericCommand+0x32>
90011850:	24027140 	.word	0x24027140

90011854 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
90011854:	b158      	cbz	r0, 9001186e <pvTimerGetTimerID+0x1a>
{
90011856:	b510      	push	{r4, lr}
90011858:	4604      	mov	r4, r0
9001185a:	b082      	sub	sp, #8

	taskENTER_CRITICAL();
9001185c:	f7fd fb8a 	bl	9000ef74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
90011860:	69e0      	ldr	r0, [r4, #28]
90011862:	9001      	str	r0, [sp, #4]
	}
	taskEXIT_CRITICAL();
90011864:	f7fd fba8 	bl	9000efb8 <vPortExitCritical>

	return pvReturn;
}
90011868:	9801      	ldr	r0, [sp, #4]
9001186a:	b002      	add	sp, #8
9001186c:	bd10      	pop	{r4, pc}
9001186e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011872:	f383 8811 	msr	BASEPRI, r3
90011876:	f3bf 8f6f 	isb	sy
9001187a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
9001187e:	e7fe      	b.n	9001187e <pvTimerGetTimerID+0x2a>

90011880 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011884:	4c82      	ldr	r4, [pc, #520]	; (90011a90 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
90011886:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011888:	fba4 4303 	umull	r4, r3, r4, r3
{  
9001188c:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9001188e:	0a19      	lsrs	r1, r3, #8
{  
90011890:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011892:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
90011896:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011898:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9001189c:	4293      	cmp	r3, r2
9001189e:	930f      	str	r3, [sp, #60]	; 0x3c
900118a0:	f240 80f1 	bls.w	90011a86 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118a4:	4b7b      	ldr	r3, [pc, #492]	; (90011a94 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
900118a6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90011aa4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900118aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900118ae:	691b      	ldr	r3, [r3, #16]
900118b0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90011aa8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
900118b4:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900118b6:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900118b8:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118ba:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900118bc:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118be:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
900118c0:	f04f 0e02 	mov.w	lr, #2
900118c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
900118c6:	f502 7080 	add.w	r0, r2, #256	; 0x100
900118ca:	9204      	str	r2, [sp, #16]
900118cc:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118ce:	3101      	adds	r1, #1
900118d0:	9006      	str	r0, [sp, #24]
900118d2:	980e      	ldr	r0, [sp, #56]	; 0x38
900118d4:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900118d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900118d8:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900118dc:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900118e0:	fb01 f202 	mul.w	r2, r1, r2
900118e4:	005b      	lsls	r3, r3, #1
900118e6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
900118ea:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
900118ec:	e009      	b.n	90011902 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900118ee:	9b05      	ldr	r3, [sp, #20]
900118f0:	9a01      	ldr	r2, [sp, #4]
900118f2:	4293      	cmp	r3, r2
900118f4:	d80f      	bhi.n	90011916 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
900118f6:	f1be 0f10 	cmp.w	lr, #16
900118fa:	f000 80bb 	beq.w	90011a74 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
900118fe:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90011902:	f1be 0f0a 	cmp.w	lr, #10
90011906:	d1f2      	bne.n	900118ee <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90011908:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001190a:	9a01      	ldr	r2, [sp, #4]
9001190c:	3380      	adds	r3, #128	; 0x80
9001190e:	9304      	str	r3, [sp, #16]
90011910:	9b05      	ldr	r3, [sp, #20]
90011912:	4293      	cmp	r3, r2
90011914:	d9f3      	bls.n	900118fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90011916:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011918:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9001191a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9001191c:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9001191e:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011920:	990a      	ldr	r1, [sp, #40]	; 0x28
90011922:	9a04      	ldr	r2, [sp, #16]
90011924:	1859      	adds	r1, r3, r1
90011926:	f103 0c10 	add.w	ip, r3, #16
9001192a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9001192e:	3330      	adds	r3, #48	; 0x30
90011930:	4696      	mov	lr, r2
90011932:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90011934:	9307      	str	r3, [sp, #28]
90011936:	9b03      	ldr	r3, [sp, #12]
90011938:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
9001193c:	4674      	mov	r4, lr
    currentMCU++;
9001193e:	9e02      	ldr	r6, [sp, #8]
90011940:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011942:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90011946:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011948:	4953      	ldr	r1, [pc, #332]	; (90011a98 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9001194a:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001194c:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011950:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011952:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90011956:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011958:	4950      	ldr	r1, [pc, #320]	; (90011a9c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
9001195a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001195e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011962:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011966:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011968:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001196a:	4b4d      	ldr	r3, [pc, #308]	; (90011aa0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
9001196c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011970:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011974:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011978:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001197a:	eb03 0b02 	add.w	fp, r3, r2
9001197e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011982:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011984:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011988:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001198c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011990:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011994:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90011998:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
9001199c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
900119a0:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
900119a4:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119a8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119ac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900119b0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119b2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119b6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119ba:	ea4f 0292 	mov.w	r2, r2, lsr #2
900119be:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119c2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119c6:	ea4f 1242 	mov.w	r2, r2, lsl #5
900119ca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
900119ce:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900119d2:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
900119d6:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119da:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119de:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900119e2:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119e4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119e8:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119ec:	ea4f 0292 	mov.w	r2, r2, lsr #2
900119f0:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119f4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119f8:	ea4f 1242 	mov.w	r2, r2, lsl #5
900119fc:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011a00:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90011a04:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90011a08:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011a0a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011a0c:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011a0e:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011a10:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011a14:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011a18:	ea4f 0393 	mov.w	r3, r3, lsr #2
90011a1c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011a20:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011a24:	ea4f 1343 	mov.w	r3, r3, lsl #5
90011a28:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90011a2c:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
90011a30:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90011a34:	d185      	bne.n	90011942 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011a36:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90011a38:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
90011a3c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011a40:	3310      	adds	r3, #16
90011a42:	9302      	str	r3, [sp, #8]
            pChrom++;
90011a44:	9b03      	ldr	r3, [sp, #12]
90011a46:	3304      	adds	r3, #4
90011a48:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
90011a4a:	9b07      	ldr	r3, [sp, #28]
90011a4c:	4563      	cmp	r3, ip
90011a4e:	f47f af72 	bne.w	90011936 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
90011a52:	9b06      	ldr	r3, [sp, #24]
90011a54:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90011a58:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
90011a5c:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90011a60:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
90011a62:	9b04      	ldr	r3, [sp, #16]
90011a64:	f103 0310 	add.w	r3, r3, #16
90011a68:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011a6a:	9b01      	ldr	r3, [sp, #4]
90011a6c:	4413      	add	r3, r2
90011a6e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90011a70:	f47f af45 	bne.w	900118fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90011a74:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90011a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90011a7c:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011a80:	4293      	cmp	r3, r2
90011a82:	f47f af1c 	bne.w	900118be <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
90011a86:	ee17 0a90 	vmov	r0, s15
90011a8a:	b011      	add	sp, #68	; 0x44
90011a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011a90:	aaaaaaab 	.word	0xaaaaaaab
90011a94:	24028148 	.word	0x24028148
90011a98:	24027548 	.word	0x24027548
90011a9c:	24027148 	.word	0x24027148
90011aa0:	24027d48 	.word	0x24027d48
90011aa4:	24027948 	.word	0x24027948
90011aa8:	9002b544 	.word	0x9002b544

90011aac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011ab0:	0a1c      	lsrs	r4, r3, #8
{  
90011ab2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011ab4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011ab8:	ee07 4a90 	vmov	s15, r4
{  
90011abc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011abe:	429a      	cmp	r2, r3
{  
90011ac0:	9007      	str	r0, [sp, #28]
90011ac2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90011ac4:	930b      	str	r3, [sp, #44]	; 0x2c
90011ac6:	f080 814a 	bcs.w	90011d5e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011aca:	4ba7      	ldr	r3, [pc, #668]	; (90011d68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90011acc:	4da7      	ldr	r5, [pc, #668]	; (90011d6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90011ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90011ad0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90011d70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90011ad4:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011ad8:	691b      	ldr	r3, [r3, #16]
90011ada:	f8df a298 	ldr.w	sl, [pc, #664]	; 90011d74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90011ade:	f8df b298 	ldr.w	fp, [pc, #664]	; 90011d78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90011ae2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90011d7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011ae6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011ae8:	9301      	str	r3, [sp, #4]
90011aea:	e008      	b.n	90011afe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011aec:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011af0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90011af4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011af6:	9b08      	ldr	r3, [sp, #32]
90011af8:	4293      	cmp	r3, r2
90011afa:	f000 8130 	beq.w	90011d5e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011afe:	9a07      	ldr	r2, [sp, #28]
90011b00:	9908      	ldr	r1, [sp, #32]
90011b02:	f102 0080 	add.w	r0, r2, #128	; 0x80
90011b06:	010b      	lsls	r3, r1, #4
90011b08:	3101      	adds	r1, #1
    currentMCU++;
90011b0a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011b0e:	980a      	ldr	r0, [sp, #40]	; 0x28
90011b10:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011b12:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011b14:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90011b18:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011b1c:	fb01 f202 	mul.w	r2, r1, r2
90011b20:	005b      	lsls	r3, r3, #1
90011b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90011b26:	9300      	str	r3, [sp, #0]
    currentMCU++;
90011b28:	2308      	movs	r3, #8
90011b2a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
90011b30:	4293      	cmp	r3, r2
90011b32:	d9db      	bls.n	90011aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90011b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90011b36:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90011b38:	9a03      	ldr	r2, [sp, #12]
90011b3a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90011b3e:	9a02      	ldr	r2, [sp, #8]
90011b40:	f103 0020 	add.w	r0, r3, #32
90011b44:	3204      	adds	r2, #4
90011b46:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011b48:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90011b4c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011b4e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90011b52:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011b54:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90011b58:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90011b5a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011b5e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b62:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011b64:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011b68:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011b6c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011b6e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b70:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b74:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b78:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011b7c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b80:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b82:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b86:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011b8a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011b8e:	08e4      	lsrs	r4, r4, #3
90011b90:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011b94:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011b98:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011b9c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90011ba0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011ba4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ba6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ba8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011baa:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bae:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011bb2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bb6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bb8:	08c0      	lsrs	r0, r0, #3
90011bba:	08a4      	lsrs	r4, r4, #2
90011bbc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011bc0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011bc4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011bc8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011bcc:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011bd0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90011bd4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011bd8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bdc:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011bde:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011be2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011be6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011be8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bea:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bee:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bf2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011bf6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bfa:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bfc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c00:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011c04:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011c08:	08e4      	lsrs	r4, r4, #3
90011c0a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011c0e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011c12:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011c16:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90011c1a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011c1e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c20:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c22:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c24:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c28:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011c2c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c30:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c32:	08c0      	lsrs	r0, r0, #3
90011c34:	08a4      	lsrs	r4, r4, #2
90011c36:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011c3a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011c3e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011c42:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011c46:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90011c4a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011c4e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011c52:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011c56:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c5a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011c5c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011c60:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011c62:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c64:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c68:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c6c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011c70:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c74:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c76:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c7a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011c7e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011c82:	08e4      	lsrs	r4, r4, #3
90011c84:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011c88:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011c8c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011c90:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90011c94:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011c98:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c9a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c9c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c9e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ca2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011ca6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011caa:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011cac:	08c0      	lsrs	r0, r0, #3
90011cae:	08a4      	lsrs	r4, r4, #2
90011cb0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011cb4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011cb8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011cbc:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011cc0:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011cc4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90011cc8:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ccc:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011cd0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011cd2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011cd6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011cda:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011cdc:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011cde:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ce2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ce6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011cea:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011cee:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011cf0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011cf4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011cf8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011cfc:	08e4      	lsrs	r4, r4, #3
90011cfe:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011d02:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011d06:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011d0a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90011d0e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011d12:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011d14:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011d16:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011d18:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011d1c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011d20:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011d24:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011d26:	08c0      	lsrs	r0, r0, #3
90011d28:	08a4      	lsrs	r4, r4, #2
90011d2a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011d2e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011d32:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90011d36:	9804      	ldr	r0, [sp, #16]
90011d38:	4283      	cmp	r3, r0
90011d3a:	f47f af05 	bne.w	90011b48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90011d3e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011d40:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90011d42:	3308      	adds	r3, #8
90011d44:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90011d46:	9b03      	ldr	r3, [sp, #12]
90011d48:	3308      	adds	r3, #8
90011d4a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011d4c:	9b00      	ldr	r3, [sp, #0]
90011d4e:	4413      	add	r3, r2
90011d50:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90011d52:	9b05      	ldr	r3, [sp, #20]
90011d54:	3b01      	subs	r3, #1
90011d56:	9305      	str	r3, [sp, #20]
90011d58:	f47f aee8 	bne.w	90011b2c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90011d5c:	e6c6      	b.n	90011aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90011d5e:	ee17 0a90 	vmov	r0, s15
90011d62:	b00d      	add	sp, #52	; 0x34
90011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011d68:	24028148 	.word	0x24028148
90011d6c:	24027148 	.word	0x24027148
90011d70:	24027d48 	.word	0x24027d48
90011d74:	24027948 	.word	0x24027948
90011d78:	24027548 	.word	0x24027548
90011d7c:	9002b544 	.word	0x9002b544

90011d80 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d84:	4cb6      	ldr	r4, [pc, #728]	; (90012060 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
90011d86:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d88:	fba4 4303 	umull	r4, r3, r4, r3
{  
90011d8c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d8e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011d90:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d94:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90011d98:	429a      	cmp	r2, r3
90011d9a:	9306      	str	r3, [sp, #24]
{  
90011d9c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90011da0:	f080 8158 	bcs.w	90012054 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011da4:	4baf      	ldr	r3, [pc, #700]	; (90012064 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011da6:	4cb0      	ldr	r4, [pc, #704]	; (90012068 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011daa:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90012070 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011dae:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011db2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011db4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90012074 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011db8:	48ac      	ldr	r0, [pc, #688]	; (9001206c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90011dba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90012078 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011dbe:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011dc0:	9300      	str	r3, [sp, #0]
90011dc2:	e007      	b.n	90011dd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90011dc4:	9b04      	ldr	r3, [sp, #16]
90011dc6:	33c0      	adds	r3, #192	; 0xc0
90011dc8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90011dca:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90011dce:	4293      	cmp	r3, r2
90011dd0:	f000 8140 	beq.w	90012054 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011dd4:	9e05      	ldr	r6, [sp, #20]
90011dd6:	9f07      	ldr	r7, [sp, #28]
90011dd8:	00f2      	lsls	r2, r6, #3
90011dda:	3601      	adds	r6, #1
90011ddc:	9904      	ldr	r1, [sp, #16]
90011dde:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011de0:	9e03      	ldr	r6, [sp, #12]
90011de2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011de6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90011dea:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011dee:	fb06 f505 	mul.w	r5, r6, r5
90011df2:	0052      	lsls	r2, r2, #1
90011df4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
90011df8:	2508      	movs	r5, #8
90011dfa:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011dfc:	9d00      	ldr	r5, [sp, #0]
90011dfe:	4295      	cmp	r5, r2
90011e00:	d9e0      	bls.n	90011dc4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e02:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90011e06:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e08:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90011e0c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90011e0e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e12:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e16:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90011e1a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e1c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e20:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e24:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e26:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e28:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e2a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e2e:	eb05 4929 	add.w	r9, r5, r9, asr #16
90011e32:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e36:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e38:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90011e3c:	08ed      	lsrs	r5, r5, #3
90011e3e:	08bf      	lsrs	r7, r7, #2
90011e40:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90011e44:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e46:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011e4a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e4c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e50:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90011e54:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e58:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e5c:	4425      	add	r5, r4
90011e5e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e62:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e66:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e6a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e6c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e6e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e70:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e74:	eb05 4929 	add.w	r9, r5, r9, asr #16
90011e78:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e7c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e7e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90011e82:	08ed      	lsrs	r5, r5, #3
90011e84:	08bf      	lsrs	r7, r7, #2
90011e86:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90011e8a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e8c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90011e90:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
90011e92:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e94:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90011e98:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011e9c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e9e:	4427      	add	r7, r4
90011ea0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011ea4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ea6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011eaa:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011eac:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011eb0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011eb4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011eb8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011ebc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ebe:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011ec2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ec4:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011ec8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90011ecc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011ed0:	08fe      	lsrs	r6, r7, #3
90011ed2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011ed6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011eda:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011ede:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011ee0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ee4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90011ee8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011eec:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ef0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90011ef4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011ef6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011efa:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011efe:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f00:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f02:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f04:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f08:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011f0c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f10:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f14:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011f18:	08fe      	lsrs	r6, r7, #3
90011f1a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011f1e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011f22:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011f26:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011f28:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011f2c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90011f30:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f34:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f38:	4427      	add	r7, r4
90011f3a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f3e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f42:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f46:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f48:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f4a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f4c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f50:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011f54:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f58:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f5c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011f60:	08fe      	lsrs	r6, r7, #3
90011f62:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011f66:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011f6a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011f6e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011f70:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90011f74:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f78:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90011f7c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011f7e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f82:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f86:	44b9      	add	r9, r7
90011f88:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f8c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f90:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f94:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f98:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f9a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f9c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011fa0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90011fa4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011fa8:	08fe      	lsrs	r6, r7, #3
90011faa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011fae:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011fb2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011fb6:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011fb8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011fbc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90011fc0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011fc4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fc8:	4427      	add	r7, r4
90011fca:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011fce:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011fd2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fd6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011fd8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011fda:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fdc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fe0:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011fe4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fe8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fec:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011ff0:	08fe      	lsrs	r6, r7, #3
90011ff2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011ff6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011ffa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011ffe:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012000:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012004:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90012008:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001200c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90012010:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012012:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012016:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001201a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001201e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012020:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012022:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012024:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012028:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001202c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012030:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012034:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012038:	08fe      	lsrs	r6, r7, #3
9001203a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9001203e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90012042:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012046:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90012048:	9d01      	ldr	r5, [sp, #4]
9001204a:	3d01      	subs	r5, #1
9001204c:	9501      	str	r5, [sp, #4]
9001204e:	f47f aed5 	bne.w	90011dfc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90012052:	e6b7      	b.n	90011dc4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90012054:	ee17 0a90 	vmov	r0, s15
90012058:	b009      	add	sp, #36	; 0x24
9001205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001205e:	bf00      	nop
90012060:	aaaaaaab 	.word	0xaaaaaaab
90012064:	24028148 	.word	0x24028148
90012068:	9002b544 	.word	0x9002b544
9001206c:	24027948 	.word	0x24027948
90012070:	24027d48 	.word	0x24027d48
90012074:	24027148 	.word	0x24027148
90012078:	24027548 	.word	0x24027548

9001207c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9001207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90012080:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012084:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90012086:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012088:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001208c:	f080 8088 	bcs.w	900121a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012090:	4b45      	ldr	r3, [pc, #276]	; (900121a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012092:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012096:	691e      	ldr	r6, [r3, #16]
90012098:	e003      	b.n	900120a2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9001209a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9001209c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900120a0:	d07e      	beq.n	900121a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900120a2:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900120a4:	4604      	mov	r4, r0
900120a6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900120aa:	3201      	adds	r2, #1
900120ac:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900120b0:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900120b4:	fb08 f505 	mul.w	r5, r8, r5
900120b8:	005b      	lsls	r3, r3, #1
900120ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900120be:	429e      	cmp	r6, r3
900120c0:	d9eb      	bls.n	9001209a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900120c2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900120c6:	18cd      	adds	r5, r1, r3
          pLum++;
900120c8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900120ca:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900120ce:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120d2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120d6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120da:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120de:	ea47 070c 	orr.w	r7, r7, ip
900120e2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
900120e4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900120e6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900120ea:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120ee:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120f2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120f6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120fa:	ea47 070c 	orr.w	r7, r7, ip
900120fe:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90012100:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012104:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012108:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001210c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012110:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012114:	ea47 070c 	orr.w	r7, r7, ip
90012118:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9001211a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001211e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012122:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012126:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001212a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001212e:	ea47 070c 	orr.w	r7, r7, ip
90012132:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90012134:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012138:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001213c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012140:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012144:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012148:	ea47 070c 	orr.w	r7, r7, ip
9001214c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9001214e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012152:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012156:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001215a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001215e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012162:	ea47 070c 	orr.w	r7, r7, ip
90012166:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90012168:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001216c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012170:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012174:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012178:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001217c:	ea47 070c 	orr.w	r7, r7, ip
90012180:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90012182:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012186:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001218a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001218e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012192:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012196:	ea47 070c 	orr.w	r7, r7, ip
9001219a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9001219c:	d18f      	bne.n	900120be <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9001219e:	e77c      	b.n	9001209a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900121a0:	ee17 0a90 	vmov	r0, s15
900121a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900121a8:	24028148 	.word	0x24028148

900121ac <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900121b0:	0a1c      	lsrs	r4, r3, #8
{  
900121b2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900121b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900121b8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900121bc:	429a      	cmp	r2, r3
900121be:	9300      	str	r3, [sp, #0]
900121c0:	f080 8129 	bcs.w	90012416 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900121c4:	4b96      	ldr	r3, [pc, #600]	; (90012420 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900121c6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90012424 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900121ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900121cc:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900121d0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900121d2:	9401      	str	r4, [sp, #4]
900121d4:	e005      	b.n	900121e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900121d6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900121d8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900121dc:	429a      	cmp	r2, r3
900121de:	f000 811a 	beq.w	90012416 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900121e2:	00d3      	lsls	r3, r2, #3
900121e4:	9c01      	ldr	r4, [sp, #4]
900121e6:	3201      	adds	r2, #1
    currentMCU++;
900121e8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900121ec:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900121f0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900121f4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900121f6:	fb08 f505 	mul.w	r5, r8, r5
900121fa:	0064      	lsls	r4, r4, #1
900121fc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012200:	42a6      	cmp	r6, r4
90012202:	d9e8      	bls.n	900121d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90012204:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90012208:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001220a:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9001220e:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90012212:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012216:	fb19 f90a 	smulbb	r9, r9, sl
9001221a:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001221e:	f813 5c08 	ldrb.w	r5, [r3, #-8]
90012222:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012226:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001222a:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001222e:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012232:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012236:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001223a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9001223e:	fb19 f90a 	smulbb	r9, r9, sl
90012242:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012246:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001224a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001224c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001224e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90012250:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012254:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90012258:	fb19 f90a 	smulbb	r9, r9, sl
9001225c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012260:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90012264:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012268:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001226c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012270:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012274:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012278:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001227c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90012280:	fb19 f90a 	smulbb	r9, r9, sl
90012284:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012288:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001228c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001228e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90012290:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012294:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90012298:	fb19 f90a 	smulbb	r9, r9, sl
9001229c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122a0:	f813 5c06 	ldrb.w	r5, [r3, #-6]
900122a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122a8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122b0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900122b4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900122b8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900122bc:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900122c0:	fb19 f90a 	smulbb	r9, r9, sl
900122c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900122cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900122ce:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900122d0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900122d4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900122d8:	fb19 f90a 	smulbb	r9, r9, sl
900122dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122e0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900122e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900122f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900122f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900122fc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90012300:	fb19 f90a 	smulbb	r9, r9, sl
90012304:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012308:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001230c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001230e:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90012310:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012314:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90012318:	fb19 f90a 	smulbb	r9, r9, sl
9001231c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012320:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90012324:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012328:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001232c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012330:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012334:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012338:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001233c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90012340:	fb19 f90a 	smulbb	r9, r9, sl
90012344:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012348:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001234c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001234e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90012350:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012354:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90012358:	fb19 f90a 	smulbb	r9, r9, sl
9001235c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012360:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90012364:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012368:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001236c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012370:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012374:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012378:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001237c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90012380:	fb19 f90a 	smulbb	r9, r9, sl
90012384:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012388:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001238c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001238e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90012390:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012394:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90012398:	fb19 f90a 	smulbb	r9, r9, sl
9001239c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900123a0:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
900123a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900123a8:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900123ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900123b0:	ea4f 2555 	mov.w	r5, r5, lsr #9
900123b4:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900123b8:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900123bc:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900123c0:	fb19 f90a 	smulbb	r9, r9, sl
900123c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900123c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900123cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900123ce:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900123d0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900123d4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900123d8:	fb19 f90a 	smulbb	r9, r9, sl
900123dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900123e0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900123e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900123e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900123ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900123f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900123f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900123f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900123fc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90012400:	fb19 f90a 	smulbb	r9, r9, sl
90012404:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012408:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001240c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001240e:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90012410:	f47f aef6 	bne.w	90012200 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90012414:	e6df      	b.n	900121d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90012416:	ee17 0a90 	vmov	r0, s15
9001241a:	b003      	add	sp, #12
9001241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012420:	24028148 	.word	0x24028148
90012424:	80808081 	.word	0x80808081

90012428 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90012428:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9001242a:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9001242c:	6805      	ldr	r5, [r0, #0]
9001242e:	4c3e      	ldr	r4, [pc, #248]	; (90012528 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90012430:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90012432:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90012434:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90012436:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9001243a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9001243e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90012440:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90012444:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90012446:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90012448:	d027      	beq.n	9001249a <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9001244a:	b9ed      	cbnz	r5, 90012488 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9001244c:	4837      	ldr	r0, [pc, #220]	; (9001252c <JPEG_GetDecodeColorConvertFunc+0x104>)
9001244e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90012450:	f013 0107 	ands.w	r1, r3, #7
90012454:	d02b      	beq.n	900124ae <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90012456:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9001245a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9001245c:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001245e:	4419      	add	r1, r3
90012460:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012462:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012464:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012466:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012468:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
9001246c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9001246e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90012472:	fb05 6611 	mls	r6, r5, r1, r6
90012476:	b106      	cbz	r6, 9001247a <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90012478:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9001247a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9001247e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90012480:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90012482:	6013      	str	r3, [r2, #0]
}
90012484:	bcf0      	pop	{r4, r5, r6, r7}
90012486:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90012488:	2d30      	cmp	r5, #48	; 0x30
9001248a:	d119      	bne.n	900124c0 <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9001248c:	4828      	ldr	r0, [pc, #160]	; (90012530 <JPEG_GetDecodeColorConvertFunc+0x108>)
9001248e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90012490:	f013 0107 	ands.w	r1, r3, #7
90012494:	d1df      	bne.n	90012456 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90012496:	6161      	str	r1, [r4, #20]
90012498:	e00a      	b.n	900124b0 <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9001249a:	2f01      	cmp	r7, #1
9001249c:	d024      	beq.n	900124e8 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9001249e:	2f02      	cmp	r7, #2
900124a0:	d011      	beq.n	900124c6 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900124a2:	4824      	ldr	r0, [pc, #144]	; (90012534 <JPEG_GetDecodeColorConvertFunc+0x10c>)
900124a4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900124a6:	f013 0107 	ands.w	r1, r3, #7
900124aa:	d1d4      	bne.n	90012456 <JPEG_GetDecodeColorConvertFunc+0x2e>
900124ac:	e7f3      	b.n	90012496 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900124ae:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124b0:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900124b2:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900124b4:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900124b6:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124b8:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900124ba:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900124be:	e7d6      	b.n	9001246e <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900124c0:	2001      	movs	r0, #1
}
900124c2:	bcf0      	pop	{r4, r5, r6, r7}
900124c4:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900124c6:	481c      	ldr	r0, [pc, #112]	; (90012538 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900124c8:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900124ca:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900124cc:	f013 010f 	ands.w	r1, r3, #15
900124d0:	d022      	beq.n	90012518 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
900124d2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900124d6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
900124d8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900124da:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900124dc:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900124de:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124e0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900124e2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124e4:	62a1      	str	r1, [r4, #40]	; 0x28
900124e6:	e7c1      	b.n	9001246c <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900124e8:	4814      	ldr	r0, [pc, #80]	; (9001253c <JPEG_GetDecodeColorConvertFunc+0x114>)
900124ea:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900124ec:	f013 010f 	ands.w	r1, r3, #15
900124f0:	d107      	bne.n	90012502 <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900124f2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124f4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900124f6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900124f8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124fa:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900124fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012500:	e7b5      	b.n	9001246e <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012502:	f1c1 0110 	rsb	r1, r1, #16
90012506:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012508:	4419      	add	r1, r3
9001250a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001250c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001250e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012510:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012512:	e9c4 5507 	strd	r5, r5, [r4, #28]
90012516:	e7a9      	b.n	9001246c <JPEG_GetDecodeColorConvertFunc+0x44>
90012518:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001251a:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001251c:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001251e:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012522:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012524:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012526:	e7a2      	b.n	9001246e <JPEG_GetDecodeColorConvertFunc+0x46>
90012528:	24028148 	.word	0x24028148
9001252c:	9001207d 	.word	0x9001207d
90012530:	900121ad 	.word	0x900121ad
90012534:	90011d81 	.word	0x90011d81
90012538:	90011aad 	.word	0x90011aad
9001253c:	90011881 	.word	0x90011881

90012540 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90012540:	8880      	ldrh	r0, [r0, #4]
90012542:	4770      	bx	lr

90012544 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90012544:	b570      	push	{r4, r5, r6, lr}
90012546:	6803      	ldr	r3, [r0, #0]
90012548:	460c      	mov	r4, r1
9001254a:	2100      	movs	r1, #0
9001254c:	4605      	mov	r5, r0
9001254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012550:	4798      	blx	r3
90012552:	4606      	mov	r6, r0
90012554:	682b      	ldr	r3, [r5, #0]
90012556:	4628      	mov	r0, r5
90012558:	1ba4      	subs	r4, r4, r6
9001255a:	6a1b      	ldr	r3, [r3, #32]
9001255c:	b2a4      	uxth	r4, r4
9001255e:	4798      	blx	r3
90012560:	fbb4 f0f0 	udiv	r0, r4, r0
90012564:	bd70      	pop	{r4, r5, r6, pc}

90012566 <_ZN8touchgfx17AbstractPartition5clearEv>:
90012566:	2300      	movs	r3, #0
90012568:	8083      	strh	r3, [r0, #4]
9001256a:	4770      	bx	lr

9001256c <_ZN8touchgfx17AbstractPartition8allocateEt>:
9001256c:	b510      	push	{r4, lr}
9001256e:	6803      	ldr	r3, [r0, #0]
90012570:	4604      	mov	r4, r0
90012572:	8881      	ldrh	r1, [r0, #4]
90012574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012576:	4798      	blx	r3
90012578:	88a3      	ldrh	r3, [r4, #4]
9001257a:	3301      	adds	r3, #1
9001257c:	80a3      	strh	r3, [r4, #4]
9001257e:	bd10      	pop	{r4, pc}

90012580 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90012580:	6803      	ldr	r3, [r0, #0]
90012582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012584:	4718      	bx	r3

90012586 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90012586:	4770      	bx	lr

90012588 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90012588:	4a02      	ldr	r2, [pc, #8]	; (90012594 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
9001258a:	6002      	str	r2, [r0, #0]
9001258c:	2200      	movs	r2, #0
9001258e:	8082      	strh	r2, [r0, #4]
90012590:	4770      	bx	lr
90012592:	bf00      	nop
90012594:	9002b84c 	.word	0x9002b84c

90012598 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90012598:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001259a:	2000      	movs	r0, #0
9001259c:	b12b      	cbz	r3, 900125aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9001259e:	b920      	cbnz	r0, 900125aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900125a0:	1a5a      	subs	r2, r3, r1
900125a2:	699b      	ldr	r3, [r3, #24]
900125a4:	4250      	negs	r0, r2
900125a6:	4150      	adcs	r0, r2
900125a8:	e7f8      	b.n	9001259c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
900125aa:	4770      	bx	lr

900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
900125ac:	2300      	movs	r3, #0
900125ae:	6148      	str	r0, [r1, #20]
900125b0:	618b      	str	r3, [r1, #24]
900125b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
900125b4:	b913      	cbnz	r3, 900125bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
900125b6:	6281      	str	r1, [r0, #40]	; 0x28
900125b8:	4770      	bx	lr
900125ba:	4613      	mov	r3, r2
900125bc:	699a      	ldr	r2, [r3, #24]
900125be:	2a00      	cmp	r2, #0
900125c0:	d1fb      	bne.n	900125ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
900125c2:	6199      	str	r1, [r3, #24]
900125c4:	4770      	bx	lr

900125c6 <_ZN8touchgfx9Container9removeAllEv>:
900125c6:	2200      	movs	r2, #0
900125c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
900125ca:	b123      	cbz	r3, 900125d6 <_ZN8touchgfx9Container9removeAllEv+0x10>
900125cc:	6999      	ldr	r1, [r3, #24]
900125ce:	6281      	str	r1, [r0, #40]	; 0x28
900125d0:	e9c3 2205 	strd	r2, r2, [r3, #20]
900125d4:	e7f8      	b.n	900125c8 <_ZN8touchgfx9Container9removeAllEv+0x2>
900125d6:	4770      	bx	lr

900125d8 <_ZN8touchgfx9Container6unlinkEv>:
900125d8:	2300      	movs	r3, #0
900125da:	6283      	str	r3, [r0, #40]	; 0x28
900125dc:	4770      	bx	lr

900125de <_ZNK8touchgfx9Container12getSolidRectEv>:
900125de:	2200      	movs	r2, #0
900125e0:	8002      	strh	r2, [r0, #0]
900125e2:	8042      	strh	r2, [r0, #2]
900125e4:	8082      	strh	r2, [r0, #4]
900125e6:	80c2      	strh	r2, [r0, #6]
900125e8:	4770      	bx	lr

900125ea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
900125ea:	b570      	push	{r4, r5, r6, lr}
900125ec:	460d      	mov	r5, r1
900125ee:	4616      	mov	r6, r2
900125f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
900125f2:	b13c      	cbz	r4, 90012604 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
900125f4:	6823      	ldr	r3, [r4, #0]
900125f6:	4620      	mov	r0, r4
900125f8:	4632      	mov	r2, r6
900125fa:	4629      	mov	r1, r5
900125fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900125fe:	4798      	blx	r3
90012600:	69a4      	ldr	r4, [r4, #24]
90012602:	e7f6      	b.n	900125f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90012604:	bd70      	pop	{r4, r5, r6, pc}

90012606 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90012606:	b538      	push	{r3, r4, r5, lr}
90012608:	460d      	mov	r5, r1
9001260a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001260c:	b134      	cbz	r4, 9001261c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001260e:	682b      	ldr	r3, [r5, #0]
90012610:	4621      	mov	r1, r4
90012612:	4628      	mov	r0, r5
90012614:	689b      	ldr	r3, [r3, #8]
90012616:	4798      	blx	r3
90012618:	69a4      	ldr	r4, [r4, #24]
9001261a:	e7f7      	b.n	9001260c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9001261c:	bd38      	pop	{r3, r4, r5, pc}

9001261e <_ZN8touchgfx9ContainerD1Ev>:
9001261e:	4770      	bx	lr

90012620 <_ZN8touchgfx9ContainerD0Ev>:
90012620:	b510      	push	{r4, lr}
90012622:	4604      	mov	r4, r0
90012624:	212c      	movs	r1, #44	; 0x2c
90012626:	f014 fd66 	bl	900270f6 <_ZdlPvj>
9001262a:	4620      	mov	r0, r4
9001262c:	bd10      	pop	{r4, pc}

9001262e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9001262e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012630:	b19b      	cbz	r3, 9001265a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90012632:	428b      	cmp	r3, r1
90012634:	d109      	bne.n	9001264a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90012636:	699a      	ldr	r2, [r3, #24]
90012638:	2100      	movs	r1, #0
9001263a:	6159      	str	r1, [r3, #20]
9001263c:	6282      	str	r2, [r0, #40]	; 0x28
9001263e:	b902      	cbnz	r2, 90012642 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90012640:	4770      	bx	lr
90012642:	6199      	str	r1, [r3, #24]
90012644:	4770      	bx	lr
90012646:	4613      	mov	r3, r2
90012648:	b13a      	cbz	r2, 9001265a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001264a:	699a      	ldr	r2, [r3, #24]
9001264c:	428a      	cmp	r2, r1
9001264e:	d1fa      	bne.n	90012646 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90012650:	698a      	ldr	r2, [r1, #24]
90012652:	619a      	str	r2, [r3, #24]
90012654:	2300      	movs	r3, #0
90012656:	e9c1 3305 	strd	r3, r3, [r1, #20]
9001265a:	4770      	bx	lr

9001265c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
9001265c:	b410      	push	{r4}
9001265e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012660:	4604      	mov	r4, r0
90012662:	b92b      	cbnz	r3, 90012670 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90012664:	6803      	ldr	r3, [r0, #0]
90012666:	4611      	mov	r1, r2
90012668:	f85d 4b04 	ldr.w	r4, [sp], #4
9001266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9001266e:	4718      	bx	r3
90012670:	b941      	cbnz	r1, 90012684 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
90012672:	6193      	str	r3, [r2, #24]
90012674:	6282      	str	r2, [r0, #40]	; 0x28
90012676:	6154      	str	r4, [r2, #20]
90012678:	f85d 4b04 	ldr.w	r4, [sp], #4
9001267c:	4770      	bx	lr
9001267e:	4603      	mov	r3, r0
90012680:	2800      	cmp	r0, #0
90012682:	d0f9      	beq.n	90012678 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90012684:	4299      	cmp	r1, r3
90012686:	6998      	ldr	r0, [r3, #24]
90012688:	d1f9      	bne.n	9001267e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
9001268a:	6190      	str	r0, [r2, #24]
9001268c:	618a      	str	r2, [r1, #24]
9001268e:	e7f2      	b.n	90012676 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90012690 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90012690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012694:	461f      	mov	r7, r3
90012696:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9001269a:	460d      	mov	r5, r1
9001269c:	4616      	mov	r6, r2
9001269e:	b103      	cbz	r3, 900126a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
900126a0:	6038      	str	r0, [r7, #0]
900126a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
900126a4:	b314      	cbz	r4, 900126ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
900126a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900126aa:	b1eb      	cbz	r3, 900126e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900126ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900126b0:	428d      	cmp	r5, r1
900126b2:	db19      	blt.n	900126e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900126b4:	b289      	uxth	r1, r1
900126b6:	8923      	ldrh	r3, [r4, #8]
900126b8:	440b      	add	r3, r1
900126ba:	b21b      	sxth	r3, r3
900126bc:	429d      	cmp	r5, r3
900126be:	da13      	bge.n	900126e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900126c0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900126c4:	4296      	cmp	r6, r2
900126c6:	db0f      	blt.n	900126e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900126c8:	b292      	uxth	r2, r2
900126ca:	8963      	ldrh	r3, [r4, #10]
900126cc:	4413      	add	r3, r2
900126ce:	b21b      	sxth	r3, r3
900126d0:	429e      	cmp	r6, r3
900126d2:	da09      	bge.n	900126e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900126d4:	6823      	ldr	r3, [r4, #0]
900126d6:	1ab2      	subs	r2, r6, r2
900126d8:	1a69      	subs	r1, r5, r1
900126da:	4620      	mov	r0, r4
900126dc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
900126e0:	b212      	sxth	r2, r2
900126e2:	463b      	mov	r3, r7
900126e4:	b209      	sxth	r1, r1
900126e6:	47c0      	blx	r8
900126e8:	69a4      	ldr	r4, [r4, #24]
900126ea:	e7db      	b.n	900126a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
900126ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900126f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
900126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900126f4:	4c6d      	ldr	r4, [pc, #436]	; (900128ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
900126f6:	b0a1      	sub	sp, #132	; 0x84
900126f8:	4606      	mov	r6, r0
900126fa:	6824      	ldr	r4, [r4, #0]
900126fc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
900126fe:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90012702:	2400      	movs	r4, #0
90012704:	9303      	str	r3, [sp, #12]
90012706:	802c      	strh	r4, [r5, #0]
90012708:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9001270a:	802c      	strh	r4, [r5, #0]
9001270c:	601c      	str	r4, [r3, #0]
9001270e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90012712:	f7ff ffbd 	bl	90012690 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012716:	f1b9 0f03 	cmp.w	r9, #3
9001271a:	f340 80c1 	ble.w	900128a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001271e:	4631      	mov	r1, r6
90012720:	a80c      	add	r0, sp, #48	; 0x30
90012722:	f006 fb95 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012726:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001272a:	9306      	str	r3, [sp, #24]
9001272c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012730:	9307      	str	r3, [sp, #28]
90012732:	9b03      	ldr	r3, [sp, #12]
90012734:	f8d3 a000 	ldr.w	sl, [r3]
90012738:	f1ba 0f00 	cmp.w	sl, #0
9001273c:	f000 80b3 	beq.w	900128a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90012740:	4651      	mov	r1, sl
90012742:	a810      	add	r0, sp, #64	; 0x40
90012744:	f006 fb84 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012748:	2002      	movs	r0, #2
9001274a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9001274e:	9b01      	ldr	r3, [sp, #4]
90012750:	9a06      	ldr	r2, [sp, #24]
90012752:	fb91 f1f0 	sdiv	r1, r1, r0
90012756:	189d      	adds	r5, r3, r2
90012758:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
9001275c:	9a07      	ldr	r2, [sp, #28]
9001275e:	4419      	add	r1, r3
90012760:	9b02      	ldr	r3, [sp, #8]
90012762:	4413      	add	r3, r2
90012764:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90012768:	1a6d      	subs	r5, r5, r1
9001276a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9001276e:	fb92 f2f0 	sdiv	r2, r2, r0
90012772:	440a      	add	r2, r1
90012774:	1a9b      	subs	r3, r3, r2
90012776:	435b      	muls	r3, r3
90012778:	fb05 3505 	mla	r5, r5, r5, r3
9001277c:	4f4c      	ldr	r7, [pc, #304]	; (900128b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9001277e:	ac10      	add	r4, sp, #64	; 0x40
90012780:	f1b9 0f0c 	cmp.w	r9, #12
90012784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012788:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001278a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9001278c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001278e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012790:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90012794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90012798:	f04f 0303 	mov.w	r3, #3
9001279c:	bfd8      	it	le
9001279e:	f109 32ff 	addle.w	r2, r9, #4294967295
900127a2:	f04f 0400 	mov.w	r4, #0
900127a6:	f8cd 9000 	str.w	r9, [sp]
900127aa:	bfcc      	ite	gt
900127ac:	4698      	movgt	r8, r3
900127ae:	fb92 f8f3 	sdivle	r8, r2, r3
900127b2:	1c63      	adds	r3, r4, #1
900127b4:	aa10      	add	r2, sp, #64	; 0x40
900127b6:	f004 0401 	and.w	r4, r4, #1
900127ba:	f04f 0b00 	mov.w	fp, #0
900127be:	9308      	str	r3, [sp, #32]
900127c0:	9b00      	ldr	r3, [sp, #0]
900127c2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
900127c6:	fb93 f3f8 	sdiv	r3, r3, r8
900127ca:	3404      	adds	r4, #4
900127cc:	b29b      	uxth	r3, r3
900127ce:	9304      	str	r3, [sp, #16]
900127d0:	9a04      	ldr	r2, [sp, #16]
900127d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
900127d6:	fb13 f302 	smulbb	r3, r3, r2
900127da:	9a01      	ldr	r2, [sp, #4]
900127dc:	b29b      	uxth	r3, r3
900127de:	1899      	adds	r1, r3, r2
900127e0:	9305      	str	r3, [sp, #20]
900127e2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900127e6:	b209      	sxth	r1, r1
900127e8:	4299      	cmp	r1, r3
900127ea:	db4d      	blt.n	90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900127ec:	8932      	ldrh	r2, [r6, #8]
900127ee:	4413      	add	r3, r2
900127f0:	b21b      	sxth	r3, r3
900127f2:	4299      	cmp	r1, r3
900127f4:	da48      	bge.n	90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900127f6:	9b04      	ldr	r3, [sp, #16]
900127f8:	6827      	ldr	r7, [r4, #0]
900127fa:	fb17 f703 	smulbb	r7, r7, r3
900127fe:	9b02      	ldr	r3, [sp, #8]
90012800:	b2bf      	uxth	r7, r7
90012802:	18fa      	adds	r2, r7, r3
90012804:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90012808:	b212      	sxth	r2, r2
9001280a:	429a      	cmp	r2, r3
9001280c:	db3c      	blt.n	90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001280e:	8970      	ldrh	r0, [r6, #10]
90012810:	4403      	add	r3, r0
90012812:	b21b      	sxth	r3, r3
90012814:	429a      	cmp	r2, r3
90012816:	da37      	bge.n	90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012818:	2300      	movs	r3, #0
9001281a:	4630      	mov	r0, r6
9001281c:	930b      	str	r3, [sp, #44]	; 0x2c
9001281e:	ab0b      	add	r3, sp, #44	; 0x2c
90012820:	f7ff ff36 	bl	90012690 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012826:	b37a      	cbz	r2, 90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012828:	4552      	cmp	r2, sl
9001282a:	d02d      	beq.n	90012888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001282c:	4611      	mov	r1, r2
9001282e:	a80e      	add	r0, sp, #56	; 0x38
90012830:	9209      	str	r2, [sp, #36]	; 0x24
90012832:	f006 fb0d 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012836:	f04f 0e02 	mov.w	lr, #2
9001283a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9001283e:	9a06      	ldr	r2, [sp, #24]
90012840:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90012844:	9b01      	ldr	r3, [sp, #4]
90012846:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
9001284a:	4413      	add	r3, r2
9001284c:	9a07      	ldr	r2, [sp, #28]
9001284e:	fb91 f1fe 	sdiv	r1, r1, lr
90012852:	fb9c fcfe 	sdiv	ip, ip, lr
90012856:	4401      	add	r1, r0
90012858:	1a58      	subs	r0, r3, r1
9001285a:	9b02      	ldr	r3, [sp, #8]
9001285c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90012860:	4413      	add	r3, r2
90012862:	9a09      	ldr	r2, [sp, #36]	; 0x24
90012864:	448c      	add	ip, r1
90012866:	eba3 030c 	sub.w	r3, r3, ip
9001286a:	435b      	muls	r3, r3
9001286c:	fb00 3300 	mla	r3, r0, r0, r3
90012870:	42ab      	cmp	r3, r5
90012872:	d208      	bcs.n	90012886 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90012874:	990b      	ldr	r1, [sp, #44]	; 0x2c
90012876:	461d      	mov	r5, r3
90012878:	9803      	ldr	r0, [sp, #12]
9001287a:	6001      	str	r1, [r0, #0]
9001287c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001287e:	9805      	ldr	r0, [sp, #20]
90012880:	8008      	strh	r0, [r1, #0]
90012882:	992b      	ldr	r1, [sp, #172]	; 0xac
90012884:	800f      	strh	r7, [r1, #0]
90012886:	4692      	mov	sl, r2
90012888:	f10b 0b01 	add.w	fp, fp, #1
9001288c:	3408      	adds	r4, #8
9001288e:	f1bb 0f04 	cmp.w	fp, #4
90012892:	d19d      	bne.n	900127d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90012894:	9b00      	ldr	r3, [sp, #0]
90012896:	9c08      	ldr	r4, [sp, #32]
90012898:	444b      	add	r3, r9
9001289a:	4544      	cmp	r4, r8
9001289c:	9300      	str	r3, [sp, #0]
9001289e:	d188      	bne.n	900127b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
900128a0:	b021      	add	sp, #132	; 0x84
900128a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900128a6:	f04f 35ff 	mov.w	r5, #4294967295
900128aa:	e767      	b.n	9001277c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
900128ac:	24028194 	.word	0x24028194
900128b0:	90028214 	.word	0x90028214

900128b4 <_ZN8touchgfx4RectaNERKS0_>:
900128b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900128b8:	f9b1 7000 	ldrsh.w	r7, [r1]
900128bc:	888c      	ldrh	r4, [r1, #4]
900128be:	f9b0 9000 	ldrsh.w	r9, [r0]
900128c2:	443c      	add	r4, r7
900128c4:	b2a4      	uxth	r4, r4
900128c6:	fa0f f884 	sxth.w	r8, r4
900128ca:	45c1      	cmp	r9, r8
900128cc:	da2f      	bge.n	9001292e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900128ce:	8882      	ldrh	r2, [r0, #4]
900128d0:	444a      	add	r2, r9
900128d2:	b292      	uxth	r2, r2
900128d4:	fa0f fe82 	sxth.w	lr, r2
900128d8:	4577      	cmp	r7, lr
900128da:	da28      	bge.n	9001292e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900128dc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
900128e0:	88cb      	ldrh	r3, [r1, #6]
900128e2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
900128e6:	442b      	add	r3, r5
900128e8:	b21b      	sxth	r3, r3
900128ea:	429e      	cmp	r6, r3
900128ec:	da1f      	bge.n	9001292e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900128ee:	88c3      	ldrh	r3, [r0, #6]
900128f0:	4433      	add	r3, r6
900128f2:	b29b      	uxth	r3, r3
900128f4:	fa0f fc83 	sxth.w	ip, r3
900128f8:	4565      	cmp	r5, ip
900128fa:	da18      	bge.n	9001292e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900128fc:	454f      	cmp	r7, r9
900128fe:	bfb8      	it	lt
90012900:	464f      	movlt	r7, r9
90012902:	42b5      	cmp	r5, r6
90012904:	bfb8      	it	lt
90012906:	4635      	movlt	r5, r6
90012908:	45f0      	cmp	r8, lr
9001290a:	bfd8      	it	le
9001290c:	4622      	movle	r2, r4
9001290e:	1bd2      	subs	r2, r2, r7
90012910:	8082      	strh	r2, [r0, #4]
90012912:	884a      	ldrh	r2, [r1, #2]
90012914:	88c9      	ldrh	r1, [r1, #6]
90012916:	8007      	strh	r7, [r0, #0]
90012918:	440a      	add	r2, r1
9001291a:	8045      	strh	r5, [r0, #2]
9001291c:	b292      	uxth	r2, r2
9001291e:	b211      	sxth	r1, r2
90012920:	458c      	cmp	ip, r1
90012922:	bfa8      	it	ge
90012924:	4613      	movge	r3, r2
90012926:	1b5b      	subs	r3, r3, r5
90012928:	80c3      	strh	r3, [r0, #6]
9001292a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001292e:	2300      	movs	r3, #0
90012930:	8003      	strh	r3, [r0, #0]
90012932:	8043      	strh	r3, [r0, #2]
90012934:	8083      	strh	r3, [r0, #4]
90012936:	80c3      	strh	r3, [r0, #6]
90012938:	e7f7      	b.n	9001292a <_ZN8touchgfx4RectaNERKS0_+0x76>

9001293a <_ZNK8touchgfx4Rect7isEmptyEv>:
9001293a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001293e:	2b00      	cmp	r3, #0
90012940:	dd06      	ble.n	90012950 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90012942:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90012946:	2800      	cmp	r0, #0
90012948:	bfcc      	ite	gt
9001294a:	2000      	movgt	r0, #0
9001294c:	2001      	movle	r0, #1
9001294e:	4770      	bx	lr
90012950:	2001      	movs	r0, #1
90012952:	4770      	bx	lr

90012954 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90012954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012958:	2300      	movs	r3, #0
9001295a:	4604      	mov	r4, r0
9001295c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001295e:	8003      	strh	r3, [r0, #0]
90012960:	8043      	strh	r3, [r0, #2]
90012962:	8083      	strh	r3, [r0, #4]
90012964:	80c3      	strh	r3, [r0, #6]
90012966:	2d00      	cmp	r5, #0
90012968:	d040      	beq.n	900129ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
9001296a:	1d28      	adds	r0, r5, #4
9001296c:	f7ff ffe5 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90012970:	b988      	cbnz	r0, 90012996 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90012972:	4620      	mov	r0, r4
90012974:	f7ff ffe1 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90012978:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
9001297c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012980:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90012984:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90012988:	b138      	cbz	r0, 9001299a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
9001298a:	8022      	strh	r2, [r4, #0]
9001298c:	8063      	strh	r3, [r4, #2]
9001298e:	f8a4 e004 	strh.w	lr, [r4, #4]
90012992:	f8a4 c006 	strh.w	ip, [r4, #6]
90012996:	69ad      	ldr	r5, [r5, #24]
90012998:	e7e5      	b.n	90012966 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9001299a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001299e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
900129a2:	4290      	cmp	r0, r2
900129a4:	4607      	mov	r7, r0
900129a6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
900129aa:	460e      	mov	r6, r1
900129ac:	bfa8      	it	ge
900129ae:	4617      	movge	r7, r2
900129b0:	4299      	cmp	r1, r3
900129b2:	4472      	add	r2, lr
900129b4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
900129b8:	bfa8      	it	ge
900129ba:	461e      	movge	r6, r3
900129bc:	4440      	add	r0, r8
900129be:	4471      	add	r1, lr
900129c0:	4463      	add	r3, ip
900129c2:	b200      	sxth	r0, r0
900129c4:	8027      	strh	r7, [r4, #0]
900129c6:	b212      	sxth	r2, r2
900129c8:	8066      	strh	r6, [r4, #2]
900129ca:	b209      	sxth	r1, r1
900129cc:	b21b      	sxth	r3, r3
900129ce:	4290      	cmp	r0, r2
900129d0:	bfac      	ite	ge
900129d2:	ebc7 0200 	rsbge	r2, r7, r0
900129d6:	ebc7 0202 	rsblt	r2, r7, r2
900129da:	4299      	cmp	r1, r3
900129dc:	bfac      	ite	ge
900129de:	ebc6 0301 	rsbge	r3, r6, r1
900129e2:	ebc6 0303 	rsblt	r3, r6, r3
900129e6:	80a2      	strh	r2, [r4, #4]
900129e8:	80e3      	strh	r3, [r4, #6]
900129ea:	e7d4      	b.n	90012996 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900129ec:	4620      	mov	r0, r4
900129ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900129f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
900129f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900129f6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900129fa:	b383      	cbz	r3, 90012a5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900129fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
900129fe:	b374      	cbz	r4, 90012a5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012a00:	f9b1 5000 	ldrsh.w	r5, [r1]
90012a04:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90012a08:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90012a0c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90012a10:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012a14:	b303      	cbz	r3, 90012a58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012a16:	4668      	mov	r0, sp
90012a18:	1d21      	adds	r1, r4, #4
90012a1a:	f8ad 5000 	strh.w	r5, [sp]
90012a1e:	f8ad 6002 	strh.w	r6, [sp, #2]
90012a22:	f8ad 7004 	strh.w	r7, [sp, #4]
90012a26:	f8ad 8006 	strh.w	r8, [sp, #6]
90012a2a:	f7ff ff43 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90012a2e:	4668      	mov	r0, sp
90012a30:	f7ff ff83 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90012a34:	b980      	cbnz	r0, 90012a58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012a36:	f8bd 3000 	ldrh.w	r3, [sp]
90012a3a:	4669      	mov	r1, sp
90012a3c:	88a2      	ldrh	r2, [r4, #4]
90012a3e:	4620      	mov	r0, r4
90012a40:	1a9b      	subs	r3, r3, r2
90012a42:	88e2      	ldrh	r2, [r4, #6]
90012a44:	f8ad 3000 	strh.w	r3, [sp]
90012a48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012a4c:	1a9b      	subs	r3, r3, r2
90012a4e:	f8ad 3002 	strh.w	r3, [sp, #2]
90012a52:	6823      	ldr	r3, [r4, #0]
90012a54:	689b      	ldr	r3, [r3, #8]
90012a56:	4798      	blx	r3
90012a58:	69a4      	ldr	r4, [r4, #24]
90012a5a:	2c00      	cmp	r4, #0
90012a5c:	d1d8      	bne.n	90012a10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90012a5e:	b002      	add	sp, #8
90012a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012a64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90012a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
90012a66:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90012a6a:	460d      	mov	r5, r1
90012a6c:	4616      	mov	r6, r2
90012a6e:	b323      	cbz	r3, 90012aba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90012a70:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012a72:	b314      	cbz	r4, 90012aba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90012a74:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012a78:	b1eb      	cbz	r3, 90012ab6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90012a7a:	6828      	ldr	r0, [r5, #0]
90012a7c:	466b      	mov	r3, sp
90012a7e:	6869      	ldr	r1, [r5, #4]
90012a80:	c303      	stmia	r3!, {r0, r1}
90012a82:	4668      	mov	r0, sp
90012a84:	1d21      	adds	r1, r4, #4
90012a86:	f7ff ff15 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90012a8a:	4668      	mov	r0, sp
90012a8c:	f7ff ff55 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90012a90:	b988      	cbnz	r0, 90012ab6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90012a92:	f8bd 3000 	ldrh.w	r3, [sp]
90012a96:	4669      	mov	r1, sp
90012a98:	88a2      	ldrh	r2, [r4, #4]
90012a9a:	4620      	mov	r0, r4
90012a9c:	1a9b      	subs	r3, r3, r2
90012a9e:	88e2      	ldrh	r2, [r4, #6]
90012aa0:	f8ad 3000 	strh.w	r3, [sp]
90012aa4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012aa8:	1a9b      	subs	r3, r3, r2
90012aaa:	4632      	mov	r2, r6
90012aac:	f8ad 3002 	strh.w	r3, [sp, #2]
90012ab0:	6823      	ldr	r3, [r4, #0]
90012ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90012ab4:	4798      	blx	r3
90012ab6:	69a4      	ldr	r4, [r4, #24]
90012ab8:	e7db      	b.n	90012a72 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90012aba:	b002      	add	sp, #8
90012abc:	bd70      	pop	{r4, r5, r6, pc}

90012abe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
90012abe:	6803      	ldr	r3, [r0, #0]
90012ac0:	b513      	push	{r0, r1, r4, lr}
90012ac2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90012ac6:	2300      	movs	r3, #0
90012ac8:	e9cd 3300 	strd	r3, r3, [sp]
90012acc:	466b      	mov	r3, sp
90012ace:	47a0      	blx	r4
90012ad0:	b002      	add	sp, #8
90012ad2:	bd10      	pop	{r4, pc}

90012ad4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90012ad4:	2301      	movs	r3, #1
90012ad6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012ada:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012ade:	4770      	bx	lr

90012ae0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90012ae0:	2301      	movs	r3, #1
90012ae2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012ae6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012aea:	4770      	bx	lr

90012aec <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90012aec:	6843      	ldr	r3, [r0, #4]
90012aee:	2201      	movs	r2, #1
90012af0:	725a      	strb	r2, [r3, #9]
90012af2:	6840      	ldr	r0, [r0, #4]
90012af4:	6803      	ldr	r3, [r0, #0]
90012af6:	691b      	ldr	r3, [r3, #16]
90012af8:	4718      	bx	r3

90012afa <_ZN8touchgfx3HAL8flushDMAEv>:
90012afa:	6840      	ldr	r0, [r0, #4]
90012afc:	6803      	ldr	r3, [r0, #0]
90012afe:	689b      	ldr	r3, [r3, #8]
90012b00:	4718      	bx	r3

90012b02 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90012b02:	b530      	push	{r4, r5, lr}
90012b04:	b08b      	sub	sp, #44	; 0x2c
90012b06:	6804      	ldr	r4, [r0, #0]
90012b08:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90012b0c:	9509      	str	r5, [sp, #36]	; 0x24
90012b0e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90012b12:	9508      	str	r5, [sp, #32]
90012b14:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90012b18:	9507      	str	r5, [sp, #28]
90012b1a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90012b1e:	9506      	str	r5, [sp, #24]
90012b20:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90012b24:	9505      	str	r5, [sp, #20]
90012b26:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
90012b2a:	9504      	str	r5, [sp, #16]
90012b2c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90012b30:	9503      	str	r5, [sp, #12]
90012b32:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90012b36:	9502      	str	r5, [sp, #8]
90012b38:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
90012b3c:	e9cd 3500 	strd	r3, r5, [sp]
90012b40:	4613      	mov	r3, r2
90012b42:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90012b44:	2200      	movs	r2, #0
90012b46:	47a0      	blx	r4
90012b48:	b00b      	add	sp, #44	; 0x2c
90012b4a:	bd30      	pop	{r4, r5, pc}

90012b4c <_ZN8touchgfx3HAL10beginFrameEv>:
90012b4c:	4b04      	ldr	r3, [pc, #16]	; (90012b60 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
90012b4e:	781b      	ldrb	r3, [r3, #0]
90012b50:	b123      	cbz	r3, 90012b5c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90012b52:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90012b56:	f080 0001 	eor.w	r0, r0, #1
90012b5a:	4770      	bx	lr
90012b5c:	2001      	movs	r0, #1
90012b5e:	4770      	bx	lr
90012b60:	24028192 	.word	0x24028192

90012b64 <_ZN8touchgfx3HAL8endFrameEv>:
90012b64:	b510      	push	{r4, lr}
90012b66:	4604      	mov	r4, r0
90012b68:	6840      	ldr	r0, [r0, #4]
90012b6a:	6803      	ldr	r3, [r0, #0]
90012b6c:	689b      	ldr	r3, [r3, #8]
90012b6e:	4798      	blx	r3
90012b70:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90012b74:	b113      	cbz	r3, 90012b7c <_ZN8touchgfx3HAL8endFrameEv+0x18>
90012b76:	2301      	movs	r3, #1
90012b78:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90012b7c:	bd10      	pop	{r4, pc}

90012b7e <_ZN8touchgfx3HAL10initializeEv>:
90012b7e:	b510      	push	{r4, lr}
90012b80:	4604      	mov	r4, r0
90012b82:	f7ee fee7 	bl	90001954 <_ZN8touchgfx10OSWrappers10initializeEv>
90012b86:	f7ed fccb 	bl	90000520 <_ZN8touchgfx4GPIO4initEv>
90012b8a:	6860      	ldr	r0, [r4, #4]
90012b8c:	6803      	ldr	r3, [r0, #0]
90012b8e:	68db      	ldr	r3, [r3, #12]
90012b90:	4798      	blx	r3
90012b92:	68e0      	ldr	r0, [r4, #12]
90012b94:	6803      	ldr	r3, [r0, #0]
90012b96:	689b      	ldr	r3, [r3, #8]
90012b98:	4798      	blx	r3
90012b9a:	6823      	ldr	r3, [r4, #0]
90012b9c:	4620      	mov	r0, r4
90012b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90012ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012ba4:	4718      	bx	r3
	...

90012ba8 <_ZN8touchgfx3HAL4tickEv>:
90012ba8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90012baa:	6803      	ldr	r3, [r0, #0]
90012bac:	4604      	mov	r4, r0
90012bae:	4d5b      	ldr	r5, [pc, #364]	; (90012d1c <_ZN8touchgfx3HAL4tickEv+0x174>)
90012bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90012bb4:	4798      	blx	r3
90012bb6:	2800      	cmp	r0, #0
90012bb8:	f000 8095 	beq.w	90012ce6 <_ZN8touchgfx3HAL4tickEv+0x13e>
90012bbc:	2001      	movs	r0, #1
90012bbe:	2600      	movs	r6, #0
90012bc0:	f7ed fcd8 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90012bc4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90012bc8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
90012bcc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90012bd0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90012bd4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90012bd8:	b133      	cbz	r3, 90012be8 <_ZN8touchgfx3HAL4tickEv+0x40>
90012bda:	6823      	ldr	r3, [r4, #0]
90012bdc:	4620      	mov	r0, r4
90012bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90012be2:	4798      	blx	r3
90012be4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90012be8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
90012bec:	2601      	movs	r6, #1
90012bee:	6862      	ldr	r2, [r4, #4]
90012bf0:	f083 0301 	eor.w	r3, r3, #1
90012bf4:	702e      	strb	r6, [r5, #0]
90012bf6:	7253      	strb	r3, [r2, #9]
90012bf8:	f005 f800 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90012bfc:	6803      	ldr	r3, [r0, #0]
90012bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012c00:	4798      	blx	r3
90012c02:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90012c06:	b90b      	cbnz	r3, 90012c0c <_ZN8touchgfx3HAL4tickEv+0x64>
90012c08:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
90012c0c:	f004 fff6 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90012c10:	6803      	ldr	r3, [r0, #0]
90012c12:	695b      	ldr	r3, [r3, #20]
90012c14:	4798      	blx	r3
90012c16:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012c18:	6803      	ldr	r3, [r0, #0]
90012c1a:	691b      	ldr	r3, [r3, #16]
90012c1c:	4798      	blx	r3
90012c1e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90012c22:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90012c26:	3b01      	subs	r3, #1
90012c28:	b2db      	uxtb	r3, r3
90012c2a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90012c2e:	b10a      	cbz	r2, 90012c34 <_ZN8touchgfx3HAL4tickEv+0x8c>
90012c30:	2b00      	cmp	r3, #0
90012c32:	d1eb      	bne.n	90012c0c <_ZN8touchgfx3HAL4tickEv+0x64>
90012c34:	4a3a      	ldr	r2, [pc, #232]	; (90012d20 <_ZN8touchgfx3HAL4tickEv+0x178>)
90012c36:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90012c3a:	7813      	ldrb	r3, [r2, #0]
90012c3c:	3301      	adds	r3, #1
90012c3e:	b25b      	sxtb	r3, r3
90012c40:	4299      	cmp	r1, r3
90012c42:	7013      	strb	r3, [r2, #0]
90012c44:	dc10      	bgt.n	90012c68 <_ZN8touchgfx3HAL4tickEv+0xc0>
90012c46:	2300      	movs	r3, #0
90012c48:	68e0      	ldr	r0, [r4, #12]
90012c4a:	a902      	add	r1, sp, #8
90012c4c:	7013      	strb	r3, [r2, #0]
90012c4e:	aa03      	add	r2, sp, #12
90012c50:	6803      	ldr	r3, [r0, #0]
90012c52:	68db      	ldr	r3, [r3, #12]
90012c54:	4798      	blx	r3
90012c56:	6823      	ldr	r3, [r4, #0]
90012c58:	2800      	cmp	r0, #0
90012c5a:	d050      	beq.n	90012cfe <_ZN8touchgfx3HAL4tickEv+0x156>
90012c5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90012c60:	4620      	mov	r0, r4
90012c62:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90012c66:	4798      	blx	r3
90012c68:	2300      	movs	r3, #0
90012c6a:	6960      	ldr	r0, [r4, #20]
90012c6c:	f88d 3007 	strb.w	r3, [sp, #7]
90012c70:	b158      	cbz	r0, 90012c8a <_ZN8touchgfx3HAL4tickEv+0xe2>
90012c72:	6803      	ldr	r3, [r0, #0]
90012c74:	f10d 0107 	add.w	r1, sp, #7
90012c78:	68db      	ldr	r3, [r3, #12]
90012c7a:	4798      	blx	r3
90012c7c:	b128      	cbz	r0, 90012c8a <_ZN8touchgfx3HAL4tickEv+0xe2>
90012c7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012c80:	f89d 1007 	ldrb.w	r1, [sp, #7]
90012c84:	6803      	ldr	r3, [r0, #0]
90012c86:	68db      	ldr	r3, [r3, #12]
90012c88:	4798      	blx	r3
90012c8a:	f104 001c 	add.w	r0, r4, #28
90012c8e:	f013 fe5b 	bl	90026948 <_ZN8touchgfx8Gestures4tickEv>
90012c92:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90012c96:	b30b      	cbz	r3, 90012cdc <_ZN8touchgfx3HAL4tickEv+0x134>
90012c98:	6920      	ldr	r0, [r4, #16]
90012c9a:	6803      	ldr	r3, [r0, #0]
90012c9c:	691b      	ldr	r3, [r3, #16]
90012c9e:	4798      	blx	r3
90012ca0:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012ca2:	4606      	mov	r6, r0
90012ca4:	b903      	cbnz	r3, 90012ca8 <_ZN8touchgfx3HAL4tickEv+0x100>
90012ca6:	6720      	str	r0, [r4, #112]	; 0x70
90012ca8:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012caa:	4a1e      	ldr	r2, [pc, #120]	; (90012d24 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90012cac:	1af3      	subs	r3, r6, r3
90012cae:	4293      	cmp	r3, r2
90012cb0:	d914      	bls.n	90012cdc <_ZN8touchgfx3HAL4tickEv+0x134>
90012cb2:	6920      	ldr	r0, [r4, #16]
90012cb4:	6803      	ldr	r3, [r0, #0]
90012cb6:	699b      	ldr	r3, [r3, #24]
90012cb8:	4798      	blx	r3
90012cba:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012cbc:	2264      	movs	r2, #100	; 0x64
90012cbe:	1af3      	subs	r3, r6, r3
90012cc0:	fbb3 f3f2 	udiv	r3, r3, r2
90012cc4:	fbb0 f0f3 	udiv	r0, r0, r3
90012cc8:	2800      	cmp	r0, #0
90012cca:	dc1d      	bgt.n	90012d08 <_ZN8touchgfx3HAL4tickEv+0x160>
90012ccc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90012cd0:	6920      	ldr	r0, [r4, #16]
90012cd2:	2100      	movs	r1, #0
90012cd4:	6803      	ldr	r3, [r0, #0]
90012cd6:	69db      	ldr	r3, [r3, #28]
90012cd8:	4798      	blx	r3
90012cda:	6726      	str	r6, [r4, #112]	; 0x70
90012cdc:	f004 ff8e 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90012ce0:	6803      	ldr	r3, [r0, #0]
90012ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012ce4:	4798      	blx	r3
90012ce6:	6823      	ldr	r3, [r4, #0]
90012ce8:	4620      	mov	r0, r4
90012cea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90012cee:	4798      	blx	r3
90012cf0:	2001      	movs	r0, #1
90012cf2:	f7ed fc73 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90012cf6:	2300      	movs	r3, #0
90012cf8:	702b      	strb	r3, [r5, #0]
90012cfa:	b004      	add	sp, #16
90012cfc:	bd70      	pop	{r4, r5, r6, pc}
90012cfe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90012d02:	4620      	mov	r0, r4
90012d04:	4798      	blx	r3
90012d06:	e7af      	b.n	90012c68 <_ZN8touchgfx3HAL4tickEv+0xc0>
90012d08:	2863      	cmp	r0, #99	; 0x63
90012d0a:	bfcb      	itete	gt
90012d0c:	2300      	movgt	r3, #0
90012d0e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90012d12:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90012d16:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
90012d1a:	e7d9      	b.n	90012cd0 <_ZN8touchgfx3HAL4tickEv+0x128>
90012d1c:	24028198 	.word	0x24028198
90012d20:	24028199 	.word	0x24028199
90012d24:	05f5e100 	.word	0x05f5e100

90012d28 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90012d28:	f7ee be46 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90012d2c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
90012d2c:	6581      	str	r1, [r0, #88]	; 0x58
90012d2e:	301c      	adds	r0, #28
90012d30:	f013 be08 	b.w	90026944 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90012d34 <_ZN8touchgfx3HAL5touchEll>:
90012d34:	b530      	push	{r4, r5, lr}
90012d36:	b087      	sub	sp, #28
90012d38:	4604      	mov	r4, r0
90012d3a:	a804      	add	r0, sp, #16
90012d3c:	e9cd 1204 	strd	r1, r2, [sp, #16]
90012d40:	f004 fda0 	bl	90017884 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90012d44:	9b04      	ldr	r3, [sp, #16]
90012d46:	a906      	add	r1, sp, #24
90012d48:	a803      	add	r0, sp, #12
90012d4a:	f8ad 300c 	strh.w	r3, [sp, #12]
90012d4e:	9b05      	ldr	r3, [sp, #20]
90012d50:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90012d54:	f004 fde8 	bl	90017928 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90012d58:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
90012d5c:	f104 001c 	add.w	r0, r4, #28
90012d60:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90012d64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90012d68:	b189      	cbz	r1, 90012d8e <_ZN8touchgfx3HAL5touchEll+0x5a>
90012d6a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
90012d6e:	9300      	str	r3, [sp, #0]
90012d70:	4613      	mov	r3, r2
90012d72:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90012d76:	462a      	mov	r2, r5
90012d78:	f013 fdf4 	bl	90026964 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90012d7c:	b128      	cbz	r0, 90012d8a <_ZN8touchgfx3HAL5touchEll+0x56>
90012d7e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90012d82:	65e3      	str	r3, [r4, #92]	; 0x5c
90012d84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90012d88:	6623      	str	r3, [r4, #96]	; 0x60
90012d8a:	b007      	add	sp, #28
90012d8c:	bd30      	pop	{r4, r5, pc}
90012d8e:	f013 fe29 	bl	900269e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90012d92:	2301      	movs	r3, #1
90012d94:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90012d98:	e7f1      	b.n	90012d7e <_ZN8touchgfx3HAL5touchEll+0x4a>

90012d9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90012d9a:	b510      	push	{r4, lr}
90012d9c:	2b00      	cmp	r3, #0
90012d9e:	d046      	beq.n	90012e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012da0:	ea81 0002 	eor.w	r0, r1, r2
90012da4:	07c4      	lsls	r4, r0, #31
90012da6:	d508      	bpl.n	90012dba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90012da8:	440b      	add	r3, r1
90012daa:	3a01      	subs	r2, #1
90012dac:	428b      	cmp	r3, r1
90012dae:	d93e      	bls.n	90012e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012db0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90012db4:	f801 0b01 	strb.w	r0, [r1], #1
90012db8:	e7f8      	b.n	90012dac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90012dba:	07d0      	lsls	r0, r2, #31
90012dbc:	bf42      	ittt	mi
90012dbe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90012dc2:	f103 33ff 	addmi.w	r3, r3, #4294967295
90012dc6:	f801 0b01 	strbmi.w	r0, [r1], #1
90012dca:	2b01      	cmp	r3, #1
90012dcc:	d911      	bls.n	90012df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012dce:	ea81 0402 	eor.w	r4, r1, r2
90012dd2:	4610      	mov	r0, r2
90012dd4:	07a4      	lsls	r4, r4, #30
90012dd6:	d022      	beq.n	90012e1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90012dd8:	f023 0401 	bic.w	r4, r3, #1
90012ddc:	440c      	add	r4, r1
90012dde:	428c      	cmp	r4, r1
90012de0:	4602      	mov	r2, r0
90012de2:	d904      	bls.n	90012dee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90012de4:	8812      	ldrh	r2, [r2, #0]
90012de6:	3002      	adds	r0, #2
90012de8:	f821 2b02 	strh.w	r2, [r1], #2
90012dec:	e7f7      	b.n	90012dde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
90012dee:	f003 0301 	and.w	r3, r3, #1
90012df2:	f023 0003 	bic.w	r0, r3, #3
90012df6:	4408      	add	r0, r1
90012df8:	4288      	cmp	r0, r1
90012dfa:	4614      	mov	r4, r2
90012dfc:	d904      	bls.n	90012e08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
90012dfe:	6824      	ldr	r4, [r4, #0]
90012e00:	3204      	adds	r2, #4
90012e02:	f841 4b04 	str.w	r4, [r1], #4
90012e06:	e7f7      	b.n	90012df8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90012e08:	f003 0303 	and.w	r3, r3, #3
90012e0c:	3a01      	subs	r2, #1
90012e0e:	440b      	add	r3, r1
90012e10:	428b      	cmp	r3, r1
90012e12:	d90c      	bls.n	90012e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012e14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90012e18:	f801 0b01 	strb.w	r0, [r1], #1
90012e1c:	e7f8      	b.n	90012e10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
90012e1e:	0790      	lsls	r0, r2, #30
90012e20:	d0e7      	beq.n	90012df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012e22:	f832 0b02 	ldrh.w	r0, [r2], #2
90012e26:	3b02      	subs	r3, #2
90012e28:	f821 0b02 	strh.w	r0, [r1], #2
90012e2c:	e7e1      	b.n	90012df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012e2e:	2001      	movs	r0, #1
90012e30:	bd10      	pop	{r4, pc}

90012e32 <_ZN8touchgfx3HAL7noTouchEv>:
90012e32:	b510      	push	{r4, lr}
90012e34:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90012e38:	4604      	mov	r4, r0
90012e3a:	b153      	cbz	r3, 90012e52 <_ZN8touchgfx3HAL7noTouchEv+0x20>
90012e3c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90012e40:	2101      	movs	r1, #1
90012e42:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90012e46:	301c      	adds	r0, #28
90012e48:	f013 fdcc 	bl	900269e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90012e4c:	2300      	movs	r3, #0
90012e4e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90012e52:	bd10      	pop	{r4, pc}

90012e54 <_ZN8touchgfx8Drawable5setXYEss>:
90012e54:	b570      	push	{r4, r5, r6, lr}
90012e56:	6803      	ldr	r3, [r0, #0]
90012e58:	4604      	mov	r4, r0
90012e5a:	4615      	mov	r5, r2
90012e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90012e5e:	4798      	blx	r3
90012e60:	6823      	ldr	r3, [r4, #0]
90012e62:	4629      	mov	r1, r5
90012e64:	4620      	mov	r0, r4
90012e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012e6c:	4718      	bx	r3
	...

90012e70 <_ZN8touchgfx3HAL3lcdEv>:
90012e70:	4b04      	ldr	r3, [pc, #16]	; (90012e84 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90012e72:	681b      	ldr	r3, [r3, #0]
90012e74:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012e78:	b10a      	cbz	r2, 90012e7e <_ZN8touchgfx3HAL3lcdEv+0xe>
90012e7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012e7c:	b900      	cbnz	r0, 90012e80 <_ZN8touchgfx3HAL3lcdEv+0x10>
90012e7e:	6898      	ldr	r0, [r3, #8]
90012e80:	4770      	bx	lr
90012e82:	bf00      	nop
90012e84:	24028194 	.word	0x24028194

90012e88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90012e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012e8c:	b085      	sub	sp, #20
90012e8e:	4604      	mov	r4, r0
90012e90:	2000      	movs	r0, #0
90012e92:	4699      	mov	r9, r3
90012e94:	ad04      	add	r5, sp, #16
90012e96:	460f      	mov	r7, r1
90012e98:	4690      	mov	r8, r2
90012e9a:	f845 0d04 	str.w	r0, [r5, #-4]!
90012e9e:	69a0      	ldr	r0, [r4, #24]
90012ea0:	6806      	ldr	r6, [r0, #0]
90012ea2:	9501      	str	r5, [sp, #4]
90012ea4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90012ea8:	9500      	str	r5, [sp, #0]
90012eaa:	6835      	ldr	r5, [r6, #0]
90012eac:	47a8      	blx	r5
90012eae:	4d10      	ldr	r5, [pc, #64]	; (90012ef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90012eb0:	4606      	mov	r6, r0
90012eb2:	f8a5 9000 	strh.w	r9, [r5]
90012eb6:	f7ff ffdb 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90012eba:	6803      	ldr	r3, [r0, #0]
90012ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012ebe:	4798      	blx	r3
90012ec0:	b128      	cbz	r0, 90012ece <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90012ec2:	2801      	cmp	r0, #1
90012ec4:	d00b      	beq.n	90012ede <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90012ec6:	4630      	mov	r0, r6
90012ec8:	b005      	add	sp, #20
90012eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012ece:	882b      	ldrh	r3, [r5, #0]
90012ed0:	fb08 7203 	mla	r2, r8, r3, r7
90012ed4:	9b03      	ldr	r3, [sp, #12]
90012ed6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90012eda:	63e3      	str	r3, [r4, #60]	; 0x3c
90012edc:	e7f3      	b.n	90012ec6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90012ede:	882a      	ldrh	r2, [r5, #0]
90012ee0:	9b03      	ldr	r3, [sp, #12]
90012ee2:	fb08 7202 	mla	r2, r8, r2, r7
90012ee6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90012eea:	1a9a      	subs	r2, r3, r2
90012eec:	63e2      	str	r2, [r4, #60]	; 0x3c
90012eee:	e7ea      	b.n	90012ec6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90012ef0:	2402818e 	.word	0x2402818e

90012ef4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
90012ef6:	b08b      	sub	sp, #44	; 0x2c
90012ef8:	4617      	mov	r7, r2
90012efa:	4604      	mov	r4, r0
90012efc:	460e      	mov	r6, r1
90012efe:	461d      	mov	r5, r3
90012f00:	f7ff ffb6 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90012f04:	6803      	ldr	r3, [r0, #0]
90012f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012f08:	4798      	blx	r3
90012f0a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90012f0e:	9007      	str	r0, [sp, #28]
90012f10:	4631      	mov	r1, r6
90012f12:	6822      	ldr	r2, [r4, #0]
90012f14:	e9cd 0308 	strd	r0, r3, [sp, #32]
90012f18:	4b0c      	ldr	r3, [pc, #48]	; (90012f4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90012f1a:	4620      	mov	r0, r4
90012f1c:	881b      	ldrh	r3, [r3, #0]
90012f1e:	9306      	str	r3, [sp, #24]
90012f20:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90012f24:	9305      	str	r3, [sp, #20]
90012f26:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90012f2a:	9304      	str	r3, [sp, #16]
90012f2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90012f30:	9303      	str	r3, [sp, #12]
90012f32:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90012f36:	9302      	str	r3, [sp, #8]
90012f38:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90012f3c:	e9cd 5300 	strd	r5, r3, [sp]
90012f40:	463b      	mov	r3, r7
90012f42:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90012f44:	2200      	movs	r2, #0
90012f46:	47a8      	blx	r5
90012f48:	b00b      	add	sp, #44	; 0x2c
90012f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012f4c:	2402818e 	.word	0x2402818e

90012f50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90012f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012f54:	4698      	mov	r8, r3
90012f56:	6803      	ldr	r3, [r0, #0]
90012f58:	b08b      	sub	sp, #44	; 0x2c
90012f5a:	4617      	mov	r7, r2
90012f5c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90012f5e:	460e      	mov	r6, r1
90012f60:	4b13      	ldr	r3, [pc, #76]	; (90012fb0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90012f62:	4604      	mov	r4, r0
90012f64:	f8b3 9000 	ldrh.w	r9, [r3]
90012f68:	f7ff ff82 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90012f6c:	6803      	ldr	r3, [r0, #0]
90012f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012f70:	4798      	blx	r3
90012f72:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90012f76:	2200      	movs	r2, #0
90012f78:	4631      	mov	r1, r6
90012f7a:	e9cd 0308 	strd	r0, r3, [sp, #32]
90012f7e:	2302      	movs	r3, #2
90012f80:	4620      	mov	r0, r4
90012f82:	e9cd 9306 	strd	r9, r3, [sp, #24]
90012f86:	2301      	movs	r3, #1
90012f88:	9305      	str	r3, [sp, #20]
90012f8a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90012f8e:	9304      	str	r3, [sp, #16]
90012f90:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90012f94:	9303      	str	r3, [sp, #12]
90012f96:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90012f9a:	9302      	str	r3, [sp, #8]
90012f9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90012fa0:	e9cd 8300 	strd	r8, r3, [sp]
90012fa4:	463b      	mov	r3, r7
90012fa6:	47a8      	blx	r5
90012fa8:	b00b      	add	sp, #44	; 0x2c
90012faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012fae:	bf00      	nop
90012fb0:	2402818e 	.word	0x2402818e

90012fb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90012fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012fb8:	4698      	mov	r8, r3
90012fba:	6803      	ldr	r3, [r0, #0]
90012fbc:	b087      	sub	sp, #28
90012fbe:	460e      	mov	r6, r1
90012fc0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90012fc2:	4617      	mov	r7, r2
90012fc4:	4b0f      	ldr	r3, [pc, #60]	; (90013004 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90012fc6:	4604      	mov	r4, r0
90012fc8:	f8b3 9000 	ldrh.w	r9, [r3]
90012fcc:	f7ff ff50 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90012fd0:	6803      	ldr	r3, [r0, #0]
90012fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012fd4:	4798      	blx	r3
90012fd6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
90012fda:	463a      	mov	r2, r7
90012fdc:	4631      	mov	r1, r6
90012fde:	f8cd 900c 	str.w	r9, [sp, #12]
90012fe2:	e9cd 0304 	strd	r0, r3, [sp, #16]
90012fe6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90012fea:	4620      	mov	r0, r4
90012fec:	9302      	str	r3, [sp, #8]
90012fee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90012ff2:	9301      	str	r3, [sp, #4]
90012ff4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90012ff8:	9300      	str	r3, [sp, #0]
90012ffa:	4643      	mov	r3, r8
90012ffc:	47a8      	blx	r5
90012ffe:	b007      	add	sp, #28
90013000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013004:	2402818e 	.word	0x2402818e

90013008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001300c:	4604      	mov	r4, r0
9001300e:	b08f      	sub	sp, #60	; 0x3c
90013010:	4610      	mov	r0, r2
90013012:	460d      	mov	r5, r1
90013014:	4691      	mov	r9, r2
90013016:	461e      	mov	r6, r3
90013018:	f007 fed6 	bl	9001adc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001301c:	2800      	cmp	r0, #0
9001301e:	f000 809d 	beq.w	9001315c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90013022:	6823      	ldr	r3, [r4, #0]
90013024:	4620      	mov	r0, r4
90013026:	f8df b198 	ldr.w	fp, [pc, #408]	; 900131c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
9001302a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
9001302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013030:	4798      	blx	r3
90013032:	6823      	ldr	r3, [r4, #0]
90013034:	4620      	mov	r0, r4
90013036:	f8df a18c 	ldr.w	sl, [pc, #396]	; 900131c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
9001303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001303c:	4798      	blx	r3
9001303e:	f8bb 3000 	ldrh.w	r3, [fp]
90013042:	4f5c      	ldr	r7, [pc, #368]	; (900131b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013044:	9301      	str	r3, [sp, #4]
90013046:	f8ba 3000 	ldrh.w	r3, [sl]
9001304a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
9001304e:	4640      	mov	r0, r8
90013050:	9302      	str	r3, [sp, #8]
90013052:	883b      	ldrh	r3, [r7, #0]
90013054:	9303      	str	r3, [sp, #12]
90013056:	4b58      	ldr	r3, [pc, #352]	; (900131b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90013058:	881a      	ldrh	r2, [r3, #0]
9001305a:	9305      	str	r3, [sp, #20]
9001305c:	9204      	str	r2, [sp, #16]
9001305e:	f007 ff47 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90013062:	8038      	strh	r0, [r7, #0]
90013064:	4640      	mov	r0, r8
90013066:	f007 ff77 	bl	9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001306a:	9b05      	ldr	r3, [sp, #20]
9001306c:	b280      	uxth	r0, r0
9001306e:	8018      	strh	r0, [r3, #0]
90013070:	4b52      	ldr	r3, [pc, #328]	; (900131bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90013072:	781b      	ldrb	r3, [r3, #0]
90013074:	2b00      	cmp	r3, #0
90013076:	d174      	bne.n	90013162 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90013078:	883b      	ldrh	r3, [r7, #0]
9001307a:	f8aa 0000 	strh.w	r0, [sl]
9001307e:	f8ab 3000 	strh.w	r3, [fp]
90013082:	4648      	mov	r0, r9
90013084:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90013088:	f007 fe9e 	bl	9001adc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001308c:	2200      	movs	r2, #0
9001308e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90013092:	4611      	mov	r1, r2
90013094:	4628      	mov	r0, r5
90013096:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
9001309a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001309e:	f7ff fed9 	bl	90012e54 <_ZN8touchgfx8Drawable5setXYEss>
900130a2:	2301      	movs	r3, #1
900130a4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
900130a8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
900130ac:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900130b0:	2b00      	cmp	r3, #0
900130b2:	dd5c      	ble.n	9001316e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900130b4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900130b8:	2b00      	cmp	r3, #0
900130ba:	dd58      	ble.n	9001316e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900130bc:	462a      	mov	r2, r5
900130be:	ab0a      	add	r3, sp, #40	; 0x28
900130c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
900130c4:	6851      	ldr	r1, [r2, #4]
900130c6:	c303      	stmia	r3!, {r0, r1}
900130c8:	4631      	mov	r1, r6
900130ca:	a80a      	add	r0, sp, #40	; 0x28
900130cc:	f7ff fbf2 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
900130d0:	4b38      	ldr	r3, [pc, #224]	; (900131b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900130d2:	2100      	movs	r1, #0
900130d4:	f9b3 2000 	ldrsh.w	r2, [r3]
900130d8:	4b37      	ldr	r3, [pc, #220]	; (900131b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900130da:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900130de:	aa0a      	add	r2, sp, #40	; 0x28
900130e0:	f9b3 3000 	ldrsh.w	r3, [r3]
900130e4:	910c      	str	r1, [sp, #48]	; 0x30
900130e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900130ea:	ab08      	add	r3, sp, #32
900130ec:	e892 0003 	ldmia.w	r2, {r0, r1}
900130f0:	e883 0003 	stmia.w	r3, {r0, r1}
900130f4:	4618      	mov	r0, r3
900130f6:	a90c      	add	r1, sp, #48	; 0x30
900130f8:	f7ff fbdc 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
900130fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
900130fe:	2b00      	cmp	r3, #0
90013100:	d13c      	bne.n	9001317c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90013102:	2000      	movs	r0, #0
90013104:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90013108:	2600      	movs	r6, #0
9001310a:	696b      	ldr	r3, [r5, #20]
9001310c:	a908      	add	r1, sp, #32
9001310e:	682a      	ldr	r2, [r5, #0]
90013110:	4628      	mov	r0, r5
90013112:	9305      	str	r3, [sp, #20]
90013114:	616e      	str	r6, [r5, #20]
90013116:	6892      	ldr	r2, [r2, #8]
90013118:	4790      	blx	r2
9001311a:	9b05      	ldr	r3, [sp, #20]
9001311c:	4652      	mov	r2, sl
9001311e:	4649      	mov	r1, r9
90013120:	616b      	str	r3, [r5, #20]
90013122:	4628      	mov	r0, r5
90013124:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90013128:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
9001312c:	f7ff fe92 	bl	90012e54 <_ZN8touchgfx8Drawable5setXYEss>
90013130:	9a01      	ldr	r2, [sp, #4]
90013132:	4b23      	ldr	r3, [pc, #140]	; (900131c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90013134:	4620      	mov	r0, r4
90013136:	801a      	strh	r2, [r3, #0]
90013138:	9a02      	ldr	r2, [sp, #8]
9001313a:	4b22      	ldr	r3, [pc, #136]	; (900131c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
9001313c:	801a      	strh	r2, [r3, #0]
9001313e:	9a03      	ldr	r2, [sp, #12]
90013140:	4b1c      	ldr	r3, [pc, #112]	; (900131b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013142:	801a      	strh	r2, [r3, #0]
90013144:	4b1c      	ldr	r3, [pc, #112]	; (900131b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90013146:	9a04      	ldr	r2, [sp, #16]
90013148:	801a      	strh	r2, [r3, #0]
9001314a:	6823      	ldr	r3, [r4, #0]
9001314c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90013150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013152:	4798      	blx	r3
90013154:	6823      	ldr	r3, [r4, #0]
90013156:	4620      	mov	r0, r4
90013158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001315a:	4798      	blx	r3
9001315c:	b00f      	add	sp, #60	; 0x3c
9001315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013162:	883b      	ldrh	r3, [r7, #0]
90013164:	f8ab 0000 	strh.w	r0, [fp]
90013168:	f8aa 3000 	strh.w	r3, [sl]
9001316c:	e789      	b.n	90013082 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
9001316e:	462a      	mov	r2, r5
90013170:	ab0a      	add	r3, sp, #40	; 0x28
90013172:	f852 0f04 	ldr.w	r0, [r2, #4]!
90013176:	6851      	ldr	r1, [r2, #4]
90013178:	c303      	stmia	r3!, {r0, r1}
9001317a:	e7a9      	b.n	900130d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
9001317c:	a807      	add	r0, sp, #28
9001317e:	f008 f827 	bl	9001b1d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013182:	4606      	mov	r6, r0
90013184:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90013186:	6803      	ldr	r3, [r0, #0]
90013188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001318a:	4798      	blx	r3
9001318c:	4286      	cmp	r6, r0
9001318e:	d1b8      	bne.n	90013102 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90013190:	f7ff fe6e 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90013194:	6803      	ldr	r3, [r0, #0]
90013196:	4606      	mov	r6, r0
90013198:	a807      	add	r0, sp, #28
9001319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001319c:	9305      	str	r3, [sp, #20]
9001319e:	f008 f817 	bl	9001b1d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
900131a2:	9b05      	ldr	r3, [sp, #20]
900131a4:	4601      	mov	r1, r0
900131a6:	4630      	mov	r0, r6
900131a8:	4798      	blx	r3
900131aa:	f080 0001 	eor.w	r0, r0, #1
900131ae:	b2c0      	uxtb	r0, r0
900131b0:	e7a8      	b.n	90013104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
900131b2:	bf00      	nop
900131b4:	24028188 	.word	0x24028188
900131b8:	2402818a 	.word	0x2402818a
900131bc:	2402818c 	.word	0x2402818c
900131c0:	2402818e 	.word	0x2402818e
900131c4:	24028190 	.word	0x24028190

900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
900131c8:	4b07      	ldr	r3, [pc, #28]	; (900131e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
900131ca:	b510      	push	{r4, lr}
900131cc:	781b      	ldrb	r3, [r3, #0]
900131ce:	4604      	mov	r4, r0
900131d0:	b13b      	cbz	r3, 900131e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900131d2:	6803      	ldr	r3, [r0, #0]
900131d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900131d6:	4798      	blx	r3
900131d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900131da:	4283      	cmp	r3, r0
900131dc:	d101      	bne.n	900131e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900131de:	6c20      	ldr	r0, [r4, #64]	; 0x40
900131e0:	bd10      	pop	{r4, pc}
900131e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900131e4:	e7fc      	b.n	900131e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900131e6:	bf00      	nop
900131e8:	24028192 	.word	0x24028192

900131ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
900131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900131f0:	461d      	mov	r5, r3
900131f2:	b08a      	sub	sp, #40	; 0x28
900131f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
900131f8:	4690      	mov	r8, r2
900131fa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
900131fe:	2400      	movs	r4, #0
90013200:	4607      	mov	r7, r0
90013202:	fb06 8505 	mla	r5, r6, r5, r8
90013206:	9404      	str	r4, [sp, #16]
90013208:	f88d 4020 	strb.w	r4, [sp, #32]
9001320c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013210:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013214:	f8ad 3018 	strh.w	r3, [sp, #24]
90013218:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001321c:	f8ad 301a 	strh.w	r3, [sp, #26]
90013220:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013224:	f8ad 301c 	strh.w	r3, [sp, #28]
90013228:	f7ff ffce 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001322c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013230:	6878      	ldr	r0, [r7, #4]
90013232:	f8ad 601e 	strh.w	r6, [sp, #30]
90013236:	a901      	add	r1, sp, #4
90013238:	9505      	str	r5, [sp, #20]
9001323a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001323e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90013242:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90013246:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
9001324a:	6803      	ldr	r3, [r0, #0]
9001324c:	685b      	ldr	r3, [r3, #4]
9001324e:	4798      	blx	r3
90013250:	b00a      	add	sp, #40	; 0x28
90013252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90013256 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90013256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001325a:	b08b      	sub	sp, #44	; 0x2c
9001325c:	2400      	movs	r4, #0
9001325e:	4691      	mov	r9, r2
90013260:	461d      	mov	r5, r3
90013262:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90013266:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001326a:	4688      	mov	r8, r1
9001326c:	4607      	mov	r7, r0
9001326e:	9404      	str	r4, [sp, #16]
90013270:	fb06 9505 	mla	r5, r6, r5, r9
90013274:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013278:	f7ff ffa6 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001327c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013280:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013284:	6878      	ldr	r0, [r7, #4]
90013286:	f8ad 3018 	strh.w	r3, [sp, #24]
9001328a:	a901      	add	r1, sp, #4
9001328c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013290:	9505      	str	r5, [sp, #20]
90013292:	f8ad 301a 	strh.w	r3, [sp, #26]
90013296:	f8ad 401c 	strh.w	r4, [sp, #28]
9001329a:	f8ad 601e 	strh.w	r6, [sp, #30]
9001329e:	f8cd 8010 	str.w	r8, [sp, #16]
900132a2:	f8ad 4020 	strh.w	r4, [sp, #32]
900132a6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900132aa:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900132ae:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900132b2:	6803      	ldr	r3, [r0, #0]
900132b4:	685b      	ldr	r3, [r3, #4]
900132b6:	4798      	blx	r3
900132b8:	b00b      	add	sp, #44	; 0x2c
900132ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

900132c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
900132c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900132c4:	b08a      	sub	sp, #40	; 0x28
900132c6:	4698      	mov	r8, r3
900132c8:	2300      	movs	r3, #0
900132ca:	4606      	mov	r6, r0
900132cc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
900132d0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900132d4:	2d0b      	cmp	r5, #11
900132d6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
900132da:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
900132de:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
900132e2:	9304      	str	r3, [sp, #16]
900132e4:	d137      	bne.n	90013356 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
900132e6:	2380      	movs	r3, #128	; 0x80
900132e8:	f88d 0020 	strb.w	r0, [sp, #32]
900132ec:	4630      	mov	r0, r6
900132ee:	9203      	str	r2, [sp, #12]
900132f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
900132f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900132f8:	f8ad 3018 	strh.w	r3, [sp, #24]
900132fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013300:	f8ad 301a 	strh.w	r3, [sp, #26]
90013304:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013308:	f8ad 301c 	strh.w	r3, [sp, #28]
9001330c:	f7ff ff5c 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013310:	2c0b      	cmp	r4, #11
90013312:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90013316:	f8ad 701e 	strh.w	r7, [sp, #30]
9001331a:	bf94      	ite	ls
9001331c:	4b19      	ldrls	r3, [pc, #100]	; (90013384 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
9001331e:	2100      	movhi	r1, #0
90013320:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90013324:	bf98      	it	ls
90013326:	5d19      	ldrbls	r1, [r3, r4]
90013328:	fb02 8307 	mla	r3, r2, r7, r8
9001332c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90013330:	10c9      	asrs	r1, r1, #3
90013332:	fb01 0003 	mla	r0, r1, r3, r0
90013336:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
9001333a:	a901      	add	r1, sp, #4
9001333c:	9005      	str	r0, [sp, #20]
9001333e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90013342:	2300      	movs	r3, #0
90013344:	6870      	ldr	r0, [r6, #4]
90013346:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001334a:	6803      	ldr	r3, [r0, #0]
9001334c:	685b      	ldr	r3, [r3, #4]
9001334e:	4798      	blx	r3
90013350:	b00a      	add	sp, #40	; 0x28
90013352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013356:	2d02      	cmp	r5, #2
90013358:	d109      	bne.n	9001336e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
9001335a:	28ff      	cmp	r0, #255	; 0xff
9001335c:	d105      	bne.n	9001336a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
9001335e:	f1bc 0f00 	cmp.w	ip, #0
90013362:	bf14      	ite	ne
90013364:	2340      	movne	r3, #64	; 0x40
90013366:	2320      	moveq	r3, #32
90013368:	e7be      	b.n	900132e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001336a:	2340      	movs	r3, #64	; 0x40
9001336c:	e7bc      	b.n	900132e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001336e:	28ff      	cmp	r0, #255	; 0xff
90013370:	d105      	bne.n	9001337e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90013372:	f1bc 0f00 	cmp.w	ip, #0
90013376:	bf14      	ite	ne
90013378:	2304      	movne	r3, #4
9001337a:	2301      	moveq	r3, #1
9001337c:	e7b4      	b.n	900132e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001337e:	2304      	movs	r3, #4
90013380:	e7b2      	b.n	900132e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90013382:	bf00      	nop
90013384:	9002b908 	.word	0x9002b908

90013388 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90013388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001338c:	b08b      	sub	sp, #44	; 0x2c
9001338e:	461d      	mov	r5, r3
90013390:	2400      	movs	r4, #0
90013392:	4688      	mov	r8, r1
90013394:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90013398:	4693      	mov	fp, r2
9001339a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
9001339e:	4607      	mov	r7, r0
900133a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900133a4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
900133a8:	9404      	str	r4, [sp, #16]
900133aa:	bf14      	ite	ne
900133ac:	2308      	movne	r3, #8
900133ae:	2302      	moveq	r3, #2
900133b0:	fb05 b50a 	mla	r5, r5, sl, fp
900133b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
900133b8:	f7ff ff06 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900133bc:	2e0b      	cmp	r6, #11
900133be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900133c2:	a901      	add	r1, sp, #4
900133c4:	bf98      	it	ls
900133c6:	4b13      	ldrls	r3, [pc, #76]	; (90013414 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
900133c8:	f8ad a01e 	strh.w	sl, [sp, #30]
900133cc:	bf98      	it	ls
900133ce:	5d9c      	ldrbls	r4, [r3, r6]
900133d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900133d4:	10e4      	asrs	r4, r4, #3
900133d6:	f8cd 8010 	str.w	r8, [sp, #16]
900133da:	f8ad 3018 	strh.w	r3, [sp, #24]
900133de:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900133e2:	fb04 0405 	mla	r4, r4, r5, r0
900133e6:	6878      	ldr	r0, [r7, #4]
900133e8:	f8ad 301a 	strh.w	r3, [sp, #26]
900133ec:	2300      	movs	r3, #0
900133ee:	9405      	str	r4, [sp, #20]
900133f0:	f8ad 301c 	strh.w	r3, [sp, #28]
900133f4:	f88d 9020 	strb.w	r9, [sp, #32]
900133f8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
900133fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90013400:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90013404:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90013408:	6803      	ldr	r3, [r0, #0]
9001340a:	685b      	ldr	r3, [r3, #4]
9001340c:	4798      	blx	r3
9001340e:	b00b      	add	sp, #44	; 0x2c
90013410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013414:	9002b908 	.word	0x9002b908

90013418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90013418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001341c:	461e      	mov	r6, r3
9001341e:	4b0a      	ldr	r3, [pc, #40]	; (90013448 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90013420:	460f      	mov	r7, r1
90013422:	4690      	mov	r8, r2
90013424:	881d      	ldrh	r5, [r3, #0]
90013426:	f7ff fd23 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
9001342a:	6803      	ldr	r3, [r0, #0]
9001342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001342e:	4798      	blx	r3
90013430:	280b      	cmp	r0, #11
90013432:	bf96      	itet	ls
90013434:	4b05      	ldrls	r3, [pc, #20]	; (9001344c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90013436:	2400      	movhi	r4, #0
90013438:	5c1c      	ldrbls	r4, [r3, r0]
9001343a:	fb08 7005 	mla	r0, r8, r5, r7
9001343e:	10e4      	asrs	r4, r4, #3
90013440:	fb04 6000 	mla	r0, r4, r0, r6
90013444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013448:	2402818e 	.word	0x2402818e
9001344c:	9002b908 	.word	0x9002b908

90013450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90013450:	b5f0      	push	{r4, r5, r6, r7, lr}
90013452:	b08b      	sub	sp, #44	; 0x2c
90013454:	461f      	mov	r7, r3
90013456:	4604      	mov	r4, r0
90013458:	4616      	mov	r6, r2
9001345a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
9001345e:	2500      	movs	r5, #0
90013460:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013464:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013468:	9504      	str	r5, [sp, #16]
9001346a:	f8ad 3018 	strh.w	r3, [sp, #24]
9001346e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013472:	f8ad 301a 	strh.w	r3, [sp, #26]
90013476:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001347a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001347e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90013482:	f88d 3020 	strb.w	r3, [sp, #32]
90013486:	f7ff fe9f 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001348a:	463a      	mov	r2, r7
9001348c:	4631      	mov	r1, r6
9001348e:	4603      	mov	r3, r0
90013490:	4620      	mov	r0, r4
90013492:	f7ff ffc1 	bl	90013418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013496:	4b0e      	ldr	r3, [pc, #56]	; (900134d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90013498:	9005      	str	r0, [sp, #20]
9001349a:	881b      	ldrh	r3, [r3, #0]
9001349c:	f8ad 301e 	strh.w	r3, [sp, #30]
900134a0:	f7ff fce6 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
900134a4:	6803      	ldr	r3, [r0, #0]
900134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900134a8:	4798      	blx	r3
900134aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900134ac:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
900134b0:	a901      	add	r1, sp, #4
900134b2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900134b6:	9304      	str	r3, [sp, #16]
900134b8:	6860      	ldr	r0, [r4, #4]
900134ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
900134be:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
900134c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900134c6:	6803      	ldr	r3, [r0, #0]
900134c8:	685b      	ldr	r3, [r3, #4]
900134ca:	4798      	blx	r3
900134cc:	b00b      	add	sp, #44	; 0x2c
900134ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
900134d0:	2402818e 	.word	0x2402818e

900134d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
900134d4:	b5f0      	push	{r4, r5, r6, r7, lr}
900134d6:	b08d      	sub	sp, #52	; 0x34
900134d8:	2501      	movs	r5, #1
900134da:	4604      	mov	r4, r0
900134dc:	466b      	mov	r3, sp
900134de:	9503      	str	r5, [sp, #12]
900134e0:	e883 0006 	stmia.w	r3, {r1, r2}
900134e4:	2300      	movs	r3, #0
900134e6:	f8bd 6000 	ldrh.w	r6, [sp]
900134ea:	f8bd 7002 	ldrh.w	r7, [sp, #2]
900134ee:	9306      	str	r3, [sp, #24]
900134f0:	6803      	ldr	r3, [r0, #0]
900134f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900134f4:	4798      	blx	r3
900134f6:	463a      	mov	r2, r7
900134f8:	4631      	mov	r1, r6
900134fa:	4603      	mov	r3, r0
900134fc:	4620      	mov	r0, r4
900134fe:	f7ff ff8b 	bl	90013418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013502:	6c63      	ldr	r3, [r4, #68]	; 0x44
90013504:	9004      	str	r0, [sp, #16]
90013506:	9307      	str	r3, [sp, #28]
90013508:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001350c:	f8ad 3020 	strh.w	r3, [sp, #32]
90013510:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013514:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013518:	4b0e      	ldr	r3, [pc, #56]	; (90013554 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
9001351a:	881b      	ldrh	r3, [r3, #0]
9001351c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013520:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90013524:	f7ff fca4 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90013528:	6803      	ldr	r3, [r0, #0]
9001352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001352c:	4798      	blx	r3
9001352e:	23ff      	movs	r3, #255	; 0xff
90013530:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90013534:	a903      	add	r1, sp, #12
90013536:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
9001353a:	6860      	ldr	r0, [r4, #4]
9001353c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013540:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90013544:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013548:	6803      	ldr	r3, [r0, #0]
9001354a:	685b      	ldr	r3, [r3, #4]
9001354c:	4798      	blx	r3
9001354e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90013550:	b00d      	add	sp, #52	; 0x34
90013552:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013554:	2402818e 	.word	0x2402818e

90013558 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90013558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001355c:	b08c      	sub	sp, #48	; 0x30
9001355e:	461e      	mov	r6, r3
90013560:	2300      	movs	r3, #0
90013562:	4604      	mov	r4, r0
90013564:	466d      	mov	r5, sp
90013566:	9306      	str	r3, [sp, #24]
90013568:	6803      	ldr	r3, [r0, #0]
9001356a:	e885 0006 	stmia.w	r5, {r1, r2}
9001356e:	2501      	movs	r5, #1
90013570:	f8bd 7000 	ldrh.w	r7, [sp]
90013574:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90013578:	9503      	str	r5, [sp, #12]
9001357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001357c:	4798      	blx	r3
9001357e:	4642      	mov	r2, r8
90013580:	4639      	mov	r1, r7
90013582:	4603      	mov	r3, r0
90013584:	4620      	mov	r0, r4
90013586:	f7ff ff47 	bl	90013418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001358a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001358e:	9004      	str	r0, [sp, #16]
90013590:	f8ad 3020 	strh.w	r3, [sp, #32]
90013594:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013598:	9607      	str	r6, [sp, #28]
9001359a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001359e:	4b10      	ldr	r3, [pc, #64]	; (900135e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
900135a0:	881b      	ldrh	r3, [r3, #0]
900135a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900135a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900135a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900135ac:	f7ff fc60 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
900135b0:	6803      	ldr	r3, [r0, #0]
900135b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900135b4:	4798      	blx	r3
900135b6:	23ff      	movs	r3, #255	; 0xff
900135b8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900135bc:	a903      	add	r1, sp, #12
900135be:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900135c2:	6860      	ldr	r0, [r4, #4]
900135c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900135c8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900135cc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900135d0:	6803      	ldr	r3, [r0, #0]
900135d2:	685b      	ldr	r3, [r3, #4]
900135d4:	4798      	blx	r3
900135d6:	4630      	mov	r0, r6
900135d8:	b00c      	add	sp, #48	; 0x30
900135da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900135de:	bf00      	nop
900135e0:	2402818e 	.word	0x2402818e

900135e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
900135e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900135e6:	b085      	sub	sp, #20
900135e8:	4605      	mov	r5, r0
900135ea:	ac02      	add	r4, sp, #8
900135ec:	e884 0006 	stmia.w	r4, {r1, r2}
900135f0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
900135f4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
900135f8:	f7ff fde6 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900135fc:	4631      	mov	r1, r6
900135fe:	4603      	mov	r3, r0
90013600:	463a      	mov	r2, r7
90013602:	4628      	mov	r0, r5
90013604:	f7ff ff08 	bl	90013418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013608:	4a05      	ldr	r2, [pc, #20]	; (90013620 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
9001360a:	682b      	ldr	r3, [r5, #0]
9001360c:	8812      	ldrh	r2, [r2, #0]
9001360e:	9200      	str	r2, [sp, #0]
90013610:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90013612:	4603      	mov	r3, r0
90013614:	4628      	mov	r0, r5
90013616:	e894 0006 	ldmia.w	r4, {r1, r2}
9001361a:	47b0      	blx	r6
9001361c:	b005      	add	sp, #20
9001361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013620:	2402818e 	.word	0x2402818e

90013624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90013624:	b570      	push	{r4, r5, r6, lr}
90013626:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
9001362a:	4604      	mov	r4, r0
9001362c:	b19b      	cbz	r3, 90013656 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
9001362e:	2002      	movs	r0, #2
90013630:	f7ed f808 	bl	90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90013634:	2300      	movs	r3, #0
90013636:	4620      	mov	r0, r4
90013638:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9001363c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90013640:	6823      	ldr	r3, [r4, #0]
90013642:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90013646:	f7ff fdbf 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001364a:	4601      	mov	r1, r0
9001364c:	4620      	mov	r0, r4
9001364e:	462b      	mov	r3, r5
90013650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013654:	4718      	bx	r3
90013656:	bd70      	pop	{r4, r5, r6, pc}

90013658 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90013658:	b570      	push	{r4, r5, r6, lr}
9001365a:	4605      	mov	r5, r0
9001365c:	460c      	mov	r4, r1
9001365e:	2003      	movs	r0, #3
90013660:	b149      	cbz	r1, 90013676 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90013662:	f7ec ff87 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90013666:	6928      	ldr	r0, [r5, #16]
90013668:	b168      	cbz	r0, 90013686 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001366a:	6803      	ldr	r3, [r0, #0]
9001366c:	2101      	movs	r1, #1
9001366e:	695b      	ldr	r3, [r3, #20]
90013670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013674:	4718      	bx	r3
90013676:	f7ec ffb1 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
9001367a:	6928      	ldr	r0, [r5, #16]
9001367c:	b118      	cbz	r0, 90013686 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001367e:	6803      	ldr	r3, [r0, #0]
90013680:	4621      	mov	r1, r4
90013682:	695b      	ldr	r3, [r3, #20]
90013684:	e7f4      	b.n	90013670 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90013686:	bd70      	pop	{r4, r5, r6, pc}

90013688 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90013688:	b538      	push	{r3, r4, r5, lr}
9001368a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
9001368e:	4604      	mov	r4, r0
90013690:	460d      	mov	r5, r1
90013692:	428b      	cmp	r3, r1
90013694:	d006      	beq.n	900136a4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90013696:	6803      	ldr	r3, [r0, #0]
90013698:	b929      	cbnz	r1, 900136a6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
9001369a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
9001369e:	4798      	blx	r3
900136a0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
900136a4:	bd38      	pop	{r3, r4, r5, pc}
900136a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
900136aa:	e7f8      	b.n	9001369e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

900136ac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
900136ac:	4b0d      	ldr	r3, [pc, #52]	; (900136e4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
900136ae:	b510      	push	{r4, lr}
900136b0:	781b      	ldrb	r3, [r3, #0]
900136b2:	4604      	mov	r4, r0
900136b4:	b95b      	cbnz	r3, 900136ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900136b6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
900136ba:	2b02      	cmp	r3, #2
900136bc:	d007      	beq.n	900136ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900136be:	6840      	ldr	r0, [r0, #4]
900136c0:	f000 f918 	bl	900138f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
900136c4:	b118      	cbz	r0, 900136ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900136c6:	6862      	ldr	r2, [r4, #4]
900136c8:	7a53      	ldrb	r3, [r2, #9]
900136ca:	2b00      	cmp	r3, #0
900136cc:	d0fc      	beq.n	900136c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
900136ce:	f7ee f96b 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900136d2:	4620      	mov	r0, r4
900136d4:	2100      	movs	r1, #0
900136d6:	f7ff ffd7 	bl	90013688 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900136da:	4620      	mov	r0, r4
900136dc:	f7ff fd74 	bl	900131c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900136e0:	bd10      	pop	{r4, pc}
900136e2:	bf00      	nop
900136e4:	24028192 	.word	0x24028192

900136e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
900136e8:	b570      	push	{r4, r5, r6, lr}
900136ea:	4604      	mov	r4, r0
900136ec:	6803      	ldr	r3, [r0, #0]
900136ee:	b919      	cbnz	r1, 900136f8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
900136f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900136f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900136f6:	4718      	bx	r3
900136f8:	2200      	movs	r2, #0
900136fa:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
900136fe:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
90013702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013704:	4798      	blx	r3
90013706:	4605      	mov	r5, r0
90013708:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
9001370c:	4620      	mov	r0, r4
9001370e:	2101      	movs	r1, #1
90013710:	f7ff ffba 	bl	90013688 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013714:	4628      	mov	r0, r5
90013716:	bd70      	pop	{r4, r5, r6, pc}

90013718 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90013718:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
9001371c:	1a13      	subs	r3, r2, r0
9001371e:	4258      	negs	r0, r3
90013720:	4158      	adcs	r0, r3
90013722:	4770      	bx	lr

90013724 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90013724:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90013728:	1a9b      	subs	r3, r3, r2
9001372a:	2b00      	cmp	r3, #0
9001372c:	bfdc      	itt	le
9001372e:	6882      	ldrle	r2, [r0, #8]
90013730:	189b      	addle	r3, r3, r2
90013732:	2b01      	cmp	r3, #1
90013734:	bfcc      	ite	gt
90013736:	2000      	movgt	r0, #0
90013738:	2001      	movle	r0, #1
9001373a:	4770      	bx	lr

9001373c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
9001373c:	6902      	ldr	r2, [r0, #16]
9001373e:	6843      	ldr	r3, [r0, #4]
90013740:	2024      	movs	r0, #36	; 0x24
90013742:	fb00 3002 	mla	r0, r0, r2, r3
90013746:	4770      	bx	lr

90013748 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90013748:	6803      	ldr	r3, [r0, #0]
9001374a:	691b      	ldr	r3, [r3, #16]
9001374c:	4718      	bx	r3

9001374e <_ZN8touchgfx13DMA_Interface7executeEv>:
9001374e:	2301      	movs	r3, #1
90013750:	b570      	push	{r4, r5, r6, lr}
90013752:	7203      	strb	r3, [r0, #8]
90013754:	4604      	mov	r4, r0
90013756:	6840      	ldr	r0, [r0, #4]
90013758:	6803      	ldr	r3, [r0, #0]
9001375a:	699b      	ldr	r3, [r3, #24]
9001375c:	4798      	blx	r3
9001375e:	6803      	ldr	r3, [r0, #0]
90013760:	4605      	mov	r5, r0
90013762:	2b40      	cmp	r3, #64	; 0x40
90013764:	d00c      	beq.n	90013780 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013766:	d810      	bhi.n	9001378a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90013768:	2b04      	cmp	r3, #4
9001376a:	d01d      	beq.n	900137a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
9001376c:	d804      	bhi.n	90013778 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
9001376e:	2b01      	cmp	r3, #1
90013770:	d006      	beq.n	90013780 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013772:	2b02      	cmp	r3, #2
90013774:	d02c      	beq.n	900137d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90013776:	bd70      	pop	{r4, r5, r6, pc}
90013778:	2b08      	cmp	r3, #8
9001377a:	d01d      	beq.n	900137b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
9001377c:	2b20      	cmp	r3, #32
9001377e:	d1fa      	bne.n	90013776 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90013780:	6823      	ldr	r3, [r4, #0]
90013782:	4620      	mov	r0, r4
90013784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013786:	4798      	blx	r3
90013788:	e013      	b.n	900137b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
9001378a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001378e:	d0f7      	beq.n	90013780 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013790:	d804      	bhi.n	9001379c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90013792:	2b80      	cmp	r3, #128	; 0x80
90013794:	d0f4      	beq.n	90013780 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9001379a:	e7f0      	b.n	9001377e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
9001379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900137a0:	d0ee      	beq.n	90013780 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900137a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900137a6:	e7e5      	b.n	90013774 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
900137a8:	6823      	ldr	r3, [r4, #0]
900137aa:	7f01      	ldrb	r1, [r0, #28]
900137ac:	4620      	mov	r0, r4
900137ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900137b0:	4798      	blx	r3
900137b2:	6823      	ldr	r3, [r4, #0]
900137b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900137b6:	e006      	b.n	900137c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
900137b8:	6823      	ldr	r3, [r4, #0]
900137ba:	7f01      	ldrb	r1, [r0, #28]
900137bc:	4620      	mov	r0, r4
900137be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900137c0:	4798      	blx	r3
900137c2:	6823      	ldr	r3, [r4, #0]
900137c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900137c6:	4629      	mov	r1, r5
900137c8:	4620      	mov	r0, r4
900137ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900137ce:	4718      	bx	r3
900137d0:	6823      	ldr	r3, [r4, #0]
900137d2:	4620      	mov	r0, r4
900137d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900137d6:	4798      	blx	r3
900137d8:	e7f3      	b.n	900137c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

900137da <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
900137da:	4770      	bx	lr

900137dc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
900137dc:	4770      	bx	lr

900137de <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
900137de:	4770      	bx	lr

900137e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
900137e0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
900137e4:	b510      	push	{r4, lr}
900137e6:	1ad2      	subs	r2, r2, r3
900137e8:	2a00      	cmp	r2, #0
900137ea:	bfdc      	itt	le
900137ec:	6884      	ldrle	r4, [r0, #8]
900137ee:	1912      	addle	r2, r2, r4
900137f0:	2a01      	cmp	r2, #1
900137f2:	dd16      	ble.n	90013822 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
900137f4:	6842      	ldr	r2, [r0, #4]
900137f6:	2424      	movs	r4, #36	; 0x24
900137f8:	fb04 2303 	mla	r3, r4, r3, r2
900137fc:	f101 0220 	add.w	r2, r1, #32
90013800:	f851 4b04 	ldr.w	r4, [r1], #4
90013804:	4291      	cmp	r1, r2
90013806:	f843 4b04 	str.w	r4, [r3], #4
9001380a:	d1f9      	bne.n	90013800 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
9001380c:	780a      	ldrb	r2, [r1, #0]
9001380e:	701a      	strb	r2, [r3, #0]
90013810:	68c3      	ldr	r3, [r0, #12]
90013812:	6882      	ldr	r2, [r0, #8]
90013814:	f3bf 8f5b 	dmb	ish
90013818:	3301      	adds	r3, #1
9001381a:	429a      	cmp	r2, r3
9001381c:	bfd8      	it	le
9001381e:	1a9b      	suble	r3, r3, r2
90013820:	60c3      	str	r3, [r0, #12]
90013822:	bd10      	pop	{r4, pc}

90013824 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90013824:	6903      	ldr	r3, [r0, #16]
90013826:	6882      	ldr	r2, [r0, #8]
90013828:	f3bf 8f5b 	dmb	ish
9001382c:	3301      	adds	r3, #1
9001382e:	429a      	cmp	r2, r3
90013830:	bfd8      	it	le
90013832:	1a9b      	suble	r3, r3, r2
90013834:	6103      	str	r3, [r0, #16]
90013836:	4770      	bx	lr

90013838 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90013838:	b570      	push	{r4, r5, r6, lr}
9001383a:	4604      	mov	r4, r0
9001383c:	460e      	mov	r6, r1
9001383e:	6860      	ldr	r0, [r4, #4]
90013840:	6803      	ldr	r3, [r0, #0]
90013842:	685b      	ldr	r3, [r3, #4]
90013844:	4798      	blx	r3
90013846:	2800      	cmp	r0, #0
90013848:	d1f9      	bne.n	9001383e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
9001384a:	4d0d      	ldr	r5, [pc, #52]	; (90013880 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
9001384c:	6828      	ldr	r0, [r5, #0]
9001384e:	6803      	ldr	r3, [r0, #0]
90013850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90013852:	4798      	blx	r3
90013854:	f7ee f8b6 	bl	900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90013858:	6828      	ldr	r0, [r5, #0]
9001385a:	2101      	movs	r1, #1
9001385c:	f7ff ff14 	bl	90013688 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013860:	6860      	ldr	r0, [r4, #4]
90013862:	4631      	mov	r1, r6
90013864:	6803      	ldr	r3, [r0, #0]
90013866:	689b      	ldr	r3, [r3, #8]
90013868:	4798      	blx	r3
9001386a:	6823      	ldr	r3, [r4, #0]
9001386c:	4620      	mov	r0, r4
9001386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013870:	4798      	blx	r3
90013872:	6828      	ldr	r0, [r5, #0]
90013874:	6803      	ldr	r3, [r0, #0]
90013876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001387a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9001387c:	4718      	bx	r3
9001387e:	bf00      	nop
90013880:	24028194 	.word	0x24028194

90013884 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90013884:	b508      	push	{r3, lr}
90013886:	f7ee f88f 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
9001388e:	f7ee b893 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90013892 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90013892:	b510      	push	{r4, lr}
90013894:	4604      	mov	r4, r0
90013896:	2114      	movs	r1, #20
90013898:	f013 fc2d 	bl	900270f6 <_ZdlPvj>
9001389c:	4620      	mov	r0, r4
9001389e:	bd10      	pop	{r4, pc}

900138a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
900138a0:	b570      	push	{r4, r5, r6, lr}
900138a2:	4604      	mov	r4, r0
900138a4:	6840      	ldr	r0, [r0, #4]
900138a6:	6803      	ldr	r3, [r0, #0]
900138a8:	681b      	ldr	r3, [r3, #0]
900138aa:	4798      	blx	r3
900138ac:	4605      	mov	r5, r0
900138ae:	b930      	cbnz	r0, 900138be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900138b0:	7a23      	ldrb	r3, [r4, #8]
900138b2:	b123      	cbz	r3, 900138be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900138b4:	6860      	ldr	r0, [r4, #4]
900138b6:	6803      	ldr	r3, [r0, #0]
900138b8:	695b      	ldr	r3, [r3, #20]
900138ba:	4798      	blx	r3
900138bc:	7225      	strb	r5, [r4, #8]
900138be:	6860      	ldr	r0, [r4, #4]
900138c0:	6803      	ldr	r3, [r0, #0]
900138c2:	681b      	ldr	r3, [r3, #0]
900138c4:	4798      	blx	r3
900138c6:	b928      	cbnz	r0, 900138d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
900138c8:	6823      	ldr	r3, [r4, #0]
900138ca:	4620      	mov	r0, r4
900138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900138ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900138d2:	4718      	bx	r3
900138d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900138d8:	f7ee b87c 	b.w	900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

900138dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
900138dc:	b510      	push	{r4, lr}
900138de:	6082      	str	r2, [r0, #8]
900138e0:	2200      	movs	r2, #0
900138e2:	4c03      	ldr	r4, [pc, #12]	; (900138f0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
900138e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
900138e8:	e9c0 4100 	strd	r4, r1, [r0]
900138ec:	bd10      	pop	{r4, pc}
900138ee:	bf00      	nop
900138f0:	9002b91c 	.word	0x9002b91c

900138f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
900138f4:	6840      	ldr	r0, [r0, #4]
900138f6:	6803      	ldr	r3, [r0, #0]
900138f8:	681b      	ldr	r3, [r3, #0]
900138fa:	4718      	bx	r3

900138fc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
900138fc:	094a      	lsrs	r2, r1, #5
900138fe:	4b06      	ldr	r3, [pc, #24]	; (90013918 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
90013900:	60c1      	str	r1, [r0, #12]
90013902:	ea03 2311 	and.w	r3, r3, r1, lsr #8
90013906:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001390a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001390e:	4313      	orrs	r3, r2
90013910:	4319      	orrs	r1, r3
90013912:	8201      	strh	r1, [r0, #16]
90013914:	4770      	bx	lr
90013916:	bf00      	nop
90013918:	fffff800 	.word	0xfffff800

9001391c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
9001391c:	f1a0 0008 	sub.w	r0, r0, #8
90013920:	e7ec      	b.n	900138fc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
90013922:	bf00      	nop

90013924 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
90013924:	b508      	push	{r3, lr}
90013926:	4b05      	ldr	r3, [pc, #20]	; (9001393c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
90013928:	6818      	ldr	r0, [r3, #0]
9001392a:	6803      	ldr	r3, [r0, #0]
9001392c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90013930:	4798      	blx	r3
90013932:	1e43      	subs	r3, r0, #1
90013934:	4258      	negs	r0, r3
90013936:	4158      	adcs	r0, r3
90013938:	bd08      	pop	{r3, pc}
9001393a:	bf00      	nop
9001393c:	24028194 	.word	0x24028194

90013940 <_ZN8touchgfx13PainterRGB565D1Ev>:
90013940:	4770      	bx	lr

90013942 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
90013942:	3808      	subs	r0, #8
90013944:	4770      	bx	lr

90013946 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
90013946:	b430      	push	{r4, r5}
90013948:	eb01 0442 	add.w	r4, r1, r2, lsl #1
9001394c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
90013950:	8a02      	ldrh	r2, [r0, #16]
90013952:	f89d 3010 	ldrb.w	r3, [sp, #16]
90013956:	4629      	mov	r1, r5
90013958:	9202      	str	r2, [sp, #8]
9001395a:	68c2      	ldr	r2, [r0, #12]
9001395c:	4620      	mov	r0, r4
9001395e:	bc30      	pop	{r4, r5}
90013960:	f7ee bae4 	b.w	90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

90013964 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
90013964:	f7ee bad8 	b.w	90001f18 <_ZN8touchgfx5paint8tearDownEv>

90013968 <_ZN8touchgfx13PainterRGB565D0Ev>:
90013968:	b510      	push	{r4, lr}
9001396a:	4604      	mov	r4, r0
9001396c:	2114      	movs	r1, #20
9001396e:	f013 fbc2 	bl	900270f6 <_ZdlPvj>
90013972:	4620      	mov	r0, r4
90013974:	bd10      	pop	{r4, pc}

90013976 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
90013976:	f1a0 0008 	sub.w	r0, r0, #8
9001397a:	e7f5      	b.n	90013968 <_ZN8touchgfx13PainterRGB565D0Ev>

9001397c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
9001397c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9001397e:	6803      	ldr	r3, [r0, #0]
90013980:	460d      	mov	r5, r1
90013982:	4604      	mov	r4, r0
90013984:	4601      	mov	r1, r0
90013986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013988:	a802      	add	r0, sp, #8
9001398a:	4798      	blx	r3
9001398c:	6828      	ldr	r0, [r5, #0]
9001398e:	6869      	ldr	r1, [r5, #4]
90013990:	466b      	mov	r3, sp
90013992:	c303      	stmia	r3!, {r0, r1}
90013994:	4668      	mov	r0, sp
90013996:	4619      	mov	r1, r3
90013998:	f7fe ff8c 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001399c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9001399e:	b1a8      	cbz	r0, 900139cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
900139a0:	6803      	ldr	r3, [r0, #0]
900139a2:	1d21      	adds	r1, r4, #4
900139a4:	68db      	ldr	r3, [r3, #12]
900139a6:	4798      	blx	r3
900139a8:	b180      	cbz	r0, 900139cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
900139aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
900139ae:	2b00      	cmp	r3, #0
900139b0:	dd0c      	ble.n	900139cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
900139b2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
900139b6:	2d00      	cmp	r5, #0
900139b8:	dd08      	ble.n	900139cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
900139ba:	4a2d      	ldr	r2, [pc, #180]	; (90013a70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
900139bc:	7812      	ldrb	r2, [r2, #0]
900139be:	b13a      	cbz	r2, 900139d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
900139c0:	2a01      	cmp	r2, #1
900139c2:	d02d      	beq.n	90013a20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
900139c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
900139c6:	6803      	ldr	r3, [r0, #0]
900139c8:	691b      	ldr	r3, [r3, #16]
900139ca:	4798      	blx	r3
900139cc:	b004      	add	sp, #16
900139ce:	bd70      	pop	{r4, r5, r6, pc}
900139d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900139d4:	441d      	add	r5, r3
900139d6:	b2ad      	uxth	r5, r5
900139d8:	b22e      	sxth	r6, r5
900139da:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
900139de:	42b3      	cmp	r3, r6
900139e0:	daf0      	bge.n	900139c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
900139e2:	6823      	ldr	r3, [r4, #0]
900139e4:	4669      	mov	r1, sp
900139e6:	4620      	mov	r0, r4
900139e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900139ea:	4798      	blx	r3
900139ec:	b940      	cbnz	r0, 90013a00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
900139ee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
900139f2:	2b01      	cmp	r3, #1
900139f4:	d004      	beq.n	90013a00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
900139f6:	3301      	adds	r3, #1
900139f8:	105b      	asrs	r3, r3, #1
900139fa:	f8ad 3006 	strh.w	r3, [sp, #6]
900139fe:	e7f0      	b.n	900139e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
90013a00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
90013a04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013a08:	4413      	add	r3, r2
90013a0a:	b29b      	uxth	r3, r3
90013a0c:	441a      	add	r2, r3
90013a0e:	f8ad 3002 	strh.w	r3, [sp, #2]
90013a12:	b212      	sxth	r2, r2
90013a14:	4296      	cmp	r6, r2
90013a16:	dae0      	bge.n	900139da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013a18:	1aeb      	subs	r3, r5, r3
90013a1a:	f8ad 3006 	strh.w	r3, [sp, #6]
90013a1e:	e7dc      	b.n	900139da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013a20:	f8bd 5000 	ldrh.w	r5, [sp]
90013a24:	441d      	add	r5, r3
90013a26:	b2ad      	uxth	r5, r5
90013a28:	b22e      	sxth	r6, r5
90013a2a:	f9bd 3000 	ldrsh.w	r3, [sp]
90013a2e:	42b3      	cmp	r3, r6
90013a30:	dac8      	bge.n	900139c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013a32:	6823      	ldr	r3, [r4, #0]
90013a34:	4669      	mov	r1, sp
90013a36:	4620      	mov	r0, r4
90013a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90013a3a:	4798      	blx	r3
90013a3c:	b940      	cbnz	r0, 90013a50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013a3e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90013a42:	2b01      	cmp	r3, #1
90013a44:	d004      	beq.n	90013a50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013a46:	3301      	adds	r3, #1
90013a48:	105b      	asrs	r3, r3, #1
90013a4a:	f8ad 3004 	strh.w	r3, [sp, #4]
90013a4e:	e7f0      	b.n	90013a32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
90013a50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
90013a54:	f8bd 3000 	ldrh.w	r3, [sp]
90013a58:	4413      	add	r3, r2
90013a5a:	b29b      	uxth	r3, r3
90013a5c:	441a      	add	r2, r3
90013a5e:	f8ad 3000 	strh.w	r3, [sp]
90013a62:	b212      	sxth	r2, r2
90013a64:	4296      	cmp	r6, r2
90013a66:	dae0      	bge.n	90013a2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90013a68:	1aeb      	subs	r3, r5, r3
90013a6a:	f8ad 3004 	strh.w	r3, [sp, #4]
90013a6e:	e7dc      	b.n	90013a2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90013a70:	2402818c 	.word	0x2402818c

90013a74 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
90013a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90013a76:	6803      	ldr	r3, [r0, #0]
90013a78:	4604      	mov	r4, r0
90013a7a:	4601      	mov	r1, r0
90013a7c:	4668      	mov	r0, sp
90013a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013a80:	4798      	blx	r3
90013a82:	2100      	movs	r1, #0
90013a84:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
90013a88:	4668      	mov	r0, sp
90013a8a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90013a8e:	9102      	str	r1, [sp, #8]
90013a90:	a902      	add	r1, sp, #8
90013a92:	f8ad 200c 	strh.w	r2, [sp, #12]
90013a96:	f8ad 300e 	strh.w	r3, [sp, #14]
90013a9a:	f7fe ff0b 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90013a9e:	6823      	ldr	r3, [r4, #0]
90013aa0:	4669      	mov	r1, sp
90013aa2:	4620      	mov	r0, r4
90013aa4:	691b      	ldr	r3, [r3, #16]
90013aa6:	4798      	blx	r3
90013aa8:	b004      	add	sp, #16
90013aaa:	bd10      	pop	{r4, pc}

90013aac <_ZN8touchgfx12CanvasWidgetC1Ev>:
90013aac:	2101      	movs	r1, #1
90013aae:	2200      	movs	r2, #0
90013ab0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90013ab4:	490a      	ldr	r1, [pc, #40]	; (90013ae0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
90013ab6:	8082      	strh	r2, [r0, #4]
90013ab8:	6001      	str	r1, [r0, #0]
90013aba:	21ff      	movs	r1, #255	; 0xff
90013abc:	80c2      	strh	r2, [r0, #6]
90013abe:	8102      	strh	r2, [r0, #8]
90013ac0:	8142      	strh	r2, [r0, #10]
90013ac2:	8182      	strh	r2, [r0, #12]
90013ac4:	81c2      	strh	r2, [r0, #14]
90013ac6:	8202      	strh	r2, [r0, #16]
90013ac8:	8242      	strh	r2, [r0, #18]
90013aca:	61c2      	str	r2, [r0, #28]
90013acc:	8402      	strh	r2, [r0, #32]
90013ace:	8442      	strh	r2, [r0, #34]	; 0x22
90013ad0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90013ad4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
90013ad8:	6282      	str	r2, [r0, #40]	; 0x28
90013ada:	e9c0 2205 	strd	r2, r2, [r0, #20]
90013ade:	4770      	bx	lr
90013ae0:	9002b978 	.word	0x9002b978

90013ae4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
90013ae4:	6301      	str	r1, [r0, #48]	; 0x30
90013ae6:	4770      	bx	lr

90013ae8 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
90013ae8:	6b00      	ldr	r0, [r0, #48]	; 0x30
90013aea:	4770      	bx	lr

90013aec <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
90013aec:	6341      	str	r1, [r0, #52]	; 0x34
90013aee:	4770      	bx	lr

90013af0 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
90013af0:	6b40      	ldr	r0, [r0, #52]	; 0x34
90013af2:	4770      	bx	lr

90013af4 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
90013af4:	4770      	bx	lr

90013af6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
90013af6:	4608      	mov	r0, r1
90013af8:	4770      	bx	lr

90013afa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
90013afa:	b530      	push	{r4, r5, lr}
90013afc:	460d      	mov	r5, r1
90013afe:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90013b00:	8949      	ldrh	r1, [r1, #10]
90013b02:	b085      	sub	sp, #20
90013b04:	4604      	mov	r4, r0
90013b06:	1ac9      	subs	r1, r1, r3
90013b08:	6803      	ldr	r3, [r0, #0]
90013b0a:	f10d 0206 	add.w	r2, sp, #6
90013b0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90013b12:	b209      	sxth	r1, r1
90013b14:	4798      	blx	r3
90013b16:	b1a0      	cbz	r0, 90013b42 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013b18:	792b      	ldrb	r3, [r5, #4]
90013b1a:	b993      	cbnz	r3, 90013b42 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013b1c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90013b20:	b178      	cbz	r0, 90013b42 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013b22:	6803      	ldr	r3, [r0, #0]
90013b24:	68db      	ldr	r3, [r3, #12]
90013b26:	4798      	blx	r3
90013b28:	b158      	cbz	r0, 90013b42 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013b2a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013b2e:	aa02      	add	r2, sp, #8
90013b30:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90013b34:	4621      	mov	r1, r4
90013b36:	f8ad 3008 	strh.w	r3, [sp, #8]
90013b3a:	9503      	str	r5, [sp, #12]
90013b3c:	6803      	ldr	r3, [r0, #0]
90013b3e:	689b      	ldr	r3, [r3, #8]
90013b40:	4798      	blx	r3
90013b42:	b005      	add	sp, #20
90013b44:	bd30      	pop	{r4, r5, pc}

90013b46 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
90013b46:	428a      	cmp	r2, r1
90013b48:	bfbc      	itt	lt
90013b4a:	460b      	movlt	r3, r1
90013b4c:	4611      	movlt	r1, r2
90013b4e:	b510      	push	{r4, lr}
90013b50:	bfb8      	it	lt
90013b52:	461a      	movlt	r2, r3
90013b54:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
90013b58:	4604      	mov	r4, r0
90013b5a:	428b      	cmp	r3, r1
90013b5c:	d103      	bne.n	90013b66 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
90013b5e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
90013b62:	4293      	cmp	r3, r2
90013b64:	d011      	beq.n	90013b8a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
90013b66:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
90013b6a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
90013b6e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
90013b72:	f005 f8d2 	bl	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b76:	f104 0038 	add.w	r0, r4, #56	; 0x38
90013b7a:	f005 f8ce 	bl	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b7e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90013b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013b86:	f005 b8c8 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b8a:	bd10      	pop	{r4, pc}

90013b8c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
90013b8c:	428a      	cmp	r2, r1
90013b8e:	bfbc      	itt	lt
90013b90:	460b      	movlt	r3, r1
90013b92:	4611      	movlt	r1, r2
90013b94:	b510      	push	{r4, lr}
90013b96:	bfb8      	it	lt
90013b98:	461a      	movlt	r2, r3
90013b9a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
90013b9e:	4604      	mov	r4, r0
90013ba0:	428b      	cmp	r3, r1
90013ba2:	d103      	bne.n	90013bac <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
90013ba4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
90013ba8:	4293      	cmp	r3, r2
90013baa:	d011      	beq.n	90013bd0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
90013bac:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
90013bb0:	f104 0064 	add.w	r0, r4, #100	; 0x64
90013bb4:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
90013bb8:	f005 f8af 	bl	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013bbc:	f104 0038 	add.w	r0, r4, #56	; 0x38
90013bc0:	f005 f8ab 	bl	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013bc4:	f104 0090 	add.w	r0, r4, #144	; 0x90
90013bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013bcc:	f005 b8a5 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>
90013bd0:	bd10      	pop	{r4, pc}

90013bd2 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
90013bd2:	2300      	movs	r3, #0
90013bd4:	3038      	adds	r0, #56	; 0x38
90013bd6:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
90013bda:	f005 b89e 	b.w	90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>

90013bde <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
90013bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013be2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90013be6:	4605      	mov	r5, r0
90013be8:	4688      	mov	r8, r1
90013bea:	4617      	mov	r7, r2
90013bec:	2b00      	cmp	r3, #0
90013bee:	d03e      	beq.n	90013c6e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013bf0:	6803      	ldr	r3, [r0, #0]
90013bf2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90013bf6:	4798      	blx	r3
90013bf8:	682b      	ldr	r3, [r5, #0]
90013bfa:	4604      	mov	r4, r0
90013bfc:	4628      	mov	r0, r5
90013bfe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90013c02:	4798      	blx	r3
90013c04:	4284      	cmp	r4, r0
90013c06:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
90013c0a:	bfc2      	ittt	gt
90013c0c:	4623      	movgt	r3, r4
90013c0e:	4604      	movgt	r4, r0
90013c10:	4618      	movgt	r0, r3
90013c12:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
90013c16:	42b3      	cmp	r3, r6
90013c18:	da29      	bge.n	90013c6e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013c1a:	42b0      	cmp	r0, r6
90013c1c:	bfa8      	it	ge
90013c1e:	4630      	movge	r0, r6
90013c20:	2800      	cmp	r0, #0
90013c22:	db24      	blt.n	90013c6e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013c24:	f1b8 0f00 	cmp.w	r8, #0
90013c28:	d11e      	bne.n	90013c68 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
90013c2a:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
90013c2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90013c32:	460c      	mov	r4, r1
90013c34:	009a      	lsls	r2, r3, #2
90013c36:	4298      	cmp	r0, r3
90013c38:	dd0b      	ble.n	90013c52 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
90013c3a:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
90013c3e:	3301      	adds	r3, #1
90013c40:	58b6      	ldr	r6, [r6, r2]
90013c42:	3204      	adds	r2, #4
90013c44:	42b1      	cmp	r1, r6
90013c46:	bfa8      	it	ge
90013c48:	4631      	movge	r1, r6
90013c4a:	42b4      	cmp	r4, r6
90013c4c:	bfb8      	it	lt
90013c4e:	4634      	movlt	r4, r6
90013c50:	e7f1      	b.n	90013c36 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
90013c52:	1bc9      	subs	r1, r1, r7
90013c54:	193a      	adds	r2, r7, r4
90013c56:	4291      	cmp	r1, r2
90013c58:	d009      	beq.n	90013c6e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013c5a:	682b      	ldr	r3, [r5, #0]
90013c5c:	4628      	mov	r0, r5
90013c5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90013c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013c66:	4718      	bx	r3
90013c68:	427c      	negs	r4, r7
90013c6a:	4639      	mov	r1, r7
90013c6c:	e7e2      	b.n	90013c34 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
90013c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90013c72 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
90013c72:	b530      	push	{r4, r5, lr}
90013c74:	790b      	ldrb	r3, [r1, #4]
90013c76:	b085      	sub	sp, #20
90013c78:	4604      	mov	r4, r0
90013c7a:	460d      	mov	r5, r1
90013c7c:	2b02      	cmp	r3, #2
90013c7e:	d020      	beq.n	90013cc2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c80:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90013c82:	f10d 0206 	add.w	r2, sp, #6
90013c86:	88c9      	ldrh	r1, [r1, #6]
90013c88:	1ac9      	subs	r1, r1, r3
90013c8a:	6803      	ldr	r3, [r0, #0]
90013c8c:	b209      	sxth	r1, r1
90013c8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90013c92:	4798      	blx	r3
90013c94:	b1a8      	cbz	r0, 90013cc2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c96:	792b      	ldrb	r3, [r5, #4]
90013c98:	2b01      	cmp	r3, #1
90013c9a:	d812      	bhi.n	90013cc2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c9c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90013ca0:	b178      	cbz	r0, 90013cc2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013ca2:	6803      	ldr	r3, [r0, #0]
90013ca4:	68db      	ldr	r3, [r3, #12]
90013ca6:	4798      	blx	r3
90013ca8:	b158      	cbz	r0, 90013cc2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013caa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013cae:	aa02      	add	r2, sp, #8
90013cb0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90013cb4:	4621      	mov	r1, r4
90013cb6:	f8ad 3008 	strh.w	r3, [sp, #8]
90013cba:	9503      	str	r5, [sp, #12]
90013cbc:	6803      	ldr	r3, [r0, #0]
90013cbe:	689b      	ldr	r3, [r3, #8]
90013cc0:	4798      	blx	r3
90013cc2:	b005      	add	sp, #20
90013cc4:	bd30      	pop	{r4, r5, pc}

90013cc6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
90013cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013cca:	4604      	mov	r4, r0
90013ccc:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013cd0:	4690      	mov	r8, r2
90013cd2:	461f      	mov	r7, r3
90013cd4:	9e06      	ldr	r6, [sp, #24]
90013cd6:	b928      	cbnz	r0, 90013ce4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
90013cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
90013cdc:	8033      	strh	r3, [r6, #0]
90013cde:	803b      	strh	r3, [r7, #0]
90013ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013ce4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90013ce8:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
90013cec:	1883      	adds	r3, r0, r2
90013cee:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
90013cf2:	1ad2      	subs	r2, r2, r3
90013cf4:	b212      	sxth	r2, r2
90013cf6:	2a01      	cmp	r2, #1
90013cf8:	dc07      	bgt.n	90013d0a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
90013cfa:	2300      	movs	r3, #0
90013cfc:	803b      	strh	r3, [r7, #0]
90013cfe:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
90013d02:	3b01      	subs	r3, #1
90013d04:	8033      	strh	r3, [r6, #0]
90013d06:	2001      	movs	r0, #1
90013d08:	e7ea      	b.n	90013ce0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013d0a:	1a08      	subs	r0, r1, r0
90013d0c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
90013d10:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90013d14:	0140      	lsls	r0, r0, #5
90013d16:	6b25      	ldr	r5, [r4, #48]	; 0x30
90013d18:	1a5b      	subs	r3, r3, r1
90013d1a:	d459      	bmi.n	90013dd0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
90013d1c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
90013d20:	fb93 f1f5 	sdiv	r1, r3, r5
90013d24:	2302      	movs	r3, #2
90013d26:	fb91 f1f3 	sdiv	r1, r1, r3
90013d2a:	3a01      	subs	r2, #1
90013d2c:	f005 f9bc 	bl	900190a8 <_ZN8touchgfx6muldivElll>
90013d30:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90013d34:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
90013d38:	2900      	cmp	r1, #0
90013d3a:	db55      	blt.n	90013de8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
90013d3c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
90013d40:	2502      	movs	r5, #2
90013d42:	fb93 f3fc 	sdiv	r3, r3, ip
90013d46:	fb93 f3f5 	sdiv	r3, r3, r5
90013d4a:	eb00 1543 	add.w	r5, r0, r3, lsl #5
90013d4e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90013d52:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90013d56:	1a52      	subs	r2, r2, r1
90013d58:	eba8 0003 	sub.w	r0, r8, r3
90013d5c:	ea4f 1040 	mov.w	r0, r0, lsl #5
90013d60:	d44e      	bmi.n	90013e00 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
90013d62:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
90013d66:	fb92 f1fc 	sdiv	r1, r2, ip
90013d6a:	2202      	movs	r2, #2
90013d6c:	fb91 f1f2 	sdiv	r1, r1, r2
90013d70:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90013d74:	4413      	add	r3, r2
90013d76:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
90013d7a:	1ad2      	subs	r2, r2, r3
90013d7c:	b212      	sxth	r2, r2
90013d7e:	3a01      	subs	r2, #1
90013d80:	f005 f992 	bl	900190a8 <_ZN8touchgfx6muldivElll>
90013d84:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
90013d88:	6b22      	ldr	r2, [r4, #48]	; 0x30
90013d8a:	2b00      	cmp	r3, #0
90013d8c:	db44      	blt.n	90013e18 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
90013d8e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90013d92:	fb93 f3f2 	sdiv	r3, r3, r2
90013d96:	2202      	movs	r2, #2
90013d98:	fb93 f3f2 	sdiv	r3, r3, r2
90013d9c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
90013da0:	2020      	movs	r0, #32
90013da2:	429d      	cmp	r5, r3
90013da4:	bfde      	ittt	le
90013da6:	461a      	movle	r2, r3
90013da8:	462b      	movle	r3, r5
90013daa:	4615      	movle	r5, r2
90013dac:	b21b      	sxth	r3, r3
90013dae:	2d00      	cmp	r5, #0
90013db0:	bfaa      	itet	ge
90013db2:	351f      	addge	r5, #31
90013db4:	fb95 f5f0 	sdivlt	r5, r5, r0
90013db8:	116d      	asrge	r5, r5, #5
90013dba:	fb93 f3f0 	sdiv	r3, r3, r0
90013dbe:	b22d      	sxth	r5, r5
90013dc0:	803b      	strh	r3, [r7, #0]
90013dc2:	2d00      	cmp	r5, #0
90013dc4:	8035      	strh	r5, [r6, #0]
90013dc6:	da33      	bge.n	90013e30 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
90013dc8:	2000      	movs	r0, #0
90013dca:	8030      	strh	r0, [r6, #0]
90013dcc:	8038      	strh	r0, [r7, #0]
90013dce:	e787      	b.n	90013ce0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013dd0:	f06f 0101 	mvn.w	r1, #1
90013dd4:	fb01 5303 	mla	r3, r1, r3, r5
90013dd8:	1e59      	subs	r1, r3, #1
90013dda:	2302      	movs	r3, #2
90013ddc:	fb91 f1f5 	sdiv	r1, r1, r5
90013de0:	fb91 f1f3 	sdiv	r1, r1, r3
90013de4:	4249      	negs	r1, r1
90013de6:	e7a0      	b.n	90013d2a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
90013de8:	f06f 0301 	mvn.w	r3, #1
90013dec:	2502      	movs	r5, #2
90013dee:	fb03 c301 	mla	r3, r3, r1, ip
90013df2:	3b01      	subs	r3, #1
90013df4:	fb93 f3fc 	sdiv	r3, r3, ip
90013df8:	fb93 f3f5 	sdiv	r3, r3, r5
90013dfc:	425b      	negs	r3, r3
90013dfe:	e7a4      	b.n	90013d4a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
90013e00:	f06f 0101 	mvn.w	r1, #1
90013e04:	fb01 c202 	mla	r2, r1, r2, ip
90013e08:	1e51      	subs	r1, r2, #1
90013e0a:	2202      	movs	r2, #2
90013e0c:	fb91 f1fc 	sdiv	r1, r1, ip
90013e10:	fb91 f1f2 	sdiv	r1, r1, r2
90013e14:	4249      	negs	r1, r1
90013e16:	e7ab      	b.n	90013d70 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
90013e18:	f06f 0101 	mvn.w	r1, #1
90013e1c:	fb01 2303 	mla	r3, r1, r3, r2
90013e20:	3b01      	subs	r3, #1
90013e22:	fb93 f3f2 	sdiv	r3, r3, r2
90013e26:	2202      	movs	r2, #2
90013e28:	fb93 f3f2 	sdiv	r3, r3, r2
90013e2c:	425b      	negs	r3, r3
90013e2e:	e7b5      	b.n	90013d9c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
90013e30:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013e34:	f9b7 2000 	ldrsh.w	r2, [r7]
90013e38:	4293      	cmp	r3, r2
90013e3a:	dc05      	bgt.n	90013e48 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
90013e3c:	3b01      	subs	r3, #1
90013e3e:	2000      	movs	r0, #0
90013e40:	b21b      	sxth	r3, r3
90013e42:	8033      	strh	r3, [r6, #0]
90013e44:	803b      	strh	r3, [r7, #0]
90013e46:	e74b      	b.n	90013ce0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013e48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
90013e4c:	803a      	strh	r2, [r7, #0]
90013e4e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013e52:	f9b6 2000 	ldrsh.w	r2, [r6]
90013e56:	4293      	cmp	r3, r2
90013e58:	bfdc      	itt	le
90013e5a:	f103 33ff 	addle.w	r3, r3, #4294967295
90013e5e:	b21a      	sxthle	r2, r3
90013e60:	8032      	strh	r2, [r6, #0]
90013e62:	e750      	b.n	90013d06 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>:
90013e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013e68:	461e      	mov	r6, r3
90013e6a:	6803      	ldr	r3, [r0, #0]
90013e6c:	4604      	mov	r4, r0
90013e6e:	4617      	mov	r7, r2
90013e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013e72:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
90013e76:	4798      	blx	r3
90013e78:	6823      	ldr	r3, [r4, #0]
90013e7a:	4639      	mov	r1, r7
90013e7c:	4620      	mov	r0, r4
90013e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013e80:	4798      	blx	r3
90013e82:	6823      	ldr	r3, [r4, #0]
90013e84:	4631      	mov	r1, r6
90013e86:	4620      	mov	r0, r4
90013e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90013e8a:	4790      	blx	r2
90013e8c:	6823      	ldr	r3, [r4, #0]
90013e8e:	4629      	mov	r1, r5
90013e90:	4620      	mov	r0, r4
90013e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013e98:	4718      	bx	r3
	...

90013e9c <_ZN8touchgfx9ContainerC1Ev>:
90013e9c:	2101      	movs	r1, #1
90013e9e:	2200      	movs	r2, #0
90013ea0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90013ea4:	4909      	ldr	r1, [pc, #36]	; (90013ecc <_ZN8touchgfx9ContainerC1Ev+0x30>)
90013ea6:	8082      	strh	r2, [r0, #4]
90013ea8:	80c2      	strh	r2, [r0, #6]
90013eaa:	8102      	strh	r2, [r0, #8]
90013eac:	8142      	strh	r2, [r0, #10]
90013eae:	8182      	strh	r2, [r0, #12]
90013eb0:	81c2      	strh	r2, [r0, #14]
90013eb2:	8202      	strh	r2, [r0, #16]
90013eb4:	8242      	strh	r2, [r0, #18]
90013eb6:	61c2      	str	r2, [r0, #28]
90013eb8:	8402      	strh	r2, [r0, #32]
90013eba:	8442      	strh	r2, [r0, #34]	; 0x22
90013ebc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90013ec0:	6001      	str	r1, [r0, #0]
90013ec2:	6282      	str	r2, [r0, #40]	; 0x28
90013ec4:	e9c0 2205 	strd	r2, r2, [r0, #20]
90013ec8:	4770      	bx	lr
90013eca:	bf00      	nop
90013ecc:	9002b880 	.word	0x9002b880

90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
90013ed0:	6800      	ldr	r0, [r0, #0]
90013ed2:	2800      	cmp	r0, #0
90013ed4:	bfbd      	ittte	lt
90013ed6:	380f      	sublt	r0, #15
90013ed8:	2320      	movlt	r3, #32
90013eda:	fb90 f0f3 	sdivlt	r0, r0, r3
90013ede:	3010      	addge	r0, #16
90013ee0:	bfa8      	it	ge
90013ee2:	1140      	asrge	r0, r0, #5
90013ee4:	4770      	bx	lr

90013ee6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
90013ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013eea:	4605      	mov	r5, r0
90013eec:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013ef0:	4688      	mov	r8, r1
90013ef2:	4691      	mov	r9, r2
90013ef4:	469a      	mov	sl, r3
90013ef6:	b360      	cbz	r0, 90013f52 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
90013ef8:	2700      	movs	r7, #0
90013efa:	f04f 3bff 	mov.w	fp, #4294967295
90013efe:	b23e      	sxth	r6, r7
90013f00:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
90013f04:	42b3      	cmp	r3, r6
90013f06:	dd23      	ble.n	90013f50 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
90013f08:	682b      	ldr	r3, [r5, #0]
90013f0a:	4631      	mov	r1, r6
90013f0c:	4628      	mov	r0, r5
90013f0e:	3701      	adds	r7, #1
90013f10:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90013f14:	4798      	blx	r3
90013f16:	9001      	str	r0, [sp, #4]
90013f18:	a801      	add	r0, sp, #4
90013f1a:	f7ff ffd9 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013f1e:	682b      	ldr	r3, [r5, #0]
90013f20:	eba0 0008 	sub.w	r0, r0, r8
90013f24:	4631      	mov	r1, r6
90013f26:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90013f2a:	b204      	sxth	r4, r0
90013f2c:	4628      	mov	r0, r5
90013f2e:	4798      	blx	r3
90013f30:	9001      	str	r0, [sp, #4]
90013f32:	a801      	add	r0, sp, #4
90013f34:	f7ff ffcc 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013f38:	eba0 0009 	sub.w	r0, r0, r9
90013f3c:	fb10 f000 	smulbb	r0, r0, r0
90013f40:	fb04 0404 	mla	r4, r4, r4, r0
90013f44:	455c      	cmp	r4, fp
90013f46:	bf3c      	itt	cc
90013f48:	f8aa 6000 	strhcc.w	r6, [sl]
90013f4c:	46a3      	movcc	fp, r4
90013f4e:	e7d6      	b.n	90013efe <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
90013f50:	2001      	movs	r0, #1
90013f52:	b003      	add	sp, #12
90013f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90013f58 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
90013f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90013f5c:	4604      	mov	r4, r0
90013f5e:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013f62:	4688      	mov	r8, r1
90013f64:	4691      	mov	r9, r2
90013f66:	b1f8      	cbz	r0, 90013fa8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
90013f68:	2500      	movs	r5, #0
90013f6a:	f04f 37ff 	mov.w	r7, #4294967295
90013f6e:	b22e      	sxth	r6, r5
90013f70:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013f74:	42b3      	cmp	r3, r6
90013f76:	dd16      	ble.n	90013fa6 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
90013f78:	6823      	ldr	r3, [r4, #0]
90013f7a:	4631      	mov	r1, r6
90013f7c:	4620      	mov	r0, r4
90013f7e:	3501      	adds	r5, #1
90013f80:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90013f84:	4798      	blx	r3
90013f86:	9001      	str	r0, [sp, #4]
90013f88:	a801      	add	r0, sp, #4
90013f8a:	f7ff ffa1 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013f8e:	b200      	sxth	r0, r0
90013f90:	eba0 0008 	sub.w	r0, r0, r8
90013f94:	2800      	cmp	r0, #0
90013f96:	bfb8      	it	lt
90013f98:	4240      	neglt	r0, r0
90013f9a:	42b8      	cmp	r0, r7
90013f9c:	bf3c      	itt	cc
90013f9e:	f8a9 6000 	strhcc.w	r6, [r9]
90013fa2:	4607      	movcc	r7, r0
90013fa4:	e7e3      	b.n	90013f6e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
90013fa6:	2001      	movs	r0, #1
90013fa8:	b003      	add	sp, #12
90013faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

90013fae <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
90013fae:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
90013fb2:	f9bd 3000 	ldrsh.w	r3, [sp]
90013fb6:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
90013fba:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
90013fbe:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
90013fc2:	4770      	bx	lr

90013fc4 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
90013fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
90013fc6:	4604      	mov	r4, r0
90013fc8:	3038      	adds	r0, #56	; 0x38
90013fca:	460d      	mov	r5, r1
90013fcc:	f7fe faee 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90013fd0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90013fd4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90013fd8:	4628      	mov	r0, r5
90013fda:	9200      	str	r2, [sp, #0]
90013fdc:	2200      	movs	r2, #0
90013fde:	4611      	mov	r1, r2
90013fe0:	f7ff ff40 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
90013fe4:	b003      	add	sp, #12
90013fe6:	bd30      	pop	{r4, r5, pc}

90013fe8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
90013fe8:	b538      	push	{r3, r4, r5, lr}
90013fea:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90013fee:	460d      	mov	r5, r1
90013ff0:	428b      	cmp	r3, r1
90013ff2:	dd08      	ble.n	90014006 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90013ff4:	6e04      	ldr	r4, [r0, #96]	; 0x60
90013ff6:	b134      	cbz	r4, 90014006 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90013ff8:	6823      	ldr	r3, [r4, #0]
90013ffa:	4620      	mov	r0, r4
90013ffc:	4629      	mov	r1, r5
90013ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014000:	4798      	blx	r3
90014002:	69a4      	ldr	r4, [r4, #24]
90014004:	e7f7      	b.n	90013ff6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
90014006:	bd38      	pop	{r3, r4, r5, pc}

90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
90014008:	b570      	push	{r4, r5, r6, lr}
9001400a:	4606      	mov	r6, r0
9001400c:	460d      	mov	r5, r1
9001400e:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
90014012:	b134      	cbz	r4, 90014022 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
90014014:	6823      	ldr	r3, [r4, #0]
90014016:	4620      	mov	r0, r4
90014018:	4629      	mov	r1, r5
9001401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9001401c:	4798      	blx	r3
9001401e:	69a4      	ldr	r4, [r4, #24]
90014020:	e7f7      	b.n	90014012 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
90014022:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
90014026:	b134      	cbz	r4, 90014036 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
90014028:	6823      	ldr	r3, [r4, #0]
9001402a:	4620      	mov	r0, r4
9001402c:	4629      	mov	r1, r5
9001402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014030:	4798      	blx	r3
90014032:	69a4      	ldr	r4, [r4, #24]
90014034:	e7f7      	b.n	90014026 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
90014036:	bd70      	pop	{r4, r5, r6, pc}

90014038 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
90014038:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001403a:	4604      	mov	r4, r0
9001403c:	6e05      	ldr	r5, [r0, #96]	; 0x60
9001403e:	b15d      	cbz	r5, 90014058 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
90014040:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90014044:	4628      	mov	r0, r5
90014046:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
9001404a:	9200      	str	r2, [sp, #0]
9001404c:	2200      	movs	r2, #0
9001404e:	4611      	mov	r1, r2
90014050:	f7ff ff08 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
90014054:	69ad      	ldr	r5, [r5, #24]
90014056:	e7f2      	b.n	9001403e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
90014058:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
9001405c:	b15d      	cbz	r5, 90014076 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
9001405e:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
90014062:	4628      	mov	r0, r5
90014064:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
90014068:	9200      	str	r2, [sp, #0]
9001406a:	2200      	movs	r2, #0
9001406c:	4611      	mov	r1, r2
9001406e:	f7ff fef9 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
90014072:	69ad      	ldr	r5, [r5, #24]
90014074:	e7f2      	b.n	9001405c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
90014076:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
9001407a:	b15d      	cbz	r5, 90014094 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
9001407c:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
90014080:	4628      	mov	r0, r5
90014082:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
90014086:	9200      	str	r2, [sp, #0]
90014088:	2200      	movs	r2, #0
9001408a:	4611      	mov	r1, r2
9001408c:	f7ff feea 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
90014090:	69ad      	ldr	r5, [r5, #24]
90014092:	e7f2      	b.n	9001407a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
90014094:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
90014098:	b15d      	cbz	r5, 900140b2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
9001409a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
9001409e:	4628      	mov	r0, r5
900140a0:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
900140a4:	9200      	str	r2, [sp, #0]
900140a6:	2200      	movs	r2, #0
900140a8:	4611      	mov	r1, r2
900140aa:	f7ff fedb 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
900140ae:	69ad      	ldr	r5, [r5, #24]
900140b0:	e7f2      	b.n	90014098 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
900140b2:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
900140b6:	b15d      	cbz	r5, 900140d0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
900140b8:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
900140bc:	4628      	mov	r0, r5
900140be:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
900140c2:	9200      	str	r2, [sp, #0]
900140c4:	2200      	movs	r2, #0
900140c6:	4611      	mov	r1, r2
900140c8:	f7ff fecc 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
900140cc:	69ad      	ldr	r5, [r5, #24]
900140ce:	e7f2      	b.n	900140b6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
900140d0:	6823      	ldr	r3, [r4, #0]
900140d2:	4620      	mov	r0, r4
900140d4:	695b      	ldr	r3, [r3, #20]
900140d6:	b003      	add	sp, #12
900140d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
900140dc:	4718      	bx	r3

900140de <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
900140de:	b430      	push	{r4, r5}
900140e0:	b28a      	uxth	r2, r1
900140e2:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
900140e6:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
900140ea:	1b15      	subs	r5, r2, r4
900140ec:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
900140f0:	8101      	strh	r1, [r0, #8]
900140f2:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
900140f6:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
900140fa:	442c      	add	r4, r5
900140fc:	1b12      	subs	r2, r2, r4
900140fe:	bc30      	pop	{r4, r5}
90014100:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90014104:	f7ff bf98 	b.w	90014038 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

90014108 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
90014108:	b430      	push	{r4, r5}
9001410a:	b28a      	uxth	r2, r1
9001410c:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
90014110:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
90014114:	1b15      	subs	r5, r2, r4
90014116:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
9001411a:	8141      	strh	r1, [r0, #10]
9001411c:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
90014120:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
90014124:	442c      	add	r4, r5
90014126:	1b12      	subs	r2, r2, r4
90014128:	bc30      	pop	{r4, r5}
9001412a:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
9001412e:	f7ff bf83 	b.w	90014038 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

90014132 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
90014132:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90014136:	fa1f fa83 	uxth.w	sl, r3
9001413a:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
9001413e:	4615      	mov	r5, r2
90014140:	4699      	mov	r9, r3
90014142:	fa1f f887 	uxth.w	r8, r7
90014146:	8903      	ldrh	r3, [r0, #8]
90014148:	4452      	add	r2, sl
9001414a:	4604      	mov	r4, r0
9001414c:	8940      	ldrh	r0, [r0, #10]
9001414e:	460e      	mov	r6, r1
90014150:	1a9b      	subs	r3, r3, r2
90014152:	eb08 0201 	add.w	r2, r8, r1
90014156:	1a80      	subs	r0, r0, r2
90014158:	b21b      	sxth	r3, r3
9001415a:	460a      	mov	r2, r1
9001415c:	4629      	mov	r1, r5
9001415e:	b200      	sxth	r0, r0
90014160:	9000      	str	r0, [sp, #0]
90014162:	f104 0038 	add.w	r0, r4, #56	; 0x38
90014166:	f7ff fe7d 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
9001416a:	2200      	movs	r2, #0
9001416c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90014170:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
90014174:	4611      	mov	r1, r2
90014176:	9600      	str	r6, [sp, #0]
90014178:	f7ff fe74 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
9001417c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014180:	2200      	movs	r2, #0
90014182:	f104 0064 	add.w	r0, r4, #100	; 0x64
90014186:	9300      	str	r3, [sp, #0]
90014188:	462b      	mov	r3, r5
9001418a:	4611      	mov	r1, r2
9001418c:	f7ff fe6a 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
90014190:	8921      	ldrh	r1, [r4, #8]
90014192:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014196:	f104 0090 	add.w	r0, r4, #144	; 0x90
9001419a:	eba1 010a 	sub.w	r1, r1, sl
9001419e:	2200      	movs	r2, #0
900141a0:	9300      	str	r3, [sp, #0]
900141a2:	464b      	mov	r3, r9
900141a4:	b209      	sxth	r1, r1
900141a6:	f7ff fe5d 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
900141aa:	8962      	ldrh	r2, [r4, #10]
900141ac:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
900141b0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
900141b4:	eba2 0208 	sub.w	r2, r2, r8
900141b8:	9700      	str	r7, [sp, #0]
900141ba:	2100      	movs	r1, #0
900141bc:	b212      	sxth	r2, r2
900141be:	f7ff fe51 	bl	90013e64 <_ZN8touchgfx8Drawable11setPositionEssss>
900141c2:	4620      	mov	r0, r4
900141c4:	b002      	add	sp, #8
900141c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900141ca:	f7ff bf35 	b.w	90014038 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

900141d0 <_ZN8touchgfx17AbstractDataGraphC1Es>:
900141d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900141d4:	b085      	sub	sp, #20
900141d6:	4604      	mov	r4, r0
900141d8:	2601      	movs	r6, #1
900141da:	2500      	movs	r5, #0
900141dc:	9103      	str	r1, [sp, #12]
900141de:	f7ff fe5d 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
900141e2:	4b2c      	ldr	r3, [pc, #176]	; (90014294 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
900141e4:	f104 0b38 	add.w	fp, r4, #56	; 0x38
900141e8:	f104 0964 	add.w	r9, r4, #100	; 0x64
900141ec:	f104 0890 	add.w	r8, r4, #144	; 0x90
900141f0:	6023      	str	r3, [r4, #0]
900141f2:	23ff      	movs	r3, #255	; 0xff
900141f4:	4658      	mov	r0, fp
900141f6:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
900141fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
900141fe:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
90014202:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90014206:	f7ff fe49 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
9001420a:	4648      	mov	r0, r9
9001420c:	f7ff fe46 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
90014210:	4640      	mov	r0, r8
90014212:	f7ff fe43 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
90014216:	4650      	mov	r0, sl
90014218:	f7ff fe40 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
9001421c:	4638      	mov	r0, r7
9001421e:	f7ff fe3d 	bl	90013e9c <_ZN8touchgfx9ContainerC1Ev>
90014222:	9903      	ldr	r1, [sp, #12]
90014224:	4620      	mov	r0, r4
90014226:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
9001422a:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
9001422e:	4659      	mov	r1, fp
90014230:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
90014234:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
90014238:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
9001423c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
90014240:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
90014244:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
90014248:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
9001424c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90014250:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
90014254:	f7fe f9aa 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014258:	4651      	mov	r1, sl
9001425a:	4620      	mov	r0, r4
9001425c:	f7fe f9a6 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014260:	4649      	mov	r1, r9
90014262:	4620      	mov	r0, r4
90014264:	f7fe f9a2 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014268:	4641      	mov	r1, r8
9001426a:	4620      	mov	r0, r4
9001426c:	f7fe f99e 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014270:	4639      	mov	r1, r7
90014272:	4620      	mov	r0, r4
90014274:	f7fe f99a 	bl	900125ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014278:	4620      	mov	r0, r4
9001427a:	9500      	str	r5, [sp, #0]
9001427c:	462b      	mov	r3, r5
9001427e:	462a      	mov	r2, r5
90014280:	4629      	mov	r1, r5
90014282:	f7ff ff56 	bl	90014132 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
90014286:	4620      	mov	r0, r4
90014288:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
9001428c:	b005      	add	sp, #20
9001428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014292:	bf00      	nop
90014294:	9002bb88 	.word	0x9002bb88

90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
90014298:	4291      	cmp	r1, r2
9001429a:	4613      	mov	r3, r2
9001429c:	d003      	beq.n	900142a6 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
9001429e:	460a      	mov	r2, r1
900142a0:	4619      	mov	r1, r3
900142a2:	f004 bf01 	b.w	900190a8 <_ZN8touchgfx6muldivElll>
900142a6:	4770      	bx	lr

900142a8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
900142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900142ac:	6803      	ldr	r3, [r0, #0]
900142ae:	460d      	mov	r5, r1
900142b0:	4604      	mov	r4, r0
900142b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900142b6:	4798      	blx	r3
900142b8:	42a8      	cmp	r0, r5
900142ba:	4606      	mov	r6, r0
900142bc:	d024      	beq.n	90014308 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
900142be:	6823      	ldr	r3, [r4, #0]
900142c0:	4601      	mov	r1, r0
900142c2:	462a      	mov	r2, r5
900142c4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
900142c8:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
900142cc:	f7ff ffe4 	bl	90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900142d0:	4680      	mov	r8, r0
900142d2:	462a      	mov	r2, r5
900142d4:	4631      	mov	r1, r6
900142d6:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
900142da:	f7ff ffdd 	bl	90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900142de:	4641      	mov	r1, r8
900142e0:	4602      	mov	r2, r0
900142e2:	4620      	mov	r0, r4
900142e4:	47b8      	blx	r7
900142e6:	462a      	mov	r2, r5
900142e8:	4631      	mov	r1, r6
900142ea:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
900142ee:	f7ff ffd3 	bl	90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900142f2:	462a      	mov	r2, r5
900142f4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
900142f8:	4631      	mov	r1, r6
900142fa:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
900142fe:	f7ff ffcb 	bl	90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014302:	6325      	str	r5, [r4, #48]	; 0x30
90014304:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
90014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001430c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
9001430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90014310:	4604      	mov	r4, r0
90014312:	460f      	mov	r7, r1
90014314:	b1b2      	cbz	r2, 90014344 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
90014316:	6803      	ldr	r3, [r0, #0]
90014318:	2600      	movs	r6, #0
9001431a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9001431e:	4798      	blx	r3
90014320:	4681      	mov	r9, r0
90014322:	b235      	sxth	r5, r6
90014324:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014328:	3601      	adds	r6, #1
9001432a:	42ab      	cmp	r3, r5
9001432c:	dd0a      	ble.n	90014344 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
9001432e:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
90014332:	463a      	mov	r2, r7
90014334:	4649      	mov	r1, r9
90014336:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
9001433a:	f7ff ffad 	bl	90014298 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
9001433e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
90014342:	e7ee      	b.n	90014322 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
90014344:	6367      	str	r7, [r4, #52]	; 0x34
90014346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

9001434a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
9001434a:	b570      	push	{r4, r5, r6, lr}
9001434c:	6803      	ldr	r3, [r0, #0]
9001434e:	4604      	mov	r4, r0
90014350:	460d      	mov	r5, r1
90014352:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
90014356:	4798      	blx	r3
90014358:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
9001435c:	4629      	mov	r1, r5
9001435e:	4620      	mov	r0, r4
90014360:	3301      	adds	r3, #1
90014362:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90014366:	6823      	ldr	r3, [r4, #0]
90014368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001436c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
90014370:	4718      	bx	r3

90014372 <_ZN8touchgfx16GraphElementLineD1Ev>:
90014372:	4770      	bx	lr

90014374 <_ZN8touchgfx16GraphElementLineD0Ev>:
90014374:	b510      	push	{r4, lr}
90014376:	4604      	mov	r4, r0
90014378:	2130      	movs	r1, #48	; 0x30
9001437a:	f012 febc 	bl	900270f6 <_ZdlPvj>
9001437e:	4620      	mov	r0, r4
90014380:	bd10      	pop	{r4, pc}

90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014384:	4604      	mov	r4, r0
90014386:	4608      	mov	r0, r1
90014388:	460d      	mov	r5, r1
9001438a:	f7fe fad6 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001438e:	b978      	cbnz	r0, 900143b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014390:	4620      	mov	r0, r4
90014392:	f7fe fad2 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90014396:	f9b5 6000 	ldrsh.w	r6, [r5]
9001439a:	b150      	cbz	r0, 900143b2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001439c:	8026      	strh	r6, [r4, #0]
9001439e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900143a2:	8063      	strh	r3, [r4, #2]
900143a4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
900143a8:	80a3      	strh	r3, [r4, #4]
900143aa:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900143ae:	80e3      	strh	r3, [r4, #6]
900143b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900143b2:	f9b4 1000 	ldrsh.w	r1, [r4]
900143b6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900143ba:	42b1      	cmp	r1, r6
900143bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
900143c0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
900143c4:	460f      	mov	r7, r1
900143c6:	88ed      	ldrh	r5, [r5, #6]
900143c8:	bfa8      	it	ge
900143ca:	4637      	movge	r7, r6
900143cc:	4293      	cmp	r3, r2
900143ce:	4618      	mov	r0, r3
900143d0:	4466      	add	r6, ip
900143d2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900143d6:	bfa8      	it	ge
900143d8:	4610      	movge	r0, r2
900143da:	442a      	add	r2, r5
900143dc:	88e5      	ldrh	r5, [r4, #6]
900143de:	4461      	add	r1, ip
900143e0:	b236      	sxth	r6, r6
900143e2:	8027      	strh	r7, [r4, #0]
900143e4:	442b      	add	r3, r5
900143e6:	b209      	sxth	r1, r1
900143e8:	b212      	sxth	r2, r2
900143ea:	8060      	strh	r0, [r4, #2]
900143ec:	b21b      	sxth	r3, r3
900143ee:	428e      	cmp	r6, r1
900143f0:	bfac      	ite	ge
900143f2:	ebc7 0106 	rsbge	r1, r7, r6
900143f6:	ebc7 0101 	rsblt	r1, r7, r1
900143fa:	429a      	cmp	r2, r3
900143fc:	bfac      	ite	ge
900143fe:	ebc0 0202 	rsbge	r2, r0, r2
90014402:	ebc0 0203 	rsblt	r2, r0, r3
90014406:	80a1      	strh	r1, [r4, #4]
90014408:	80e2      	strh	r2, [r4, #6]
9001440a:	e7d1      	b.n	900143b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

9001440c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
9001440c:	6800      	ldr	r0, [r0, #0]
9001440e:	2800      	cmp	r0, #0
90014410:	bfb9      	ittee	lt
90014412:	2320      	movlt	r3, #32
90014414:	fb90 f0f3 	sdivlt	r0, r0, r3
90014418:	301f      	addge	r0, #31
9001441a:	1140      	asrge	r0, r0, #5
9001441c:	4770      	bx	lr

9001441e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
9001441e:	b510      	push	{r4, lr}
90014420:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
90014424:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
90014428:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
9001442c:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
90014430:	139b      	asrs	r3, r3, #14
90014432:	13a4      	asrs	r4, r4, #14
90014434:	429c      	cmp	r4, r3
90014436:	bfb8      	it	lt
90014438:	461c      	movlt	r4, r3
9001443a:	2c01      	cmp	r4, #1
9001443c:	dd07      	ble.n	9001444e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
9001443e:	fb91 f1f4 	sdiv	r1, r1, r4
90014442:	fb90 f0f4 	sdiv	r0, r0, r4
90014446:	f7ff ffea 	bl	9001441e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
9001444a:	4360      	muls	r0, r4
9001444c:	bd10      	pop	{r4, pc}
9001444e:	4340      	muls	r0, r0
90014450:	fb01 0101 	mla	r1, r1, r1, r0
90014454:	2000      	movs	r0, #0
90014456:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9001445a:	bfb4      	ite	lt
9001445c:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
90014460:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
90014464:	18c2      	adds	r2, r0, r3
90014466:	428a      	cmp	r2, r1
90014468:	bf9c      	itt	ls
9001446a:	1898      	addls	r0, r3, r2
9001446c:	1a89      	subls	r1, r1, r2
9001446e:	089b      	lsrs	r3, r3, #2
90014470:	ea4f 0050 	mov.w	r0, r0, lsr #1
90014474:	d1f6      	bne.n	90014464 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
90014476:	e7e9      	b.n	9001444c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

90014478 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
90014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001447a:	9906      	ldr	r1, [sp, #24]
9001447c:	4606      	mov	r6, r0
9001447e:	461c      	mov	r4, r3
90014480:	2020      	movs	r0, #32
90014482:	4291      	cmp	r1, r2
90014484:	bfbc      	itt	lt
90014486:	9206      	strlt	r2, [sp, #24]
90014488:	460a      	movlt	r2, r1
9001448a:	9907      	ldr	r1, [sp, #28]
9001448c:	428b      	cmp	r3, r1
9001448e:	bfc4      	itt	gt
90014490:	460c      	movgt	r4, r1
90014492:	9307      	strgt	r3, [sp, #28]
90014494:	fb92 f5f0 	sdiv	r5, r2, r0
90014498:	fb94 f4f0 	sdiv	r4, r4, r0
9001449c:	a806      	add	r0, sp, #24
9001449e:	f7ff ffb5 	bl	9001440c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
900144a2:	4607      	mov	r7, r0
900144a4:	a807      	add	r0, sp, #28
900144a6:	f7ff ffb1 	bl	9001440c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
900144aa:	1b7a      	subs	r2, r7, r5
900144ac:	1b00      	subs	r0, r0, r4
900144ae:	8035      	strh	r5, [r6, #0]
900144b0:	8074      	strh	r4, [r6, #2]
900144b2:	80f0      	strh	r0, [r6, #6]
900144b4:	4630      	mov	r0, r6
900144b6:	80b2      	strh	r2, [r6, #4]
900144b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900144ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
900144ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
900144bc:	9c08      	ldr	r4, [sp, #32]
900144be:	2602      	movs	r6, #2
900144c0:	4605      	mov	r5, r0
900144c2:	3401      	adds	r4, #1
900144c4:	fb94 f4f6 	sdiv	r4, r4, r6
900144c8:	18a6      	adds	r6, r4, r2
900144ca:	191f      	adds	r7, r3, r4
900144cc:	1b12      	subs	r2, r2, r4
900144ce:	1b1b      	subs	r3, r3, r4
900144d0:	e9cd 6700 	strd	r6, r7, [sp]
900144d4:	f7ff ffd0 	bl	90014478 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
900144d8:	4628      	mov	r0, r5
900144da:	b003      	add	sp, #12
900144dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

900144de <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
900144de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900144e2:	6943      	ldr	r3, [r0, #20]
900144e4:	b087      	sub	sp, #28
900144e6:	4606      	mov	r6, r0
900144e8:	460d      	mov	r5, r1
900144ea:	2b00      	cmp	r3, #0
900144ec:	d072      	beq.n	900145d4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
900144ee:	695c      	ldr	r4, [r3, #20]
900144f0:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
900144f4:	6823      	ldr	r3, [r4, #0]
900144f6:	4620      	mov	r0, r4
900144f8:	017f      	lsls	r7, r7, #5
900144fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900144fe:	4798      	blx	r3
90014500:	6823      	ldr	r3, [r4, #0]
90014502:	4680      	mov	r8, r0
90014504:	4629      	mov	r1, r5
90014506:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001450a:	4620      	mov	r0, r4
9001450c:	4798      	blx	r3
9001450e:	9700      	str	r7, [sp, #0]
90014510:	4603      	mov	r3, r0
90014512:	4642      	mov	r2, r8
90014514:	4631      	mov	r1, r6
90014516:	a802      	add	r0, sp, #8
90014518:	f7ff ffcf 	bl	900144ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
9001451c:	2d00      	cmp	r5, #0
9001451e:	dd1b      	ble.n	90014558 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
90014520:	f105 38ff 	add.w	r8, r5, #4294967295
90014524:	6823      	ldr	r3, [r4, #0]
90014526:	4620      	mov	r0, r4
90014528:	fa0f f888 	sxth.w	r8, r8
9001452c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014530:	4641      	mov	r1, r8
90014532:	4798      	blx	r3
90014534:	6823      	ldr	r3, [r4, #0]
90014536:	4681      	mov	r9, r0
90014538:	4641      	mov	r1, r8
9001453a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001453e:	4620      	mov	r0, r4
90014540:	4798      	blx	r3
90014542:	4631      	mov	r1, r6
90014544:	4603      	mov	r3, r0
90014546:	9700      	str	r7, [sp, #0]
90014548:	a804      	add	r0, sp, #16
9001454a:	464a      	mov	r2, r9
9001454c:	f7ff ffb5 	bl	900144ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014550:	a904      	add	r1, sp, #16
90014552:	a802      	add	r0, sp, #8
90014554:	f7ff ff15 	bl	90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014558:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
9001455c:	3b01      	subs	r3, #1
9001455e:	429d      	cmp	r5, r3
90014560:	da19      	bge.n	90014596 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
90014562:	3501      	adds	r5, #1
90014564:	6823      	ldr	r3, [r4, #0]
90014566:	4620      	mov	r0, r4
90014568:	b22d      	sxth	r5, r5
9001456a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
9001456e:	4629      	mov	r1, r5
90014570:	4798      	blx	r3
90014572:	6823      	ldr	r3, [r4, #0]
90014574:	4680      	mov	r8, r0
90014576:	4629      	mov	r1, r5
90014578:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001457c:	4620      	mov	r0, r4
9001457e:	4798      	blx	r3
90014580:	4631      	mov	r1, r6
90014582:	4603      	mov	r3, r0
90014584:	9700      	str	r7, [sp, #0]
90014586:	a804      	add	r0, sp, #16
90014588:	4642      	mov	r2, r8
9001458a:	f7ff ff96 	bl	900144ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
9001458e:	a904      	add	r1, sp, #16
90014590:	a802      	add	r0, sp, #8
90014592:	f7ff fef6 	bl	90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014596:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
9001459a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
9001459e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
900145a2:	18ca      	adds	r2, r1, r3
900145a4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
900145a8:	f8ad 1012 	strh.w	r1, [sp, #18]
900145ac:	a904      	add	r1, sp, #16
900145ae:	1a9b      	subs	r3, r3, r2
900145b0:	2200      	movs	r2, #0
900145b2:	f8ad 0014 	strh.w	r0, [sp, #20]
900145b6:	a802      	add	r0, sp, #8
900145b8:	f8ad 2010 	strh.w	r2, [sp, #16]
900145bc:	f8ad 3016 	strh.w	r3, [sp, #22]
900145c0:	f7fe f978 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
900145c4:	6833      	ldr	r3, [r6, #0]
900145c6:	a902      	add	r1, sp, #8
900145c8:	4630      	mov	r0, r6
900145ca:	691b      	ldr	r3, [r3, #16]
900145cc:	4798      	blx	r3
900145ce:	b007      	add	sp, #28
900145d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900145d4:	681b      	ldr	r3, [r3, #0]
900145d6:	deff      	udf	#255	; 0xff

900145d8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
900145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900145dc:	b08b      	sub	sp, #44	; 0x2c
900145de:	461e      	mov	r6, r3
900145e0:	460f      	mov	r7, r1
900145e2:	4615      	mov	r5, r2
900145e4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
900145e8:	429e      	cmp	r6, r3
900145ea:	9304      	str	r3, [sp, #16]
900145ec:	d074      	beq.n	900146d8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
900145ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
900145f2:	4631      	mov	r1, r6
900145f4:	4610      	mov	r0, r2
900145f6:	4634      	mov	r4, r6
900145f8:	015b      	lsls	r3, r3, #5
900145fa:	9303      	str	r3, [sp, #12]
900145fc:	6813      	ldr	r3, [r2, #0]
900145fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014602:	4798      	blx	r3
90014604:	ab0a      	add	r3, sp, #40	; 0x28
90014606:	f843 0d10 	str.w	r0, [r3, #-16]!
9001460a:	4618      	mov	r0, r3
9001460c:	f7ff fc60 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014610:	682b      	ldr	r3, [r5, #0]
90014612:	4631      	mov	r1, r6
90014614:	ea4f 1840 	mov.w	r8, r0, lsl #5
90014618:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001461c:	4628      	mov	r0, r5
9001461e:	4798      	blx	r3
90014620:	ab0a      	add	r3, sp, #40	; 0x28
90014622:	f843 0d0c 	str.w	r0, [r3, #-12]!
90014626:	4618      	mov	r0, r3
90014628:	f7ff fc52 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
9001462c:	4641      	mov	r1, r8
9001462e:	ea4f 1940 	mov.w	r9, r0, lsl #5
90014632:	4638      	mov	r0, r7
90014634:	464a      	mov	r2, r9
90014636:	f012 fc9d 	bl	90026f74 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
9001463a:	2301      	movs	r3, #1
9001463c:	9300      	str	r3, [sp, #0]
9001463e:	4628      	mov	r0, r5
90014640:	9b00      	ldr	r3, [sp, #0]
90014642:	441c      	add	r4, r3
90014644:	682b      	ldr	r3, [r5, #0]
90014646:	b224      	sxth	r4, r4
90014648:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
9001464c:	4621      	mov	r1, r4
9001464e:	4798      	blx	r3
90014650:	9008      	str	r0, [sp, #32]
90014652:	a808      	add	r0, sp, #32
90014654:	f7ff fc3c 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014658:	4621      	mov	r1, r4
9001465a:	0143      	lsls	r3, r0, #5
9001465c:	4628      	mov	r0, r5
9001465e:	9301      	str	r3, [sp, #4]
90014660:	682b      	ldr	r3, [r5, #0]
90014662:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014666:	4798      	blx	r3
90014668:	9009      	str	r0, [sp, #36]	; 0x24
9001466a:	a809      	add	r0, sp, #36	; 0x24
9001466c:	f7ff fc30 	bl	90013ed0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014670:	0143      	lsls	r3, r0, #5
90014672:	9302      	str	r3, [sp, #8]
90014674:	9b01      	ldr	r3, [sp, #4]
90014676:	eba3 0b08 	sub.w	fp, r3, r8
9001467a:	9b02      	ldr	r3, [sp, #8]
9001467c:	eba3 0a09 	sub.w	sl, r3, r9
90014680:	4658      	mov	r0, fp
90014682:	4651      	mov	r1, sl
90014684:	f7ff fecb 	bl	9001441e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
90014688:	b320      	cbz	r0, 900146d4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
9001468a:	4602      	mov	r2, r0
9001468c:	4651      	mov	r1, sl
9001468e:	9005      	str	r0, [sp, #20]
90014690:	9803      	ldr	r0, [sp, #12]
90014692:	f004 fd09 	bl	900190a8 <_ZN8touchgfx6muldivElll>
90014696:	2302      	movs	r3, #2
90014698:	4659      	mov	r1, fp
9001469a:	fb90 faf3 	sdiv	sl, r0, r3
9001469e:	9b05      	ldr	r3, [sp, #20]
900146a0:	9803      	ldr	r0, [sp, #12]
900146a2:	461a      	mov	r2, r3
900146a4:	f004 fd00 	bl	900190a8 <_ZN8touchgfx6muldivElll>
900146a8:	2302      	movs	r3, #2
900146aa:	eba8 010a 	sub.w	r1, r8, sl
900146ae:	fb90 fbf3 	sdiv	fp, r0, r3
900146b2:	683b      	ldr	r3, [r7, #0]
900146b4:	eb0b 0209 	add.w	r2, fp, r9
900146b8:	4638      	mov	r0, r7
900146ba:	689b      	ldr	r3, [r3, #8]
900146bc:	4798      	blx	r3
900146be:	683b      	ldr	r3, [r7, #0]
900146c0:	9a02      	ldr	r2, [sp, #8]
900146c2:	4638      	mov	r0, r7
900146c4:	9901      	ldr	r1, [sp, #4]
900146c6:	689b      	ldr	r3, [r3, #8]
900146c8:	445a      	add	r2, fp
900146ca:	eba1 010a 	sub.w	r1, r1, sl
900146ce:	4798      	blx	r3
900146d0:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
900146d4:	42a6      	cmp	r6, r4
900146d6:	db02      	blt.n	900146de <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
900146d8:	b00b      	add	sp, #44	; 0x2c
900146da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900146de:	9b00      	ldr	r3, [sp, #0]
900146e0:	9a04      	ldr	r2, [sp, #16]
900146e2:	42a2      	cmp	r2, r4
900146e4:	bf08      	it	eq
900146e6:	f04f 33ff 	moveq.w	r3, #4294967295
900146ea:	e7a7      	b.n	9001463c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

900146ec <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
900146ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900146f0:	6943      	ldr	r3, [r0, #20]
900146f2:	b0a2      	sub	sp, #136	; 0x88
900146f4:	4606      	mov	r6, r0
900146f6:	460f      	mov	r7, r1
900146f8:	2b00      	cmp	r3, #0
900146fa:	d06c      	beq.n	900147d6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
900146fc:	695c      	ldr	r4, [r3, #20]
900146fe:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014702:	2b01      	cmp	r3, #1
90014704:	dc04      	bgt.n	90014710 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
90014706:	2401      	movs	r4, #1
90014708:	4620      	mov	r0, r4
9001470a:	b022      	add	sp, #136	; 0x88
9001470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014710:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014714:	ad22      	add	r5, sp, #136	; 0x88
90014716:	011b      	lsls	r3, r3, #4
90014718:	f845 3d70 	str.w	r3, [r5, #-112]!
9001471c:	4628      	mov	r0, r5
9001471e:	f7ff fe75 	bl	9001440c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014722:	8839      	ldrh	r1, [r7, #0]
90014724:	88ba      	ldrh	r2, [r7, #4]
90014726:	b280      	uxth	r0, r0
90014728:	6823      	ldr	r3, [r4, #0]
9001472a:	440a      	add	r2, r1
9001472c:	1a09      	subs	r1, r1, r0
9001472e:	4402      	add	r2, r0
90014730:	f10d 000e 	add.w	r0, sp, #14
90014734:	b209      	sxth	r1, r1
90014736:	9000      	str	r0, [sp, #0]
90014738:	b212      	sxth	r2, r2
9001473a:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
9001473e:	4620      	mov	r0, r4
90014740:	ab03      	add	r3, sp, #12
90014742:	47c0      	blx	r8
90014744:	2800      	cmp	r0, #0
90014746:	d0de      	beq.n	90014706 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
90014748:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
9001474c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
90014750:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014754:	18ca      	adds	r2, r1, r3
90014756:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
9001475a:	f8ad 1012 	strh.w	r1, [sp, #18]
9001475e:	4639      	mov	r1, r7
90014760:	1a9b      	subs	r3, r3, r2
90014762:	2200      	movs	r2, #0
90014764:	f8ad 0014 	strh.w	r0, [sp, #20]
90014768:	a804      	add	r0, sp, #16
9001476a:	f8ad 3016 	strh.w	r3, [sp, #22]
9001476e:	f8ad 2010 	strh.w	r2, [sp, #16]
90014772:	f7fe f89f 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90014776:	aa04      	add	r2, sp, #16
90014778:	4631      	mov	r1, r6
9001477a:	4628      	mov	r0, r5
9001477c:	f012 fa80 	bl	90026c80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
90014780:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
90014784:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90014788:	2f00      	cmp	r7, #0
9001478a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
9001478e:	dd03      	ble.n	90014798 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014790:	42bb      	cmp	r3, r7
90014792:	da01      	bge.n	90014798 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014794:	42ba      	cmp	r2, r7
90014796:	da11      	bge.n	900147bc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
90014798:	9200      	str	r2, [sp, #0]
9001479a:	4622      	mov	r2, r4
9001479c:	4629      	mov	r1, r5
9001479e:	4630      	mov	r0, r6
900147a0:	f7ff ff1a 	bl	900145d8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
900147a4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
900147a8:	4628      	mov	r0, r5
900147aa:	f012 fb25 	bl	90026df8 <_ZN8touchgfx6Canvas6renderEh>
900147ae:	4b0b      	ldr	r3, [pc, #44]	; (900147dc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
900147b0:	4604      	mov	r4, r0
900147b2:	a80e      	add	r0, sp, #56	; 0x38
900147b4:	9306      	str	r3, [sp, #24]
900147b6:	f000 ff19 	bl	900155ec <_ZN8touchgfx7OutlineD1Ev>
900147ba:	e7a5      	b.n	90014708 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
900147bc:	1e7a      	subs	r2, r7, #1
900147be:	4629      	mov	r1, r5
900147c0:	4630      	mov	r0, r6
900147c2:	b212      	sxth	r2, r2
900147c4:	9200      	str	r2, [sp, #0]
900147c6:	4622      	mov	r2, r4
900147c8:	f7ff ff06 	bl	900145d8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
900147cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900147d0:	9300      	str	r3, [sp, #0]
900147d2:	463b      	mov	r3, r7
900147d4:	e7e1      	b.n	9001479a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
900147d6:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
900147da:	deff      	udf	#255	; 0xff
900147dc:	9002c338 	.word	0x9002c338

900147e0 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
900147e0:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
900147e4:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
900147e8:	4293      	cmp	r3, r2
900147ea:	da01      	bge.n	900147f0 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
900147ec:	4608      	mov	r0, r1
900147ee:	4770      	bx	lr
900147f0:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	; 0x120
900147f4:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
900147f8:	428b      	cmp	r3, r1
900147fa:	bfc7      	ittee	gt
900147fc:	1809      	addgt	r1, r1, r0
900147fe:	1ac8      	subgt	r0, r1, r3
90014800:	1ac0      	suble	r0, r0, r3
90014802:	1a80      	suble	r0, r0, r2
90014804:	bfd8      	it	le
90014806:	1840      	addle	r0, r0, r1
90014808:	4770      	bx	lr

9001480a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
9001480a:	b510      	push	{r4, lr}
9001480c:	4604      	mov	r4, r0
9001480e:	f7ff f9e0 	bl	90013bd2 <_ZN8touchgfx17AbstractDataGraph5clearEv>
90014812:	2300      	movs	r3, #0
90014814:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
90014818:	bd10      	pop	{r4, pc}

9001481a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
9001481a:	b570      	push	{r4, r5, r6, lr}
9001481c:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
90014820:	4604      	mov	r4, r0
90014822:	bb13      	cbnz	r3, 9001486a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014824:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014828:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
9001482c:	429a      	cmp	r2, r3
9001482e:	dc1c      	bgt.n	9001486a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014830:	6803      	ldr	r3, [r0, #0]
90014832:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014836:	4798      	blx	r3
90014838:	6823      	ldr	r3, [r4, #0]
9001483a:	4605      	mov	r5, r0
9001483c:	4620      	mov	r0, r4
9001483e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014842:	4798      	blx	r3
90014844:	4606      	mov	r6, r0
90014846:	2d00      	cmp	r5, #0
90014848:	da05      	bge.n	90014856 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
9001484a:	b229      	sxth	r1, r5
9001484c:	4620      	mov	r0, r4
9001484e:	f7ff fbdb 	bl	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014852:	3501      	adds	r5, #1
90014854:	e7f7      	b.n	90014846 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
90014856:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	; 0x11c
9001485a:	42b5      	cmp	r5, r6
9001485c:	dc05      	bgt.n	9001486a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
9001485e:	b229      	sxth	r1, r5
90014860:	4620      	mov	r0, r4
90014862:	f7ff fbd1 	bl	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014866:	3501      	adds	r5, #1
90014868:	e7f7      	b.n	9001485a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
9001486a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
9001486e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014872:	429a      	cmp	r2, r3
90014874:	db0b      	blt.n	9001488e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
90014876:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
9001487a:	4620      	mov	r0, r4
9001487c:	f7ff fbb4 	bl	90013fe8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014880:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014884:	4620      	mov	r0, r4
90014886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001488a:	f7ff bbbd 	b.w	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
9001488e:	bd70      	pop	{r4, r5, r6, pc}

90014890 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
90014890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014894:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
90014898:	4604      	mov	r4, r0
9001489a:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
9001489e:	4688      	mov	r8, r1
900148a0:	1c6e      	adds	r6, r5, #1
900148a2:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
900148a6:	4629      	mov	r1, r5
900148a8:	b236      	sxth	r6, r6
900148aa:	fb96 f3f2 	sdiv	r3, r6, r2
900148ae:	fb02 6313 	mls	r3, r2, r3, r6
900148b2:	f8a0 314c 	strh.w	r3, [r0, #332]	; 0x14c
900148b6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
900148ba:	42ab      	cmp	r3, r5
900148bc:	6803      	ldr	r3, [r0, #0]
900148be:	bf08      	it	eq
900148c0:	f8a0 611e 	strheq.w	r6, [r0, #286]	; 0x11e
900148c4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
900148c8:	4798      	blx	r3
900148ca:	4629      	mov	r1, r5
900148cc:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
900148d0:	4620      	mov	r0, r4
900148d2:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
900148d6:	f7ff fb87 	bl	90013fe8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
900148da:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
900148de:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
900148e2:	429a      	cmp	r2, r3
900148e4:	db28      	blt.n	90014938 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
900148e6:	4629      	mov	r1, r5
900148e8:	4620      	mov	r0, r4
900148ea:	f7ff fb8d 	bl	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
900148ee:	bb1d      	cbnz	r5, 90014938 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
900148f0:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
900148f4:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
900148f8:	429a      	cmp	r2, r3
900148fa:	db1d      	blt.n	90014938 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
900148fc:	6823      	ldr	r3, [r4, #0]
900148fe:	4620      	mov	r0, r4
90014900:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014904:	4798      	blx	r3
90014906:	6823      	ldr	r3, [r4, #0]
90014908:	4606      	mov	r6, r0
9001490a:	4620      	mov	r0, r4
9001490c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014910:	4798      	blx	r3
90014912:	4607      	mov	r7, r0
90014914:	2e00      	cmp	r6, #0
90014916:	da05      	bge.n	90014924 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
90014918:	b231      	sxth	r1, r6
9001491a:	4620      	mov	r0, r4
9001491c:	f7ff fb74 	bl	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014920:	3601      	adds	r6, #1
90014922:	e7f7      	b.n	90014914 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
90014924:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	; 0x11c
90014928:	42be      	cmp	r6, r7
9001492a:	dc05      	bgt.n	90014938 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
9001492c:	b231      	sxth	r1, r6
9001492e:	4620      	mov	r0, r4
90014930:	f7ff fb6a 	bl	90014008 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014934:	3601      	adds	r6, #1
90014936:	e7f7      	b.n	90014928 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
90014938:	4628      	mov	r0, r5
9001493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001493e <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
9001493e:	b508      	push	{r3, lr}
90014940:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014944:	b10b      	cbz	r3, 9001494a <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
90014946:	f7ed fcf9 	bl	9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>
9001494a:	bd08      	pop	{r3, pc}

9001494c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
9001494c:	6803      	ldr	r3, [r0, #0]
9001494e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
90014952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90014954:	4718      	bx	r3

90014956 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
90014956:	4770      	bx	lr

90014958 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
90014958:	b510      	push	{r4, lr}
9001495a:	4604      	mov	r4, r0
9001495c:	212c      	movs	r1, #44	; 0x2c
9001495e:	f012 fbca 	bl	900270f6 <_ZdlPvj>
90014962:	4620      	mov	r0, r4
90014964:	bd10      	pop	{r4, pc}

90014966 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
90014966:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
9001496a:	2bff      	cmp	r3, #255	; 0xff
9001496c:	b510      	push	{r4, lr}
9001496e:	d104      	bne.n	9001497a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
90014970:	8cca      	ldrh	r2, [r1, #38]	; 0x26
90014972:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014976:	429a      	cmp	r2, r3
90014978:	d105      	bne.n	90014986 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
9001497a:	2300      	movs	r3, #0
9001497c:	8003      	strh	r3, [r0, #0]
9001497e:	8043      	strh	r3, [r0, #2]
90014980:	8083      	strh	r3, [r0, #4]
90014982:	80c3      	strh	r3, [r0, #6]
90014984:	bd10      	pop	{r4, pc}
90014986:	2300      	movs	r3, #0
90014988:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
9001498c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
90014990:	8003      	strh	r3, [r0, #0]
90014992:	8043      	strh	r3, [r0, #2]
90014994:	8084      	strh	r4, [r0, #4]
90014996:	80c2      	strh	r2, [r0, #6]
90014998:	e7f4      	b.n	90014984 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

9001499a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
9001499a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001499e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
900149a2:	b087      	sub	sp, #28
900149a4:	4604      	mov	r4, r0
900149a6:	4689      	mov	r9, r1
900149a8:	b363      	cbz	r3, 90014a04 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
900149aa:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
900149ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
900149b0:	429a      	cmp	r2, r3
900149b2:	d027      	beq.n	90014a04 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
900149b4:	ad06      	add	r5, sp, #24
900149b6:	2700      	movs	r7, #0
900149b8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
900149bc:	4628      	mov	r0, r5
900149be:	f006 fa97 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
900149c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
900149c6:	a904      	add	r1, sp, #16
900149c8:	f8ad 0014 	strh.w	r0, [sp, #20]
900149cc:	f8ad 3016 	strh.w	r3, [sp, #22]
900149d0:	4620      	mov	r0, r4
900149d2:	6823      	ldr	r3, [r4, #0]
900149d4:	9704      	str	r7, [sp, #16]
900149d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900149d8:	4798      	blx	r3
900149da:	f7fe fa49 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
900149de:	6803      	ldr	r3, [r0, #0]
900149e0:	4606      	mov	r6, r0
900149e2:	4628      	mov	r0, r5
900149e4:	f8d3 800c 	ldr.w	r8, [r3, #12]
900149e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
900149ea:	f8ad 300c 	strh.w	r3, [sp, #12]
900149ee:	f006 fb6b 	bl	9001b0c8 <_ZNK8touchgfx6Bitmap7getDataEv>
900149f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900149f6:	4601      	mov	r1, r0
900149f8:	9701      	str	r7, [sp, #4]
900149fa:	aa04      	add	r2, sp, #16
900149fc:	9300      	str	r3, [sp, #0]
900149fe:	4630      	mov	r0, r6
90014a00:	464b      	mov	r3, r9
90014a02:	47c0      	blx	r8
90014a04:	b007      	add	sp, #28
90014a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

90014a0a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
90014a0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90014a0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90014a10:	460d      	mov	r5, r1
90014a12:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90014a16:	2100      	movs	r1, #0
90014a18:	f8ad 3006 	strh.w	r3, [sp, #6]
90014a1c:	4604      	mov	r4, r0
90014a1e:	6803      	ldr	r3, [r0, #0]
90014a20:	f8ad 2004 	strh.w	r2, [sp, #4]
90014a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014a26:	9100      	str	r1, [sp, #0]
90014a28:	4669      	mov	r1, sp
90014a2a:	4798      	blx	r3
90014a2c:	4621      	mov	r1, r4
90014a2e:	a802      	add	r0, sp, #8
90014a30:	f004 fa0e 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014a34:	f7fe fa1c 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90014a38:	6803      	ldr	r3, [r0, #0]
90014a3a:	aa02      	add	r2, sp, #8
90014a3c:	4669      	mov	r1, sp
90014a3e:	695e      	ldr	r6, [r3, #20]
90014a40:	462b      	mov	r3, r5
90014a42:	47b0      	blx	r6
90014a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014a48:	2800      	cmp	r0, #0
90014a4a:	bf08      	it	eq
90014a4c:	461d      	moveq	r5, r3
90014a4e:	84e5      	strh	r5, [r4, #38]	; 0x26
90014a50:	b004      	add	sp, #16
90014a52:	bd70      	pop	{r4, r5, r6, pc}

90014a54 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
90014a54:	2200      	movs	r2, #0
90014a56:	8082      	strh	r2, [r0, #4]
90014a58:	80c2      	strh	r2, [r0, #6]
90014a5a:	8102      	strh	r2, [r0, #8]
90014a5c:	8142      	strh	r2, [r0, #10]
90014a5e:	8182      	strh	r2, [r0, #12]
90014a60:	81c2      	strh	r2, [r0, #14]
90014a62:	8202      	strh	r2, [r0, #16]
90014a64:	8242      	strh	r2, [r0, #18]
90014a66:	61c2      	str	r2, [r0, #28]
90014a68:	8402      	strh	r2, [r0, #32]
90014a6a:	8442      	strh	r2, [r0, #34]	; 0x22
90014a6c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90014a70:	e9c0 2205 	strd	r2, r2, [r0, #20]
90014a74:	2201      	movs	r2, #1
90014a76:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
90014a7a:	4a04      	ldr	r2, [pc, #16]	; (90014a8c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
90014a7c:	6002      	str	r2, [r0, #0]
90014a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90014a82:	84c2      	strh	r2, [r0, #38]	; 0x26
90014a84:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
90014a88:	4770      	bx	lr
90014a8a:	bf00      	nop
90014a8c:	9002bd34 	.word	0x9002bd34

90014a90 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
90014a90:	880b      	ldrh	r3, [r1, #0]
90014a92:	8643      	strh	r3, [r0, #50]	; 0x32
90014a94:	4770      	bx	lr

90014a96 <_ZN8touchgfx13AnimatedImageD1Ev>:
90014a96:	4770      	bx	lr

90014a98 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
90014a98:	880b      	ldrh	r3, [r1, #0]
90014a9a:	8603      	strh	r3, [r0, #48]	; 0x30
90014a9c:	f000 bd33 	b.w	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

90014aa0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
90014aa0:	b513      	push	{r0, r1, r4, lr}
90014aa2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014aa6:	4604      	mov	r4, r0
90014aa8:	b143      	cbz	r3, 90014abc <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
90014aaa:	f003 f8a7 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90014aae:	4621      	mov	r1, r4
90014ab0:	3004      	adds	r0, #4
90014ab2:	f003 f8c8 	bl	90017c46 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014ab6:	2300      	movs	r3, #0
90014ab8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014abc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90014ac0:	b163      	cbz	r3, 90014adc <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
90014ac2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90014ac4:	a901      	add	r1, sp, #4
90014ac6:	4620      	mov	r0, r4
90014ac8:	f8ad 3004 	strh.w	r3, [sp, #4]
90014acc:	f000 fd1b 	bl	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014ad0:	6823      	ldr	r3, [r4, #0]
90014ad2:	4620      	mov	r0, r4
90014ad4:	695b      	ldr	r3, [r3, #20]
90014ad6:	4798      	blx	r3
90014ad8:	b002      	add	sp, #8
90014ada:	bd10      	pop	{r4, pc}
90014adc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90014ade:	e7f1      	b.n	90014ac4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

90014ae0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
90014ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90014ae2:	f64f 77ff 	movw	r7, #65535	; 0xffff
90014ae6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
90014ae8:	4604      	mov	r4, r0
90014aea:	42bd      	cmp	r5, r7
90014aec:	d01a      	beq.n	90014b24 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014aee:	8e46      	ldrh	r6, [r0, #50]	; 0x32
90014af0:	42be      	cmp	r6, r7
90014af2:	d017      	beq.n	90014b24 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014af4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
90014af8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
90014afc:	b1a1      	cbz	r1, 90014b28 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
90014afe:	b142      	cbz	r2, 90014b12 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
90014b00:	a902      	add	r1, sp, #8
90014b02:	f821 6d04 	strh.w	r6, [r1, #-4]!
90014b06:	f000 fcfe 	bl	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014b0a:	6823      	ldr	r3, [r4, #0]
90014b0c:	4620      	mov	r0, r4
90014b0e:	695b      	ldr	r3, [r3, #20]
90014b10:	4798      	blx	r3
90014b12:	f003 f873 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90014b16:	4621      	mov	r1, r4
90014b18:	3004      	adds	r0, #4
90014b1a:	f003 f93d 	bl	90017d98 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
90014b1e:	2301      	movs	r3, #1
90014b20:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014b24:	b003      	add	sp, #12
90014b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
90014b28:	2a00      	cmp	r2, #0
90014b2a:	d0f2      	beq.n	90014b12 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
90014b2c:	a902      	add	r1, sp, #8
90014b2e:	f821 5d04 	strh.w	r5, [r1, #-4]!
90014b32:	e7e8      	b.n	90014b06 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

90014b34 <_ZN8touchgfx13AnimatedImageD0Ev>:
90014b34:	b510      	push	{r4, lr}
90014b36:	4604      	mov	r4, r0
90014b38:	213c      	movs	r1, #60	; 0x3c
90014b3a:	f012 fadc 	bl	900270f6 <_ZdlPvj>
90014b3e:	4620      	mov	r0, r4
90014b40:	bd10      	pop	{r4, pc}

90014b42 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
90014b42:	b510      	push	{r4, lr}
90014b44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014b48:	4604      	mov	r4, r0
90014b4a:	b14b      	cbz	r3, 90014b60 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
90014b4c:	f003 f856 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90014b50:	4621      	mov	r1, r4
90014b52:	3004      	adds	r0, #4
90014b54:	f003 f877 	bl	90017c46 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014b58:	2300      	movs	r3, #0
90014b5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014b5e:	bd10      	pop	{r4, pc}
90014b60:	f003 f84c 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90014b64:	4621      	mov	r1, r4
90014b66:	3004      	adds	r0, #4
90014b68:	f003 f916 	bl	90017d98 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
90014b6c:	2301      	movs	r3, #1
90014b6e:	e7f4      	b.n	90014b5a <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

90014b70 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
90014b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014b72:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014b76:	4604      	mov	r4, r0
90014b78:	2b00      	cmp	r3, #0
90014b7a:	d042      	beq.n	90014c02 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014b7c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90014b80:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
90014b84:	3301      	adds	r3, #1
90014b86:	b2db      	uxtb	r3, r3
90014b88:	429a      	cmp	r2, r3
90014b8a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014b8e:	d138      	bne.n	90014c02 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014b90:	2300      	movs	r3, #0
90014b92:	8e41      	ldrh	r1, [r0, #50]	; 0x32
90014b94:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
90014b98:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014b9c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
90014b9e:	4299      	cmp	r1, r3
90014ba0:	d100      	bne.n	90014ba4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
90014ba2:	b122      	cbz	r2, 90014bae <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
90014ba4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
90014ba6:	4299      	cmp	r1, r3
90014ba8:	d12f      	bne.n	90014c0a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
90014baa:	2a00      	cmp	r2, #0
90014bac:	d034      	beq.n	90014c18 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
90014bae:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
90014bb2:	b93d      	cbnz	r5, 90014bc4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
90014bb4:	f003 f822 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90014bb8:	4621      	mov	r1, r4
90014bba:	3004      	adds	r0, #4
90014bbc:	f003 f843 	bl	90017c46 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014bc0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
90014bc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90014bc6:	b140      	cbz	r0, 90014bda <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90014bc8:	6803      	ldr	r3, [r0, #0]
90014bca:	68db      	ldr	r3, [r3, #12]
90014bcc:	4798      	blx	r3
90014bce:	b120      	cbz	r0, 90014bda <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90014bd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90014bd2:	4621      	mov	r1, r4
90014bd4:	6803      	ldr	r3, [r0, #0]
90014bd6:	689b      	ldr	r3, [r3, #8]
90014bd8:	4798      	blx	r3
90014bda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014bde:	b183      	cbz	r3, 90014c02 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014be0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90014be4:	b16b      	cbz	r3, 90014c02 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014be6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90014bea:	b163      	cbz	r3, 90014c06 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
90014bec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90014bee:	a901      	add	r1, sp, #4
90014bf0:	f8ad 3004 	strh.w	r3, [sp, #4]
90014bf4:	4620      	mov	r0, r4
90014bf6:	f000 fc86 	bl	90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014bfa:	6823      	ldr	r3, [r4, #0]
90014bfc:	4620      	mov	r0, r4
90014bfe:	695b      	ldr	r3, [r3, #20]
90014c00:	4798      	blx	r3
90014c02:	b003      	add	sp, #12
90014c04:	bd30      	pop	{r4, r5, pc}
90014c06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90014c08:	e7f1      	b.n	90014bee <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
90014c0a:	b12a      	cbz	r2, 90014c18 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
90014c0c:	3b01      	subs	r3, #1
90014c0e:	b29b      	uxth	r3, r3
90014c10:	a902      	add	r1, sp, #8
90014c12:	f821 3d04 	strh.w	r3, [r1, #-4]!
90014c16:	e7ed      	b.n	90014bf4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
90014c18:	3301      	adds	r3, #1
90014c1a:	e7f8      	b.n	90014c0e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

90014c1c <_ZNK8touchgfx5Image17invalidateContentEv>:
90014c1c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
90014c20:	b12a      	cbz	r2, 90014c2e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90014c22:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90014c26:	b112      	cbz	r2, 90014c2e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90014c28:	6803      	ldr	r3, [r0, #0]
90014c2a:	695b      	ldr	r3, [r3, #20]
90014c2c:	4718      	bx	r3
90014c2e:	4770      	bx	lr

90014c30 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
90014c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
90014c32:	ac02      	add	r4, sp, #8
90014c34:	6803      	ldr	r3, [r0, #0]
90014c36:	4605      	mov	r5, r0
90014c38:	4616      	mov	r6, r2
90014c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90014c3c:	f824 1d04 	strh.w	r1, [r4, #-4]!
90014c40:	4621      	mov	r1, r4
90014c42:	4798      	blx	r3
90014c44:	682b      	ldr	r3, [r5, #0]
90014c46:	4621      	mov	r1, r4
90014c48:	4628      	mov	r0, r5
90014c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014c4c:	f8ad 6004 	strh.w	r6, [sp, #4]
90014c50:	4798      	blx	r3
90014c52:	b002      	add	sp, #8
90014c54:	bd70      	pop	{r4, r5, r6, pc}

90014c56 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
90014c56:	2300      	movs	r3, #0
90014c58:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
90014c5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014c60:	4770      	bx	lr

90014c62 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90014c62:	2000      	movs	r0, #0
90014c64:	4770      	bx	lr
	...

90014c68 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90014c68:	4b07      	ldr	r3, [pc, #28]	; (90014c88 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90014c6a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90014c6c:	881b      	ldrh	r3, [r3, #0]
90014c6e:	4293      	cmp	r3, r2
90014c70:	bf81      	itttt	hi
90014c72:	4b06      	ldrhi	r3, [pc, #24]	; (90014c8c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90014c74:	681b      	ldrhi	r3, [r3, #0]
90014c76:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90014c7a:	7858      	ldrbhi	r0, [r3, #1]
90014c7c:	bf8c      	ite	hi
90014c7e:	f000 0003 	andhi.w	r0, r0, #3
90014c82:	2000      	movls	r0, #0
90014c84:	4770      	bx	lr
90014c86:	bf00      	nop
90014c88:	240281f0 	.word	0x240281f0
90014c8c:	240281ec 	.word	0x240281ec

90014c90 <_ZN8touchgfx8TextAreaD1Ev>:
90014c90:	4770      	bx	lr
	...

90014c94 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90014c94:	4b11      	ldr	r3, [pc, #68]	; (90014cdc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90014c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014c9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90014c9c:	4604      	mov	r4, r0
90014c9e:	881b      	ldrh	r3, [r3, #0]
90014ca0:	428b      	cmp	r3, r1
90014ca2:	d918      	bls.n	90014cd6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90014ca4:	6803      	ldr	r3, [r0, #0]
90014ca6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90014ca8:	4b0d      	ldr	r3, [pc, #52]	; (90014ce0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90014caa:	6818      	ldr	r0, [r3, #0]
90014cac:	f7f3 f87e 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90014cb0:	6823      	ldr	r3, [r4, #0]
90014cb2:	4606      	mov	r6, r0
90014cb4:	4620      	mov	r0, r4
90014cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014cb8:	4798      	blx	r3
90014cba:	6823      	ldr	r3, [r4, #0]
90014cbc:	4607      	mov	r7, r0
90014cbe:	4620      	mov	r0, r4
90014cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014cc4:	4798      	blx	r3
90014cc6:	463a      	mov	r2, r7
90014cc8:	4603      	mov	r3, r0
90014cca:	4631      	mov	r1, r6
90014ccc:	4620      	mov	r0, r4
90014cce:	46ac      	mov	ip, r5
90014cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014cd4:	4760      	bx	ip
90014cd6:	2000      	movs	r0, #0
90014cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014cdc:	240281f0 	.word	0x240281f0
90014ce0:	240281f8 	.word	0x240281f8

90014ce4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90014ce4:	4b18      	ldr	r3, [pc, #96]	; (90014d48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90014ce6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90014cea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90014cec:	4604      	mov	r4, r0
90014cee:	881b      	ldrh	r3, [r3, #0]
90014cf0:	428b      	cmp	r3, r1
90014cf2:	d926      	bls.n	90014d42 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90014cf4:	4b15      	ldr	r3, [pc, #84]	; (90014d4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90014cf6:	681b      	ldr	r3, [r3, #0]
90014cf8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90014cfc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90014d00:	4b13      	ldr	r3, [pc, #76]	; (90014d50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90014d02:	7855      	ldrb	r5, [r2, #1]
90014d04:	681b      	ldr	r3, [r3, #0]
90014d06:	f3c5 0581 	ubfx	r5, r5, #2, #2
90014d0a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90014d0e:	6833      	ldr	r3, [r6, #0]
90014d10:	69df      	ldr	r7, [r3, #28]
90014d12:	4b10      	ldr	r3, [pc, #64]	; (90014d54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90014d14:	6818      	ldr	r0, [r3, #0]
90014d16:	f7f3 f849 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90014d1a:	6823      	ldr	r3, [r4, #0]
90014d1c:	4680      	mov	r8, r0
90014d1e:	4620      	mov	r0, r4
90014d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014d22:	4798      	blx	r3
90014d24:	6823      	ldr	r3, [r4, #0]
90014d26:	4681      	mov	r9, r0
90014d28:	4620      	mov	r0, r4
90014d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014d2e:	4798      	blx	r3
90014d30:	464b      	mov	r3, r9
90014d32:	9000      	str	r0, [sp, #0]
90014d34:	4642      	mov	r2, r8
90014d36:	4629      	mov	r1, r5
90014d38:	4630      	mov	r0, r6
90014d3a:	47b8      	blx	r7
90014d3c:	b003      	add	sp, #12
90014d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014d42:	2000      	movs	r0, #0
90014d44:	e7fa      	b.n	90014d3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90014d46:	bf00      	nop
90014d48:	240281f0 	.word	0x240281f0
90014d4c:	240281ec 	.word	0x240281ec
90014d50:	240281f4 	.word	0x240281f4
90014d54:	240281f8 	.word	0x240281f8

90014d58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90014d58:	b40e      	push	{r1, r2, r3}
90014d5a:	4b30      	ldr	r3, [pc, #192]	; (90014e1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
90014d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014d60:	881a      	ldrh	r2, [r3, #0]
90014d62:	b09d      	sub	sp, #116	; 0x74
90014d64:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90014d66:	4604      	mov	r4, r0
90014d68:	429a      	cmp	r2, r3
90014d6a:	d954      	bls.n	90014e16 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
90014d6c:	aa26      	add	r2, sp, #152	; 0x98
90014d6e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90014e20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90014d72:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90014e24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90014d76:	9202      	str	r2, [sp, #8]
90014d78:	f8d9 2000 	ldr.w	r2, [r9]
90014d7c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90014d80:	f8d8 3000 	ldr.w	r3, [r8]
90014d84:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90014d88:	682b      	ldr	r3, [r5, #0]
90014d8a:	4628      	mov	r0, r5
90014d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014d8e:	4798      	blx	r3
90014d90:	4606      	mov	r6, r0
90014d92:	b207      	sxth	r7, r0
90014d94:	a803      	add	r0, sp, #12
90014d96:	f004 fd18 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90014d9a:	682b      	ldr	r3, [r5, #0]
90014d9c:	4628      	mov	r0, r5
90014d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014da0:	4798      	blx	r3
90014da2:	682b      	ldr	r3, [r5, #0]
90014da4:	4682      	mov	sl, r0
90014da6:	4628      	mov	r0, r5
90014da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014daa:	4798      	blx	r3
90014dac:	4653      	mov	r3, sl
90014dae:	9000      	str	r0, [sp, #0]
90014db0:	a803      	add	r0, sp, #12
90014db2:	9a02      	ldr	r2, [sp, #8]
90014db4:	9925      	ldr	r1, [sp, #148]	; 0x94
90014db6:	f004 fd63 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014dba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90014dbc:	f8d9 3000 	ldr.w	r3, [r9]
90014dc0:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90014dc4:	8925      	ldrh	r5, [r4, #8]
90014dc6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90014dca:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90014dce:	eba5 050c 	sub.w	r5, r5, ip
90014dd2:	784a      	ldrb	r2, [r1, #1]
90014dd4:	f8d8 3000 	ldr.w	r3, [r8]
90014dd8:	b22d      	sxth	r5, r5
90014dda:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90014dde:	f3c2 0281 	ubfx	r2, r2, #2, #2
90014de2:	9500      	str	r5, [sp, #0]
90014de4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90014de8:	a803      	add	r0, sp, #12
90014dea:	f002 fad9 	bl	900173a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90014dee:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90014df2:	b203      	sxth	r3, r0
90014df4:	18b9      	adds	r1, r7, r2
90014df6:	2900      	cmp	r1, #0
90014df8:	dd0b      	ble.n	90014e12 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90014dfa:	3b01      	subs	r3, #1
90014dfc:	fb13 f302 	smulbb	r3, r3, r2
90014e00:	fb16 3300 	smlabb	r3, r6, r0, r3
90014e04:	b21f      	sxth	r7, r3
90014e06:	4638      	mov	r0, r7
90014e08:	b01d      	add	sp, #116	; 0x74
90014e0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014e0e:	b003      	add	sp, #12
90014e10:	4770      	bx	lr
90014e12:	2b00      	cmp	r3, #0
90014e14:	dcf7      	bgt.n	90014e06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90014e16:	2700      	movs	r7, #0
90014e18:	e7f5      	b.n	90014e06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90014e1a:	bf00      	nop
90014e1c:	240281f0 	.word	0x240281f0
90014e20:	240281ec 	.word	0x240281ec
90014e24:	240281f4 	.word	0x240281f4

90014e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90014e28:	4bbd      	ldr	r3, [pc, #756]	; (90015120 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
90014e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014e2e:	460c      	mov	r4, r1
90014e30:	881b      	ldrh	r3, [r3, #0]
90014e32:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
90014e34:	b0a9      	sub	sp, #164	; 0xa4
90014e36:	4680      	mov	r8, r0
90014e38:	428b      	cmp	r3, r1
90014e3a:	d809      	bhi.n	90014e50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
90014e3c:	2300      	movs	r3, #0
90014e3e:	f04f 32ff 	mov.w	r2, #4294967295
90014e42:	6083      	str	r3, [r0, #8]
90014e44:	e9c0 3200 	strd	r3, r2, [r0]
90014e48:	4640      	mov	r0, r8
90014e4a:	b029      	add	sp, #164	; 0xa4
90014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014e50:	4eb4      	ldr	r6, [pc, #720]	; (90015124 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
90014e52:	6833      	ldr	r3, [r6, #0]
90014e54:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90014e58:	4bb3      	ldr	r3, [pc, #716]	; (90015128 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
90014e5a:	681b      	ldr	r3, [r3, #0]
90014e5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90014e60:	4bb2      	ldr	r3, [pc, #712]	; (9001512c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90014e62:	6818      	ldr	r0, [r3, #0]
90014e64:	f7f2 ffa2 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90014e68:	682b      	ldr	r3, [r5, #0]
90014e6a:	4681      	mov	r9, r0
90014e6c:	4628      	mov	r0, r5
90014e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014e70:	4798      	blx	r3
90014e72:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90014e74:	b203      	sxth	r3, r0
90014e76:	4682      	mov	sl, r0
90014e78:	4407      	add	r7, r0
90014e7a:	a80f      	add	r0, sp, #60	; 0x3c
90014e7c:	9304      	str	r3, [sp, #16]
90014e7e:	b2bb      	uxth	r3, r7
90014e80:	9303      	str	r3, [sp, #12]
90014e82:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90014e86:	2b00      	cmp	r3, #0
90014e88:	f040 80a5 	bne.w	90014fd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90014e8c:	f004 fc9d 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90014e90:	682b      	ldr	r3, [r5, #0]
90014e92:	4628      	mov	r0, r5
90014e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014e96:	4798      	blx	r3
90014e98:	682b      	ldr	r3, [r5, #0]
90014e9a:	4606      	mov	r6, r0
90014e9c:	4628      	mov	r0, r5
90014e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014ea0:	4798      	blx	r3
90014ea2:	6823      	ldr	r3, [r4, #0]
90014ea4:	4607      	mov	r7, r0
90014ea6:	4620      	mov	r0, r4
90014ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014eaa:	4798      	blx	r3
90014eac:	6823      	ldr	r3, [r4, #0]
90014eae:	4683      	mov	fp, r0
90014eb0:	4620      	mov	r0, r4
90014eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014eb6:	4798      	blx	r3
90014eb8:	463b      	mov	r3, r7
90014eba:	4649      	mov	r1, r9
90014ebc:	4632      	mov	r2, r6
90014ebe:	2600      	movs	r6, #0
90014ec0:	e9cd b000 	strd	fp, r0, [sp]
90014ec4:	a80f      	add	r0, sp, #60	; 0x3c
90014ec6:	4637      	mov	r7, r6
90014ec8:	f004 fcef 	bl	900198aa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90014ecc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014ed0:	f8df b250 	ldr.w	fp, [pc, #592]	; 90015124 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90014ed4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90014ed8:	bf0c      	ite	eq
90014eda:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
90014ede:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
90014ee2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90014ee4:	4629      	mov	r1, r5
90014ee6:	f8db 3000 	ldr.w	r3, [fp]
90014eea:	a80f      	add	r0, sp, #60	; 0x3c
90014eec:	3701      	adds	r7, #1
90014eee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90014ef2:	f647 72ff 	movw	r2, #32767	; 0x7fff
90014ef6:	b2bf      	uxth	r7, r7
90014ef8:	785b      	ldrb	r3, [r3, #1]
90014efa:	f3c3 0381 	ubfx	r3, r3, #2, #2
90014efe:	f001 ff6a 	bl	90016dd6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90014f02:	9b03      	ldr	r3, [sp, #12]
90014f04:	4286      	cmp	r6, r0
90014f06:	eba9 0903 	sub.w	r9, r9, r3
90014f0a:	bfb8      	it	lt
90014f0c:	4606      	movlt	r6, r0
90014f0e:	a80f      	add	r0, sp, #60	; 0x3c
90014f10:	fa0f f989 	sxth.w	r9, r9
90014f14:	b236      	sxth	r6, r6
90014f16:	f004 fc7f 	bl	90019818 <_ZN8touchgfx12TextProvider11endOfStringEv>
90014f1a:	b918      	cbnz	r0, 90014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90014f1c:	7a2b      	ldrb	r3, [r5, #8]
90014f1e:	444b      	add	r3, r9
90014f20:	2b00      	cmp	r3, #0
90014f22:	dcde      	bgt.n	90014ee2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
90014f24:	9b03      	ldr	r3, [sp, #12]
90014f26:	4620      	mov	r0, r4
90014f28:	9a04      	ldr	r2, [sp, #16]
90014f2a:	fb13 f707 	smulbb	r7, r3, r7
90014f2e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014f30:	f895 9009 	ldrb.w	r9, [r5, #9]
90014f34:	1aff      	subs	r7, r7, r3
90014f36:	b2bf      	uxth	r7, r7
90014f38:	b23b      	sxth	r3, r7
90014f3a:	429a      	cmp	r2, r3
90014f3c:	bfa8      	it	ge
90014f3e:	4657      	movge	r7, sl
90014f40:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014f44:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90014f48:	6823      	ldr	r3, [r4, #0]
90014f4a:	444f      	add	r7, r9
90014f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90014f4e:	bf08      	it	eq
90014f50:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
90014f54:	fa1f f987 	uxth.w	r9, r7
90014f58:	bf18      	it	ne
90014f5a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
90014f5e:	4798      	blx	r3
90014f60:	2801      	cmp	r0, #1
90014f62:	fa0f f789 	sxth.w	r7, r9
90014f66:	b2b3      	uxth	r3, r6
90014f68:	f000 80e2 	beq.w	90015130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90014f6c:	2802      	cmp	r0, #2
90014f6e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
90014f72:	f000 80e3 	beq.w	9001513c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90014f76:	7aea      	ldrb	r2, [r5, #11]
90014f78:	b236      	sxth	r6, r6
90014f7a:	7b2d      	ldrb	r5, [r5, #12]
90014f7c:	1ab6      	subs	r6, r6, r2
90014f7e:	442a      	add	r2, r5
90014f80:	fa1f fa86 	uxth.w	sl, r6
90014f84:	4413      	add	r3, r2
90014f86:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90014f8a:	fa0f fb8a 	sxth.w	fp, sl
90014f8e:	b29b      	uxth	r3, r3
90014f90:	2a02      	cmp	r2, #2
90014f92:	b21e      	sxth	r6, r3
90014f94:	f000 80d6 	beq.w	90015144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90014f98:	2a03      	cmp	r2, #3
90014f9a:	f000 80de 	beq.w	9001515a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
90014f9e:	2a01      	cmp	r2, #1
90014fa0:	f040 80e6 	bne.w	90015170 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90014fa4:	8925      	ldrh	r5, [r4, #8]
90014fa6:	4633      	mov	r3, r6
90014fa8:	463e      	mov	r6, r7
90014faa:	eba5 0909 	sub.w	r9, r5, r9
90014fae:	461f      	mov	r7, r3
90014fb0:	465d      	mov	r5, fp
90014fb2:	fa0f fb89 	sxth.w	fp, r9
90014fb6:	4b5d      	ldr	r3, [pc, #372]	; (9001512c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90014fb8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90014fba:	6818      	ldr	r0, [r3, #0]
90014fbc:	f7f2 fef6 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90014fc0:	f8a8 b000 	strh.w	fp, [r8]
90014fc4:	f8a8 5002 	strh.w	r5, [r8, #2]
90014fc8:	f8a8 6004 	strh.w	r6, [r8, #4]
90014fcc:	f8a8 7006 	strh.w	r7, [r8, #6]
90014fd0:	f8c8 0008 	str.w	r0, [r8, #8]
90014fd4:	e738      	b.n	90014e48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90014fd6:	f004 fbf8 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90014fda:	682b      	ldr	r3, [r5, #0]
90014fdc:	4628      	mov	r0, r5
90014fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014fe0:	4798      	blx	r3
90014fe2:	682b      	ldr	r3, [r5, #0]
90014fe4:	4607      	mov	r7, r0
90014fe6:	4628      	mov	r0, r5
90014fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014fea:	4798      	blx	r3
90014fec:	6823      	ldr	r3, [r4, #0]
90014fee:	4683      	mov	fp, r0
90014ff0:	4620      	mov	r0, r4
90014ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014ff4:	4798      	blx	r3
90014ff6:	6822      	ldr	r2, [r4, #0]
90014ff8:	9005      	str	r0, [sp, #20]
90014ffa:	4620      	mov	r0, r4
90014ffc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
90015000:	4790      	blx	r2
90015002:	9b05      	ldr	r3, [sp, #20]
90015004:	463a      	mov	r2, r7
90015006:	4649      	mov	r1, r9
90015008:	9001      	str	r0, [sp, #4]
9001500a:	a80f      	add	r0, sp, #60	; 0x3c
9001500c:	9300      	str	r3, [sp, #0]
9001500e:	465b      	mov	r3, fp
90015010:	f004 fc4b 	bl	900198aa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90015014:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015018:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
9001501c:	af0f      	add	r7, sp, #60	; 0x3c
9001501e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015022:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90015026:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90015028:	bf0a      	itet	eq
9001502a:	464a      	moveq	r2, r9
9001502c:	461a      	movne	r2, r3
9001502e:	4699      	moveq	r9, r3
90015030:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90015034:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
90015038:	1ad2      	subs	r2, r2, r3
9001503a:	6833      	ldr	r3, [r6, #0]
9001503c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
90015040:	eb03 0341 	add.w	r3, r3, r1, lsl #1
90015044:	7859      	ldrb	r1, [r3, #1]
90015046:	2300      	movs	r3, #0
90015048:	9707      	str	r7, [sp, #28]
9001504a:	f3c1 0181 	ubfx	r1, r1, #2, #2
9001504e:	f8ad 3018 	strh.w	r3, [sp, #24]
90015052:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90015056:	f88d 1020 	strb.w	r1, [sp, #32]
9001505a:	9509      	str	r5, [sp, #36]	; 0x24
9001505c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90015060:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90015064:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90015068:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001506c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90015070:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90015074:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90015078:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001507c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015080:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90015084:	b350      	cbz	r0, 900150dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015086:	682b      	ldr	r3, [r5, #0]
90015088:	4628      	mov	r0, r5
9001508a:	695b      	ldr	r3, [r3, #20]
9001508c:	4798      	blx	r3
9001508e:	4607      	mov	r7, r0
90015090:	b320      	cbz	r0, 900150dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015092:	9809      	ldr	r0, [sp, #36]	; 0x24
90015094:	4639      	mov	r1, r7
90015096:	6803      	ldr	r3, [r0, #0]
90015098:	68db      	ldr	r3, [r3, #12]
9001509a:	4798      	blx	r3
9001509c:	4606      	mov	r6, r0
9001509e:	b1e8      	cbz	r0, 900150dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
900150a0:	7b43      	ldrb	r3, [r0, #13]
900150a2:	7a82      	ldrb	r2, [r0, #10]
900150a4:	005b      	lsls	r3, r3, #1
900150a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900150aa:	4313      	orrs	r3, r2
900150ac:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
900150b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
900150b4:	2b06      	cmp	r3, #6
900150b6:	d111      	bne.n	900150dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
900150b8:	9809      	ldr	r0, [sp, #36]	; 0x24
900150ba:	4632      	mov	r2, r6
900150bc:	4639      	mov	r1, r7
900150be:	6803      	ldr	r3, [r0, #0]
900150c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900150c2:	4798      	blx	r3
900150c4:	7b73      	ldrb	r3, [r6, #13]
900150c6:	005b      	lsls	r3, r3, #1
900150c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
900150cc:	7ab3      	ldrb	r3, [r6, #10]
900150ce:	4313      	orrs	r3, r2
900150d0:	4418      	add	r0, r3
900150d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900150d6:	4418      	add	r0, r3
900150d8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
900150dc:	2600      	movs	r6, #0
900150de:	4637      	mov	r7, r6
900150e0:	a806      	add	r0, sp, #24
900150e2:	3701      	adds	r7, #1
900150e4:	f002 f859 	bl	9001719a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900150e8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
900150ec:	9b03      	ldr	r3, [sp, #12]
900150ee:	b2bf      	uxth	r7, r7
900150f0:	4286      	cmp	r6, r0
900150f2:	eba9 0903 	sub.w	r9, r9, r3
900150f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
900150fa:	bfb8      	it	lt
900150fc:	4606      	movlt	r6, r0
900150fe:	fa0f f989 	sxth.w	r9, r9
90015102:	b236      	sxth	r6, r6
90015104:	2b00      	cmp	r3, #0
90015106:	f43f af0d 	beq.w	90014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001510a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
9001510e:	2b00      	cmp	r3, #0
90015110:	f47f af08 	bne.w	90014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90015114:	7a2b      	ldrb	r3, [r5, #8]
90015116:	444b      	add	r3, r9
90015118:	2b00      	cmp	r3, #0
9001511a:	dce1      	bgt.n	900150e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
9001511c:	e702      	b.n	90014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001511e:	bf00      	nop
90015120:	240281f0 	.word	0x240281f0
90015124:	240281ec 	.word	0x240281ec
90015128:	240281f4 	.word	0x240281f4
9001512c:	240281f8 	.word	0x240281f8
90015130:	ebaa 0606 	sub.w	r6, sl, r6
90015134:	2002      	movs	r0, #2
90015136:	fb96 f6f0 	sdiv	r6, r6, r0
9001513a:	e71c      	b.n	90014f76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
9001513c:	441e      	add	r6, r3
9001513e:	ebaa 0606 	sub.w	r6, sl, r6
90015142:	e718      	b.n	90014f76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90015144:	8925      	ldrh	r5, [r4, #8]
90015146:	1aed      	subs	r5, r5, r3
90015148:	eba5 050a 	sub.w	r5, r5, sl
9001514c:	fa0f fb85 	sxth.w	fp, r5
90015150:	8965      	ldrh	r5, [r4, #10]
90015152:	eba5 0509 	sub.w	r5, r5, r9
90015156:	b22d      	sxth	r5, r5
90015158:	e72d      	b.n	90014fb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
9001515a:	8965      	ldrh	r5, [r4, #10]
9001515c:	f04f 0b00 	mov.w	fp, #0
90015160:	1aed      	subs	r5, r5, r3
90015162:	4633      	mov	r3, r6
90015164:	463e      	mov	r6, r7
90015166:	eba5 050a 	sub.w	r5, r5, sl
9001516a:	461f      	mov	r7, r3
9001516c:	b22d      	sxth	r5, r5
9001516e:	e722      	b.n	90014fb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90015170:	2500      	movs	r5, #0
90015172:	e720      	b.n	90014fb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90015174 <_ZN8touchgfx8TextAreaD0Ev>:
90015174:	b510      	push	{r4, lr}
90015176:	4604      	mov	r4, r0
90015178:	2148      	movs	r1, #72	; 0x48
9001517a:	f011 ffbc 	bl	900270f6 <_ZdlPvj>
9001517e:	4620      	mov	r0, r4
90015180:	bd10      	pop	{r4, pc}
	...

90015184 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90015184:	b513      	push	{r0, r1, r4, lr}
90015186:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
9001518a:	4604      	mov	r4, r0
9001518c:	b1fb      	cbz	r3, 900151ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001518e:	4b16      	ldr	r3, [pc, #88]	; (900151e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90015190:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015192:	881b      	ldrh	r3, [r3, #0]
90015194:	428b      	cmp	r3, r1
90015196:	d91a      	bls.n	900151ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015198:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001519c:	2b00      	cmp	r3, #0
9001519e:	dd16      	ble.n	900151ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900151a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
900151a4:	2b00      	cmp	r3, #0
900151a6:	dd12      	ble.n	900151ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900151a8:	4b10      	ldr	r3, [pc, #64]	; (900151ec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
900151aa:	6818      	ldr	r0, [r3, #0]
900151ac:	f7f2 fdfe 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
900151b0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
900151b4:	6822      	ldr	r2, [r4, #0]
900151b6:	2b00      	cmp	r3, #0
900151b8:	db06      	blt.n	900151c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
900151ba:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900151be:	2b00      	cmp	r3, #0
900151c0:	db02      	blt.n	900151c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
900151c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
900151c4:	4298      	cmp	r0, r3
900151c6:	d004      	beq.n	900151d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
900151c8:	6953      	ldr	r3, [r2, #20]
900151ca:	4620      	mov	r0, r4
900151cc:	4798      	blx	r3
900151ce:	b002      	add	sp, #8
900151d0:	bd10      	pop	{r4, pc}
900151d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
900151d6:	466b      	mov	r3, sp
900151d8:	6912      	ldr	r2, [r2, #16]
900151da:	c903      	ldmia	r1, {r0, r1}
900151dc:	e883 0003 	stmia.w	r3, {r0, r1}
900151e0:	4619      	mov	r1, r3
900151e2:	4620      	mov	r0, r4
900151e4:	4790      	blx	r2
900151e6:	e7f2      	b.n	900151ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900151e8:	240281f0 	.word	0x240281f0
900151ec:	240281f8 	.word	0x240281f8

900151f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
900151f0:	4b45      	ldr	r3, [pc, #276]	; (90015308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
900151f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900151f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900151f8:	b08e      	sub	sp, #56	; 0x38
900151fa:	881b      	ldrh	r3, [r3, #0]
900151fc:	4604      	mov	r4, r0
900151fe:	4293      	cmp	r3, r2
90015200:	d97e      	bls.n	90015300 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015202:	6808      	ldr	r0, [r1, #0]
90015204:	ab05      	add	r3, sp, #20
90015206:	6849      	ldr	r1, [r1, #4]
90015208:	4d40      	ldr	r5, [pc, #256]	; (9001530c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
9001520a:	c303      	stmia	r3!, {r0, r1}
9001520c:	4611      	mov	r1, r2
9001520e:	6828      	ldr	r0, [r5, #0]
90015210:	f7f2 fdcc 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
90015214:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90015218:	2b00      	cmp	r3, #0
9001521a:	db11      	blt.n	90015240 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001521c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90015220:	2b00      	cmp	r3, #0
90015222:	db0d      	blt.n	90015240 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90015224:	6c63      	ldr	r3, [r4, #68]	; 0x44
90015226:	4298      	cmp	r0, r3
90015228:	d10a      	bne.n	90015240 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001522a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
9001522e:	ab09      	add	r3, sp, #36	; 0x24
90015230:	e892 0003 	ldmia.w	r2, {r0, r1}
90015234:	e883 0003 	stmia.w	r3, {r0, r1}
90015238:	4619      	mov	r1, r3
9001523a:	a805      	add	r0, sp, #20
9001523c:	f7fd fb3a 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90015240:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90015244:	2b00      	cmp	r3, #0
90015246:	dd5b      	ble.n	90015300 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015248:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
9001524c:	2b00      	cmp	r3, #0
9001524e:	dd57      	ble.n	90015300 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015250:	4f2f      	ldr	r7, [pc, #188]	; (90015310 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
90015252:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015254:	683b      	ldr	r3, [r7, #0]
90015256:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9001525a:	4b2e      	ldr	r3, [pc, #184]	; (90015314 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
9001525c:	681b      	ldr	r3, [r3, #0]
9001525e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90015262:	2e00      	cmp	r6, #0
90015264:	d04c      	beq.n	90015300 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015266:	6823      	ldr	r3, [r4, #0]
90015268:	4620      	mov	r0, r4
9001526a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
9001526e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90015270:	4798      	blx	r3
90015272:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015274:	683b      	ldr	r3, [r7, #0]
90015276:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
9001527a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
9001527e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
90015282:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
90015286:	785b      	ldrb	r3, [r3, #1]
90015288:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
9001528c:	f3c3 0381 	ubfx	r3, r3, #2, #2
90015290:	6b21      	ldr	r1, [r4, #48]	; 0x30
90015292:	9609      	str	r6, [sp, #36]	; 0x24
90015294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90015298:	4b1f      	ldr	r3, [pc, #124]	; (90015318 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
9001529a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
9001529e:	681b      	ldr	r3, [r3, #0]
900152a0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
900152a4:	910b      	str	r1, [sp, #44]	; 0x2c
900152a6:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
900152aa:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
900152ae:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
900152b2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
900152b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900152ba:	b10a      	cbz	r2, 900152c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
900152bc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
900152be:	b906      	cbnz	r6, 900152c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
900152c0:	689e      	ldr	r6, [r3, #8]
900152c2:	af07      	add	r7, sp, #28
900152c4:	4621      	mov	r1, r4
900152c6:	4638      	mov	r0, r7
900152c8:	f003 fdc2 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900152cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900152ce:	6828      	ldr	r0, [r5, #0]
900152d0:	f7f2 fd6c 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
900152d4:	6823      	ldr	r3, [r4, #0]
900152d6:	4605      	mov	r5, r0
900152d8:	4620      	mov	r0, r4
900152da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900152dc:	4798      	blx	r3
900152de:	6823      	ldr	r3, [r4, #0]
900152e0:	4680      	mov	r8, r0
900152e2:	4620      	mov	r0, r4
900152e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900152e8:	4798      	blx	r3
900152ea:	ab09      	add	r3, sp, #36	; 0x24
900152ec:	9501      	str	r5, [sp, #4]
900152ee:	9300      	str	r3, [sp, #0]
900152f0:	ab05      	add	r3, sp, #20
900152f2:	e9cd 8002 	strd	r8, r0, [sp, #8]
900152f6:	4630      	mov	r0, r6
900152f8:	e897 0006 	ldmia.w	r7, {r1, r2}
900152fc:	f7f2 fd06 	bl	90007d0c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90015300:	b00e      	add	sp, #56	; 0x38
90015302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015306:	bf00      	nop
90015308:	240281f0 	.word	0x240281f0
9001530c:	240281f8 	.word	0x240281f8
90015310:	240281ec 	.word	0x240281ec
90015314:	240281f4 	.word	0x240281f4
90015318:	24028194 	.word	0x24028194

9001531c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
9001531c:	b570      	push	{r4, r5, r6, lr}
9001531e:	6803      	ldr	r3, [r0, #0]
90015320:	4604      	mov	r4, r0
90015322:	4615      	mov	r5, r2
90015324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015326:	4798      	blx	r3
90015328:	6823      	ldr	r3, [r4, #0]
9001532a:	4629      	mov	r1, r5
9001532c:	4620      	mov	r0, r4
9001532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015334:	4718      	bx	r3
	...

90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90015338:	b538      	push	{r3, r4, r5, lr}
9001533a:	4b0e      	ldr	r3, [pc, #56]	; (90015374 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
9001533c:	4604      	mov	r4, r0
9001533e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015340:	881b      	ldrh	r3, [r3, #0]
90015342:	429a      	cmp	r2, r3
90015344:	d214      	bcs.n	90015370 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
90015346:	6803      	ldr	r3, [r0, #0]
90015348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001534a:	4798      	blx	r3
9001534c:	6823      	ldr	r3, [r4, #0]
9001534e:	4605      	mov	r5, r0
90015350:	4620      	mov	r0, r4
90015352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90015354:	4798      	blx	r3
90015356:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001535a:	b22d      	sxth	r5, r5
9001535c:	4601      	mov	r1, r0
9001535e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015362:	bf06      	itte	eq
90015364:	4602      	moveq	r2, r0
90015366:	4629      	moveq	r1, r5
90015368:	462a      	movne	r2, r5
9001536a:	4620      	mov	r0, r4
9001536c:	f7ff ffd6 	bl	9001531c <_ZN8touchgfx8Drawable14setWidthHeightEss>
90015370:	bd38      	pop	{r3, r4, r5, pc}
90015372:	bf00      	nop
90015374:	240281f0 	.word	0x240281f0

90015378 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90015378:	b530      	push	{r4, r5, lr}
9001537a:	888b      	ldrh	r3, [r1, #4]
9001537c:	b085      	sub	sp, #20
9001537e:	4604      	mov	r4, r0
90015380:	8583      	strh	r3, [r0, #44]	; 0x2c
90015382:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90015386:	b923      	cbnz	r3, 90015392 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90015388:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001538c:	b90b      	cbnz	r3, 90015392 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001538e:	f7ff ffd3 	bl	90015338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90015392:	6823      	ldr	r3, [r4, #0]
90015394:	466d      	mov	r5, sp
90015396:	4621      	mov	r1, r4
90015398:	343c      	adds	r4, #60	; 0x3c
9001539a:	4628      	mov	r0, r5
9001539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900153a0:	4798      	blx	r3
900153a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900153a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
900153aa:	b005      	add	sp, #20
900153ac:	bd30      	pop	{r4, r5, pc}

900153ae <_ZNK8touchgfx3Box12getSolidRectEv>:
900153ae:	2300      	movs	r3, #0
900153b0:	8083      	strh	r3, [r0, #4]
900153b2:	80c3      	strh	r3, [r0, #6]
900153b4:	8003      	strh	r3, [r0, #0]
900153b6:	8043      	strh	r3, [r0, #2]
900153b8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
900153bc:	2bff      	cmp	r3, #255	; 0xff
900153be:	bf01      	itttt	eq
900153c0:	890b      	ldrheq	r3, [r1, #8]
900153c2:	8083      	strheq	r3, [r0, #4]
900153c4:	894b      	ldrheq	r3, [r1, #10]
900153c6:	80c3      	strheq	r3, [r0, #6]
900153c8:	4770      	bx	lr
	...

900153cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
900153cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
900153ce:	4604      	mov	r4, r0
900153d0:	466b      	mov	r3, sp
900153d2:	6808      	ldr	r0, [r1, #0]
900153d4:	6849      	ldr	r1, [r1, #4]
900153d6:	c303      	stmia	r3!, {r0, r1}
900153d8:	6823      	ldr	r3, [r4, #0]
900153da:	4669      	mov	r1, sp
900153dc:	4620      	mov	r0, r4
900153de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900153e0:	4798      	blx	r3
900153e2:	4b08      	ldr	r3, [pc, #32]	; (90015404 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900153e4:	681b      	ldr	r3, [r3, #0]
900153e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900153ea:	b10a      	cbz	r2, 900153f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
900153ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900153ee:	b900      	cbnz	r0, 900153f2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
900153f0:	6898      	ldr	r0, [r3, #8]
900153f2:	6803      	ldr	r3, [r0, #0]
900153f4:	4669      	mov	r1, sp
900153f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900153f8:	6a1d      	ldr	r5, [r3, #32]
900153fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900153fe:	47a8      	blx	r5
90015400:	b003      	add	sp, #12
90015402:	bd30      	pop	{r4, r5, pc}
90015404:	24028194 	.word	0x24028194

90015408 <_ZN8touchgfx3BoxD1Ev>:
90015408:	4770      	bx	lr

9001540a <_ZN8touchgfx3BoxD0Ev>:
9001540a:	b510      	push	{r4, lr}
9001540c:	4604      	mov	r4, r0
9001540e:	212c      	movs	r1, #44	; 0x2c
90015410:	f011 fe71 	bl	900270f6 <_ZdlPvj>
90015414:	4620      	mov	r0, r4
90015416:	bd10      	pop	{r4, pc}

90015418 <_ZNK8touchgfx3Box17invalidateContentEv>:
90015418:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
9001541c:	b12a      	cbz	r2, 9001542a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
9001541e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90015422:	b112      	cbz	r2, 9001542a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90015424:	6803      	ldr	r3, [r0, #0]
90015426:	695b      	ldr	r3, [r3, #20]
90015428:	4718      	bx	r3
9001542a:	4770      	bx	lr

9001542c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
9001542c:	4b30      	ldr	r3, [pc, #192]	; (900154f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
9001542e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015432:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015434:	b08d      	sub	sp, #52	; 0x34
90015436:	881b      	ldrh	r3, [r3, #0]
90015438:	4604      	mov	r4, r0
9001543a:	460f      	mov	r7, r1
9001543c:	4293      	cmp	r3, r2
9001543e:	d954      	bls.n	900154ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90015440:	4b2c      	ldr	r3, [pc, #176]	; (900154f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
90015442:	6819      	ldr	r1, [r3, #0]
90015444:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90015448:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
9001544c:	4a2a      	ldr	r2, [pc, #168]	; (900154f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
9001544e:	6812      	ldr	r2, [r2, #0]
90015450:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
90015454:	2900      	cmp	r1, #0
90015456:	d048      	beq.n	900154ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90015458:	785a      	ldrb	r2, [r3, #1]
9001545a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
9001545e:	f3c2 0801 	ubfx	r8, r2, #0, #2
90015462:	f3c2 0281 	ubfx	r2, r2, #2, #2
90015466:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
9001546a:	4b24      	ldr	r3, [pc, #144]	; (900154fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
9001546c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
90015470:	681a      	ldr	r2, [r3, #0]
90015472:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90015476:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
9001547a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001547e:	6b26      	ldr	r6, [r4, #48]	; 0x30
90015480:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90015484:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90015488:	9107      	str	r1, [sp, #28]
9001548a:	f88d 8020 	strb.w	r8, [sp, #32]
9001548e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
90015492:	9609      	str	r6, [sp, #36]	; 0x24
90015494:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90015498:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
9001549c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
900154a0:	b10b      	cbz	r3, 900154a6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
900154a2:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
900154a4:	b905      	cbnz	r5, 900154a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
900154a6:	6895      	ldr	r5, [r2, #8]
900154a8:	ae05      	add	r6, sp, #20
900154aa:	4621      	mov	r1, r4
900154ac:	4630      	mov	r0, r6
900154ae:	f003 fccf 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900154b2:	4b13      	ldr	r3, [pc, #76]	; (90015500 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
900154b4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900154b6:	6818      	ldr	r0, [r3, #0]
900154b8:	f7f2 fc78 	bl	90007dac <_ZNK8touchgfx5Texts7getTextEt>
900154bc:	6823      	ldr	r3, [r4, #0]
900154be:	4680      	mov	r8, r0
900154c0:	4620      	mov	r0, r4
900154c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900154c4:	4798      	blx	r3
900154c6:	6823      	ldr	r3, [r4, #0]
900154c8:	4681      	mov	r9, r0
900154ca:	4620      	mov	r0, r4
900154cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900154d0:	4798      	blx	r3
900154d2:	ab07      	add	r3, sp, #28
900154d4:	f8cd 8004 	str.w	r8, [sp, #4]
900154d8:	9300      	str	r3, [sp, #0]
900154da:	463b      	mov	r3, r7
900154dc:	e9cd 9002 	strd	r9, r0, [sp, #8]
900154e0:	4628      	mov	r0, r5
900154e2:	e896 0006 	ldmia.w	r6, {r1, r2}
900154e6:	f7f2 fc11 	bl	90007d0c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900154ea:	b00d      	add	sp, #52	; 0x34
900154ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900154f0:	240281f0 	.word	0x240281f0
900154f4:	240281ec 	.word	0x240281ec
900154f8:	240281f4 	.word	0x240281f4
900154fc:	24028194 	.word	0x24028194
90015500:	240281f8 	.word	0x240281f8

90015504 <_ZN8touchgfx5ImageD1Ev>:
90015504:	4770      	bx	lr

90015506 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90015506:	b570      	push	{r4, r5, r6, lr}
90015508:	880b      	ldrh	r3, [r1, #0]
9001550a:	460d      	mov	r5, r1
9001550c:	4604      	mov	r4, r0
9001550e:	84c3      	strh	r3, [r0, #38]	; 0x26
90015510:	4608      	mov	r0, r1
90015512:	f005 fced 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015516:	4606      	mov	r6, r0
90015518:	4628      	mov	r0, r5
9001551a:	f005 fd1d 	bl	9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001551e:	6823      	ldr	r3, [r4, #0]
90015520:	4605      	mov	r5, r0
90015522:	4631      	mov	r1, r6
90015524:	4620      	mov	r0, r4
90015526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015528:	4798      	blx	r3
9001552a:	6823      	ldr	r3, [r4, #0]
9001552c:	4629      	mov	r1, r5
9001552e:	4620      	mov	r0, r4
90015530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015536:	4718      	bx	r3

90015538 <_ZN8touchgfx5ImageD0Ev>:
90015538:	b510      	push	{r4, lr}
9001553a:	4604      	mov	r4, r0
9001553c:	212c      	movs	r1, #44	; 0x2c
9001553e:	f011 fdda 	bl	900270f6 <_ZdlPvj>
90015542:	4620      	mov	r0, r4
90015544:	bd10      	pop	{r4, pc}

90015546 <_ZNK8touchgfx5Image12getSolidRectEv>:
90015546:	b510      	push	{r4, lr}
90015548:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
9001554c:	4604      	mov	r4, r0
9001554e:	2bff      	cmp	r3, #255	; 0xff
90015550:	d006      	beq.n	90015560 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
90015552:	2300      	movs	r3, #0
90015554:	8003      	strh	r3, [r0, #0]
90015556:	8043      	strh	r3, [r0, #2]
90015558:	8083      	strh	r3, [r0, #4]
9001555a:	80c3      	strh	r3, [r0, #6]
9001555c:	4620      	mov	r0, r4
9001555e:	bd10      	pop	{r4, pc}
90015560:	3126      	adds	r1, #38	; 0x26
90015562:	f005 fd2d 	bl	9001afc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015566:	e7f9      	b.n	9001555c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90015568 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90015568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001556c:	4604      	mov	r4, r0
9001556e:	b088      	sub	sp, #32
90015570:	2500      	movs	r5, #0
90015572:	460f      	mov	r7, r1
90015574:	f854 3b26 	ldr.w	r3, [r4], #38
90015578:	a904      	add	r1, sp, #16
9001557a:	4606      	mov	r6, r0
9001557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001557e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90015582:	4798      	blx	r3
90015584:	4620      	mov	r0, r4
90015586:	f005 fcb3 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001558a:	4680      	mov	r8, r0
9001558c:	4620      	mov	r0, r4
9001558e:	f005 fce3 	bl	9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015592:	9506      	str	r5, [sp, #24]
90015594:	ad06      	add	r5, sp, #24
90015596:	f8ad 001e 	strh.w	r0, [sp, #30]
9001559a:	4639      	mov	r1, r7
9001559c:	f8ad 801c 	strh.w	r8, [sp, #28]
900155a0:	4628      	mov	r0, r5
900155a2:	f7fd f987 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
900155a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900155aa:	2b00      	cmp	r3, #0
900155ac:	dd19      	ble.n	900155e2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900155ae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
900155b2:	2b00      	cmp	r3, #0
900155b4:	dd15      	ble.n	900155e2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900155b6:	4b0c      	ldr	r3, [pc, #48]	; (900155e8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
900155b8:	681b      	ldr	r3, [r3, #0]
900155ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900155be:	b10a      	cbz	r2, 900155c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
900155c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900155c2:	b900      	cbnz	r0, 900155c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
900155c4:	6898      	ldr	r0, [r3, #8]
900155c6:	2701      	movs	r7, #1
900155c8:	6801      	ldr	r1, [r0, #0]
900155ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
900155ce:	9702      	str	r7, [sp, #8]
900155d0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
900155d4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
900155d8:	e9cd 5600 	strd	r5, r6, [sp]
900155dc:	688d      	ldr	r5, [r1, #8]
900155de:	4621      	mov	r1, r4
900155e0:	47a8      	blx	r5
900155e2:	b008      	add	sp, #32
900155e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900155e8:	24028194 	.word	0x24028194

900155ec <_ZN8touchgfx7OutlineD1Ev>:
900155ec:	4770      	bx	lr

900155ee <_ZN8touchgfx7OutlineD0Ev>:
900155ee:	b510      	push	{r4, lr}
900155f0:	4604      	mov	r4, r0
900155f2:	2130      	movs	r1, #48	; 0x30
900155f4:	f011 fd7f 	bl	900270f6 <_ZdlPvj>
900155f8:	4620      	mov	r0, r4
900155fa:	bd10      	pop	{r4, pc}

900155fc <_ZN8touchgfx7Outline5resetEv>:
900155fc:	b510      	push	{r4, lr}
900155fe:	4604      	mov	r4, r0
90015600:	f000 fe86 	bl	90016310 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
90015604:	60e0      	str	r0, [r4, #12]
90015606:	f000 fe89 	bl	9001631c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
9001560a:	68e3      	ldr	r3, [r4, #12]
9001560c:	08c0      	lsrs	r0, r0, #3
9001560e:	2200      	movs	r2, #0
90015610:	f647 71ff 	movw	r1, #32767	; 0x7fff
90015614:	6123      	str	r3, [r4, #16]
90015616:	3801      	subs	r0, #1
90015618:	60a2      	str	r2, [r4, #8]
9001561a:	6060      	str	r0, [r4, #4]
9001561c:	8019      	strh	r1, [r3, #0]
9001561e:	8059      	strh	r1, [r3, #2]
90015620:	809a      	strh	r2, [r3, #4]
90015622:	80da      	strh	r2, [r3, #6]
90015624:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015626:	f023 0301 	bic.w	r3, r3, #1
9001562a:	f043 0302 	orr.w	r3, r3, #2
9001562e:	6263      	str	r3, [r4, #36]	; 0x24
90015630:	bd10      	pop	{r4, pc}
	...

90015634 <_ZN8touchgfx7OutlineC1Ev>:
90015634:	4b0a      	ldr	r3, [pc, #40]	; (90015660 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
90015636:	b510      	push	{r4, lr}
90015638:	6003      	str	r3, [r0, #0]
9001563a:	2300      	movs	r3, #0
9001563c:	4604      	mov	r4, r0
9001563e:	6243      	str	r3, [r0, #36]	; 0x24
90015640:	e9c0 3301 	strd	r3, r3, [r0, #4]
90015644:	e9c0 3303 	strd	r3, r3, [r0, #12]
90015648:	e9c0 3305 	strd	r3, r3, [r0, #20]
9001564c:	e9c0 3307 	strd	r3, r3, [r0, #28]
90015650:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
90015654:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
90015658:	f7ff ffd0 	bl	900155fc <_ZN8touchgfx7Outline5resetEv>
9001565c:	4620      	mov	r0, r4
9001565e:	bd10      	pop	{r4, pc}
90015660:	9002bf84 	.word	0x9002bf84

90015664 <_ZN8touchgfx7Outline10renderLineEiiii>:
90015664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015668:	b093      	sub	sp, #76	; 0x4c
9001566a:	1156      	asrs	r6, r2, #5
9001566c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001566e:	9305      	str	r3, [sp, #20]
90015670:	1153      	asrs	r3, r2, #5
90015672:	f004 051f 	and.w	r5, r4, #31
90015676:	9303      	str	r3, [sp, #12]
90015678:	1163      	asrs	r3, r4, #5
9001567a:	9504      	str	r5, [sp, #16]
9001567c:	1165      	asrs	r5, r4, #5
9001567e:	9306      	str	r3, [sp, #24]
90015680:	f002 031f 	and.w	r3, r2, #31
90015684:	42ae      	cmp	r6, r5
90015686:	f040 80f4 	bne.w	90015872 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
9001568a:	9c04      	ldr	r4, [sp, #16]
9001568c:	9a05      	ldr	r2, [sp, #20]
9001568e:	42a3      	cmp	r3, r4
90015690:	ea4f 1e62 	mov.w	lr, r2, asr #5
90015694:	6902      	ldr	r2, [r0, #16]
90015696:	d125      	bne.n	900156e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
90015698:	f9b2 3000 	ldrsh.w	r3, [r2]
9001569c:	459e      	cmp	lr, r3
9001569e:	d103      	bne.n	900156a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
900156a0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
900156a4:	429e      	cmp	r6, r3
900156a6:	d035      	beq.n	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
900156a8:	88d1      	ldrh	r1, [r2, #6]
900156aa:	8893      	ldrh	r3, [r2, #4]
900156ac:	430b      	orrs	r3, r1
900156ae:	d010      	beq.n	900156d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
900156b0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
900156b4:	2b00      	cmp	r3, #0
900156b6:	db0c      	blt.n	900156d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
900156b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
900156ba:	428b      	cmp	r3, r1
900156bc:	da09      	bge.n	900156d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
900156be:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
900156c2:	428b      	cmp	r3, r1
900156c4:	f103 0301 	add.w	r3, r3, #1
900156c8:	bf38      	it	cc
900156ca:	3208      	addcc	r2, #8
900156cc:	6083      	str	r3, [r0, #8]
900156ce:	bf38      	it	cc
900156d0:	6102      	strcc	r2, [r0, #16]
900156d2:	6903      	ldr	r3, [r0, #16]
900156d4:	9a03      	ldr	r2, [sp, #12]
900156d6:	f8a3 e000 	strh.w	lr, [r3]
900156da:	805a      	strh	r2, [r3, #2]
900156dc:	2200      	movs	r2, #0
900156de:	809a      	strh	r2, [r3, #4]
900156e0:	80da      	strh	r2, [r3, #6]
900156e2:	e017      	b.n	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
900156e4:	9c05      	ldr	r4, [sp, #20]
900156e6:	114e      	asrs	r6, r1, #5
900156e8:	f001 0c1f 	and.w	ip, r1, #31
900156ec:	f8b2 8004 	ldrh.w	r8, [r2, #4]
900156f0:	f004 041f 	and.w	r4, r4, #31
900156f4:	4576      	cmp	r6, lr
900156f6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
900156fa:	9402      	str	r4, [sp, #8]
900156fc:	9c04      	ldr	r4, [sp, #16]
900156fe:	eba4 0403 	sub.w	r4, r4, r3
90015702:	d10a      	bne.n	9001571a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
90015704:	9b02      	ldr	r3, [sp, #8]
90015706:	44a0      	add	r8, r4
90015708:	449c      	add	ip, r3
9001570a:	f8a2 8004 	strh.w	r8, [r2, #4]
9001570e:	fb04 a40c 	mla	r4, r4, ip, sl
90015712:	80d4      	strh	r4, [r2, #6]
90015714:	b013      	add	sp, #76	; 0x4c
90015716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001571a:	9d05      	ldr	r5, [sp, #20]
9001571c:	1a69      	subs	r1, r5, r1
9001571e:	bf51      	iteee	pl
90015720:	f1cc 0520 	rsbpl	r5, ip, #32
90015724:	fb04 f40c 	mulmi.w	r4, r4, ip
90015728:	4249      	negmi	r1, r1
9001572a:	2500      	movmi	r5, #0
9001572c:	bf5d      	ittte	pl
9001572e:	436c      	mulpl	r4, r5
90015730:	2520      	movpl	r5, #32
90015732:	f04f 0901 	movpl.w	r9, #1
90015736:	f04f 39ff 	movmi.w	r9, #4294967295
9001573a:	9501      	str	r5, [sp, #4]
9001573c:	9f01      	ldr	r7, [sp, #4]
9001573e:	444e      	add	r6, r9
90015740:	fb94 f5f1 	sdiv	r5, r4, r1
90015744:	fb01 4415 	mls	r4, r1, r5, r4
90015748:	44bc      	add	ip, r7
9001574a:	2c00      	cmp	r4, #0
9001574c:	bfbc      	itt	lt
9001574e:	f105 35ff 	addlt.w	r5, r5, #4294967295
90015752:	1864      	addlt	r4, r4, r1
90015754:	44a8      	add	r8, r5
90015756:	fb05 ac0c 	mla	ip, r5, ip, sl
9001575a:	f8a2 8004 	strh.w	r8, [r2, #4]
9001575e:	f8a2 c006 	strh.w	ip, [r2, #6]
90015762:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015766:	f8bc 8006 	ldrh.w	r8, [ip, #6]
9001576a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
9001576e:	ea58 0202 	orrs.w	r2, r8, r2
90015772:	d011      	beq.n	90015798 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015774:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90015778:	f1b8 0f00 	cmp.w	r8, #0
9001577c:	db0c      	blt.n	90015798 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
9001577e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015780:	4590      	cmp	r8, r2
90015782:	da09      	bge.n	90015798 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015784:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
90015788:	4590      	cmp	r8, r2
9001578a:	bf3c      	itt	cc
9001578c:	f10c 0208 	addcc.w	r2, ip, #8
90015790:	6102      	strcc	r2, [r0, #16]
90015792:	f108 0201 	add.w	r2, r8, #1
90015796:	6082      	str	r2, [r0, #8]
90015798:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001579c:	2700      	movs	r7, #0
9001579e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900157a2:	45b6      	cmp	lr, r6
900157a4:	f8ac 6000 	strh.w	r6, [ip]
900157a8:	442b      	add	r3, r5
900157aa:	f8ac 2002 	strh.w	r2, [ip, #2]
900157ae:	f8ac 7004 	strh.w	r7, [ip, #4]
900157b2:	f8ac 7006 	strh.w	r7, [ip, #6]
900157b6:	d04b      	beq.n	90015850 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
900157b8:	9f04      	ldr	r7, [sp, #16]
900157ba:	1a64      	subs	r4, r4, r1
900157bc:	f04f 0a00 	mov.w	sl, #0
900157c0:	1aff      	subs	r7, r7, r3
900157c2:	443d      	add	r5, r7
900157c4:	016d      	lsls	r5, r5, #5
900157c6:	fb95 f8f1 	sdiv	r8, r5, r1
900157ca:	fb01 5518 	mls	r5, r1, r8, r5
900157ce:	2d00      	cmp	r5, #0
900157d0:	bfbc      	itt	lt
900157d2:	f108 38ff 	addlt.w	r8, r8, #4294967295
900157d6:	186d      	addlt	r5, r5, r1
900157d8:	f108 0701 	add.w	r7, r8, #1
900157dc:	9703      	str	r7, [sp, #12]
900157de:	f8d0 c010 	ldr.w	ip, [r0, #16]
900157e2:	1964      	adds	r4, r4, r5
900157e4:	444e      	add	r6, r9
900157e6:	bf54      	ite	pl
900157e8:	9f03      	ldrpl	r7, [sp, #12]
900157ea:	4647      	movmi	r7, r8
900157ec:	f8bc b004 	ldrh.w	fp, [ip, #4]
900157f0:	bf58      	it	pl
900157f2:	1a64      	subpl	r4, r4, r1
900157f4:	443b      	add	r3, r7
900157f6:	44bb      	add	fp, r7
900157f8:	f8ac b004 	strh.w	fp, [ip, #4]
900157fc:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015800:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015804:	f8ac b006 	strh.w	fp, [ip, #6]
90015808:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001580c:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015810:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015814:	ea5b 0707 	orrs.w	r7, fp, r7
90015818:	d011      	beq.n	9001583e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
9001581a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
9001581e:	f1bb 0f00 	cmp.w	fp, #0
90015822:	db0c      	blt.n	9001583e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015824:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015826:	45bb      	cmp	fp, r7
90015828:	da09      	bge.n	9001583e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
9001582a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
9001582e:	45bb      	cmp	fp, r7
90015830:	bf3c      	itt	cc
90015832:	f10c 0708 	addcc.w	r7, ip, #8
90015836:	6107      	strcc	r7, [r0, #16]
90015838:	f10b 0701 	add.w	r7, fp, #1
9001583c:	6087      	str	r7, [r0, #8]
9001583e:	6907      	ldr	r7, [r0, #16]
90015840:	45b6      	cmp	lr, r6
90015842:	803e      	strh	r6, [r7, #0]
90015844:	807a      	strh	r2, [r7, #2]
90015846:	f8a7 a004 	strh.w	sl, [r7, #4]
9001584a:	f8a7 a006 	strh.w	sl, [r7, #6]
9001584e:	d1c6      	bne.n	900157de <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
90015850:	9a04      	ldr	r2, [sp, #16]
90015852:	1ad3      	subs	r3, r2, r3
90015854:	6902      	ldr	r2, [r0, #16]
90015856:	8891      	ldrh	r1, [r2, #4]
90015858:	88d6      	ldrh	r6, [r2, #6]
9001585a:	4419      	add	r1, r3
9001585c:	8091      	strh	r1, [r2, #4]
9001585e:	9902      	ldr	r1, [sp, #8]
90015860:	f101 0c20 	add.w	ip, r1, #32
90015864:	9901      	ldr	r1, [sp, #4]
90015866:	ebac 0c01 	sub.w	ip, ip, r1
9001586a:	fb03 630c 	mla	r3, r3, ip, r6
9001586e:	80d3      	strh	r3, [r2, #6]
90015870:	e750      	b.n	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015872:	9d05      	ldr	r5, [sp, #20]
90015874:	1aa2      	subs	r2, r4, r2
90015876:	eba5 0501 	sub.w	r5, r5, r1
9001587a:	9202      	str	r2, [sp, #8]
9001587c:	9508      	str	r5, [sp, #32]
9001587e:	f140 8128 	bpl.w	90015ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
90015882:	9a03      	ldr	r2, [sp, #12]
90015884:	2a00      	cmp	r2, #0
90015886:	f6ff af45 	blt.w	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
9001588a:	9a02      	ldr	r2, [sp, #8]
9001588c:	f04f 34ff 	mov.w	r4, #4294967295
90015890:	4252      	negs	r2, r2
90015892:	940b      	str	r4, [sp, #44]	; 0x2c
90015894:	2400      	movs	r4, #0
90015896:	9202      	str	r2, [sp, #8]
90015898:	9a06      	ldr	r2, [sp, #24]
9001589a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
9001589e:	9206      	str	r2, [sp, #24]
900158a0:	462a      	mov	r2, r5
900158a2:	435a      	muls	r2, r3
900158a4:	9401      	str	r4, [sp, #4]
900158a6:	9c02      	ldr	r4, [sp, #8]
900158a8:	9d02      	ldr	r5, [sp, #8]
900158aa:	fb92 f4f4 	sdiv	r4, r2, r4
900158ae:	fb05 2214 	mls	r2, r5, r4, r2
900158b2:	2a00      	cmp	r2, #0
900158b4:	9207      	str	r2, [sp, #28]
900158b6:	bfbc      	itt	lt
900158b8:	1952      	addlt	r2, r2, r5
900158ba:	f104 34ff 	addlt.w	r4, r4, #4294967295
900158be:	6905      	ldr	r5, [r0, #16]
900158c0:	bfb8      	it	lt
900158c2:	9207      	strlt	r2, [sp, #28]
900158c4:	eb04 0901 	add.w	r9, r4, r1
900158c8:	9a01      	ldr	r2, [sp, #4]
900158ca:	ea4f 1669 	mov.w	r6, r9, asr #5
900158ce:	429a      	cmp	r2, r3
900158d0:	f040 8111 	bne.w	90015af6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
900158d4:	f9b5 3000 	ldrsh.w	r3, [r5]
900158d8:	429e      	cmp	r6, r3
900158da:	d104      	bne.n	900158e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
900158dc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900158e0:	9a03      	ldr	r2, [sp, #12]
900158e2:	429a      	cmp	r2, r3
900158e4:	d01b      	beq.n	9001591e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
900158e6:	88ea      	ldrh	r2, [r5, #6]
900158e8:	88ab      	ldrh	r3, [r5, #4]
900158ea:	4313      	orrs	r3, r2
900158ec:	d010      	beq.n	90015910 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
900158ee:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900158f2:	2a00      	cmp	r2, #0
900158f4:	db0c      	blt.n	90015910 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
900158f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900158f8:	429a      	cmp	r2, r3
900158fa:	da09      	bge.n	90015910 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
900158fc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
90015900:	429a      	cmp	r2, r3
90015902:	f102 0201 	add.w	r2, r2, #1
90015906:	bf38      	it	cc
90015908:	3508      	addcc	r5, #8
9001590a:	6082      	str	r2, [r0, #8]
9001590c:	bf38      	it	cc
9001590e:	6105      	strcc	r5, [r0, #16]
90015910:	6903      	ldr	r3, [r0, #16]
90015912:	9a03      	ldr	r2, [sp, #12]
90015914:	801e      	strh	r6, [r3, #0]
90015916:	805a      	strh	r2, [r3, #2]
90015918:	2200      	movs	r2, #0
9001591a:	809a      	strh	r2, [r3, #4]
9001591c:	80da      	strh	r2, [r3, #6]
9001591e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015920:	9a03      	ldr	r2, [sp, #12]
90015922:	6901      	ldr	r1, [r0, #16]
90015924:	441a      	add	r2, r3
90015926:	f9b1 3000 	ldrsh.w	r3, [r1]
9001592a:	42b3      	cmp	r3, r6
9001592c:	d103      	bne.n	90015936 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
9001592e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90015932:	429a      	cmp	r2, r3
90015934:	d01a      	beq.n	9001596c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
90015936:	88cc      	ldrh	r4, [r1, #6]
90015938:	888b      	ldrh	r3, [r1, #4]
9001593a:	4323      	orrs	r3, r4
9001593c:	d010      	beq.n	90015960 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
9001593e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015942:	2c00      	cmp	r4, #0
90015944:	db0c      	blt.n	90015960 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015946:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015948:	429c      	cmp	r4, r3
9001594a:	da09      	bge.n	90015960 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
9001594c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015950:	429c      	cmp	r4, r3
90015952:	f104 0401 	add.w	r4, r4, #1
90015956:	bf38      	it	cc
90015958:	3108      	addcc	r1, #8
9001595a:	6084      	str	r4, [r0, #8]
9001595c:	bf38      	it	cc
9001595e:	6101      	strcc	r1, [r0, #16]
90015960:	6903      	ldr	r3, [r0, #16]
90015962:	2100      	movs	r1, #0
90015964:	801e      	strh	r6, [r3, #0]
90015966:	805a      	strh	r2, [r3, #2]
90015968:	8099      	strh	r1, [r3, #4]
9001596a:	80d9      	strh	r1, [r3, #6]
9001596c:	9b06      	ldr	r3, [sp, #24]
9001596e:	4293      	cmp	r3, r2
90015970:	f000 8082 	beq.w	90015a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
90015974:	9b08      	ldr	r3, [sp, #32]
90015976:	9902      	ldr	r1, [sp, #8]
90015978:	015b      	lsls	r3, r3, #5
9001597a:	9c02      	ldr	r4, [sp, #8]
9001597c:	fb93 f1f1 	sdiv	r1, r3, r1
90015980:	fb04 3311 	mls	r3, r4, r1, r3
90015984:	9103      	str	r1, [sp, #12]
90015986:	2b00      	cmp	r3, #0
90015988:	9308      	str	r3, [sp, #32]
9001598a:	da04      	bge.n	90015996 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
9001598c:	1e4b      	subs	r3, r1, #1
9001598e:	9303      	str	r3, [sp, #12]
90015990:	9b08      	ldr	r3, [sp, #32]
90015992:	4423      	add	r3, r4
90015994:	9308      	str	r3, [sp, #32]
90015996:	9b07      	ldr	r3, [sp, #28]
90015998:	464f      	mov	r7, r9
9001599a:	9902      	ldr	r1, [sp, #8]
9001599c:	2600      	movs	r6, #0
9001599e:	1a5b      	subs	r3, r3, r1
900159a0:	9307      	str	r3, [sp, #28]
900159a2:	9b01      	ldr	r3, [sp, #4]
900159a4:	f1c3 0320 	rsb	r3, r3, #32
900159a8:	930e      	str	r3, [sp, #56]	; 0x38
900159aa:	990e      	ldr	r1, [sp, #56]	; 0x38
900159ac:	9b01      	ldr	r3, [sp, #4]
900159ae:	1a5b      	subs	r3, r3, r1
900159b0:	930a      	str	r3, [sp, #40]	; 0x28
900159b2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
900159b6:	185b      	adds	r3, r3, r1
900159b8:	bf58      	it	pl
900159ba:	9902      	ldrpl	r1, [sp, #8]
900159bc:	9307      	str	r3, [sp, #28]
900159be:	bf57      	itett	pl
900159c0:	1a5b      	subpl	r3, r3, r1
900159c2:	9903      	ldrmi	r1, [sp, #12]
900159c4:	9307      	strpl	r3, [sp, #28]
900159c6:	9b03      	ldrpl	r3, [sp, #12]
900159c8:	bf58      	it	pl
900159ca:	1c59      	addpl	r1, r3, #1
900159cc:	2a00      	cmp	r2, #0
900159ce:	4489      	add	r9, r1
900159d0:	ea4f 1a69 	mov.w	sl, r9, asr #5
900159d4:	db2e      	blt.n	90015a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
900159d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900159d8:	4293      	cmp	r3, r2
900159da:	dd2b      	ble.n	90015a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
900159dc:	9c01      	ldr	r4, [sp, #4]
900159de:	6905      	ldr	r5, [r0, #16]
900159e0:	46a0      	mov	r8, r4
900159e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900159e4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
900159e8:	45a0      	cmp	r8, r4
900159ea:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
900159ee:	f040 814c 	bne.w	90015c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
900159f2:	f9b5 1000 	ldrsh.w	r1, [r5]
900159f6:	4551      	cmp	r1, sl
900159f8:	d103      	bne.n	90015a02 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
900159fa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
900159fe:	4291      	cmp	r1, r2
90015a00:	d018      	beq.n	90015a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015a02:	ea5c 010e 	orrs.w	r1, ip, lr
90015a06:	d00f      	beq.n	90015a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015a08:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
90015a0c:	2900      	cmp	r1, #0
90015a0e:	db0b      	blt.n	90015a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015a10:	428b      	cmp	r3, r1
90015a12:	dd09      	ble.n	90015a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015a14:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
90015a18:	4299      	cmp	r1, r3
90015a1a:	f101 0101 	add.w	r1, r1, #1
90015a1e:	bf38      	it	cc
90015a20:	3508      	addcc	r5, #8
90015a22:	6081      	str	r1, [r0, #8]
90015a24:	bf38      	it	cc
90015a26:	6105      	strcc	r5, [r0, #16]
90015a28:	6903      	ldr	r3, [r0, #16]
90015a2a:	f8a3 a000 	strh.w	sl, [r3]
90015a2e:	805a      	strh	r2, [r3, #2]
90015a30:	809e      	strh	r6, [r3, #4]
90015a32:	80de      	strh	r6, [r3, #6]
90015a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015a36:	6901      	ldr	r1, [r0, #16]
90015a38:	441a      	add	r2, r3
90015a3a:	88cc      	ldrh	r4, [r1, #6]
90015a3c:	888b      	ldrh	r3, [r1, #4]
90015a3e:	4323      	orrs	r3, r4
90015a40:	d010      	beq.n	90015a64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015a42:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015a46:	2c00      	cmp	r4, #0
90015a48:	db0c      	blt.n	90015a64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015a4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015a4c:	429c      	cmp	r4, r3
90015a4e:	da09      	bge.n	90015a64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015a50:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015a54:	429c      	cmp	r4, r3
90015a56:	f104 0401 	add.w	r4, r4, #1
90015a5a:	bf38      	it	cc
90015a5c:	3108      	addcc	r1, #8
90015a5e:	6084      	str	r4, [r0, #8]
90015a60:	bf38      	it	cc
90015a62:	6101      	strcc	r1, [r0, #16]
90015a64:	6903      	ldr	r3, [r0, #16]
90015a66:	464f      	mov	r7, r9
90015a68:	f8a3 a000 	strh.w	sl, [r3]
90015a6c:	805a      	strh	r2, [r3, #2]
90015a6e:	809e      	strh	r6, [r3, #4]
90015a70:	80de      	strh	r6, [r3, #6]
90015a72:	9b06      	ldr	r3, [sp, #24]
90015a74:	4293      	cmp	r3, r2
90015a76:	d19c      	bne.n	900159b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
90015a78:	9b01      	ldr	r3, [sp, #4]
90015a7a:	6907      	ldr	r7, [r0, #16]
90015a7c:	f1c3 0620 	rsb	r6, r3, #32
90015a80:	9b05      	ldr	r3, [sp, #20]
90015a82:	ea4f 1e63 	mov.w	lr, r3, asr #5
90015a86:	9b04      	ldr	r3, [sp, #16]
90015a88:	429e      	cmp	r6, r3
90015a8a:	f040 81c7 	bne.w	90015e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
90015a8e:	f9b7 3000 	ldrsh.w	r3, [r7]
90015a92:	459e      	cmp	lr, r3
90015a94:	d104      	bne.n	90015aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
90015a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015a9a:	429a      	cmp	r2, r3
90015a9c:	f43f ae3a 	beq.w	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015aa0:	88f9      	ldrh	r1, [r7, #6]
90015aa2:	88bb      	ldrh	r3, [r7, #4]
90015aa4:	430b      	orrs	r3, r1
90015aa6:	d010      	beq.n	90015aca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015aac:	2b00      	cmp	r3, #0
90015aae:	db0c      	blt.n	90015aca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015ab0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90015ab2:	428b      	cmp	r3, r1
90015ab4:	da09      	bge.n	90015aca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015ab6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015aba:	428b      	cmp	r3, r1
90015abc:	f103 0301 	add.w	r3, r3, #1
90015ac0:	bf38      	it	cc
90015ac2:	3708      	addcc	r7, #8
90015ac4:	6083      	str	r3, [r0, #8]
90015ac6:	bf38      	it	cc
90015ac8:	6107      	strcc	r7, [r0, #16]
90015aca:	6903      	ldr	r3, [r0, #16]
90015acc:	f8a3 e000 	strh.w	lr, [r3]
90015ad0:	e603      	b.n	900156da <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
90015ad2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015ad4:	9c03      	ldr	r4, [sp, #12]
90015ad6:	42a2      	cmp	r2, r4
90015ad8:	f6ff ae1c 	blt.w	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015adc:	9c06      	ldr	r4, [sp, #24]
90015ade:	42a2      	cmp	r2, r4
90015ae0:	9c08      	ldr	r4, [sp, #32]
90015ae2:	bfbc      	itt	lt
90015ae4:	3201      	addlt	r2, #1
90015ae6:	9206      	strlt	r2, [sp, #24]
90015ae8:	f1c3 0220 	rsb	r2, r3, #32
90015aec:	4362      	muls	r2, r4
90015aee:	2401      	movs	r4, #1
90015af0:	940b      	str	r4, [sp, #44]	; 0x2c
90015af2:	2420      	movs	r4, #32
90015af4:	e6d6      	b.n	900158a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
90015af6:	ea4f 1861 	mov.w	r8, r1, asr #5
90015afa:	f009 021f 	and.w	r2, r9, #31
90015afe:	f001 011f 	and.w	r1, r1, #31
90015b02:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90015b06:	920c      	str	r2, [sp, #48]	; 0x30
90015b08:	45b0      	cmp	r8, r6
90015b0a:	9a01      	ldr	r2, [sp, #4]
90015b0c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
90015b10:	eba2 0203 	sub.w	r2, r2, r3
90015b14:	d108      	bne.n	90015b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
90015b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90015b18:	4496      	add	lr, r2
90015b1a:	4419      	add	r1, r3
90015b1c:	f8a5 e004 	strh.w	lr, [r5, #4]
90015b20:	fb02 a101 	mla	r1, r2, r1, sl
90015b24:	80e9      	strh	r1, [r5, #6]
90015b26:	e6fa      	b.n	9001591e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015b28:	2c00      	cmp	r4, #0
90015b2a:	f2c0 80a7 	blt.w	90015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
90015b2e:	2701      	movs	r7, #1
90015b30:	f1c1 0c20 	rsb	ip, r1, #32
90015b34:	970a      	str	r7, [sp, #40]	; 0x28
90015b36:	2720      	movs	r7, #32
90015b38:	fb02 f20c 	mul.w	r2, r2, ip
90015b3c:	9709      	str	r7, [sp, #36]	; 0x24
90015b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
90015b40:	fb92 fcf4 	sdiv	ip, r2, r4
90015b44:	fb04 221c 	mls	r2, r4, ip, r2
90015b48:	4439      	add	r1, r7
90015b4a:	2a00      	cmp	r2, #0
90015b4c:	bfbc      	itt	lt
90015b4e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
90015b52:	1912      	addlt	r2, r2, r4
90015b54:	fb0c a101 	mla	r1, ip, r1, sl
90015b58:	44e6      	add	lr, ip
90015b5a:	80e9      	strh	r1, [r5, #6]
90015b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
90015b5e:	f8a5 e004 	strh.w	lr, [r5, #4]
90015b62:	eb08 0501 	add.w	r5, r8, r1
90015b66:	6901      	ldr	r1, [r0, #16]
90015b68:	f8b1 8006 	ldrh.w	r8, [r1, #6]
90015b6c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
90015b70:	ea58 070e 	orrs.w	r7, r8, lr
90015b74:	d010      	beq.n	90015b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015b76:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
90015b7a:	f1be 0f00 	cmp.w	lr, #0
90015b7e:	db0b      	blt.n	90015b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015b80:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015b82:	45be      	cmp	lr, r7
90015b84:	da08      	bge.n	90015b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015b86:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
90015b8a:	45be      	cmp	lr, r7
90015b8c:	bf3c      	itt	cc
90015b8e:	3108      	addcc	r1, #8
90015b90:	6101      	strcc	r1, [r0, #16]
90015b92:	f10e 0101 	add.w	r1, lr, #1
90015b96:	6081      	str	r1, [r0, #8]
90015b98:	6901      	ldr	r1, [r0, #16]
90015b9a:	f04f 0e00 	mov.w	lr, #0
90015b9e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90015ba2:	42ae      	cmp	r6, r5
90015ba4:	800d      	strh	r5, [r1, #0]
90015ba6:	4463      	add	r3, ip
90015ba8:	f8a1 8002 	strh.w	r8, [r1, #2]
90015bac:	f8a1 e004 	strh.w	lr, [r1, #4]
90015bb0:	f8a1 e006 	strh.w	lr, [r1, #6]
90015bb4:	d053      	beq.n	90015c5e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
90015bb6:	9901      	ldr	r1, [sp, #4]
90015bb8:	1b12      	subs	r2, r2, r4
90015bba:	1ac9      	subs	r1, r1, r3
90015bbc:	4461      	add	r1, ip
90015bbe:	0149      	lsls	r1, r1, #5
90015bc0:	fb91 fef4 	sdiv	lr, r1, r4
90015bc4:	fb04 111e 	mls	r1, r4, lr, r1
90015bc8:	2900      	cmp	r1, #0
90015bca:	bfbc      	itt	lt
90015bcc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
90015bd0:	1909      	addlt	r1, r1, r4
90015bd2:	f10e 0701 	add.w	r7, lr, #1
90015bd6:	970d      	str	r7, [sp, #52]	; 0x34
90015bd8:	f8d0 a010 	ldr.w	sl, [r0, #16]
90015bdc:	1852      	adds	r2, r2, r1
90015bde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90015be0:	bf54      	ite	pl
90015be2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
90015be6:	46f4      	movmi	ip, lr
90015be8:	f8ba b004 	ldrh.w	fp, [sl, #4]
90015bec:	bf58      	it	pl
90015bee:	1b12      	subpl	r2, r2, r4
90015bf0:	4463      	add	r3, ip
90015bf2:	443d      	add	r5, r7
90015bf4:	44e3      	add	fp, ip
90015bf6:	f8aa b004 	strh.w	fp, [sl, #4]
90015bfa:	f8ba b006 	ldrh.w	fp, [sl, #6]
90015bfe:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
90015c02:	f8aa b006 	strh.w	fp, [sl, #6]
90015c06:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015c0a:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015c0e:	f8bc a004 	ldrh.w	sl, [ip, #4]
90015c12:	ea5b 070a 	orrs.w	r7, fp, sl
90015c16:	d014      	beq.n	90015c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015c18:	f9bc a002 	ldrsh.w	sl, [ip, #2]
90015c1c:	f1ba 0f00 	cmp.w	sl, #0
90015c20:	db0f      	blt.n	90015c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015c22:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015c24:	45ba      	cmp	sl, r7
90015c26:	da0c      	bge.n	90015c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015c28:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
90015c2c:	45ba      	cmp	sl, r7
90015c2e:	f10a 0a01 	add.w	sl, sl, #1
90015c32:	bf38      	it	cc
90015c34:	f10c 0c08 	addcc.w	ip, ip, #8
90015c38:	f8c0 a008 	str.w	sl, [r0, #8]
90015c3c:	bf38      	it	cc
90015c3e:	f8c0 c010 	strcc.w	ip, [r0, #16]
90015c42:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015c46:	f04f 0700 	mov.w	r7, #0
90015c4a:	42ae      	cmp	r6, r5
90015c4c:	f8ac 5000 	strh.w	r5, [ip]
90015c50:	f8ac 8002 	strh.w	r8, [ip, #2]
90015c54:	f8ac 7004 	strh.w	r7, [ip, #4]
90015c58:	f8ac 7006 	strh.w	r7, [ip, #6]
90015c5c:	d1bc      	bne.n	90015bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
90015c5e:	6904      	ldr	r4, [r0, #16]
90015c60:	9a01      	ldr	r2, [sp, #4]
90015c62:	990c      	ldr	r1, [sp, #48]	; 0x30
90015c64:	1ad3      	subs	r3, r2, r3
90015c66:	88a2      	ldrh	r2, [r4, #4]
90015c68:	3120      	adds	r1, #32
90015c6a:	441a      	add	r2, r3
90015c6c:	80a2      	strh	r2, [r4, #4]
90015c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90015c70:	1a89      	subs	r1, r1, r2
90015c72:	88e2      	ldrh	r2, [r4, #6]
90015c74:	fb03 2301 	mla	r3, r3, r1, r2
90015c78:	80e3      	strh	r3, [r4, #6]
90015c7a:	e650      	b.n	9001591e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015c7c:	f04f 37ff 	mov.w	r7, #4294967295
90015c80:	434a      	muls	r2, r1
90015c82:	4264      	negs	r4, r4
90015c84:	970a      	str	r7, [sp, #40]	; 0x28
90015c86:	2700      	movs	r7, #0
90015c88:	e758      	b.n	90015b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
90015c8a:	ea4f 1867 	mov.w	r8, r7, asr #5
90015c8e:	f009 031f 	and.w	r3, r9, #31
90015c92:	f007 071f 	and.w	r7, r7, #31
90015c96:	fa1f fc8c 	uxth.w	ip, ip
90015c9a:	45d0      	cmp	r8, sl
90015c9c:	930f      	str	r3, [sp, #60]	; 0x3c
90015c9e:	fa1f fe8e 	uxth.w	lr, lr
90015ca2:	d10a      	bne.n	90015cba <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
90015ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015ca6:	449c      	add	ip, r3
90015ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90015caa:	441f      	add	r7, r3
90015cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015cae:	f8a5 c004 	strh.w	ip, [r5, #4]
90015cb2:	fb03 e707 	mla	r7, r3, r7, lr
90015cb6:	80ef      	strh	r7, [r5, #6]
90015cb8:	e6bc      	b.n	90015a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015cba:	2900      	cmp	r1, #0
90015cbc:	f2c0 80a6 	blt.w	90015e0c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
90015cc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90015cc2:	f1c7 0320 	rsb	r3, r7, #32
90015cc6:	4363      	muls	r3, r4
90015cc8:	2401      	movs	r4, #1
90015cca:	940d      	str	r4, [sp, #52]	; 0x34
90015ccc:	2420      	movs	r4, #32
90015cce:	940c      	str	r4, [sp, #48]	; 0x30
90015cd0:	fb93 f4f1 	sdiv	r4, r3, r1
90015cd4:	fb01 3b14 	mls	fp, r1, r4, r3
90015cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90015cda:	f1bb 0f00 	cmp.w	fp, #0
90015cde:	441f      	add	r7, r3
90015ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90015ce2:	bfbc      	itt	lt
90015ce4:	f104 34ff 	addlt.w	r4, r4, #4294967295
90015ce8:	448b      	addlt	fp, r1
90015cea:	fb04 e707 	mla	r7, r4, r7, lr
90015cee:	44a4      	add	ip, r4
90015cf0:	80ef      	strh	r7, [r5, #6]
90015cf2:	f8a5 c004 	strh.w	ip, [r5, #4]
90015cf6:	eb08 0503 	add.w	r5, r8, r3
90015cfa:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015cfe:	f8bc e006 	ldrh.w	lr, [ip, #6]
90015d02:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015d06:	ea5e 0307 	orrs.w	r3, lr, r7
90015d0a:	d011      	beq.n	90015d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015d0c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
90015d10:	f1be 0f00 	cmp.w	lr, #0
90015d14:	db0c      	blt.n	90015d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015d16:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015d18:	45be      	cmp	lr, r7
90015d1a:	da09      	bge.n	90015d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015d1c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
90015d20:	45be      	cmp	lr, r7
90015d22:	bf3c      	itt	cc
90015d24:	f10c 0708 	addcc.w	r7, ip, #8
90015d28:	6107      	strcc	r7, [r0, #16]
90015d2a:	f10e 0701 	add.w	r7, lr, #1
90015d2e:	6087      	str	r7, [r0, #8]
90015d30:	6907      	ldr	r7, [r0, #16]
90015d32:	b213      	sxth	r3, r2
90015d34:	4555      	cmp	r5, sl
90015d36:	9310      	str	r3, [sp, #64]	; 0x40
90015d38:	807b      	strh	r3, [r7, #2]
90015d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90015d3c:	803d      	strh	r5, [r7, #0]
90015d3e:	80be      	strh	r6, [r7, #4]
90015d40:	eb04 0c03 	add.w	ip, r4, r3
90015d44:	80fe      	strh	r6, [r7, #6]
90015d46:	d050      	beq.n	90015dea <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
90015d48:	9b01      	ldr	r3, [sp, #4]
90015d4a:	eba3 070c 	sub.w	r7, r3, ip
90015d4e:	ebab 0301 	sub.w	r3, fp, r1
90015d52:	443c      	add	r4, r7
90015d54:	9309      	str	r3, [sp, #36]	; 0x24
90015d56:	0164      	lsls	r4, r4, #5
90015d58:	fb94 f8f1 	sdiv	r8, r4, r1
90015d5c:	fb01 4418 	mls	r4, r1, r8, r4
90015d60:	2c00      	cmp	r4, #0
90015d62:	bfbc      	itt	lt
90015d64:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015d68:	1864      	addlt	r4, r4, r1
90015d6a:	f108 0701 	add.w	r7, r8, #1
90015d6e:	9711      	str	r7, [sp, #68]	; 0x44
90015d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
90015d72:	f8d0 e010 	ldr.w	lr, [r0, #16]
90015d76:	191b      	adds	r3, r3, r4
90015d78:	f8be b004 	ldrh.w	fp, [lr, #4]
90015d7c:	bf54      	ite	pl
90015d7e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
90015d80:	4647      	movmi	r7, r8
90015d82:	9309      	str	r3, [sp, #36]	; 0x24
90015d84:	bf58      	it	pl
90015d86:	1a5b      	subpl	r3, r3, r1
90015d88:	44bb      	add	fp, r7
90015d8a:	44bc      	add	ip, r7
90015d8c:	bf58      	it	pl
90015d8e:	9309      	strpl	r3, [sp, #36]	; 0x24
90015d90:	f8ae b004 	strh.w	fp, [lr, #4]
90015d94:	f8be b006 	ldrh.w	fp, [lr, #6]
90015d98:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015d9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
90015d9e:	f8ae b006 	strh.w	fp, [lr, #6]
90015da2:	443d      	add	r5, r7
90015da4:	f8d0 e010 	ldr.w	lr, [r0, #16]
90015da8:	f8be b006 	ldrh.w	fp, [lr, #6]
90015dac:	f8be 7004 	ldrh.w	r7, [lr, #4]
90015db0:	ea5b 0307 	orrs.w	r3, fp, r7
90015db4:	d011      	beq.n	90015dda <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015db6:	f9be b002 	ldrsh.w	fp, [lr, #2]
90015dba:	f1bb 0f00 	cmp.w	fp, #0
90015dbe:	db0c      	blt.n	90015dda <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015dc0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015dc2:	45bb      	cmp	fp, r7
90015dc4:	da09      	bge.n	90015dda <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015dc6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015dca:	45bb      	cmp	fp, r7
90015dcc:	bf3c      	itt	cc
90015dce:	f10e 0708 	addcc.w	r7, lr, #8
90015dd2:	6107      	strcc	r7, [r0, #16]
90015dd4:	f10b 0701 	add.w	r7, fp, #1
90015dd8:	6087      	str	r7, [r0, #8]
90015dda:	6907      	ldr	r7, [r0, #16]
90015ddc:	4555      	cmp	r5, sl
90015dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015de0:	803d      	strh	r5, [r7, #0]
90015de2:	807b      	strh	r3, [r7, #2]
90015de4:	80be      	strh	r6, [r7, #4]
90015de6:	80fe      	strh	r6, [r7, #6]
90015de8:	d1c2      	bne.n	90015d70 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
90015dea:	9b01      	ldr	r3, [sp, #4]
90015dec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90015dee:	eba3 0c0c 	sub.w	ip, r3, ip
90015df2:	6903      	ldr	r3, [r0, #16]
90015df4:	3720      	adds	r7, #32
90015df6:	8899      	ldrh	r1, [r3, #4]
90015df8:	4461      	add	r1, ip
90015dfa:	8099      	strh	r1, [r3, #4]
90015dfc:	990c      	ldr	r1, [sp, #48]	; 0x30
90015dfe:	1a7f      	subs	r7, r7, r1
90015e00:	88d9      	ldrh	r1, [r3, #6]
90015e02:	fb0c 1c07 	mla	ip, ip, r7, r1
90015e06:	f8a3 c006 	strh.w	ip, [r3, #6]
90015e0a:	e613      	b.n	90015a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015e0c:	f04f 34ff 	mov.w	r4, #4294967295
90015e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015e12:	4249      	negs	r1, r1
90015e14:	940d      	str	r4, [sp, #52]	; 0x34
90015e16:	2400      	movs	r4, #0
90015e18:	437b      	muls	r3, r7
90015e1a:	e758      	b.n	90015cce <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
90015e1c:	9905      	ldr	r1, [sp, #20]
90015e1e:	ea4f 1b69 	mov.w	fp, r9, asr #5
90015e22:	f009 0c1f 	and.w	ip, r9, #31
90015e26:	f8b7 8004 	ldrh.w	r8, [r7, #4]
90015e2a:	f001 011f 	and.w	r1, r1, #31
90015e2e:	45f3      	cmp	fp, lr
90015e30:	f8b7 a006 	ldrh.w	sl, [r7, #6]
90015e34:	9102      	str	r1, [sp, #8]
90015e36:	9904      	ldr	r1, [sp, #16]
90015e38:	eba1 0406 	sub.w	r4, r1, r6
90015e3c:	d108      	bne.n	90015e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
90015e3e:	9b02      	ldr	r3, [sp, #8]
90015e40:	44a0      	add	r8, r4
90015e42:	449c      	add	ip, r3
90015e44:	f8a7 8004 	strh.w	r8, [r7, #4]
90015e48:	fb04 a40c 	mla	r4, r4, ip, sl
90015e4c:	80fc      	strh	r4, [r7, #6]
90015e4e:	e461      	b.n	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015e50:	9905      	ldr	r1, [sp, #20]
90015e52:	ebb1 0109 	subs.w	r1, r1, r9
90015e56:	bf51      	iteee	pl
90015e58:	f1cc 0520 	rsbpl	r5, ip, #32
90015e5c:	fb04 f40c 	mulmi.w	r4, r4, ip
90015e60:	4249      	negmi	r1, r1
90015e62:	2500      	movmi	r5, #0
90015e64:	bf5d      	ittte	pl
90015e66:	436c      	mulpl	r4, r5
90015e68:	2520      	movpl	r5, #32
90015e6a:	f04f 0901 	movpl.w	r9, #1
90015e6e:	f04f 39ff 	movmi.w	r9, #4294967295
90015e72:	9501      	str	r5, [sp, #4]
90015e74:	9b01      	ldr	r3, [sp, #4]
90015e76:	fb94 f5f1 	sdiv	r5, r4, r1
90015e7a:	fb01 4415 	mls	r4, r1, r5, r4
90015e7e:	449c      	add	ip, r3
90015e80:	eb0b 0309 	add.w	r3, fp, r9
90015e84:	2c00      	cmp	r4, #0
90015e86:	bfbc      	itt	lt
90015e88:	f105 35ff 	addlt.w	r5, r5, #4294967295
90015e8c:	1864      	addlt	r4, r4, r1
90015e8e:	44a8      	add	r8, r5
90015e90:	fb05 ac0c 	mla	ip, r5, ip, sl
90015e94:	f8a7 8004 	strh.w	r8, [r7, #4]
90015e98:	f8a7 c006 	strh.w	ip, [r7, #6]
90015e9c:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015ea0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
90015ea4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015ea8:	ea58 0707 	orrs.w	r7, r8, r7
90015eac:	d011      	beq.n	90015ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015eae:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90015eb2:	f1b8 0f00 	cmp.w	r8, #0
90015eb6:	db0c      	blt.n	90015ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015eb8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015eba:	45b8      	cmp	r8, r7
90015ebc:	da09      	bge.n	90015ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015ebe:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
90015ec2:	45b8      	cmp	r8, r7
90015ec4:	bf3c      	itt	cc
90015ec6:	f10c 0708 	addcc.w	r7, ip, #8
90015eca:	6107      	strcc	r7, [r0, #16]
90015ecc:	f108 0701 	add.w	r7, r8, #1
90015ed0:	6087      	str	r7, [r0, #8]
90015ed2:	6907      	ldr	r7, [r0, #16]
90015ed4:	f04f 0c00 	mov.w	ip, #0
90015ed8:	b212      	sxth	r2, r2
90015eda:	459e      	cmp	lr, r3
90015edc:	803b      	strh	r3, [r7, #0]
90015ede:	442e      	add	r6, r5
90015ee0:	807a      	strh	r2, [r7, #2]
90015ee2:	f8a7 c004 	strh.w	ip, [r7, #4]
90015ee6:	f8a7 c006 	strh.w	ip, [r7, #6]
90015eea:	d04b      	beq.n	90015f84 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
90015eec:	9f04      	ldr	r7, [sp, #16]
90015eee:	1a64      	subs	r4, r4, r1
90015ef0:	f04f 0a00 	mov.w	sl, #0
90015ef4:	1bbf      	subs	r7, r7, r6
90015ef6:	443d      	add	r5, r7
90015ef8:	016d      	lsls	r5, r5, #5
90015efa:	fb95 f8f1 	sdiv	r8, r5, r1
90015efe:	fb01 5518 	mls	r5, r1, r8, r5
90015f02:	4565      	cmp	r5, ip
90015f04:	bfbc      	itt	lt
90015f06:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015f0a:	186d      	addlt	r5, r5, r1
90015f0c:	f108 0701 	add.w	r7, r8, #1
90015f10:	9703      	str	r7, [sp, #12]
90015f12:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015f16:	1964      	adds	r4, r4, r5
90015f18:	444b      	add	r3, r9
90015f1a:	bf54      	ite	pl
90015f1c:	9f03      	ldrpl	r7, [sp, #12]
90015f1e:	4647      	movmi	r7, r8
90015f20:	f8bc b004 	ldrh.w	fp, [ip, #4]
90015f24:	bf58      	it	pl
90015f26:	1a64      	subpl	r4, r4, r1
90015f28:	443e      	add	r6, r7
90015f2a:	44bb      	add	fp, r7
90015f2c:	f8ac b004 	strh.w	fp, [ip, #4]
90015f30:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015f34:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015f38:	f8ac b006 	strh.w	fp, [ip, #6]
90015f3c:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015f40:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015f44:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015f48:	ea5b 0707 	orrs.w	r7, fp, r7
90015f4c:	d011      	beq.n	90015f72 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015f4e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
90015f52:	f1bb 0f00 	cmp.w	fp, #0
90015f56:	db0c      	blt.n	90015f72 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015f58:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015f5a:	45bb      	cmp	fp, r7
90015f5c:	da09      	bge.n	90015f72 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015f5e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015f62:	45bb      	cmp	fp, r7
90015f64:	bf3c      	itt	cc
90015f66:	f10c 0708 	addcc.w	r7, ip, #8
90015f6a:	6107      	strcc	r7, [r0, #16]
90015f6c:	f10b 0701 	add.w	r7, fp, #1
90015f70:	6087      	str	r7, [r0, #8]
90015f72:	6907      	ldr	r7, [r0, #16]
90015f74:	459e      	cmp	lr, r3
90015f76:	803b      	strh	r3, [r7, #0]
90015f78:	807a      	strh	r2, [r7, #2]
90015f7a:	f8a7 a004 	strh.w	sl, [r7, #4]
90015f7e:	f8a7 a006 	strh.w	sl, [r7, #6]
90015f82:	d1c6      	bne.n	90015f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
90015f84:	9b04      	ldr	r3, [sp, #16]
90015f86:	1b9e      	subs	r6, r3, r6
90015f88:	6903      	ldr	r3, [r0, #16]
90015f8a:	889a      	ldrh	r2, [r3, #4]
90015f8c:	4432      	add	r2, r6
90015f8e:	809a      	strh	r2, [r3, #4]
90015f90:	9a02      	ldr	r2, [sp, #8]
90015f92:	f102 0c20 	add.w	ip, r2, #32
90015f96:	9a01      	ldr	r2, [sp, #4]
90015f98:	ebac 0c02 	sub.w	ip, ip, r2
90015f9c:	88da      	ldrh	r2, [r3, #6]
90015f9e:	fb06 260c 	mla	r6, r6, ip, r2
90015fa2:	80de      	strh	r6, [r3, #6]
90015fa4:	f7ff bbb6 	b.w	90015714 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

90015fa8 <_ZN8touchgfx7Outline6lineToEii>:
90015fa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015faa:	079b      	lsls	r3, r3, #30
90015fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90015fae:	460e      	mov	r6, r1
90015fb0:	4615      	mov	r5, r2
90015fb2:	d511      	bpl.n	90015fd8 <_ZN8touchgfx7Outline6lineToEii+0x30>
90015fb4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
90015fb8:	ea86 0701 	eor.w	r7, r6, r1
90015fbc:	ea85 0302 	eor.w	r3, r5, r2
90015fc0:	433b      	orrs	r3, r7
90015fc2:	d009      	beq.n	90015fd8 <_ZN8touchgfx7Outline6lineToEii+0x30>
90015fc4:	4633      	mov	r3, r6
90015fc6:	9500      	str	r5, [sp, #0]
90015fc8:	f7ff fb4c 	bl	90015664 <_ZN8touchgfx7Outline10renderLineEiiii>
90015fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015fce:	f043 0301 	orr.w	r3, r3, #1
90015fd2:	e9c0 6505 	strd	r6, r5, [r0, #20]
90015fd6:	6243      	str	r3, [r0, #36]	; 0x24
90015fd8:	b003      	add	sp, #12
90015fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015fdc <_ZN8touchgfx7Outline6moveToEii>:
90015fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015fde:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015fe0:	4615      	mov	r5, r2
90015fe2:	4604      	mov	r4, r0
90015fe4:	460e      	mov	r6, r1
90015fe6:	079a      	lsls	r2, r3, #30
90015fe8:	d401      	bmi.n	90015fee <_ZN8touchgfx7Outline6moveToEii+0x12>
90015fea:	f7ff fb07 	bl	900155fc <_ZN8touchgfx7Outline5resetEv>
90015fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015ff0:	07db      	lsls	r3, r3, #31
90015ff2:	d504      	bpl.n	90015ffe <_ZN8touchgfx7Outline6moveToEii+0x22>
90015ff4:	4620      	mov	r0, r4
90015ff6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
90015ffa:	f7ff ffd5 	bl	90015fa8 <_ZN8touchgfx7Outline6lineToEii>
90015ffe:	6923      	ldr	r3, [r4, #16]
90016000:	1170      	asrs	r0, r6, #5
90016002:	1169      	asrs	r1, r5, #5
90016004:	f9b3 2000 	ldrsh.w	r2, [r3]
90016008:	4290      	cmp	r0, r2
9001600a:	d103      	bne.n	90016014 <_ZN8touchgfx7Outline6moveToEii+0x38>
9001600c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90016010:	4291      	cmp	r1, r2
90016012:	d01a      	beq.n	9001604a <_ZN8touchgfx7Outline6moveToEii+0x6e>
90016014:	88df      	ldrh	r7, [r3, #6]
90016016:	889a      	ldrh	r2, [r3, #4]
90016018:	433a      	orrs	r2, r7
9001601a:	d010      	beq.n	9001603e <_ZN8touchgfx7Outline6moveToEii+0x62>
9001601c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90016020:	2a00      	cmp	r2, #0
90016022:	db0c      	blt.n	9001603e <_ZN8touchgfx7Outline6moveToEii+0x62>
90016024:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
90016026:	42ba      	cmp	r2, r7
90016028:	da09      	bge.n	9001603e <_ZN8touchgfx7Outline6moveToEii+0x62>
9001602a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
9001602e:	42ba      	cmp	r2, r7
90016030:	f102 0201 	add.w	r2, r2, #1
90016034:	bf38      	it	cc
90016036:	3308      	addcc	r3, #8
90016038:	60a2      	str	r2, [r4, #8]
9001603a:	bf38      	it	cc
9001603c:	6123      	strcc	r3, [r4, #16]
9001603e:	6923      	ldr	r3, [r4, #16]
90016040:	2200      	movs	r2, #0
90016042:	8018      	strh	r0, [r3, #0]
90016044:	8059      	strh	r1, [r3, #2]
90016046:	809a      	strh	r2, [r3, #4]
90016048:	80da      	strh	r2, [r3, #6]
9001604a:	6166      	str	r6, [r4, #20]
9001604c:	6225      	str	r5, [r4, #32]
9001604e:	e9c4 5606 	strd	r5, r6, [r4, #24]
90016052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90016054 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
90016054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016058:	b0d0      	sub	sp, #320	; 0x140
9001605a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
9001605e:	466c      	mov	r4, sp
90016060:	4627      	mov	r7, r4
90016062:	1a0d      	subs	r5, r1, r0
90016064:	f100 0308 	add.w	r3, r0, #8
90016068:	2d48      	cmp	r5, #72	; 0x48
9001606a:	f340 80d5 	ble.w	90016218 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001606e:	112d      	asrs	r5, r5, #4
90016070:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
90016074:	f9b0 9000 	ldrsh.w	r9, [r0]
90016078:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
9001607c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
90016080:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016084:	6816      	ldr	r6, [r2, #0]
90016086:	6006      	str	r6, [r0, #0]
90016088:	6856      	ldr	r6, [r2, #4]
9001608a:	6046      	str	r6, [r0, #4]
9001608c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90016090:	f8a2 8002 	strh.w	r8, [r2, #2]
90016094:	f8a2 e004 	strh.w	lr, [r2, #4]
90016098:	f8a2 c006 	strh.w	ip, [r2, #6]
9001609c:	f1a1 0208 	sub.w	r2, r1, #8
900160a0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
900160a4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
900160a8:	4565      	cmp	r5, ip
900160aa:	db06      	blt.n	900160ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
900160ac:	d119      	bne.n	900160e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
900160ae:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
900160b2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
900160b6:	42ae      	cmp	r6, r5
900160b8:	dd13      	ble.n	900160e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
900160ba:	460e      	mov	r6, r1
900160bc:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
900160c0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
900160c4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
900160c8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
900160cc:	601d      	str	r5, [r3, #0]
900160ce:	6875      	ldr	r5, [r6, #4]
900160d0:	605d      	str	r5, [r3, #4]
900160d2:	f821 9c08 	strh.w	r9, [r1, #-8]
900160d6:	f821 cc06 	strh.w	ip, [r1, #-6]
900160da:	f821 8c04 	strh.w	r8, [r1, #-4]
900160de:	f821 ec02 	strh.w	lr, [r1, #-2]
900160e2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
900160e6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
900160ea:	42ae      	cmp	r6, r5
900160ec:	db06      	blt.n	900160fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
900160ee:	d116      	bne.n	9001611e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
900160f0:	f9b0 c000 	ldrsh.w	ip, [r0]
900160f4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
900160f8:	45ac      	cmp	ip, r5
900160fa:	da10      	bge.n	9001611e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
900160fc:	681d      	ldr	r5, [r3, #0]
900160fe:	f9b0 8000 	ldrsh.w	r8, [r0]
90016102:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016106:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
9001610a:	6005      	str	r5, [r0, #0]
9001610c:	685d      	ldr	r5, [r3, #4]
9001610e:	f8a0 8008 	strh.w	r8, [r0, #8]
90016112:	6045      	str	r5, [r0, #4]
90016114:	8146      	strh	r6, [r0, #10]
90016116:	f8a0 e00c 	strh.w	lr, [r0, #12]
9001611a:	f8a0 c00e 	strh.w	ip, [r0, #14]
9001611e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
90016122:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
90016126:	4565      	cmp	r5, ip
90016128:	db06      	blt.n	90016138 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
9001612a:	d119      	bne.n	90016160 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001612c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
90016130:	f9b0 5000 	ldrsh.w	r5, [r0]
90016134:	42ae      	cmp	r6, r5
90016136:	da13      	bge.n	90016160 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
90016138:	460e      	mov	r6, r1
9001613a:	f9b0 9000 	ldrsh.w	r9, [r0]
9001613e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
90016142:	f856 5d08 	ldr.w	r5, [r6, #-8]!
90016146:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
9001614a:	6005      	str	r5, [r0, #0]
9001614c:	6875      	ldr	r5, [r6, #4]
9001614e:	6045      	str	r5, [r0, #4]
90016150:	f821 9c08 	strh.w	r9, [r1, #-8]
90016154:	f821 cc06 	strh.w	ip, [r1, #-6]
90016158:	f821 8c04 	strh.w	r8, [r1, #-4]
9001615c:	f821 ec02 	strh.w	lr, [r1, #-2]
90016160:	3308      	adds	r3, #8
90016162:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
90016166:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
9001616a:	45e6      	cmp	lr, ip
9001616c:	dbf8      	blt.n	90016160 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001616e:	d105      	bne.n	9001617c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016170:	f9b3 6000 	ldrsh.w	r6, [r3]
90016174:	f9b0 5000 	ldrsh.w	r5, [r0]
90016178:	42ae      	cmp	r6, r5
9001617a:	dbf1      	blt.n	90016160 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001617c:	4615      	mov	r5, r2
9001617e:	3a08      	subs	r2, #8
90016180:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
90016184:	45b4      	cmp	ip, r6
90016186:	dbf9      	blt.n	9001617c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016188:	d105      	bne.n	90016196 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
9001618a:	f9b0 8000 	ldrsh.w	r8, [r0]
9001618e:	f9b2 6000 	ldrsh.w	r6, [r2]
90016192:	45b0      	cmp	r8, r6
90016194:	dbf2      	blt.n	9001617c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016196:	4293      	cmp	r3, r2
90016198:	f1a5 0608 	sub.w	r6, r5, #8
9001619c:	d816      	bhi.n	900161cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
9001619e:	f8d6 c000 	ldr.w	ip, [r6]
900161a2:	f9b3 a000 	ldrsh.w	sl, [r3]
900161a6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
900161aa:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
900161ae:	f8c3 c000 	str.w	ip, [r3]
900161b2:	f8d6 c004 	ldr.w	ip, [r6, #4]
900161b6:	f8c3 c004 	str.w	ip, [r3, #4]
900161ba:	f825 ac08 	strh.w	sl, [r5, #-8]
900161be:	f825 ec06 	strh.w	lr, [r5, #-6]
900161c2:	f825 9c04 	strh.w	r9, [r5, #-4]
900161c6:	f825 8c02 	strh.w	r8, [r5, #-2]
900161ca:	e7c9      	b.n	90016160 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900161cc:	f8d6 e000 	ldr.w	lr, [r6]
900161d0:	f9b0 a000 	ldrsh.w	sl, [r0]
900161d4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
900161d8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
900161dc:	f8c0 e000 	str.w	lr, [r0]
900161e0:	f8d6 e004 	ldr.w	lr, [r6, #4]
900161e4:	1a16      	subs	r6, r2, r0
900161e6:	f8c0 e004 	str.w	lr, [r0, #4]
900161ea:	f825 ac08 	strh.w	sl, [r5, #-8]
900161ee:	f825 cc06 	strh.w	ip, [r5, #-6]
900161f2:	f825 9c04 	strh.w	r9, [r5, #-4]
900161f6:	f825 8c02 	strh.w	r8, [r5, #-2]
900161fa:	1acd      	subs	r5, r1, r3
900161fc:	10ed      	asrs	r5, r5, #3
900161fe:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
90016202:	bfb5      	itete	lt
90016204:	e9c4 0200 	strdlt	r0, r2, [r4]
90016208:	e9c4 3100 	strdge	r3, r1, [r4]
9001620c:	460a      	movlt	r2, r1
9001620e:	4603      	movge	r3, r0
90016210:	3408      	adds	r4, #8
90016212:	4618      	mov	r0, r3
90016214:	4611      	mov	r1, r2
90016216:	e724      	b.n	90016062 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016218:	4299      	cmp	r1, r3
9001621a:	d927      	bls.n	9001626c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
9001621c:	f1a3 0210 	sub.w	r2, r3, #16
90016220:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
90016224:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
90016228:	45ac      	cmp	ip, r5
9001622a:	db06      	blt.n	9001623a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
9001622c:	d11c      	bne.n	90016268 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
9001622e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
90016232:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
90016236:	42ae      	cmp	r6, r5
90016238:	da16      	bge.n	90016268 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
9001623a:	4615      	mov	r5, r2
9001623c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
90016240:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
90016244:	3a08      	subs	r2, #8
90016246:	f855 6f08 	ldr.w	r6, [r5, #8]!
9001624a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
9001624e:	6196      	str	r6, [r2, #24]
90016250:	42a8      	cmp	r0, r5
90016252:	686e      	ldr	r6, [r5, #4]
90016254:	f8a2 9010 	strh.w	r9, [r2, #16]
90016258:	61d6      	str	r6, [r2, #28]
9001625a:	f8a2 c012 	strh.w	ip, [r2, #18]
9001625e:	f8a2 8014 	strh.w	r8, [r2, #20]
90016262:	f8a2 e016 	strh.w	lr, [r2, #22]
90016266:	d1db      	bne.n	90016220 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
90016268:	3308      	adds	r3, #8
9001626a:	e7d5      	b.n	90016218 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001626c:	42bc      	cmp	r4, r7
9001626e:	d903      	bls.n	90016278 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
90016270:	e954 0102 	ldrd	r0, r1, [r4, #-8]
90016274:	3c08      	subs	r4, #8
90016276:	e6f4      	b.n	90016062 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016278:	b050      	add	sp, #320	; 0x140
9001627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

9001627e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
9001627e:	b510      	push	{r4, lr}
90016280:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016282:	4604      	mov	r4, r0
90016284:	07da      	lsls	r2, r3, #31
90016286:	d507      	bpl.n	90016298 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
90016288:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
9001628c:	f7ff fe8c 	bl	90015fa8 <_ZN8touchgfx7Outline6lineToEii>
90016290:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016292:	f023 0301 	bic.w	r3, r3, #1
90016296:	6243      	str	r3, [r0, #36]	; 0x24
90016298:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001629a:	079b      	lsls	r3, r3, #30
9001629c:	d521      	bpl.n	900162e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
9001629e:	6923      	ldr	r3, [r4, #16]
900162a0:	88d9      	ldrh	r1, [r3, #6]
900162a2:	889a      	ldrh	r2, [r3, #4]
900162a4:	430a      	orrs	r2, r1
900162a6:	d010      	beq.n	900162ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900162a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
900162ac:	2a00      	cmp	r2, #0
900162ae:	db0c      	blt.n	900162ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900162b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900162b2:	428a      	cmp	r2, r1
900162b4:	da09      	bge.n	900162ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900162b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
900162ba:	4291      	cmp	r1, r2
900162bc:	f102 0201 	add.w	r2, r2, #1
900162c0:	bf88      	it	hi
900162c2:	3308      	addhi	r3, #8
900162c4:	60a2      	str	r2, [r4, #8]
900162c6:	bf88      	it	hi
900162c8:	6123      	strhi	r3, [r4, #16]
900162ca:	68a1      	ldr	r1, [r4, #8]
900162cc:	b129      	cbz	r1, 900162da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
900162ce:	6863      	ldr	r3, [r4, #4]
900162d0:	4299      	cmp	r1, r3
900162d2:	d802      	bhi.n	900162da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
900162d4:	68e0      	ldr	r0, [r4, #12]
900162d6:	f7ff febd 	bl	90016054 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
900162da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900162dc:	f023 0302 	bic.w	r3, r3, #2
900162e0:	6263      	str	r3, [r4, #36]	; 0x24
900162e2:	68e0      	ldr	r0, [r4, #12]
900162e4:	bd10      	pop	{r4, pc}
	...

900162e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
900162e8:	4b02      	ldr	r3, [pc, #8]	; (900162f4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
900162ea:	6018      	str	r0, [r3, #0]
900162ec:	4b02      	ldr	r3, [pc, #8]	; (900162f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
900162ee:	6019      	str	r1, [r3, #0]
900162f0:	4770      	bx	lr
900162f2:	bf00      	nop
900162f4:	2402819c 	.word	0x2402819c
900162f8:	240281a0 	.word	0x240281a0

900162fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
900162fc:	2300      	movs	r3, #0
900162fe:	4a02      	ldr	r2, [pc, #8]	; (90016308 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
90016300:	6013      	str	r3, [r2, #0]
90016302:	4a02      	ldr	r2, [pc, #8]	; (9001630c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
90016304:	6013      	str	r3, [r2, #0]
90016306:	4770      	bx	lr
90016308:	2402819c 	.word	0x2402819c
9001630c:	240281a0 	.word	0x240281a0

90016310 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
90016310:	4b01      	ldr	r3, [pc, #4]	; (90016318 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
90016312:	6818      	ldr	r0, [r3, #0]
90016314:	4770      	bx	lr
90016316:	bf00      	nop
90016318:	2402819c 	.word	0x2402819c

9001631c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
9001631c:	4b01      	ldr	r3, [pc, #4]	; (90016324 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
9001631e:	6818      	ldr	r0, [r3, #0]
90016320:	4770      	bx	lr
90016322:	bf00      	nop
90016324:	240281a0 	.word	0x240281a0

90016328 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
90016328:	b510      	push	{r4, lr}
9001632a:	6803      	ldr	r3, [r0, #0]
9001632c:	460c      	mov	r4, r1
9001632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016330:	4798      	blx	r3
90016332:	1b03      	subs	r3, r0, r4
90016334:	4258      	negs	r0, r3
90016336:	4158      	adcs	r0, r3
90016338:	bd10      	pop	{r4, pc}
	...

9001633c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
9001633c:	4b01      	ldr	r3, [pc, #4]	; (90016344 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
9001633e:	6019      	str	r1, [r3, #0]
90016340:	4770      	bx	lr
90016342:	bf00      	nop
90016344:	240281a4 	.word	0x240281a4

90016348 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001634c:	4696      	mov	lr, r2
9001634e:	b097      	sub	sp, #92	; 0x5c
90016350:	4605      	mov	r5, r0
90016352:	4614      	mov	r4, r2
90016354:	460e      	mov	r6, r1
90016356:	461f      	mov	r7, r3
90016358:	f10d 0c1c 	add.w	ip, sp, #28
9001635c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90016360:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90016364:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
90016368:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001636c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016370:	f8de 3000 	ldr.w	r3, [lr]
90016374:	f104 0e14 	add.w	lr, r4, #20
90016378:	f8cc 3000 	str.w	r3, [ip]
9001637c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016388:	f8de 3000 	ldr.w	r3, [lr]
9001638c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90016390:	f8cc 3000 	str.w	r3, [ip]
90016394:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90016398:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001639c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900163a0:	f8de 3000 	ldr.w	r3, [lr]
900163a4:	4631      	mov	r1, r6
900163a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
900163a8:	4628      	mov	r0, r5
900163aa:	f8cc 3000 	str.w	r3, [ip]
900163ae:	682b      	ldr	r3, [r5, #0]
900163b0:	9201      	str	r2, [sp, #4]
900163b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
900163b4:	f8cd 8008 	str.w	r8, [sp, #8]
900163b8:	9200      	str	r2, [sp, #0]
900163ba:	aa07      	add	r2, sp, #28
900163bc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900163c0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
900163c4:	463b      	mov	r3, r7
900163c6:	47d8      	blx	fp
900163c8:	46a6      	mov	lr, r4
900163ca:	f10d 0c1c 	add.w	ip, sp, #28
900163ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900163d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900163d6:	f8de 3000 	ldr.w	r3, [lr]
900163da:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900163de:	343c      	adds	r4, #60	; 0x3c
900163e0:	f8cc 3000 	str.w	r3, [ip]
900163e4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900163e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900163ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900163f0:	f8de 3000 	ldr.w	r3, [lr]
900163f4:	f8cc 3000 	str.w	r3, [ip]
900163f8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900163fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900163fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016402:	6823      	ldr	r3, [r4, #0]
90016404:	4631      	mov	r1, r6
90016406:	4628      	mov	r0, r5
90016408:	f8cc 3000 	str.w	r3, [ip]
9001640c:	682b      	ldr	r3, [r5, #0]
9001640e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016412:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016414:	f8cd 8008 	str.w	r8, [sp, #8]
90016418:	9201      	str	r2, [sp, #4]
9001641a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001641c:	9200      	str	r2, [sp, #0]
9001641e:	aa07      	add	r2, sp, #28
90016420:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
90016422:	463b      	mov	r3, r7
90016424:	47a0      	blx	r4
90016426:	b017      	add	sp, #92	; 0x5c
90016428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001642c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
9001642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016430:	b08d      	sub	sp, #52	; 0x34
90016432:	4688      	mov	r8, r1
90016434:	f8d3 c000 	ldr.w	ip, [r3]
90016438:	9916      	ldr	r1, [sp, #88]	; 0x58
9001643a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
9001643e:	680f      	ldr	r7, [r1, #0]
90016440:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90016444:	eba7 070c 	sub.w	r7, r7, ip
90016448:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
9001644c:	edd3 6a07 	vldr	s13, [r3, #28]
90016450:	42bc      	cmp	r4, r7
90016452:	9918      	ldr	r1, [sp, #96]	; 0x60
90016454:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90016458:	bfa8      	it	ge
9001645a:	463c      	movge	r4, r7
9001645c:	f9b1 9000 	ldrsh.w	r9, [r1]
90016460:	f9ba 1000 	ldrsh.w	r1, [sl]
90016464:	ee07 4a90 	vmov	s15, r4
90016468:	eb09 0e0c 	add.w	lr, r9, ip
9001646c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90016470:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90016474:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90016478:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
9001647c:	4571      	cmp	r1, lr
9001647e:	ee25 4a04 	vmul.f32	s8, s10, s8
90016482:	ee65 4a24 	vmul.f32	s9, s10, s9
90016486:	ee25 5a27 	vmul.f32	s10, s10, s15
9001648a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001648e:	ee71 0aa4 	vadd.f32	s1, s3, s9
90016492:	ee32 1a05 	vadd.f32	s2, s4, s10
90016496:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9001649a:	ee36 0a84 	vadd.f32	s0, s13, s8
9001649e:	ee61 1a87 	vmul.f32	s3, s3, s14
900164a2:	ee22 2a07 	vmul.f32	s4, s4, s14
900164a6:	f340 808c 	ble.w	900165c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900164aa:	eba1 060e 	sub.w	r6, r1, lr
900164ae:	fb96 f5f4 	sdiv	r5, r6, r4
900164b2:	ee07 5a10 	vmov	s14, r5
900164b6:	2d00      	cmp	r5, #0
900164b8:	fb04 6615 	mls	r6, r4, r5, r6
900164bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900164c0:	eea7 0a04 	vfma.f32	s0, s14, s8
900164c4:	eee7 0a24 	vfma.f32	s1, s14, s9
900164c8:	eea7 1a05 	vfma.f32	s2, s14, s10
900164cc:	dd12      	ble.n	900164f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900164ce:	ee70 6a44 	vsub.f32	s13, s0, s8
900164d2:	ee70 1ae4 	vsub.f32	s3, s1, s9
900164d6:	ee31 2a45 	vsub.f32	s4, s2, s10
900164da:	eef5 6a40 	vcmp.f32	s13, #0.0
900164de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900164e2:	bf14      	ite	ne
900164e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
900164e8:	eeb0 7a67 	vmoveq.f32	s14, s15
900164ec:	ee61 1a87 	vmul.f32	s3, s3, s14
900164f0:	ee22 2a07 	vmul.f32	s4, s4, s14
900164f4:	fb05 f204 	mul.w	r2, r5, r4
900164f8:	1abf      	subs	r7, r7, r2
900164fa:	4494      	add	ip, r2
900164fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90016500:	4411      	add	r1, r2
90016502:	eb09 020c 	add.w	r2, r9, ip
90016506:	b209      	sxth	r1, r1
90016508:	443a      	add	r2, r7
9001650a:	428a      	cmp	r2, r1
9001650c:	bfc4      	itt	gt
9001650e:	eba1 0209 	subgt.w	r2, r1, r9
90016512:	eba2 070c 	subgt.w	r7, r2, ip
90016516:	2f00      	cmp	r7, #0
90016518:	dd50      	ble.n	900165bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
9001651a:	fb97 f1f4 	sdiv	r1, r7, r4
9001651e:	fb04 7211 	mls	r2, r4, r1, r7
90016522:	b90a      	cbnz	r2, 90016528 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90016524:	3901      	subs	r1, #1
90016526:	4622      	mov	r2, r4
90016528:	eec7 3a80 	vdiv.f32	s7, s15, s0
9001652c:	6840      	ldr	r0, [r0, #4]
9001652e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90016532:	44b6      	add	lr, r6
90016534:	f8d0 a000 	ldr.w	sl, [r0]
90016538:	2900      	cmp	r1, #0
9001653a:	bfcc      	ite	gt
9001653c:	46a1      	movgt	r9, r4
9001653e:	4691      	movle	r9, r2
90016540:	900b      	str	r0, [sp, #44]	; 0x2c
90016542:	9817      	ldr	r0, [sp, #92]	; 0x5c
90016544:	fb04 e505 	mla	r5, r4, r5, lr
90016548:	eef0 6a42 	vmov.f32	s13, s4
9001654c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90016550:	9008      	str	r0, [sp, #32]
90016552:	eeb0 7a61 	vmov.f32	s14, s3
90016556:	9818      	ldr	r0, [sp, #96]	; 0x60
90016558:	695b      	ldr	r3, [r3, #20]
9001655a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001655e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90016562:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90016566:	980b      	ldr	r0, [sp, #44]	; 0x2c
90016568:	445b      	add	r3, fp
9001656a:	9307      	str	r3, [sp, #28]
9001656c:	ee16 3a90 	vmov	r3, s13
90016570:	e9cd 8505 	strd	r8, r5, [sp, #20]
90016574:	ee60 2aa3 	vmul.f32	s5, s1, s7
90016578:	ee21 3a23 	vmul.f32	s6, s2, s7
9001657c:	ee72 7ae1 	vsub.f32	s15, s5, s3
90016580:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016584:	ee17 7a90 	vmov	r7, s15
90016588:	ee73 7a42 	vsub.f32	s15, s6, s4
9001658c:	fb97 f7f4 	sdiv	r7, r7, r4
90016590:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016594:	ee17 ca90 	vmov	ip, s15
90016598:	fb9c fcf4 	sdiv	ip, ip, r4
9001659c:	fb0c 3306 	mla	r3, ip, r6, r3
900165a0:	9302      	str	r3, [sp, #8]
900165a2:	ee17 3a10 	vmov	r3, s14
900165a6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
900165aa:	fb07 3706 	mla	r7, r7, r6, r3
900165ae:	eba9 0306 	sub.w	r3, r9, r6
900165b2:	e9cd 4700 	strd	r4, r7, [sp]
900165b6:	f8da 4008 	ldr.w	r4, [sl, #8]
900165ba:	47a0      	blx	r4
900165bc:	b00d      	add	sp, #52	; 0x34
900165be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900165c2:	2500      	movs	r5, #0
900165c4:	462e      	mov	r6, r5
900165c6:	e799      	b.n	900164fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

900165c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900165c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900165cc:	b0db      	sub	sp, #364	; 0x16c
900165ce:	461d      	mov	r5, r3
900165d0:	4614      	mov	r4, r2
900165d2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
900165d6:	910f      	str	r1, [sp, #60]	; 0x3c
900165d8:	4629      	mov	r1, r5
900165da:	930a      	str	r3, [sp, #40]	; 0x28
900165dc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
900165e0:	9009      	str	r0, [sp, #36]	; 0x24
900165e2:	930b      	str	r3, [sp, #44]	; 0x2c
900165e4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
900165e8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
900165ec:	9310      	str	r3, [sp, #64]	; 0x40
900165ee:	6803      	ldr	r3, [r0, #0]
900165f0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
900165f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
900165f6:	47b8      	blx	r7
900165f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900165fa:	6058      	str	r0, [r3, #4]
900165fc:	2800      	cmp	r0, #0
900165fe:	f000 83a1 	beq.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016602:	682b      	ldr	r3, [r5, #0]
90016604:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90016608:	ed94 7a02 	vldr	s14, [r4, #8]
9001660c:	9314      	str	r3, [sp, #80]	; 0x50
9001660e:	686b      	ldr	r3, [r5, #4]
90016610:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016614:	9315      	str	r3, [sp, #84]	; 0x54
90016616:	4bc1      	ldr	r3, [pc, #772]	; (9001691c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90016618:	7819      	ldrb	r1, [r3, #0]
9001661a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
9001661e:	2900      	cmp	r1, #0
90016620:	bf16      	itet	ne
90016622:	4619      	movne	r1, r3
90016624:	4611      	moveq	r1, r2
90016626:	4613      	movne	r3, r2
90016628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001662c:	9116      	str	r1, [sp, #88]	; 0x58
9001662e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90016632:	f240 8387 	bls.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016636:	ed94 7a07 	vldr	s14, [r4, #28]
9001663a:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016642:	f240 837f 	bls.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016646:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
9001664a:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016652:	f240 8377 	bls.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016656:	6822      	ldr	r2, [r4, #0]
90016658:	4bb1      	ldr	r3, [pc, #708]	; (90016920 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
9001665a:	429a      	cmp	r2, r3
9001665c:	f2c0 8372 	blt.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016660:	49b0      	ldr	r1, [pc, #704]	; (90016924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90016662:	6963      	ldr	r3, [r4, #20]
90016664:	428a      	cmp	r2, r1
90016666:	f300 836d 	bgt.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001666a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
9001666e:	48ae      	ldr	r0, [pc, #696]	; (90016928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90016670:	33ff      	adds	r3, #255	; 0xff
90016672:	4283      	cmp	r3, r0
90016674:	f200 8366 	bhi.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9001667a:	4dac      	ldr	r5, [pc, #688]	; (9001692c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
9001667c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016680:	33ff      	adds	r3, #255	; 0xff
90016682:	42ab      	cmp	r3, r5
90016684:	f200 835e 	bhi.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016688:	6862      	ldr	r2, [r4, #4]
9001668a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
9001668e:	33ff      	adds	r3, #255	; 0xff
90016690:	4283      	cmp	r3, r0
90016692:	f200 8357 	bhi.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016696:	69a1      	ldr	r1, [r4, #24]
90016698:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
9001669c:	33ff      	adds	r3, #255	; 0xff
9001669e:	4283      	cmp	r3, r0
900166a0:	f200 8350 	bhi.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900166a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900166a6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
900166aa:	30ff      	adds	r0, #255	; 0xff
900166ac:	42a8      	cmp	r0, r5
900166ae:	f200 8349 	bhi.w	90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900166b2:	428a      	cmp	r2, r1
900166b4:	f280 8110 	bge.w	900168d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
900166b8:	429a      	cmp	r2, r3
900166ba:	f300 8119 	bgt.w	900168f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
900166be:	4299      	cmp	r1, r3
900166c0:	f280 811d 	bge.w	900168fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
900166c4:	2502      	movs	r5, #2
900166c6:	2701      	movs	r7, #1
900166c8:	46a9      	mov	r9, r5
900166ca:	46b8      	mov	r8, r7
900166cc:	f04f 0a00 	mov.w	sl, #0
900166d0:	4621      	mov	r1, r4
900166d2:	a849      	add	r0, sp, #292	; 0x124
900166d4:	f003 fdc4 	bl	9001a260 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
900166d8:	4622      	mov	r2, r4
900166da:	4653      	mov	r3, sl
900166dc:	a949      	add	r1, sp, #292	; 0x124
900166de:	f8cd 9000 	str.w	r9, [sp]
900166e2:	a819      	add	r0, sp, #100	; 0x64
900166e4:	f003 feec 	bl	9001a4c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900166e8:	4622      	mov	r2, r4
900166ea:	4653      	mov	r3, sl
900166ec:	a949      	add	r1, sp, #292	; 0x124
900166ee:	f8cd 8000 	str.w	r8, [sp]
900166f2:	a829      	add	r0, sp, #164	; 0xa4
900166f4:	f003 fee4 	bl	9001a4c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900166f8:	4643      	mov	r3, r8
900166fa:	4622      	mov	r2, r4
900166fc:	a949      	add	r1, sp, #292	; 0x124
900166fe:	f8cd 9000 	str.w	r9, [sp]
90016702:	a839      	add	r0, sp, #228	; 0xe4
90016704:	f003 fedc 	bl	9001a4c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016708:	42af      	cmp	r7, r5
9001670a:	af12      	add	r7, sp, #72	; 0x48
9001670c:	bfb7      	itett	lt
9001670e:	2300      	movlt	r3, #0
90016710:	2301      	movge	r3, #1
90016712:	ad29      	addlt	r5, sp, #164	; 0xa4
90016714:	ac19      	addlt	r4, sp, #100	; 0x64
90016716:	bfb1      	iteee	lt
90016718:	930e      	strlt	r3, [sp, #56]	; 0x38
9001671a:	ad19      	addge	r5, sp, #100	; 0x64
9001671c:	930e      	strge	r3, [sp, #56]	; 0x38
9001671e:	ac29      	addge	r4, sp, #164	; 0xa4
90016720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016722:	e893 0003 	ldmia.w	r3, {r0, r1}
90016726:	e887 0003 	stmia.w	r7, {r0, r1}
9001672a:	b928      	cbnz	r0, 90016738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
9001672c:	4b80      	ldr	r3, [pc, #512]	; (90016930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
9001672e:	6818      	ldr	r0, [r3, #0]
90016730:	6803      	ldr	r3, [r0, #0]
90016732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016734:	4798      	blx	r3
90016736:	6038      	str	r0, [r7, #0]
90016738:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001673a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001673e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016742:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90016744:	930c      	str	r3, [sp, #48]	; 0x30
90016746:	990c      	ldr	r1, [sp, #48]	; 0x30
90016748:	6963      	ldr	r3, [r4, #20]
9001674a:	440b      	add	r3, r1
9001674c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016750:	4408      	add	r0, r1
90016752:	b200      	sxth	r0, r0
90016754:	4283      	cmp	r3, r0
90016756:	900d      	str	r0, [sp, #52]	; 0x34
90016758:	f280 80dd 	bge.w	90016916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
9001675c:	428b      	cmp	r3, r1
9001675e:	da08      	bge.n	90016772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016760:	2a00      	cmp	r2, #0
90016762:	dd06      	ble.n	90016772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016764:	1acb      	subs	r3, r1, r3
90016766:	429a      	cmp	r2, r3
90016768:	f2c0 80e4 	blt.w	90016934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
9001676c:	2b00      	cmp	r3, #0
9001676e:	f300 80e2 	bgt.w	90016936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90016772:	6967      	ldr	r7, [r4, #20]
90016774:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001677a:	443b      	add	r3, r7
9001677c:	461f      	mov	r7, r3
9001677e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016780:	1bdf      	subs	r7, r3, r7
90016782:	4297      	cmp	r7, r2
90016784:	bfa8      	it	ge
90016786:	4617      	movge	r7, r2
90016788:	2f00      	cmp	r7, #0
9001678a:	f340 8166 	ble.w	90016a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
9001678e:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016790:	6829      	ldr	r1, [r5, #0]
90016792:	f9b3 2000 	ldrsh.w	r2, [r3]
90016796:	f9bb 3000 	ldrsh.w	r3, [fp]
9001679a:	4411      	add	r1, r2
9001679c:	6820      	ldr	r0, [r4, #0]
9001679e:	4299      	cmp	r1, r3
900167a0:	dd1a      	ble.n	900167d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900167a2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
900167a6:	4402      	add	r2, r0
900167a8:	440b      	add	r3, r1
900167aa:	b21b      	sxth	r3, r3
900167ac:	429a      	cmp	r2, r3
900167ae:	dc13      	bgt.n	900167d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900167b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
900167b2:	a912      	add	r1, sp, #72	; 0x48
900167b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900167b6:	9809      	ldr	r0, [sp, #36]	; 0x24
900167b8:	681b      	ldr	r3, [r3, #0]
900167ba:	9206      	str	r2, [sp, #24]
900167bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900167be:	9500      	str	r5, [sp, #0]
900167c0:	9205      	str	r2, [sp, #20]
900167c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900167c4:	e9cd b203 	strd	fp, r2, [sp, #12]
900167c8:	9a64      	ldr	r2, [sp, #400]	; 0x190
900167ca:	e9cd 8201 	strd	r8, r2, [sp, #4]
900167ce:	aa49      	add	r2, sp, #292	; 0x124
900167d0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900167d4:	4623      	mov	r3, r4
900167d6:	47c8      	blx	r9
900167d8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900167dc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900167e0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900167e4:	ee37 7a27 	vadd.f32	s14, s14, s15
900167e8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900167ec:	68a1      	ldr	r1, [r4, #8]
900167ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
900167f2:	ed94 6a08 	vldr	s12, [r4, #32]
900167f6:	edd4 6a07 	vldr	s13, [r4, #28]
900167fa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900167fe:	ee76 6a86 	vadd.f32	s13, s13, s12
90016802:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016806:	e9d4 2300 	ldrd	r2, r3, [r4]
9001680a:	edc4 6a07 	vstr	s13, [r4, #28]
9001680e:	441a      	add	r2, r3
90016810:	6963      	ldr	r3, [r4, #20]
90016812:	3301      	adds	r3, #1
90016814:	6022      	str	r2, [r4, #0]
90016816:	6163      	str	r3, [r4, #20]
90016818:	69a3      	ldr	r3, [r4, #24]
9001681a:	3b01      	subs	r3, #1
9001681c:	61a3      	str	r3, [r4, #24]
9001681e:	6923      	ldr	r3, [r4, #16]
90016820:	440b      	add	r3, r1
90016822:	68e1      	ldr	r1, [r4, #12]
90016824:	428b      	cmp	r3, r1
90016826:	6123      	str	r3, [r4, #16]
90016828:	db15      	blt.n	90016856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
9001682a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
9001682e:	3201      	adds	r2, #1
90016830:	1a5b      	subs	r3, r3, r1
90016832:	ee76 6a26 	vadd.f32	s13, s12, s13
90016836:	6022      	str	r2, [r4, #0]
90016838:	6123      	str	r3, [r4, #16]
9001683a:	edc4 6a07 	vstr	s13, [r4, #28]
9001683e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016842:	ee36 7a87 	vadd.f32	s14, s13, s14
90016846:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001684a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
9001684e:	ee77 7a27 	vadd.f32	s15, s14, s15
90016852:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016856:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
9001685a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
9001685e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016862:	ee37 7a27 	vadd.f32	s14, s14, s15
90016866:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
9001686a:	68a9      	ldr	r1, [r5, #8]
9001686c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016870:	ed95 6a08 	vldr	s12, [r5, #32]
90016874:	edd5 6a07 	vldr	s13, [r5, #28]
90016878:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001687c:	ee76 6a86 	vadd.f32	s13, s13, s12
90016880:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016884:	e9d5 2300 	ldrd	r2, r3, [r5]
90016888:	edc5 6a07 	vstr	s13, [r5, #28]
9001688c:	441a      	add	r2, r3
9001688e:	696b      	ldr	r3, [r5, #20]
90016890:	3301      	adds	r3, #1
90016892:	602a      	str	r2, [r5, #0]
90016894:	616b      	str	r3, [r5, #20]
90016896:	69ab      	ldr	r3, [r5, #24]
90016898:	3b01      	subs	r3, #1
9001689a:	61ab      	str	r3, [r5, #24]
9001689c:	692b      	ldr	r3, [r5, #16]
9001689e:	440b      	add	r3, r1
900168a0:	68e9      	ldr	r1, [r5, #12]
900168a2:	428b      	cmp	r3, r1
900168a4:	612b      	str	r3, [r5, #16]
900168a6:	db15      	blt.n	900168d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
900168a8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
900168ac:	3201      	adds	r2, #1
900168ae:	1a5b      	subs	r3, r3, r1
900168b0:	ee76 6a26 	vadd.f32	s13, s12, s13
900168b4:	602a      	str	r2, [r5, #0]
900168b6:	612b      	str	r3, [r5, #16]
900168b8:	edc5 6a07 	vstr	s13, [r5, #28]
900168bc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900168c0:	ee36 7a87 	vadd.f32	s14, s13, s14
900168c4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900168c8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900168cc:	ee77 7a27 	vadd.f32	s15, s14, s15
900168d0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900168d4:	3f01      	subs	r7, #1
900168d6:	e757      	b.n	90016788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
900168d8:	4299      	cmp	r1, r3
900168da:	dc13      	bgt.n	90016904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
900168dc:	429a      	cmp	r2, r3
900168de:	da14      	bge.n	9001690a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
900168e0:	2502      	movs	r5, #2
900168e2:	2703      	movs	r7, #3
900168e4:	f04f 0800 	mov.w	r8, #0
900168e8:	46a9      	mov	r9, r5
900168ea:	f04f 0a01 	mov.w	sl, #1
900168ee:	e6ef      	b.n	900166d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
900168f0:	2501      	movs	r5, #1
900168f2:	2700      	movs	r7, #0
900168f4:	46a9      	mov	r9, r5
900168f6:	46b8      	mov	r8, r7
900168f8:	f04f 0a02 	mov.w	sl, #2
900168fc:	e6e8      	b.n	900166d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
900168fe:	2501      	movs	r5, #1
90016900:	2702      	movs	r7, #2
90016902:	e6e1      	b.n	900166c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90016904:	2500      	movs	r5, #0
90016906:	2701      	movs	r7, #1
90016908:	e7f4      	b.n	900168f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
9001690a:	2702      	movs	r7, #2
9001690c:	2503      	movs	r5, #3
9001690e:	f04f 0900 	mov.w	r9, #0
90016912:	46b8      	mov	r8, r7
90016914:	e7e9      	b.n	900168ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90016916:	4613      	mov	r3, r2
90016918:	e728      	b.n	9001676c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
9001691a:	bf00      	nop
9001691c:	2402818c 	.word	0x2402818c
90016920:	fffd8f01 	.word	0xfffd8f01
90016924:	00027100 	.word	0x00027100
90016928:	0004e1ff 	.word	0x0004e1ff
9001692c:	0004e1fe 	.word	0x0004e1fe
90016930:	24028194 	.word	0x24028194
90016934:	4613      	mov	r3, r2
90016936:	992b      	ldr	r1, [sp, #172]	; 0xac
90016938:	469e      	mov	lr, r3
9001693a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
9001693c:	469c      	mov	ip, r3
9001693e:	9111      	str	r1, [sp, #68]	; 0x44
90016940:	f04f 0900 	mov.w	r9, #0
90016944:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90016948:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
9001694c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90016950:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90016954:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90016958:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
9001695c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90016960:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90016964:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90016968:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
9001696c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90016970:	f1bc 0f00 	cmp.w	ip, #0
90016974:	d147      	bne.n	90016a06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90016976:	eb03 0c07 	add.w	ip, r3, r7
9001697a:	1ad7      	subs	r7, r2, r3
9001697c:	f1b9 0f00 	cmp.w	r9, #0
90016980:	d009      	beq.n	90016996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90016982:	9029      	str	r0, [sp, #164]	; 0xa4
90016984:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90016988:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
9001698c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90016990:	912d      	str	r1, [sp, #180]	; 0xb4
90016992:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90016996:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016998:	f04f 0800 	mov.w	r8, #0
9001699c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
900169a0:	9111      	str	r1, [sp, #68]	; 0x44
900169a2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
900169a6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
900169aa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
900169ae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
900169b2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
900169b6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
900169ba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
900169be:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
900169c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
900169c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
900169ca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
900169ce:	f1be 0f00 	cmp.w	lr, #0
900169d2:	d031      	beq.n	90016a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
900169d4:	9e11      	ldr	r6, [sp, #68]	; 0x44
900169d6:	4450      	add	r0, sl
900169d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
900169dc:	4431      	add	r1, r6
900169de:	ee37 7a04 	vadd.f32	s14, s14, s8
900169e2:	ee77 7aa3 	vadd.f32	s15, s15, s7
900169e6:	4549      	cmp	r1, r9
900169e8:	db08      	blt.n	900169fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
900169ea:	ee77 7a85 	vadd.f32	s15, s15, s10
900169ee:	3001      	adds	r0, #1
900169f0:	ee76 6aa5 	vadd.f32	s13, s13, s11
900169f4:	eba1 0109 	sub.w	r1, r1, r9
900169f8:	ee37 7a06 	vadd.f32	s14, s14, s12
900169fc:	f10e 3eff 	add.w	lr, lr, #4294967295
90016a00:	f04f 0801 	mov.w	r8, #1
90016a04:	e7e3      	b.n	900169ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90016a06:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016a08:	4450      	add	r0, sl
90016a0a:	ee37 7a24 	vadd.f32	s14, s14, s9
90016a0e:	4431      	add	r1, r6
90016a10:	ee77 7a84 	vadd.f32	s15, s15, s8
90016a14:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016a18:	4541      	cmp	r1, r8
90016a1a:	db08      	blt.n	90016a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90016a1c:	ee76 6a85 	vadd.f32	s13, s13, s10
90016a20:	3001      	adds	r0, #1
90016a22:	ee37 7a25 	vadd.f32	s14, s14, s11
90016a26:	eba1 0108 	sub.w	r1, r1, r8
90016a2a:	ee77 7a86 	vadd.f32	s15, s15, s12
90016a2e:	f10c 3cff 	add.w	ip, ip, #4294967295
90016a32:	f04f 0901 	mov.w	r9, #1
90016a36:	e79b      	b.n	90016970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90016a38:	449c      	add	ip, r3
90016a3a:	1aff      	subs	r7, r7, r3
90016a3c:	f1b8 0f00 	cmp.w	r8, #0
90016a40:	d009      	beq.n	90016a56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90016a42:	9019      	str	r0, [sp, #100]	; 0x64
90016a44:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90016a48:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90016a4c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90016a50:	911d      	str	r1, [sp, #116]	; 0x74
90016a52:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90016a56:	1ad2      	subs	r2, r2, r3
90016a58:	e68b      	b.n	90016772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016a5c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90016a5e:	2b00      	cmp	r3, #0
90016a60:	f000 80d1 	beq.w	90016c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90016a64:	ad19      	add	r5, sp, #100	; 0x64
90016a66:	ac39      	add	r4, sp, #228	; 0xe4
90016a68:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016a6a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90016a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016a72:	930c      	str	r3, [sp, #48]	; 0x30
90016a74:	990c      	ldr	r1, [sp, #48]	; 0x30
90016a76:	6963      	ldr	r3, [r4, #20]
90016a78:	440b      	add	r3, r1
90016a7a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016a7e:	4408      	add	r0, r1
90016a80:	b200      	sxth	r0, r0
90016a82:	4283      	cmp	r3, r0
90016a84:	900d      	str	r0, [sp, #52]	; 0x34
90016a86:	f280 80c1 	bge.w	90016c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90016a8a:	428b      	cmp	r3, r1
90016a8c:	da08      	bge.n	90016aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016a8e:	2a00      	cmp	r2, #0
90016a90:	dd06      	ble.n	90016aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016a92:	1acb      	subs	r3, r1, r3
90016a94:	429a      	cmp	r2, r3
90016a96:	f2c0 80bb 	blt.w	90016c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90016a9a:	2b00      	cmp	r3, #0
90016a9c:	f300 80b9 	bgt.w	90016c12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90016aa0:	6967      	ldr	r7, [r4, #20]
90016aa2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016aa8:	443b      	add	r3, r7
90016aaa:	461f      	mov	r7, r3
90016aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016aae:	1bdf      	subs	r7, r3, r7
90016ab0:	4297      	cmp	r7, r2
90016ab2:	bfa8      	it	ge
90016ab4:	4617      	movge	r7, r2
90016ab6:	2f00      	cmp	r7, #0
90016ab8:	f340 813c 	ble.w	90016d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90016abc:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016abe:	6829      	ldr	r1, [r5, #0]
90016ac0:	f9b3 2000 	ldrsh.w	r2, [r3]
90016ac4:	f9bb 3000 	ldrsh.w	r3, [fp]
90016ac8:	4411      	add	r1, r2
90016aca:	6820      	ldr	r0, [r4, #0]
90016acc:	4299      	cmp	r1, r3
90016ace:	dd1a      	ble.n	90016b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016ad0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016ad4:	4402      	add	r2, r0
90016ad6:	440b      	add	r3, r1
90016ad8:	b21b      	sxth	r3, r3
90016ada:	429a      	cmp	r2, r3
90016adc:	dc13      	bgt.n	90016b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016ae0:	a912      	add	r1, sp, #72	; 0x48
90016ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
90016ae6:	681b      	ldr	r3, [r3, #0]
90016ae8:	9206      	str	r2, [sp, #24]
90016aea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016aec:	9500      	str	r5, [sp, #0]
90016aee:	9205      	str	r2, [sp, #20]
90016af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016af2:	e9cd b203 	strd	fp, r2, [sp, #12]
90016af6:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016af8:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016afc:	aa49      	add	r2, sp, #292	; 0x124
90016afe:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016b02:	4623      	mov	r3, r4
90016b04:	47c8      	blx	r9
90016b06:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90016b0a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016b0e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016b12:	ee37 7a27 	vadd.f32	s14, s14, s15
90016b16:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90016b1a:	68a1      	ldr	r1, [r4, #8]
90016b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016b20:	ed94 6a08 	vldr	s12, [r4, #32]
90016b24:	edd4 6a07 	vldr	s13, [r4, #28]
90016b28:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016b2c:	ee76 6a86 	vadd.f32	s13, s13, s12
90016b30:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016b34:	e9d4 2300 	ldrd	r2, r3, [r4]
90016b38:	edc4 6a07 	vstr	s13, [r4, #28]
90016b3c:	441a      	add	r2, r3
90016b3e:	6963      	ldr	r3, [r4, #20]
90016b40:	3301      	adds	r3, #1
90016b42:	6022      	str	r2, [r4, #0]
90016b44:	6163      	str	r3, [r4, #20]
90016b46:	69a3      	ldr	r3, [r4, #24]
90016b48:	3b01      	subs	r3, #1
90016b4a:	61a3      	str	r3, [r4, #24]
90016b4c:	6923      	ldr	r3, [r4, #16]
90016b4e:	440b      	add	r3, r1
90016b50:	68e1      	ldr	r1, [r4, #12]
90016b52:	428b      	cmp	r3, r1
90016b54:	6123      	str	r3, [r4, #16]
90016b56:	db15      	blt.n	90016b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90016b58:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90016b5c:	3201      	adds	r2, #1
90016b5e:	1a5b      	subs	r3, r3, r1
90016b60:	ee76 6a26 	vadd.f32	s13, s12, s13
90016b64:	6022      	str	r2, [r4, #0]
90016b66:	6123      	str	r3, [r4, #16]
90016b68:	edc4 6a07 	vstr	s13, [r4, #28]
90016b6c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016b70:	ee36 7a87 	vadd.f32	s14, s13, s14
90016b74:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016b78:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90016b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
90016b80:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016b84:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90016b88:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90016b8c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016b90:	ee37 7a27 	vadd.f32	s14, s14, s15
90016b94:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90016b98:	68a9      	ldr	r1, [r5, #8]
90016b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016b9e:	ed95 6a08 	vldr	s12, [r5, #32]
90016ba2:	edd5 6a07 	vldr	s13, [r5, #28]
90016ba6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016baa:	ee76 6a86 	vadd.f32	s13, s13, s12
90016bae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
90016bb6:	edc5 6a07 	vstr	s13, [r5, #28]
90016bba:	441a      	add	r2, r3
90016bbc:	696b      	ldr	r3, [r5, #20]
90016bbe:	3301      	adds	r3, #1
90016bc0:	602a      	str	r2, [r5, #0]
90016bc2:	616b      	str	r3, [r5, #20]
90016bc4:	69ab      	ldr	r3, [r5, #24]
90016bc6:	3b01      	subs	r3, #1
90016bc8:	61ab      	str	r3, [r5, #24]
90016bca:	692b      	ldr	r3, [r5, #16]
90016bcc:	440b      	add	r3, r1
90016bce:	68e9      	ldr	r1, [r5, #12]
90016bd0:	428b      	cmp	r3, r1
90016bd2:	612b      	str	r3, [r5, #16]
90016bd4:	db15      	blt.n	90016c02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90016bd6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90016bda:	3201      	adds	r2, #1
90016bdc:	1a5b      	subs	r3, r3, r1
90016bde:	ee76 6a26 	vadd.f32	s13, s12, s13
90016be2:	602a      	str	r2, [r5, #0]
90016be4:	612b      	str	r3, [r5, #16]
90016be6:	edc5 6a07 	vstr	s13, [r5, #28]
90016bea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016bee:	ee36 7a87 	vadd.f32	s14, s13, s14
90016bf2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016bf6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90016bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
90016bfe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016c02:	3f01      	subs	r7, #1
90016c04:	e757      	b.n	90016ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90016c06:	ad39      	add	r5, sp, #228	; 0xe4
90016c08:	ac19      	add	r4, sp, #100	; 0x64
90016c0a:	e72d      	b.n	90016a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90016c0c:	4613      	mov	r3, r2
90016c0e:	e744      	b.n	90016a9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90016c10:	4613      	mov	r3, r2
90016c12:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90016c14:	469e      	mov	lr, r3
90016c16:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90016c1a:	461f      	mov	r7, r3
90016c1c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90016c20:	f04f 0900 	mov.w	r9, #0
90016c24:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90016c28:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90016c2c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90016c30:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90016c34:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90016c38:	993d      	ldr	r1, [sp, #244]	; 0xf4
90016c3a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90016c3e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90016c42:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90016c46:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90016c4a:	960e      	str	r6, [sp, #56]	; 0x38
90016c4c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90016c50:	2f00      	cmp	r7, #0
90016c52:	d146      	bne.n	90016ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90016c54:	449c      	add	ip, r3
90016c56:	1ad7      	subs	r7, r2, r3
90016c58:	f1b9 0f00 	cmp.w	r9, #0
90016c5c:	d009      	beq.n	90016c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90016c5e:	9039      	str	r0, [sp, #228]	; 0xe4
90016c60:	913d      	str	r1, [sp, #244]	; 0xf4
90016c62:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90016c66:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90016c6a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90016c6e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90016c72:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016c74:	f04f 0800 	mov.w	r8, #0
90016c78:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016c7c:	910e      	str	r1, [sp, #56]	; 0x38
90016c7e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016c82:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90016c86:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016c8a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016c8e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016c92:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90016c96:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90016c9a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016c9e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016ca2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90016ca6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90016caa:	f1be 0f00 	cmp.w	lr, #0
90016cae:	d030      	beq.n	90016d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90016cb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90016cb2:	4450      	add	r0, sl
90016cb4:	ee76 6aa4 	vadd.f32	s13, s13, s9
90016cb8:	4431      	add	r1, r6
90016cba:	ee37 7a04 	vadd.f32	s14, s14, s8
90016cbe:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016cc2:	4549      	cmp	r1, r9
90016cc4:	db08      	blt.n	90016cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90016cc6:	ee77 7a85 	vadd.f32	s15, s15, s10
90016cca:	3001      	adds	r0, #1
90016ccc:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016cd0:	eba1 0109 	sub.w	r1, r1, r9
90016cd4:	ee37 7a06 	vadd.f32	s14, s14, s12
90016cd8:	f10e 3eff 	add.w	lr, lr, #4294967295
90016cdc:	f04f 0801 	mov.w	r8, #1
90016ce0:	e7e3      	b.n	90016caa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90016ce2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90016ce4:	4450      	add	r0, sl
90016ce6:	ee37 7a24 	vadd.f32	s14, s14, s9
90016cea:	4431      	add	r1, r6
90016cec:	ee77 7a84 	vadd.f32	s15, s15, s8
90016cf0:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016cf4:	4541      	cmp	r1, r8
90016cf6:	db08      	blt.n	90016d0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90016cf8:	ee76 6a85 	vadd.f32	s13, s13, s10
90016cfc:	3001      	adds	r0, #1
90016cfe:	ee37 7a25 	vadd.f32	s14, s14, s11
90016d02:	eba1 0108 	sub.w	r1, r1, r8
90016d06:	ee77 7a86 	vadd.f32	s15, s15, s12
90016d0a:	3f01      	subs	r7, #1
90016d0c:	f04f 0901 	mov.w	r9, #1
90016d10:	e79e      	b.n	90016c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90016d12:	449c      	add	ip, r3
90016d14:	1aff      	subs	r7, r7, r3
90016d16:	f1b8 0f00 	cmp.w	r8, #0
90016d1a:	d009      	beq.n	90016d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90016d1c:	9019      	str	r0, [sp, #100]	; 0x64
90016d1e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90016d22:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90016d26:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90016d2a:	911d      	str	r1, [sp, #116]	; 0x74
90016d2c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90016d30:	1ad2      	subs	r2, r2, r3
90016d32:	e6b5      	b.n	90016aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016d36:	681b      	ldr	r3, [r3, #0]
90016d38:	b923      	cbnz	r3, 90016d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016d3a:	4b04      	ldr	r3, [pc, #16]	; (90016d4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90016d3c:	6818      	ldr	r0, [r3, #0]
90016d3e:	6803      	ldr	r3, [r0, #0]
90016d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016d42:	4798      	blx	r3
90016d44:	b05b      	add	sp, #364	; 0x16c
90016d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016d4a:	bf00      	nop
90016d4c:	24028194 	.word	0x24028194

90016d50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90016d50:	b570      	push	{r4, r5, r6, lr}
90016d52:	4604      	mov	r4, r0
90016d54:	2500      	movs	r5, #0
90016d56:	9805      	ldr	r0, [sp, #20]
90016d58:	f89d 601c 	ldrb.w	r6, [sp, #28]
90016d5c:	6061      	str	r1, [r4, #4]
90016d5e:	8263      	strh	r3, [r4, #18]
90016d60:	f89d 1010 	ldrb.w	r1, [sp, #16]
90016d64:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90016d68:	8025      	strh	r5, [r4, #0]
90016d6a:	7221      	strb	r1, [r4, #8]
90016d6c:	7266      	strb	r6, [r4, #9]
90016d6e:	60e0      	str	r0, [r4, #12]
90016d70:	8222      	strh	r2, [r4, #16]
90016d72:	82a3      	strh	r3, [r4, #20]
90016d74:	82e5      	strh	r5, [r4, #22]
90016d76:	8325      	strh	r5, [r4, #24]
90016d78:	8365      	strh	r5, [r4, #26]
90016d7a:	83a5      	strh	r5, [r4, #28]
90016d7c:	83e5      	strh	r5, [r4, #30]
90016d7e:	8425      	strh	r5, [r4, #32]
90016d80:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90016d84:	b32e      	cbz	r6, 90016dd2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d86:	6803      	ldr	r3, [r0, #0]
90016d88:	695b      	ldr	r3, [r3, #20]
90016d8a:	4798      	blx	r3
90016d8c:	4606      	mov	r6, r0
90016d8e:	b300      	cbz	r0, 90016dd2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d90:	68e0      	ldr	r0, [r4, #12]
90016d92:	4631      	mov	r1, r6
90016d94:	6803      	ldr	r3, [r0, #0]
90016d96:	68db      	ldr	r3, [r3, #12]
90016d98:	4798      	blx	r3
90016d9a:	4605      	mov	r5, r0
90016d9c:	b1c8      	cbz	r0, 90016dd2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d9e:	7b43      	ldrb	r3, [r0, #13]
90016da0:	7a82      	ldrb	r2, [r0, #10]
90016da2:	005b      	lsls	r3, r3, #1
90016da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
90016da8:	4313      	orrs	r3, r2
90016daa:	8423      	strh	r3, [r4, #32]
90016dac:	7a63      	ldrb	r3, [r4, #9]
90016dae:	2b06      	cmp	r3, #6
90016db0:	d10f      	bne.n	90016dd2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016db2:	68e0      	ldr	r0, [r4, #12]
90016db4:	462a      	mov	r2, r5
90016db6:	4631      	mov	r1, r6
90016db8:	6803      	ldr	r3, [r0, #0]
90016dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016dbc:	4798      	blx	r3
90016dbe:	7b6b      	ldrb	r3, [r5, #13]
90016dc0:	005b      	lsls	r3, r3, #1
90016dc2:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016dc6:	7aab      	ldrb	r3, [r5, #10]
90016dc8:	4313      	orrs	r3, r2
90016dca:	4418      	add	r0, r3
90016dcc:	8c23      	ldrh	r3, [r4, #32]
90016dce:	4418      	add	r0, r3
90016dd0:	8420      	strh	r0, [r4, #32]
90016dd2:	4620      	mov	r0, r4
90016dd4:	bd70      	pop	{r4, r5, r6, pc}

90016dd6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90016dd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016dda:	2400      	movs	r4, #0
90016ddc:	b085      	sub	sp, #20
90016dde:	4681      	mov	r9, r0
90016de0:	4688      	mov	r8, r1
90016de2:	4692      	mov	sl, r2
90016de4:	469b      	mov	fp, r3
90016de6:	4627      	mov	r7, r4
90016de8:	4625      	mov	r5, r4
90016dea:	4626      	mov	r6, r4
90016dec:	4554      	cmp	r4, sl
90016dee:	da2a      	bge.n	90016e46 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016df0:	2300      	movs	r3, #0
90016df2:	9303      	str	r3, [sp, #12]
90016df4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016df8:	429d      	cmp	r5, r3
90016dfa:	d004      	beq.n	90016e06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90016dfc:	f242 030b 	movw	r3, #8203	; 0x200b
90016e00:	429d      	cmp	r5, r3
90016e02:	bf18      	it	ne
90016e04:	462f      	movne	r7, r5
90016e06:	ab03      	add	r3, sp, #12
90016e08:	4642      	mov	r2, r8
90016e0a:	4659      	mov	r1, fp
90016e0c:	4648      	mov	r0, r9
90016e0e:	f003 f83d 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90016e12:	4605      	mov	r5, r0
90016e14:	b1b8      	cbz	r0, 90016e46 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016e16:	280a      	cmp	r0, #10
90016e18:	d015      	beq.n	90016e46 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016e1a:	9a03      	ldr	r2, [sp, #12]
90016e1c:	b18a      	cbz	r2, 90016e42 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90016e1e:	7b50      	ldrb	r0, [r2, #13]
90016e20:	4639      	mov	r1, r7
90016e22:	7a93      	ldrb	r3, [r2, #10]
90016e24:	0040      	lsls	r0, r0, #1
90016e26:	8895      	ldrh	r5, [r2, #4]
90016e28:	f400 7080 	and.w	r0, r0, #256	; 0x100
90016e2c:	4303      	orrs	r3, r0
90016e2e:	4640      	mov	r0, r8
90016e30:	9301      	str	r3, [sp, #4]
90016e32:	f8d8 3000 	ldr.w	r3, [r8]
90016e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016e38:	4798      	blx	r3
90016e3a:	9b01      	ldr	r3, [sp, #4]
90016e3c:	4418      	add	r0, r3
90016e3e:	4406      	add	r6, r0
90016e40:	b2b6      	uxth	r6, r6
90016e42:	3401      	adds	r4, #1
90016e44:	e7d2      	b.n	90016dec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90016e46:	4630      	mov	r0, r6
90016e48:	b005      	add	sp, #20
90016e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016e4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90016e4e:	2a02      	cmp	r2, #2
90016e50:	b530      	push	{r4, r5, lr}
90016e52:	d011      	beq.n	90016e78 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90016e54:	2a03      	cmp	r2, #3
90016e56:	d01c      	beq.n	90016e92 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90016e58:	2a01      	cmp	r2, #1
90016e5a:	d10c      	bne.n	90016e76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90016e5c:	888b      	ldrh	r3, [r1, #4]
90016e5e:	8801      	ldrh	r1, [r0, #0]
90016e60:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90016e64:	1a5b      	subs	r3, r3, r1
90016e66:	8844      	ldrh	r4, [r0, #2]
90016e68:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90016e6c:	1a9b      	subs	r3, r3, r2
90016e6e:	8004      	strh	r4, [r0, #0]
90016e70:	8081      	strh	r1, [r0, #4]
90016e72:	8043      	strh	r3, [r0, #2]
90016e74:	80c2      	strh	r2, [r0, #6]
90016e76:	bd30      	pop	{r4, r5, pc}
90016e78:	88cb      	ldrh	r3, [r1, #6]
90016e7a:	8842      	ldrh	r2, [r0, #2]
90016e7c:	1a9b      	subs	r3, r3, r2
90016e7e:	88c2      	ldrh	r2, [r0, #6]
90016e80:	1a9b      	subs	r3, r3, r2
90016e82:	888a      	ldrh	r2, [r1, #4]
90016e84:	8801      	ldrh	r1, [r0, #0]
90016e86:	8043      	strh	r3, [r0, #2]
90016e88:	1a52      	subs	r2, r2, r1
90016e8a:	8881      	ldrh	r1, [r0, #4]
90016e8c:	1a52      	subs	r2, r2, r1
90016e8e:	8002      	strh	r2, [r0, #0]
90016e90:	e7f1      	b.n	90016e76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90016e92:	88cb      	ldrh	r3, [r1, #6]
90016e94:	8841      	ldrh	r1, [r0, #2]
90016e96:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90016e9a:	1a5b      	subs	r3, r3, r1
90016e9c:	f9b0 5000 	ldrsh.w	r5, [r0]
90016ea0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90016ea4:	1a9b      	subs	r3, r3, r2
90016ea6:	8045      	strh	r5, [r0, #2]
90016ea8:	8082      	strh	r2, [r0, #4]
90016eaa:	8003      	strh	r3, [r0, #0]
90016eac:	80c4      	strh	r4, [r0, #6]
90016eae:	e7e2      	b.n	90016e76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90016eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90016eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016eb4:	b09f      	sub	sp, #124	; 0x7c
90016eb6:	9116      	str	r1, [sp, #88]	; 0x58
90016eb8:	9317      	str	r3, [sp, #92]	; 0x5c
90016eba:	9929      	ldr	r1, [sp, #164]	; 0xa4
90016ebc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90016ebe:	8809      	ldrh	r1, [r1, #0]
90016ec0:	889b      	ldrh	r3, [r3, #4]
90016ec2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90016ec6:	440b      	add	r3, r1
90016ec8:	9212      	str	r2, [sp, #72]	; 0x48
90016eca:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90016ece:	b21b      	sxth	r3, r3
90016ed0:	9011      	str	r0, [sp, #68]	; 0x44
90016ed2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90016ed6:	9310      	str	r3, [sp, #64]	; 0x40
90016ed8:	f8d8 3000 	ldr.w	r3, [r8]
90016edc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90016ee0:	7b19      	ldrb	r1, [r3, #12]
90016ee2:	7adb      	ldrb	r3, [r3, #11]
90016ee4:	9114      	str	r1, [sp, #80]	; 0x50
90016ee6:	9315      	str	r3, [sp, #84]	; 0x54
90016ee8:	2a00      	cmp	r2, #0
90016eea:	d06a      	beq.n	90016fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90016eec:	f898 3010 	ldrb.w	r3, [r8, #16]
90016ef0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90016ef2:	2b06      	cmp	r3, #6
90016ef4:	bf14      	ite	ne
90016ef6:	2301      	movne	r3, #1
90016ef8:	2302      	moveq	r3, #2
90016efa:	4413      	add	r3, r2
90016efc:	f04f 0900 	mov.w	r9, #0
90016f00:	930f      	str	r3, [sp, #60]	; 0x3c
90016f02:	464c      	mov	r4, r9
90016f04:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90016f08:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90016f0c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90016f10:	4293      	cmp	r3, r2
90016f12:	f280 808f 	bge.w	90017034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90016f16:	2300      	movs	r3, #0
90016f18:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90016f1c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90016f20:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016f24:	429c      	cmp	r4, r3
90016f26:	d006      	beq.n	90016f36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90016f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016f2a:	f242 020b 	movw	r2, #8203	; 0x200b
90016f2e:	4294      	cmp	r4, r2
90016f30:	bf18      	it	ne
90016f32:	4623      	movne	r3, r4
90016f34:	930d      	str	r3, [sp, #52]	; 0x34
90016f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016f38:	992d      	ldr	r1, [sp, #180]	; 0xb4
90016f3a:	f8d8 2000 	ldr.w	r2, [r8]
90016f3e:	428b      	cmp	r3, r1
90016f40:	db41      	blt.n	90016fc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90016f42:	6813      	ldr	r3, [r2, #0]
90016f44:	4610      	mov	r0, r2
90016f46:	695b      	ldr	r3, [r3, #20]
90016f48:	4798      	blx	r3
90016f4a:	4604      	mov	r4, r0
90016f4c:	f8d8 0000 	ldr.w	r0, [r8]
90016f50:	aa1d      	add	r2, sp, #116	; 0x74
90016f52:	4621      	mov	r1, r4
90016f54:	6803      	ldr	r3, [r0, #0]
90016f56:	689d      	ldr	r5, [r3, #8]
90016f58:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90016f5c:	47a8      	blx	r5
90016f5e:	901c      	str	r0, [sp, #112]	; 0x70
90016f60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016f64:	429c      	cmp	r4, r3
90016f66:	f000 80ec 	beq.w	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016f6a:	f242 030b 	movw	r3, #8203	; 0x200b
90016f6e:	429c      	cmp	r4, r3
90016f70:	f000 80e7 	beq.w	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016f74:	2c00      	cmp	r4, #0
90016f76:	f000 80f9 	beq.w	9001716c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90016f7a:	2c0a      	cmp	r4, #10
90016f7c:	d060      	beq.n	90017040 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90016f7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90016f80:	b36a      	cbz	r2, 90016fde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90016f82:	8894      	ldrh	r4, [r2, #4]
90016f84:	f1bb 0f00 	cmp.w	fp, #0
90016f88:	d03b      	beq.n	90017002 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90016f8a:	f892 900d 	ldrb.w	r9, [r2, #13]
90016f8e:	f1bb 0f01 	cmp.w	fp, #1
90016f92:	ea4f 0949 	mov.w	r9, r9, lsl #1
90016f96:	f409 7380 	and.w	r3, r9, #256	; 0x100
90016f9a:	f892 900a 	ldrb.w	r9, [r2, #10]
90016f9e:	ea49 0903 	orr.w	r9, r9, r3
90016fa2:	d134      	bne.n	9001700e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90016fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016fa6:	eba6 0609 	sub.w	r6, r6, r9
90016faa:	2b00      	cmp	r3, #0
90016fac:	d14f      	bne.n	9001704e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90016fae:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016fb0:	eb09 0306 	add.w	r3, r9, r6
90016fb4:	4413      	add	r3, r2
90016fb6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90016fb8:	f9b2 2000 	ldrsh.w	r2, [r2]
90016fbc:	4293      	cmp	r3, r2
90016fbe:	da51      	bge.n	90017064 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90016fc0:	e038      	b.n	90017034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90016fc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90016fc4:	e79a      	b.n	90016efc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90016fc6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90016fca:	4659      	mov	r1, fp
90016fcc:	982c      	ldr	r0, [sp, #176]	; 0xb0
90016fce:	9301      	str	r3, [sp, #4]
90016fd0:	ab1d      	add	r3, sp, #116	; 0x74
90016fd2:	9300      	str	r3, [sp, #0]
90016fd4:	ab1c      	add	r3, sp, #112	; 0x70
90016fd6:	f002 ffa2 	bl	90019f1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90016fda:	4604      	mov	r4, r0
90016fdc:	e7c0      	b.n	90016f60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90016fde:	f8d8 0000 	ldr.w	r0, [r8]
90016fe2:	6803      	ldr	r3, [r0, #0]
90016fe4:	691b      	ldr	r3, [r3, #16]
90016fe6:	4798      	blx	r3
90016fe8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016fec:	4298      	cmp	r0, r3
90016fee:	f000 80a8 	beq.w	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016ff2:	f242 030b 	movw	r3, #8203	; 0x200b
90016ff6:	4298      	cmp	r0, r3
90016ff8:	f000 80a3 	beq.w	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016ffc:	f1bb 0f00 	cmp.w	fp, #0
90017000:	d100      	bne.n	90017004 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90017002:	444e      	add	r6, r9
90017004:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90017006:	2a00      	cmp	r2, #0
90017008:	d1bf      	bne.n	90016f8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
9001700a:	4691      	mov	r9, r2
9001700c:	e099      	b.n	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017010:	2b00      	cmp	r3, #0
90017012:	f000 80ad 	beq.w	90017170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90017016:	f1bb 0f00 	cmp.w	fp, #0
9001701a:	d118      	bne.n	9001704e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
9001701c:	f8d8 0000 	ldr.w	r0, [r8]
90017020:	990d      	ldr	r1, [sp, #52]	; 0x34
90017022:	6803      	ldr	r3, [r0, #0]
90017024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017026:	4798      	blx	r3
90017028:	4406      	add	r6, r0
9001702a:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001702c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001702e:	1af3      	subs	r3, r6, r3
90017030:	4293      	cmp	r3, r2
90017032:	dd17      	ble.n	90017064 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90017034:	2c00      	cmp	r4, #0
90017036:	f000 8099 	beq.w	9001716c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001703a:	2c0a      	cmp	r4, #10
9001703c:	f040 8087 	bne.w	9001714e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90017040:	240a      	movs	r4, #10
90017042:	fab4 f084 	clz	r0, r4
90017046:	0940      	lsrs	r0, r0, #5
90017048:	b01f      	add	sp, #124	; 0x7c
9001704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001704e:	f8d8 0000 	ldr.w	r0, [r8]
90017052:	990d      	ldr	r1, [sp, #52]	; 0x34
90017054:	6803      	ldr	r3, [r0, #0]
90017056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017058:	4798      	blx	r3
9001705a:	f1bb 0f01 	cmp.w	fp, #1
9001705e:	eba6 0600 	sub.w	r6, r6, r0
90017062:	d0a4      	beq.n	90016fae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90017064:	981c      	ldr	r0, [sp, #112]	; 0x70
90017066:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90017068:	f990 1009 	ldrsb.w	r1, [r0, #9]
9001706c:	f9b3 7000 	ldrsh.w	r7, [r3]
90017070:	7b43      	ldrb	r3, [r0, #13]
90017072:	4431      	add	r1, r6
90017074:	015b      	lsls	r3, r3, #5
90017076:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001707a:	7983      	ldrb	r3, [r0, #6]
9001707c:	4313      	orrs	r3, r2
9001707e:	440b      	add	r3, r1
90017080:	42bb      	cmp	r3, r7
90017082:	db5e      	blt.n	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017084:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017086:	4299      	cmp	r1, r3
90017088:	da5b      	bge.n	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001708a:	f8d8 0000 	ldr.w	r0, [r8]
9001708e:	42b7      	cmp	r7, r6
90017090:	6803      	ldr	r3, [r0, #0]
90017092:	bfcc      	ite	gt
90017094:	1bbf      	subgt	r7, r7, r6
90017096:	2700      	movle	r7, #0
90017098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001709a:	bfc8      	it	gt
9001709c:	b2bf      	uxthgt	r7, r7
9001709e:	4798      	blx	r3
900170a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900170a2:	7b5a      	ldrb	r2, [r3, #13]
900170a4:	00d1      	lsls	r1, r2, #3
900170a6:	f401 7580 	and.w	r5, r1, #256	; 0x100
900170aa:	7a19      	ldrb	r1, [r3, #8]
900170ac:	4329      	orrs	r1, r5
900170ae:	0655      	lsls	r5, r2, #25
900170b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
900170b2:	bf48      	it	mi
900170b4:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
900170b8:	4405      	add	r5, r0
900170ba:	bf48      	it	mi
900170bc:	b209      	sxthmi	r1, r1
900170be:	1a6d      	subs	r5, r5, r1
900170c0:	9929      	ldr	r1, [sp, #164]	; 0xa4
900170c2:	b2ad      	uxth	r5, r5
900170c4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
900170c8:	fa0f fa85 	sxth.w	sl, r5
900170cc:	4551      	cmp	r1, sl
900170ce:	dd3c      	ble.n	9001714a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
900170d0:	0112      	lsls	r2, r2, #4
900170d2:	79d8      	ldrb	r0, [r3, #7]
900170d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
900170d8:	4302      	orrs	r2, r0
900170da:	4492      	add	sl, r2
900170dc:	4551      	cmp	r1, sl
900170de:	dc30      	bgt.n	90017142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900170e0:	1b4d      	subs	r5, r1, r5
900170e2:	468a      	mov	sl, r1
900170e4:	b22d      	sxth	r5, r5
900170e6:	9319      	str	r3, [sp, #100]	; 0x64
900170e8:	b2ad      	uxth	r5, r5
900170ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
900170ec:	f8d8 0000 	ldr.w	r0, [r8]
900170f0:	681a      	ldr	r2, [r3, #0]
900170f2:	6801      	ldr	r1, [r0, #0]
900170f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
900170f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900170f8:	9313      	str	r3, [sp, #76]	; 0x4c
900170fa:	9218      	str	r2, [sp, #96]	; 0x60
900170fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
900170fe:	4788      	blx	r1
90017100:	f898 1006 	ldrb.w	r1, [r8, #6]
90017104:	9b19      	ldr	r3, [sp, #100]	; 0x64
90017106:	910b      	str	r1, [sp, #44]	; 0x2c
90017108:	f898 100e 	ldrb.w	r1, [r8, #14]
9001710c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001710e:	910a      	str	r1, [sp, #40]	; 0x28
90017110:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90017114:	9109      	str	r1, [sp, #36]	; 0x24
90017116:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001711a:	9305      	str	r3, [sp, #20]
9001711c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001711e:	9206      	str	r2, [sp, #24]
90017120:	9304      	str	r3, [sp, #16]
90017122:	9b12      	ldr	r3, [sp, #72]	; 0x48
90017124:	f8cd a004 	str.w	sl, [sp, #4]
90017128:	e9cd 7502 	strd	r7, r5, [sp, #8]
9001712c:	4437      	add	r7, r6
9001712e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017130:	b23f      	sxth	r7, r7
90017132:	e9cd 0107 	strd	r0, r1, [sp, #28]
90017136:	9700      	str	r7, [sp, #0]
90017138:	9916      	ldr	r1, [sp, #88]	; 0x58
9001713a:	681a      	ldr	r2, [r3, #0]
9001713c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001713e:	685b      	ldr	r3, [r3, #4]
90017140:	47a8      	blx	r5
90017142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017144:	3301      	adds	r3, #1
90017146:	930e      	str	r3, [sp, #56]	; 0x38
90017148:	e6e0      	b.n	90016f0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
9001714a:	2500      	movs	r5, #0
9001714c:	e7cb      	b.n	900170e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
9001714e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90017150:	3501      	adds	r5, #1
90017152:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90017154:	429d      	cmp	r5, r3
90017156:	f6bf af74 	bge.w	90017042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
9001715a:	4659      	mov	r1, fp
9001715c:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001715e:	f7f0 fd83 	bl	90007c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017162:	4604      	mov	r4, r0
90017164:	b110      	cbz	r0, 9001716c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90017166:	280a      	cmp	r0, #10
90017168:	d1f2      	bne.n	90017150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
9001716a:	e769      	b.n	90017040 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
9001716c:	2400      	movs	r4, #0
9001716e:	e768      	b.n	90017042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90017170:	f1bb 0f00 	cmp.w	fp, #0
90017174:	f43f af59 	beq.w	9001702a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90017178:	e774      	b.n	90017064 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
9001717a:	b530      	push	{r4, r5, lr}
9001717c:	8ac4      	ldrh	r4, [r0, #22]
9001717e:	8b45      	ldrh	r5, [r0, #26]
90017180:	8343      	strh	r3, [r0, #26]
90017182:	442c      	add	r4, r5
90017184:	1ae4      	subs	r4, r4, r3
90017186:	8b83      	ldrh	r3, [r0, #28]
90017188:	82c4      	strh	r4, [r0, #22]
9001718a:	8b04      	ldrh	r4, [r0, #24]
9001718c:	4422      	add	r2, r4
9001718e:	440c      	add	r4, r1
90017190:	1a59      	subs	r1, r3, r1
90017192:	83c2      	strh	r2, [r0, #30]
90017194:	8304      	strh	r4, [r0, #24]
90017196:	8381      	strh	r1, [r0, #28]
90017198:	bd30      	pop	{r4, r5, pc}

9001719a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001719a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001719e:	4604      	mov	r4, r0
900171a0:	8a47      	ldrh	r7, [r0, #18]
900171a2:	68c0      	ldr	r0, [r0, #12]
900171a4:	b085      	sub	sp, #20
900171a6:	6803      	ldr	r3, [r0, #0]
900171a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900171aa:	4798      	blx	r3
900171ac:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
900171b0:	7a63      	ldrb	r3, [r4, #9]
900171b2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
900171b6:	3b01      	subs	r3, #1
900171b8:	42b7      	cmp	r7, r6
900171ba:	bfac      	ite	ge
900171bc:	f04f 0900 	movge.w	r9, #0
900171c0:	f04f 0901 	movlt.w	r9, #1
900171c4:	2b05      	cmp	r3, #5
900171c6:	d804      	bhi.n	900171d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
900171c8:	e8df f003 	tbb	[pc, r3]
900171cc:	470f0854 	.word	0x470f0854
900171d0:	4c4c      	.short	0x4c4c
900171d2:	2500      	movs	r5, #0
900171d4:	46a9      	mov	r9, r5
900171d6:	462e      	mov	r6, r5
900171d8:	462f      	mov	r7, r5
900171da:	e00e      	b.n	900171fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900171dc:	42b7      	cmp	r7, r6
900171de:	f04f 0500 	mov.w	r5, #0
900171e2:	bfb4      	ite	lt
900171e4:	2600      	movlt	r6, #0
900171e6:	2601      	movge	r6, #1
900171e8:	e7f6      	b.n	900171d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900171ea:	42b7      	cmp	r7, r6
900171ec:	464d      	mov	r5, r9
900171ee:	f04f 0900 	mov.w	r9, #0
900171f2:	bfb4      	ite	lt
900171f4:	2600      	movlt	r6, #0
900171f6:	2601      	movge	r6, #1
900171f8:	464f      	mov	r7, r9
900171fa:	f04f 0800 	mov.w	r8, #0
900171fe:	f8a4 8016 	strh.w	r8, [r4, #22]
90017202:	f8a4 8018 	strh.w	r8, [r4, #24]
90017206:	f8cd 8004 	str.w	r8, [sp, #4]
9001720a:	2300      	movs	r3, #0
9001720c:	9303      	str	r3, [sp, #12]
9001720e:	8823      	ldrh	r3, [r4, #0]
90017210:	2b20      	cmp	r3, #32
90017212:	d033      	beq.n	9001727c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90017214:	f242 010b 	movw	r1, #8203	; 0x200b
90017218:	1a5a      	subs	r2, r3, r1
9001721a:	f1d2 0a00 	rsbs	sl, r2, #0
9001721e:	eb4a 0a02 	adc.w	sl, sl, r2
90017222:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90017226:	4293      	cmp	r3, r2
90017228:	d008      	beq.n	9001723c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
9001722a:	428b      	cmp	r3, r1
9001722c:	9a01      	ldr	r2, [sp, #4]
9001722e:	bf0e      	itee	eq
90017230:	f04f 0a01 	moveq.w	sl, #1
90017234:	461a      	movne	r2, r3
90017236:	f04f 0a00 	movne.w	sl, #0
9001723a:	9201      	str	r2, [sp, #4]
9001723c:	ab03      	add	r3, sp, #12
9001723e:	68e2      	ldr	r2, [r4, #12]
90017240:	7a21      	ldrb	r1, [r4, #8]
90017242:	6860      	ldr	r0, [r4, #4]
90017244:	f002 fe22 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90017248:	8020      	strh	r0, [r4, #0]
9001724a:	b9d8      	cbnz	r0, 90017284 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
9001724c:	8ba2      	ldrh	r2, [r4, #28]
9001724e:	2300      	movs	r3, #0
90017250:	4611      	mov	r1, r2
90017252:	4620      	mov	r0, r4
90017254:	f7ff ff91 	bl	9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90017258:	e06e      	b.n	90017338 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001725a:	2500      	movs	r5, #0
9001725c:	2701      	movs	r7, #1
9001725e:	46a9      	mov	r9, r5
90017260:	462e      	mov	r6, r5
90017262:	e7ca      	b.n	900171fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017264:	42b7      	cmp	r7, r6
90017266:	f04f 0500 	mov.w	r5, #0
9001726a:	bfb4      	ite	lt
9001726c:	2700      	movlt	r7, #0
9001726e:	2701      	movge	r7, #1
90017270:	462e      	mov	r6, r5
90017272:	e7c2      	b.n	900171fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017274:	2500      	movs	r5, #0
90017276:	2601      	movs	r6, #1
90017278:	46a9      	mov	r9, r5
9001727a:	e7ad      	b.n	900171d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001727c:	9301      	str	r3, [sp, #4]
9001727e:	f04f 0a01 	mov.w	sl, #1
90017282:	e7db      	b.n	9001723c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90017284:	8b63      	ldrh	r3, [r4, #26]
90017286:	280a      	cmp	r0, #10
90017288:	f103 0301 	add.w	r3, r3, #1
9001728c:	8363      	strh	r3, [r4, #26]
9001728e:	d0dd      	beq.n	9001724c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90017290:	9a03      	ldr	r2, [sp, #12]
90017292:	bb62      	cbnz	r2, 900172ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90017294:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017298:	4298      	cmp	r0, r3
9001729a:	d003      	beq.n	900172a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001729c:	f242 030b 	movw	r3, #8203	; 0x200b
900172a0:	4298      	cmp	r0, r3
900172a2:	d1b2      	bne.n	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172a4:	8823      	ldrh	r3, [r4, #0]
900172a6:	8ba1      	ldrh	r1, [r4, #28]
900172a8:	2b20      	cmp	r3, #32
900172aa:	d003      	beq.n	900172b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
900172ac:	f242 000b 	movw	r0, #8203	; 0x200b
900172b0:	4283      	cmp	r3, r0
900172b2:	d131      	bne.n	90017318 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
900172b4:	f1ba 0f00 	cmp.w	sl, #0
900172b8:	bf0a      	itet	eq
900172ba:	4688      	moveq	r8, r1
900172bc:	4650      	movne	r0, sl
900172be:	2001      	moveq	r0, #1
900172c0:	440a      	add	r2, r1
900172c2:	8b23      	ldrh	r3, [r4, #24]
900172c4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
900172c8:	b292      	uxth	r2, r2
900172ca:	83a2      	strh	r2, [r4, #28]
900172cc:	4413      	add	r3, r2
900172ce:	f1b9 0f00 	cmp.w	r9, #0
900172d2:	d102      	bne.n	900172da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
900172d4:	2d00      	cmp	r5, #0
900172d6:	d042      	beq.n	9001735e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
900172d8:	b300      	cbz	r0, 9001731c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
900172da:	8c21      	ldrh	r1, [r4, #32]
900172dc:	4419      	add	r1, r3
900172de:	458c      	cmp	ip, r1
900172e0:	da37      	bge.n	90017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900172e2:	8ae1      	ldrh	r1, [r4, #22]
900172e4:	2900      	cmp	r1, #0
900172e6:	d034      	beq.n	90017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900172e8:	4563      	cmp	r3, ip
900172ea:	dd8e      	ble.n	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172ec:	e01d      	b.n	9001732a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
900172ee:	8893      	ldrh	r3, [r2, #4]
900172f0:	9901      	ldr	r1, [sp, #4]
900172f2:	8023      	strh	r3, [r4, #0]
900172f4:	f892 b00d 	ldrb.w	fp, [r2, #13]
900172f8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
900172fc:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90017300:	f892 b00a 	ldrb.w	fp, [r2, #10]
90017304:	ea4b 0b00 	orr.w	fp, fp, r0
90017308:	68e0      	ldr	r0, [r4, #12]
9001730a:	6803      	ldr	r3, [r0, #0]
9001730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001730e:	4798      	blx	r3
90017310:	eb0b 0200 	add.w	r2, fp, r0
90017314:	b292      	uxth	r2, r2
90017316:	e7c5      	b.n	900172a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90017318:	2000      	movs	r0, #0
9001731a:	e7d1      	b.n	900172c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
9001731c:	4563      	cmp	r3, ip
9001731e:	f77f af74 	ble.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017322:	8ae3      	ldrh	r3, [r4, #22]
90017324:	2b00      	cmp	r3, #0
90017326:	f43f af70 	beq.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001732a:	2301      	movs	r3, #1
9001732c:	8c22      	ldrh	r2, [r4, #32]
9001732e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
90017332:	8be3      	ldrh	r3, [r4, #30]
90017334:	4413      	add	r3, r2
90017336:	83e3      	strh	r3, [r4, #30]
90017338:	68e0      	ldr	r0, [r4, #12]
9001733a:	6803      	ldr	r3, [r0, #0]
9001733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001733e:	4798      	blx	r3
90017340:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90017344:	4418      	add	r0, r3
90017346:	8a63      	ldrh	r3, [r4, #18]
90017348:	1a18      	subs	r0, r3, r0
9001734a:	8260      	strh	r0, [r4, #18]
9001734c:	b005      	add	sp, #20
9001734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017352:	2300      	movs	r3, #0
90017354:	4611      	mov	r1, r2
90017356:	4620      	mov	r0, r4
90017358:	f7ff ff0f 	bl	9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
9001735c:	e755      	b.n	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001735e:	4563      	cmp	r3, ip
90017360:	dd14      	ble.n	9001738c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90017362:	b117      	cbz	r7, 9001736a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90017364:	2301      	movs	r3, #1
90017366:	460a      	mov	r2, r1
90017368:	e772      	b.n	90017250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001736a:	2e00      	cmp	r6, #0
9001736c:	f43f af4d 	beq.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017370:	2800      	cmp	r0, #0
90017372:	f47f af4a 	bne.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017376:	f1ba 0f00 	cmp.w	sl, #0
9001737a:	d002      	beq.n	90017382 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
9001737c:	2301      	movs	r3, #1
9001737e:	4642      	mov	r2, r8
90017380:	e767      	b.n	90017252 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90017382:	8ae3      	ldrh	r3, [r4, #22]
90017384:	2b00      	cmp	r3, #0
90017386:	f43f af40 	beq.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001738a:	e7d5      	b.n	90017338 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001738c:	2800      	cmp	r0, #0
9001738e:	f47f af3c 	bne.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017392:	f1ba 0f00 	cmp.w	sl, #0
90017396:	f43f af38 	beq.w	9001720a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001739a:	2301      	movs	r3, #1
9001739c:	4642      	mov	r2, r8
9001739e:	e7da      	b.n	90017356 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

900173a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
900173a0:	b5f0      	push	{r4, r5, r6, r7, lr}
900173a2:	4605      	mov	r5, r0
900173a4:	b08f      	sub	sp, #60	; 0x3c
900173a6:	4617      	mov	r7, r2
900173a8:	461c      	mov	r4, r3
900173aa:	460e      	mov	r6, r1
900173ac:	b1d1      	cbz	r1, 900173e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
900173ae:	681b      	ldr	r3, [r3, #0]
900173b0:	4620      	mov	r0, r4
900173b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900173b4:	4798      	blx	r3
900173b6:	4240      	negs	r0, r0
900173b8:	9603      	str	r6, [sp, #12]
900173ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
900173be:	b200      	sxth	r0, r0
900173c0:	9700      	str	r7, [sp, #0]
900173c2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
900173c6:	4629      	mov	r1, r5
900173c8:	e9cd 4001 	strd	r4, r0, [sp, #4]
900173cc:	2401      	movs	r4, #1
900173ce:	a805      	add	r0, sp, #20
900173d0:	f7ff fcbe 	bl	90016d50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900173d4:	a805      	add	r0, sp, #20
900173d6:	f7ff fee0 	bl	9001719a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900173da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900173de:	b163      	cbz	r3, 900173fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900173e0:	3401      	adds	r4, #1
900173e2:	e7f7      	b.n	900173d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
900173e4:	2401      	movs	r4, #1
900173e6:	f002 fe1d 	bl	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
900173ea:	280a      	cmp	r0, #10
900173ec:	4628      	mov	r0, r5
900173ee:	bf08      	it	eq
900173f0:	3401      	addeq	r4, #1
900173f2:	f002 fe17 	bl	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
900173f6:	2800      	cmp	r0, #0
900173f8:	d1f7      	bne.n	900173ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
900173fa:	b2a0      	uxth	r0, r4
900173fc:	b00f      	add	sp, #60	; 0x3c
900173fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

90017400 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90017400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017404:	b0e3      	sub	sp, #396	; 0x18c
90017406:	461c      	mov	r4, r3
90017408:	4683      	mov	fp, r0
9001740a:	4688      	mov	r8, r1
9001740c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
9001740e:	2b00      	cmp	r3, #0
90017410:	f000 810f 	beq.w	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017414:	6823      	ldr	r3, [r4, #0]
90017416:	2b00      	cmp	r3, #0
90017418:	f000 810b 	beq.w	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001741c:	7ba3      	ldrb	r3, [r4, #14]
9001741e:	2b00      	cmp	r3, #0
90017420:	f000 8107 	beq.w	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017424:	ad0a      	add	r5, sp, #40	; 0x28
90017426:	6810      	ldr	r0, [r2, #0]
90017428:	6851      	ldr	r1, [r2, #4]
9001742a:	462b      	mov	r3, r5
9001742c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
90017430:	c303      	stmia	r3!, {r0, r1}
90017432:	2100      	movs	r1, #0
90017434:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90017438:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001743c:	4628      	mov	r0, r5
9001743e:	910c      	str	r1, [sp, #48]	; 0x30
90017440:	a90c      	add	r1, sp, #48	; 0x30
90017442:	79a2      	ldrb	r2, [r4, #6]
90017444:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017448:	f7ff fd01 	bl	90016e4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
9001744c:	a90c      	add	r1, sp, #48	; 0x30
9001744e:	79a2      	ldrb	r2, [r4, #6]
90017450:	4608      	mov	r0, r1
90017452:	f7ff fcfc 	bl	90016e4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90017456:	a817      	add	r0, sp, #92	; 0x5c
90017458:	f002 f9b7 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
9001745c:	6820      	ldr	r0, [r4, #0]
9001745e:	6803      	ldr	r3, [r0, #0]
90017460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017462:	4798      	blx	r3
90017464:	4606      	mov	r6, r0
90017466:	6820      	ldr	r0, [r4, #0]
90017468:	6803      	ldr	r3, [r0, #0]
9001746a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001746c:	4798      	blx	r3
9001746e:	4633      	mov	r3, r6
90017470:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017472:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017474:	9000      	str	r0, [sp, #0]
90017476:	a817      	add	r0, sp, #92	; 0x5c
90017478:	f002 fa02 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001747c:	6820      	ldr	r0, [r4, #0]
9001747e:	f894 a004 	ldrb.w	sl, [r4, #4]
90017482:	6803      	ldr	r3, [r0, #0]
90017484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017486:	4798      	blx	r3
90017488:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
9001748c:	6823      	ldr	r3, [r4, #0]
9001748e:	4607      	mov	r7, r0
90017490:	4406      	add	r6, r0
90017492:	a830      	add	r0, sp, #192	; 0xc0
90017494:	f893 9009 	ldrb.w	r9, [r3, #9]
90017498:	f002 f997 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
9001749c:	7c23      	ldrb	r3, [r4, #16]
9001749e:	b17b      	cbz	r3, 900174c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
900174a0:	6820      	ldr	r0, [r4, #0]
900174a2:	6803      	ldr	r3, [r0, #0]
900174a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900174a6:	4798      	blx	r3
900174a8:	9009      	str	r0, [sp, #36]	; 0x24
900174aa:	6820      	ldr	r0, [r4, #0]
900174ac:	6802      	ldr	r2, [r0, #0]
900174ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
900174b0:	4790      	blx	r2
900174b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900174b4:	9000      	str	r0, [sp, #0]
900174b6:	a830      	add	r0, sp, #192	; 0xc0
900174b8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900174ba:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900174bc:	f002 f9e0 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900174c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900174c4:	a80e      	add	r0, sp, #56	; 0x38
900174c6:	7be2      	ldrb	r2, [r4, #15]
900174c8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900174cc:	1a8a      	subs	r2, r1, r2
900174ce:	7c21      	ldrb	r1, [r4, #16]
900174d0:	9103      	str	r1, [sp, #12]
900174d2:	b292      	uxth	r2, r2
900174d4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
900174d8:	9102      	str	r1, [sp, #8]
900174da:	6821      	ldr	r1, [r4, #0]
900174dc:	9101      	str	r1, [sp, #4]
900174de:	7961      	ldrb	r1, [r4, #5]
900174e0:	9100      	str	r1, [sp, #0]
900174e2:	a930      	add	r1, sp, #192	; 0xc0
900174e4:	f7ff fc34 	bl	90016d50 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900174e8:	2e00      	cmp	r6, #0
900174ea:	dc5b      	bgt.n	900175a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
900174ec:	af17      	add	r7, sp, #92	; 0x5c
900174ee:	f04f 0900 	mov.w	r9, #0
900174f2:	7c23      	ldrb	r3, [r4, #16]
900174f4:	2b00      	cmp	r3, #0
900174f6:	f000 80ae 	beq.w	90017656 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
900174fa:	a80e      	add	r0, sp, #56	; 0x38
900174fc:	f7ff fe4d 	bl	9001719a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017500:	f1ba 0f00 	cmp.w	sl, #0
90017504:	f000 80a2 	beq.w	9001764c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017508:	7c23      	ldrb	r3, [r4, #16]
9001750a:	2264      	movs	r2, #100	; 0x64
9001750c:	4639      	mov	r1, r7
9001750e:	a849      	add	r0, sp, #292	; 0x124
90017510:	9309      	str	r3, [sp, #36]	; 0x24
90017512:	f010 f9b4 	bl	9002787e <memcpy>
90017516:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017518:	2b00      	cmp	r3, #0
9001751a:	f000 80a4 	beq.w	90017666 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
9001751e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90017522:	7922      	ldrb	r2, [r4, #4]
90017524:	2a01      	cmp	r2, #1
90017526:	f040 8087 	bne.w	90017638 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
9001752a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
9001752e:	1ac0      	subs	r0, r0, r3
90017530:	2302      	movs	r3, #2
90017532:	fb90 f0f3 	sdiv	r0, r0, r3
90017536:	b200      	sxth	r0, r0
90017538:	7c23      	ldrb	r3, [r4, #16]
9001753a:	2b00      	cmp	r3, #0
9001753c:	f000 8088 	beq.w	90017650 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90017540:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90017544:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90017548:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001754c:	e9cd 2105 	strd	r2, r1, [sp, #20]
90017550:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90017554:	2100      	movs	r1, #0
90017556:	4410      	add	r0, r2
90017558:	4642      	mov	r2, r8
9001755a:	b200      	sxth	r0, r0
9001755c:	e9cd 9703 	strd	r9, r7, [sp, #12]
90017560:	9000      	str	r0, [sp, #0]
90017562:	4658      	mov	r0, fp
90017564:	e9cd 5401 	strd	r5, r4, [sp, #4]
90017568:	f7ff fca2 	bl	90016eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
9001756c:	2800      	cmp	r0, #0
9001756e:	d160      	bne.n	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017570:	b2b2      	uxth	r2, r6
90017572:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017576:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
9001757a:	4413      	add	r3, r2
9001757c:	1a8a      	subs	r2, r1, r2
9001757e:	b21b      	sxth	r3, r3
90017580:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90017584:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90017588:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001758c:	2a00      	cmp	r2, #0
9001758e:	d150      	bne.n	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017590:	6822      	ldr	r2, [r4, #0]
90017592:	8869      	ldrh	r1, [r5, #2]
90017594:	7a12      	ldrb	r2, [r2, #8]
90017596:	1a9b      	subs	r3, r3, r2
90017598:	88ea      	ldrh	r2, [r5, #6]
9001759a:	440a      	add	r2, r1
9001759c:	b212      	sxth	r2, r2
9001759e:	4293      	cmp	r3, r2
900175a0:	dda7      	ble.n	900174f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
900175a2:	e046      	b.n	90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900175a4:	7c23      	ldrb	r3, [r4, #16]
900175a6:	444f      	add	r7, r9
900175a8:	b1c3      	cbz	r3, 900175dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
900175aa:	f64f 79ff 	movw	r9, #65535	; 0xffff
900175ae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900175b2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900175b6:	443b      	add	r3, r7
900175b8:	4293      	cmp	r3, r2
900175ba:	da97      	bge.n	900174ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900175bc:	a80e      	add	r0, sp, #56	; 0x38
900175be:	f7ff fdec 	bl	9001719a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900175c2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
900175c6:	3b01      	subs	r3, #1
900175c8:	b29b      	uxth	r3, r3
900175ca:	454b      	cmp	r3, r9
900175cc:	9309      	str	r3, [sp, #36]	; 0x24
900175ce:	d021      	beq.n	90017614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
900175d0:	7961      	ldrb	r1, [r4, #5]
900175d2:	a817      	add	r0, sp, #92	; 0x5c
900175d4:	f7f0 fb48 	bl	90007c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900175d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900175da:	e7f4      	b.n	900175c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
900175dc:	fa1f f986 	uxth.w	r9, r6
900175e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900175e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900175e8:	443b      	add	r3, r7
900175ea:	4293      	cmp	r3, r2
900175ec:	f6bf af7e 	bge.w	900174ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900175f0:	a817      	add	r0, sp, #92	; 0x5c
900175f2:	f002 fd17 	bl	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
900175f6:	b1e0      	cbz	r0, 90017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900175f8:	280a      	cmp	r0, #10
900175fa:	d1f1      	bne.n	900175e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
900175fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017600:	444b      	add	r3, r9
90017602:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017606:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001760a:	eba3 0309 	sub.w	r3, r3, r9
9001760e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017612:	e7e5      	b.n	900175e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017614:	b2b3      	uxth	r3, r6
90017616:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001761a:	441a      	add	r2, r3
9001761c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90017620:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90017624:	1ad3      	subs	r3, r2, r3
90017626:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001762a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001762e:	2b00      	cmp	r3, #0
90017630:	d1bd      	bne.n	900175ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90017632:	b063      	add	sp, #396	; 0x18c
90017634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017638:	2a02      	cmp	r2, #2
9001763a:	d105      	bne.n	90017648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
9001763c:	7be2      	ldrb	r2, [r4, #15]
9001763e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90017642:	1a80      	subs	r0, r0, r2
90017644:	1ac0      	subs	r0, r0, r3
90017646:	e776      	b.n	90017536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90017648:	2000      	movs	r0, #0
9001764a:	e775      	b.n	90017538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
9001764c:	7be0      	ldrb	r0, [r4, #15]
9001764e:	e773      	b.n	90017538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017650:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017654:	e776      	b.n	90017544 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90017656:	f1ba 0f00 	cmp.w	sl, #0
9001765a:	d0f7      	beq.n	9001764c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
9001765c:	2264      	movs	r2, #100	; 0x64
9001765e:	4639      	mov	r1, r7
90017660:	a849      	add	r0, sp, #292	; 0x124
90017662:	f010 f90c 	bl	9002787e <memcpy>
90017666:	2300      	movs	r3, #0
90017668:	f647 72ff 	movw	r2, #32767	; 0x7fff
9001766c:	6821      	ldr	r1, [r4, #0]
9001766e:	a849      	add	r0, sp, #292	; 0x124
90017670:	f7ff fbb1 	bl	90016dd6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90017674:	b203      	sxth	r3, r0
90017676:	e754      	b.n	90017522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90017678 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90017678:	2b03      	cmp	r3, #3
9001767a:	d818      	bhi.n	900176ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
9001767c:	e8df f003 	tbb	[pc, r3]
90017680:	130d0602 	.word	0x130d0602
90017684:	f9b0 2000 	ldrsh.w	r2, [r0]
90017688:	1850      	adds	r0, r2, r1
9001768a:	4770      	bx	lr
9001768c:	8803      	ldrh	r3, [r0, #0]
9001768e:	8880      	ldrh	r0, [r0, #4]
90017690:	4418      	add	r0, r3
90017692:	b200      	sxth	r0, r0
90017694:	1a80      	subs	r0, r0, r2
90017696:	3801      	subs	r0, #1
90017698:	4770      	bx	lr
9001769a:	8803      	ldrh	r3, [r0, #0]
9001769c:	8880      	ldrh	r0, [r0, #4]
9001769e:	4418      	add	r0, r3
900176a0:	b200      	sxth	r0, r0
900176a2:	1a40      	subs	r0, r0, r1
900176a4:	e7f7      	b.n	90017696 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
900176a6:	f9b0 0000 	ldrsh.w	r0, [r0]
900176aa:	4410      	add	r0, r2
900176ac:	4770      	bx	lr
900176ae:	2000      	movs	r0, #0
900176b0:	4770      	bx	lr

900176b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
900176b2:	2b03      	cmp	r3, #3
900176b4:	d817      	bhi.n	900176e6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
900176b6:	e8df f003 	tbb	[pc, r3]
900176ba:	0602      	.short	0x0602
900176bc:	1009      	.short	0x1009
900176be:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900176c2:	1850      	adds	r0, r2, r1
900176c4:	4770      	bx	lr
900176c6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900176ca:	e7fa      	b.n	900176c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
900176cc:	8843      	ldrh	r3, [r0, #2]
900176ce:	88c0      	ldrh	r0, [r0, #6]
900176d0:	4418      	add	r0, r3
900176d2:	b200      	sxth	r0, r0
900176d4:	1a80      	subs	r0, r0, r2
900176d6:	3801      	subs	r0, #1
900176d8:	4770      	bx	lr
900176da:	8843      	ldrh	r3, [r0, #2]
900176dc:	88c0      	ldrh	r0, [r0, #6]
900176de:	4418      	add	r0, r3
900176e0:	b200      	sxth	r0, r0
900176e2:	1a40      	subs	r0, r0, r1
900176e4:	e7f7      	b.n	900176d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
900176e6:	2000      	movs	r0, #0
900176e8:	4770      	bx	lr
	...

900176ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
900176ec:	4b01      	ldr	r3, [pc, #4]	; (900176f4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
900176ee:	2200      	movs	r2, #0
900176f0:	601a      	str	r2, [r3, #0]
900176f2:	4770      	bx	lr
900176f4:	240281a4 	.word	0x240281a4

900176f8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
900176f8:	4603      	mov	r3, r0
900176fa:	b1c8      	cbz	r0, 90017730 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
900176fc:	0c02      	lsrs	r2, r0, #16
900176fe:	0412      	lsls	r2, r2, #16
90017700:	b9a2      	cbnz	r2, 9001772c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90017702:	0403      	lsls	r3, r0, #16
90017704:	2010      	movs	r0, #16
90017706:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
9001770a:	bf04      	itt	eq
9001770c:	021b      	lsleq	r3, r3, #8
9001770e:	3008      	addeq	r0, #8
90017710:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90017714:	bf04      	itt	eq
90017716:	011b      	lsleq	r3, r3, #4
90017718:	3004      	addeq	r0, #4
9001771a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
9001771e:	bf04      	itt	eq
90017720:	009b      	lsleq	r3, r3, #2
90017722:	3002      	addeq	r0, #2
90017724:	2b00      	cmp	r3, #0
90017726:	db04      	blt.n	90017732 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90017728:	3001      	adds	r0, #1
9001772a:	4770      	bx	lr
9001772c:	2000      	movs	r0, #0
9001772e:	e7ea      	b.n	90017706 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90017730:	2020      	movs	r0, #32
90017732:	4770      	bx	lr

90017734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90017734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017738:	b087      	sub	sp, #28
9001773a:	4681      	mov	r9, r0
9001773c:	4698      	mov	r8, r3
9001773e:	4610      	mov	r0, r2
90017740:	460d      	mov	r5, r1
90017742:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90017746:	b981      	cbnz	r1, 9001776a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90017748:	b14b      	cbz	r3, 9001775e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
9001774a:	460b      	mov	r3, r1
9001774c:	464a      	mov	r2, r9
9001774e:	4641      	mov	r1, r8
90017750:	e9cd 4700 	strd	r4, r7, [sp]
90017754:	f7ff ffee 	bl	90017734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017758:	b007      	add	sp, #28
9001775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001775e:	f04f 33ff 	mov.w	r3, #4294967295
90017762:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90017766:	603b      	str	r3, [r7, #0]
90017768:	e7f6      	b.n	90017758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
9001776a:	fa32 fa01 	lsrs.w	sl, r2, r1
9001776e:	d107      	bne.n	90017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90017770:	fb09 f602 	mul.w	r6, r9, r2
90017774:	fbb6 f0f4 	udiv	r0, r6, r4
90017778:	fb04 6610 	mls	r6, r4, r0, r6
9001777c:	603e      	str	r6, [r7, #0]
9001777e:	e7eb      	b.n	90017758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017780:	2601      	movs	r6, #1
90017782:	fa09 fb01 	lsl.w	fp, r9, r1
90017786:	408e      	lsls	r6, r1
90017788:	fbbb f3f4 	udiv	r3, fp, r4
9001778c:	3e01      	subs	r6, #1
9001778e:	9302      	str	r3, [sp, #8]
90017790:	fb0a f303 	mul.w	r3, sl, r3
90017794:	4016      	ands	r6, r2
90017796:	9303      	str	r3, [sp, #12]
90017798:	4630      	mov	r0, r6
9001779a:	f7ff ffad 	bl	900176f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001779e:	464a      	mov	r2, r9
900177a0:	460b      	mov	r3, r1
900177a2:	4601      	mov	r1, r0
900177a4:	4630      	mov	r0, r6
900177a6:	e9cd 4700 	strd	r4, r7, [sp]
900177aa:	f7ff ffc3 	bl	90017734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900177ae:	9b02      	ldr	r3, [sp, #8]
900177b0:	4606      	mov	r6, r0
900177b2:	eb05 0108 	add.w	r1, r5, r8
900177b6:	fb04 bb13 	mls	fp, r4, r3, fp
900177ba:	4658      	mov	r0, fp
900177bc:	f7ff ff9c 	bl	900176f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
900177c0:	ab05      	add	r3, sp, #20
900177c2:	465a      	mov	r2, fp
900177c4:	e9cd 4300 	strd	r4, r3, [sp]
900177c8:	4603      	mov	r3, r0
900177ca:	4650      	mov	r0, sl
900177cc:	f7ff ffb2 	bl	90017734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900177d0:	6839      	ldr	r1, [r7, #0]
900177d2:	9a05      	ldr	r2, [sp, #20]
900177d4:	9b03      	ldr	r3, [sp, #12]
900177d6:	4411      	add	r1, r2
900177d8:	fbb1 f2f4 	udiv	r2, r1, r4
900177dc:	18d3      	adds	r3, r2, r3
900177de:	fb04 1412 	mls	r4, r4, r2, r1
900177e2:	441e      	add	r6, r3
900177e4:	603c      	str	r4, [r7, #0]
900177e6:	4430      	add	r0, r6
900177e8:	e7b6      	b.n	90017758 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

900177ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
900177ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900177ee:	b085      	sub	sp, #20
900177f0:	f1b0 0900 	subs.w	r9, r0, #0
900177f4:	461d      	mov	r5, r3
900177f6:	4617      	mov	r7, r2
900177f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900177fa:	bfbb      	ittet	lt
900177fc:	f1c9 0900 	rsblt	r9, r9, #0
90017800:	f04f 36ff 	movlt.w	r6, #4294967295
90017804:	2601      	movge	r6, #1
90017806:	6823      	ldrlt	r3, [r4, #0]
90017808:	bfbc      	itt	lt
9001780a:	425b      	neglt	r3, r3
9001780c:	6023      	strlt	r3, [r4, #0]
9001780e:	2a00      	cmp	r2, #0
90017810:	da04      	bge.n	9001781c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90017812:	6823      	ldr	r3, [r4, #0]
90017814:	4257      	negs	r7, r2
90017816:	4276      	negs	r6, r6
90017818:	425b      	negs	r3, r3
9001781a:	6023      	str	r3, [r4, #0]
9001781c:	2d00      	cmp	r5, #0
9001781e:	4638      	mov	r0, r7
90017820:	bfba      	itte	lt
90017822:	426d      	neglt	r5, r5
90017824:	f04f 38ff 	movlt.w	r8, #4294967295
90017828:	f04f 0801 	movge.w	r8, #1
9001782c:	f7ff ff64 	bl	900176f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017830:	ab03      	add	r3, sp, #12
90017832:	463a      	mov	r2, r7
90017834:	e9cd 5300 	strd	r5, r3, [sp]
90017838:	4603      	mov	r3, r0
9001783a:	4648      	mov	r0, r9
9001783c:	f7ff ff7a 	bl	90017734 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017840:	6823      	ldr	r3, [r4, #0]
90017842:	9a03      	ldr	r2, [sp, #12]
90017844:	4546      	cmp	r6, r8
90017846:	441a      	add	r2, r3
90017848:	fb92 f3f5 	sdiv	r3, r2, r5
9001784c:	4418      	add	r0, r3
9001784e:	fb05 2313 	mls	r3, r5, r3, r2
90017852:	bf18      	it	ne
90017854:	4240      	negne	r0, r0
90017856:	1c72      	adds	r2, r6, #1
90017858:	6023      	str	r3, [r4, #0]
9001785a:	d105      	bne.n	90017868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
9001785c:	2b00      	cmp	r3, #0
9001785e:	f1c3 0200 	rsb	r2, r3, #0
90017862:	db0b      	blt.n	9001787c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90017864:	6022      	str	r2, [r4, #0]
90017866:	e006      	b.n	90017876 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017868:	2e01      	cmp	r6, #1
9001786a:	d104      	bne.n	90017876 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
9001786c:	2b00      	cmp	r3, #0
9001786e:	da02      	bge.n	90017876 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017870:	442b      	add	r3, r5
90017872:	3801      	subs	r0, #1
90017874:	6023      	str	r3, [r4, #0]
90017876:	b005      	add	sp, #20
90017878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001787c:	3801      	subs	r0, #1
9001787e:	1b52      	subs	r2, r2, r5
90017880:	e7f0      	b.n	90017864 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90017884 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90017884:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90017888:	4c1c      	ldr	r4, [pc, #112]	; (900178fc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
9001788a:	4605      	mov	r5, r0
9001788c:	6807      	ldr	r7, [r0, #0]
9001788e:	69a3      	ldr	r3, [r4, #24]
90017890:	b92b      	cbnz	r3, 9001789e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90017892:	6840      	ldr	r0, [r0, #4]
90017894:	e9c5 7000 	strd	r7, r0, [r5]
90017898:	b004      	add	sp, #16
9001789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001789e:	f04f 0802 	mov.w	r8, #2
900178a2:	68a2      	ldr	r2, [r4, #8]
900178a4:	ae04      	add	r6, sp, #16
900178a6:	6820      	ldr	r0, [r4, #0]
900178a8:	fb93 f1f8 	sdiv	r1, r3, r8
900178ac:	440a      	add	r2, r1
900178ae:	69e1      	ldr	r1, [r4, #28]
900178b0:	f846 2d04 	str.w	r2, [r6, #-4]!
900178b4:	463a      	mov	r2, r7
900178b6:	9600      	str	r6, [sp, #0]
900178b8:	f7ff ff97 	bl	900177ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900178bc:	69a3      	ldr	r3, [r4, #24]
900178be:	4607      	mov	r7, r0
900178c0:	686a      	ldr	r2, [r5, #4]
900178c2:	6a21      	ldr	r1, [r4, #32]
900178c4:	9600      	str	r6, [sp, #0]
900178c6:	6860      	ldr	r0, [r4, #4]
900178c8:	f7ff ff8f 	bl	900177ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900178cc:	69a3      	ldr	r3, [r4, #24]
900178ce:	6962      	ldr	r2, [r4, #20]
900178d0:	4407      	add	r7, r0
900178d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
900178d4:	9600      	str	r6, [sp, #0]
900178d6:	68e0      	ldr	r0, [r4, #12]
900178d8:	fb93 f8f8 	sdiv	r8, r3, r8
900178dc:	4442      	add	r2, r8
900178de:	9203      	str	r2, [sp, #12]
900178e0:	682a      	ldr	r2, [r5, #0]
900178e2:	f7ff ff82 	bl	900177ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900178e6:	4680      	mov	r8, r0
900178e8:	9600      	str	r6, [sp, #0]
900178ea:	69a3      	ldr	r3, [r4, #24]
900178ec:	686a      	ldr	r2, [r5, #4]
900178ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
900178f0:	6920      	ldr	r0, [r4, #16]
900178f2:	f7ff ff7a 	bl	900177ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900178f6:	4440      	add	r0, r8
900178f8:	e7cc      	b.n	90017894 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
900178fa:	bf00      	nop
900178fc:	240281a8 	.word	0x240281a8

90017900 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90017900:	4b07      	ldr	r3, [pc, #28]	; (90017920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90017902:	781b      	ldrb	r3, [r3, #0]
90017904:	2b01      	cmp	r3, #1
90017906:	d109      	bne.n	9001791c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90017908:	f9b1 3000 	ldrsh.w	r3, [r1]
9001790c:	f9b0 2000 	ldrsh.w	r2, [r0]
90017910:	8003      	strh	r3, [r0, #0]
90017912:	4b04      	ldr	r3, [pc, #16]	; (90017924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90017914:	881b      	ldrh	r3, [r3, #0]
90017916:	3b01      	subs	r3, #1
90017918:	1a9b      	subs	r3, r3, r2
9001791a:	800b      	strh	r3, [r1, #0]
9001791c:	4770      	bx	lr
9001791e:	bf00      	nop
90017920:	2402818c 	.word	0x2402818c
90017924:	24028188 	.word	0x24028188

90017928 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90017928:	4b07      	ldr	r3, [pc, #28]	; (90017948 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
9001792a:	b510      	push	{r4, lr}
9001792c:	781b      	ldrb	r3, [r3, #0]
9001792e:	2b01      	cmp	r3, #1
90017930:	d108      	bne.n	90017944 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90017932:	4b06      	ldr	r3, [pc, #24]	; (9001794c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90017934:	880c      	ldrh	r4, [r1, #0]
90017936:	881b      	ldrh	r3, [r3, #0]
90017938:	f9b0 2000 	ldrsh.w	r2, [r0]
9001793c:	3b01      	subs	r3, #1
9001793e:	1b1b      	subs	r3, r3, r4
90017940:	8003      	strh	r3, [r0, #0]
90017942:	800a      	strh	r2, [r1, #0]
90017944:	bd10      	pop	{r4, pc}
90017946:	bf00      	nop
90017948:	2402818c 	.word	0x2402818c
9001794c:	24028188 	.word	0x24028188

90017950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90017950:	4b0a      	ldr	r3, [pc, #40]	; (9001797c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90017952:	b510      	push	{r4, lr}
90017954:	781b      	ldrb	r3, [r3, #0]
90017956:	2b01      	cmp	r3, #1
90017958:	d10e      	bne.n	90017978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
9001795a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
9001795e:	8843      	ldrh	r3, [r0, #2]
90017960:	f9b0 4000 	ldrsh.w	r4, [r0]
90017964:	18ca      	adds	r2, r1, r3
90017966:	4b06      	ldr	r3, [pc, #24]	; (90017980 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90017968:	8044      	strh	r4, [r0, #2]
9001796a:	881b      	ldrh	r3, [r3, #0]
9001796c:	1a9b      	subs	r3, r3, r2
9001796e:	8003      	strh	r3, [r0, #0]
90017970:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017974:	8081      	strh	r1, [r0, #4]
90017976:	80c3      	strh	r3, [r0, #6]
90017978:	bd10      	pop	{r4, pc}
9001797a:	bf00      	nop
9001797c:	2402818c 	.word	0x2402818c
90017980:	24028188 	.word	0x24028188

90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90017984:	4b08      	ldr	r3, [pc, #32]	; (900179a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90017986:	781b      	ldrb	r3, [r3, #0]
90017988:	2b01      	cmp	r3, #1
9001798a:	d10c      	bne.n	900179a6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
9001798c:	8803      	ldrh	r3, [r0, #0]
9001798e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90017992:	8842      	ldrh	r2, [r0, #2]
90017994:	8002      	strh	r2, [r0, #0]
90017996:	185a      	adds	r2, r3, r1
90017998:	4b04      	ldr	r3, [pc, #16]	; (900179ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
9001799a:	881b      	ldrh	r3, [r3, #0]
9001799c:	1a9b      	subs	r3, r3, r2
9001799e:	8043      	strh	r3, [r0, #2]
900179a0:	88c3      	ldrh	r3, [r0, #6]
900179a2:	80c1      	strh	r1, [r0, #6]
900179a4:	8083      	strh	r3, [r0, #4]
900179a6:	4770      	bx	lr
900179a8:	2402818c 	.word	0x2402818c
900179ac:	24028188 	.word	0x24028188

900179b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
900179b0:	4b07      	ldr	r3, [pc, #28]	; (900179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
900179b2:	b510      	push	{r4, lr}
900179b4:	781b      	ldrb	r3, [r3, #0]
900179b6:	2b01      	cmp	r3, #1
900179b8:	d108      	bne.n	900179cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
900179ba:	f9b1 3000 	ldrsh.w	r3, [r1]
900179be:	f9b0 4000 	ldrsh.w	r4, [r0]
900179c2:	8003      	strh	r3, [r0, #0]
900179c4:	8893      	ldrh	r3, [r2, #4]
900179c6:	3b01      	subs	r3, #1
900179c8:	1b1b      	subs	r3, r3, r4
900179ca:	800b      	strh	r3, [r1, #0]
900179cc:	bd10      	pop	{r4, pc}
900179ce:	bf00      	nop
900179d0:	2402818c 	.word	0x2402818c

900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
900179d4:	4b0a      	ldr	r3, [pc, #40]	; (90017a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
900179d6:	460a      	mov	r2, r1
900179d8:	b510      	push	{r4, lr}
900179da:	781b      	ldrb	r3, [r3, #0]
900179dc:	2b01      	cmp	r3, #1
900179de:	d10d      	bne.n	900179fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
900179e0:	8881      	ldrh	r1, [r0, #4]
900179e2:	8803      	ldrh	r3, [r0, #0]
900179e4:	440b      	add	r3, r1
900179e6:	4601      	mov	r1, r0
900179e8:	3b01      	subs	r3, #1
900179ea:	f821 3b02 	strh.w	r3, [r1], #2
900179ee:	f7ff ffdf 	bl	900179b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
900179f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900179f6:	88c2      	ldrh	r2, [r0, #6]
900179f8:	80c3      	strh	r3, [r0, #6]
900179fa:	8082      	strh	r2, [r0, #4]
900179fc:	bd10      	pop	{r4, pc}
900179fe:	bf00      	nop
90017a00:	2402818c 	.word	0x2402818c

90017a04 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90017a04:	4770      	bx	lr
	...

90017a08 <_ZN8touchgfx11Application13requestRedrawEv>:
90017a08:	4b06      	ldr	r3, [pc, #24]	; (90017a24 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90017a0a:	2100      	movs	r1, #0
90017a0c:	f9b3 2000 	ldrsh.w	r2, [r3]
90017a10:	4b05      	ldr	r3, [pc, #20]	; (90017a28 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90017a12:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90017a16:	f9b3 3000 	ldrsh.w	r3, [r3]
90017a1a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90017a1e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90017a22:	4770      	bx	lr
90017a24:	24028188 	.word	0x24028188
90017a28:	2402818a 	.word	0x2402818a

90017a2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90017a2c:	4b03      	ldr	r3, [pc, #12]	; (90017a3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90017a2e:	6818      	ldr	r0, [r3, #0]
90017a30:	b110      	cbz	r0, 90017a38 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90017a32:	6803      	ldr	r3, [r0, #0]
90017a34:	699b      	ldr	r3, [r3, #24]
90017a36:	4718      	bx	r3
90017a38:	4770      	bx	lr
90017a3a:	bf00      	nop
90017a3c:	240281d8 	.word	0x240281d8

90017a40 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90017a40:	4770      	bx	lr
	...

90017a44 <_ZN8touchgfx11Application4drawEv>:
90017a44:	4b09      	ldr	r3, [pc, #36]	; (90017a6c <_ZN8touchgfx11Application4drawEv+0x28>)
90017a46:	b507      	push	{r0, r1, r2, lr}
90017a48:	f9b3 2000 	ldrsh.w	r2, [r3]
90017a4c:	2100      	movs	r1, #0
90017a4e:	4b08      	ldr	r3, [pc, #32]	; (90017a70 <_ZN8touchgfx11Application4drawEv+0x2c>)
90017a50:	9100      	str	r1, [sp, #0]
90017a52:	4669      	mov	r1, sp
90017a54:	f9b3 3000 	ldrsh.w	r3, [r3]
90017a58:	f8ad 2004 	strh.w	r2, [sp, #4]
90017a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
90017a60:	6803      	ldr	r3, [r0, #0]
90017a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90017a64:	4798      	blx	r3
90017a66:	b003      	add	sp, #12
90017a68:	f85d fb04 	ldr.w	pc, [sp], #4
90017a6c:	24028188 	.word	0x24028188
90017a70:	2402818a 	.word	0x2402818a

90017a74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90017a74:	4b03      	ldr	r3, [pc, #12]	; (90017a84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90017a76:	6818      	ldr	r0, [r3, #0]
90017a78:	b110      	cbz	r0, 90017a80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90017a7a:	6803      	ldr	r3, [r0, #0]
90017a7c:	69db      	ldr	r3, [r3, #28]
90017a7e:	4718      	bx	r3
90017a80:	4770      	bx	lr
90017a82:	bf00      	nop
90017a84:	240281d8 	.word	0x240281d8

90017a88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90017a88:	4b03      	ldr	r3, [pc, #12]	; (90017a98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90017a8a:	6818      	ldr	r0, [r3, #0]
90017a8c:	b110      	cbz	r0, 90017a94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90017a8e:	6803      	ldr	r3, [r0, #0]
90017a90:	6a1b      	ldr	r3, [r3, #32]
90017a92:	4718      	bx	r3
90017a94:	4770      	bx	lr
90017a96:	bf00      	nop
90017a98:	240281d8 	.word	0x240281d8

90017a9c <_ZN8touchgfx11Application16clearCachedAreasEv>:
90017a9c:	2300      	movs	r3, #0
90017a9e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90017aa2:	4770      	bx	lr

90017aa4 <_ZN8touchgfx11Application14handleKeyEventEh>:
90017aa4:	4b03      	ldr	r3, [pc, #12]	; (90017ab4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90017aa6:	6818      	ldr	r0, [r3, #0]
90017aa8:	b110      	cbz	r0, 90017ab0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90017aaa:	6803      	ldr	r3, [r0, #0]
90017aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017aae:	4718      	bx	r3
90017ab0:	4770      	bx	lr
90017ab2:	bf00      	nop
90017ab4:	240281d8 	.word	0x240281d8

90017ab8 <_ZN8touchgfx11ApplicationD1Ev>:
90017ab8:	4770      	bx	lr

90017aba <_ZN8touchgfx11ApplicationD0Ev>:
90017aba:	b510      	push	{r4, lr}
90017abc:	4604      	mov	r4, r0
90017abe:	f44f 719e 	mov.w	r1, #316	; 0x13c
90017ac2:	f00f fb18 	bl	900270f6 <_ZdlPvj>
90017ac6:	4620      	mov	r0, r4
90017ac8:	bd10      	pop	{r4, pc}

90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>:
90017aca:	b510      	push	{r4, lr}
90017acc:	f9b1 4000 	ldrsh.w	r4, [r1]
90017ad0:	888a      	ldrh	r2, [r1, #4]
90017ad2:	f9b0 3000 	ldrsh.w	r3, [r0]
90017ad6:	4422      	add	r2, r4
90017ad8:	b212      	sxth	r2, r2
90017ada:	4293      	cmp	r3, r2
90017adc:	da15      	bge.n	90017b0a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017ade:	8882      	ldrh	r2, [r0, #4]
90017ae0:	4413      	add	r3, r2
90017ae2:	b21b      	sxth	r3, r3
90017ae4:	429c      	cmp	r4, r3
90017ae6:	da10      	bge.n	90017b0a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017ae8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90017aec:	88c9      	ldrh	r1, [r1, #6]
90017aee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017af2:	4419      	add	r1, r3
90017af4:	b209      	sxth	r1, r1
90017af6:	428a      	cmp	r2, r1
90017af8:	da07      	bge.n	90017b0a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017afa:	88c0      	ldrh	r0, [r0, #6]
90017afc:	4410      	add	r0, r2
90017afe:	b200      	sxth	r0, r0
90017b00:	4283      	cmp	r3, r0
90017b02:	bfac      	ite	ge
90017b04:	2000      	movge	r0, #0
90017b06:	2001      	movlt	r0, #1
90017b08:	bd10      	pop	{r4, pc}
90017b0a:	2000      	movs	r0, #0
90017b0c:	e7fc      	b.n	90017b08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90017b0e <_ZN8touchgfx4Rect10restrictToEss>:
90017b0e:	f9b0 3000 	ldrsh.w	r3, [r0]
90017b12:	2b00      	cmp	r3, #0
90017b14:	b510      	push	{r4, lr}
90017b16:	da04      	bge.n	90017b22 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90017b18:	8884      	ldrh	r4, [r0, #4]
90017b1a:	4423      	add	r3, r4
90017b1c:	8083      	strh	r3, [r0, #4]
90017b1e:	2300      	movs	r3, #0
90017b20:	8003      	strh	r3, [r0, #0]
90017b22:	f9b0 4000 	ldrsh.w	r4, [r0]
90017b26:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017b2a:	1b09      	subs	r1, r1, r4
90017b2c:	428b      	cmp	r3, r1
90017b2e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90017b32:	bfc8      	it	gt
90017b34:	8081      	strhgt	r1, [r0, #4]
90017b36:	2b00      	cmp	r3, #0
90017b38:	da04      	bge.n	90017b44 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90017b3a:	88c1      	ldrh	r1, [r0, #6]
90017b3c:	440b      	add	r3, r1
90017b3e:	80c3      	strh	r3, [r0, #6]
90017b40:	2300      	movs	r3, #0
90017b42:	8043      	strh	r3, [r0, #2]
90017b44:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017b48:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90017b4c:	1a52      	subs	r2, r2, r1
90017b4e:	4293      	cmp	r3, r2
90017b50:	bfc8      	it	gt
90017b52:	80c2      	strhgt	r2, [r0, #6]
90017b54:	bd10      	pop	{r4, pc}
	...

90017b58 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90017b58:	4b10      	ldr	r3, [pc, #64]	; (90017b9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90017b5a:	b510      	push	{r4, lr}
90017b5c:	460c      	mov	r4, r1
90017b5e:	f9b3 2000 	ldrsh.w	r2, [r3]
90017b62:	4b0f      	ldr	r3, [pc, #60]	; (90017ba0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90017b64:	4620      	mov	r0, r4
90017b66:	f9b3 1000 	ldrsh.w	r1, [r3]
90017b6a:	f7ff ffd0 	bl	90017b0e <_ZN8touchgfx4Rect10restrictToEss>
90017b6e:	4b0d      	ldr	r3, [pc, #52]	; (90017ba4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90017b70:	6818      	ldr	r0, [r3, #0]
90017b72:	b190      	cbz	r0, 90017b9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90017b74:	6803      	ldr	r3, [r0, #0]
90017b76:	4621      	mov	r1, r4
90017b78:	689b      	ldr	r3, [r3, #8]
90017b7a:	4798      	blx	r3
90017b7c:	4b0a      	ldr	r3, [pc, #40]	; (90017ba8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90017b7e:	6818      	ldr	r0, [r3, #0]
90017b80:	b118      	cbz	r0, 90017b8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90017b82:	6803      	ldr	r3, [r0, #0]
90017b84:	4621      	mov	r1, r4
90017b86:	689b      	ldr	r3, [r3, #8]
90017b88:	4798      	blx	r3
90017b8a:	4b08      	ldr	r3, [pc, #32]	; (90017bac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90017b8c:	4621      	mov	r1, r4
90017b8e:	6818      	ldr	r0, [r3, #0]
90017b90:	6803      	ldr	r3, [r0, #0]
90017b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90017b96:	69db      	ldr	r3, [r3, #28]
90017b98:	4718      	bx	r3
90017b9a:	bd10      	pop	{r4, pc}
90017b9c:	2402818a 	.word	0x2402818a
90017ba0:	24028188 	.word	0x24028188
90017ba4:	240281d8 	.word	0x240281d8
90017ba8:	240281d4 	.word	0x240281d4
90017bac:	24028194 	.word	0x24028194

90017bb0 <_ZNK8touchgfx4Rect8includesERKS0_>:
90017bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017bb2:	4606      	mov	r6, r0
90017bb4:	4608      	mov	r0, r1
90017bb6:	460f      	mov	r7, r1
90017bb8:	f7fa febf 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90017bbc:	b9e8      	cbnz	r0, 90017bfa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017bbe:	f9b7 5000 	ldrsh.w	r5, [r7]
90017bc2:	f9b6 4000 	ldrsh.w	r4, [r6]
90017bc6:	42a5      	cmp	r5, r4
90017bc8:	db17      	blt.n	90017bfa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017bca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90017bce:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90017bd2:	429a      	cmp	r2, r3
90017bd4:	db11      	blt.n	90017bfa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017bd6:	88b9      	ldrh	r1, [r7, #4]
90017bd8:	440d      	add	r5, r1
90017bda:	88b1      	ldrh	r1, [r6, #4]
90017bdc:	440c      	add	r4, r1
90017bde:	b22d      	sxth	r5, r5
90017be0:	b224      	sxth	r4, r4
90017be2:	42a5      	cmp	r5, r4
90017be4:	dc09      	bgt.n	90017bfa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017be6:	88f8      	ldrh	r0, [r7, #6]
90017be8:	4410      	add	r0, r2
90017bea:	88f2      	ldrh	r2, [r6, #6]
90017bec:	4413      	add	r3, r2
90017bee:	b200      	sxth	r0, r0
90017bf0:	b21b      	sxth	r3, r3
90017bf2:	4298      	cmp	r0, r3
90017bf4:	bfcc      	ite	gt
90017bf6:	2000      	movgt	r0, #0
90017bf8:	2001      	movle	r0, #1
90017bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90017bfc <_ZN8touchgfx11Application11getInstanceEv>:
90017bfc:	4b01      	ldr	r3, [pc, #4]	; (90017c04 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90017bfe:	6818      	ldr	r0, [r3, #0]
90017c00:	4770      	bx	lr
90017c02:	bf00      	nop
90017c04:	240281e8 	.word	0x240281e8

90017c08 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90017c08:	2300      	movs	r3, #0
90017c0a:	b510      	push	{r4, lr}
90017c0c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90017c10:	4604      	mov	r4, r0
90017c12:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90017c16:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90017c1a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90017c1e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90017c22:	429a      	cmp	r2, r3
90017c24:	d90e      	bls.n	90017c44 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90017c26:	18e2      	adds	r2, r4, r3
90017c28:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
90017c2c:	b122      	cbz	r2, 90017c38 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90017c2e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90017c32:	6803      	ldr	r3, [r0, #0]
90017c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90017c36:	4798      	blx	r3
90017c38:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90017c3c:	3301      	adds	r3, #1
90017c3e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90017c42:	e7ea      	b.n	90017c1a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90017c44:	bd10      	pop	{r4, pc}

90017c46 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
90017c46:	b530      	push	{r4, r5, lr}
90017c48:	2200      	movs	r2, #0
90017c4a:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
90017c4e:	b293      	uxth	r3, r2
90017c50:	429d      	cmp	r5, r3
90017c52:	d90e      	bls.n	90017c72 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
90017c54:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
90017c58:	428b      	cmp	r3, r1
90017c5a:	d10b      	bne.n	90017c74 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90017c5c:	1884      	adds	r4, r0, r2
90017c5e:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
90017c62:	b13b      	cbz	r3, 90017c74 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90017c64:	3b01      	subs	r3, #1
90017c66:	b2db      	uxtb	r3, r3
90017c68:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
90017c6c:	b90b      	cbnz	r3, 90017c72 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
90017c6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
90017c72:	bd30      	pop	{r4, r5, pc}
90017c74:	3201      	adds	r2, #1
90017c76:	e7ea      	b.n	90017c4e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90017c78:	2300      	movs	r3, #0
90017c7a:	f100 0284 	add.w	r2, r0, #132	; 0x84
90017c7e:	30a4      	adds	r0, #164	; 0xa4
90017c80:	f820 3c24 	strh.w	r3, [r0, #-36]
90017c84:	f802 3b01 	strb.w	r3, [r2], #1
90017c88:	4282      	cmp	r2, r0
90017c8a:	d1fb      	bne.n	90017c84 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90017c8c:	4770      	bx	lr
	...

90017c90 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90017c90:	b570      	push	{r4, r5, r6, lr}
90017c92:	4c0b      	ldr	r4, [pc, #44]	; (90017cc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90017c94:	4605      	mov	r5, r0
90017c96:	460e      	mov	r6, r1
90017c98:	6820      	ldr	r0, [r4, #0]
90017c9a:	b110      	cbz	r0, 90017ca2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90017c9c:	6803      	ldr	r3, [r0, #0]
90017c9e:	695b      	ldr	r3, [r3, #20]
90017ca0:	4798      	blx	r3
90017ca2:	1d28      	adds	r0, r5, #4
90017ca4:	f7ff ffe8 	bl	90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90017ca8:	6026      	str	r6, [r4, #0]
90017caa:	6833      	ldr	r3, [r6, #0]
90017cac:	4630      	mov	r0, r6
90017cae:	68db      	ldr	r3, [r3, #12]
90017cb0:	4798      	blx	r3
90017cb2:	682b      	ldr	r3, [r5, #0]
90017cb4:	4628      	mov	r0, r5
90017cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90017cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90017cbc:	4718      	bx	r3
90017cbe:	bf00      	nop
90017cc0:	240281d8 	.word	0x240281d8

90017cc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90017cc4:	2300      	movs	r3, #0
90017cc6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90017cca:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90017cce:	461a      	mov	r2, r3
90017cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
90017cd2:	461c      	mov	r4, r3
90017cd4:	461d      	mov	r5, r3
90017cd6:	459c      	cmp	ip, r3
90017cd8:	dd1a      	ble.n	90017d10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90017cda:	18c6      	adds	r6, r0, r3
90017cdc:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90017ce0:	b16e      	cbz	r6, 90017cfe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90017ce2:	429a      	cmp	r2, r3
90017ce4:	d008      	beq.n	90017cf8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90017ce6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90017cea:	fa1f fe82 	uxth.w	lr, r2
90017cee:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90017cf2:	1887      	adds	r7, r0, r2
90017cf4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90017cf8:	3201      	adds	r2, #1
90017cfa:	3301      	adds	r3, #1
90017cfc:	e7eb      	b.n	90017cd6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90017cfe:	4299      	cmp	r1, r3
90017d00:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90017d04:	bfa8      	it	ge
90017d06:	3501      	addge	r5, #1
90017d08:	429e      	cmp	r6, r3
90017d0a:	bfc8      	it	gt
90017d0c:	3401      	addgt	r4, #1
90017d0e:	e7f4      	b.n	90017cfa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90017d10:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90017d14:	1b49      	subs	r1, r1, r5
90017d16:	1b1b      	subs	r3, r3, r4
90017d18:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90017d1c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90017d20:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90017d24:	4293      	cmp	r3, r2
90017d26:	dd03      	ble.n	90017d30 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90017d28:	3b01      	subs	r3, #1
90017d2a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90017d2e:	e7f7      	b.n	90017d20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90017d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90017d34 <_ZN8touchgfx11Application15handleTickEventEv>:
90017d34:	b570      	push	{r4, r5, r6, lr}
90017d36:	4d16      	ldr	r5, [pc, #88]	; (90017d90 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90017d38:	4604      	mov	r4, r0
90017d3a:	6828      	ldr	r0, [r5, #0]
90017d3c:	b140      	cbz	r0, 90017d50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90017d3e:	7a03      	ldrb	r3, [r0, #8]
90017d40:	b933      	cbnz	r3, 90017d50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90017d42:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90017d46:	6803      	ldr	r3, [r0, #0]
90017d48:	689b      	ldr	r3, [r3, #8]
90017d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90017d4e:	4718      	bx	r3
90017d50:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90017d54:	4e0f      	ldr	r6, [pc, #60]	; (90017d94 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90017d56:	b973      	cbnz	r3, 90017d76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017d58:	b168      	cbz	r0, 90017d76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017d5a:	7a03      	ldrb	r3, [r0, #8]
90017d5c:	b15b      	cbz	r3, 90017d76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017d5e:	6830      	ldr	r0, [r6, #0]
90017d60:	b110      	cbz	r0, 90017d68 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90017d62:	6803      	ldr	r3, [r0, #0]
90017d64:	691b      	ldr	r3, [r3, #16]
90017d66:	4798      	blx	r3
90017d68:	6828      	ldr	r0, [r5, #0]
90017d6a:	6803      	ldr	r3, [r0, #0]
90017d6c:	68db      	ldr	r3, [r3, #12]
90017d6e:	4798      	blx	r3
90017d70:	2301      	movs	r3, #1
90017d72:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90017d76:	3404      	adds	r4, #4
90017d78:	4620      	mov	r0, r4
90017d7a:	f7ff ff45 	bl	90017c08 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90017d7e:	4620      	mov	r0, r4
90017d80:	f7ff ffa0 	bl	90017cc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90017d84:	6830      	ldr	r0, [r6, #0]
90017d86:	b110      	cbz	r0, 90017d8e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90017d88:	6803      	ldr	r3, [r0, #0]
90017d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90017d8c:	e7dd      	b.n	90017d4a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90017d8e:	bd70      	pop	{r4, r5, r6, pc}
90017d90:	240281dc 	.word	0x240281dc
90017d94:	240281d8 	.word	0x240281d8

90017d98 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
90017d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017d9a:	2300      	movs	r3, #0
90017d9c:	4604      	mov	r4, r0
90017d9e:	460d      	mov	r5, r1
90017da0:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
90017da4:	4618      	mov	r0, r3
90017da6:	b29a      	uxth	r2, r3
90017da8:	4291      	cmp	r1, r2
90017daa:	d912      	bls.n	90017dd2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
90017dac:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
90017db0:	18e6      	adds	r6, r4, r3
90017db2:	42af      	cmp	r7, r5
90017db4:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
90017db8:	d105      	bne.n	90017dc6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
90017dba:	2aff      	cmp	r2, #255	; 0xff
90017dbc:	d002      	beq.n	90017dc4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
90017dbe:	3201      	adds	r2, #1
90017dc0:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
90017dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90017dc6:	2a00      	cmp	r2, #0
90017dc8:	f103 0301 	add.w	r3, r3, #1
90017dcc:	bf08      	it	eq
90017dce:	2001      	moveq	r0, #1
90017dd0:	e7e9      	b.n	90017da6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
90017dd2:	b120      	cbz	r0, 90017dde <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90017dd4:	2920      	cmp	r1, #32
90017dd6:	d102      	bne.n	90017dde <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90017dd8:	4620      	mov	r0, r4
90017dda:	f7ff ff73 	bl	90017cc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90017dde:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
90017de2:	2b1f      	cmp	r3, #31
90017de4:	d8ee      	bhi.n	90017dc4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
90017de6:	18e2      	adds	r2, r4, r3
90017de8:	2101      	movs	r1, #1
90017dea:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
90017dee:	185a      	adds	r2, r3, r1
90017df0:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
90017df4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90017df8:	e7e4      	b.n	90017dc4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

90017dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90017dfa:	4603      	mov	r3, r0
90017dfc:	f100 0140 	add.w	r1, r0, #64	; 0x40
90017e00:	2200      	movs	r2, #0
90017e02:	801a      	strh	r2, [r3, #0]
90017e04:	3308      	adds	r3, #8
90017e06:	f823 2c06 	strh.w	r2, [r3, #-6]
90017e0a:	f823 2c04 	strh.w	r2, [r3, #-4]
90017e0e:	f823 2c02 	strh.w	r2, [r3, #-2]
90017e12:	428b      	cmp	r3, r1
90017e14:	d1f5      	bne.n	90017e02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90017e16:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90017e1a:	4770      	bx	lr

90017e1c <_ZN8touchgfx11ApplicationC1Ev>:
90017e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017e1e:	4b1d      	ldr	r3, [pc, #116]	; (90017e94 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90017e20:	4606      	mov	r6, r0
90017e22:	4604      	mov	r4, r0
90017e24:	2500      	movs	r5, #0
90017e26:	f846 3b04 	str.w	r3, [r6], #4
90017e2a:	22a8      	movs	r2, #168	; 0xa8
90017e2c:	2100      	movs	r1, #0
90017e2e:	4630      	mov	r0, r6
90017e30:	f00f fc44 	bl	900276bc <memset>
90017e34:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90017e38:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90017e3c:	4f16      	ldr	r7, [pc, #88]	; (90017e98 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90017e3e:	f7ff ffdc 	bl	90017dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90017e42:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90017e46:	f7ff ffd8 	bl	90017dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90017e4a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90017e4e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90017e52:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90017e56:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90017e5a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90017e5e:	490f      	ldr	r1, [pc, #60]	; (90017e9c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90017e60:	480f      	ldr	r0, [pc, #60]	; (90017ea0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90017e62:	f00e fd1d 	bl	900268a0 <CRC_Lock>
90017e66:	4b0f      	ldr	r3, [pc, #60]	; (90017ea4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90017e68:	b158      	cbz	r0, 90017e82 <_ZN8touchgfx11ApplicationC1Ev+0x66>
90017e6a:	801d      	strh	r5, [r3, #0]
90017e6c:	2300      	movs	r3, #0
90017e6e:	4a0e      	ldr	r2, [pc, #56]	; (90017ea8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90017e70:	4630      	mov	r0, r6
90017e72:	6013      	str	r3, [r2, #0]
90017e74:	4a0d      	ldr	r2, [pc, #52]	; (90017eac <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90017e76:	603b      	str	r3, [r7, #0]
90017e78:	6013      	str	r3, [r2, #0]
90017e7a:	f7ff fefd 	bl	90017c78 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90017e7e:	4620      	mov	r0, r4
90017e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90017e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
90017e86:	2002      	movs	r0, #2
90017e88:	801a      	strh	r2, [r3, #0]
90017e8a:	6038      	str	r0, [r7, #0]
90017e8c:	f001 faf0 	bl	90019470 <_ZN8touchgfx6Screen4drawEv>
90017e90:	e7ec      	b.n	90017e6c <_ZN8touchgfx11ApplicationC1Ev+0x50>
90017e92:	bf00      	nop
90017e94:	9002bf94 	.word	0x9002bf94
90017e98:	240281d8 	.word	0x240281d8
90017e9c:	b5e8b5cd 	.word	0xb5e8b5cd
90017ea0:	f407a5c2 	.word	0xf407a5c2
90017ea4:	24000068 	.word	0x24000068
90017ea8:	240281e8 	.word	0x240281e8
90017eac:	240281dc 	.word	0x240281dc

90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90017eb0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90017eb4:	3b01      	subs	r3, #1
90017eb6:	b29b      	uxth	r3, r3
90017eb8:	428b      	cmp	r3, r1
90017eba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90017ebe:	b510      	push	{r4, lr}
90017ec0:	d908      	bls.n	90017ed4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90017ec2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90017ec6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90017eca:	681a      	ldr	r2, [r3, #0]
90017ecc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90017ed0:	685a      	ldr	r2, [r3, #4]
90017ed2:	6062      	str	r2, [r4, #4]
90017ed4:	bd10      	pop	{r4, pc}
	...

90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90017ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017edc:	b08f      	sub	sp, #60	; 0x3c
90017ede:	4b8f      	ldr	r3, [pc, #572]	; (9001811c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90017ee0:	4683      	mov	fp, r0
90017ee2:	ac0a      	add	r4, sp, #40	; 0x28
90017ee4:	e884 0006 	stmia.w	r4, {r1, r2}
90017ee8:	f9b3 2000 	ldrsh.w	r2, [r3]
90017eec:	4620      	mov	r0, r4
90017eee:	4b8c      	ldr	r3, [pc, #560]	; (90018120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90017ef0:	f9b3 1000 	ldrsh.w	r1, [r3]
90017ef4:	f7ff fe0b 	bl	90017b0e <_ZN8touchgfx4Rect10restrictToEss>
90017ef8:	4620      	mov	r0, r4
90017efa:	f7fa fd1e 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90017efe:	2800      	cmp	r0, #0
90017f00:	d16a      	bne.n	90017fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90017f02:	9403      	str	r4, [sp, #12]
90017f04:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90017f08:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90017f0c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90017f10:	9301      	str	r3, [sp, #4]
90017f12:	35a4      	adds	r5, #164	; 0xa4
90017f14:	b15c      	cbz	r4, 90017f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90017f16:	4629      	mov	r1, r5
90017f18:	9803      	ldr	r0, [sp, #12]
90017f1a:	f7ff fe49 	bl	90017bb0 <_ZNK8touchgfx4Rect8includesERKS0_>
90017f1e:	3c01      	subs	r4, #1
90017f20:	b118      	cbz	r0, 90017f2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90017f22:	b2a1      	uxth	r1, r4
90017f24:	9801      	ldr	r0, [sp, #4]
90017f26:	f7ff ffc3 	bl	90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90017f2a:	3d08      	subs	r5, #8
90017f2c:	e7f2      	b.n	90017f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90017f2e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90017f32:	f108 33ff 	add.w	r3, r8, #4294967295
90017f36:	f8cd 8010 	str.w	r8, [sp, #16]
90017f3a:	9302      	str	r3, [sp, #8]
90017f3c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90017f40:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90017f44:	9306      	str	r3, [sp, #24]
90017f46:	445c      	add	r4, fp
90017f48:	2500      	movs	r5, #0
90017f4a:	4626      	mov	r6, r4
90017f4c:	f8cd 8014 	str.w	r8, [sp, #20]
90017f50:	462f      	mov	r7, r5
90017f52:	9b05      	ldr	r3, [sp, #20]
90017f54:	2b00      	cmp	r3, #0
90017f56:	d073      	beq.n	90018040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90017f58:	9903      	ldr	r1, [sp, #12]
90017f5a:	4630      	mov	r0, r6
90017f5c:	f7ff fdb5 	bl	90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>
90017f60:	b350      	cbz	r0, 90017fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90017f62:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90017f66:	f9b6 c000 	ldrsh.w	ip, [r6]
90017f6a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90017f6e:	45e6      	cmp	lr, ip
90017f70:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90017f74:	db33      	blt.n	90017fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90017f76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90017f7a:	88b3      	ldrh	r3, [r6, #4]
90017f7c:	4472      	add	r2, lr
90017f7e:	4463      	add	r3, ip
90017f80:	b212      	sxth	r2, r2
90017f82:	b21b      	sxth	r3, r3
90017f84:	429a      	cmp	r2, r3
90017f86:	dc2a      	bgt.n	90017fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90017f88:	fa1f f289 	uxth.w	r2, r9
90017f8c:	88f3      	ldrh	r3, [r6, #6]
90017f8e:	45ca      	cmp	sl, r9
90017f90:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90017f94:	4413      	add	r3, r2
90017f96:	fa1f fc8a 	uxth.w	ip, sl
90017f9a:	b29b      	uxth	r3, r3
90017f9c:	fa0f fe83 	sxth.w	lr, r3
90017fa0:	db0f      	blt.n	90017fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90017fa2:	eba3 030c 	sub.w	r3, r3, ip
90017fa6:	1ac9      	subs	r1, r1, r3
90017fa8:	b209      	sxth	r1, r1
90017faa:	2900      	cmp	r1, #0
90017fac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90017fb0:	dd12      	ble.n	90017fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90017fb2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90017fb6:	4605      	mov	r5, r0
90017fb8:	9b05      	ldr	r3, [sp, #20]
90017fba:	3e08      	subs	r6, #8
90017fbc:	3b01      	subs	r3, #1
90017fbe:	9305      	str	r3, [sp, #20]
90017fc0:	e7c7      	b.n	90017f52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90017fc2:	4461      	add	r1, ip
90017fc4:	b209      	sxth	r1, r1
90017fc6:	4571      	cmp	r1, lr
90017fc8:	dc38      	bgt.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017fca:	eba2 020c 	sub.w	r2, r2, ip
90017fce:	b212      	sxth	r2, r2
90017fd0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90017fd4:	2a00      	cmp	r2, #0
90017fd6:	dcee      	bgt.n	90017fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90017fd8:	b00f      	add	sp, #60	; 0x3c
90017fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017fde:	45ca      	cmp	sl, r9
90017fe0:	db2c      	blt.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017fe2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90017fe6:	449a      	add	sl, r3
90017fe8:	88f3      	ldrh	r3, [r6, #6]
90017fea:	4499      	add	r9, r3
90017fec:	fa0f fa8a 	sxth.w	sl, sl
90017ff0:	fa0f f989 	sxth.w	r9, r9
90017ff4:	45ca      	cmp	sl, r9
90017ff6:	dc21      	bgt.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017ff8:	fa1f f28c 	uxth.w	r2, ip
90017ffc:	88b3      	ldrh	r3, [r6, #4]
90017ffe:	45e6      	cmp	lr, ip
90018000:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90018004:	4413      	add	r3, r2
90018006:	fa1f f98e 	uxth.w	r9, lr
9001800a:	b29b      	uxth	r3, r3
9001800c:	fa0f fa83 	sxth.w	sl, r3
90018010:	db0a      	blt.n	90018028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90018012:	eba3 0309 	sub.w	r3, r3, r9
90018016:	1ac9      	subs	r1, r1, r3
90018018:	b209      	sxth	r1, r1
9001801a:	2900      	cmp	r1, #0
9001801c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90018020:	ddda      	ble.n	90017fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018022:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90018026:	e7c6      	b.n	90017fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90018028:	4449      	add	r1, r9
9001802a:	b209      	sxth	r1, r1
9001802c:	4551      	cmp	r1, sl
9001802e:	dc05      	bgt.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90018030:	eba2 0209 	sub.w	r2, r2, r9
90018034:	b212      	sxth	r2, r2
90018036:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
9001803a:	e7cb      	b.n	90017fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
9001803c:	4607      	mov	r7, r0
9001803e:	e7bb      	b.n	90017fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90018040:	2d00      	cmp	r5, #0
90018042:	d181      	bne.n	90017f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90018044:	2f00      	cmp	r7, #0
90018046:	f000 81dd 	beq.w	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001804a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
9001804e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
90018052:	b2b3      	uxth	r3, r6
90018054:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90018058:	b2b9      	uxth	r1, r7
9001805a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
9001805e:	441a      	add	r2, r3
90018060:	448a      	add	sl, r1
90018062:	9105      	str	r1, [sp, #20]
90018064:	b292      	uxth	r2, r2
90018066:	fa1f fa8a 	uxth.w	sl, sl
9001806a:	fa0f f882 	sxth.w	r8, r2
9001806e:	fa0f f98a 	sxth.w	r9, sl
90018072:	e9cd 2307 	strd	r2, r3, [sp, #28]
90018076:	9b04      	ldr	r3, [sp, #16]
90018078:	2b00      	cmp	r3, #0
9001807a:	d053      	beq.n	90018124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
9001807c:	9903      	ldr	r1, [sp, #12]
9001807e:	4620      	mov	r0, r4
90018080:	f7ff fd23 	bl	90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018084:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90018088:	b1c0      	cbz	r0, 900180bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001808a:	f9b4 e000 	ldrsh.w	lr, [r4]
9001808e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90018092:	4576      	cmp	r6, lr
90018094:	dc23      	bgt.n	900180de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018096:	f8b4 c004 	ldrh.w	ip, [r4, #4]
9001809a:	44f4      	add	ip, lr
9001809c:	fa0f fc8c 	sxth.w	ip, ip
900180a0:	45e0      	cmp	r8, ip
900180a2:	db1c      	blt.n	900180de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900180a4:	428f      	cmp	r7, r1
900180a6:	fa1f fc81 	uxth.w	ip, r1
900180aa:	88e1      	ldrh	r1, [r4, #6]
900180ac:	dc0d      	bgt.n	900180ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
900180ae:	ebaa 0c0c 	sub.w	ip, sl, ip
900180b2:	f8a4 9002 	strh.w	r9, [r4, #2]
900180b6:	eba1 010c 	sub.w	r1, r1, ip
900180ba:	80e1      	strh	r1, [r4, #6]
900180bc:	4628      	mov	r0, r5
900180be:	9904      	ldr	r1, [sp, #16]
900180c0:	3c08      	subs	r4, #8
900180c2:	4605      	mov	r5, r0
900180c4:	3901      	subs	r1, #1
900180c6:	9104      	str	r1, [sp, #16]
900180c8:	e7d3      	b.n	90018072 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
900180ca:	4461      	add	r1, ip
900180cc:	b209      	sxth	r1, r1
900180ce:	4549      	cmp	r1, r9
900180d0:	dcf5      	bgt.n	900180be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900180d2:	9905      	ldr	r1, [sp, #20]
900180d4:	eba1 0c0c 	sub.w	ip, r1, ip
900180d8:	f8a4 c006 	strh.w	ip, [r4, #6]
900180dc:	e7ee      	b.n	900180bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900180de:	428f      	cmp	r7, r1
900180e0:	dced      	bgt.n	900180be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900180e2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
900180e6:	4461      	add	r1, ip
900180e8:	b209      	sxth	r1, r1
900180ea:	4589      	cmp	r9, r1
900180ec:	dbe7      	blt.n	900180be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900180ee:	4576      	cmp	r6, lr
900180f0:	fa1f fc8e 	uxth.w	ip, lr
900180f4:	88a1      	ldrh	r1, [r4, #4]
900180f6:	dc07      	bgt.n	90018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
900180f8:	eba2 0c0c 	sub.w	ip, r2, ip
900180fc:	f8a4 8000 	strh.w	r8, [r4]
90018100:	eba1 010c 	sub.w	r1, r1, ip
90018104:	80a1      	strh	r1, [r4, #4]
90018106:	e7d9      	b.n	900180bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018108:	4461      	add	r1, ip
9001810a:	b209      	sxth	r1, r1
9001810c:	4588      	cmp	r8, r1
9001810e:	dbd6      	blt.n	900180be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018110:	eba3 0c0c 	sub.w	ip, r3, ip
90018114:	f8a4 c004 	strh.w	ip, [r4, #4]
90018118:	e7d0      	b.n	900180bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001811a:	bf00      	nop
9001811c:	2402818a 	.word	0x2402818a
90018120:	24028188 	.word	0x24028188
90018124:	2d00      	cmp	r5, #0
90018126:	f000 816d 	beq.w	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001812a:	9b06      	ldr	r3, [sp, #24]
9001812c:	445b      	add	r3, fp
9001812e:	461c      	mov	r4, r3
90018130:	9b02      	ldr	r3, [sp, #8]
90018132:	3301      	adds	r3, #1
90018134:	f000 8166 	beq.w	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90018138:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
9001813c:	9803      	ldr	r0, [sp, #12]
9001813e:	4629      	mov	r1, r5
90018140:	f7ff fd36 	bl	90017bb0 <_ZNK8touchgfx4Rect8includesERKS0_>
90018144:	b120      	cbz	r0, 90018150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
90018146:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001814a:	9801      	ldr	r0, [sp, #4]
9001814c:	f7ff feb0 	bl	90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018150:	9903      	ldr	r1, [sp, #12]
90018152:	4628      	mov	r0, r5
90018154:	f7ff fcb9 	bl	90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018158:	2800      	cmp	r0, #0
9001815a:	f000 809c 	beq.w	90018296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
9001815e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
90018162:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90018166:	fa1f f189 	uxth.w	r1, r9
9001816a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001816e:	9309      	str	r3, [sp, #36]	; 0x24
90018170:	eb01 0c03 	add.w	ip, r1, r3
90018174:	b283      	uxth	r3, r0
90018176:	4548      	cmp	r0, r9
90018178:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
9001817c:	fa1f fa8c 	uxth.w	sl, ip
90018180:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018184:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90018188:	eb03 050c 	add.w	r5, r3, ip
9001818c:	b2ad      	uxth	r5, r5
9001818e:	9505      	str	r5, [sp, #20]
90018190:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90018194:	9504      	str	r5, [sp, #16]
90018196:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
9001819a:	f340 8099 	ble.w	900182d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001819e:	1a5b      	subs	r3, r3, r1
900181a0:	4596      	cmp	lr, r2
900181a2:	fa0f f08a 	sxth.w	r0, sl
900181a6:	b29b      	uxth	r3, r3
900181a8:	b21e      	sxth	r6, r3
900181aa:	dd2e      	ble.n	9001820a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900181ac:	9f02      	ldr	r7, [sp, #8]
900181ae:	fa1f fe8e 	uxth.w	lr, lr
900181b2:	b292      	uxth	r2, r2
900181b4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
900181b8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
900181bc:	9f04      	ldr	r7, [sp, #16]
900181be:	ebae 0102 	sub.w	r1, lr, r2
900181c2:	44a6      	add	lr, r4
900181c4:	1a3f      	subs	r7, r7, r0
900181c6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
900181ca:	b289      	uxth	r1, r1
900181cc:	4402      	add	r2, r0
900181ce:	fa0f fe8e 	sxth.w	lr, lr
900181d2:	b20d      	sxth	r5, r1
900181d4:	b212      	sxth	r2, r2
900181d6:	436f      	muls	r7, r5
900181d8:	ebae 0202 	sub.w	r2, lr, r2
900181dc:	4372      	muls	r2, r6
900181de:	4297      	cmp	r7, r2
900181e0:	db09      	blt.n	900181f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
900181e2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
900181e6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
900181ea:	449c      	add	ip, r3
900181ec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900181f0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900181f4:	e686      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900181f6:	4421      	add	r1, r4
900181f8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
900181fc:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90018200:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018204:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018208:	e67c      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001820a:	9f04      	ldr	r7, [sp, #16]
9001820c:	42b8      	cmp	r0, r7
9001820e:	da27      	bge.n	90018260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90018210:	9902      	ldr	r1, [sp, #8]
90018212:	1a3f      	subs	r7, r7, r0
90018214:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90018218:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
9001821c:	eb05 010e 	add.w	r1, r5, lr
90018220:	fa1f f881 	uxth.w	r8, r1
90018224:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90018228:	4411      	add	r1, r2
9001822a:	fa0f f988 	sxth.w	r9, r8
9001822e:	eba2 020e 	sub.w	r2, r2, lr
90018232:	eba1 0108 	sub.w	r1, r1, r8
90018236:	4372      	muls	r2, r6
90018238:	b289      	uxth	r1, r1
9001823a:	fa0f f881 	sxth.w	r8, r1
9001823e:	fb08 f707 	mul.w	r7, r8, r7
90018242:	42ba      	cmp	r2, r7
90018244:	dc06      	bgt.n	90018254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90018246:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
9001824a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
9001824e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
90018252:	e7ca      	b.n	900181ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90018254:	4429      	add	r1, r5
90018256:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
9001825a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001825e:	e651      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018260:	9805      	ldr	r0, [sp, #20]
90018262:	2d06      	cmp	r5, #6
90018264:	ebaa 0000 	sub.w	r0, sl, r0
90018268:	b280      	uxth	r0, r0
9001826a:	fa0f fe80 	sxth.w	lr, r0
9001826e:	d817      	bhi.n	900182a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90018270:	9b04      	ldr	r3, [sp, #16]
90018272:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90018276:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
9001827a:	1c6b      	adds	r3, r5, #1
9001827c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90018280:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018284:	9b01      	ldr	r3, [sp, #4]
90018286:	9801      	ldr	r0, [sp, #4]
90018288:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001828c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90018290:	805a      	strh	r2, [r3, #2]
90018292:	809e      	strh	r6, [r3, #4]
90018294:	80d9      	strh	r1, [r3, #6]
90018296:	9b02      	ldr	r3, [sp, #8]
90018298:	3c08      	subs	r4, #8
9001829a:	3b01      	subs	r3, #1
9001829c:	9302      	str	r3, [sp, #8]
9001829e:	e747      	b.n	90018130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900182a0:	9a02      	ldr	r2, [sp, #8]
900182a2:	45b6      	cmp	lr, r6
900182a4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900182a8:	db0d      	blt.n	900182c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900182aa:	449c      	add	ip, r3
900182ac:	445a      	add	r2, fp
900182ae:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900182b2:	fa1f fc8c 	uxth.w	ip, ip
900182b6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
900182ba:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900182be:	448c      	add	ip, r1
900182c0:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
900182c4:	e61e      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900182c6:	445a      	add	r2, fp
900182c8:	4484      	add	ip, r0
900182ca:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
900182ce:	e78f      	b.n	900181f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900182d0:	fa1f f18e 	uxth.w	r1, lr
900182d4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
900182d8:	b293      	uxth	r3, r2
900182da:	4596      	cmp	lr, r2
900182dc:	eb01 0806 	add.w	r8, r1, r6
900182e0:	9306      	str	r3, [sp, #24]
900182e2:	fa1f f888 	uxth.w	r8, r8
900182e6:	9f06      	ldr	r7, [sp, #24]
900182e8:	fa0f f388 	sxth.w	r3, r8
900182ec:	9307      	str	r3, [sp, #28]
900182ee:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
900182f2:	443b      	add	r3, r7
900182f4:	b29b      	uxth	r3, r3
900182f6:	9308      	str	r3, [sp, #32]
900182f8:	da24      	bge.n	90018344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
900182fa:	9905      	ldr	r1, [sp, #20]
900182fc:	eba3 0308 	sub.w	r3, r3, r8
90018300:	eba2 020e 	sub.w	r2, r2, lr
90018304:	eba9 0000 	sub.w	r0, r9, r0
90018308:	ebaa 0401 	sub.w	r4, sl, r1
9001830c:	b29b      	uxth	r3, r3
9001830e:	b2a4      	uxth	r4, r4
90018310:	b219      	sxth	r1, r3
90018312:	b225      	sxth	r5, r4
90018314:	4348      	muls	r0, r1
90018316:	436a      	muls	r2, r5
90018318:	4282      	cmp	r2, r0
9001831a:	9a02      	ldr	r2, [sp, #8]
9001831c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90018320:	445a      	add	r2, fp
90018322:	dc06      	bgt.n	90018332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90018324:	9b07      	ldr	r3, [sp, #28]
90018326:	44a4      	add	ip, r4
90018328:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
9001832c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90018330:	e75e      	b.n	900181f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90018332:	9904      	ldr	r1, [sp, #16]
90018334:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90018338:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
9001833c:	4433      	add	r3, r6
9001833e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90018342:	e5df      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018344:	9f06      	ldr	r7, [sp, #24]
90018346:	9b04      	ldr	r3, [sp, #16]
90018348:	1bc9      	subs	r1, r1, r7
9001834a:	fa0f f78a 	sxth.w	r7, sl
9001834e:	b289      	uxth	r1, r1
90018350:	429f      	cmp	r7, r3
90018352:	fa0f fe81 	sxth.w	lr, r1
90018356:	dd23      	ble.n	900183a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90018358:	9a05      	ldr	r2, [sp, #20]
9001835a:	eba9 0000 	sub.w	r0, r9, r0
9001835e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018362:	ebaa 0202 	sub.w	r2, sl, r2
90018366:	9d07      	ldr	r5, [sp, #28]
90018368:	fb0e f000 	mul.w	r0, lr, r0
9001836c:	b292      	uxth	r2, r2
9001836e:	eba5 0a03 	sub.w	sl, r5, r3
90018372:	9b02      	ldr	r3, [sp, #8]
90018374:	b214      	sxth	r4, r2
90018376:	00db      	lsls	r3, r3, #3
90018378:	fb04 fa0a 	mul.w	sl, r4, sl
9001837c:	445b      	add	r3, fp
9001837e:	4550      	cmp	r0, sl
90018380:	db03      	blt.n	9001838a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90018382:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90018386:	4494      	add	ip, r2
90018388:	e732      	b.n	900181f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001838a:	9a04      	ldr	r2, [sp, #16]
9001838c:	4431      	add	r1, r6
9001838e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
90018392:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90018396:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
9001839a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001839e:	e75c      	b.n	9001825a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900183a0:	9b08      	ldr	r3, [sp, #32]
900183a2:	2d06      	cmp	r5, #6
900183a4:	eba3 0308 	sub.w	r3, r3, r8
900183a8:	b29b      	uxth	r3, r3
900183aa:	b218      	sxth	r0, r3
900183ac:	d813      	bhi.n	900183d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900183ae:	9b07      	ldr	r3, [sp, #28]
900183b0:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900183b4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900183b8:	1c6b      	adds	r3, r5, #1
900183ba:	9901      	ldr	r1, [sp, #4]
900183bc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900183c0:	9b01      	ldr	r3, [sp, #4]
900183c2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900183c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900183ca:	805a      	strh	r2, [r3, #2]
900183cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
900183ce:	f8a3 e006 	strh.w	lr, [r3, #6]
900183d2:	809a      	strh	r2, [r3, #4]
900183d4:	e75f      	b.n	90018296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900183d6:	9c02      	ldr	r4, [sp, #8]
900183d8:	4570      	cmp	r0, lr
900183da:	ea4f 04c4 	mov.w	r4, r4, lsl #3
900183de:	db0d      	blt.n	900183fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
900183e0:	4431      	add	r1, r6
900183e2:	9b06      	ldr	r3, [sp, #24]
900183e4:	445c      	add	r4, fp
900183e6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900183ea:	b289      	uxth	r1, r1
900183ec:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
900183f0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900183f4:	4419      	add	r1, r3
900183f6:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
900183fa:	e583      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900183fc:	445c      	add	r4, fp
900183fe:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90018402:	e79b      	b.n	9001833c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90018404:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90018408:	2e07      	cmp	r6, #7
9001840a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001840e:	d812      	bhi.n	90018436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90018410:	1c75      	adds	r5, r6, #1
90018412:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90018416:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
9001841a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001841e:	9d01      	ldr	r5, [sp, #4]
90018420:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90018424:	442c      	add	r4, r5
90018426:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
9001842a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001842e:	8061      	strh	r1, [r4, #2]
90018430:	80a2      	strh	r2, [r4, #4]
90018432:	80e3      	strh	r3, [r4, #6]
90018434:	e5d0      	b.n	90017fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018436:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
9001843a:	3e01      	subs	r6, #1
9001843c:	445c      	add	r4, fp
9001843e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90018442:	f04f 37ff 	mov.w	r7, #4294967295
90018446:	2500      	movs	r5, #0
90018448:	9305      	str	r3, [sp, #20]
9001844a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001844e:	1e72      	subs	r2, r6, #1
90018450:	9302      	str	r3, [sp, #8]
90018452:	4691      	mov	r9, r2
90018454:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90018458:	9304      	str	r3, [sp, #16]
9001845a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
9001845e:	f1b9 3fff 	cmp.w	r9, #4294967295
90018462:	6818      	ldr	r0, [r3, #0]
90018464:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90018468:	9207      	str	r2, [sp, #28]
9001846a:	bf16      	itet	ne
9001846c:	9905      	ldrne	r1, [sp, #20]
9001846e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90018472:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90018476:	9306      	str	r3, [sp, #24]
90018478:	f8be 1006 	ldrh.w	r1, [lr, #6]
9001847c:	f8be 8004 	ldrh.w	r8, [lr, #4]
90018480:	fb18 f801 	smulbb	r8, r8, r1
90018484:	6859      	ldr	r1, [r3, #4]
90018486:	e8ac 0003 	stmia.w	ip!, {r0, r1}
9001848a:	4671      	mov	r1, lr
9001848c:	a80c      	add	r0, sp, #48	; 0x30
9001848e:	f7fb ff78 	bl	90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018492:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90018496:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
9001849a:	f04f 0c08 	mov.w	ip, #8
9001849e:	9b04      	ldr	r3, [sp, #16]
900184a0:	9a02      	ldr	r2, [sp, #8]
900184a2:	fb10 f001 	smulbb	r0, r0, r1
900184a6:	fb02 8803 	mla	r8, r2, r3, r8
900184aa:	eba0 0108 	sub.w	r1, r0, r8
900184ae:	fb90 f0fc 	sdiv	r0, r0, ip
900184b2:	4288      	cmp	r0, r1
900184b4:	dc20      	bgt.n	900184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900184b6:	4551      	cmp	r1, sl
900184b8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
900184bc:	da03      	bge.n	900184c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
900184be:	b1d9      	cbz	r1, 900184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900184c0:	468a      	mov	sl, r1
900184c2:	464f      	mov	r7, r9
900184c4:	4635      	mov	r5, r6
900184c6:	f109 39ff 	add.w	r9, r9, #4294967295
900184ca:	f119 0f02 	cmn.w	r9, #2
900184ce:	d1c6      	bne.n	9001845e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
900184d0:	4616      	mov	r6, r2
900184d2:	3201      	adds	r2, #1
900184d4:	f1a4 0408 	sub.w	r4, r4, #8
900184d8:	d1b7      	bne.n	9001844a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
900184da:	9b01      	ldr	r3, [sp, #4]
900184dc:	b2ac      	uxth	r4, r5
900184de:	00ed      	lsls	r5, r5, #3
900184e0:	1958      	adds	r0, r3, r5
900184e2:	1c7b      	adds	r3, r7, #1
900184e4:	d10b      	bne.n	900184fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
900184e6:	4601      	mov	r1, r0
900184e8:	9803      	ldr	r0, [sp, #12]
900184ea:	f7fb ff4a 	bl	90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900184ee:	4621      	mov	r1, r4
900184f0:	9801      	ldr	r0, [sp, #4]
900184f2:	f7ff fcdd 	bl	90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900184f6:	e505      	b.n	90017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900184f8:	464f      	mov	r7, r9
900184fa:	4635      	mov	r5, r6
900184fc:	e7ed      	b.n	900184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
900184fe:	9b01      	ldr	r3, [sp, #4]
90018500:	00ff      	lsls	r7, r7, #3
90018502:	445d      	add	r5, fp
90018504:	19d9      	adds	r1, r3, r7
90018506:	445f      	add	r7, fp
90018508:	f7fb ff3b 	bl	90014382 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001850c:	9b03      	ldr	r3, [sp, #12]
9001850e:	cb03      	ldmia	r3!, {r0, r1}
90018510:	9b03      	ldr	r3, [sp, #12]
90018512:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90018516:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
9001851a:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001851e:	6869      	ldr	r1, [r5, #4]
90018520:	c303      	stmia	r3!, {r0, r1}
90018522:	e7e4      	b.n	900184ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90018524 <_ZN8touchgfx11Application10invalidateEv>:
90018524:	4b09      	ldr	r3, [pc, #36]	; (9001854c <_ZN8touchgfx11Application10invalidateEv+0x28>)
90018526:	b082      	sub	sp, #8
90018528:	2100      	movs	r1, #0
9001852a:	f9b3 2000 	ldrsh.w	r2, [r3]
9001852e:	4b08      	ldr	r3, [pc, #32]	; (90018550 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90018530:	9100      	str	r1, [sp, #0]
90018532:	f9b3 3000 	ldrsh.w	r3, [r3]
90018536:	f8ad 2004 	strh.w	r2, [sp, #4]
9001853a:	f8ad 3006 	strh.w	r3, [sp, #6]
9001853e:	ab02      	add	r3, sp, #8
90018540:	e913 0006 	ldmdb	r3, {r1, r2}
90018544:	b002      	add	sp, #8
90018546:	f7ff bcc7 	b.w	90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001854a:	bf00      	nop
9001854c:	24028188 	.word	0x24028188
90018550:	2402818a 	.word	0x2402818a

90018554 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90018554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018558:	f500 7698 	add.w	r6, r0, #304	; 0x130
9001855c:	b09b      	sub	sp, #108	; 0x6c
9001855e:	4604      	mov	r4, r0
90018560:	4630      	mov	r0, r6
90018562:	f7fa f9ea 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90018566:	4605      	mov	r5, r0
90018568:	b940      	cbnz	r0, 9001857c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
9001856a:	4620      	mov	r0, r4
9001856c:	e896 0006 	ldmia.w	r6, {r1, r2}
90018570:	f7ff fcb2 	bl	90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018574:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90018578:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
9001857c:	4bc8      	ldr	r3, [pc, #800]	; (900188a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
9001857e:	681b      	ldr	r3, [r3, #0]
90018580:	2b00      	cmp	r3, #0
90018582:	d03e      	beq.n	90018602 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018584:	4dc7      	ldr	r5, [pc, #796]	; (900188a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90018586:	4628      	mov	r0, r5
90018588:	f7fa f9d7 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001858c:	4606      	mov	r6, r0
9001858e:	2800      	cmp	r0, #0
90018590:	d137      	bne.n	90018602 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018592:	4628      	mov	r0, r5
90018594:	f7ff f9dc 	bl	90017950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018598:	6829      	ldr	r1, [r5, #0]
9001859a:	686a      	ldr	r2, [r5, #4]
9001859c:	4620      	mov	r0, r4
9001859e:	f7ff fc9b 	bl	90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900185a2:	802e      	strh	r6, [r5, #0]
900185a4:	806e      	strh	r6, [r5, #2]
900185a6:	80ae      	strh	r6, [r5, #4]
900185a8:	80ee      	strh	r6, [r5, #6]
900185aa:	ae09      	add	r6, sp, #36	; 0x24
900185ac:	4630      	mov	r0, r6
900185ae:	f7ff fc24 	bl	90017dfa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900185b2:	4abd      	ldr	r2, [pc, #756]	; (900188a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
900185b4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900185b8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900185bc:	8815      	ldrh	r5, [r2, #0]
900185be:	9202      	str	r2, [sp, #8]
900185c0:	462b      	mov	r3, r5
900185c2:	429f      	cmp	r7, r3
900185c4:	d924      	bls.n	90018610 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
900185c6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
900185ca:	2907      	cmp	r1, #7
900185cc:	d816      	bhi.n	900185fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
900185ce:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
900185d2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
900185d6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
900185da:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
900185de:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
900185e2:	1c4a      	adds	r2, r1, #1
900185e4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
900185e8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
900185ec:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
900185f0:	f8a2 9002 	strh.w	r9, [r2, #2]
900185f4:	f8a2 e004 	strh.w	lr, [r2, #4]
900185f8:	f8a2 c006 	strh.w	ip, [r2, #6]
900185fc:	3301      	adds	r3, #1
900185fe:	b29b      	uxth	r3, r3
90018600:	e7df      	b.n	900185c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90018602:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018606:	2b00      	cmp	r3, #0
90018608:	d1cf      	bne.n	900185aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
9001860a:	b01b      	add	sp, #108	; 0x6c
9001860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018610:	462f      	mov	r7, r5
90018612:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90018616:	42bb      	cmp	r3, r7
90018618:	d90b      	bls.n	90018632 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
9001861a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001861e:	3701      	adds	r7, #1
90018620:	4620      	mov	r0, r4
90018622:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90018626:	b2bf      	uxth	r7, r7
90018628:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
9001862c:	f7ff fc54 	bl	90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018630:	e7ef      	b.n	90018612 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90018632:	4a9e      	ldr	r2, [pc, #632]	; (900188ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90018634:	6813      	ldr	r3, [r2, #0]
90018636:	4690      	mov	r8, r2
90018638:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
9001863c:	2b01      	cmp	r3, #1
9001863e:	f040 80e4 	bne.w	9001880a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90018642:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90018646:	4629      	mov	r1, r5
90018648:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
9001864c:	2500      	movs	r5, #0
9001864e:	33ae      	adds	r3, #174	; 0xae
90018650:	428f      	cmp	r7, r1
90018652:	f103 0308 	add.w	r3, r3, #8
90018656:	dd0a      	ble.n	9001866e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90018658:	f833 2c08 	ldrh.w	r2, [r3, #-8]
9001865c:	3101      	adds	r1, #1
9001865e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90018662:	4402      	add	r2, r0
90018664:	b212      	sxth	r2, r2
90018666:	4295      	cmp	r5, r2
90018668:	bfb8      	it	lt
9001866a:	4615      	movlt	r5, r2
9001866c:	e7f0      	b.n	90018650 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
9001866e:	4b90      	ldr	r3, [pc, #576]	; (900188b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90018670:	f8df b238 	ldr.w	fp, [pc, #568]	; 900188ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90018674:	881b      	ldrh	r3, [r3, #0]
90018676:	46d8      	mov	r8, fp
90018678:	2b0f      	cmp	r3, #15
9001867a:	bf8c      	ite	hi
9001867c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90018680:	f04f 0a01 	movls.w	sl, #1
90018684:	2300      	movs	r3, #0
90018686:	e9cd 3305 	strd	r3, r3, [sp, #20]
9001868a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
9001868e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90018692:	4438      	add	r0, r7
90018694:	b207      	sxth	r7, r0
90018696:	f8db 0000 	ldr.w	r0, [fp]
9001869a:	42bd      	cmp	r5, r7
9001869c:	6803      	ldr	r3, [r0, #0]
9001869e:	f340 8084 	ble.w	900187aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
900186a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900186a6:	4798      	blx	r3
900186a8:	eb07 030a 	add.w	r3, r7, sl
900186ac:	4298      	cmp	r0, r3
900186ae:	da07      	bge.n	900186c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900186b0:	4285      	cmp	r5, r0
900186b2:	dd05      	ble.n	900186c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900186b4:	4287      	cmp	r7, r0
900186b6:	dd6d      	ble.n	90018794 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900186b8:	2f00      	cmp	r7, #0
900186ba:	dd6b      	ble.n	90018794 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900186bc:	4628      	mov	r0, r5
900186be:	e004      	b.n	900186ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
900186c0:	4287      	cmp	r7, r0
900186c2:	dcfb      	bgt.n	900186bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
900186c4:	42a8      	cmp	r0, r5
900186c6:	bfa8      	it	ge
900186c8:	4628      	movge	r0, r5
900186ca:	4b7a      	ldr	r3, [pc, #488]	; (900188b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
900186cc:	1bc0      	subs	r0, r0, r7
900186ce:	2200      	movs	r2, #0
900186d0:	f8ad 7016 	strh.w	r7, [sp, #22]
900186d4:	f9b3 3000 	ldrsh.w	r3, [r3]
900186d8:	f8ad 2014 	strh.w	r2, [sp, #20]
900186dc:	f8ad 3018 	strh.w	r3, [sp, #24]
900186e0:	9b02      	ldr	r3, [sp, #8]
900186e2:	f8ad 001a 	strh.w	r0, [sp, #26]
900186e6:	881f      	ldrh	r7, [r3, #0]
900186e8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
900186ec:	42bb      	cmp	r3, r7
900186ee:	d9cc      	bls.n	9001868a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900186f0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
900186f4:	ab07      	add	r3, sp, #28
900186f6:	f852 0fac 	ldr.w	r0, [r2, #172]!
900186fa:	6851      	ldr	r1, [r2, #4]
900186fc:	c303      	stmia	r3!, {r0, r1}
900186fe:	a905      	add	r1, sp, #20
90018700:	a807      	add	r0, sp, #28
90018702:	f7ff f9e2 	bl	90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018706:	2800      	cmp	r0, #0
90018708:	d04c      	beq.n	900187a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
9001870a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001870e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90018712:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90018716:	4686      	mov	lr, r0
90018718:	4290      	cmp	r0, r2
9001871a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001871e:	4448      	add	r0, r9
90018720:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90018724:	bfb8      	it	lt
90018726:	4696      	movlt	lr, r2
90018728:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
9001872c:	444a      	add	r2, r9
9001872e:	b280      	uxth	r0, r0
90018730:	4299      	cmp	r1, r3
90018732:	468c      	mov	ip, r1
90018734:	b292      	uxth	r2, r2
90018736:	9303      	str	r3, [sp, #12]
90018738:	bfb8      	it	lt
9001873a:	469c      	movlt	ip, r3
9001873c:	b203      	sxth	r3, r0
9001873e:	fa0f f982 	sxth.w	r9, r2
90018742:	f8ad e01c 	strh.w	lr, [sp, #28]
90018746:	f8ad c01e 	strh.w	ip, [sp, #30]
9001874a:	454b      	cmp	r3, r9
9001874c:	bfb8      	it	lt
9001874e:	4602      	movlt	r2, r0
90018750:	9b03      	ldr	r3, [sp, #12]
90018752:	eba2 020e 	sub.w	r2, r2, lr
90018756:	f8ad 2020 	strh.w	r2, [sp, #32]
9001875a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001875e:	4411      	add	r1, r2
90018760:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90018764:	4413      	add	r3, r2
90018766:	b289      	uxth	r1, r1
90018768:	b29b      	uxth	r3, r3
9001876a:	b208      	sxth	r0, r1
9001876c:	b21a      	sxth	r2, r3
9001876e:	4290      	cmp	r0, r2
90018770:	bfb8      	it	lt
90018772:	460b      	movlt	r3, r1
90018774:	eba3 030c 	sub.w	r3, r3, ip
90018778:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001877c:	a807      	add	r0, sp, #28
9001877e:	f7fa f8dc 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90018782:	b920      	cbnz	r0, 9001878e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90018784:	6823      	ldr	r3, [r4, #0]
90018786:	a907      	add	r1, sp, #28
90018788:	4620      	mov	r0, r4
9001878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001878c:	4798      	blx	r3
9001878e:	3701      	adds	r7, #1
90018790:	b2bf      	uxth	r7, r7
90018792:	e7a9      	b.n	900186e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90018794:	f8d8 0000 	ldr.w	r0, [r8]
90018798:	2101      	movs	r1, #1
9001879a:	6803      	ldr	r3, [r0, #0]
9001879c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
900187a0:	4798      	blx	r3
900187a2:	e772      	b.n	9001868a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900187a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
900187a8:	e7e8      	b.n	9001877c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
900187aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900187ac:	4798      	blx	r3
900187ae:	4b42      	ldr	r3, [pc, #264]	; (900188b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
900187b0:	781b      	ldrb	r3, [r3, #0]
900187b2:	2b00      	cmp	r3, #0
900187b4:	f43f af29 	beq.w	9001860a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900187b8:	2300      	movs	r3, #0
900187ba:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
900187be:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900187c2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
900187c6:	9b02      	ldr	r3, [sp, #8]
900187c8:	881b      	ldrh	r3, [r3, #0]
900187ca:	429d      	cmp	r5, r3
900187cc:	f67f af1d 	bls.w	9001860a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900187d0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
900187d4:	2907      	cmp	r1, #7
900187d6:	d815      	bhi.n	90018804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
900187d8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
900187dc:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
900187e0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
900187e4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
900187e8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
900187ec:	1c4a      	adds	r2, r1, #1
900187ee:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
900187f2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
900187f6:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
900187fa:	f8a2 e002 	strh.w	lr, [r2, #2]
900187fe:	f8a2 c004 	strh.w	ip, [r2, #4]
90018802:	80d7      	strh	r7, [r2, #6]
90018804:	3301      	adds	r3, #1
90018806:	b29b      	uxth	r3, r3
90018808:	e7df      	b.n	900187ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
9001880a:	2b02      	cmp	r3, #2
9001880c:	f040 8135 	bne.w	90018a7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018810:	4b2a      	ldr	r3, [pc, #168]	; (900188bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90018812:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90018816:	781b      	ldrb	r3, [r3, #0]
90018818:	2b01      	cmp	r3, #1
9001881a:	f000 809c 	beq.w	90018956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001881e:	9b02      	ldr	r3, [sp, #8]
90018820:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90018824:	f8b3 b000 	ldrh.w	fp, [r3]
90018828:	f10b 0b01 	add.w	fp, fp, #1
9001882c:	fa1f fb8b 	uxth.w	fp, fp
90018830:	2a00      	cmp	r2, #0
90018832:	d0bc      	beq.n	900187ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018834:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90018838:	4659      	mov	r1, fp
9001883a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
9001883e:	f04f 0800 	mov.w	r8, #0
90018842:	441d      	add	r5, r3
90018844:	b22d      	sxth	r5, r5
90018846:	b28b      	uxth	r3, r1
90018848:	ea4f 07c8 	mov.w	r7, r8, lsl #3
9001884c:	429a      	cmp	r2, r3
9001884e:	f240 80c0 	bls.w	900189d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90018852:	4427      	add	r7, r4
90018854:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90018858:	4608      	mov	r0, r1
9001885a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
9001885e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90018862:	4563      	cmp	r3, ip
90018864:	f340 80a2 	ble.w	900189ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90018868:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
9001886c:	4465      	add	r5, ip
9001886e:	b22d      	sxth	r5, r5
90018870:	429d      	cmp	r5, r3
90018872:	bfa8      	it	ge
90018874:	461d      	movge	r5, r3
90018876:	3101      	adds	r1, #1
90018878:	4680      	mov	r8, r0
9001887a:	e7e4      	b.n	90018846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
9001887c:	d10b      	bne.n	90018896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
9001887e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90018882:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90018886:	458c      	cmp	ip, r1
90018888:	bfb4      	ite	lt
9001888a:	469c      	movlt	ip, r3
9001888c:	46bc      	movge	ip, r7
9001888e:	4572      	cmp	r2, lr
90018890:	bfb8      	it	lt
90018892:	4672      	movlt	r2, lr
90018894:	e087      	b.n	900189a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018896:	428a      	cmp	r2, r1
90018898:	46bc      	mov	ip, r7
9001889a:	bfb8      	it	lt
9001889c:	460a      	movlt	r2, r1
9001889e:	e082      	b.n	900189a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900188a0:	240281d4 	.word	0x240281d4
900188a4:	240281e0 	.word	0x240281e0
900188a8:	24000068 	.word	0x24000068
900188ac:	24028194 	.word	0x24028194
900188b0:	2402818a 	.word	0x2402818a
900188b4:	24028188 	.word	0x24028188
900188b8:	24028192 	.word	0x24028192
900188bc:	2402818c 	.word	0x2402818c
900188c0:	1961      	adds	r1, r4, r5
900188c2:	ab07      	add	r3, sp, #28
900188c4:	f851 0fac 	ldr.w	r0, [r1, #172]!
900188c8:	6849      	ldr	r1, [r1, #4]
900188ca:	c303      	stmia	r3!, {r0, r1}
900188cc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900188d0:	a807      	add	r0, sp, #28
900188d2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
900188d6:	2b13      	cmp	r3, #19
900188d8:	440b      	add	r3, r1
900188da:	bfd8      	it	le
900188dc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
900188e0:	1a9b      	subs	r3, r3, r2
900188e2:	f8ad 201c 	strh.w	r2, [sp, #28]
900188e6:	f8ad 3020 	strh.w	r3, [sp, #32]
900188ea:	f7ff f84b 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900188ee:	a807      	add	r0, sp, #28
900188f0:	f7fa f823 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
900188f4:	bb78      	cbnz	r0, 90018956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
900188f6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
900188fa:	4425      	add	r5, r4
900188fc:	f8d8 0000 	ldr.w	r0, [r8]
90018900:	f1bc 0f14 	cmp.w	ip, #20
90018904:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90018908:	f8d0 e000 	ldr.w	lr, [r0]
9001890c:	bfa8      	it	ge
9001890e:	f04f 0c14 	movge.w	ip, #20
90018912:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90018916:	f8bd 101c 	ldrh.w	r1, [sp, #28]
9001891a:	fa1f fc8c 	uxth.w	ip, ip
9001891e:	f8cd c000 	str.w	ip, [sp]
90018922:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90018926:	47d0      	blx	sl
90018928:	4682      	mov	sl, r0
9001892a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
9001892e:	a807      	add	r0, sp, #28
90018930:	f7ff f80e 	bl	90017950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018934:	6823      	ldr	r3, [r4, #0]
90018936:	4620      	mov	r0, r4
90018938:	a907      	add	r1, sp, #28
9001893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001893c:	4798      	blx	r3
9001893e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90018942:	eba0 000a 	sub.w	r0, r0, sl
90018946:	b200      	sxth	r0, r0
90018948:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
9001894c:	b918      	cbnz	r0, 90018956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001894e:	b2b9      	uxth	r1, r7
90018950:	4648      	mov	r0, r9
90018952:	f7ff faad 	bl	90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018956:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
9001895a:	f1bb 0f00 	cmp.w	fp, #0
9001895e:	f43f af26 	beq.w	900187ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018962:	9b02      	ldr	r3, [sp, #8]
90018964:	2700      	movs	r7, #0
90018966:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
9001896a:	881b      	ldrh	r3, [r3, #0]
9001896c:	3301      	adds	r3, #1
9001896e:	b29b      	uxth	r3, r3
90018970:	b299      	uxth	r1, r3
90018972:	00fd      	lsls	r5, r7, #3
90018974:	458b      	cmp	fp, r1
90018976:	d9a3      	bls.n	900188c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90018978:	4425      	add	r5, r4
9001897a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
9001897e:	469c      	mov	ip, r3
90018980:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90018984:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90018988:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
9001898c:	4408      	add	r0, r1
9001898e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90018992:	4471      	add	r1, lr
90018994:	b200      	sxth	r0, r0
90018996:	b209      	sxth	r1, r1
90018998:	4288      	cmp	r0, r1
9001899a:	f6bf af6f 	bge.w	9001887c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
9001899e:	4586      	cmp	lr, r0
900189a0:	4672      	mov	r2, lr
900189a2:	bfb8      	it	lt
900189a4:	4602      	movlt	r2, r0
900189a6:	3301      	adds	r3, #1
900189a8:	4667      	mov	r7, ip
900189aa:	e7e1      	b.n	90018970 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
900189ac:	d10c      	bne.n	900189c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
900189ae:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
900189b2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
900189b6:	4287      	cmp	r7, r0
900189b8:	bfb4      	ite	lt
900189ba:	4608      	movlt	r0, r1
900189bc:	4640      	movge	r0, r8
900189be:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
900189c2:	443b      	add	r3, r7
900189c4:	b21b      	sxth	r3, r3
900189c6:	e753      	b.n	90018870 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
900189c8:	4565      	cmp	r5, ip
900189ca:	4640      	mov	r0, r8
900189cc:	bfa8      	it	ge
900189ce:	4665      	movge	r5, ip
900189d0:	e751      	b.n	90018876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
900189d2:	eb09 0007 	add.w	r0, r9, r7
900189d6:	4427      	add	r7, r4
900189d8:	9203      	str	r2, [sp, #12]
900189da:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
900189de:	f1ba 0f13 	cmp.w	sl, #19
900189e2:	bfde      	ittt	le
900189e4:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
900189e8:	4455      	addle	r5, sl
900189ea:	b22d      	sxthle	r5, r5
900189ec:	f7f9 ffa5 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
900189f0:	9a03      	ldr	r2, [sp, #12]
900189f2:	2800      	cmp	r0, #0
900189f4:	f47f af1c 	bne.w	90018830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
900189f8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
900189fc:	fa1f fa8a 	uxth.w	sl, sl
90018a00:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018a04:	1aad      	subs	r5, r5, r2
90018a06:	4829      	ldr	r0, [pc, #164]	; (90018aac <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90018a08:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90018a0c:	2d14      	cmp	r5, #20
90018a0e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90018a12:	6800      	ldr	r0, [r0, #0]
90018a14:	bfa8      	it	ge
90018a16:	2514      	movge	r5, #20
90018a18:	f8ad 101c 	strh.w	r1, [sp, #28]
90018a1c:	f8ad 201e 	strh.w	r2, [sp, #30]
90018a20:	b289      	uxth	r1, r1
90018a22:	f8ad 3020 	strh.w	r3, [sp, #32]
90018a26:	b2ad      	uxth	r5, r5
90018a28:	f8d0 c000 	ldr.w	ip, [r0]
90018a2c:	b292      	uxth	r2, r2
90018a2e:	4555      	cmp	r5, sl
90018a30:	bf94      	ite	ls
90018a32:	9500      	strls	r5, [sp, #0]
90018a34:	f8cd a000 	strhi.w	sl, [sp]
90018a38:	b29b      	uxth	r3, r3
90018a3a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90018a3e:	47a8      	blx	r5
90018a40:	6823      	ldr	r3, [r4, #0]
90018a42:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018a46:	a907      	add	r1, sp, #28
90018a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018a4a:	4620      	mov	r0, r4
90018a4c:	4798      	blx	r3
90018a4e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90018a52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90018a56:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90018a5a:	1a5b      	subs	r3, r3, r1
90018a5c:	440a      	add	r2, r1
90018a5e:	b21b      	sxth	r3, r3
90018a60:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90018a64:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90018a68:	2b00      	cmp	r3, #0
90018a6a:	f47f aed8 	bne.w	9001881e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90018a6e:	fa1f f188 	uxth.w	r1, r8
90018a72:	4648      	mov	r0, r9
90018a74:	f7ff fa1c 	bl	90017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018a78:	e6d1      	b.n	9001881e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90018a7a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018a7e:	42ab      	cmp	r3, r5
90018a80:	f67f ae95 	bls.w	900187ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018a84:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90018a88:	ab07      	add	r3, sp, #28
90018a8a:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018a8e:	6851      	ldr	r1, [r2, #4]
90018a90:	c303      	stmia	r3!, {r0, r1}
90018a92:	a807      	add	r0, sp, #28
90018a94:	f7f9 ff51 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
90018a98:	b920      	cbnz	r0, 90018aa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90018a9a:	6823      	ldr	r3, [r4, #0]
90018a9c:	a907      	add	r1, sp, #28
90018a9e:	4620      	mov	r0, r4
90018aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018aa2:	4798      	blx	r3
90018aa4:	3501      	adds	r5, #1
90018aa6:	b2ad      	uxth	r5, r5
90018aa8:	e7e7      	b.n	90018a7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018aaa:	bf00      	nop
90018aac:	24028194 	.word	0x24028194

90018ab0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90018ab0:	4b03      	ldr	r3, [pc, #12]	; (90018ac0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90018ab2:	2200      	movs	r2, #0
90018ab4:	801a      	strh	r2, [r3, #0]
90018ab6:	805a      	strh	r2, [r3, #2]
90018ab8:	809a      	strh	r2, [r3, #4]
90018aba:	80da      	strh	r2, [r3, #6]
90018abc:	4770      	bx	lr
90018abe:	bf00      	nop
90018ac0:	240281e0 	.word	0x240281e0

90018ac4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90018ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018ac8:	b09d      	sub	sp, #116	; 0x74
90018aca:	4606      	mov	r6, r0
90018acc:	4614      	mov	r4, r2
90018ace:	468a      	mov	sl, r1
90018ad0:	a803      	add	r0, sp, #12
90018ad2:	461d      	mov	r5, r3
90018ad4:	f000 fe79 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90018ad8:	6833      	ldr	r3, [r6, #0]
90018ada:	4630      	mov	r0, r6
90018adc:	f242 0b0b 	movw	fp, #8203	; 0x200b
90018ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018ae2:	4798      	blx	r3
90018ae4:	6833      	ldr	r3, [r6, #0]
90018ae6:	4607      	mov	r7, r0
90018ae8:	4630      	mov	r0, r6
90018aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018aec:	4798      	blx	r3
90018aee:	462a      	mov	r2, r5
90018af0:	2500      	movs	r5, #0
90018af2:	4621      	mov	r1, r4
90018af4:	9000      	str	r0, [sp, #0]
90018af6:	463b      	mov	r3, r7
90018af8:	462c      	mov	r4, r5
90018afa:	46a9      	mov	r9, r5
90018afc:	46a8      	mov	r8, r5
90018afe:	a803      	add	r0, sp, #12
90018b00:	f000 febe 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018b04:	2300      	movs	r3, #0
90018b06:	9302      	str	r3, [sp, #8]
90018b08:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90018b0c:	429c      	cmp	r4, r3
90018b0e:	d002      	beq.n	90018b16 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90018b10:	455c      	cmp	r4, fp
90018b12:	bf18      	it	ne
90018b14:	4625      	movne	r5, r4
90018b16:	ab02      	add	r3, sp, #8
90018b18:	4632      	mov	r2, r6
90018b1a:	4651      	mov	r1, sl
90018b1c:	a803      	add	r0, sp, #12
90018b1e:	f001 f9b5 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018b22:	4604      	mov	r4, r0
90018b24:	b108      	cbz	r0, 90018b2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90018b26:	280a      	cmp	r0, #10
90018b28:	d10a      	bne.n	90018b40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90018b2a:	45c1      	cmp	r9, r8
90018b2c:	bf38      	it	cc
90018b2e:	46c1      	movcc	r9, r8
90018b30:	f04f 0800 	mov.w	r8, #0
90018b34:	2c00      	cmp	r4, #0
90018b36:	d1e5      	bne.n	90018b04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90018b38:	4648      	mov	r0, r9
90018b3a:	b01d      	add	sp, #116	; 0x74
90018b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018b40:	9a02      	ldr	r2, [sp, #8]
90018b42:	2a00      	cmp	r2, #0
90018b44:	d0de      	beq.n	90018b04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90018b46:	7b57      	ldrb	r7, [r2, #13]
90018b48:	4629      	mov	r1, r5
90018b4a:	6833      	ldr	r3, [r6, #0]
90018b4c:	007f      	lsls	r7, r7, #1
90018b4e:	8894      	ldrh	r4, [r2, #4]
90018b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90018b52:	f407 7080 	and.w	r0, r7, #256	; 0x100
90018b56:	7a97      	ldrb	r7, [r2, #10]
90018b58:	4307      	orrs	r7, r0
90018b5a:	4630      	mov	r0, r6
90018b5c:	4798      	blx	r3
90018b5e:	4438      	add	r0, r7
90018b60:	4480      	add	r8, r0
90018b62:	fa1f f888 	uxth.w	r8, r8
90018b66:	e7e5      	b.n	90018b34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90018b68 <_ZNK8touchgfx4Font12getCharWidthEt>:
90018b68:	b508      	push	{r3, lr}
90018b6a:	6803      	ldr	r3, [r0, #0]
90018b6c:	68db      	ldr	r3, [r3, #12]
90018b6e:	4798      	blx	r3
90018b70:	b128      	cbz	r0, 90018b7e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90018b72:	7b43      	ldrb	r3, [r0, #13]
90018b74:	7a80      	ldrb	r0, [r0, #10]
90018b76:	005b      	lsls	r3, r3, #1
90018b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
90018b7c:	4318      	orrs	r0, r3
90018b7e:	bd08      	pop	{r3, pc}

90018b80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90018b80:	b40e      	push	{r1, r2, r3}
90018b82:	b5f0      	push	{r4, r5, r6, r7, lr}
90018b84:	b09e      	sub	sp, #120	; 0x78
90018b86:	4605      	mov	r5, r0
90018b88:	ab23      	add	r3, sp, #140	; 0x8c
90018b8a:	a805      	add	r0, sp, #20
90018b8c:	f853 4b04 	ldr.w	r4, [r3], #4
90018b90:	9303      	str	r3, [sp, #12]
90018b92:	f000 fe1a 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90018b96:	682b      	ldr	r3, [r5, #0]
90018b98:	4628      	mov	r0, r5
90018b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018b9c:	4798      	blx	r3
90018b9e:	682b      	ldr	r3, [r5, #0]
90018ba0:	4606      	mov	r6, r0
90018ba2:	4628      	mov	r0, r5
90018ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018ba6:	4798      	blx	r3
90018ba8:	4633      	mov	r3, r6
90018baa:	4621      	mov	r1, r4
90018bac:	ae1e      	add	r6, sp, #120	; 0x78
90018bae:	2400      	movs	r4, #0
90018bb0:	9000      	str	r0, [sp, #0]
90018bb2:	9a03      	ldr	r2, [sp, #12]
90018bb4:	a805      	add	r0, sp, #20
90018bb6:	f000 fe63 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018bba:	f846 4d68 	str.w	r4, [r6, #-104]!
90018bbe:	462a      	mov	r2, r5
90018bc0:	4633      	mov	r3, r6
90018bc2:	4621      	mov	r1, r4
90018bc4:	a805      	add	r0, sp, #20
90018bc6:	f001 f961 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018bca:	b300      	cbz	r0, 90018c0e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90018bcc:	280a      	cmp	r0, #10
90018bce:	d01a      	beq.n	90018c06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90018bd0:	9f04      	ldr	r7, [sp, #16]
90018bd2:	b1c7      	cbz	r7, 90018c06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90018bd4:	7b78      	ldrb	r0, [r7, #13]
90018bd6:	7a3b      	ldrb	r3, [r7, #8]
90018bd8:	00c1      	lsls	r1, r0, #3
90018bda:	88ea      	ldrh	r2, [r5, #6]
90018bdc:	f401 7180 	and.w	r1, r1, #256	; 0x100
90018be0:	4319      	orrs	r1, r3
90018be2:	0643      	lsls	r3, r0, #25
90018be4:	ea4f 1000 	mov.w	r0, r0, lsl #4
90018be8:	bf48      	it	mi
90018bea:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90018bee:	f400 7080 	and.w	r0, r0, #256	; 0x100
90018bf2:	bf48      	it	mi
90018bf4:	b219      	sxthmi	r1, r3
90018bf6:	79fb      	ldrb	r3, [r7, #7]
90018bf8:	4303      	orrs	r3, r0
90018bfa:	4413      	add	r3, r2
90018bfc:	1a5b      	subs	r3, r3, r1
90018bfe:	b21b      	sxth	r3, r3
90018c00:	429c      	cmp	r4, r3
90018c02:	bfb8      	it	lt
90018c04:	461c      	movlt	r4, r3
90018c06:	4633      	mov	r3, r6
90018c08:	462a      	mov	r2, r5
90018c0a:	2100      	movs	r1, #0
90018c0c:	e7da      	b.n	90018bc4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90018c0e:	b2a0      	uxth	r0, r4
90018c10:	b01e      	add	sp, #120	; 0x78
90018c12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90018c16:	b003      	add	sp, #12
90018c18:	4770      	bx	lr

90018c1a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90018c1a:	7a43      	ldrb	r3, [r0, #9]
90018c1c:	8880      	ldrh	r0, [r0, #4]
90018c1e:	4418      	add	r0, r3
90018c20:	b280      	uxth	r0, r0
90018c22:	4770      	bx	lr

90018c24 <_ZNK8touchgfx4Font13getFontHeightEv>:
90018c24:	6803      	ldr	r3, [r0, #0]
90018c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018c28:	4718      	bx	r3

90018c2a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90018c2a:	b40e      	push	{r1, r2, r3}
90018c2c:	b570      	push	{r4, r5, r6, lr}
90018c2e:	b09d      	sub	sp, #116	; 0x74
90018c30:	4604      	mov	r4, r0
90018c32:	ab21      	add	r3, sp, #132	; 0x84
90018c34:	a803      	add	r0, sp, #12
90018c36:	f853 5b04 	ldr.w	r5, [r3], #4
90018c3a:	9302      	str	r3, [sp, #8]
90018c3c:	f000 fdc5 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90018c40:	6823      	ldr	r3, [r4, #0]
90018c42:	4620      	mov	r0, r4
90018c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018c46:	4798      	blx	r3
90018c48:	6823      	ldr	r3, [r4, #0]
90018c4a:	4606      	mov	r6, r0
90018c4c:	4620      	mov	r0, r4
90018c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018c50:	2401      	movs	r4, #1
90018c52:	4798      	blx	r3
90018c54:	4633      	mov	r3, r6
90018c56:	9000      	str	r0, [sp, #0]
90018c58:	4629      	mov	r1, r5
90018c5a:	9a02      	ldr	r2, [sp, #8]
90018c5c:	a803      	add	r0, sp, #12
90018c5e:	f000 fe0f 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018c62:	a803      	add	r0, sp, #12
90018c64:	f001 f9de 	bl	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018c68:	b2a3      	uxth	r3, r4
90018c6a:	b138      	cbz	r0, 90018c7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90018c6c:	280a      	cmp	r0, #10
90018c6e:	a803      	add	r0, sp, #12
90018c70:	bf04      	itt	eq
90018c72:	3301      	addeq	r3, #1
90018c74:	b21c      	sxtheq	r4, r3
90018c76:	f001 f9d5 	bl	9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018c7a:	e7f5      	b.n	90018c68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90018c7c:	4618      	mov	r0, r3
90018c7e:	b01d      	add	sp, #116	; 0x74
90018c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018c84:	b003      	add	sp, #12
90018c86:	4770      	bx	lr

90018c88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90018c88:	b40e      	push	{r1, r2, r3}
90018c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
90018c8c:	b09e      	sub	sp, #120	; 0x78
90018c8e:	4604      	mov	r4, r0
90018c90:	ab23      	add	r3, sp, #140	; 0x8c
90018c92:	a805      	add	r0, sp, #20
90018c94:	f853 5b04 	ldr.w	r5, [r3], #4
90018c98:	9303      	str	r3, [sp, #12]
90018c9a:	f000 fd96 	bl	900197ca <_ZN8touchgfx12TextProviderC1Ev>
90018c9e:	6823      	ldr	r3, [r4, #0]
90018ca0:	4620      	mov	r0, r4
90018ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018ca4:	4798      	blx	r3
90018ca6:	6823      	ldr	r3, [r4, #0]
90018ca8:	4606      	mov	r6, r0
90018caa:	4620      	mov	r0, r4
90018cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018cae:	4798      	blx	r3
90018cb0:	4633      	mov	r3, r6
90018cb2:	4629      	mov	r1, r5
90018cb4:	9000      	str	r0, [sp, #0]
90018cb6:	9a03      	ldr	r2, [sp, #12]
90018cb8:	a805      	add	r0, sp, #20
90018cba:	f000 fde1 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018cbe:	ad1e      	add	r5, sp, #120	; 0x78
90018cc0:	2100      	movs	r1, #0
90018cc2:	f647 76ff 	movw	r6, #32767	; 0x7fff
90018cc6:	4622      	mov	r2, r4
90018cc8:	a805      	add	r0, sp, #20
90018cca:	f845 1d68 	str.w	r1, [r5, #-104]!
90018cce:	462b      	mov	r3, r5
90018cd0:	f001 f8dc 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018cd4:	b1d8      	cbz	r0, 90018d0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90018cd6:	280a      	cmp	r0, #10
90018cd8:	d012      	beq.n	90018d00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90018cda:	9804      	ldr	r0, [sp, #16]
90018cdc:	b180      	cbz	r0, 90018d00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90018cde:	7b47      	ldrb	r7, [r0, #13]
90018ce0:	88e2      	ldrh	r2, [r4, #6]
90018ce2:	00fb      	lsls	r3, r7, #3
90018ce4:	f403 7180 	and.w	r1, r3, #256	; 0x100
90018ce8:	7a03      	ldrb	r3, [r0, #8]
90018cea:	430b      	orrs	r3, r1
90018cec:	0679      	lsls	r1, r7, #25
90018cee:	bf44      	itt	mi
90018cf0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90018cf4:	b21b      	sxthmi	r3, r3
90018cf6:	1ad3      	subs	r3, r2, r3
90018cf8:	b21b      	sxth	r3, r3
90018cfa:	429e      	cmp	r6, r3
90018cfc:	bfa8      	it	ge
90018cfe:	461e      	movge	r6, r3
90018d00:	462b      	mov	r3, r5
90018d02:	4622      	mov	r2, r4
90018d04:	2100      	movs	r1, #0
90018d06:	a805      	add	r0, sp, #20
90018d08:	f001 f8c0 	bl	90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018d0c:	e7e2      	b.n	90018cd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90018d0e:	4630      	mov	r0, r6
90018d10:	b01e      	add	sp, #120	; 0x78
90018d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90018d16:	b003      	add	sp, #12
90018d18:	4770      	bx	lr

90018d1a <_ZNK8touchgfx8Drawable10invalidateEv>:
90018d1a:	b513      	push	{r0, r1, r4, lr}
90018d1c:	6803      	ldr	r3, [r0, #0]
90018d1e:	2400      	movs	r4, #0
90018d20:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90018d24:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90018d28:	f8ad 1004 	strh.w	r1, [sp, #4]
90018d2c:	4669      	mov	r1, sp
90018d2e:	691b      	ldr	r3, [r3, #16]
90018d30:	9400      	str	r4, [sp, #0]
90018d32:	f8ad 2006 	strh.w	r2, [sp, #6]
90018d36:	4798      	blx	r3
90018d38:	b002      	add	sp, #8
90018d3a:	bd10      	pop	{r4, pc}

90018d3c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90018d3c:	b538      	push	{r3, r4, r5, lr}
90018d3e:	680b      	ldr	r3, [r1, #0]
90018d40:	460c      	mov	r4, r1
90018d42:	4605      	mov	r5, r0
90018d44:	68db      	ldr	r3, [r3, #12]
90018d46:	4798      	blx	r3
90018d48:	6823      	ldr	r3, [r4, #0]
90018d4a:	4620      	mov	r0, r4
90018d4c:	4629      	mov	r1, r5
90018d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018d50:	4798      	blx	r3
90018d52:	4628      	mov	r0, r5
90018d54:	bd38      	pop	{r3, r4, r5, pc}

90018d56 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90018d56:	b410      	push	{r4}
90018d58:	880a      	ldrh	r2, [r1, #0]
90018d5a:	8884      	ldrh	r4, [r0, #4]
90018d5c:	4422      	add	r2, r4
90018d5e:	800a      	strh	r2, [r1, #0]
90018d60:	884a      	ldrh	r2, [r1, #2]
90018d62:	88c4      	ldrh	r4, [r0, #6]
90018d64:	4422      	add	r2, r4
90018d66:	804a      	strh	r2, [r1, #2]
90018d68:	6940      	ldr	r0, [r0, #20]
90018d6a:	b120      	cbz	r0, 90018d76 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90018d6c:	6803      	ldr	r3, [r0, #0]
90018d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
90018d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018d74:	4718      	bx	r3
90018d76:	f85d 4b04 	ldr.w	r4, [sp], #4
90018d7a:	4770      	bx	lr

90018d7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90018d7c:	b570      	push	{r4, r5, r6, lr}
90018d7e:	8882      	ldrh	r2, [r0, #4]
90018d80:	460c      	mov	r4, r1
90018d82:	880b      	ldrh	r3, [r1, #0]
90018d84:	4605      	mov	r5, r0
90018d86:	4413      	add	r3, r2
90018d88:	800b      	strh	r3, [r1, #0]
90018d8a:	884b      	ldrh	r3, [r1, #2]
90018d8c:	88c2      	ldrh	r2, [r0, #6]
90018d8e:	4413      	add	r3, r2
90018d90:	804b      	strh	r3, [r1, #2]
90018d92:	1d01      	adds	r1, r0, #4
90018d94:	4620      	mov	r0, r4
90018d96:	f7f9 fd8d 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90018d9a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90018d9e:	2b00      	cmp	r3, #0
90018da0:	dd0b      	ble.n	90018dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018da2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90018da6:	2b00      	cmp	r3, #0
90018da8:	dd07      	ble.n	90018dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018daa:	6968      	ldr	r0, [r5, #20]
90018dac:	b128      	cbz	r0, 90018dba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018dae:	6803      	ldr	r3, [r0, #0]
90018db0:	4621      	mov	r1, r4
90018db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018db8:	4718      	bx	r3
90018dba:	bd70      	pop	{r4, r5, r6, pc}

90018dbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90018dbc:	b570      	push	{r4, r5, r6, lr}
90018dbe:	8882      	ldrh	r2, [r0, #4]
90018dc0:	460c      	mov	r4, r1
90018dc2:	880b      	ldrh	r3, [r1, #0]
90018dc4:	4605      	mov	r5, r0
90018dc6:	4413      	add	r3, r2
90018dc8:	800b      	strh	r3, [r1, #0]
90018dca:	884b      	ldrh	r3, [r1, #2]
90018dcc:	88c2      	ldrh	r2, [r0, #6]
90018dce:	4413      	add	r3, r2
90018dd0:	804b      	strh	r3, [r1, #2]
90018dd2:	1d01      	adds	r1, r0, #4
90018dd4:	4620      	mov	r0, r4
90018dd6:	f7f9 fd6d 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90018dda:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90018dde:	2b00      	cmp	r3, #0
90018de0:	dd18      	ble.n	90018e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018de2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90018de6:	2b00      	cmp	r3, #0
90018de8:	dd14      	ble.n	90018e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018dea:	6968      	ldr	r0, [r5, #20]
90018dec:	b128      	cbz	r0, 90018dfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90018dee:	6803      	ldr	r3, [r0, #0]
90018df0:	4621      	mov	r1, r4
90018df2:	691b      	ldr	r3, [r3, #16]
90018df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018df8:	4718      	bx	r3
90018dfa:	4b07      	ldr	r3, [pc, #28]	; (90018e18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90018dfc:	681b      	ldr	r3, [r3, #0]
90018dfe:	3304      	adds	r3, #4
90018e00:	429d      	cmp	r5, r3
90018e02:	d107      	bne.n	90018e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018e04:	f7fe fefa 	bl	90017bfc <_ZN8touchgfx11Application11getInstanceEv>
90018e08:	6821      	ldr	r1, [r4, #0]
90018e0a:	6862      	ldr	r2, [r4, #4]
90018e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018e10:	f7ff b862 	b.w	90017ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018e14:	bd70      	pop	{r4, r5, r6, pc}
90018e16:	bf00      	nop
90018e18:	240281d8 	.word	0x240281d8

90018e1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
90018e1c:	b570      	push	{r4, r5, r6, lr}
90018e1e:	4604      	mov	r4, r0
90018e20:	4616      	mov	r6, r2
90018e22:	460d      	mov	r5, r1
90018e24:	b901      	cbnz	r1, 90018e28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90018e26:	b192      	cbz	r2, 90018e4e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90018e28:	6823      	ldr	r3, [r4, #0]
90018e2a:	4620      	mov	r0, r4
90018e2c:	699b      	ldr	r3, [r3, #24]
90018e2e:	4798      	blx	r3
90018e30:	88e2      	ldrh	r2, [r4, #6]
90018e32:	88a1      	ldrh	r1, [r4, #4]
90018e34:	4620      	mov	r0, r4
90018e36:	4432      	add	r2, r6
90018e38:	4429      	add	r1, r5
90018e3a:	b212      	sxth	r2, r2
90018e3c:	b209      	sxth	r1, r1
90018e3e:	f7fa f809 	bl	90012e54 <_ZN8touchgfx8Drawable5setXYEss>
90018e42:	6823      	ldr	r3, [r4, #0]
90018e44:	4620      	mov	r0, r4
90018e46:	699b      	ldr	r3, [r3, #24]
90018e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018e4c:	4718      	bx	r3
90018e4e:	bd70      	pop	{r4, r5, r6, pc}

90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90018e50:	b510      	push	{r4, lr}
90018e52:	2300      	movs	r3, #0
90018e54:	4604      	mov	r4, r0
90018e56:	4608      	mov	r0, r1
90018e58:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90018e5c:	8023      	strh	r3, [r4, #0]
90018e5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90018e62:	8063      	strh	r3, [r4, #2]
90018e64:	6803      	ldr	r3, [r0, #0]
90018e66:	80a1      	strh	r1, [r4, #4]
90018e68:	4621      	mov	r1, r4
90018e6a:	80e2      	strh	r2, [r4, #6]
90018e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018e6e:	4798      	blx	r3
90018e70:	4620      	mov	r0, r4
90018e72:	bd10      	pop	{r4, pc}

90018e74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90018e74:	b530      	push	{r4, r5, lr}
90018e76:	8083      	strh	r3, [r0, #4]
90018e78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90018e7c:	f89d 5018 	ldrb.w	r5, [sp, #24]
90018e80:	80c3      	strh	r3, [r0, #6]
90018e82:	f89d 3010 	ldrb.w	r3, [sp, #16]
90018e86:	6141      	str	r1, [r0, #20]
90018e88:	7203      	strb	r3, [r0, #8]
90018e8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
90018e8e:	8302      	strh	r2, [r0, #24]
90018e90:	7243      	strb	r3, [r0, #9]
90018e92:	7a83      	ldrb	r3, [r0, #10]
90018e94:	f365 0306 	bfi	r3, r5, #0, #7
90018e98:	f89d 501c 	ldrb.w	r5, [sp, #28]
90018e9c:	f365 13c7 	bfi	r3, r5, #7, #1
90018ea0:	7283      	strb	r3, [r0, #10]
90018ea2:	f89d 3020 	ldrb.w	r3, [sp, #32]
90018ea6:	72c3      	strb	r3, [r0, #11]
90018ea8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90018eac:	7303      	strb	r3, [r0, #12]
90018eae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90018eb2:	81c3      	strh	r3, [r0, #14]
90018eb4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90018eb8:	8203      	strh	r3, [r0, #16]
90018eba:	4b01      	ldr	r3, [pc, #4]	; (90018ec0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90018ebc:	6003      	str	r3, [r0, #0]
90018ebe:	bd30      	pop	{r4, r5, pc}
90018ec0:	9002bfe0 	.word	0x9002bfe0

90018ec4 <_ZNK8touchgfx9ConstFont4findEt>:
90018ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
90018ec6:	6944      	ldr	r4, [r0, #20]
90018ec8:	b3bc      	cbz	r4, 90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018eca:	88a3      	ldrh	r3, [r4, #4]
90018ecc:	8b02      	ldrh	r2, [r0, #24]
90018ece:	1acb      	subs	r3, r1, r3
90018ed0:	f102 32ff 	add.w	r2, r2, #4294967295
90018ed4:	d431      	bmi.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018ed6:	4293      	cmp	r3, r2
90018ed8:	dd0c      	ble.n	90018ef4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90018eda:	230e      	movs	r3, #14
90018edc:	fb03 4302 	mla	r3, r3, r2, r4
90018ee0:	889b      	ldrh	r3, [r3, #4]
90018ee2:	1a5b      	subs	r3, r3, r1
90018ee4:	1ad3      	subs	r3, r2, r3
90018ee6:	429a      	cmp	r2, r3
90018ee8:	db27      	blt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018eea:	2b00      	cmp	r3, #0
90018eec:	bfbc      	itt	lt
90018eee:	2302      	movlt	r3, #2
90018ef0:	fb92 f3f3 	sdivlt	r3, r2, r3
90018ef4:	2500      	movs	r5, #0
90018ef6:	260e      	movs	r6, #14
90018ef8:	4295      	cmp	r5, r2
90018efa:	dc1e      	bgt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018efc:	fb06 4003 	mla	r0, r6, r3, r4
90018f00:	8887      	ldrh	r7, [r0, #4]
90018f02:	42b9      	cmp	r1, r7
90018f04:	d01a      	beq.n	90018f3c <_ZNK8touchgfx9ConstFont4findEt+0x78>
90018f06:	d20d      	bcs.n	90018f24 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90018f08:	1e5a      	subs	r2, r3, #1
90018f0a:	4295      	cmp	r5, r2
90018f0c:	dc15      	bgt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018f0e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90018f12:	1a5b      	subs	r3, r3, r1
90018f14:	1ad3      	subs	r3, r2, r3
90018f16:	429a      	cmp	r2, r3
90018f18:	db0f      	blt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018f1a:	429d      	cmp	r5, r3
90018f1c:	ddec      	ble.n	90018ef8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018f1e:	1953      	adds	r3, r2, r5
90018f20:	105b      	asrs	r3, r3, #1
90018f22:	e7e9      	b.n	90018ef8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018f24:	1c5d      	adds	r5, r3, #1
90018f26:	42aa      	cmp	r2, r5
90018f28:	db07      	blt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018f2a:	8a43      	ldrh	r3, [r0, #18]
90018f2c:	1acb      	subs	r3, r1, r3
90018f2e:	442b      	add	r3, r5
90018f30:	429d      	cmp	r5, r3
90018f32:	dc02      	bgt.n	90018f3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018f34:	429a      	cmp	r2, r3
90018f36:	dadf      	bge.n	90018ef8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018f38:	e7f1      	b.n	90018f1e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90018f3a:	2000      	movs	r0, #0
90018f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

90018f3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90018f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90018f40:	4604      	mov	r4, r0
90018f42:	4617      	mov	r7, r2
90018f44:	461e      	mov	r6, r3
90018f46:	b911      	cbnz	r1, 90018f4e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90018f48:	2500      	movs	r5, #0
90018f4a:	4628      	mov	r0, r5
90018f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018f4e:	290a      	cmp	r1, #10
90018f50:	d0fa      	beq.n	90018f48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018f52:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90018f56:	4291      	cmp	r1, r2
90018f58:	d0f6      	beq.n	90018f48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018f5a:	f242 020b 	movw	r2, #8203	; 0x200b
90018f5e:	4291      	cmp	r1, r2
90018f60:	d0f2      	beq.n	90018f48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018f62:	f7ff ffaf 	bl	90018ec4 <_ZNK8touchgfx9ConstFont4findEt>
90018f66:	4605      	mov	r5, r0
90018f68:	b950      	cbnz	r0, 90018f80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90018f6a:	6823      	ldr	r3, [r4, #0]
90018f6c:	4620      	mov	r0, r4
90018f6e:	691b      	ldr	r3, [r3, #16]
90018f70:	4798      	blx	r3
90018f72:	4601      	mov	r1, r0
90018f74:	4620      	mov	r0, r4
90018f76:	f7ff ffa5 	bl	90018ec4 <_ZNK8touchgfx9ConstFont4findEt>
90018f7a:	4605      	mov	r5, r0
90018f7c:	2800      	cmp	r0, #0
90018f7e:	d0e3      	beq.n	90018f48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018f80:	6823      	ldr	r3, [r4, #0]
90018f82:	4629      	mov	r1, r5
90018f84:	4620      	mov	r0, r4
90018f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90018f88:	4798      	blx	r3
90018f8a:	6038      	str	r0, [r7, #0]
90018f8c:	6823      	ldr	r3, [r4, #0]
90018f8e:	4620      	mov	r0, r4
90018f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90018f92:	4798      	blx	r3
90018f94:	7030      	strb	r0, [r6, #0]
90018f96:	e7d8      	b.n	90018f4a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90018f98 <_ZN8touchgfx4clzuEm>:
90018f98:	4603      	mov	r3, r0
90018f9a:	b1c8      	cbz	r0, 90018fd0 <_ZN8touchgfx4clzuEm+0x38>
90018f9c:	0c02      	lsrs	r2, r0, #16
90018f9e:	0412      	lsls	r2, r2, #16
90018fa0:	b9a2      	cbnz	r2, 90018fcc <_ZN8touchgfx4clzuEm+0x34>
90018fa2:	0403      	lsls	r3, r0, #16
90018fa4:	2010      	movs	r0, #16
90018fa6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90018faa:	bf04      	itt	eq
90018fac:	021b      	lsleq	r3, r3, #8
90018fae:	3008      	addeq	r0, #8
90018fb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90018fb4:	bf04      	itt	eq
90018fb6:	011b      	lsleq	r3, r3, #4
90018fb8:	3004      	addeq	r0, #4
90018fba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90018fbe:	bf04      	itt	eq
90018fc0:	009b      	lsleq	r3, r3, #2
90018fc2:	3002      	addeq	r0, #2
90018fc4:	2b00      	cmp	r3, #0
90018fc6:	db04      	blt.n	90018fd2 <_ZN8touchgfx4clzuEm+0x3a>
90018fc8:	3001      	adds	r0, #1
90018fca:	4770      	bx	lr
90018fcc:	2000      	movs	r0, #0
90018fce:	e7ea      	b.n	90018fa6 <_ZN8touchgfx4clzuEm+0xe>
90018fd0:	2020      	movs	r0, #32
90018fd2:	4770      	bx	lr

90018fd4 <_ZN8touchgfx7muldivuEmmmRm>:
90018fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018fd8:	4680      	mov	r8, r0
90018fda:	460f      	mov	r7, r1
90018fdc:	4615      	mov	r5, r2
90018fde:	461e      	mov	r6, r3
90018fe0:	f7ff ffda 	bl	90018f98 <_ZN8touchgfx4clzuEm>
90018fe4:	b998      	cbnz	r0, 9001900e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
90018fe6:	4608      	mov	r0, r1
90018fe8:	f7ff ffd6 	bl	90018f98 <_ZN8touchgfx4clzuEm>
90018fec:	2800      	cmp	r0, #0
90018fee:	dd08      	ble.n	90019002 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
90018ff0:	4633      	mov	r3, r6
90018ff2:	462a      	mov	r2, r5
90018ff4:	4641      	mov	r1, r8
90018ff6:	4638      	mov	r0, r7
90018ff8:	f7ff ffec 	bl	90018fd4 <_ZN8touchgfx7muldivuEmmmRm>
90018ffc:	b003      	add	sp, #12
90018ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019002:	f04f 33ff 	mov.w	r3, #4294967295
90019006:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
9001900a:	6033      	str	r3, [r6, #0]
9001900c:	e7f6      	b.n	90018ffc <_ZN8touchgfx7muldivuEmmmRm+0x28>
9001900e:	fa31 f900 	lsrs.w	r9, r1, r0
90019012:	fb01 f308 	mul.w	r3, r1, r8
90019016:	d105      	bne.n	90019024 <_ZN8touchgfx7muldivuEmmmRm+0x50>
90019018:	fbb3 f0f5 	udiv	r0, r3, r5
9001901c:	fb05 3510 	mls	r5, r5, r0, r3
90019020:	6035      	str	r5, [r6, #0]
90019022:	e7eb      	b.n	90018ffc <_ZN8touchgfx7muldivuEmmmRm+0x28>
90019024:	2301      	movs	r3, #1
90019026:	fa08 fb00 	lsl.w	fp, r8, r0
9001902a:	462a      	mov	r2, r5
9001902c:	4641      	mov	r1, r8
9001902e:	fa03 f000 	lsl.w	r0, r3, r0
90019032:	4633      	mov	r3, r6
90019034:	fbbb faf5 	udiv	sl, fp, r5
90019038:	3801      	subs	r0, #1
9001903a:	fb09 f40a 	mul.w	r4, r9, sl
9001903e:	4038      	ands	r0, r7
90019040:	f7ff ffc8 	bl	90018fd4 <_ZN8touchgfx7muldivuEmmmRm>
90019044:	462a      	mov	r2, r5
90019046:	4607      	mov	r7, r0
90019048:	ab01      	add	r3, sp, #4
9001904a:	fb05 b11a 	mls	r1, r5, sl, fp
9001904e:	4648      	mov	r0, r9
90019050:	f7ff ffc0 	bl	90018fd4 <_ZN8touchgfx7muldivuEmmmRm>
90019054:	9b01      	ldr	r3, [sp, #4]
90019056:	6832      	ldr	r2, [r6, #0]
90019058:	441a      	add	r2, r3
9001905a:	fbb2 f3f5 	udiv	r3, r2, r5
9001905e:	441c      	add	r4, r3
90019060:	fb05 2513 	mls	r5, r5, r3, r2
90019064:	443c      	add	r4, r7
90019066:	4420      	add	r0, r4
90019068:	e7da      	b.n	90019020 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

9001906a <_ZN8touchgfx6muldivElllRl>:
9001906a:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001906c:	2800      	cmp	r0, #0
9001906e:	461e      	mov	r6, r3
90019070:	bfba      	itte	lt
90019072:	4240      	neglt	r0, r0
90019074:	f04f 34ff 	movlt.w	r4, #4294967295
90019078:	2401      	movge	r4, #1
9001907a:	2900      	cmp	r1, #0
9001907c:	bfbc      	itt	lt
9001907e:	4249      	neglt	r1, r1
90019080:	4264      	neglt	r4, r4
90019082:	2a00      	cmp	r2, #0
90019084:	bfb6      	itet	lt
90019086:	4265      	neglt	r5, r4
90019088:	4625      	movge	r5, r4
9001908a:	4252      	neglt	r2, r2
9001908c:	4288      	cmp	r0, r1
9001908e:	bfc2      	ittt	gt
90019090:	4603      	movgt	r3, r0
90019092:	4608      	movgt	r0, r1
90019094:	4619      	movgt	r1, r3
90019096:	ab01      	add	r3, sp, #4
90019098:	f7ff ff9c 	bl	90018fd4 <_ZN8touchgfx7muldivuEmmmRm>
9001909c:	9b01      	ldr	r3, [sp, #4]
9001909e:	4368      	muls	r0, r5
900190a0:	435c      	muls	r4, r3
900190a2:	6034      	str	r4, [r6, #0]
900190a4:	b002      	add	sp, #8
900190a6:	bd70      	pop	{r4, r5, r6, pc}

900190a8 <_ZN8touchgfx6muldivElll>:
900190a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
900190aa:	4606      	mov	r6, r0
900190ac:	ab01      	add	r3, sp, #4
900190ae:	460d      	mov	r5, r1
900190b0:	4614      	mov	r4, r2
900190b2:	f7ff ffda 	bl	9001906a <_ZN8touchgfx6muldivElllRl>
900190b6:	2e00      	cmp	r6, #0
900190b8:	db20      	blt.n	900190fc <_ZN8touchgfx6muldivElll+0x54>
900190ba:	bf14      	ite	ne
900190bc:	2301      	movne	r3, #1
900190be:	2300      	moveq	r3, #0
900190c0:	2d00      	cmp	r5, #0
900190c2:	db1e      	blt.n	90019102 <_ZN8touchgfx6muldivElll+0x5a>
900190c4:	bf14      	ite	ne
900190c6:	2201      	movne	r2, #1
900190c8:	2200      	moveq	r2, #0
900190ca:	2c00      	cmp	r4, #0
900190cc:	fb03 f202 	mul.w	r2, r3, r2
900190d0:	db1a      	blt.n	90019108 <_ZN8touchgfx6muldivElll+0x60>
900190d2:	bf14      	ite	ne
900190d4:	2301      	movne	r3, #1
900190d6:	2300      	moveq	r3, #0
900190d8:	4353      	muls	r3, r2
900190da:	2b01      	cmp	r3, #1
900190dc:	d117      	bne.n	9001910e <_ZN8touchgfx6muldivElll+0x66>
900190de:	2c00      	cmp	r4, #0
900190e0:	9b01      	ldr	r3, [sp, #4]
900190e2:	bfb8      	it	lt
900190e4:	4264      	neglt	r4, r4
900190e6:	2b00      	cmp	r3, #0
900190e8:	f104 0401 	add.w	r4, r4, #1
900190ec:	bfb8      	it	lt
900190ee:	425b      	neglt	r3, r3
900190f0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
900190f4:	db00      	blt.n	900190f8 <_ZN8touchgfx6muldivElll+0x50>
900190f6:	3001      	adds	r0, #1
900190f8:	b002      	add	sp, #8
900190fa:	bd70      	pop	{r4, r5, r6, pc}
900190fc:	f04f 33ff 	mov.w	r3, #4294967295
90019100:	e7de      	b.n	900190c0 <_ZN8touchgfx6muldivElll+0x18>
90019102:	f04f 32ff 	mov.w	r2, #4294967295
90019106:	e7e0      	b.n	900190ca <_ZN8touchgfx6muldivElll+0x22>
90019108:	f04f 33ff 	mov.w	r3, #4294967295
9001910c:	e7e4      	b.n	900190d8 <_ZN8touchgfx6muldivElll+0x30>
9001910e:	3301      	adds	r3, #1
90019110:	d1f2      	bne.n	900190f8 <_ZN8touchgfx6muldivElll+0x50>
90019112:	9b01      	ldr	r3, [sp, #4]
90019114:	2c00      	cmp	r4, #0
90019116:	bfb8      	it	lt
90019118:	4264      	neglt	r4, r4
9001911a:	2b00      	cmp	r3, #0
9001911c:	bfb8      	it	lt
9001911e:	425b      	neglt	r3, r3
90019120:	ebb3 0f64 	cmp.w	r3, r4, asr #1
90019124:	bfc8      	it	gt
90019126:	f100 30ff 	addgt.w	r0, r0, #4294967295
9001912a:	e7e5      	b.n	900190f8 <_ZN8touchgfx6muldivElll+0x50>

9001912c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
9001912c:	2000      	movs	r0, #0
9001912e:	4770      	bx	lr

90019130 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90019130:	2001      	movs	r0, #1
90019132:	4770      	bx	lr

90019134 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
90019134:	2002      	movs	r0, #2
90019136:	4770      	bx	lr

90019138 <_ZN8touchgfx6ScreenD1Ev>:
90019138:	4770      	bx	lr

9001913a <_ZN8touchgfx6Screen11setupScreenEv>:
9001913a:	4770      	bx	lr

9001913c <_ZN8touchgfx12GestureEventD1Ev>:
9001913c:	4770      	bx	lr

9001913e <_ZN8touchgfx9DragEventD1Ev>:
9001913e:	4770      	bx	lr

90019140 <_ZN8touchgfx10ClickEventD1Ev>:
90019140:	4770      	bx	lr

90019142 <_ZN8touchgfx10ClickEventD0Ev>:
90019142:	b510      	push	{r4, lr}
90019144:	4604      	mov	r4, r0
90019146:	210c      	movs	r1, #12
90019148:	f00d ffd5 	bl	900270f6 <_ZdlPvj>
9001914c:	4620      	mov	r0, r4
9001914e:	bd10      	pop	{r4, pc}

90019150 <_ZN8touchgfx9DragEventD0Ev>:
90019150:	b510      	push	{r4, lr}
90019152:	4604      	mov	r4, r0
90019154:	2110      	movs	r1, #16
90019156:	f00d ffce 	bl	900270f6 <_ZdlPvj>
9001915a:	4620      	mov	r0, r4
9001915c:	bd10      	pop	{r4, pc}

9001915e <_ZN8touchgfx12GestureEventD0Ev>:
9001915e:	b510      	push	{r4, lr}
90019160:	4604      	mov	r4, r0
90019162:	210c      	movs	r1, #12
90019164:	f00d ffc7 	bl	900270f6 <_ZdlPvj>
90019168:	4620      	mov	r0, r4
9001916a:	bd10      	pop	{r4, pc}

9001916c <_ZN8touchgfx6ScreenD0Ev>:
9001916c:	b510      	push	{r4, lr}
9001916e:	4604      	mov	r4, r0
90019170:	213c      	movs	r1, #60	; 0x3c
90019172:	f00d ffc0 	bl	900270f6 <_ZdlPvj>
90019176:	4620      	mov	r0, r4
90019178:	bd10      	pop	{r4, pc}
	...

9001917c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
9001917c:	b530      	push	{r4, r5, lr}
9001917e:	460d      	mov	r5, r1
90019180:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019182:	b087      	sub	sp, #28
90019184:	4604      	mov	r4, r0
90019186:	b301      	cbz	r1, 900191ca <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90019188:	a801      	add	r0, sp, #4
9001918a:	f7ff fe61 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001918e:	892a      	ldrh	r2, [r5, #8]
90019190:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90019194:	7928      	ldrb	r0, [r5, #4]
90019196:	1ad2      	subs	r2, r2, r3
90019198:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001919a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001919e:	441a      	add	r2, r3
900191a0:	896b      	ldrh	r3, [r5, #10]
900191a2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
900191a6:	f88d 0010 	strb.w	r0, [sp, #16]
900191aa:	1b5b      	subs	r3, r3, r5
900191ac:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
900191ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
900191b0:	442b      	add	r3, r5
900191b2:	4d07      	ldr	r5, [pc, #28]	; (900191d0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
900191b4:	f8ad 1012 	strh.w	r1, [sp, #18]
900191b8:	a903      	add	r1, sp, #12
900191ba:	9503      	str	r5, [sp, #12]
900191bc:	f8ad 2014 	strh.w	r2, [sp, #20]
900191c0:	f8ad 3016 	strh.w	r3, [sp, #22]
900191c4:	6803      	ldr	r3, [r0, #0]
900191c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900191c8:	4798      	blx	r3
900191ca:	b007      	add	sp, #28
900191cc:	bd30      	pop	{r4, r5, pc}
900191ce:	bf00      	nop
900191d0:	9002c068 	.word	0x9002c068

900191d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
900191d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900191d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
900191da:	b08a      	sub	sp, #40	; 0x28
900191dc:	4604      	mov	r4, r0
900191de:	460d      	mov	r5, r1
900191e0:	b113      	cbz	r3, 900191e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
900191e2:	790b      	ldrb	r3, [r1, #4]
900191e4:	2b00      	cmp	r3, #0
900191e6:	d044      	beq.n	90019272 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900191e8:	f104 0804 	add.w	r8, r4, #4
900191ec:	a803      	add	r0, sp, #12
900191ee:	4641      	mov	r1, r8
900191f0:	f7ff fe2e 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900191f4:	792b      	ldrb	r3, [r5, #4]
900191f6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
900191fa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900191fe:	b983      	cbnz	r3, 90019222 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90019200:	f104 0336 	add.w	r3, r4, #54	; 0x36
90019204:	892a      	ldrh	r2, [r5, #8]
90019206:	88e9      	ldrh	r1, [r5, #6]
90019208:	4640      	mov	r0, r8
9001920a:	1b92      	subs	r2, r2, r6
9001920c:	9301      	str	r3, [sp, #4]
9001920e:	1bc9      	subs	r1, r1, r7
90019210:	f104 0334 	add.w	r3, r4, #52	; 0x34
90019214:	b212      	sxth	r2, r2
90019216:	9300      	str	r3, [sp, #0]
90019218:	b209      	sxth	r1, r1
9001921a:	f104 0330 	add.w	r3, r4, #48	; 0x30
9001921e:	f7f9 fa67 	bl	900126f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
90019222:	6b21      	ldr	r1, [r4, #48]	; 0x30
90019224:	b329      	cbz	r1, 90019272 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019226:	a805      	add	r0, sp, #20
90019228:	f7ff fe12 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001922c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90019230:	792b      	ldrb	r3, [r5, #4]
90019232:	a907      	add	r1, sp, #28
90019234:	1abf      	subs	r7, r7, r2
90019236:	88ea      	ldrh	r2, [r5, #6]
90019238:	6b20      	ldr	r0, [r4, #48]	; 0x30
9001923a:	4417      	add	r7, r2
9001923c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
9001923e:	f88d 3020 	strb.w	r3, [sp, #32]
90019242:	4417      	add	r7, r2
90019244:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90019248:	1ab6      	subs	r6, r6, r2
9001924a:	892a      	ldrh	r2, [r5, #8]
9001924c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90019250:	4416      	add	r6, r2
90019252:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90019254:	4416      	add	r6, r2
90019256:	4a08      	ldr	r2, [pc, #32]	; (90019278 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90019258:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
9001925c:	2600      	movs	r6, #0
9001925e:	9207      	str	r2, [sp, #28]
90019260:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
90019264:	6803      	ldr	r3, [r0, #0]
90019266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019268:	4798      	blx	r3
9001926a:	792b      	ldrb	r3, [r5, #4]
9001926c:	b10b      	cbz	r3, 90019272 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001926e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90019272:	b00a      	add	sp, #40	; 0x28
90019274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019278:	9002c040 	.word	0x9002c040

9001927c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
9001927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019280:	460c      	mov	r4, r1
90019282:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019284:	b088      	sub	sp, #32
90019286:	4605      	mov	r5, r0
90019288:	2900      	cmp	r1, #0
9001928a:	d06d      	beq.n	90019368 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
9001928c:	4668      	mov	r0, sp
9001928e:	f7ff fddf 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019292:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90019294:	88e3      	ldrh	r3, [r4, #6]
90019296:	f9bd 8000 	ldrsh.w	r8, [sp]
9001929a:	440b      	add	r3, r1
9001929c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
900192a0:	b21b      	sxth	r3, r3
900192a2:	4543      	cmp	r3, r8
900192a4:	db31      	blt.n	9001930a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900192a6:	f8bd c004 	ldrh.w	ip, [sp, #4]
900192aa:	44c4      	add	ip, r8
900192ac:	fa0f fc8c 	sxth.w	ip, ip
900192b0:	4563      	cmp	r3, ip
900192b2:	da2a      	bge.n	9001930a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900192b4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
900192b6:	8926      	ldrh	r6, [r4, #8]
900192b8:	4416      	add	r6, r2
900192ba:	b236      	sxth	r6, r6
900192bc:	42be      	cmp	r6, r7
900192be:	db24      	blt.n	9001930a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900192c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
900192c4:	4438      	add	r0, r7
900192c6:	b200      	sxth	r0, r0
900192c8:	4286      	cmp	r6, r0
900192ca:	da1e      	bge.n	9001930a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900192cc:	8963      	ldrh	r3, [r4, #10]
900192ce:	4419      	add	r1, r3
900192d0:	b209      	sxth	r1, r1
900192d2:	4541      	cmp	r1, r8
900192d4:	db08      	blt.n	900192e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900192d6:	4561      	cmp	r1, ip
900192d8:	da06      	bge.n	900192e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900192da:	89a3      	ldrh	r3, [r4, #12]
900192dc:	441a      	add	r2, r3
900192de:	b212      	sxth	r2, r2
900192e0:	42ba      	cmp	r2, r7
900192e2:	db01      	blt.n	900192e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900192e4:	4282      	cmp	r2, r0
900192e6:	db10      	blt.n	9001930a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900192e8:	4b21      	ldr	r3, [pc, #132]	; (90019370 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
900192ea:	a904      	add	r1, sp, #16
900192ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
900192ee:	9304      	str	r3, [sp, #16]
900192f0:	2302      	movs	r3, #2
900192f2:	f88d 3014 	strb.w	r3, [sp, #20]
900192f6:	2300      	movs	r3, #0
900192f8:	f8ad 3016 	strh.w	r3, [sp, #22]
900192fc:	f8ad 3018 	strh.w	r3, [sp, #24]
90019300:	f8ad 301a 	strh.w	r3, [sp, #26]
90019304:	6803      	ldr	r3, [r0, #0]
90019306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019308:	4798      	blx	r3
9001930a:	1d29      	adds	r1, r5, #4
9001930c:	a802      	add	r0, sp, #8
9001930e:	f7ff fd9f 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019312:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019316:	88e0      	ldrh	r0, [r4, #6]
90019318:	eba3 0808 	sub.w	r8, r3, r8
9001931c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019320:	7921      	ldrb	r1, [r4, #4]
90019322:	fa1f f888 	uxth.w	r8, r8
90019326:	1bdf      	subs	r7, r3, r7
90019328:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
9001932c:	b2bb      	uxth	r3, r7
9001932e:	4440      	add	r0, r8
90019330:	8922      	ldrh	r2, [r4, #8]
90019332:	8967      	ldrh	r7, [r4, #10]
90019334:	4460      	add	r0, ip
90019336:	89a4      	ldrh	r4, [r4, #12]
90019338:	441a      	add	r2, r3
9001933a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
9001933c:	44b8      	add	r8, r7
9001933e:	4423      	add	r3, r4
90019340:	f8ad 0016 	strh.w	r0, [sp, #22]
90019344:	4432      	add	r2, r6
90019346:	44e0      	add	r8, ip
90019348:	4433      	add	r3, r6
9001934a:	4c0a      	ldr	r4, [pc, #40]	; (90019374 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
9001934c:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001934e:	f88d 1014 	strb.w	r1, [sp, #20]
90019352:	a904      	add	r1, sp, #16
90019354:	9404      	str	r4, [sp, #16]
90019356:	f8ad 2018 	strh.w	r2, [sp, #24]
9001935a:	f8ad 801a 	strh.w	r8, [sp, #26]
9001935e:	f8ad 301c 	strh.w	r3, [sp, #28]
90019362:	6803      	ldr	r3, [r0, #0]
90019364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019366:	4798      	blx	r3
90019368:	b008      	add	sp, #32
9001936a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001936e:	bf00      	nop
90019370:	9002c040 	.word	0x9002c040
90019374:	9002c054 	.word	0x9002c054

90019378 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90019378:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001937a:	4604      	mov	r4, r0
9001937c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90019380:	3201      	adds	r2, #1
90019382:	d112      	bne.n	900193aa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90019384:	2500      	movs	r5, #0
90019386:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001938a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001938e:	6803      	ldr	r3, [r0, #0]
90019390:	9500      	str	r5, [sp, #0]
90019392:	466d      	mov	r5, sp
90019394:	f8ad 1004 	strh.w	r1, [sp, #4]
90019398:	f8ad 2006 	strh.w	r2, [sp, #6]
9001939c:	4629      	mov	r1, r5
9001939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900193a0:	4798      	blx	r3
900193a2:	e895 0003 	ldmia.w	r5, {r0, r1}
900193a6:	e884 0003 	stmia.w	r4, {r0, r1}
900193aa:	4620      	mov	r0, r4
900193ac:	b003      	add	sp, #12
900193ae:	bd30      	pop	{r4, r5, pc}

900193b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
900193b0:	b513      	push	{r0, r1, r4, lr}
900193b2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
900193b6:	4604      	mov	r4, r0
900193b8:	3301      	adds	r3, #1
900193ba:	d109      	bne.n	900193d0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
900193bc:	4601      	mov	r1, r0
900193be:	4668      	mov	r0, sp
900193c0:	f7ff fd46 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900193c4:	f8bd 3000 	ldrh.w	r3, [sp]
900193c8:	8423      	strh	r3, [r4, #32]
900193ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900193ce:	8463      	strh	r3, [r4, #34]	; 0x22
900193d0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
900193d4:	b002      	add	sp, #8
900193d6:	bd10      	pop	{r4, pc}

900193d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900193d8:	b513      	push	{r0, r1, r4, lr}
900193da:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
900193de:	4604      	mov	r4, r0
900193e0:	3301      	adds	r3, #1
900193e2:	d109      	bne.n	900193f8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900193e4:	4601      	mov	r1, r0
900193e6:	4668      	mov	r0, sp
900193e8:	f7ff fd32 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900193ec:	f8bd 3000 	ldrh.w	r3, [sp]
900193f0:	8423      	strh	r3, [r4, #32]
900193f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900193f6:	8463      	strh	r3, [r4, #34]	; 0x22
900193f8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
900193fc:	b002      	add	sp, #8
900193fe:	bd10      	pop	{r4, pc}

90019400 <_ZN8touchgfx6ScreenC1Ev>:
90019400:	b570      	push	{r4, r5, r6, lr}
90019402:	4b17      	ldr	r3, [pc, #92]	; (90019460 <_ZN8touchgfx6ScreenC1Ev+0x60>)
90019404:	4605      	mov	r5, r0
90019406:	4a17      	ldr	r2, [pc, #92]	; (90019464 <_ZN8touchgfx6ScreenC1Ev+0x64>)
90019408:	2101      	movs	r1, #1
9001940a:	f845 3b04 	str.w	r3, [r5], #4
9001940e:	2300      	movs	r3, #0
90019410:	6042      	str	r2, [r0, #4]
90019412:	4604      	mov	r4, r0
90019414:	8103      	strh	r3, [r0, #8]
90019416:	8143      	strh	r3, [r0, #10]
90019418:	8183      	strh	r3, [r0, #12]
9001941a:	81c3      	strh	r3, [r0, #14]
9001941c:	8203      	strh	r3, [r0, #16]
9001941e:	8243      	strh	r3, [r0, #18]
90019420:	8283      	strh	r3, [r0, #20]
90019422:	82c3      	strh	r3, [r0, #22]
90019424:	6203      	str	r3, [r0, #32]
90019426:	8483      	strh	r3, [r0, #36]	; 0x24
90019428:	84c3      	strh	r3, [r0, #38]	; 0x26
9001942a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
9001942e:	6343      	str	r3, [r0, #52]	; 0x34
90019430:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90019434:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90019438:	e9c0 3306 	strd	r3, r3, [r0, #24]
9001943c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90019440:	4b09      	ldr	r3, [pc, #36]	; (90019468 <_ZN8touchgfx6ScreenC1Ev+0x68>)
90019442:	4628      	mov	r0, r5
90019444:	f9b3 6000 	ldrsh.w	r6, [r3]
90019448:	6b93      	ldr	r3, [r2, #56]	; 0x38
9001944a:	4a08      	ldr	r2, [pc, #32]	; (9001946c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
9001944c:	f9b2 1000 	ldrsh.w	r1, [r2]
90019450:	4798      	blx	r3
90019452:	6863      	ldr	r3, [r4, #4]
90019454:	4628      	mov	r0, r5
90019456:	4631      	mov	r1, r6
90019458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001945a:	4798      	blx	r3
9001945c:	4620      	mov	r0, r4
9001945e:	bd70      	pop	{r4, r5, r6, pc}
90019460:	9002c07c 	.word	0x9002c07c
90019464:	9002b880 	.word	0x9002b880
90019468:	2402818a 	.word	0x2402818a
9001946c:	24028188 	.word	0x24028188

90019470 <_ZN8touchgfx6Screen4drawEv>:
90019470:	4b09      	ldr	r3, [pc, #36]	; (90019498 <_ZN8touchgfx6Screen4drawEv+0x28>)
90019472:	b507      	push	{r0, r1, r2, lr}
90019474:	f9b3 2000 	ldrsh.w	r2, [r3]
90019478:	2100      	movs	r1, #0
9001947a:	4b08      	ldr	r3, [pc, #32]	; (9001949c <_ZN8touchgfx6Screen4drawEv+0x2c>)
9001947c:	9100      	str	r1, [sp, #0]
9001947e:	4669      	mov	r1, sp
90019480:	f9b3 3000 	ldrsh.w	r3, [r3]
90019484:	f8ad 2004 	strh.w	r2, [sp, #4]
90019488:	f8ad 3006 	strh.w	r3, [sp, #6]
9001948c:	6803      	ldr	r3, [r0, #0]
9001948e:	689b      	ldr	r3, [r3, #8]
90019490:	4798      	blx	r3
90019492:	b003      	add	sp, #12
90019494:	f85d fb04 	ldr.w	pc, [sp], #4
90019498:	24028188 	.word	0x24028188
9001949c:	2402818a 	.word	0x2402818a

900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
900194a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900194a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
900194a8:	b089      	sub	sp, #36	; 0x24
900194aa:	4680      	mov	r8, r0
900194ac:	460c      	mov	r4, r1
900194ae:	2b00      	cmp	r3, #0
900194b0:	4615      	mov	r5, r2
900194b2:	dd0e      	ble.n	900194d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900194b4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
900194b8:	2b00      	cmp	r3, #0
900194ba:	dd0a      	ble.n	900194d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900194bc:	4628      	mov	r0, r5
900194be:	f7ff ff5b 	bl	90019378 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900194c2:	4621      	mov	r1, r4
900194c4:	f7fe fb01 	bl	90017aca <_ZNK8touchgfx4Rect9intersectERKS0_>
900194c8:	69eb      	ldr	r3, [r5, #28]
900194ca:	b928      	cbnz	r0, 900194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
900194cc:	461d      	mov	r5, r3
900194ce:	2b00      	cmp	r3, #0
900194d0:	d1f4      	bne.n	900194bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
900194d2:	b009      	add	sp, #36	; 0x24
900194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900194d8:	ae04      	add	r6, sp, #16
900194da:	2b00      	cmp	r3, #0
900194dc:	f000 80b5 	beq.w	9001964a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900194e0:	682b      	ldr	r3, [r5, #0]
900194e2:	4629      	mov	r1, r5
900194e4:	a802      	add	r0, sp, #8
900194e6:	68db      	ldr	r3, [r3, #12]
900194e8:	4798      	blx	r3
900194ea:	4628      	mov	r0, r5
900194ec:	f7ff ff60 	bl	900193b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900194f0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900194f4:	4407      	add	r7, r0
900194f6:	4628      	mov	r0, r5
900194f8:	f7ff ff6e 	bl	900193d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900194fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019500:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90019504:	b23f      	sxth	r7, r7
90019506:	4418      	add	r0, r3
90019508:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
9001950c:	4621      	mov	r1, r4
9001950e:	f8ad 2014 	strh.w	r2, [sp, #20]
90019512:	f8ad 0012 	strh.w	r0, [sp, #18]
90019516:	4630      	mov	r0, r6
90019518:	f8ad 3016 	strh.w	r3, [sp, #22]
9001951c:	f8ad 7010 	strh.w	r7, [sp, #16]
90019520:	f7f9 f9c8 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90019524:	4628      	mov	r0, r5
90019526:	f7ff ff27 	bl	90019378 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001952a:	ab06      	add	r3, sp, #24
9001952c:	4602      	mov	r2, r0
9001952e:	e896 0003 	ldmia.w	r6, {r0, r1}
90019532:	e883 0003 	stmia.w	r3, {r0, r1}
90019536:	4611      	mov	r1, r2
90019538:	4618      	mov	r0, r3
9001953a:	f7f9 f9bb 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001953e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90019542:	f9b4 1000 	ldrsh.w	r1, [r4]
90019546:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
9001954a:	4299      	cmp	r1, r3
9001954c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90019550:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90019554:	d10b      	bne.n	9001956e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019556:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001955a:	4552      	cmp	r2, sl
9001955c:	d107      	bne.n	9001956e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001955e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90019562:	455a      	cmp	r2, fp
90019564:	d103      	bne.n	9001956e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019566:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9001956a:	454a      	cmp	r2, r9
9001956c:	d06d      	beq.n	9001964a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001956e:	f1bb 0f00 	cmp.w	fp, #0
90019572:	dd65      	ble.n	90019640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019574:	f1b9 0f00 	cmp.w	r9, #0
90019578:	dd62      	ble.n	90019640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001957a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001957e:	fa1f f08a 	uxth.w	r0, sl
90019582:	4552      	cmp	r2, sl
90019584:	9000      	str	r0, [sp, #0]
90019586:	da12      	bge.n	900195ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90019588:	9301      	str	r3, [sp, #4]
9001958a:	9b00      	ldr	r3, [sp, #0]
9001958c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019590:	f8ad 2012 	strh.w	r2, [sp, #18]
90019594:	1a9a      	subs	r2, r3, r2
90019596:	f8ad 1010 	strh.w	r1, [sp, #16]
9001959a:	4631      	mov	r1, r6
9001959c:	f8ad 0014 	strh.w	r0, [sp, #20]
900195a0:	4640      	mov	r0, r8
900195a2:	f8ad 2016 	strh.w	r2, [sp, #22]
900195a6:	69ea      	ldr	r2, [r5, #28]
900195a8:	f7ff ff7a 	bl	900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900195ac:	9b01      	ldr	r3, [sp, #4]
900195ae:	f9b4 2000 	ldrsh.w	r2, [r4]
900195b2:	b29f      	uxth	r7, r3
900195b4:	429a      	cmp	r2, r3
900195b6:	da0d      	bge.n	900195d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
900195b8:	f8ad 2010 	strh.w	r2, [sp, #16]
900195bc:	1aba      	subs	r2, r7, r2
900195be:	f8ad a012 	strh.w	sl, [sp, #18]
900195c2:	4631      	mov	r1, r6
900195c4:	f8ad 2014 	strh.w	r2, [sp, #20]
900195c8:	4640      	mov	r0, r8
900195ca:	f8ad 9016 	strh.w	r9, [sp, #22]
900195ce:	69ea      	ldr	r2, [r5, #28]
900195d0:	f7ff ff66 	bl	900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900195d4:	8822      	ldrh	r2, [r4, #0]
900195d6:	445f      	add	r7, fp
900195d8:	88a3      	ldrh	r3, [r4, #4]
900195da:	b2bf      	uxth	r7, r7
900195dc:	4413      	add	r3, r2
900195de:	b23a      	sxth	r2, r7
900195e0:	b29b      	uxth	r3, r3
900195e2:	b219      	sxth	r1, r3
900195e4:	4291      	cmp	r1, r2
900195e6:	dd0d      	ble.n	90019604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
900195e8:	1bdb      	subs	r3, r3, r7
900195ea:	f8ad 2010 	strh.w	r2, [sp, #16]
900195ee:	f8ad a012 	strh.w	sl, [sp, #18]
900195f2:	4631      	mov	r1, r6
900195f4:	f8ad 3014 	strh.w	r3, [sp, #20]
900195f8:	4640      	mov	r0, r8
900195fa:	f8ad 9016 	strh.w	r9, [sp, #22]
900195fe:	69ea      	ldr	r2, [r5, #28]
90019600:	f7ff ff4e 	bl	900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019604:	88e2      	ldrh	r2, [r4, #6]
90019606:	8863      	ldrh	r3, [r4, #2]
90019608:	4413      	add	r3, r2
9001960a:	9a00      	ldr	r2, [sp, #0]
9001960c:	444a      	add	r2, r9
9001960e:	b29b      	uxth	r3, r3
90019610:	fa1f f982 	uxth.w	r9, r2
90019614:	b219      	sxth	r1, r3
90019616:	fa0f f289 	sxth.w	r2, r9
9001961a:	428a      	cmp	r2, r1
9001961c:	da15      	bge.n	9001964a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001961e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019622:	eba3 0309 	sub.w	r3, r3, r9
90019626:	f9b4 0000 	ldrsh.w	r0, [r4]
9001962a:	f8ad 1014 	strh.w	r1, [sp, #20]
9001962e:	4631      	mov	r1, r6
90019630:	f8ad 0010 	strh.w	r0, [sp, #16]
90019634:	f8ad 2012 	strh.w	r2, [sp, #18]
90019638:	f8ad 3016 	strh.w	r3, [sp, #22]
9001963c:	69ea      	ldr	r2, [r5, #28]
9001963e:	e001      	b.n	90019644 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90019640:	69ea      	ldr	r2, [r5, #28]
90019642:	4621      	mov	r1, r4
90019644:	4640      	mov	r0, r8
90019646:	f7ff ff2b 	bl	900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001964a:	4628      	mov	r0, r5
9001964c:	f7ff fe94 	bl	90019378 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019650:	6861      	ldr	r1, [r4, #4]
90019652:	4602      	mov	r2, r0
90019654:	4633      	mov	r3, r6
90019656:	6820      	ldr	r0, [r4, #0]
90019658:	c303      	stmia	r3!, {r0, r1}
9001965a:	4611      	mov	r1, r2
9001965c:	4630      	mov	r0, r6
9001965e:	f7f9 f929 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90019662:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90019666:	2b00      	cmp	r3, #0
90019668:	f77f af33 	ble.w	900194d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001966c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90019670:	2b00      	cmp	r3, #0
90019672:	f77f af2e 	ble.w	900194d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019676:	4628      	mov	r0, r5
90019678:	f7ff fe9a 	bl	900193b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
9001967c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90019680:	1a18      	subs	r0, r3, r0
90019682:	f8ad 0010 	strh.w	r0, [sp, #16]
90019686:	4628      	mov	r0, r5
90019688:	f7ff fea6 	bl	900193d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001968c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90019690:	4631      	mov	r1, r6
90019692:	1a18      	subs	r0, r3, r0
90019694:	f8ad 0012 	strh.w	r0, [sp, #18]
90019698:	4628      	mov	r0, r5
9001969a:	682b      	ldr	r3, [r5, #0]
9001969c:	689b      	ldr	r3, [r3, #8]
9001969e:	4798      	blx	r3
900196a0:	e717      	b.n	900194d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

900196a2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
900196a2:	b570      	push	{r4, r5, r6, lr}
900196a4:	1d06      	adds	r6, r0, #4
900196a6:	b086      	sub	sp, #24
900196a8:	460c      	mov	r4, r1
900196aa:	2300      	movs	r3, #0
900196ac:	4631      	mov	r1, r6
900196ae:	4605      	mov	r5, r0
900196b0:	a802      	add	r0, sp, #8
900196b2:	9301      	str	r3, [sp, #4]
900196b4:	f7ff fbcc 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900196b8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900196bc:	8822      	ldrh	r2, [r4, #0]
900196be:	f8bd 100a 	ldrh.w	r1, [sp, #10]
900196c2:	1ad2      	subs	r2, r2, r3
900196c4:	8863      	ldrh	r3, [r4, #2]
900196c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900196ca:	1a5b      	subs	r3, r3, r1
900196cc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
900196d0:	f8ad 2010 	strh.w	r2, [sp, #16]
900196d4:	aa01      	add	r2, sp, #4
900196d6:	f8ad 0014 	strh.w	r0, [sp, #20]
900196da:	4630      	mov	r0, r6
900196dc:	f8ad 1016 	strh.w	r1, [sp, #22]
900196e0:	a904      	add	r1, sp, #16
900196e2:	f8ad 3012 	strh.w	r3, [sp, #18]
900196e6:	f7f9 f9bd 	bl	90012a64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
900196ea:	9a01      	ldr	r2, [sp, #4]
900196ec:	b11a      	cbz	r2, 900196f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
900196ee:	4621      	mov	r1, r4
900196f0:	4628      	mov	r0, r5
900196f2:	f7ff fed5 	bl	900194a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900196f6:	b006      	add	sp, #24
900196f8:	bd70      	pop	{r4, r5, r6, pc}

900196fa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
900196fa:	4602      	mov	r2, r0
900196fc:	b530      	push	{r4, r5, lr}
900196fe:	4604      	mov	r4, r0
90019700:	b085      	sub	sp, #20
90019702:	f852 0f08 	ldr.w	r0, [r2, #8]!
90019706:	460d      	mov	r5, r1
90019708:	466b      	mov	r3, sp
9001970a:	6851      	ldr	r1, [r2, #4]
9001970c:	c303      	stmia	r3!, {r0, r1}
9001970e:	4629      	mov	r1, r5
90019710:	4668      	mov	r0, sp
90019712:	f7f9 f8cf 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
90019716:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001971a:	b12b      	cbz	r3, 90019728 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
9001971c:	4669      	mov	r1, sp
9001971e:	4620      	mov	r0, r4
90019720:	f7ff ffbf 	bl	900196a2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90019724:	b005      	add	sp, #20
90019726:	bd30      	pop	{r4, r5, pc}
90019728:	3404      	adds	r4, #4
9001972a:	a802      	add	r0, sp, #8
9001972c:	4621      	mov	r1, r4
9001972e:	f7ff fb8f 	bl	90018e50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019732:	f8bd 3000 	ldrh.w	r3, [sp]
90019736:	f8bd 2008 	ldrh.w	r2, [sp, #8]
9001973a:	4669      	mov	r1, sp
9001973c:	4620      	mov	r0, r4
9001973e:	1a9b      	subs	r3, r3, r2
90019740:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019744:	f8ad 3000 	strh.w	r3, [sp]
90019748:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001974c:	1a9b      	subs	r3, r3, r2
9001974e:	f8ad 3002 	strh.w	r3, [sp, #2]
90019752:	f7f9 f94e 	bl	900129f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90019756:	e7e5      	b.n	90019724 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90019758 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90019758:	460b      	mov	r3, r1
9001975a:	680a      	ldr	r2, [r1, #0]
9001975c:	1d01      	adds	r1, r0, #4
9001975e:	6992      	ldr	r2, [r2, #24]
90019760:	4618      	mov	r0, r3
90019762:	4710      	bx	r2

90019764 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
90019764:	4298      	cmp	r0, r3
90019766:	d200      	bcs.n	9001976a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
90019768:	b913      	cbnz	r3, 90019770 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
9001976a:	440a      	add	r2, r1
9001976c:	b210      	sxth	r0, r2
9001976e:	4770      	bx	lr
90019770:	ee07 0a90 	vmov	s15, r0
90019774:	eef8 6a67 	vcvt.f32.u32	s13, s15
90019778:	ee07 3a90 	vmov	s15, r3
9001977c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90019784:	ee07 2a90 	vmov	s15, r2
90019788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001978c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
90019790:	ee07 1a90 	vmov	s15, r1
90019794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019798:	ee37 7a66 	vsub.f32	s14, s14, s13
9001979c:	ee67 5a07 	vmul.f32	s11, s14, s14
900197a0:	eee5 6a87 	vfma.f32	s13, s11, s14
900197a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900197a8:	eee6 7a26 	vfma.f32	s15, s12, s13
900197ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900197b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900197b4:	bfcc      	ite	gt
900197b6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
900197ba:	ee77 7ac7 	vsuble.f32	s15, s15, s14
900197be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900197c2:	ee17 3a90 	vmov	r3, s15
900197c6:	b218      	sxth	r0, r3
900197c8:	4770      	bx	lr

900197ca <_ZN8touchgfx12TextProviderC1Ev>:
900197ca:	b538      	push	{r3, r4, r5, lr}
900197cc:	2500      	movs	r5, #0
900197ce:	2302      	movs	r3, #2
900197d0:	4604      	mov	r4, r0
900197d2:	220e      	movs	r2, #14
900197d4:	7403      	strb	r3, [r0, #16]
900197d6:	4629      	mov	r1, r5
900197d8:	6145      	str	r5, [r0, #20]
900197da:	7605      	strb	r5, [r0, #24]
900197dc:	83c5      	strh	r5, [r0, #30]
900197de:	8405      	strh	r5, [r0, #32]
900197e0:	86c5      	strh	r5, [r0, #54]	; 0x36
900197e2:	8705      	strh	r5, [r0, #56]	; 0x38
900197e4:	87c5      	strh	r5, [r0, #62]	; 0x3e
900197e6:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
900197ea:	e9c0 5500 	strd	r5, r5, [r0]
900197ee:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
900197f2:	304c      	adds	r0, #76	; 0x4c
900197f4:	f00d ff62 	bl	900276bc <memset>
900197f8:	2301      	movs	r3, #1
900197fa:	4620      	mov	r0, r4
900197fc:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90019800:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019804:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90019808:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
9001980c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90019810:	f7ee fa7a 	bl	90007d08 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90019814:	4620      	mov	r0, r4
90019816:	bd38      	pop	{r3, r4, r5, pc}

90019818 <_ZN8touchgfx12TextProvider11endOfStringEv>:
90019818:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001981a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001981e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
90019820:	fab0 f080 	clz	r0, r0
90019824:	0940      	lsrs	r0, r0, #5
90019826:	4770      	bx	lr

90019828 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90019828:	b530      	push	{r4, r5, lr}
9001982a:	2500      	movs	r5, #0
9001982c:	2401      	movs	r4, #1
9001982e:	6843      	ldr	r3, [r0, #4]
90019830:	b913      	cbnz	r3, 90019838 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90019832:	6803      	ldr	r3, [r0, #0]
90019834:	b313      	cbz	r3, 9001987c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019836:	6043      	str	r3, [r0, #4]
90019838:	7e03      	ldrb	r3, [r0, #24]
9001983a:	b143      	cbz	r3, 9001984e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
9001983c:	6943      	ldr	r3, [r0, #20]
9001983e:	b12b      	cbz	r3, 9001984c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019840:	881a      	ldrh	r2, [r3, #0]
90019842:	b11a      	cbz	r2, 9001984c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019844:	1c9a      	adds	r2, r3, #2
90019846:	6142      	str	r2, [r0, #20]
90019848:	8818      	ldrh	r0, [r3, #0]
9001984a:	bd30      	pop	{r4, r5, pc}
9001984c:	7605      	strb	r5, [r0, #24]
9001984e:	6843      	ldr	r3, [r0, #4]
90019850:	8819      	ldrh	r1, [r3, #0]
90019852:	b199      	cbz	r1, 9001987c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019854:	1c9a      	adds	r2, r3, #2
90019856:	2902      	cmp	r1, #2
90019858:	6042      	str	r2, [r0, #4]
9001985a:	d1f5      	bne.n	90019848 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
9001985c:	7c03      	ldrb	r3, [r0, #16]
9001985e:	2b01      	cmp	r3, #1
90019860:	d8e5      	bhi.n	9001982e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019862:	1c5a      	adds	r2, r3, #1
90019864:	3302      	adds	r3, #2
90019866:	7402      	strb	r2, [r0, #16]
90019868:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
9001986c:	6143      	str	r3, [r0, #20]
9001986e:	2b00      	cmp	r3, #0
90019870:	d0dd      	beq.n	9001982e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019872:	881b      	ldrh	r3, [r3, #0]
90019874:	2b00      	cmp	r3, #0
90019876:	d0da      	beq.n	9001982e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019878:	7604      	strb	r4, [r0, #24]
9001987a:	e7d8      	b.n	9001982e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001987c:	2000      	movs	r0, #0
9001987e:	e7e4      	b.n	9001984a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90019880:	6001      	str	r1, [r0, #0]
90019882:	2100      	movs	r1, #0
90019884:	b430      	push	{r4, r5}
90019886:	6041      	str	r1, [r0, #4]
90019888:	6815      	ldr	r5, [r2, #0]
9001988a:	6085      	str	r5, [r0, #8]
9001988c:	6852      	ldr	r2, [r2, #4]
9001988e:	6443      	str	r3, [r0, #68]	; 0x44
90019890:	9b02      	ldr	r3, [sp, #8]
90019892:	60c2      	str	r2, [r0, #12]
90019894:	7401      	strb	r1, [r0, #16]
90019896:	6141      	str	r1, [r0, #20]
90019898:	7601      	strb	r1, [r0, #24]
9001989a:	8701      	strh	r1, [r0, #56]	; 0x38
9001989c:	8401      	strh	r1, [r0, #32]
9001989e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
900198a2:	6483      	str	r3, [r0, #72]	; 0x48
900198a4:	bc30      	pop	{r4, r5}
900198a6:	f7ee ba2f 	b.w	90007d08 <_ZN8touchgfx12TextProvider18initializeInternalEv>

900198aa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
900198aa:	b408      	push	{r3}
900198ac:	b510      	push	{r4, lr}
900198ae:	b085      	sub	sp, #20
900198b0:	ac07      	add	r4, sp, #28
900198b2:	f854 3b04 	ldr.w	r3, [r4], #4
900198b6:	9300      	str	r3, [sp, #0]
900198b8:	4613      	mov	r3, r2
900198ba:	4622      	mov	r2, r4
900198bc:	9403      	str	r4, [sp, #12]
900198be:	f7ff ffdf 	bl	90019880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900198c2:	b005      	add	sp, #20
900198c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900198c8:	b001      	add	sp, #4
900198ca:	4770      	bx	lr

900198cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
900198cc:	b5f0      	push	{r4, r5, r6, r7, lr}
900198ce:	4605      	mov	r5, r0
900198d0:	4608      	mov	r0, r1
900198d2:	b1f1      	cbz	r1, 90019912 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
900198d4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
900198d8:	460b      	mov	r3, r1
900198da:	f101 0708 	add.w	r7, r1, #8
900198de:	4622      	mov	r2, r4
900198e0:	6818      	ldr	r0, [r3, #0]
900198e2:	3308      	adds	r3, #8
900198e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
900198e8:	4626      	mov	r6, r4
900198ea:	42bb      	cmp	r3, r7
900198ec:	c603      	stmia	r6!, {r0, r1}
900198ee:	4634      	mov	r4, r6
900198f0:	d1f6      	bne.n	900198e0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
900198f2:	6818      	ldr	r0, [r3, #0]
900198f4:	6030      	str	r0, [r6, #0]
900198f6:	4610      	mov	r0, r2
900198f8:	889b      	ldrh	r3, [r3, #4]
900198fa:	80b3      	strh	r3, [r6, #4]
900198fc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90019900:	015b      	lsls	r3, r3, #5
90019902:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019906:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
9001990a:	430b      	orrs	r3, r1
9001990c:	425b      	negs	r3, r3
9001990e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90019912:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019914 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90019914:	b538      	push	{r3, r4, r5, lr}
90019916:	460c      	mov	r4, r1
90019918:	6811      	ldr	r1, [r2, #0]
9001991a:	4610      	mov	r0, r2
9001991c:	68cd      	ldr	r5, [r1, #12]
9001991e:	4619      	mov	r1, r3
90019920:	47a8      	blx	r5
90019922:	2800      	cmp	r0, #0
90019924:	bf08      	it	eq
90019926:	4620      	moveq	r0, r4
90019928:	bd38      	pop	{r3, r4, r5, pc}
	...

9001992c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
9001992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001992e:	4604      	mov	r4, r0
90019930:	4615      	mov	r5, r2
90019932:	4608      	mov	r0, r1
90019934:	b93a      	cbnz	r2, 90019946 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90019936:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001993a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
9001993e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90019942:	4628      	mov	r0, r5
90019944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90019946:	f892 c00d 	ldrb.w	ip, [r2, #13]
9001994a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
9001994e:	8893      	ldrh	r3, [r2, #4]
90019950:	ea4f 160c 	mov.w	r6, ip, lsl #4
90019954:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019958:	79ee      	ldrb	r6, [r5, #7]
9001995a:	4316      	orrs	r6, r2
9001995c:	19da      	adds	r2, r3, r7
9001995e:	b291      	uxth	r1, r2
90019960:	b2b7      	uxth	r7, r6
90019962:	291d      	cmp	r1, #29
90019964:	d87b      	bhi.n	90019a5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019966:	2201      	movs	r2, #1
90019968:	10f6      	asrs	r6, r6, #3
9001996a:	408a      	lsls	r2, r1
9001996c:	4974      	ldr	r1, [pc, #464]	; (90019b40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
9001996e:	420a      	tst	r2, r1
90019970:	d12e      	bne.n	900199d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90019972:	f412 7f60 	tst.w	r2, #896	; 0x380
90019976:	d072      	beq.n	90019a5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019978:	f104 024c 	add.w	r2, r4, #76	; 0x4c
9001997c:	462b      	mov	r3, r5
9001997e:	f105 0e08 	add.w	lr, r5, #8
90019982:	4615      	mov	r5, r2
90019984:	6818      	ldr	r0, [r3, #0]
90019986:	3308      	adds	r3, #8
90019988:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001998c:	4694      	mov	ip, r2
9001998e:	4573      	cmp	r3, lr
90019990:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019994:	4662      	mov	r2, ip
90019996:	d1f5      	bne.n	90019984 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90019998:	6818      	ldr	r0, [r3, #0]
9001999a:	f8cc 0000 	str.w	r0, [ip]
9001999e:	889b      	ldrh	r3, [r3, #4]
900199a0:	f8ac 3004 	strh.w	r3, [ip, #4]
900199a4:	b2b3      	uxth	r3, r6
900199a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900199aa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
900199ae:	1aca      	subs	r2, r1, r3
900199b0:	1bcf      	subs	r7, r1, r7
900199b2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
900199b6:	b292      	uxth	r2, r2
900199b8:	1afb      	subs	r3, r7, r3
900199ba:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
900199be:	10d2      	asrs	r2, r2, #3
900199c0:	f002 0260 	and.w	r2, r2, #96	; 0x60
900199c4:	4302      	orrs	r2, r0
900199c6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
900199ca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
900199ce:	e7b8      	b.n	90019942 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900199d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
900199d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900199d6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
900199d8:	f640 6333 	movw	r3, #3635	; 0xe33
900199dc:	4299      	cmp	r1, r3
900199de:	d110      	bne.n	90019a02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
900199e0:	6803      	ldr	r3, [r0, #0]
900199e2:	68db      	ldr	r3, [r3, #12]
900199e4:	4798      	blx	r3
900199e6:	7b41      	ldrb	r1, [r0, #13]
900199e8:	00cb      	lsls	r3, r1, #3
900199ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
900199ee:	7a03      	ldrb	r3, [r0, #8]
900199f0:	0648      	lsls	r0, r1, #25
900199f2:	ea43 0302 	orr.w	r3, r3, r2
900199f6:	bf44      	itt	mi
900199f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900199fc:	b21b      	sxthmi	r3, r3
900199fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019a02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90019a06:	462a      	mov	r2, r5
90019a08:	f105 0c08 	add.w	ip, r5, #8
90019a0c:	443b      	add	r3, r7
90019a0e:	4433      	add	r3, r6
90019a10:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90019a14:	b29b      	uxth	r3, r3
90019a16:	4635      	mov	r5, r6
90019a18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019a1c:	6810      	ldr	r0, [r2, #0]
90019a1e:	3208      	adds	r2, #8
90019a20:	f852 1c04 	ldr.w	r1, [r2, #-4]
90019a24:	4637      	mov	r7, r6
90019a26:	4562      	cmp	r2, ip
90019a28:	c703      	stmia	r7!, {r0, r1}
90019a2a:	463e      	mov	r6, r7
90019a2c:	d1f6      	bne.n	90019a1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90019a2e:	6810      	ldr	r0, [r2, #0]
90019a30:	6038      	str	r0, [r7, #0]
90019a32:	8892      	ldrh	r2, [r2, #4]
90019a34:	80ba      	strh	r2, [r7, #4]
90019a36:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019a3a:	10db      	asrs	r3, r3, #3
90019a3c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019a44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019a48:	4313      	orrs	r3, r2
90019a4a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90019a4e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019a52:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90019a56:	1a9b      	subs	r3, r3, r2
90019a58:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90019a5c:	e771      	b.n	90019942 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019a5e:	f023 0204 	bic.w	r2, r3, #4
90019a62:	f640 611b 	movw	r1, #3611	; 0xe1b
90019a66:	428a      	cmp	r2, r1
90019a68:	d003      	beq.n	90019a72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90019a6a:	f640 621d 	movw	r2, #3613	; 0xe1d
90019a6e:	4293      	cmp	r3, r2
90019a70:	d120      	bne.n	90019ab4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90019a72:	3b01      	subs	r3, #1
90019a74:	4602      	mov	r2, r0
90019a76:	4629      	mov	r1, r5
90019a78:	4620      	mov	r0, r4
90019a7a:	b29b      	uxth	r3, r3
90019a7c:	f7ff ff4a 	bl	90019914 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019a80:	7b41      	ldrb	r1, [r0, #13]
90019a82:	00cb      	lsls	r3, r1, #3
90019a84:	0649      	lsls	r1, r1, #25
90019a86:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019a8a:	7a03      	ldrb	r3, [r0, #8]
90019a8c:	ea43 0302 	orr.w	r3, r3, r2
90019a90:	bf44      	itt	mi
90019a92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019a96:	b21b      	sxthmi	r3, r3
90019a98:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019a9c:	7b6b      	ldrb	r3, [r5, #13]
90019a9e:	7aaa      	ldrb	r2, [r5, #10]
90019aa0:	005b      	lsls	r3, r3, #1
90019aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019aa6:	4313      	orrs	r3, r2
90019aa8:	115a      	asrs	r2, r3, #5
90019aaa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90019aae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019ab2:	e035      	b.n	90019b20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90019ab4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90019ab8:	f01c 0f40 	tst.w	ip, #64	; 0x40
90019abc:	f402 7180 	and.w	r1, r2, #256	; 0x100
90019ac0:	7a2a      	ldrb	r2, [r5, #8]
90019ac2:	ea42 0201 	orr.w	r2, r2, r1
90019ac6:	f640 6109 	movw	r1, #3593	; 0xe09
90019aca:	bf1c      	itt	ne
90019acc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90019ad0:	b212      	sxthne	r2, r2
90019ad2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019ad6:	f023 0210 	bic.w	r2, r3, #16
90019ada:	428a      	cmp	r2, r1
90019adc:	d003      	beq.n	90019ae6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90019ade:	f640 6213 	movw	r2, #3603	; 0xe13
90019ae2:	4293      	cmp	r3, r2
90019ae4:	d129      	bne.n	90019b3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90019ae6:	7b6e      	ldrb	r6, [r5, #13]
90019ae8:	4629      	mov	r1, r5
90019aea:	0076      	lsls	r6, r6, #1
90019aec:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019af0:	7aae      	ldrb	r6, [r5, #10]
90019af2:	4316      	orrs	r6, r2
90019af4:	f640 6213 	movw	r2, #3603	; 0xe13
90019af8:	4293      	cmp	r3, r2
90019afa:	4602      	mov	r2, r0
90019afc:	4620      	mov	r0, r4
90019afe:	bf16      	itet	ne
90019b00:	f103 33ff 	addne.w	r3, r3, #4294967295
90019b04:	f640 630c 	movweq	r3, #3596	; 0xe0c
90019b08:	b29b      	uxthne	r3, r3
90019b0a:	f7ff ff03 	bl	90019914 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019b0e:	7b43      	ldrb	r3, [r0, #13]
90019b10:	7a82      	ldrb	r2, [r0, #10]
90019b12:	005b      	lsls	r3, r3, #1
90019b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019b18:	4313      	orrs	r3, r2
90019b1a:	1af6      	subs	r6, r6, r3
90019b1c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90019b20:	7b69      	ldrb	r1, [r5, #13]
90019b22:	00cb      	lsls	r3, r1, #3
90019b24:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019b28:	7a2b      	ldrb	r3, [r5, #8]
90019b2a:	4313      	orrs	r3, r2
90019b2c:	064a      	lsls	r2, r1, #25
90019b2e:	bf44      	itt	mi
90019b30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019b34:	b21b      	sxthmi	r3, r3
90019b36:	1bdb      	subs	r3, r3, r7
90019b38:	e747      	b.n	900199ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90019b3a:	2300      	movs	r3, #0
90019b3c:	e7b7      	b.n	90019aae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90019b3e:	bf00      	nop
90019b40:	3fc00079 	.word	0x3fc00079

90019b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90019b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90019b48:	4604      	mov	r4, r0
90019b4a:	b942      	cbnz	r2, 90019b5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90019b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90019b50:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90019b54:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90019b58:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019b5c:	e047      	b.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90019b5e:	7b51      	ldrb	r1, [r2, #13]
90019b60:	8893      	ldrh	r3, [r2, #4]
90019b62:	010d      	lsls	r5, r1, #4
90019b64:	f405 7080 	and.w	r0, r5, #256	; 0x100
90019b68:	79d5      	ldrb	r5, [r2, #7]
90019b6a:	4305      	orrs	r5, r0
90019b6c:	2d04      	cmp	r5, #4
90019b6e:	bfcc      	ite	gt
90019b70:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90019b74:	f04f 0e01 	movle.w	lr, #1
90019b78:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90019b7c:	f200 80ab 	bhi.w	90019cd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90019b80:	f240 60e7 	movw	r0, #1767	; 0x6e7
90019b84:	4283      	cmp	r3, r0
90019b86:	d216      	bcs.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b88:	f240 605b 	movw	r0, #1627	; 0x65b
90019b8c:	4283      	cmp	r3, r0
90019b8e:	d859      	bhi.n	90019c44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90019b90:	f240 6057 	movw	r0, #1623	; 0x657
90019b94:	4283      	cmp	r3, r0
90019b96:	d20e      	bcs.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b98:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90019b9c:	d24a      	bcs.n	90019c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90019b9e:	f240 604e 	movw	r0, #1614	; 0x64e
90019ba2:	4283      	cmp	r3, r0
90019ba4:	d207      	bcs.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019ba6:	f240 601a 	movw	r0, #1562	; 0x61a
90019baa:	4283      	cmp	r3, r0
90019bac:	d02a      	beq.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019bae:	d821      	bhi.n	90019bf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90019bb0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90019bb4:	d35b      	bcc.n	90019c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019bb6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90019bba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019bbe:	f040 80d0 	bne.w	90019d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90019bc2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90019bc6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019bca:	f040 80ca 	bne.w	90019d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90019bce:	00cb      	lsls	r3, r1, #3
90019bd0:	0649      	lsls	r1, r1, #25
90019bd2:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019bd6:	7a13      	ldrb	r3, [r2, #8]
90019bd8:	ea43 0300 	orr.w	r3, r3, r0
90019bdc:	bf44      	itt	mi
90019bde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019be2:	b21b      	sxthmi	r3, r3
90019be4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019be8:	1b5d      	subs	r5, r3, r5
90019bea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019bee:	4610      	mov	r0, r2
90019bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90019bf4:	f240 604b 	movw	r0, #1611	; 0x64b
90019bf8:	4283      	cmp	r3, r0
90019bfa:	d338      	bcc.n	90019c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019bfc:	f240 604c 	movw	r0, #1612	; 0x64c
90019c00:	4283      	cmp	r3, r0
90019c02:	d9d8      	bls.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c04:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90019c08:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90019c0c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019c10:	f040 80f3 	bne.w	90019dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90019c14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019c18:	f040 80ef 	bne.w	90019dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90019c1c:	00cb      	lsls	r3, r1, #3
90019c1e:	064e      	lsls	r6, r1, #25
90019c20:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019c24:	7a13      	ldrb	r3, [r2, #8]
90019c26:	ea43 0300 	orr.w	r3, r3, r0
90019c2a:	bf44      	itt	mi
90019c2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019c30:	b21b      	sxthmi	r3, r3
90019c32:	e7d9      	b.n	90019be8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90019c34:	f240 6054 	movw	r0, #1620	; 0x654
90019c38:	4283      	cmp	r3, r0
90019c3a:	d8e3      	bhi.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c3c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90019c40:	d9e0      	bls.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c42:	e7b8      	b.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c44:	f240 6074 	movw	r0, #1652	; 0x674
90019c48:	4283      	cmp	r3, r0
90019c4a:	d0b4      	beq.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c4c:	d82d      	bhi.n	90019caa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90019c4e:	f240 605e 	movw	r0, #1630	; 0x65e
90019c52:	4283      	cmp	r3, r0
90019c54:	d804      	bhi.n	90019c60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90019c56:	f240 605d 	movw	r0, #1629	; 0x65d
90019c5a:	4283      	cmp	r3, r0
90019c5c:	d3d2      	bcc.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c5e:	e7aa      	b.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c60:	f240 605f 	movw	r0, #1631	; 0x65f
90019c64:	4283      	cmp	r3, r0
90019c66:	d0cd      	beq.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c68:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90019c6c:	d0a3      	beq.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c6e:	00cb      	lsls	r3, r1, #3
90019c70:	0649      	lsls	r1, r1, #25
90019c72:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019c76:	7a13      	ldrb	r3, [r2, #8]
90019c78:	ea43 0300 	orr.w	r3, r3, r0
90019c7c:	bf44      	itt	mi
90019c7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019c82:	b21b      	sxthmi	r3, r3
90019c84:	1b5d      	subs	r5, r3, r5
90019c86:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019c8a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019c8e:	7b53      	ldrb	r3, [r2, #13]
90019c90:	015b      	lsls	r3, r3, #5
90019c92:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019c96:	7993      	ldrb	r3, [r2, #6]
90019c98:	430b      	orrs	r3, r1
90019c9a:	2105      	movs	r1, #5
90019c9c:	005b      	lsls	r3, r3, #1
90019c9e:	fb93 f3f1 	sdiv	r3, r3, r1
90019ca2:	f992 1009 	ldrsb.w	r1, [r2, #9]
90019ca6:	440b      	add	r3, r1
90019ca8:	e756      	b.n	90019b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90019caa:	f240 60e2 	movw	r0, #1762	; 0x6e2
90019cae:	4283      	cmp	r3, r0
90019cb0:	d809      	bhi.n	90019cc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90019cb2:	f240 60df 	movw	r0, #1759	; 0x6df
90019cb6:	4283      	cmp	r3, r0
90019cb8:	f4bf af7d 	bcs.w	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019cbc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90019cc0:	2b05      	cmp	r3, #5
90019cc2:	d8d4      	bhi.n	90019c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019cc4:	e777      	b.n	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019cc6:	f240 60e3 	movw	r0, #1763	; 0x6e3
90019cca:	4283      	cmp	r3, r0
90019ccc:	d09a      	beq.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019cce:	f240 60e4 	movw	r0, #1764	; 0x6e4
90019cd2:	4283      	cmp	r3, r0
90019cd4:	e7ca      	b.n	90019c6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90019cd6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90019cda:	d22b      	bcs.n	90019d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90019cdc:	f640 00ed 	movw	r0, #2285	; 0x8ed
90019ce0:	4283      	cmp	r3, r0
90019ce2:	d28f      	bcs.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019ce4:	f640 00e5 	movw	r0, #2277	; 0x8e5
90019ce8:	4283      	cmp	r3, r0
90019cea:	d816      	bhi.n	90019d1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90019cec:	f640 00e4 	movw	r0, #2276	; 0x8e4
90019cf0:	4283      	cmp	r3, r0
90019cf2:	f4bf af60 	bcs.w	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019cf6:	f240 60ec 	movw	r0, #1772	; 0x6ec
90019cfa:	4283      	cmp	r3, r0
90019cfc:	d80a      	bhi.n	90019d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90019cfe:	f240 60eb 	movw	r0, #1771	; 0x6eb
90019d02:	4283      	cmp	r3, r0
90019d04:	f4bf af57 	bcs.w	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019d08:	f240 60ea 	movw	r0, #1770	; 0x6ea
90019d0c:	4283      	cmp	r3, r0
90019d0e:	f43f af79 	beq.w	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019d12:	e7ac      	b.n	90019c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019d14:	f240 60ed 	movw	r0, #1773	; 0x6ed
90019d18:	e7f8      	b.n	90019d0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90019d1a:	f640 00e8 	movw	r0, #2280	; 0x8e8
90019d1e:	4283      	cmp	r3, r0
90019d20:	d802      	bhi.n	90019d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90019d22:	f640 00e7 	movw	r0, #2279	; 0x8e7
90019d26:	e798      	b.n	90019c5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90019d28:	f640 00e9 	movw	r0, #2281	; 0x8e9
90019d2c:	4283      	cmp	r3, r0
90019d2e:	f47f af42 	bne.w	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019d32:	e767      	b.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019d34:	f640 00f6 	movw	r0, #2294	; 0x8f6
90019d38:	4283      	cmp	r3, r0
90019d3a:	f43f af63 	beq.w	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019d3e:	d802      	bhi.n	90019d46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90019d40:	f640 00f2 	movw	r0, #2290	; 0x8f2
90019d44:	e7f2      	b.n	90019d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90019d46:	f640 00fa 	movw	r0, #2298	; 0x8fa
90019d4a:	4283      	cmp	r3, r0
90019d4c:	d805      	bhi.n	90019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90019d4e:	f640 00f9 	movw	r0, #2297	; 0x8f9
90019d52:	4283      	cmp	r3, r0
90019d54:	f4ff af2f 	bcc.w	90019bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019d58:	e754      	b.n	90019c04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019d5a:	f640 00fe 	movw	r0, #2302	; 0x8fe
90019d5e:	4283      	cmp	r3, r0
90019d60:	e7af      	b.n	90019cc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90019d62:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90019d66:	4617      	mov	r7, r2
90019d68:	f102 0808 	add.w	r8, r2, #8
90019d6c:	4666      	mov	r6, ip
90019d6e:	6838      	ldr	r0, [r7, #0]
90019d70:	3708      	adds	r7, #8
90019d72:	f857 1c04 	ldr.w	r1, [r7, #-4]
90019d76:	46e6      	mov	lr, ip
90019d78:	4547      	cmp	r7, r8
90019d7a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90019d7e:	46f4      	mov	ip, lr
90019d80:	d1f5      	bne.n	90019d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90019d82:	6838      	ldr	r0, [r7, #0]
90019d84:	f8ce 0000 	str.w	r0, [lr]
90019d88:	88b9      	ldrh	r1, [r7, #4]
90019d8a:	f8ae 1004 	strh.w	r1, [lr, #4]
90019d8e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90019d92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019d96:	d009      	beq.n	90019dac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90019d98:	7b51      	ldrb	r1, [r2, #13]
90019d9a:	7992      	ldrb	r2, [r2, #6]
90019d9c:	0149      	lsls	r1, r1, #5
90019d9e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019da2:	4311      	orrs	r1, r2
90019da4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90019da8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90019dac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019db0:	b2ad      	uxth	r5, r5
90019db2:	d00d      	beq.n	90019dd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90019db4:	442b      	add	r3, r5
90019db6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019dba:	b29b      	uxth	r3, r3
90019dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019dc0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019dc4:	10db      	asrs	r3, r3, #3
90019dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019dca:	4313      	orrs	r3, r2
90019dcc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019dd0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90019dd4:	00cb      	lsls	r3, r1, #3
90019dd6:	064f      	lsls	r7, r1, #25
90019dd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019ddc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90019de0:	ea43 0302 	orr.w	r3, r3, r2
90019de4:	bf44      	itt	mi
90019de6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019dea:	b21b      	sxthmi	r3, r3
90019dec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019df0:	1b5b      	subs	r3, r3, r5
90019df2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90019df6:	4632      	mov	r2, r6
90019df8:	e6f9      	b.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90019dfa:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90019dfe:	4617      	mov	r7, r2
90019e00:	f102 0908 	add.w	r9, r2, #8
90019e04:	4666      	mov	r6, ip
90019e06:	6838      	ldr	r0, [r7, #0]
90019e08:	3708      	adds	r7, #8
90019e0a:	f857 1c04 	ldr.w	r1, [r7, #-4]
90019e0e:	46e0      	mov	r8, ip
90019e10:	454f      	cmp	r7, r9
90019e12:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90019e16:	46c4      	mov	ip, r8
90019e18:	d1f5      	bne.n	90019e06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90019e1a:	6838      	ldr	r0, [r7, #0]
90019e1c:	f8c8 0000 	str.w	r0, [r8]
90019e20:	88b9      	ldrh	r1, [r7, #4]
90019e22:	f8a8 1004 	strh.w	r1, [r8, #4]
90019e26:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90019e2a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019e2e:	d009      	beq.n	90019e44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90019e30:	7b51      	ldrb	r1, [r2, #13]
90019e32:	7992      	ldrb	r2, [r2, #6]
90019e34:	0149      	lsls	r1, r1, #5
90019e36:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019e3a:	4311      	orrs	r1, r2
90019e3c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90019e40:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90019e44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019e48:	d00e      	beq.n	90019e68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90019e4a:	eba3 030e 	sub.w	r3, r3, lr
90019e4e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019e52:	b29b      	uxth	r3, r3
90019e54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019e58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019e5c:	10db      	asrs	r3, r3, #3
90019e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019e62:	4313      	orrs	r3, r2
90019e64:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019e68:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90019e6c:	00cb      	lsls	r3, r1, #3
90019e6e:	0648      	lsls	r0, r1, #25
90019e70:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019e74:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90019e78:	ea43 0302 	orr.w	r3, r3, r2
90019e7c:	bf44      	itt	mi
90019e7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019e82:	b21b      	sxthmi	r3, r3
90019e84:	1b5d      	subs	r5, r3, r5
90019e86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019e8a:	e7b4      	b.n	90019df6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90019e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90019e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019e90:	461e      	mov	r6, r3
90019e92:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019e94:	4604      	mov	r4, r0
90019e96:	4617      	mov	r7, r2
90019e98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019e9c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90019ea0:	f7ed fee2 	bl	90007c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90019ea4:	4605      	mov	r5, r0
90019ea6:	b918      	cbnz	r0, 90019eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90019ea8:	6030      	str	r0, [r6, #0]
90019eaa:	4628      	mov	r0, r5
90019eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019eb0:	683b      	ldr	r3, [r7, #0]
90019eb2:	4601      	mov	r1, r0
90019eb4:	4638      	mov	r0, r7
90019eb6:	68db      	ldr	r3, [r3, #12]
90019eb8:	4798      	blx	r3
90019eba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90019ebe:	4602      	mov	r2, r0
90019ec0:	6030      	str	r0, [r6, #0]
90019ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90019ec6:	d213      	bcs.n	90019ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90019ec8:	4643      	mov	r3, r8
90019eca:	4639      	mov	r1, r7
90019ecc:	4620      	mov	r0, r4
90019ece:	f7ff fe39 	bl	90019b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90019ed2:	6030      	str	r0, [r6, #0]
90019ed4:	6833      	ldr	r3, [r6, #0]
90019ed6:	b143      	cbz	r3, 90019eea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90019ed8:	7b5a      	ldrb	r2, [r3, #13]
90019eda:	7a9b      	ldrb	r3, [r3, #10]
90019edc:	0052      	lsls	r2, r2, #1
90019ede:	f402 7280 	and.w	r2, r2, #256	; 0x100
90019ee2:	4313      	orrs	r3, r2
90019ee4:	bf0c      	ite	eq
90019ee6:	2301      	moveq	r3, #1
90019ee8:	2300      	movne	r3, #0
90019eea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90019eee:	e7dc      	b.n	90019eaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90019ef0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90019ef4:	b29b      	uxth	r3, r3
90019ef6:	2b7f      	cmp	r3, #127	; 0x7f
90019ef8:	d804      	bhi.n	90019f04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90019efa:	4639      	mov	r1, r7
90019efc:	4620      	mov	r0, r4
90019efe:	f7ff fd15 	bl	9001992c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90019f02:	e7e6      	b.n	90019ed2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90019f04:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90019f08:	2b00      	cmp	r3, #0
90019f0a:	d0e3      	beq.n	90019ed4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90019f0c:	f640 1302 	movw	r3, #2306	; 0x902
90019f10:	429d      	cmp	r5, r3
90019f12:	d1df      	bne.n	90019ed4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90019f14:	4601      	mov	r1, r0
90019f16:	4620      	mov	r0, r4
90019f18:	f7ff fcd8 	bl	900198cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90019f1c:	e7d9      	b.n	90019ed2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90019f1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90019f1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90019f22:	461e      	mov	r6, r3
90019f24:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019f26:	4604      	mov	r4, r0
90019f28:	4617      	mov	r7, r2
90019f2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019f2e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90019f32:	f7ed fe99 	bl	90007c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90019f36:	4605      	mov	r5, r0
90019f38:	b918      	cbnz	r0, 90019f42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90019f3a:	6030      	str	r0, [r6, #0]
90019f3c:	4628      	mov	r0, r5
90019f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90019f42:	683b      	ldr	r3, [r7, #0]
90019f44:	4601      	mov	r1, r0
90019f46:	4638      	mov	r0, r7
90019f48:	f8d3 9008 	ldr.w	r9, [r3, #8]
90019f4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90019f50:	47c8      	blx	r9
90019f52:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90019f56:	4602      	mov	r2, r0
90019f58:	6030      	str	r0, [r6, #0]
90019f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90019f5e:	d213      	bcs.n	90019f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90019f60:	4643      	mov	r3, r8
90019f62:	4639      	mov	r1, r7
90019f64:	4620      	mov	r0, r4
90019f66:	f7ff fded 	bl	90019b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90019f6a:	6030      	str	r0, [r6, #0]
90019f6c:	6833      	ldr	r3, [r6, #0]
90019f6e:	b143      	cbz	r3, 90019f82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90019f70:	7b5a      	ldrb	r2, [r3, #13]
90019f72:	7a9b      	ldrb	r3, [r3, #10]
90019f74:	0052      	lsls	r2, r2, #1
90019f76:	f402 7280 	and.w	r2, r2, #256	; 0x100
90019f7a:	4313      	orrs	r3, r2
90019f7c:	bf0c      	ite	eq
90019f7e:	2301      	moveq	r3, #1
90019f80:	2300      	movne	r3, #0
90019f82:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90019f86:	e7d9      	b.n	90019f3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90019f88:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90019f8c:	b29b      	uxth	r3, r3
90019f8e:	2b7f      	cmp	r3, #127	; 0x7f
90019f90:	d804      	bhi.n	90019f9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90019f92:	4639      	mov	r1, r7
90019f94:	4620      	mov	r0, r4
90019f96:	f7ff fcc9 	bl	9001992c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90019f9a:	e7e6      	b.n	90019f6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90019f9c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90019fa0:	2b00      	cmp	r3, #0
90019fa2:	d0e3      	beq.n	90019f6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90019fa4:	f640 1302 	movw	r3, #2306	; 0x902
90019fa8:	429d      	cmp	r5, r3
90019faa:	d1df      	bne.n	90019f6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90019fac:	4601      	mov	r1, r0
90019fae:	4620      	mov	r0, r4
90019fb0:	f7ff fc8c 	bl	900198cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90019fb4:	e7d9      	b.n	90019f6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90019fb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90019fb6:	b510      	push	{r4, lr}
90019fb8:	4604      	mov	r4, r0
90019fba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
90019fbe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90019fc0:	b1e1      	cbz	r1, 90019ffc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90019fc2:	2b0a      	cmp	r3, #10
90019fc4:	d02d      	beq.n	9001a022 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90019fc6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90019fc8:	3901      	subs	r1, #1
90019fca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90019fce:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90019fd0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90019fd4:	1c51      	adds	r1, r2, #1
90019fd6:	b289      	uxth	r1, r1
90019fd8:	2901      	cmp	r1, #1
90019fda:	bf8a      	itet	hi
90019fdc:	f102 32ff 	addhi.w	r2, r2, #4294967295
90019fe0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90019fe2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90019fe4:	1c5a      	adds	r2, r3, #1
90019fe6:	8722      	strh	r2, [r4, #56]	; 0x38
90019fe8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90019fea:	4413      	add	r3, r2
90019fec:	b29b      	uxth	r3, r3
90019fee:	2b09      	cmp	r3, #9
90019ff0:	bf88      	it	hi
90019ff2:	3b0a      	subhi	r3, #10
90019ff4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019ff8:	8458      	strh	r0, [r3, #34]	; 0x22
90019ffa:	e7de      	b.n	90019fba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90019ffc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90019ffe:	2b0a      	cmp	r3, #10
9001a000:	d00f      	beq.n	9001a022 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a002:	4620      	mov	r0, r4
9001a004:	f7ff fc10 	bl	90019828 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
9001a008:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a00a:	1c5a      	adds	r2, r3, #1
9001a00c:	8722      	strh	r2, [r4, #56]	; 0x38
9001a00e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a010:	4413      	add	r3, r2
9001a012:	b29b      	uxth	r3, r3
9001a014:	2b09      	cmp	r3, #9
9001a016:	bf88      	it	hi
9001a018:	3b0a      	subhi	r3, #10
9001a01a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a01e:	8458      	strh	r0, [r3, #34]	; 0x22
9001a020:	e7ec      	b.n	90019ffc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a022:	bd10      	pop	{r4, pc}

9001a024 <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001a024:	b538      	push	{r3, r4, r5, lr}
9001a026:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a028:	4604      	mov	r4, r0
9001a02a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
9001a02e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
9001a030:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001a032:	3a01      	subs	r2, #1
9001a034:	8702      	strh	r2, [r0, #56]	; 0x38
9001a036:	1c5a      	adds	r2, r3, #1
9001a038:	b292      	uxth	r2, r2
9001a03a:	2a09      	cmp	r2, #9
9001a03c:	bf8a      	itet	hi
9001a03e:	3b09      	subhi	r3, #9
9001a040:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001a042:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001a044:	f7ff ffb7 	bl	90019fb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001a048:	8c23      	ldrh	r3, [r4, #32]
9001a04a:	2b01      	cmp	r3, #1
9001a04c:	bf9c      	itt	ls
9001a04e:	3301      	addls	r3, #1
9001a050:	8423      	strhls	r3, [r4, #32]
9001a052:	8be3      	ldrh	r3, [r4, #30]
9001a054:	b90b      	cbnz	r3, 9001a05a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001a056:	2302      	movs	r3, #2
9001a058:	83e3      	strh	r3, [r4, #30]
9001a05a:	8be3      	ldrh	r3, [r4, #30]
9001a05c:	4628      	mov	r0, r5
9001a05e:	3b01      	subs	r3, #1
9001a060:	b29b      	uxth	r3, r3
9001a062:	83e3      	strh	r3, [r4, #30]
9001a064:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a068:	8365      	strh	r5, [r4, #26]
9001a06a:	bd38      	pop	{r3, r4, r5, pc}

9001a06c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001a06c:	428a      	cmp	r2, r1
9001a06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a072:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
9001a074:	d932      	bls.n	9001a0dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
9001a076:	8f05      	ldrh	r5, [r0, #56]	; 0x38
9001a078:	1a54      	subs	r4, r2, r1
9001a07a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
9001a07e:	19ee      	adds	r6, r5, r7
9001a080:	fa1f fe84 	uxth.w	lr, r4
9001a084:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
9001a088:	3e01      	subs	r6, #1
9001a08a:	b2b4      	uxth	r4, r6
9001a08c:	eba4 090e 	sub.w	r9, r4, lr
9001a090:	fa1f f989 	uxth.w	r9, r9
9001a094:	2c09      	cmp	r4, #9
9001a096:	4626      	mov	r6, r4
9001a098:	bf88      	it	hi
9001a09a:	f1a4 060a 	subhi.w	r6, r4, #10
9001a09e:	f1bc 0f00 	cmp.w	ip, #0
9001a0a2:	f104 34ff 	add.w	r4, r4, #4294967295
9001a0a6:	bf08      	it	eq
9001a0a8:	f04f 0c02 	moveq.w	ip, #2
9001a0ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a0b0:	b2a4      	uxth	r4, r4
9001a0b2:	f10c 3cff 	add.w	ip, ip, #4294967295
9001a0b6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001a0ba:	454c      	cmp	r4, r9
9001a0bc:	fa1f fc8c 	uxth.w	ip, ip
9001a0c0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
9001a0c4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
9001a0c8:	d1e4      	bne.n	9001a094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001a0ca:	eba5 050e 	sub.w	r5, r5, lr
9001a0ce:	eb0e 0408 	add.w	r4, lr, r8
9001a0d2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001a0d6:	8705      	strh	r5, [r0, #56]	; 0x38
9001a0d8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001a0dc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001a0de:	250a      	movs	r5, #10
9001a0e0:	1a64      	subs	r4, r4, r1
9001a0e2:	4439      	add	r1, r7
9001a0e4:	b289      	uxth	r1, r1
9001a0e6:	8704      	strh	r4, [r0, #56]	; 0x38
9001a0e8:	2909      	cmp	r1, #9
9001a0ea:	bf88      	it	hi
9001a0ec:	390a      	subhi	r1, #10
9001a0ee:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a0f0:	b18a      	cbz	r2, 9001a116 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001a0f2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001a0f4:	3a01      	subs	r2, #1
9001a0f6:	3101      	adds	r1, #1
9001a0f8:	b292      	uxth	r2, r2
9001a0fa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001a0fe:	8701      	strh	r1, [r0, #56]	; 0x38
9001a100:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a102:	b901      	cbnz	r1, 9001a106 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001a104:	86c5      	strh	r5, [r0, #54]	; 0x36
9001a106:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a108:	3901      	subs	r1, #1
9001a10a:	b289      	uxth	r1, r1
9001a10c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a10e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001a112:	844c      	strh	r4, [r1, #34]	; 0x22
9001a114:	e7ec      	b.n	9001a0f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001a116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a11a:	f7ff bf4c 	b.w	90019fb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001a11e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001a11e:	b570      	push	{r4, r5, r6, lr}
9001a120:	2500      	movs	r5, #0
9001a122:	4295      	cmp	r5, r2
9001a124:	d011      	beq.n	9001a14a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001a126:	8bc4      	ldrh	r4, [r0, #30]
9001a128:	f831 6b02 	ldrh.w	r6, [r1], #2
9001a12c:	4414      	add	r4, r2
9001a12e:	3c01      	subs	r4, #1
9001a130:	1b64      	subs	r4, r4, r5
9001a132:	b2a4      	uxth	r4, r4
9001a134:	2c01      	cmp	r4, #1
9001a136:	bf88      	it	hi
9001a138:	3c02      	subhi	r4, #2
9001a13a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a13e:	8b64      	ldrh	r4, [r4, #26]
9001a140:	42b4      	cmp	r4, r6
9001a142:	d117      	bne.n	9001a174 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001a144:	3501      	adds	r5, #1
9001a146:	b2ad      	uxth	r5, r5
9001a148:	e7eb      	b.n	9001a122 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001a14a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a14e:	2400      	movs	r4, #0
9001a150:	4413      	add	r3, r2
9001a152:	b2a2      	uxth	r2, r4
9001a154:	429a      	cmp	r2, r3
9001a156:	da0f      	bge.n	9001a178 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
9001a158:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001a15a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001a15e:	3401      	adds	r4, #1
9001a160:	4432      	add	r2, r6
9001a162:	b292      	uxth	r2, r2
9001a164:	2a09      	cmp	r2, #9
9001a166:	bf88      	it	hi
9001a168:	3a0a      	subhi	r2, #10
9001a16a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a16e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
9001a170:	42aa      	cmp	r2, r5
9001a172:	d0ee      	beq.n	9001a152 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001a174:	2000      	movs	r0, #0
9001a176:	bd70      	pop	{r4, r5, r6, pc}
9001a178:	2001      	movs	r0, #1
9001a17a:	e7fc      	b.n	9001a176 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

9001a17c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001a17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a180:	4605      	mov	r5, r0
9001a182:	4616      	mov	r6, r2
9001a184:	1c8c      	adds	r4, r1, #2
9001a186:	8809      	ldrh	r1, [r1, #0]
9001a188:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001a18c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001a190:	42b3      	cmp	r3, r6
9001a192:	d124      	bne.n	9001a1de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001a194:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001a198:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001a19c:	f001 070f 	and.w	r7, r1, #15
9001a1a0:	4652      	mov	r2, sl
9001a1a2:	f8cd 8000 	str.w	r8, [sp]
9001a1a6:	464b      	mov	r3, r9
9001a1a8:	4621      	mov	r1, r4
9001a1aa:	4628      	mov	r0, r5
9001a1ac:	f7ff ffb7 	bl	9001a11e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001a1b0:	4683      	mov	fp, r0
9001a1b2:	b168      	cbz	r0, 9001a1d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001a1b4:	eb0a 0109 	add.w	r1, sl, r9
9001a1b8:	463a      	mov	r2, r7
9001a1ba:	4628      	mov	r0, r5
9001a1bc:	4441      	add	r1, r8
9001a1be:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001a1c2:	4649      	mov	r1, r9
9001a1c4:	f7ff ff52 	bl	9001a06c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001a1c8:	4658      	mov	r0, fp
9001a1ca:	b003      	add	sp, #12
9001a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a1d0:	eb07 010a 	add.w	r1, r7, sl
9001a1d4:	4449      	add	r1, r9
9001a1d6:	4441      	add	r1, r8
9001a1d8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001a1dc:	e7d2      	b.n	9001a184 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001a1de:	f04f 0b00 	mov.w	fp, #0
9001a1e2:	e7f1      	b.n	9001a1c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001a1e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001a1e4:	b570      	push	{r4, r5, r6, lr}
9001a1e6:	8810      	ldrh	r0, [r2, #0]
9001a1e8:	4298      	cmp	r0, r3
9001a1ea:	d817      	bhi.n	9001a21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a1ec:	1e48      	subs	r0, r1, #1
9001a1ee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001a1f2:	4298      	cmp	r0, r3
9001a1f4:	d312      	bcc.n	9001a21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a1f6:	2400      	movs	r4, #0
9001a1f8:	428c      	cmp	r4, r1
9001a1fa:	d20f      	bcs.n	9001a21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a1fc:	1860      	adds	r0, r4, r1
9001a1fe:	1040      	asrs	r0, r0, #1
9001a200:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001a204:	0085      	lsls	r5, r0, #2
9001a206:	42b3      	cmp	r3, r6
9001a208:	d902      	bls.n	9001a210 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001a20a:	3001      	adds	r0, #1
9001a20c:	b284      	uxth	r4, r0
9001a20e:	e7f3      	b.n	9001a1f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a210:	d201      	bcs.n	9001a216 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001a212:	b281      	uxth	r1, r0
9001a214:	e7f0      	b.n	9001a1f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a216:	442a      	add	r2, r5
9001a218:	8850      	ldrh	r0, [r2, #2]
9001a21a:	bd70      	pop	{r4, r5, r6, pc}
9001a21c:	2000      	movs	r0, #0
9001a21e:	e7fc      	b.n	9001a21a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001a220 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a224:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001a226:	4604      	mov	r4, r0
9001a228:	260b      	movs	r6, #11
9001a22a:	886f      	ldrh	r7, [r5, #2]
9001a22c:	087f      	lsrs	r7, r7, #1
9001a22e:	3e01      	subs	r6, #1
9001a230:	d013      	beq.n	9001a25a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a232:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001a234:	462a      	mov	r2, r5
9001a236:	4639      	mov	r1, r7
9001a238:	4620      	mov	r0, r4
9001a23a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a23e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a242:	4643      	mov	r3, r8
9001a244:	f7ff ffce 	bl	9001a1e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001a248:	b138      	cbz	r0, 9001a25a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a24a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001a24e:	4642      	mov	r2, r8
9001a250:	4620      	mov	r0, r4
9001a252:	f7ff ff93 	bl	9001a17c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001a256:	2800      	cmp	r0, #0
9001a258:	d1e9      	bne.n	9001a22e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9001a260 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001a260:	b570      	push	{r4, r5, r6, lr}
9001a262:	694a      	ldr	r2, [r1, #20]
9001a264:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001a266:	684b      	ldr	r3, [r1, #4]
9001a268:	1b54      	subs	r4, r2, r5
9001a26a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001a26c:	f000 8106 	beq.w	9001a47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001a270:	1b9b      	subs	r3, r3, r6
9001a272:	d003      	beq.n	9001a27c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a274:	4363      	muls	r3, r4
9001a276:	2210      	movs	r2, #16
9001a278:	fb93 f3f2 	sdiv	r3, r3, r2
9001a27c:	680c      	ldr	r4, [r1, #0]
9001a27e:	698a      	ldr	r2, [r1, #24]
9001a280:	1b65      	subs	r5, r4, r5
9001a282:	f000 80fd 	beq.w	9001a480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001a286:	1b92      	subs	r2, r2, r6
9001a288:	d003      	beq.n	9001a292 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a28a:	436a      	muls	r2, r5
9001a28c:	2410      	movs	r4, #16
9001a28e:	fb92 f2f4 	sdiv	r2, r2, r4
9001a292:	1a9b      	subs	r3, r3, r2
9001a294:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001a4bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001a298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a29c:	460a      	mov	r2, r1
9001a29e:	ee07 3a90 	vmov	s15, r3
9001a2a2:	f100 040c 	add.w	r4, r0, #12
9001a2a6:	4603      	mov	r3, r0
9001a2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a2ac:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a2b0:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001a2b4:	eeb1 6a43 	vneg.f32	s12, s6
9001a2b8:	edd2 7a02 	vldr	s15, [r2, #8]
9001a2bc:	3214      	adds	r2, #20
9001a2be:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001a2c2:	ece3 6a01 	vstmia	r3!, {s13}
9001a2c6:	429c      	cmp	r4, r3
9001a2c8:	ed52 7a02 	vldr	s15, [r2, #-8]
9001a2cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a2d0:	edc3 7a02 	vstr	s15, [r3, #8]
9001a2d4:	ed52 7a01 	vldr	s15, [r2, #-4]
9001a2d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a2dc:	edc3 7a05 	vstr	s15, [r3, #20]
9001a2e0:	d1ea      	bne.n	9001a2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001a2e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a2e4:	698b      	ldr	r3, [r1, #24]
9001a2e6:	edd0 4a02 	vldr	s9, [r0, #8]
9001a2ea:	1a9b      	subs	r3, r3, r2
9001a2ec:	edd0 3a00 	vldr	s7, [r0]
9001a2f0:	edd0 6a01 	vldr	s13, [r0, #4]
9001a2f4:	ee07 3a90 	vmov	s15, r3
9001a2f8:	684b      	ldr	r3, [r1, #4]
9001a2fa:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001a2fe:	ed90 5a05 	vldr	s10, [r0, #20]
9001a302:	1a9b      	subs	r3, r3, r2
9001a304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a308:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001a30c:	ed90 2a03 	vldr	s4, [r0, #12]
9001a310:	ee07 3a10 	vmov	s14, r3
9001a314:	edd0 5a04 	vldr	s11, [r0, #16]
9001a318:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a31c:	ed90 1a07 	vldr	s2, [r0, #28]
9001a320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a324:	edd0 2a06 	vldr	s5, [r0, #24]
9001a328:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001a32c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001a330:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a334:	ee32 5a45 	vsub.f32	s10, s4, s10
9001a338:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a33c:	ee67 7a83 	vmul.f32	s15, s15, s6
9001a340:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001a344:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a346:	694a      	ldr	r2, [r1, #20]
9001a348:	1b13      	subs	r3, r2, r4
9001a34a:	ee07 3a10 	vmov	s14, r3
9001a34e:	680b      	ldr	r3, [r1, #0]
9001a350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a354:	1b1b      	subs	r3, r3, r4
9001a356:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a35a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001a35e:	ee07 3a10 	vmov	s14, r3
9001a362:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a366:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a36a:	eee6 4a87 	vfma.f32	s9, s13, s14
9001a36e:	ee64 4a86 	vmul.f32	s9, s9, s12
9001a372:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001a376:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a378:	698b      	ldr	r3, [r1, #24]
9001a37a:	1a9b      	subs	r3, r3, r2
9001a37c:	ee06 3a90 	vmov	s13, r3
9001a380:	684b      	ldr	r3, [r1, #4]
9001a382:	1a9b      	subs	r3, r3, r2
9001a384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a388:	ee07 3a10 	vmov	s14, r3
9001a38c:	ee66 6a84 	vmul.f32	s13, s13, s8
9001a390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a394:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001a398:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a39c:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a3a0:	ee66 6a83 	vmul.f32	s13, s13, s6
9001a3a4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001a3a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a3aa:	694a      	ldr	r2, [r1, #20]
9001a3ac:	1b13      	subs	r3, r2, r4
9001a3ae:	ee07 3a10 	vmov	s14, r3
9001a3b2:	680b      	ldr	r3, [r1, #0]
9001a3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a3b8:	1b1b      	subs	r3, r3, r4
9001a3ba:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a3be:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001a3c2:	ee07 3a10 	vmov	s14, r3
9001a3c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a3ca:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a3ce:	eea5 5a87 	vfma.f32	s10, s11, s14
9001a3d2:	edd0 5a08 	vldr	s11, [r0, #32]
9001a3d6:	ee31 1a65 	vsub.f32	s2, s2, s11
9001a3da:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001a3de:	ee25 5a06 	vmul.f32	s10, s10, s12
9001a3e2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001a3e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a3e8:	698b      	ldr	r3, [r1, #24]
9001a3ea:	1a9b      	subs	r3, r3, r2
9001a3ec:	ee07 3a10 	vmov	s14, r3
9001a3f0:	684b      	ldr	r3, [r1, #4]
9001a3f2:	1a9b      	subs	r3, r3, r2
9001a3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a3f8:	ee01 3a90 	vmov	s3, r3
9001a3fc:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a400:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001a404:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001a408:	ee61 1a84 	vmul.f32	s3, s3, s8
9001a40c:	eea1 7a21 	vfma.f32	s14, s2, s3
9001a410:	ee27 7a03 	vmul.f32	s14, s14, s6
9001a414:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a418:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a41a:	694a      	ldr	r2, [r1, #20]
9001a41c:	1b13      	subs	r3, r2, r4
9001a41e:	ee03 3a10 	vmov	s6, r3
9001a422:	680b      	ldr	r3, [r1, #0]
9001a424:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a428:	1b1b      	subs	r3, r3, r4
9001a42a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001a42e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001a432:	ee03 3a10 	vmov	s6, r3
9001a436:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a43a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001a43e:	eee1 5a04 	vfma.f32	s11, s2, s8
9001a442:	ee25 6a86 	vmul.f32	s12, s11, s12
9001a446:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001a44a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001a44e:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001a452:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001a456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a45a:	dd13      	ble.n	9001a484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001a45c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a460:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001a464:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a466:	eee3 7a87 	vfma.f32	s15, s7, s14
9001a46a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a472:	dd15      	ble.n	9001a4a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001a474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a478:	6403      	str	r3, [r0, #64]	; 0x40
9001a47a:	bd70      	pop	{r4, r5, r6, pc}
9001a47c:	4623      	mov	r3, r4
9001a47e:	e6fd      	b.n	9001a27c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a480:	462a      	mov	r2, r5
9001a482:	e706      	b.n	9001a292 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a484:	d502      	bpl.n	9001a48c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001a486:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a48a:	e7e9      	b.n	9001a460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001a48c:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001a490:	eea3 2a85 	vfma.f32	s4, s7, s10
9001a494:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a49c:	dade      	bge.n	9001a45c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001a49e:	e7f2      	b.n	9001a486 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001a4a0:	d502      	bpl.n	9001a4a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001a4a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a4a6:	e7e7      	b.n	9001a478 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001a4a8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001a4ac:	eee3 4a86 	vfma.f32	s9, s7, s12
9001a4b0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001a4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a4b8:	dadc      	bge.n	9001a474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001a4ba:	e7f2      	b.n	9001a4a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001a4bc:	3d800000 	.word	0x3d800000

9001a4c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a4c4:	2714      	movs	r7, #20
9001a4c6:	435f      	muls	r7, r3
9001a4c8:	eb02 0c07 	add.w	ip, r2, r7
9001a4cc:	f8dc 5004 	ldr.w	r5, [ip, #4]
9001a4d0:	f115 0e0f 	adds.w	lr, r5, #15
9001a4d4:	f100 80a2 	bmi.w	9001a61c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001a4d8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001a4dc:	9c08      	ldr	r4, [sp, #32]
9001a4de:	2614      	movs	r6, #20
9001a4e0:	f8c0 e014 	str.w	lr, [r0, #20]
9001a4e4:	4366      	muls	r6, r4
9001a4e6:	eb02 0806 	add.w	r8, r2, r6
9001a4ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001a4ee:	f115 040f 	adds.w	r4, r5, #15
9001a4f2:	f100 809f 	bmi.w	9001a634 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001a4f6:	1124      	asrs	r4, r4, #4
9001a4f8:	eba4 040e 	sub.w	r4, r4, lr
9001a4fc:	6184      	str	r4, [r0, #24]
9001a4fe:	2c00      	cmp	r4, #0
9001a500:	f000 808a 	beq.w	9001a618 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001a504:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001a508:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001a50c:	5995      	ldr	r5, [r2, r6]
9001a50e:	eba4 0809 	sub.w	r8, r4, r9
9001a512:	59d4      	ldr	r4, [r2, r7]
9001a514:	eba5 0a04 	sub.w	sl, r5, r4
9001a518:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001a51c:	ea4f 150a 	mov.w	r5, sl, lsl #4
9001a520:	fb0e fe05 	mul.w	lr, lr, r5
9001a524:	fb0a ee19 	mls	lr, sl, r9, lr
9001a528:	fb08 e404 	mla	r4, r8, r4, lr
9001a52c:	3c01      	subs	r4, #1
9001a52e:	19a4      	adds	r4, r4, r6
9001a530:	f100 808c 	bmi.w	9001a64c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001a534:	fb94 fef6 	sdiv	lr, r4, r6
9001a538:	fb06 441e 	mls	r4, r6, lr, r4
9001a53c:	f8c0 e000 	str.w	lr, [r0]
9001a540:	6104      	str	r4, [r0, #16]
9001a542:	2d00      	cmp	r5, #0
9001a544:	f2c0 8095 	blt.w	9001a672 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
9001a548:	fb95 f4f6 	sdiv	r4, r5, r6
9001a54c:	fb06 5514 	mls	r5, r6, r4, r5
9001a550:	6044      	str	r4, [r0, #4]
9001a552:	6085      	str	r5, [r0, #8]
9001a554:	60c6      	str	r6, [r0, #12]
9001a556:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001a55a:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001a55e:	6945      	ldr	r5, [r0, #20]
9001a560:	59d2      	ldr	r2, [r2, r7]
9001a562:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001a566:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001a694 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001a56a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a56e:	ee07 4a10 	vmov	s14, r4
9001a572:	6804      	ldr	r4, [r0, #0]
9001a574:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001a578:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a57c:	ee07 2a90 	vmov	s15, r2
9001a580:	ee27 7a26 	vmul.f32	s14, s14, s13
9001a584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a588:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a58c:	edd3 6a00 	vldr	s13, [r3]
9001a590:	eee6 6a07 	vfma.f32	s13, s12, s14
9001a594:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
9001a598:	eee6 6a27 	vfma.f32	s13, s12, s15
9001a59c:	edc0 6a07 	vstr	s13, [r0, #28]
9001a5a0:	edd0 6a01 	vldr	s13, [r0, #4]
9001a5a4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
9001a5a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a5ac:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a5b0:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001a5b4:	ed80 6a08 	vstr	s12, [r0, #32]
9001a5b8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001a5ba:	6242      	str	r2, [r0, #36]	; 0x24
9001a5bc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
9001a5c0:	ed93 6a03 	vldr	s12, [r3, #12]
9001a5c4:	eea5 6a87 	vfma.f32	s12, s11, s14
9001a5c8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001a5cc:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001a5d0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001a5d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001a5d8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001a5dc:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001a5e0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001a5e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a5e6:	6302      	str	r2, [r0, #48]	; 0x30
9001a5e8:	ed93 6a06 	vldr	s12, [r3, #24]
9001a5ec:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
9001a5f0:	eea5 6a87 	vfma.f32	s12, s11, s14
9001a5f4:	eeb0 7a46 	vmov.f32	s14, s12
9001a5f8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001a5fc:	eea6 7a27 	vfma.f32	s14, s12, s15
9001a600:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a604:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
9001a608:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001a60c:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a610:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001a614:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001a616:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a61c:	2410      	movs	r4, #16
9001a61e:	f1c5 0501 	rsb	r5, r5, #1
9001a622:	fb9e fef4 	sdiv	lr, lr, r4
9001a626:	f015 050f 	ands.w	r5, r5, #15
9001a62a:	bf18      	it	ne
9001a62c:	2501      	movne	r5, #1
9001a62e:	ebae 0e05 	sub.w	lr, lr, r5
9001a632:	e753      	b.n	9001a4dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001a634:	f04f 0910 	mov.w	r9, #16
9001a638:	f1c5 0501 	rsb	r5, r5, #1
9001a63c:	fb94 f4f9 	sdiv	r4, r4, r9
9001a640:	f015 050f 	ands.w	r5, r5, #15
9001a644:	bf18      	it	ne
9001a646:	2501      	movne	r5, #1
9001a648:	1b64      	subs	r4, r4, r5
9001a64a:	e755      	b.n	9001a4f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001a64c:	4264      	negs	r4, r4
9001a64e:	fb94 fef6 	sdiv	lr, r4, r6
9001a652:	f1ce 0800 	rsb	r8, lr, #0
9001a656:	fb06 441e 	mls	r4, r6, lr, r4
9001a65a:	f8c0 8000 	str.w	r8, [r0]
9001a65e:	6104      	str	r4, [r0, #16]
9001a660:	2c00      	cmp	r4, #0
9001a662:	f43f af6e 	beq.w	9001a542 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001a666:	ea6f 0e0e 	mvn.w	lr, lr
9001a66a:	1b34      	subs	r4, r6, r4
9001a66c:	f8c0 e000 	str.w	lr, [r0]
9001a670:	e766      	b.n	9001a540 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001a672:	426d      	negs	r5, r5
9001a674:	fb95 f4f6 	sdiv	r4, r5, r6
9001a678:	f1c4 0e00 	rsb	lr, r4, #0
9001a67c:	fb06 5514 	mls	r5, r6, r4, r5
9001a680:	f8c0 e004 	str.w	lr, [r0, #4]
9001a684:	6085      	str	r5, [r0, #8]
9001a686:	2d00      	cmp	r5, #0
9001a688:	f43f af64 	beq.w	9001a554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001a68c:	43e4      	mvns	r4, r4
9001a68e:	1b75      	subs	r5, r6, r5
9001a690:	6044      	str	r4, [r0, #4]
9001a692:	e75e      	b.n	9001a552 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001a694:	3d800000 	.word	0x3d800000

9001a698 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001a698:	4602      	mov	r2, r0
9001a69a:	b148      	cbz	r0, 9001a6b0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001a69c:	2300      	movs	r3, #0
9001a69e:	b298      	uxth	r0, r3
9001a6a0:	3301      	adds	r3, #1
9001a6a2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001a6a6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001a6aa:	2900      	cmp	r1, #0
9001a6ac:	d1f7      	bne.n	9001a69e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001a6ae:	4770      	bx	lr
9001a6b0:	4770      	bx	lr

9001a6b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001a6b2:	b530      	push	{r4, r5, lr}
9001a6b4:	4604      	mov	r4, r0
9001a6b6:	b159      	cbz	r1, 9001a6d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001a6b8:	b148      	cbz	r0, 9001a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001a6ba:	2300      	movs	r3, #0
9001a6bc:	b298      	uxth	r0, r3
9001a6be:	4282      	cmp	r2, r0
9001a6c0:	d905      	bls.n	9001a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001a6c2:	5ccd      	ldrb	r5, [r1, r3]
9001a6c4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001a6c8:	3301      	adds	r3, #1
9001a6ca:	2d00      	cmp	r5, #0
9001a6cc:	d1f6      	bne.n	9001a6bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001a6ce:	bd30      	pop	{r4, r5, pc}
9001a6d0:	4608      	mov	r0, r1
9001a6d2:	e7fc      	b.n	9001a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001a6d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a6d6:	468c      	mov	ip, r1
9001a6d8:	b08b      	sub	sp, #44	; 0x2c
9001a6da:	2100      	movs	r1, #0
9001a6dc:	ae01      	add	r6, sp, #4
9001a6de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001a6e2:	211f      	movs	r1, #31
9001a6e4:	fbb0 f7f3 	udiv	r7, r0, r3
9001a6e8:	fb03 0517 	mls	r5, r3, r7, r0
9001a6ec:	4638      	mov	r0, r7
9001a6ee:	b2ec      	uxtb	r4, r5
9001a6f0:	2d09      	cmp	r5, #9
9001a6f2:	bfd4      	ite	le
9001a6f4:	3430      	addle	r4, #48	; 0x30
9001a6f6:	3457      	addgt	r4, #87	; 0x57
9001a6f8:	b2e4      	uxtb	r4, r4
9001a6fa:	558c      	strb	r4, [r1, r6]
9001a6fc:	1e4c      	subs	r4, r1, #1
9001a6fe:	b92f      	cbnz	r7, 9001a70c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001a700:	4431      	add	r1, r6
9001a702:	4660      	mov	r0, ip
9001a704:	f7ff ffd5 	bl	9001a6b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001a708:	b00b      	add	sp, #44	; 0x2c
9001a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a70c:	4621      	mov	r1, r4
9001a70e:	e7e9      	b.n	9001a6e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001a710 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001a710:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a712:	4607      	mov	r7, r0
9001a714:	b08b      	sub	sp, #44	; 0x2c
9001a716:	4608      	mov	r0, r1
9001a718:	b341      	cbz	r1, 9001a76c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001a71a:	1e99      	subs	r1, r3, #2
9001a71c:	2922      	cmp	r1, #34	; 0x22
9001a71e:	d825      	bhi.n	9001a76c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001a720:	2100      	movs	r1, #0
9001a722:	463c      	mov	r4, r7
9001a724:	261f      	movs	r6, #31
9001a726:	f10d 0c04 	add.w	ip, sp, #4
9001a72a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001a72e:	1e71      	subs	r1, r6, #1
9001a730:	fb94 fef3 	sdiv	lr, r4, r3
9001a734:	fb03 441e 	mls	r4, r3, lr, r4
9001a738:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001a73c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001a740:	b2ec      	uxtb	r4, r5
9001a742:	2d09      	cmp	r5, #9
9001a744:	bfd4      	ite	le
9001a746:	3430      	addle	r4, #48	; 0x30
9001a748:	3457      	addgt	r4, #87	; 0x57
9001a74a:	b2e4      	uxtb	r4, r4
9001a74c:	f80c 4006 	strb.w	r4, [ip, r6]
9001a750:	4674      	mov	r4, lr
9001a752:	b96c      	cbnz	r4, 9001a770 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001a754:	2f00      	cmp	r7, #0
9001a756:	da05      	bge.n	9001a764 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001a758:	ab0a      	add	r3, sp, #40	; 0x28
9001a75a:	4419      	add	r1, r3
9001a75c:	232d      	movs	r3, #45	; 0x2d
9001a75e:	f801 3c24 	strb.w	r3, [r1, #-36]
9001a762:	1eb1      	subs	r1, r6, #2
9001a764:	3101      	adds	r1, #1
9001a766:	4461      	add	r1, ip
9001a768:	f7ff ffa3 	bl	9001a6b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001a76c:	b00b      	add	sp, #44	; 0x2c
9001a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a770:	460e      	mov	r6, r1
9001a772:	e7dc      	b.n	9001a72e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001a774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a778:	b085      	sub	sp, #20
9001a77a:	4691      	mov	r9, r2
9001a77c:	6802      	ldr	r2, [r0, #0]
9001a77e:	4688      	mov	r8, r1
9001a780:	461c      	mov	r4, r3
9001a782:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001a786:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001a78a:	4683      	mov	fp, r0
9001a78c:	4610      	mov	r0, r2
9001a78e:	9103      	str	r1, [sp, #12]
9001a790:	9302      	str	r3, [sp, #8]
9001a792:	9201      	str	r2, [sp, #4]
9001a794:	f7ff ff80 	bl	9001a698 <_ZN8touchgfx7Unicode6strlenEPKt>
9001a798:	f1b8 0f00 	cmp.w	r8, #0
9001a79c:	bf0c      	ite	eq
9001a79e:	4684      	moveq	ip, r0
9001a7a0:	f100 0c01 	addne.w	ip, r0, #1
9001a7a4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001a7a8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001a7ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001a7ae:	fa1f fc8c 	uxth.w	ip, ip
9001a7b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001a7b4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001a7b8:	9903      	ldr	r1, [sp, #12]
9001a7ba:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001a7be:	d041      	beq.n	9001a844 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001a7c0:	d834      	bhi.n	9001a82c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001a7c2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001a7c6:	d059      	beq.n	9001a87c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001a7c8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001a7cc:	d03a      	beq.n	9001a844 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001a7ce:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001a7d2:	d034      	beq.n	9001a83e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001a7d4:	2400      	movs	r4, #0
9001a7d6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001a7da:	3a01      	subs	r2, #1
9001a7dc:	b169      	cbz	r1, 9001a7fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a7de:	9911      	ldr	r1, [sp, #68]	; 0x44
9001a7e0:	458c      	cmp	ip, r1
9001a7e2:	da09      	bge.n	9001a7f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001a7e4:	eba1 010c 	sub.w	r1, r1, ip
9001a7e8:	b289      	uxth	r1, r1
9001a7ea:	b933      	cbnz	r3, 9001a7fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a7ec:	2e00      	cmp	r6, #0
9001a7ee:	d051      	beq.n	9001a894 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001a7f0:	2800      	cmp	r0, #0
9001a7f2:	d04f      	beq.n	9001a894 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001a7f4:	440c      	add	r4, r1
9001a7f6:	b2a4      	uxth	r4, r4
9001a7f8:	2100      	movs	r1, #0
9001a7fa:	682b      	ldr	r3, [r5, #0]
9001a7fc:	4293      	cmp	r3, r2
9001a7fe:	da07      	bge.n	9001a810 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001a800:	f1b8 0f00 	cmp.w	r8, #0
9001a804:	d004      	beq.n	9001a810 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001a806:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001a80a:	682b      	ldr	r3, [r5, #0]
9001a80c:	3301      	adds	r3, #1
9001a80e:	602b      	str	r3, [r5, #0]
9001a810:	2730      	movs	r7, #48	; 0x30
9001a812:	2c00      	cmp	r4, #0
9001a814:	d04e      	beq.n	9001a8b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a816:	682e      	ldr	r6, [r5, #0]
9001a818:	3c01      	subs	r4, #1
9001a81a:	42b2      	cmp	r2, r6
9001a81c:	b2a4      	uxth	r4, r4
9001a81e:	dd49      	ble.n	9001a8b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a820:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001a824:	682b      	ldr	r3, [r5, #0]
9001a826:	3301      	adds	r3, #1
9001a828:	602b      	str	r3, [r5, #0]
9001a82a:	e7f2      	b.n	9001a812 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001a82c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001a830:	d01d      	beq.n	9001a86e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001a832:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001a836:	d002      	beq.n	9001a83e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001a838:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001a83c:	e7c9      	b.n	9001a7d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001a83e:	4684      	mov	ip, r0
9001a840:	f04f 0800 	mov.w	r8, #0
9001a844:	2c00      	cmp	r4, #0
9001a846:	d0c6      	beq.n	9001a7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a848:	b947      	cbnz	r7, 9001a85c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001a84a:	2801      	cmp	r0, #1
9001a84c:	d106      	bne.n	9001a85c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001a84e:	8814      	ldrh	r4, [r2, #0]
9001a850:	2c30      	cmp	r4, #48	; 0x30
9001a852:	bf02      	ittt	eq
9001a854:	3202      	addeq	r2, #2
9001a856:	4638      	moveq	r0, r7
9001a858:	f8cb 2000 	streq.w	r2, [fp]
9001a85c:	45bc      	cmp	ip, r7
9001a85e:	da14      	bge.n	9001a88a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001a860:	b2bf      	uxth	r7, r7
9001a862:	eba7 040c 	sub.w	r4, r7, ip
9001a866:	46bc      	mov	ip, r7
9001a868:	b2a4      	uxth	r4, r4
9001a86a:	2600      	movs	r6, #0
9001a86c:	e7b3      	b.n	9001a7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a86e:	4684      	mov	ip, r0
9001a870:	b16c      	cbz	r4, 9001a88e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001a872:	42b8      	cmp	r0, r7
9001a874:	dd00      	ble.n	9001a878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001a876:	b2b8      	uxth	r0, r7
9001a878:	2400      	movs	r4, #0
9001a87a:	e003      	b.n	9001a884 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001a87c:	f04f 0c01 	mov.w	ip, #1
9001a880:	2400      	movs	r4, #0
9001a882:	4660      	mov	r0, ip
9001a884:	4626      	mov	r6, r4
9001a886:	46a0      	mov	r8, r4
9001a888:	e7a5      	b.n	9001a7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a88a:	2400      	movs	r4, #0
9001a88c:	e7ed      	b.n	9001a86a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001a88e:	4626      	mov	r6, r4
9001a890:	46a0      	mov	r8, r4
9001a892:	e7a0      	b.n	9001a7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a894:	2900      	cmp	r1, #0
9001a896:	d0b0      	beq.n	9001a7fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a898:	2720      	movs	r7, #32
9001a89a:	682e      	ldr	r6, [r5, #0]
9001a89c:	2900      	cmp	r1, #0
9001a89e:	d0ac      	beq.n	9001a7fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a8a0:	3901      	subs	r1, #1
9001a8a2:	4296      	cmp	r6, r2
9001a8a4:	b289      	uxth	r1, r1
9001a8a6:	daa7      	bge.n	9001a7f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001a8a8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001a8ac:	682b      	ldr	r3, [r5, #0]
9001a8ae:	3301      	adds	r3, #1
9001a8b0:	602b      	str	r3, [r5, #0]
9001a8b2:	e7f2      	b.n	9001a89a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001a8b4:	b188      	cbz	r0, 9001a8da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001a8b6:	682b      	ldr	r3, [r5, #0]
9001a8b8:	3801      	subs	r0, #1
9001a8ba:	429a      	cmp	r2, r3
9001a8bc:	b280      	uxth	r0, r0
9001a8be:	dd0c      	ble.n	9001a8da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001a8c0:	f8db 3000 	ldr.w	r3, [fp]
9001a8c4:	1c9c      	adds	r4, r3, #2
9001a8c6:	f8cb 4000 	str.w	r4, [fp]
9001a8ca:	881c      	ldrh	r4, [r3, #0]
9001a8cc:	682b      	ldr	r3, [r5, #0]
9001a8ce:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001a8d2:	682b      	ldr	r3, [r5, #0]
9001a8d4:	3301      	adds	r3, #1
9001a8d6:	602b      	str	r3, [r5, #0]
9001a8d8:	e7ec      	b.n	9001a8b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a8da:	2620      	movs	r6, #32
9001a8dc:	b151      	cbz	r1, 9001a8f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001a8de:	6828      	ldr	r0, [r5, #0]
9001a8e0:	3901      	subs	r1, #1
9001a8e2:	4282      	cmp	r2, r0
9001a8e4:	b289      	uxth	r1, r1
9001a8e6:	dd05      	ble.n	9001a8f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001a8e8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001a8ec:	682b      	ldr	r3, [r5, #0]
9001a8ee:	3301      	adds	r3, #1
9001a8f0:	602b      	str	r3, [r5, #0]
9001a8f2:	e7f3      	b.n	9001a8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001a8f4:	b005      	add	sp, #20
9001a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001a8fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001a8fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a8fe:	2400      	movs	r4, #0
9001a900:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001a904:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001a908:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001a90c:	8014      	strh	r4, [r2, #0]
9001a90e:	701c      	strb	r4, [r3, #0]
9001a910:	f888 4000 	strb.w	r4, [r8]
9001a914:	f88c 4000 	strb.w	r4, [ip]
9001a918:	f88e 4000 	strb.w	r4, [lr]
9001a91c:	703c      	strb	r4, [r7, #0]
9001a91e:	6804      	ldr	r4, [r0, #0]
9001a920:	b1a4      	cbz	r4, 9001a94c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001a922:	8824      	ldrh	r4, [r4, #0]
9001a924:	f04f 0901 	mov.w	r9, #1
9001a928:	b314      	cbz	r4, 9001a970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a92a:	2c2b      	cmp	r4, #43	; 0x2b
9001a92c:	d001      	beq.n	9001a932 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001a92e:	2c20      	cmp	r4, #32
9001a930:	d110      	bne.n	9001a954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001a932:	8014      	strh	r4, [r2, #0]
9001a934:	6804      	ldr	r4, [r0, #0]
9001a936:	b10c      	cbz	r4, 9001a93c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001a938:	3402      	adds	r4, #2
9001a93a:	6004      	str	r4, [r0, #0]
9001a93c:	680c      	ldr	r4, [r1, #0]
9001a93e:	b10c      	cbz	r4, 9001a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001a940:	3401      	adds	r4, #1
9001a942:	600c      	str	r4, [r1, #0]
9001a944:	6804      	ldr	r4, [r0, #0]
9001a946:	b17c      	cbz	r4, 9001a968 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001a948:	8824      	ldrh	r4, [r4, #0]
9001a94a:	e7ed      	b.n	9001a928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001a94c:	680c      	ldr	r4, [r1, #0]
9001a94e:	b17c      	cbz	r4, 9001a970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a950:	7824      	ldrb	r4, [r4, #0]
9001a952:	e7e7      	b.n	9001a924 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001a954:	2c2d      	cmp	r4, #45	; 0x2d
9001a956:	d102      	bne.n	9001a95e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001a958:	f883 9000 	strb.w	r9, [r3]
9001a95c:	e7ea      	b.n	9001a934 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001a95e:	2c23      	cmp	r4, #35	; 0x23
9001a960:	d107      	bne.n	9001a972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001a962:	f888 9000 	strb.w	r9, [r8]
9001a966:	e7e5      	b.n	9001a934 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001a968:	680c      	ldr	r4, [r1, #0]
9001a96a:	b10c      	cbz	r4, 9001a970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a96c:	7824      	ldrb	r4, [r4, #0]
9001a96e:	e7db      	b.n	9001a928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001a970:	2400      	movs	r4, #0
9001a972:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001a976:	2b09      	cmp	r3, #9
9001a978:	d901      	bls.n	9001a97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001a97a:	2c2a      	cmp	r4, #42	; 0x2a
9001a97c:	d122      	bne.n	9001a9c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001a97e:	2301      	movs	r3, #1
9001a980:	2c30      	cmp	r4, #48	; 0x30
9001a982:	f88e 3000 	strb.w	r3, [lr]
9001a986:	d10d      	bne.n	9001a9a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001a988:	f88c 3000 	strb.w	r3, [ip]
9001a98c:	6803      	ldr	r3, [r0, #0]
9001a98e:	b10b      	cbz	r3, 9001a994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001a990:	3302      	adds	r3, #2
9001a992:	6003      	str	r3, [r0, #0]
9001a994:	680b      	ldr	r3, [r1, #0]
9001a996:	b10b      	cbz	r3, 9001a99c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001a998:	3301      	adds	r3, #1
9001a99a:	600b      	str	r3, [r1, #0]
9001a99c:	6803      	ldr	r3, [r0, #0]
9001a99e:	2b00      	cmp	r3, #0
9001a9a0:	d02f      	beq.n	9001aa02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001a9a2:	881c      	ldrh	r4, [r3, #0]
9001a9a4:	2c2a      	cmp	r4, #42	; 0x2a
9001a9a6:	d135      	bne.n	9001aa14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001a9a8:	f04f 33ff 	mov.w	r3, #4294967295
9001a9ac:	6033      	str	r3, [r6, #0]
9001a9ae:	6803      	ldr	r3, [r0, #0]
9001a9b0:	b10b      	cbz	r3, 9001a9b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001a9b2:	3302      	adds	r3, #2
9001a9b4:	6003      	str	r3, [r0, #0]
9001a9b6:	680b      	ldr	r3, [r1, #0]
9001a9b8:	b10b      	cbz	r3, 9001a9be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001a9ba:	3301      	adds	r3, #1
9001a9bc:	600b      	str	r3, [r1, #0]
9001a9be:	6803      	ldr	r3, [r0, #0]
9001a9c0:	b31b      	cbz	r3, 9001aa0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001a9c2:	881c      	ldrh	r4, [r3, #0]
9001a9c4:	2c2e      	cmp	r4, #46	; 0x2e
9001a9c6:	d11a      	bne.n	9001a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001a9c8:	2301      	movs	r3, #1
9001a9ca:	703b      	strb	r3, [r7, #0]
9001a9cc:	6803      	ldr	r3, [r0, #0]
9001a9ce:	b10b      	cbz	r3, 9001a9d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001a9d0:	3302      	adds	r3, #2
9001a9d2:	6003      	str	r3, [r0, #0]
9001a9d4:	680b      	ldr	r3, [r1, #0]
9001a9d6:	b10b      	cbz	r3, 9001a9dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001a9d8:	3301      	adds	r3, #1
9001a9da:	600b      	str	r3, [r1, #0]
9001a9dc:	6803      	ldr	r3, [r0, #0]
9001a9de:	2b00      	cmp	r3, #0
9001a9e0:	d036      	beq.n	9001aa50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001a9e2:	881b      	ldrh	r3, [r3, #0]
9001a9e4:	2b2a      	cmp	r3, #42	; 0x2a
9001a9e6:	d137      	bne.n	9001aa58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001a9e8:	f04f 33ff 	mov.w	r3, #4294967295
9001a9ec:	602b      	str	r3, [r5, #0]
9001a9ee:	6803      	ldr	r3, [r0, #0]
9001a9f0:	b10b      	cbz	r3, 9001a9f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001a9f2:	3302      	adds	r3, #2
9001a9f4:	6003      	str	r3, [r0, #0]
9001a9f6:	680b      	ldr	r3, [r1, #0]
9001a9f8:	b10b      	cbz	r3, 9001a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001a9fa:	3301      	adds	r3, #1
9001a9fc:	600b      	str	r3, [r1, #0]
9001a9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001aa02:	680c      	ldr	r4, [r1, #0]
9001aa04:	b134      	cbz	r4, 9001aa14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001aa06:	7824      	ldrb	r4, [r4, #0]
9001aa08:	e7cc      	b.n	9001a9a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001aa0a:	680b      	ldr	r3, [r1, #0]
9001aa0c:	2b00      	cmp	r3, #0
9001aa0e:	d0f6      	beq.n	9001a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001aa10:	781c      	ldrb	r4, [r3, #0]
9001aa12:	e7d7      	b.n	9001a9c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001aa14:	2300      	movs	r3, #0
9001aa16:	220a      	movs	r2, #10
9001aa18:	6033      	str	r3, [r6, #0]
9001aa1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001aa1e:	fa1f f38c 	uxth.w	r3, ip
9001aa22:	2b09      	cmp	r3, #9
9001aa24:	d8ce      	bhi.n	9001a9c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001aa26:	6833      	ldr	r3, [r6, #0]
9001aa28:	fb02 c303 	mla	r3, r2, r3, ip
9001aa2c:	6033      	str	r3, [r6, #0]
9001aa2e:	6803      	ldr	r3, [r0, #0]
9001aa30:	b10b      	cbz	r3, 9001aa36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001aa32:	3302      	adds	r3, #2
9001aa34:	6003      	str	r3, [r0, #0]
9001aa36:	680b      	ldr	r3, [r1, #0]
9001aa38:	b10b      	cbz	r3, 9001aa3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001aa3a:	3301      	adds	r3, #1
9001aa3c:	600b      	str	r3, [r1, #0]
9001aa3e:	6803      	ldr	r3, [r0, #0]
9001aa40:	b10b      	cbz	r3, 9001aa46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001aa42:	881c      	ldrh	r4, [r3, #0]
9001aa44:	e7e9      	b.n	9001aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001aa46:	680c      	ldr	r4, [r1, #0]
9001aa48:	2c00      	cmp	r4, #0
9001aa4a:	d0e6      	beq.n	9001aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001aa4c:	7824      	ldrb	r4, [r4, #0]
9001aa4e:	e7e4      	b.n	9001aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001aa50:	680b      	ldr	r3, [r1, #0]
9001aa52:	b10b      	cbz	r3, 9001aa58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001aa54:	781b      	ldrb	r3, [r3, #0]
9001aa56:	e7c5      	b.n	9001a9e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001aa58:	2200      	movs	r2, #0
9001aa5a:	240a      	movs	r4, #10
9001aa5c:	602a      	str	r2, [r5, #0]
9001aa5e:	3b30      	subs	r3, #48	; 0x30
9001aa60:	682a      	ldr	r2, [r5, #0]
9001aa62:	b29e      	uxth	r6, r3
9001aa64:	2e09      	cmp	r6, #9
9001aa66:	d813      	bhi.n	9001aa90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001aa68:	fb04 3302 	mla	r3, r4, r2, r3
9001aa6c:	602b      	str	r3, [r5, #0]
9001aa6e:	6803      	ldr	r3, [r0, #0]
9001aa70:	b10b      	cbz	r3, 9001aa76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001aa72:	3302      	adds	r3, #2
9001aa74:	6003      	str	r3, [r0, #0]
9001aa76:	680b      	ldr	r3, [r1, #0]
9001aa78:	b10b      	cbz	r3, 9001aa7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001aa7a:	3301      	adds	r3, #1
9001aa7c:	600b      	str	r3, [r1, #0]
9001aa7e:	6803      	ldr	r3, [r0, #0]
9001aa80:	b10b      	cbz	r3, 9001aa86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001aa82:	881b      	ldrh	r3, [r3, #0]
9001aa84:	e7eb      	b.n	9001aa5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa86:	680b      	ldr	r3, [r1, #0]
9001aa88:	2b00      	cmp	r3, #0
9001aa8a:	d0e8      	beq.n	9001aa5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa8c:	781b      	ldrb	r3, [r3, #0]
9001aa8e:	e7e6      	b.n	9001aa5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa90:	2a06      	cmp	r2, #6
9001aa92:	bfa8      	it	ge
9001aa94:	2206      	movge	r2, #6
9001aa96:	602a      	str	r2, [r5, #0]
9001aa98:	e7b1      	b.n	9001a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001aa9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001aa9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aa9e:	b0a3      	sub	sp, #140	; 0x8c
9001aaa0:	2600      	movs	r6, #0
9001aaa2:	4607      	mov	r7, r0
9001aaa4:	4688      	mov	r8, r1
9001aaa6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001aaaa:	4631      	mov	r1, r6
9001aaac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001aaae:	4648      	mov	r0, r9
9001aab0:	960d      	str	r6, [sp, #52]	; 0x34
9001aab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001aab6:	2242      	movs	r2, #66	; 0x42
9001aab8:	f00c fe00 	bl	900276bc <memset>
9001aabc:	b15f      	cbz	r7, 9001aad6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001aabe:	f108 3aff 	add.w	sl, r8, #4294967295
9001aac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001aac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001aac6:	b152      	cbz	r2, 9001aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001aac8:	8812      	ldrh	r2, [r2, #0]
9001aaca:	b10a      	cbz	r2, 9001aad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001aacc:	459a      	cmp	sl, r3
9001aace:	dc2e      	bgt.n	9001ab2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001aad0:	2200      	movs	r2, #0
9001aad2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001aad6:	4638      	mov	r0, r7
9001aad8:	b023      	add	sp, #140	; 0x8c
9001aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001aade:	9a08      	ldr	r2, [sp, #32]
9001aae0:	2a00      	cmp	r2, #0
9001aae2:	d0f5      	beq.n	9001aad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001aae4:	7812      	ldrb	r2, [r2, #0]
9001aae6:	e7f0      	b.n	9001aaca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001aae8:	2d00      	cmp	r5, #0
9001aaea:	d0ea      	beq.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001aaec:	782a      	ldrb	r2, [r5, #0]
9001aaee:	b142      	cbz	r2, 9001ab02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001aaf0:	2a25      	cmp	r2, #37	; 0x25
9001aaf2:	d001      	beq.n	9001aaf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001aaf4:	459a      	cmp	sl, r3
9001aaf6:	dc08      	bgt.n	9001ab0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001aaf8:	f1bb 0f00 	cmp.w	fp, #0
9001aafc:	d121      	bne.n	9001ab42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001aafe:	2d00      	cmp	r5, #0
9001ab00:	d0df      	beq.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001ab02:	782a      	ldrb	r2, [r5, #0]
9001ab04:	f04f 0b00 	mov.w	fp, #0
9001ab08:	e01d      	b.n	9001ab46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001ab0a:	f1bb 0f00 	cmp.w	fp, #0
9001ab0e:	d077      	beq.n	9001ac00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001ab10:	f8bb 2000 	ldrh.w	r2, [fp]
9001ab14:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001ab18:	f1bb 0f00 	cmp.w	fp, #0
9001ab1c:	d002      	beq.n	9001ab24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001ab1e:	f10b 0202 	add.w	r2, fp, #2
9001ab22:	9209      	str	r2, [sp, #36]	; 0x24
9001ab24:	b10d      	cbz	r5, 9001ab2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001ab26:	3501      	adds	r5, #1
9001ab28:	9508      	str	r5, [sp, #32]
9001ab2a:	3301      	adds	r3, #1
9001ab2c:	930d      	str	r3, [sp, #52]	; 0x34
9001ab2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ab30:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001ab34:	f1bb 0f00 	cmp.w	fp, #0
9001ab38:	d0d6      	beq.n	9001aae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001ab3a:	f8bb 2000 	ldrh.w	r2, [fp]
9001ab3e:	2a00      	cmp	r2, #0
9001ab40:	d1d6      	bne.n	9001aaf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001ab42:	f8bb 2000 	ldrh.w	r2, [fp]
9001ab46:	2a00      	cmp	r2, #0
9001ab48:	d0bb      	beq.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001ab4a:	459a      	cmp	sl, r3
9001ab4c:	ddb9      	ble.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001ab4e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001ab52:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001ab56:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001ab5a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001ab5e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001ab62:	960e      	str	r6, [sp, #56]	; 0x38
9001ab64:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001ab68:	960f      	str	r6, [sp, #60]	; 0x3c
9001ab6a:	f1bb 0f00 	cmp.w	fp, #0
9001ab6e:	d002      	beq.n	9001ab76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001ab70:	f10b 0302 	add.w	r3, fp, #2
9001ab74:	9309      	str	r3, [sp, #36]	; 0x24
9001ab76:	b10d      	cbz	r5, 9001ab7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001ab78:	1c6b      	adds	r3, r5, #1
9001ab7a:	9308      	str	r3, [sp, #32]
9001ab7c:	ab0f      	add	r3, sp, #60	; 0x3c
9001ab7e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001ab82:	a908      	add	r1, sp, #32
9001ab84:	a809      	add	r0, sp, #36	; 0x24
9001ab86:	9305      	str	r3, [sp, #20]
9001ab88:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001ab8c:	9304      	str	r3, [sp, #16]
9001ab8e:	ab0e      	add	r3, sp, #56	; 0x38
9001ab90:	9303      	str	r3, [sp, #12]
9001ab92:	ab0c      	add	r3, sp, #48	; 0x30
9001ab94:	9302      	str	r3, [sp, #8]
9001ab96:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001ab9a:	9301      	str	r3, [sp, #4]
9001ab9c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001aba0:	9300      	str	r3, [sp, #0]
9001aba2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001aba6:	f7ff fea8 	bl	9001a8fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001abaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001abac:	2b00      	cmp	r3, #0
9001abae:	bfbf      	itttt	lt
9001abb0:	6823      	ldrlt	r3, [r4, #0]
9001abb2:	3404      	addlt	r4, #4
9001abb4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001abb8:	930e      	strlt	r3, [sp, #56]	; 0x38
9001abba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001abbc:	2b00      	cmp	r3, #0
9001abbe:	bfbe      	ittt	lt
9001abc0:	6823      	ldrlt	r3, [r4, #0]
9001abc2:	3404      	addlt	r4, #4
9001abc4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001abc8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001abcc:	bfb8      	it	lt
9001abce:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001abd0:	b1d9      	cbz	r1, 9001ac0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001abd2:	880b      	ldrh	r3, [r1, #0]
9001abd4:	2b69      	cmp	r3, #105	; 0x69
9001abd6:	d01f      	beq.n	9001ac18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001abd8:	d82f      	bhi.n	9001ac3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001abda:	2b58      	cmp	r3, #88	; 0x58
9001abdc:	d01c      	beq.n	9001ac18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001abde:	d818      	bhi.n	9001ac12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001abe0:	2b25      	cmp	r3, #37	; 0x25
9001abe2:	d034      	beq.n	9001ac4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001abe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001abe6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001abea:	f1bb 0f00 	cmp.w	fp, #0
9001abee:	f000 80b7 	beq.w	9001ad60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001abf2:	f8bb 5000 	ldrh.w	r5, [fp]
9001abf6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001abfa:	3301      	adds	r3, #1
9001abfc:	930d      	str	r3, [sp, #52]	; 0x34
9001abfe:	e029      	b.n	9001ac54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001ac00:	b10d      	cbz	r5, 9001ac06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001ac02:	782a      	ldrb	r2, [r5, #0]
9001ac04:	e786      	b.n	9001ab14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001ac06:	462a      	mov	r2, r5
9001ac08:	e784      	b.n	9001ab14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001ac0a:	2a00      	cmp	r2, #0
9001ac0c:	d0ea      	beq.n	9001abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001ac0e:	7813      	ldrb	r3, [r2, #0]
9001ac10:	e7e0      	b.n	9001abd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001ac12:	3b63      	subs	r3, #99	; 0x63
9001ac14:	2b01      	cmp	r3, #1
9001ac16:	d8e5      	bhi.n	9001abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001ac18:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001ac1c:	b329      	cbz	r1, 9001ac6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001ac1e:	880b      	ldrh	r3, [r1, #0]
9001ac20:	2b69      	cmp	r3, #105	; 0x69
9001ac22:	d063      	beq.n	9001acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001ac24:	d825      	bhi.n	9001ac72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001ac26:	2b63      	cmp	r3, #99	; 0x63
9001ac28:	d038      	beq.n	9001ac9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001ac2a:	2b64      	cmp	r3, #100	; 0x64
9001ac2c:	d05e      	beq.n	9001acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001ac2e:	2b58      	cmp	r3, #88	; 0x58
9001ac30:	d07a      	beq.n	9001ad28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001ac32:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001ac36:	4625      	mov	r5, r4
9001ac38:	e036      	b.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ac3a:	2b73      	cmp	r3, #115	; 0x73
9001ac3c:	d0ec      	beq.n	9001ac18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001ac3e:	d802      	bhi.n	9001ac46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001ac40:	2b6f      	cmp	r3, #111	; 0x6f
9001ac42:	d1cf      	bne.n	9001abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001ac44:	e7e8      	b.n	9001ac18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001ac46:	2b75      	cmp	r3, #117	; 0x75
9001ac48:	d0e6      	beq.n	9001ac18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001ac4a:	2b78      	cmp	r3, #120	; 0x78
9001ac4c:	e7f9      	b.n	9001ac42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001ac4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac50:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ac56:	b10b      	cbz	r3, 9001ac5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001ac58:	3302      	adds	r3, #2
9001ac5a:	9309      	str	r3, [sp, #36]	; 0x24
9001ac5c:	9b08      	ldr	r3, [sp, #32]
9001ac5e:	2b00      	cmp	r3, #0
9001ac60:	f43f af2f 	beq.w	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001ac64:	3301      	adds	r3, #1
9001ac66:	9308      	str	r3, [sp, #32]
9001ac68:	e72b      	b.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001ac6a:	2a00      	cmp	r2, #0
9001ac6c:	d0e1      	beq.n	9001ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001ac6e:	7813      	ldrb	r3, [r2, #0]
9001ac70:	e7d6      	b.n	9001ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001ac72:	2b73      	cmp	r3, #115	; 0x73
9001ac74:	d036      	beq.n	9001ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001ac76:	d807      	bhi.n	9001ac88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001ac78:	2b6f      	cmp	r3, #111	; 0x6f
9001ac7a:	d1da      	bne.n	9001ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001ac7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac7e:	1d25      	adds	r5, r4, #4
9001ac80:	2308      	movs	r3, #8
9001ac82:	eba8 0202 	sub.w	r2, r8, r2
9001ac86:	e049      	b.n	9001ad1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001ac88:	2b75      	cmp	r3, #117	; 0x75
9001ac8a:	d042      	beq.n	9001ad12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001ac8c:	2b78      	cmp	r3, #120	; 0x78
9001ac8e:	d1d0      	bne.n	9001ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001ac90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac92:	1d25      	adds	r5, r4, #4
9001ac94:	2310      	movs	r3, #16
9001ac96:	eba8 0202 	sub.w	r2, r8, r2
9001ac9a:	e03f      	b.n	9001ad1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001ac9c:	6823      	ldr	r3, [r4, #0]
9001ac9e:	1d25      	adds	r5, r4, #4
9001aca0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001aca4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001aca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001acaa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001acae:	2b00      	cmp	r3, #0
9001acb0:	d051      	beq.n	9001ad56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001acb2:	881a      	ldrh	r2, [r3, #0]
9001acb4:	a80d      	add	r0, sp, #52	; 0x34
9001acb6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001acba:	462c      	mov	r4, r5
9001acbc:	9005      	str	r0, [sp, #20]
9001acbe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001acc2:	9004      	str	r0, [sp, #16]
9001acc4:	980e      	ldr	r0, [sp, #56]	; 0x38
9001acc6:	9003      	str	r0, [sp, #12]
9001acc8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001accc:	9002      	str	r0, [sp, #8]
9001acce:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001acd0:	9001      	str	r0, [sp, #4]
9001acd2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001acd6:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001acda:	9000      	str	r0, [sp, #0]
9001acdc:	a810      	add	r0, sp, #64	; 0x40
9001acde:	f7ff fd49 	bl	9001a774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001ace2:	e7b7      	b.n	9001ac54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001ace4:	1d25      	adds	r5, r4, #4
9001ace6:	6823      	ldr	r3, [r4, #0]
9001ace8:	9310      	str	r3, [sp, #64]	; 0x40
9001acea:	e7dd      	b.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001acec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001acee:	230a      	movs	r3, #10
9001acf0:	4649      	mov	r1, r9
9001acf2:	6820      	ldr	r0, [r4, #0]
9001acf4:	eba8 0202 	sub.w	r2, r8, r2
9001acf8:	1d25      	adds	r5, r4, #4
9001acfa:	b292      	uxth	r2, r2
9001acfc:	f7ff fd08 	bl	9001a710 <_ZN8touchgfx7Unicode4itoaElPtti>
9001ad00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001ad04:	2b2d      	cmp	r3, #45	; 0x2d
9001ad06:	d1cf      	bne.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ad08:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001ad0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ad0e:	3302      	adds	r3, #2
9001ad10:	e7ea      	b.n	9001ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001ad12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ad14:	1d25      	adds	r5, r4, #4
9001ad16:	230a      	movs	r3, #10
9001ad18:	eba8 0202 	sub.w	r2, r8, r2
9001ad1c:	b292      	uxth	r2, r2
9001ad1e:	4649      	mov	r1, r9
9001ad20:	6820      	ldr	r0, [r4, #0]
9001ad22:	f7ff fcd7 	bl	9001a6d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001ad26:	e7bf      	b.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ad28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ad2a:	2310      	movs	r3, #16
9001ad2c:	4649      	mov	r1, r9
9001ad2e:	6820      	ldr	r0, [r4, #0]
9001ad30:	eba8 0202 	sub.w	r2, r8, r2
9001ad34:	1d25      	adds	r5, r4, #4
9001ad36:	b292      	uxth	r2, r2
9001ad38:	f7ff fccc 	bl	9001a6d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001ad3c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001ad40:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001ad44:	2b00      	cmp	r3, #0
9001ad46:	d0af      	beq.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ad48:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001ad4c:	2919      	cmp	r1, #25
9001ad4e:	d8f7      	bhi.n	9001ad40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001ad50:	3b20      	subs	r3, #32
9001ad52:	8013      	strh	r3, [r2, #0]
9001ad54:	e7f4      	b.n	9001ad40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001ad56:	9a08      	ldr	r2, [sp, #32]
9001ad58:	2a00      	cmp	r2, #0
9001ad5a:	d0ab      	beq.n	9001acb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001ad5c:	7812      	ldrb	r2, [r2, #0]
9001ad5e:	e7a9      	b.n	9001acb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001ad60:	2d00      	cmp	r5, #0
9001ad62:	f43f af48 	beq.w	9001abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001ad66:	782d      	ldrb	r5, [r5, #0]
9001ad68:	e745      	b.n	9001abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001ad6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001ad6a:	b507      	push	{r0, r1, r2, lr}
9001ad6c:	9300      	str	r3, [sp, #0]
9001ad6e:	4613      	mov	r3, r2
9001ad70:	2200      	movs	r2, #0
9001ad72:	f7ff fe92 	bl	9001aa9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001ad76:	b003      	add	sp, #12
9001ad78:	f85d fb04 	ldr.w	pc, [sp], #4

9001ad7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001ad7c:	b40c      	push	{r2, r3}
9001ad7e:	b507      	push	{r0, r1, r2, lr}
9001ad80:	ab04      	add	r3, sp, #16
9001ad82:	f853 2b04 	ldr.w	r2, [r3], #4
9001ad86:	9301      	str	r3, [sp, #4]
9001ad88:	f7ff ffef 	bl	9001ad6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001ad8c:	b003      	add	sp, #12
9001ad8e:	f85d eb04 	ldr.w	lr, [sp], #4
9001ad92:	b002      	add	sp, #8
9001ad94:	4770      	bx	lr
	...

9001ad98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001ad98:	4b01      	ldr	r3, [pc, #4]	; (9001ada0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001ad9a:	6018      	str	r0, [r3, #0]
9001ad9c:	4770      	bx	lr
9001ad9e:	bf00      	nop
9001ada0:	240281fc 	.word	0x240281fc

9001ada4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001ada4:	4b06      	ldr	r3, [pc, #24]	; (9001adc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001ada6:	881a      	ldrh	r2, [r3, #0]
9001ada8:	4282      	cmp	r2, r0
9001adaa:	d807      	bhi.n	9001adbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001adac:	4b05      	ldr	r3, [pc, #20]	; (9001adc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001adae:	881b      	ldrh	r3, [r3, #0]
9001adb0:	4413      	add	r3, r2
9001adb2:	4298      	cmp	r0, r3
9001adb4:	bfac      	ite	ge
9001adb6:	2000      	movge	r0, #0
9001adb8:	2001      	movlt	r0, #1
9001adba:	4770      	bx	lr
9001adbc:	2000      	movs	r0, #0
9001adbe:	4770      	bx	lr
9001adc0:	2402821c 	.word	0x2402821c
9001adc4:	24028220 	.word	0x24028220

9001adc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001adc8:	b508      	push	{r3, lr}
9001adca:	4601      	mov	r1, r0
9001adcc:	f7ff ffea 	bl	9001ada4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001add0:	b118      	cbz	r0, 9001adda <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001add2:	4b02      	ldr	r3, [pc, #8]	; (9001addc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001add4:	681b      	ldr	r3, [r3, #0]
9001add6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001adda:	bd08      	pop	{r3, pc}
9001addc:	24028200 	.word	0x24028200

9001ade0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ade2:	4c24      	ldr	r4, [pc, #144]	; (9001ae74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001ade4:	6823      	ldr	r3, [r4, #0]
9001ade6:	2b00      	cmp	r3, #0
9001ade8:	d042      	beq.n	9001ae70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001adea:	4a23      	ldr	r2, [pc, #140]	; (9001ae78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001adec:	4d23      	ldr	r5, [pc, #140]	; (9001ae7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001adee:	8811      	ldrh	r1, [r2, #0]
9001adf0:	f8b5 c000 	ldrh.w	ip, [r5]
9001adf4:	4822      	ldr	r0, [pc, #136]	; (9001ae80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001adf6:	4461      	add	r1, ip
9001adf8:	1c4a      	adds	r2, r1, #1
9001adfa:	008f      	lsls	r7, r1, #2
9001adfc:	f022 0201 	bic.w	r2, r2, #1
9001ae00:	19de      	adds	r6, r3, r7
9001ae02:	0412      	lsls	r2, r2, #16
9001ae04:	6006      	str	r6, [r0, #0]
9001ae06:	4e1f      	ldr	r6, [pc, #124]	; (9001ae84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
9001ae08:	0c12      	lsrs	r2, r2, #16
9001ae0a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001ae0e:	19da      	adds	r2, r3, r7
9001ae10:	6032      	str	r2, [r6, #0]
9001ae12:	220e      	movs	r2, #14
9001ae14:	fb02 f20c 	mul.w	r2, r2, ip
9001ae18:	3203      	adds	r2, #3
9001ae1a:	f022 0203 	bic.w	r2, r2, #3
9001ae1e:	443a      	add	r2, r7
9001ae20:	4f19      	ldr	r7, [pc, #100]	; (9001ae88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001ae22:	4413      	add	r3, r2
9001ae24:	603b      	str	r3, [r7, #0]
9001ae26:	2300      	movs	r3, #0
9001ae28:	4f18      	ldr	r7, [pc, #96]	; (9001ae8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001ae2a:	469c      	mov	ip, r3
9001ae2c:	803b      	strh	r3, [r7, #0]
9001ae2e:	4f18      	ldr	r7, [pc, #96]	; (9001ae90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001ae30:	683f      	ldr	r7, [r7, #0]
9001ae32:	1aba      	subs	r2, r7, r2
9001ae34:	4f17      	ldr	r7, [pc, #92]	; (9001ae94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001ae36:	603a      	str	r2, [r7, #0]
9001ae38:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001ae3c:	4a16      	ldr	r2, [pc, #88]	; (9001ae98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001ae3e:	8013      	strh	r3, [r2, #0]
9001ae40:	428b      	cmp	r3, r1
9001ae42:	d10d      	bne.n	9001ae60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001ae44:	882d      	ldrh	r5, [r5, #0]
9001ae46:	2300      	movs	r3, #0
9001ae48:	6830      	ldr	r0, [r6, #0]
9001ae4a:	240e      	movs	r4, #14
9001ae4c:	429d      	cmp	r5, r3
9001ae4e:	d90f      	bls.n	9001ae70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001ae50:	fb04 0203 	mla	r2, r4, r3, r0
9001ae54:	3301      	adds	r3, #1
9001ae56:	7b11      	ldrb	r1, [r2, #12]
9001ae58:	f36f 1145 	bfc	r1, #5, #1
9001ae5c:	7311      	strb	r1, [r2, #12]
9001ae5e:	e7f5      	b.n	9001ae4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
9001ae60:	6822      	ldr	r2, [r4, #0]
9001ae62:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001ae66:	6802      	ldr	r2, [r0, #0]
9001ae68:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001ae6c:	3301      	adds	r3, #1
9001ae6e:	e7e7      	b.n	9001ae40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
9001ae70:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001ae72:	bf00      	nop
9001ae74:	24028200 	.word	0x24028200
9001ae78:	2402821c 	.word	0x2402821c
9001ae7c:	24028220 	.word	0x24028220
9001ae80:	24028214 	.word	0x24028214
9001ae84:	24028204 	.word	0x24028204
9001ae88:	2402820c 	.word	0x2402820c
9001ae8c:	2402821e 	.word	0x2402821e
9001ae90:	24028208 	.word	0x24028208
9001ae94:	24028218 	.word	0x24028218
9001ae98:	24028210 	.word	0x24028210

9001ae9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001ae9c:	4b06      	ldr	r3, [pc, #24]	; (9001aeb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001ae9e:	681b      	ldr	r3, [r3, #0]
9001aea0:	b943      	cbnz	r3, 9001aeb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001aea2:	b139      	cbz	r1, 9001aeb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001aea4:	4b05      	ldr	r3, [pc, #20]	; (9001aebc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
9001aea6:	801a      	strh	r2, [r3, #0]
9001aea8:	4b05      	ldr	r3, [pc, #20]	; (9001aec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001aeaa:	6019      	str	r1, [r3, #0]
9001aeac:	4b05      	ldr	r3, [pc, #20]	; (9001aec4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001aeae:	6018      	str	r0, [r3, #0]
9001aeb0:	f7ff bf96 	b.w	9001ade0 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001aeb4:	4770      	bx	lr
9001aeb6:	bf00      	nop
9001aeb8:	2402820c 	.word	0x2402820c
9001aebc:	24028220 	.word	0x24028220
9001aec0:	24028208 	.word	0x24028208
9001aec4:	24028200 	.word	0x24028200

9001aec8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001aec8:	b470      	push	{r4, r5, r6}
9001aeca:	4c07      	ldr	r4, [pc, #28]	; (9001aee8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001aecc:	4605      	mov	r5, r0
9001aece:	4610      	mov	r0, r2
9001aed0:	9a03      	ldr	r2, [sp, #12]
9001aed2:	6826      	ldr	r6, [r4, #0]
9001aed4:	b936      	cbnz	r6, 9001aee4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001aed6:	6025      	str	r5, [r4, #0]
9001aed8:	4c04      	ldr	r4, [pc, #16]	; (9001aeec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001aeda:	8021      	strh	r1, [r4, #0]
9001aedc:	4619      	mov	r1, r3
9001aede:	bc70      	pop	{r4, r5, r6}
9001aee0:	f7ff bfdc 	b.w	9001ae9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001aee4:	bc70      	pop	{r4, r5, r6}
9001aee6:	4770      	bx	lr
9001aee8:	24028224 	.word	0x24028224
9001aeec:	2402821c 	.word	0x2402821c

9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001aef0:	4a12      	ldr	r2, [pc, #72]	; (9001af3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
9001aef2:	8803      	ldrh	r3, [r0, #0]
9001aef4:	8812      	ldrh	r2, [r2, #0]
9001aef6:	4293      	cmp	r3, r2
9001aef8:	d207      	bcs.n	9001af0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001aefa:	4a11      	ldr	r2, [pc, #68]	; (9001af40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001aefc:	2114      	movs	r1, #20
9001aefe:	6812      	ldr	r2, [r2, #0]
9001af00:	fb01 2303 	mla	r3, r1, r3, r2
9001af04:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001af08:	4770      	bx	lr
9001af0a:	490e      	ldr	r1, [pc, #56]	; (9001af44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001af0c:	8809      	ldrh	r1, [r1, #0]
9001af0e:	4411      	add	r1, r2
9001af10:	428b      	cmp	r3, r1
9001af12:	da04      	bge.n	9001af1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001af14:	1a9b      	subs	r3, r3, r2
9001af16:	4a0c      	ldr	r2, [pc, #48]	; (9001af48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001af18:	210e      	movs	r1, #14
9001af1a:	6812      	ldr	r2, [r2, #0]
9001af1c:	e7f0      	b.n	9001af00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001af1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001af22:	4293      	cmp	r3, r2
9001af24:	d108      	bne.n	9001af38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001af26:	4b09      	ldr	r3, [pc, #36]	; (9001af4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001af28:	781b      	ldrb	r3, [r3, #0]
9001af2a:	b91b      	cbnz	r3, 9001af34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001af2c:	4b08      	ldr	r3, [pc, #32]	; (9001af50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001af2e:	f9b3 0000 	ldrsh.w	r0, [r3]
9001af32:	4770      	bx	lr
9001af34:	4b07      	ldr	r3, [pc, #28]	; (9001af54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001af36:	e7fa      	b.n	9001af2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001af38:	2000      	movs	r0, #0
9001af3a:	4770      	bx	lr
9001af3c:	2402821c 	.word	0x2402821c
9001af40:	24028224 	.word	0x24028224
9001af44:	24028220 	.word	0x24028220
9001af48:	24028204 	.word	0x24028204
9001af4c:	2402818c 	.word	0x2402818c
9001af50:	2402818e 	.word	0x2402818e
9001af54:	24028190 	.word	0x24028190

9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001af58:	4a12      	ldr	r2, [pc, #72]	; (9001afa4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001af5a:	8803      	ldrh	r3, [r0, #0]
9001af5c:	8812      	ldrh	r2, [r2, #0]
9001af5e:	4293      	cmp	r3, r2
9001af60:	d207      	bcs.n	9001af72 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001af62:	4a11      	ldr	r2, [pc, #68]	; (9001afa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001af64:	2114      	movs	r1, #20
9001af66:	6812      	ldr	r2, [r2, #0]
9001af68:	fb01 2303 	mla	r3, r1, r3, r2
9001af6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
9001af70:	4770      	bx	lr
9001af72:	490e      	ldr	r1, [pc, #56]	; (9001afac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001af74:	8809      	ldrh	r1, [r1, #0]
9001af76:	4411      	add	r1, r2
9001af78:	428b      	cmp	r3, r1
9001af7a:	da04      	bge.n	9001af86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001af7c:	1a9b      	subs	r3, r3, r2
9001af7e:	4a0c      	ldr	r2, [pc, #48]	; (9001afb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001af80:	210e      	movs	r1, #14
9001af82:	6812      	ldr	r2, [r2, #0]
9001af84:	e7f0      	b.n	9001af68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001af86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001af8a:	4293      	cmp	r3, r2
9001af8c:	d108      	bne.n	9001afa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001af8e:	4b09      	ldr	r3, [pc, #36]	; (9001afb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001af90:	781b      	ldrb	r3, [r3, #0]
9001af92:	b91b      	cbnz	r3, 9001af9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001af94:	4b08      	ldr	r3, [pc, #32]	; (9001afb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001af96:	f9b3 0000 	ldrsh.w	r0, [r3]
9001af9a:	4770      	bx	lr
9001af9c:	4b07      	ldr	r3, [pc, #28]	; (9001afbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001af9e:	e7fa      	b.n	9001af96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
9001afa0:	2000      	movs	r0, #0
9001afa2:	4770      	bx	lr
9001afa4:	2402821c 	.word	0x2402821c
9001afa8:	24028224 	.word	0x24028224
9001afac:	24028220 	.word	0x24028220
9001afb0:	24028204 	.word	0x24028204
9001afb4:	2402818c 	.word	0x2402818c
9001afb8:	24028190 	.word	0x24028190
9001afbc:	2402818e 	.word	0x2402818e

9001afc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001afc0:	4a1f      	ldr	r2, [pc, #124]	; (9001b040 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
9001afc2:	b510      	push	{r4, lr}
9001afc4:	880b      	ldrh	r3, [r1, #0]
9001afc6:	8812      	ldrh	r2, [r2, #0]
9001afc8:	4293      	cmp	r3, r2
9001afca:	d213      	bcs.n	9001aff4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001afcc:	4a1d      	ldr	r2, [pc, #116]	; (9001b044 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001afce:	2114      	movs	r1, #20
9001afd0:	6812      	ldr	r2, [r2, #0]
9001afd2:	fb01 2303 	mla	r3, r1, r3, r2
9001afd6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001afda:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001afde:	8a1a      	ldrh	r2, [r3, #16]
9001afe0:	8a5b      	ldrh	r3, [r3, #18]
9001afe2:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001afe6:	8004      	strh	r4, [r0, #0]
9001afe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001afec:	8041      	strh	r1, [r0, #2]
9001afee:	8082      	strh	r2, [r0, #4]
9001aff0:	80c3      	strh	r3, [r0, #6]
9001aff2:	e00e      	b.n	9001b012 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001aff4:	4914      	ldr	r1, [pc, #80]	; (9001b048 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
9001aff6:	8809      	ldrh	r1, [r1, #0]
9001aff8:	4411      	add	r1, r2
9001affa:	428b      	cmp	r3, r1
9001affc:	da0a      	bge.n	9001b014 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001affe:	1a9b      	subs	r3, r3, r2
9001b000:	4a12      	ldr	r2, [pc, #72]	; (9001b04c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001b002:	210e      	movs	r1, #14
9001b004:	6812      	ldr	r2, [r2, #0]
9001b006:	fb01 2303 	mla	r3, r1, r3, r2
9001b00a:	681a      	ldr	r2, [r3, #0]
9001b00c:	6002      	str	r2, [r0, #0]
9001b00e:	685a      	ldr	r2, [r3, #4]
9001b010:	6042      	str	r2, [r0, #4]
9001b012:	bd10      	pop	{r4, pc}
9001b014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b018:	4293      	cmp	r3, r2
9001b01a:	d10b      	bne.n	9001b034 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001b01c:	4b0c      	ldr	r3, [pc, #48]	; (9001b050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001b01e:	f9b3 1000 	ldrsh.w	r1, [r3]
9001b022:	4b0c      	ldr	r3, [pc, #48]	; (9001b054 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001b024:	8081      	strh	r1, [r0, #4]
9001b026:	f9b3 2000 	ldrsh.w	r2, [r3]
9001b02a:	2300      	movs	r3, #0
9001b02c:	80c2      	strh	r2, [r0, #6]
9001b02e:	8003      	strh	r3, [r0, #0]
9001b030:	8043      	strh	r3, [r0, #2]
9001b032:	e7ee      	b.n	9001b012 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b034:	2300      	movs	r3, #0
9001b036:	8003      	strh	r3, [r0, #0]
9001b038:	8043      	strh	r3, [r0, #2]
9001b03a:	8083      	strh	r3, [r0, #4]
9001b03c:	e7d8      	b.n	9001aff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001b03e:	bf00      	nop
9001b040:	2402821c 	.word	0x2402821c
9001b044:	24028224 	.word	0x24028224
9001b048:	24028220 	.word	0x24028220
9001b04c:	24028204 	.word	0x24028204
9001b050:	24028188 	.word	0x24028188
9001b054:	2402818a 	.word	0x2402818a

9001b058 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001b058:	4a17      	ldr	r2, [pc, #92]	; (9001b0b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001b05a:	8803      	ldrh	r3, [r0, #0]
9001b05c:	8812      	ldrh	r2, [r2, #0]
9001b05e:	4293      	cmp	r3, r2
9001b060:	d213      	bcs.n	9001b08a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001b062:	4a16      	ldr	r2, [pc, #88]	; (9001b0bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001b064:	2114      	movs	r1, #20
9001b066:	6812      	ldr	r2, [r2, #0]
9001b068:	fb01 2303 	mla	r3, r1, r3, r2
9001b06c:	8a1a      	ldrh	r2, [r3, #16]
9001b06e:	8919      	ldrh	r1, [r3, #8]
9001b070:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b074:	428a      	cmp	r2, r1
9001b076:	db1d      	blt.n	9001b0b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b078:	8a58      	ldrh	r0, [r3, #18]
9001b07a:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001b07e:	895b      	ldrh	r3, [r3, #10]
9001b080:	4298      	cmp	r0, r3
9001b082:	bfac      	ite	ge
9001b084:	2000      	movge	r0, #0
9001b086:	2001      	movlt	r0, #1
9001b088:	4770      	bx	lr
9001b08a:	490d      	ldr	r1, [pc, #52]	; (9001b0c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001b08c:	8809      	ldrh	r1, [r1, #0]
9001b08e:	4411      	add	r1, r2
9001b090:	428b      	cmp	r3, r1
9001b092:	da0d      	bge.n	9001b0b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001b094:	1a9b      	subs	r3, r3, r2
9001b096:	4a0b      	ldr	r2, [pc, #44]	; (9001b0c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001b098:	210e      	movs	r1, #14
9001b09a:	6812      	ldr	r2, [r2, #0]
9001b09c:	fb01 2303 	mla	r3, r1, r3, r2
9001b0a0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001b0a4:	891a      	ldrh	r2, [r3, #8]
9001b0a6:	4291      	cmp	r1, r2
9001b0a8:	db04      	blt.n	9001b0b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b0aa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001b0ae:	e7e6      	b.n	9001b07e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
9001b0b0:	2000      	movs	r0, #0
9001b0b2:	4770      	bx	lr
9001b0b4:	2001      	movs	r0, #1
9001b0b6:	4770      	bx	lr
9001b0b8:	2402821c 	.word	0x2402821c
9001b0bc:	24028224 	.word	0x24028224
9001b0c0:	24028220 	.word	0x24028220
9001b0c4:	24028204 	.word	0x24028204

9001b0c8 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001b0c8:	4a12      	ldr	r2, [pc, #72]	; (9001b114 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001b0ca:	8803      	ldrh	r3, [r0, #0]
9001b0cc:	8811      	ldrh	r1, [r2, #0]
9001b0ce:	428b      	cmp	r3, r1
9001b0d0:	d20b      	bcs.n	9001b0ea <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001b0d2:	4a11      	ldr	r2, [pc, #68]	; (9001b118 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b0d4:	6812      	ldr	r2, [r2, #0]
9001b0d6:	b112      	cbz	r2, 9001b0de <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001b0d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b0dc:	b9c0      	cbnz	r0, 9001b110 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001b0de:	4a0f      	ldr	r2, [pc, #60]	; (9001b11c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001b0e0:	6811      	ldr	r1, [r2, #0]
9001b0e2:	2214      	movs	r2, #20
9001b0e4:	4353      	muls	r3, r2
9001b0e6:	58c8      	ldr	r0, [r1, r3]
9001b0e8:	4770      	bx	lr
9001b0ea:	4a0d      	ldr	r2, [pc, #52]	; (9001b120 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001b0ec:	8812      	ldrh	r2, [r2, #0]
9001b0ee:	440a      	add	r2, r1
9001b0f0:	4293      	cmp	r3, r2
9001b0f2:	da04      	bge.n	9001b0fe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001b0f4:	4a08      	ldr	r2, [pc, #32]	; (9001b118 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b0f6:	6812      	ldr	r2, [r2, #0]
9001b0f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b0fc:	4770      	bx	lr
9001b0fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b102:	4293      	cmp	r3, r2
9001b104:	d103      	bne.n	9001b10e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001b106:	4b07      	ldr	r3, [pc, #28]	; (9001b124 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001b108:	681b      	ldr	r3, [r3, #0]
9001b10a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001b10c:	4770      	bx	lr
9001b10e:	2000      	movs	r0, #0
9001b110:	4770      	bx	lr
9001b112:	bf00      	nop
9001b114:	2402821c 	.word	0x2402821c
9001b118:	24028200 	.word	0x24028200
9001b11c:	24028224 	.word	0x24028224
9001b120:	24028220 	.word	0x24028220
9001b124:	24028194 	.word	0x24028194

9001b128 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001b128:	4b24      	ldr	r3, [pc, #144]	; (9001b1bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001b12a:	8802      	ldrh	r2, [r0, #0]
9001b12c:	8818      	ldrh	r0, [r3, #0]
9001b12e:	4282      	cmp	r2, r0
9001b130:	d221      	bcs.n	9001b176 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001b132:	4b23      	ldr	r3, [pc, #140]	; (9001b1c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001b134:	6819      	ldr	r1, [r3, #0]
9001b136:	2314      	movs	r3, #20
9001b138:	fb03 1302 	mla	r3, r3, r2, r1
9001b13c:	6858      	ldr	r0, [r3, #4]
9001b13e:	2800      	cmp	r0, #0
9001b140:	d03a      	beq.n	9001b1b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b142:	4920      	ldr	r1, [pc, #128]	; (9001b1c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b144:	6809      	ldr	r1, [r1, #0]
9001b146:	2900      	cmp	r1, #0
9001b148:	d036      	beq.n	9001b1b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b14a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001b14e:	2900      	cmp	r1, #0
9001b150:	d032      	beq.n	9001b1b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b152:	891a      	ldrh	r2, [r3, #8]
9001b154:	8958      	ldrh	r0, [r3, #10]
9001b156:	4350      	muls	r0, r2
9001b158:	7c5a      	ldrb	r2, [r3, #17]
9001b15a:	7cdb      	ldrb	r3, [r3, #19]
9001b15c:	0952      	lsrs	r2, r2, #5
9001b15e:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001b162:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001b166:	2b0b      	cmp	r3, #11
9001b168:	bf18      	it	ne
9001b16a:	0040      	lslne	r0, r0, #1
9001b16c:	3003      	adds	r0, #3
9001b16e:	f020 0003 	bic.w	r0, r0, #3
9001b172:	4408      	add	r0, r1
9001b174:	4770      	bx	lr
9001b176:	4b14      	ldr	r3, [pc, #80]	; (9001b1c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001b178:	881b      	ldrh	r3, [r3, #0]
9001b17a:	4403      	add	r3, r0
9001b17c:	429a      	cmp	r2, r3
9001b17e:	da1a      	bge.n	9001b1b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b180:	4b12      	ldr	r3, [pc, #72]	; (9001b1cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001b182:	1a10      	subs	r0, r2, r0
9001b184:	210e      	movs	r1, #14
9001b186:	681b      	ldr	r3, [r3, #0]
9001b188:	fb01 3000 	mla	r0, r1, r0, r3
9001b18c:	7b03      	ldrb	r3, [r0, #12]
9001b18e:	f003 031f 	and.w	r3, r3, #31
9001b192:	2b0b      	cmp	r3, #11
9001b194:	d10b      	bne.n	9001b1ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001b196:	8903      	ldrh	r3, [r0, #8]
9001b198:	8940      	ldrh	r0, [r0, #10]
9001b19a:	4358      	muls	r0, r3
9001b19c:	4b09      	ldr	r3, [pc, #36]	; (9001b1c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b19e:	3003      	adds	r0, #3
9001b1a0:	6819      	ldr	r1, [r3, #0]
9001b1a2:	f020 0303 	bic.w	r3, r0, #3
9001b1a6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001b1aa:	4418      	add	r0, r3
9001b1ac:	4770      	bx	lr
9001b1ae:	2b0d      	cmp	r3, #13
9001b1b0:	d101      	bne.n	9001b1b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b1b2:	300d      	adds	r0, #13
9001b1b4:	4770      	bx	lr
9001b1b6:	2000      	movs	r0, #0
9001b1b8:	4770      	bx	lr
9001b1ba:	bf00      	nop
9001b1bc:	2402821c 	.word	0x2402821c
9001b1c0:	24028224 	.word	0x24028224
9001b1c4:	24028200 	.word	0x24028200
9001b1c8:	24028220 	.word	0x24028220
9001b1cc:	24028204 	.word	0x24028204

9001b1d0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001b1d0:	4a17      	ldr	r2, [pc, #92]	; (9001b230 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001b1d2:	b510      	push	{r4, lr}
9001b1d4:	8803      	ldrh	r3, [r0, #0]
9001b1d6:	8812      	ldrh	r2, [r2, #0]
9001b1d8:	4293      	cmp	r3, r2
9001b1da:	d20c      	bcs.n	9001b1f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001b1dc:	4a15      	ldr	r2, [pc, #84]	; (9001b234 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001b1de:	2114      	movs	r1, #20
9001b1e0:	6812      	ldr	r2, [r2, #0]
9001b1e2:	fb01 2303 	mla	r3, r1, r3, r2
9001b1e6:	7c58      	ldrb	r0, [r3, #17]
9001b1e8:	0942      	lsrs	r2, r0, #5
9001b1ea:	7cd8      	ldrb	r0, [r3, #19]
9001b1ec:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001b1f0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001b1f4:	bd10      	pop	{r4, pc}
9001b1f6:	4910      	ldr	r1, [pc, #64]	; (9001b238 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001b1f8:	8809      	ldrh	r1, [r1, #0]
9001b1fa:	4411      	add	r1, r2
9001b1fc:	428b      	cmp	r3, r1
9001b1fe:	da09      	bge.n	9001b214 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001b200:	1a9b      	subs	r3, r3, r2
9001b202:	4a0e      	ldr	r2, [pc, #56]	; (9001b23c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001b204:	210e      	movs	r1, #14
9001b206:	6812      	ldr	r2, [r2, #0]
9001b208:	fb01 2303 	mla	r3, r1, r3, r2
9001b20c:	7b18      	ldrb	r0, [r3, #12]
9001b20e:	f000 001f 	and.w	r0, r0, #31
9001b212:	e7ef      	b.n	9001b1f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b214:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b218:	4293      	cmp	r3, r2
9001b21a:	d106      	bne.n	9001b22a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001b21c:	f7f7 fe28 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
9001b220:	6803      	ldr	r3, [r0, #0]
9001b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b228:	4718      	bx	r3
9001b22a:	2000      	movs	r0, #0
9001b22c:	e7e2      	b.n	9001b1f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b22e:	bf00      	nop
9001b230:	2402821c 	.word	0x2402821c
9001b234:	24028224 	.word	0x24028224
9001b238:	24028220 	.word	0x24028220
9001b23c:	24028204 	.word	0x24028204

9001b240 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001b240:	2010      	movs	r0, #16
9001b242:	4770      	bx	lr

9001b244 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001b244:	4b02      	ldr	r3, [pc, #8]	; (9001b250 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001b246:	8818      	ldrh	r0, [r3, #0]
9001b248:	0040      	lsls	r0, r0, #1
9001b24a:	b280      	uxth	r0, r0
9001b24c:	4770      	bx	lr
9001b24e:	bf00      	nop
9001b250:	2402818e 	.word	0x2402818e

9001b254 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001b254:	2bff      	cmp	r3, #255	; 0xff
9001b256:	d050      	beq.n	9001b2fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001b258:	2a0b      	cmp	r2, #11
9001b25a:	d04a      	beq.n	9001b2f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b25c:	d80e      	bhi.n	9001b27c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001b25e:	2a03      	cmp	r2, #3
9001b260:	d03f      	beq.n	9001b2e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001b262:	d804      	bhi.n	9001b26e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001b264:	2a01      	cmp	r2, #1
9001b266:	d03e      	beq.n	9001b2e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001b268:	d93f      	bls.n	9001b2ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001b26a:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001b26c:	4770      	bx	lr
9001b26e:	2a09      	cmp	r2, #9
9001b270:	d03f      	beq.n	9001b2f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b272:	d83c      	bhi.n	9001b2ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b274:	2a08      	cmp	r2, #8
9001b276:	d03a      	beq.n	9001b2ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b278:	2000      	movs	r0, #0
9001b27a:	4770      	bx	lr
9001b27c:	2a2f      	cmp	r2, #47	; 0x2f
9001b27e:	d024      	beq.n	9001b2ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001b280:	d80d      	bhi.n	9001b29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001b282:	2a2d      	cmp	r2, #45	; 0x2d
9001b284:	d014      	beq.n	9001b2b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001b286:	d826      	bhi.n	9001b2d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001b288:	2a2c      	cmp	r2, #44	; 0x2c
9001b28a:	d1f5      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b28c:	684b      	ldr	r3, [r1, #4]
9001b28e:	781b      	ldrb	r3, [r3, #0]
9001b290:	2b01      	cmp	r3, #1
9001b292:	d018      	beq.n	9001b2c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001b294:	d323      	bcc.n	9001b2de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001b296:	2b02      	cmp	r3, #2
9001b298:	d1ee      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b29a:	6880      	ldr	r0, [r0, #8]
9001b29c:	4770      	bx	lr
9001b29e:	2a31      	cmp	r2, #49	; 0x31
9001b2a0:	d004      	beq.n	9001b2ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001b2a2:	d328      	bcc.n	9001b2f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b2a4:	2a32      	cmp	r2, #50	; 0x32
9001b2a6:	d026      	beq.n	9001b2f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b2a8:	2a33      	cmp	r2, #51	; 0x33
9001b2aa:	d1e5      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2ac:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001b2ae:	4770      	bx	lr
9001b2b0:	684b      	ldr	r3, [r1, #4]
9001b2b2:	781b      	ldrb	r3, [r3, #0]
9001b2b4:	2b01      	cmp	r3, #1
9001b2b6:	d004      	beq.n	9001b2c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001b2b8:	d30b      	bcc.n	9001b2d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001b2ba:	2b02      	cmp	r3, #2
9001b2bc:	d1dc      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2be:	6900      	ldr	r0, [r0, #16]
9001b2c0:	4770      	bx	lr
9001b2c2:	6a00      	ldr	r0, [r0, #32]
9001b2c4:	4770      	bx	lr
9001b2c6:	6980      	ldr	r0, [r0, #24]
9001b2c8:	4770      	bx	lr
9001b2ca:	684b      	ldr	r3, [r1, #4]
9001b2cc:	781b      	ldrb	r3, [r3, #0]
9001b2ce:	2b00      	cmp	r3, #0
9001b2d0:	d1d2      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001b2d4:	4770      	bx	lr
9001b2d6:	684b      	ldr	r3, [r1, #4]
9001b2d8:	781b      	ldrb	r3, [r3, #0]
9001b2da:	2b00      	cmp	r3, #0
9001b2dc:	d1cc      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2de:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001b2e0:	4770      	bx	lr
9001b2e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001b2e4:	4770      	bx	lr
9001b2e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001b2e8:	4770      	bx	lr
9001b2ea:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001b2ec:	4770      	bx	lr
9001b2ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001b2f0:	4770      	bx	lr
9001b2f2:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001b2f4:	4770      	bx	lr
9001b2f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001b2f8:	4770      	bx	lr
9001b2fa:	2a0b      	cmp	r2, #11
9001b2fc:	d049      	beq.n	9001b392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b2fe:	d80e      	bhi.n	9001b31e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001b300:	2a03      	cmp	r2, #3
9001b302:	d040      	beq.n	9001b386 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001b304:	d804      	bhi.n	9001b310 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001b306:	2a01      	cmp	r2, #1
9001b308:	d03f      	beq.n	9001b38a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001b30a:	d940      	bls.n	9001b38e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001b30c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001b30e:	4770      	bx	lr
9001b310:	2a09      	cmp	r2, #9
9001b312:	d03e      	beq.n	9001b392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b314:	d801      	bhi.n	9001b31a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001b316:	2a08      	cmp	r2, #8
9001b318:	d1ae      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b31a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001b31c:	4770      	bx	lr
9001b31e:	2a2f      	cmp	r2, #47	; 0x2f
9001b320:	d024      	beq.n	9001b36c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001b322:	d80d      	bhi.n	9001b340 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001b324:	2a2d      	cmp	r2, #45	; 0x2d
9001b326:	d014      	beq.n	9001b352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001b328:	d826      	bhi.n	9001b378 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001b32a:	2a2c      	cmp	r2, #44	; 0x2c
9001b32c:	d1a4      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b32e:	684b      	ldr	r3, [r1, #4]
9001b330:	781b      	ldrb	r3, [r3, #0]
9001b332:	2b01      	cmp	r3, #1
9001b334:	d018      	beq.n	9001b368 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001b336:	d324      	bcc.n	9001b382 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001b338:	2b02      	cmp	r3, #2
9001b33a:	d19d      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b33c:	68c0      	ldr	r0, [r0, #12]
9001b33e:	4770      	bx	lr
9001b340:	2a31      	cmp	r2, #49	; 0x31
9001b342:	d004      	beq.n	9001b34e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001b344:	d327      	bcc.n	9001b396 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b346:	2a32      	cmp	r2, #50	; 0x32
9001b348:	d025      	beq.n	9001b396 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b34a:	2a33      	cmp	r2, #51	; 0x33
9001b34c:	d194      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b34e:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001b350:	4770      	bx	lr
9001b352:	684b      	ldr	r3, [r1, #4]
9001b354:	781b      	ldrb	r3, [r3, #0]
9001b356:	2b01      	cmp	r3, #1
9001b358:	d004      	beq.n	9001b364 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001b35a:	d30b      	bcc.n	9001b374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001b35c:	2b02      	cmp	r3, #2
9001b35e:	d18b      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b360:	6940      	ldr	r0, [r0, #20]
9001b362:	4770      	bx	lr
9001b364:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001b366:	4770      	bx	lr
9001b368:	69c0      	ldr	r0, [r0, #28]
9001b36a:	4770      	bx	lr
9001b36c:	684b      	ldr	r3, [r1, #4]
9001b36e:	781b      	ldrb	r3, [r3, #0]
9001b370:	2b00      	cmp	r3, #0
9001b372:	d181      	bne.n	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b374:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001b376:	4770      	bx	lr
9001b378:	684b      	ldr	r3, [r1, #4]
9001b37a:	781b      	ldrb	r3, [r3, #0]
9001b37c:	2b00      	cmp	r3, #0
9001b37e:	f47f af7b 	bne.w	9001b278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b382:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001b384:	4770      	bx	lr
9001b386:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001b388:	4770      	bx	lr
9001b38a:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001b38c:	4770      	bx	lr
9001b38e:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001b390:	4770      	bx	lr
9001b392:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001b394:	4770      	bx	lr
9001b396:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001b398:	4770      	bx	lr

9001b39a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b39e:	b087      	sub	sp, #28
9001b3a0:	9815      	ldr	r0, [sp, #84]	; 0x54
9001b3a2:	9205      	str	r2, [sp, #20]
9001b3a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b3a8:	9101      	str	r1, [sp, #4]
9001b3aa:	9202      	str	r2, [sp, #8]
9001b3ac:	6841      	ldr	r1, [r0, #4]
9001b3ae:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001b3b2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001b3b6:	fb01 2404 	mla	r4, r1, r4, r2
9001b3ba:	6802      	ldr	r2, [r0, #0]
9001b3bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b3c0:	f8de 2000 	ldr.w	r2, [lr]
9001b3c4:	9203      	str	r2, [sp, #12]
9001b3c6:	f8de 2004 	ldr.w	r2, [lr, #4]
9001b3ca:	3204      	adds	r2, #4
9001b3cc:	9204      	str	r2, [sp, #16]
9001b3ce:	9a02      	ldr	r2, [sp, #8]
9001b3d0:	43d6      	mvns	r6, r2
9001b3d2:	b2f6      	uxtb	r6, r6
9001b3d4:	9a01      	ldr	r2, [sp, #4]
9001b3d6:	2a00      	cmp	r2, #0
9001b3d8:	dc03      	bgt.n	9001b3e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001b3da:	9a05      	ldr	r2, [sp, #20]
9001b3dc:	2a00      	cmp	r2, #0
9001b3de:	f340 8129 	ble.w	9001b634 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b3e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b3e4:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001b3e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b3ee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001b3f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b3f6:	2b00      	cmp	r3, #0
9001b3f8:	dd0e      	ble.n	9001b418 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001b3fa:	1408      	asrs	r0, r1, #16
9001b3fc:	d405      	bmi.n	9001b40a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b3fe:	4560      	cmp	r0, ip
9001b400:	da03      	bge.n	9001b40a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b402:	1410      	asrs	r0, r2, #16
9001b404:	d401      	bmi.n	9001b40a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b406:	42b8      	cmp	r0, r7
9001b408:	db07      	blt.n	9001b41a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001b40a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b40c:	3b01      	subs	r3, #1
9001b40e:	3402      	adds	r4, #2
9001b410:	4401      	add	r1, r0
9001b412:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b414:	4402      	add	r2, r0
9001b416:	e7ee      	b.n	9001b3f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001b418:	d071      	beq.n	9001b4fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001b41a:	1e58      	subs	r0, r3, #1
9001b41c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001b41e:	fb05 1500 	mla	r5, r5, r0, r1
9001b422:	142d      	asrs	r5, r5, #16
9001b424:	d45f      	bmi.n	9001b4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b426:	4565      	cmp	r5, ip
9001b428:	da5d      	bge.n	9001b4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b42a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001b42c:	fb05 2000 	mla	r0, r5, r0, r2
9001b430:	1400      	asrs	r0, r0, #16
9001b432:	d458      	bmi.n	9001b4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b434:	42b8      	cmp	r0, r7
9001b436:	da56      	bge.n	9001b4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b438:	4699      	mov	r9, r3
9001b43a:	46a2      	mov	sl, r4
9001b43c:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001b440:	f1b9 0f00 	cmp.w	r9, #0
9001b444:	dd57      	ble.n	9001b4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001b446:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001b44a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001b44e:	9803      	ldr	r0, [sp, #12]
9001b450:	140d      	asrs	r5, r1, #16
9001b452:	f109 39ff 	add.w	r9, r9, #4294967295
9001b456:	fb07 000c 	mla	r0, r7, ip, r0
9001b45a:	5d40      	ldrb	r0, [r0, r5]
9001b45c:	9d04      	ldr	r5, [sp, #16]
9001b45e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b462:	f8ba 5000 	ldrh.w	r5, [sl]
9001b466:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b46a:	122f      	asrs	r7, r5, #8
9001b46c:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001b470:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b474:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b478:	00ed      	lsls	r5, r5, #3
9001b47a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001b47e:	fb17 f706 	smulbb	r7, r7, r6
9001b482:	b2ed      	uxtb	r5, r5
9001b484:	fb18 f806 	smulbb	r8, r8, r6
9001b488:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001b48c:	10c7      	asrs	r7, r0, #3
9001b48e:	fb15 f506 	smulbb	r5, r5, r6
9001b492:	00c0      	lsls	r0, r0, #3
9001b494:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b498:	fa1f fc8c 	uxth.w	ip, ip
9001b49c:	b2c0      	uxtb	r0, r0
9001b49e:	fb07 870b 	mla	r7, r7, fp, r8
9001b4a2:	fb00 500b 	mla	r0, r0, fp, r5
9001b4a6:	f10c 0501 	add.w	r5, ip, #1
9001b4aa:	b2bf      	uxth	r7, r7
9001b4ac:	b280      	uxth	r0, r0
9001b4ae:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b4b2:	f107 0801 	add.w	r8, r7, #1
9001b4b6:	1c45      	adds	r5, r0, #1
9001b4b8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001b4bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b4c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b4c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b4c6:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001b4ca:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b4ce:	4401      	add	r1, r0
9001b4d0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001b4d4:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b4d6:	ea45 0c0c 	orr.w	ip, r5, ip
9001b4da:	4402      	add	r2, r0
9001b4dc:	ea4c 0c08 	orr.w	ip, ip, r8
9001b4e0:	f82a cb02 	strh.w	ip, [sl], #2
9001b4e4:	e7ac      	b.n	9001b440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001b4e6:	f04f 0800 	mov.w	r8, #0
9001b4ea:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001b4ee:	eb03 0008 	add.w	r0, r3, r8
9001b4f2:	2800      	cmp	r0, #0
9001b4f4:	dc41      	bgt.n	9001b57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001b4f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b4fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b4fe:	9b01      	ldr	r3, [sp, #4]
9001b500:	2b00      	cmp	r3, #0
9001b502:	f340 8097 	ble.w	9001b634 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b50a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b50c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b510:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b514:	eef0 6a62 	vmov.f32	s13, s5
9001b518:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b51c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b520:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b524:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001b528:	eef0 6a43 	vmov.f32	s13, s6
9001b52c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b530:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001b534:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b538:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b53c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b540:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b544:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b548:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b54c:	ee12 2a90 	vmov	r2, s5
9001b550:	eef0 2a47 	vmov.f32	s5, s14
9001b554:	fb92 f3f3 	sdiv	r3, r2, r3
9001b558:	ee13 2a10 	vmov	r2, s6
9001b55c:	9313      	str	r3, [sp, #76]	; 0x4c
9001b55e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b560:	eeb0 3a67 	vmov.f32	s6, s15
9001b564:	fb92 f3f3 	sdiv	r3, r2, r3
9001b568:	9314      	str	r3, [sp, #80]	; 0x50
9001b56a:	9b01      	ldr	r3, [sp, #4]
9001b56c:	9a05      	ldr	r2, [sp, #20]
9001b56e:	3b01      	subs	r3, #1
9001b570:	9301      	str	r3, [sp, #4]
9001b572:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b574:	bf08      	it	eq
9001b576:	4613      	moveq	r3, r2
9001b578:	e72c      	b.n	9001b3d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001b57a:	140f      	asrs	r7, r1, #16
9001b57c:	d453      	bmi.n	9001b626 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b57e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001b582:	42bd      	cmp	r5, r7
9001b584:	dd4f      	ble.n	9001b626 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b586:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001b58a:	d44c      	bmi.n	9001b626 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b58c:	f8de 000c 	ldr.w	r0, [lr, #12]
9001b590:	4560      	cmp	r0, ip
9001b592:	dd48      	ble.n	9001b626 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b594:	9803      	ldr	r0, [sp, #12]
9001b596:	b22d      	sxth	r5, r5
9001b598:	fb0c 0505 	mla	r5, ip, r5, r0
9001b59c:	5de8      	ldrb	r0, [r5, r7]
9001b59e:	9d04      	ldr	r5, [sp, #16]
9001b5a0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b5a4:	f06f 0501 	mvn.w	r5, #1
9001b5a8:	fb05 fb08 	mul.w	fp, r5, r8
9001b5ac:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b5b0:	f834 500b 	ldrh.w	r5, [r4, fp]
9001b5b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b5b8:	122f      	asrs	r7, r5, #8
9001b5ba:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001b5be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b5c2:	00ed      	lsls	r5, r5, #3
9001b5c4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001b5c8:	fb17 f706 	smulbb	r7, r7, r6
9001b5cc:	b2ed      	uxtb	r5, r5
9001b5ce:	fb19 f906 	smulbb	r9, r9, r6
9001b5d2:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001b5d6:	10c7      	asrs	r7, r0, #3
9001b5d8:	fb15 f506 	smulbb	r5, r5, r6
9001b5dc:	00c0      	lsls	r0, r0, #3
9001b5de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b5e2:	fa1f fc8c 	uxth.w	ip, ip
9001b5e6:	b2c0      	uxtb	r0, r0
9001b5e8:	fb07 970a 	mla	r7, r7, sl, r9
9001b5ec:	fb00 500a 	mla	r0, r0, sl, r5
9001b5f0:	f10c 0501 	add.w	r5, ip, #1
9001b5f4:	b2bf      	uxth	r7, r7
9001b5f6:	b280      	uxth	r0, r0
9001b5f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b5fc:	f107 0901 	add.w	r9, r7, #1
9001b600:	1c45      	adds	r5, r0, #1
9001b602:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001b606:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b60a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b60e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b612:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b616:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b61a:	ea45 0c0c 	orr.w	ip, r5, ip
9001b61e:	ea4c 0c09 	orr.w	ip, ip, r9
9001b622:	f824 c00b 	strh.w	ip, [r4, fp]
9001b626:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b628:	f108 38ff 	add.w	r8, r8, #4294967295
9001b62c:	4401      	add	r1, r0
9001b62e:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b630:	4402      	add	r2, r0
9001b632:	e75c      	b.n	9001b4ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001b634:	b007      	add	sp, #28
9001b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b63a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b63a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b63e:	b085      	sub	sp, #20
9001b640:	4693      	mov	fp, r2
9001b642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001b646:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001b648:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001b64a:	6870      	ldr	r0, [r6, #4]
9001b64c:	9100      	str	r1, [sp, #0]
9001b64e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001b652:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001b656:	fb00 2404 	mla	r4, r0, r4, r2
9001b65a:	6832      	ldr	r2, [r6, #0]
9001b65c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b660:	682a      	ldr	r2, [r5, #0]
9001b662:	9201      	str	r2, [sp, #4]
9001b664:	686a      	ldr	r2, [r5, #4]
9001b666:	3204      	adds	r2, #4
9001b668:	9202      	str	r2, [sp, #8]
9001b66a:	9a00      	ldr	r2, [sp, #0]
9001b66c:	2a00      	cmp	r2, #0
9001b66e:	dc03      	bgt.n	9001b678 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001b670:	f1bb 0f00 	cmp.w	fp, #0
9001b674:	f340 80a0 	ble.w	9001b7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001b678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001b67a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001b67e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001b682:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001b684:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001b688:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b68c:	2b00      	cmp	r3, #0
9001b68e:	dd0c      	ble.n	9001b6aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b690:	1406      	asrs	r6, r0, #16
9001b692:	d405      	bmi.n	9001b6a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b694:	454e      	cmp	r6, r9
9001b696:	da03      	bge.n	9001b6a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b698:	1416      	asrs	r6, r2, #16
9001b69a:	d401      	bmi.n	9001b6a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b69c:	4546      	cmp	r6, r8
9001b69e:	db05      	blt.n	9001b6ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b6a0:	4470      	add	r0, lr
9001b6a2:	4462      	add	r2, ip
9001b6a4:	3b01      	subs	r3, #1
9001b6a6:	3402      	adds	r4, #2
9001b6a8:	e7f0      	b.n	9001b68c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001b6aa:	d00f      	beq.n	9001b6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b6ac:	1e5e      	subs	r6, r3, #1
9001b6ae:	fb0e 0706 	mla	r7, lr, r6, r0
9001b6b2:	143f      	asrs	r7, r7, #16
9001b6b4:	d541      	bpl.n	9001b73a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001b6b6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001b6ba:	4698      	mov	r8, r3
9001b6bc:	9603      	str	r6, [sp, #12]
9001b6be:	f1b8 0f00 	cmp.w	r8, #0
9001b6c2:	dc59      	bgt.n	9001b778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001b6c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b6c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b6cc:	9b00      	ldr	r3, [sp, #0]
9001b6ce:	2b00      	cmp	r3, #0
9001b6d0:	dd72      	ble.n	9001b7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001b6d2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b6d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b6dc:	eeb0 6a62 	vmov.f32	s12, s5
9001b6e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001b6e4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b6e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b6ec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001b6f0:	eeb0 6a43 	vmov.f32	s12, s6
9001b6f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b6f8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001b6fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b700:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b704:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b708:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b70c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b710:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b714:	ee12 2a90 	vmov	r2, s5
9001b718:	eef0 2a47 	vmov.f32	s5, s14
9001b71c:	fb92 fef3 	sdiv	lr, r2, r3
9001b720:	ee13 2a10 	vmov	r2, s6
9001b724:	eeb0 3a67 	vmov.f32	s6, s15
9001b728:	fb92 fcf3 	sdiv	ip, r2, r3
9001b72c:	9b00      	ldr	r3, [sp, #0]
9001b72e:	3b01      	subs	r3, #1
9001b730:	9300      	str	r3, [sp, #0]
9001b732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b734:	bf08      	it	eq
9001b736:	465b      	moveq	r3, fp
9001b738:	e797      	b.n	9001b66a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001b73a:	454f      	cmp	r7, r9
9001b73c:	dabb      	bge.n	9001b6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b73e:	fb0c 2606 	mla	r6, ip, r6, r2
9001b742:	1436      	asrs	r6, r6, #16
9001b744:	d4b7      	bmi.n	9001b6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b746:	4546      	cmp	r6, r8
9001b748:	dab5      	bge.n	9001b6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b74a:	461e      	mov	r6, r3
9001b74c:	46a0      	mov	r8, r4
9001b74e:	2e00      	cmp	r6, #0
9001b750:	ddb8      	ble.n	9001b6c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001b752:	1417      	asrs	r7, r2, #16
9001b754:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001b758:	9901      	ldr	r1, [sp, #4]
9001b75a:	ea4f 4920 	mov.w	r9, r0, asr #16
9001b75e:	4462      	add	r2, ip
9001b760:	4470      	add	r0, lr
9001b762:	fb0a 1707 	mla	r7, sl, r7, r1
9001b766:	9902      	ldr	r1, [sp, #8]
9001b768:	3e01      	subs	r6, #1
9001b76a:	f817 7009 	ldrb.w	r7, [r7, r9]
9001b76e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001b772:	f828 7b02 	strh.w	r7, [r8], #2
9001b776:	e7ea      	b.n	9001b74e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001b778:	ea5f 4920 	movs.w	r9, r0, asr #16
9001b77c:	d417      	bmi.n	9001b7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b77e:	68ae      	ldr	r6, [r5, #8]
9001b780:	454e      	cmp	r6, r9
9001b782:	dd14      	ble.n	9001b7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b784:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001b788:	d411      	bmi.n	9001b7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b78a:	68ef      	ldr	r7, [r5, #12]
9001b78c:	4557      	cmp	r7, sl
9001b78e:	dd0e      	ble.n	9001b7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b790:	9f01      	ldr	r7, [sp, #4]
9001b792:	b236      	sxth	r6, r6
9001b794:	f06f 0101 	mvn.w	r1, #1
9001b798:	fb0a 7606 	mla	r6, sl, r6, r7
9001b79c:	9f02      	ldr	r7, [sp, #8]
9001b79e:	f816 6009 	ldrb.w	r6, [r6, r9]
9001b7a2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001b7a6:	fb01 f608 	mul.w	r6, r1, r8
9001b7aa:	9903      	ldr	r1, [sp, #12]
9001b7ac:	538f      	strh	r7, [r1, r6]
9001b7ae:	4470      	add	r0, lr
9001b7b0:	4462      	add	r2, ip
9001b7b2:	f108 38ff 	add.w	r8, r8, #4294967295
9001b7b6:	e782      	b.n	9001b6be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001b7b8:	b005      	add	sp, #20
9001b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b7be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b7c2:	b087      	sub	sp, #28
9001b7c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001b7c6:	9205      	str	r2, [sp, #20]
9001b7c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b7cc:	9102      	str	r1, [sp, #8]
9001b7ce:	9203      	str	r2, [sp, #12]
9001b7d0:	6861      	ldr	r1, [r4, #4]
9001b7d2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001b7d6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001b7da:	fb01 2000 	mla	r0, r1, r0, r2
9001b7de:	6822      	ldr	r2, [r4, #0]
9001b7e0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001b7e4:	9200      	str	r2, [sp, #0]
9001b7e6:	f8dc 2000 	ldr.w	r2, [ip]
9001b7ea:	9204      	str	r2, [sp, #16]
9001b7ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001b7f0:	3204      	adds	r2, #4
9001b7f2:	9201      	str	r2, [sp, #4]
9001b7f4:	9a03      	ldr	r2, [sp, #12]
9001b7f6:	43d5      	mvns	r5, r2
9001b7f8:	b2ed      	uxtb	r5, r5
9001b7fa:	9a02      	ldr	r2, [sp, #8]
9001b7fc:	2a00      	cmp	r2, #0
9001b7fe:	dc03      	bgt.n	9001b808 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001b800:	9a05      	ldr	r2, [sp, #20]
9001b802:	2a00      	cmp	r2, #0
9001b804:	f340 812c 	ble.w	9001ba60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001b808:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b80a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001b80e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b812:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b814:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001b818:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b81c:	2b00      	cmp	r3, #0
9001b81e:	dd10      	ble.n	9001b842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001b820:	140c      	asrs	r4, r1, #16
9001b822:	d405      	bmi.n	9001b830 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b824:	4574      	cmp	r4, lr
9001b826:	da03      	bge.n	9001b830 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b828:	1414      	asrs	r4, r2, #16
9001b82a:	d401      	bmi.n	9001b830 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b82c:	42bc      	cmp	r4, r7
9001b82e:	db09      	blt.n	9001b844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b830:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001b832:	3b01      	subs	r3, #1
9001b834:	9800      	ldr	r0, [sp, #0]
9001b836:	4421      	add	r1, r4
9001b838:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001b83a:	3002      	adds	r0, #2
9001b83c:	4422      	add	r2, r4
9001b83e:	9000      	str	r0, [sp, #0]
9001b840:	e7ec      	b.n	9001b81c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001b842:	d071      	beq.n	9001b928 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001b844:	1e5c      	subs	r4, r3, #1
9001b846:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001b848:	fb06 1604 	mla	r6, r6, r4, r1
9001b84c:	1436      	asrs	r6, r6, #16
9001b84e:	d45d      	bmi.n	9001b90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b850:	4576      	cmp	r6, lr
9001b852:	da5b      	bge.n	9001b90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b854:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001b856:	fb06 2404 	mla	r4, r6, r4, r2
9001b85a:	1424      	asrs	r4, r4, #16
9001b85c:	d456      	bmi.n	9001b90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b85e:	42bc      	cmp	r4, r7
9001b860:	da54      	bge.n	9001b90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b862:	4698      	mov	r8, r3
9001b864:	f8dd 9000 	ldr.w	r9, [sp]
9001b868:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001b86c:	f1b8 0f00 	cmp.w	r8, #0
9001b870:	dd54      	ble.n	9001b91c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001b872:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001b876:	1414      	asrs	r4, r2, #16
9001b878:	9804      	ldr	r0, [sp, #16]
9001b87a:	140e      	asrs	r6, r1, #16
9001b87c:	f108 38ff 	add.w	r8, r8, #4294967295
9001b880:	fb07 0404 	mla	r4, r7, r4, r0
9001b884:	9801      	ldr	r0, [sp, #4]
9001b886:	f814 e006 	ldrb.w	lr, [r4, r6]
9001b88a:	f8b9 4000 	ldrh.w	r4, [r9]
9001b88e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001b892:	1227      	asrs	r7, r4, #8
9001b894:	eb00 0b0e 	add.w	fp, r0, lr
9001b898:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001b89c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b8a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b8a2:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001b8a6:	f89b b001 	ldrb.w	fp, [fp, #1]
9001b8aa:	4401      	add	r1, r0
9001b8ac:	fb16 f60a 	smulbb	r6, r6, sl
9001b8b0:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b8b2:	fb1b fb0a 	smulbb	fp, fp, sl
9001b8b6:	fb07 6705 	mla	r7, r7, r5, r6
9001b8ba:	10e6      	asrs	r6, r4, #3
9001b8bc:	00e4      	lsls	r4, r4, #3
9001b8be:	4402      	add	r2, r0
9001b8c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b8c4:	b2bf      	uxth	r7, r7
9001b8c6:	b2e4      	uxtb	r4, r4
9001b8c8:	fb06 b605 	mla	r6, r6, r5, fp
9001b8cc:	fb14 f405 	smulbb	r4, r4, r5
9001b8d0:	b2b6      	uxth	r6, r6
9001b8d2:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001b8d6:	1c7c      	adds	r4, r7, #1
9001b8d8:	f106 0b01 	add.w	fp, r6, #1
9001b8dc:	fa1f fe8e 	uxth.w	lr, lr
9001b8e0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001b8e4:	f10e 0401 	add.w	r4, lr, #1
9001b8e8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001b8ec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001b8f0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001b8f4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001b8f8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001b8fc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001b900:	4327      	orrs	r7, r4
9001b902:	ea47 070b 	orr.w	r7, r7, fp
9001b906:	f829 7b02 	strh.w	r7, [r9], #2
9001b90a:	e7af      	b.n	9001b86c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001b90c:	f04f 0e00 	mov.w	lr, #0
9001b910:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001b914:	eb03 040e 	add.w	r4, r3, lr
9001b918:	2c00      	cmp	r4, #0
9001b91a:	dc43      	bgt.n	9001b9a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001b91c:	9a00      	ldr	r2, [sp, #0]
9001b91e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b922:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b926:	9300      	str	r3, [sp, #0]
9001b928:	9b02      	ldr	r3, [sp, #8]
9001b92a:	2b00      	cmp	r3, #0
9001b92c:	f340 8098 	ble.w	9001ba60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001b930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b934:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b936:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b93a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b93e:	eef0 6a62 	vmov.f32	s13, s5
9001b942:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b946:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b94a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b94e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001b952:	eef0 6a43 	vmov.f32	s13, s6
9001b956:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b95a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001b95e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b962:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b966:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b96a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b96e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b972:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b976:	ee12 2a90 	vmov	r2, s5
9001b97a:	eef0 2a47 	vmov.f32	s5, s14
9001b97e:	fb92 f3f3 	sdiv	r3, r2, r3
9001b982:	ee13 2a10 	vmov	r2, s6
9001b986:	9313      	str	r3, [sp, #76]	; 0x4c
9001b988:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b98a:	eeb0 3a67 	vmov.f32	s6, s15
9001b98e:	fb92 f3f3 	sdiv	r3, r2, r3
9001b992:	9314      	str	r3, [sp, #80]	; 0x50
9001b994:	9b02      	ldr	r3, [sp, #8]
9001b996:	9a05      	ldr	r2, [sp, #20]
9001b998:	3b01      	subs	r3, #1
9001b99a:	9302      	str	r3, [sp, #8]
9001b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b99e:	bf08      	it	eq
9001b9a0:	4613      	moveq	r3, r2
9001b9a2:	e72a      	b.n	9001b7fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001b9a4:	140f      	asrs	r7, r1, #16
9001b9a6:	d454      	bmi.n	9001ba52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b9a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001b9ac:	42be      	cmp	r6, r7
9001b9ae:	dd50      	ble.n	9001ba52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b9b0:	ea5f 4822 	movs.w	r8, r2, asr #16
9001b9b4:	d44d      	bmi.n	9001ba52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b9b6:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001b9ba:	4544      	cmp	r4, r8
9001b9bc:	dd49      	ble.n	9001ba52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b9be:	9c04      	ldr	r4, [sp, #16]
9001b9c0:	b236      	sxth	r6, r6
9001b9c2:	f06f 0001 	mvn.w	r0, #1
9001b9c6:	fb08 4606 	mla	r6, r8, r6, r4
9001b9ca:	9c01      	ldr	r4, [sp, #4]
9001b9cc:	fb00 fa0e 	mul.w	sl, r0, lr
9001b9d0:	9800      	ldr	r0, [sp, #0]
9001b9d2:	f816 8007 	ldrb.w	r8, [r6, r7]
9001b9d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001b9da:	eb04 0b08 	add.w	fp, r4, r8
9001b9de:	f830 400a 	ldrh.w	r4, [r0, sl]
9001b9e2:	9801      	ldr	r0, [sp, #4]
9001b9e4:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001b9e8:	1227      	asrs	r7, r4, #8
9001b9ea:	f89b b001 	ldrb.w	fp, [fp, #1]
9001b9ee:	fb16 f609 	smulbb	r6, r6, r9
9001b9f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b9f6:	f810 8008 	ldrb.w	r8, [r0, r8]
9001b9fa:	fb1b fb09 	smulbb	fp, fp, r9
9001b9fe:	fb07 6705 	mla	r7, r7, r5, r6
9001ba02:	10e6      	asrs	r6, r4, #3
9001ba04:	00e4      	lsls	r4, r4, #3
9001ba06:	9800      	ldr	r0, [sp, #0]
9001ba08:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ba0c:	b2bf      	uxth	r7, r7
9001ba0e:	b2e4      	uxtb	r4, r4
9001ba10:	fb06 b605 	mla	r6, r6, r5, fp
9001ba14:	fb14 f405 	smulbb	r4, r4, r5
9001ba18:	b2b6      	uxth	r6, r6
9001ba1a:	fb08 4809 	mla	r8, r8, r9, r4
9001ba1e:	1c7c      	adds	r4, r7, #1
9001ba20:	f106 0b01 	add.w	fp, r6, #1
9001ba24:	fa1f f888 	uxth.w	r8, r8
9001ba28:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001ba2c:	f108 0401 	add.w	r4, r8, #1
9001ba30:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001ba34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001ba38:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001ba3c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001ba40:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001ba44:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ba48:	4327      	orrs	r7, r4
9001ba4a:	ea47 070b 	orr.w	r7, r7, fp
9001ba4e:	f820 700a 	strh.w	r7, [r0, sl]
9001ba52:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ba54:	f10e 3eff 	add.w	lr, lr, #4294967295
9001ba58:	4401      	add	r1, r0
9001ba5a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001ba5c:	4402      	add	r2, r0
9001ba5e:	e759      	b.n	9001b914 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001ba60:	b007      	add	sp, #28
9001ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001ba68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ba6c:	b085      	sub	sp, #20
9001ba6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ba72:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001ba74:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001ba76:	9203      	str	r2, [sp, #12]
9001ba78:	6870      	ldr	r0, [r6, #4]
9001ba7a:	686f      	ldr	r7, [r5, #4]
9001ba7c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001ba80:	3704      	adds	r7, #4
9001ba82:	9101      	str	r1, [sp, #4]
9001ba84:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ba88:	fb00 2404 	mla	r4, r0, r4, r2
9001ba8c:	6832      	ldr	r2, [r6, #0]
9001ba8e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ba92:	682a      	ldr	r2, [r5, #0]
9001ba94:	9202      	str	r2, [sp, #8]
9001ba96:	9a01      	ldr	r2, [sp, #4]
9001ba98:	2a00      	cmp	r2, #0
9001ba9a:	dc03      	bgt.n	9001baa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001ba9c:	9a03      	ldr	r2, [sp, #12]
9001ba9e:	2a00      	cmp	r2, #0
9001baa0:	f340 80cc 	ble.w	9001bc3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001baa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001baa6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001baaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001baae:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bab0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bab4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bab8:	2b00      	cmp	r3, #0
9001baba:	dd0d      	ble.n	9001bad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001babc:	1406      	asrs	r6, r0, #16
9001babe:	d405      	bmi.n	9001bacc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bac0:	454e      	cmp	r6, r9
9001bac2:	da03      	bge.n	9001bacc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bac4:	1416      	asrs	r6, r2, #16
9001bac6:	d401      	bmi.n	9001bacc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bac8:	4546      	cmp	r6, r8
9001baca:	db06      	blt.n	9001bada <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bacc:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001bace:	4460      	add	r0, ip
9001bad0:	3b01      	subs	r3, #1
9001bad2:	3402      	adds	r4, #2
9001bad4:	4432      	add	r2, r6
9001bad6:	e7ef      	b.n	9001bab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001bad8:	d00f      	beq.n	9001bafa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001bada:	1e5e      	subs	r6, r3, #1
9001badc:	fb0c 0e06 	mla	lr, ip, r6, r0
9001bae0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001bae4:	d543      	bpl.n	9001bb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001bae6:	4698      	mov	r8, r3
9001bae8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001baec:	f1b8 0f00 	cmp.w	r8, #0
9001baf0:	dc71      	bgt.n	9001bbd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001baf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001baf6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bafa:	9b01      	ldr	r3, [sp, #4]
9001bafc:	2b00      	cmp	r3, #0
9001bafe:	f340 809d 	ble.w	9001bc3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001bb02:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bb08:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bb0c:	eeb0 6a62 	vmov.f32	s12, s5
9001bb10:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bb14:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bb18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bb1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bb20:	eeb0 6a43 	vmov.f32	s12, s6
9001bb24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bb28:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bb2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bb30:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bb34:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bb38:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bb3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bb40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bb44:	ee12 2a90 	vmov	r2, s5
9001bb48:	eef0 2a47 	vmov.f32	s5, s14
9001bb4c:	fb92 fcf3 	sdiv	ip, r2, r3
9001bb50:	ee13 2a10 	vmov	r2, s6
9001bb54:	eeb0 3a67 	vmov.f32	s6, s15
9001bb58:	fb92 f3f3 	sdiv	r3, r2, r3
9001bb5c:	9312      	str	r3, [sp, #72]	; 0x48
9001bb5e:	9b01      	ldr	r3, [sp, #4]
9001bb60:	9a03      	ldr	r2, [sp, #12]
9001bb62:	3b01      	subs	r3, #1
9001bb64:	9301      	str	r3, [sp, #4]
9001bb66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bb68:	bf08      	it	eq
9001bb6a:	4613      	moveq	r3, r2
9001bb6c:	e793      	b.n	9001ba96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001bb6e:	45ce      	cmp	lr, r9
9001bb70:	dab9      	bge.n	9001bae6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bb72:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bb74:	fb01 2606 	mla	r6, r1, r6, r2
9001bb78:	1436      	asrs	r6, r6, #16
9001bb7a:	d4b4      	bmi.n	9001bae6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bb7c:	4546      	cmp	r6, r8
9001bb7e:	dab2      	bge.n	9001bae6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bb80:	4698      	mov	r8, r3
9001bb82:	46a2      	mov	sl, r4
9001bb84:	f1b8 0f00 	cmp.w	r8, #0
9001bb88:	ddb3      	ble.n	9001baf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bb8a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bb8e:	1416      	asrs	r6, r2, #16
9001bb90:	9902      	ldr	r1, [sp, #8]
9001bb92:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001bb96:	f108 38ff 	add.w	r8, r8, #4294967295
9001bb9a:	4460      	add	r0, ip
9001bb9c:	fb09 1606 	mla	r6, r9, r6, r1
9001bba0:	4928      	ldr	r1, [pc, #160]	; (9001bc44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001bba2:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001bba6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bbaa:	eb07 0b0e 	add.w	fp, r7, lr
9001bbae:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001bbb2:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001bbb6:	00f6      	lsls	r6, r6, #3
9001bbb8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001bbbc:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bbbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001bbc2:	440a      	add	r2, r1
9001bbc4:	ea49 0606 	orr.w	r6, r9, r6
9001bbc8:	f817 900e 	ldrb.w	r9, [r7, lr]
9001bbcc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001bbd0:	f82a 6b02 	strh.w	r6, [sl], #2
9001bbd4:	e7d6      	b.n	9001bb84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001bbd6:	ea5f 4920 	movs.w	r9, r0, asr #16
9001bbda:	d429      	bmi.n	9001bc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bbdc:	68ae      	ldr	r6, [r5, #8]
9001bbde:	454e      	cmp	r6, r9
9001bbe0:	dd26      	ble.n	9001bc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bbe2:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001bbe6:	d423      	bmi.n	9001bc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bbe8:	68e9      	ldr	r1, [r5, #12]
9001bbea:	4559      	cmp	r1, fp
9001bbec:	dd20      	ble.n	9001bc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bbee:	fa0f fe86 	sxth.w	lr, r6
9001bbf2:	9902      	ldr	r1, [sp, #8]
9001bbf4:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001bbf8:	f06f 0101 	mvn.w	r1, #1
9001bbfc:	f81e e009 	ldrb.w	lr, [lr, r9]
9001bc00:	fb01 f908 	mul.w	r9, r1, r8
9001bc04:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001bc08:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bc0c:	eb07 060e 	add.w	r6, r7, lr
9001bc10:	f896 b002 	ldrb.w	fp, [r6, #2]
9001bc14:	7876      	ldrb	r6, [r6, #1]
9001bc16:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001bc1a:	00f6      	lsls	r6, r6, #3
9001bc1c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001bc20:	ea4b 0606 	orr.w	r6, fp, r6
9001bc24:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001bc28:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001bc2c:	f82a 6009 	strh.w	r6, [sl, r9]
9001bc30:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bc32:	4460      	add	r0, ip
9001bc34:	f108 38ff 	add.w	r8, r8, #4294967295
9001bc38:	440a      	add	r2, r1
9001bc3a:	e757      	b.n	9001baec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bc3c:	b005      	add	sp, #20
9001bc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bc42:	bf00      	nop
9001bc44:	fffff800 	.word	0xfffff800

9001bc48 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bc4c:	b087      	sub	sp, #28
9001bc4e:	468b      	mov	fp, r1
9001bc50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bc54:	9815      	ldr	r0, [sp, #84]	; 0x54
9001bc56:	9204      	str	r2, [sp, #16]
9001bc58:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001bc5c:	6841      	ldr	r1, [r0, #4]
9001bc5e:	9205      	str	r2, [sp, #20]
9001bc60:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001bc64:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001bc68:	fb01 2404 	mla	r4, r1, r4, r2
9001bc6c:	6802      	ldr	r2, [r0, #0]
9001bc6e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bc72:	f8dc 2000 	ldr.w	r2, [ip]
9001bc76:	9201      	str	r2, [sp, #4]
9001bc78:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001bc7c:	3204      	adds	r2, #4
9001bc7e:	9202      	str	r2, [sp, #8]
9001bc80:	f1bb 0f00 	cmp.w	fp, #0
9001bc84:	dc03      	bgt.n	9001bc8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001bc86:	9a04      	ldr	r2, [sp, #16]
9001bc88:	2a00      	cmp	r2, #0
9001bc8a:	f340 8138 	ble.w	9001befe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001bc8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001bc90:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001bc94:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bc98:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bc9a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001bc9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bca2:	2b00      	cmp	r3, #0
9001bca4:	dd0e      	ble.n	9001bcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bca6:	1402      	asrs	r2, r0, #16
9001bca8:	d405      	bmi.n	9001bcb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bcaa:	42ba      	cmp	r2, r7
9001bcac:	da03      	bge.n	9001bcb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bcae:	140a      	asrs	r2, r1, #16
9001bcb0:	d401      	bmi.n	9001bcb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bcb2:	42b2      	cmp	r2, r6
9001bcb4:	db07      	blt.n	9001bcc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bcb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001bcb8:	3b01      	subs	r3, #1
9001bcba:	3402      	adds	r4, #2
9001bcbc:	4410      	add	r0, r2
9001bcbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001bcc0:	4411      	add	r1, r2
9001bcc2:	e7ee      	b.n	9001bca2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001bcc4:	d019      	beq.n	9001bcfa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001bcc6:	1e5a      	subs	r2, r3, #1
9001bcc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001bcca:	fb05 0502 	mla	r5, r5, r2, r0
9001bcce:	142d      	asrs	r5, r5, #16
9001bcd0:	d409      	bmi.n	9001bce6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bcd2:	42bd      	cmp	r5, r7
9001bcd4:	da07      	bge.n	9001bce6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bcd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001bcd8:	fb05 1202 	mla	r2, r5, r2, r1
9001bcdc:	1412      	asrs	r2, r2, #16
9001bcde:	d402      	bmi.n	9001bce6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bce0:	42b2      	cmp	r2, r6
9001bce2:	f2c0 80ac 	blt.w	9001be3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001bce6:	f04f 0e00 	mov.w	lr, #0
9001bcea:	eb03 020e 	add.w	r2, r3, lr
9001bcee:	2a00      	cmp	r2, #0
9001bcf0:	dc3e      	bgt.n	9001bd70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001bcf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bcf6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bcfa:	f1bb 0f00 	cmp.w	fp, #0
9001bcfe:	f340 80fe 	ble.w	9001befe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001bd02:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bd06:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bd08:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bd0c:	f1bb 0b01 	subs.w	fp, fp, #1
9001bd10:	eeb0 6a62 	vmov.f32	s12, s5
9001bd14:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bd18:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bd1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bd20:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001bd24:	eeb0 6a43 	vmov.f32	s12, s6
9001bd28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bd2c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001bd30:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bd34:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bd38:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bd3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bd40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bd44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bd48:	ee12 2a90 	vmov	r2, s5
9001bd4c:	eef0 2a47 	vmov.f32	s5, s14
9001bd50:	fb92 f3f3 	sdiv	r3, r2, r3
9001bd54:	ee13 2a10 	vmov	r2, s6
9001bd58:	9313      	str	r3, [sp, #76]	; 0x4c
9001bd5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bd5c:	eeb0 3a67 	vmov.f32	s6, s15
9001bd60:	fb92 f3f3 	sdiv	r3, r2, r3
9001bd64:	9a04      	ldr	r2, [sp, #16]
9001bd66:	9314      	str	r3, [sp, #80]	; 0x50
9001bd68:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bd6a:	bf08      	it	eq
9001bd6c:	4613      	moveq	r3, r2
9001bd6e:	e787      	b.n	9001bc80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001bd70:	1406      	asrs	r6, r0, #16
9001bd72:	d45d      	bmi.n	9001be30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd74:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001bd78:	42b5      	cmp	r5, r6
9001bd7a:	dd59      	ble.n	9001be30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd7c:	140f      	asrs	r7, r1, #16
9001bd7e:	d457      	bmi.n	9001be30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd80:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001bd84:	42ba      	cmp	r2, r7
9001bd86:	dd53      	ble.n	9001be30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd88:	9a01      	ldr	r2, [sp, #4]
9001bd8a:	b22d      	sxth	r5, r5
9001bd8c:	fb07 2505 	mla	r5, r7, r5, r2
9001bd90:	5daa      	ldrb	r2, [r5, r6]
9001bd92:	9d02      	ldr	r5, [sp, #8]
9001bd94:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001bd98:	0e2e      	lsrs	r6, r5, #24
9001bd9a:	d049      	beq.n	9001be30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd9c:	f06f 0201 	mvn.w	r2, #1
9001bda0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001bda4:	fb02 f20e 	mul.w	r2, r2, lr
9001bda8:	f834 8002 	ldrh.w	r8, [r4, r2]
9001bdac:	9203      	str	r2, [sp, #12]
9001bdae:	9a05      	ldr	r2, [sp, #20]
9001bdb0:	ea4f 2728 	mov.w	r7, r8, asr #8
9001bdb4:	4356      	muls	r6, r2
9001bdb6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bdba:	1c72      	adds	r2, r6, #1
9001bdbc:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001bdc0:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001bdc4:	b2ed      	uxtb	r5, r5
9001bdc6:	1212      	asrs	r2, r2, #8
9001bdc8:	fa1f f982 	uxth.w	r9, r2
9001bdcc:	43d2      	mvns	r2, r2
9001bdce:	fb16 f609 	smulbb	r6, r6, r9
9001bdd2:	b2d2      	uxtb	r2, r2
9001bdd4:	fb15 f509 	smulbb	r5, r5, r9
9001bdd8:	fb07 6702 	mla	r7, r7, r2, r6
9001bddc:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001bde0:	fb1a fa09 	smulbb	sl, sl, r9
9001bde4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001bde8:	b2bf      	uxth	r7, r7
9001bdea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bdee:	fa5f f888 	uxtb.w	r8, r8
9001bdf2:	fb06 a602 	mla	r6, r6, r2, sl
9001bdf6:	fb08 5502 	mla	r5, r8, r2, r5
9001bdfa:	1c7a      	adds	r2, r7, #1
9001bdfc:	b2b6      	uxth	r6, r6
9001bdfe:	b2ad      	uxth	r5, r5
9001be00:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001be04:	9a03      	ldr	r2, [sp, #12]
9001be06:	f105 0a01 	add.w	sl, r5, #1
9001be0a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001be0e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001be12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001be16:	ea4a 0707 	orr.w	r7, sl, r7
9001be1a:	f106 0a01 	add.w	sl, r6, #1
9001be1e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001be22:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001be26:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001be2a:	ea47 070a 	orr.w	r7, r7, sl
9001be2e:	52a7      	strh	r7, [r4, r2]
9001be30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001be32:	f10e 3eff 	add.w	lr, lr, #4294967295
9001be36:	4410      	add	r0, r2
9001be38:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001be3a:	4411      	add	r1, r2
9001be3c:	e755      	b.n	9001bcea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001be3e:	f04f 0800 	mov.w	r8, #0
9001be42:	eba3 0208 	sub.w	r2, r3, r8
9001be46:	2a00      	cmp	r2, #0
9001be48:	f77f af53 	ble.w	9001bcf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001be4c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001be50:	140a      	asrs	r2, r1, #16
9001be52:	9f01      	ldr	r7, [sp, #4]
9001be54:	1405      	asrs	r5, r0, #16
9001be56:	fb06 7202 	mla	r2, r6, r2, r7
9001be5a:	5d52      	ldrb	r2, [r2, r5]
9001be5c:	9d02      	ldr	r5, [sp, #8]
9001be5e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001be62:	0e2e      	lsrs	r6, r5, #24
9001be64:	d044      	beq.n	9001bef0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001be66:	9a05      	ldr	r2, [sp, #20]
9001be68:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001be6c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001be70:	4356      	muls	r6, r2
9001be72:	ea4f 272e 	mov.w	r7, lr, asr #8
9001be76:	1c72      	adds	r2, r6, #1
9001be78:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001be7c:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001be80:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001be84:	b2ed      	uxtb	r5, r5
9001be86:	1212      	asrs	r2, r2, #8
9001be88:	fa1f f982 	uxth.w	r9, r2
9001be8c:	43d2      	mvns	r2, r2
9001be8e:	fb16 f609 	smulbb	r6, r6, r9
9001be92:	b2d2      	uxtb	r2, r2
9001be94:	fb15 f509 	smulbb	r5, r5, r9
9001be98:	fb07 6702 	mla	r7, r7, r2, r6
9001be9c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001bea0:	fb1a fa09 	smulbb	sl, sl, r9
9001bea4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001bea8:	b2bf      	uxth	r7, r7
9001beaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001beae:	fa5f fe8e 	uxtb.w	lr, lr
9001beb2:	fb06 a602 	mla	r6, r6, r2, sl
9001beb6:	fb0e 5502 	mla	r5, lr, r2, r5
9001beba:	1c7a      	adds	r2, r7, #1
9001bebc:	b2b6      	uxth	r6, r6
9001bebe:	b2ad      	uxth	r5, r5
9001bec0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001bec4:	f105 0a01 	add.w	sl, r5, #1
9001bec8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001becc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001bed0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001bed4:	ea4a 0707 	orr.w	r7, sl, r7
9001bed8:	f106 0a01 	add.w	sl, r6, #1
9001bedc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001bee0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001bee4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001bee8:	ea47 070a 	orr.w	r7, r7, sl
9001beec:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001bef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001bef2:	f108 0801 	add.w	r8, r8, #1
9001bef6:	4410      	add	r0, r2
9001bef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001befa:	4411      	add	r1, r2
9001befc:	e7a1      	b.n	9001be42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001befe:	b007      	add	sp, #28
9001bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bf04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bf08:	b085      	sub	sp, #20
9001bf0a:	468b      	mov	fp, r1
9001bf0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bf10:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bf12:	9203      	str	r2, [sp, #12]
9001bf14:	6841      	ldr	r1, [r0, #4]
9001bf16:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001bf1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001bf1e:	fb01 2404 	mla	r4, r1, r4, r2
9001bf22:	6802      	ldr	r2, [r0, #0]
9001bf24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bf28:	f8de 2000 	ldr.w	r2, [lr]
9001bf2c:	9200      	str	r2, [sp, #0]
9001bf2e:	f8de 2004 	ldr.w	r2, [lr, #4]
9001bf32:	3204      	adds	r2, #4
9001bf34:	9201      	str	r2, [sp, #4]
9001bf36:	f1bb 0f00 	cmp.w	fp, #0
9001bf3a:	dc03      	bgt.n	9001bf44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001bf3c:	9a03      	ldr	r2, [sp, #12]
9001bf3e:	2a00      	cmp	r2, #0
9001bf40:	f340 8153 	ble.w	9001c1ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001bf44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bf46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001bf4a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bf4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bf50:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001bf54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bf58:	2b00      	cmp	r3, #0
9001bf5a:	dd0e      	ble.n	9001bf7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001bf5c:	1408      	asrs	r0, r1, #16
9001bf5e:	d405      	bmi.n	9001bf6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bf60:	42b8      	cmp	r0, r7
9001bf62:	da03      	bge.n	9001bf6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bf64:	1410      	asrs	r0, r2, #16
9001bf66:	d401      	bmi.n	9001bf6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bf68:	42b0      	cmp	r0, r6
9001bf6a:	db07      	blt.n	9001bf7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001bf6c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001bf6e:	3b01      	subs	r3, #1
9001bf70:	3402      	adds	r4, #2
9001bf72:	4401      	add	r1, r0
9001bf74:	9812      	ldr	r0, [sp, #72]	; 0x48
9001bf76:	4402      	add	r2, r0
9001bf78:	e7ee      	b.n	9001bf58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001bf7a:	d017      	beq.n	9001bfac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001bf7c:	1e58      	subs	r0, r3, #1
9001bf7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001bf80:	fb05 1500 	mla	r5, r5, r0, r1
9001bf84:	142d      	asrs	r5, r5, #16
9001bf86:	d409      	bmi.n	9001bf9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf88:	42bd      	cmp	r5, r7
9001bf8a:	da07      	bge.n	9001bf9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001bf8e:	fb05 2000 	mla	r0, r5, r0, r2
9001bf92:	1400      	asrs	r0, r0, #16
9001bf94:	d402      	bmi.n	9001bf9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf96:	42b0      	cmp	r0, r6
9001bf98:	f2c0 80bc 	blt.w	9001c114 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001bf9c:	2600      	movs	r6, #0
9001bf9e:	1998      	adds	r0, r3, r6
9001bfa0:	2800      	cmp	r0, #0
9001bfa2:	dc3e      	bgt.n	9001c022 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001bfa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bfa8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bfac:	f1bb 0f00 	cmp.w	fp, #0
9001bfb0:	f340 811b 	ble.w	9001c1ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001bfb4:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bfb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bfba:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bfbe:	f1bb 0b01 	subs.w	fp, fp, #1
9001bfc2:	eeb0 6a62 	vmov.f32	s12, s5
9001bfc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bfca:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bfce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bfd2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bfd6:	eeb0 6a43 	vmov.f32	s12, s6
9001bfda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bfde:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bfe2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bfe6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bfea:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bfee:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bff2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bff6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bffa:	ee12 2a90 	vmov	r2, s5
9001bffe:	eef0 2a47 	vmov.f32	s5, s14
9001c002:	fb92 f3f3 	sdiv	r3, r2, r3
9001c006:	ee13 2a10 	vmov	r2, s6
9001c00a:	9311      	str	r3, [sp, #68]	; 0x44
9001c00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c00e:	eeb0 3a67 	vmov.f32	s6, s15
9001c012:	fb92 f3f3 	sdiv	r3, r2, r3
9001c016:	9a03      	ldr	r2, [sp, #12]
9001c018:	9312      	str	r3, [sp, #72]	; 0x48
9001c01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c01c:	bf08      	it	eq
9001c01e:	4613      	moveq	r3, r2
9001c020:	e789      	b.n	9001bf36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c022:	140f      	asrs	r7, r1, #16
9001c024:	d426      	bmi.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c026:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c02a:	42bd      	cmp	r5, r7
9001c02c:	dd22      	ble.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c02e:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c032:	d41f      	bmi.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c034:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c038:	4560      	cmp	r0, ip
9001c03a:	dd1b      	ble.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c03c:	9800      	ldr	r0, [sp, #0]
9001c03e:	b22d      	sxth	r5, r5
9001c040:	fb0c 0505 	mla	r5, ip, r5, r0
9001c044:	5de8      	ldrb	r0, [r5, r7]
9001c046:	9d01      	ldr	r5, [sp, #4]
9001c048:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001c04c:	0e07      	lsrs	r7, r0, #24
9001c04e:	2fff      	cmp	r7, #255	; 0xff
9001c050:	d116      	bne.n	9001c080 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001c052:	f06f 0501 	mvn.w	r5, #1
9001c056:	fb05 f706 	mul.w	r7, r5, r6
9001c05a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001c05e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001c062:	0945      	lsrs	r5, r0, #5
9001c064:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001c068:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001c06c:	ea4c 0505 	orr.w	r5, ip, r5
9001c070:	4305      	orrs	r5, r0
9001c072:	53e5      	strh	r5, [r4, r7]
9001c074:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c076:	3e01      	subs	r6, #1
9001c078:	4401      	add	r1, r0
9001c07a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c07c:	4402      	add	r2, r0
9001c07e:	e78e      	b.n	9001bf9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c080:	b2fd      	uxtb	r5, r7
9001c082:	2f00      	cmp	r7, #0
9001c084:	d0f6      	beq.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c086:	f06f 0701 	mvn.w	r7, #1
9001c08a:	fa1f f985 	uxth.w	r9, r5
9001c08e:	43ed      	mvns	r5, r5
9001c090:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001c094:	4377      	muls	r7, r6
9001c096:	fb1a fa09 	smulbb	sl, sl, r9
9001c09a:	b2ed      	uxtb	r5, r5
9001c09c:	f834 8007 	ldrh.w	r8, [r4, r7]
9001c0a0:	9702      	str	r7, [sp, #8]
9001c0a2:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001c0a6:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c0aa:	fb17 f709 	smulbb	r7, r7, r9
9001c0ae:	b2c0      	uxtb	r0, r0
9001c0b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c0b4:	fb10 f009 	smulbb	r0, r0, r9
9001c0b8:	fb0c 7c05 	mla	ip, ip, r5, r7
9001c0bc:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001c0c0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c0c4:	fa1f fc8c 	uxth.w	ip, ip
9001c0c8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c0cc:	fa5f f888 	uxtb.w	r8, r8
9001c0d0:	fb07 a705 	mla	r7, r7, r5, sl
9001c0d4:	fb08 0005 	mla	r0, r8, r5, r0
9001c0d8:	f10c 0501 	add.w	r5, ip, #1
9001c0dc:	b2bf      	uxth	r7, r7
9001c0de:	b280      	uxth	r0, r0
9001c0e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c0e4:	f100 0a01 	add.w	sl, r0, #1
9001c0e8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c0ec:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001c0f0:	9802      	ldr	r0, [sp, #8]
9001c0f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c0f6:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c0fa:	f107 0a01 	add.w	sl, r7, #1
9001c0fe:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c102:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c106:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c10a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c10e:	f824 c000 	strh.w	ip, [r4, r0]
9001c112:	e7af      	b.n	9001c074 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c114:	f04f 0800 	mov.w	r8, #0
9001c118:	eba3 0008 	sub.w	r0, r3, r8
9001c11c:	2800      	cmp	r0, #0
9001c11e:	f77f af41 	ble.w	9001bfa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c122:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c126:	1410      	asrs	r0, r2, #16
9001c128:	9f00      	ldr	r7, [sp, #0]
9001c12a:	140d      	asrs	r5, r1, #16
9001c12c:	fb06 7000 	mla	r0, r6, r0, r7
9001c130:	5d40      	ldrb	r0, [r0, r5]
9001c132:	9d01      	ldr	r5, [sp, #4]
9001c134:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001c138:	0e2e      	lsrs	r6, r5, #24
9001c13a:	2eff      	cmp	r6, #255	; 0xff
9001c13c:	d112      	bne.n	9001c164 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001c13e:	482c      	ldr	r0, [pc, #176]	; (9001c1f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001c140:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001c144:	0968      	lsrs	r0, r5, #5
9001c146:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c14a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001c14e:	4330      	orrs	r0, r6
9001c150:	4328      	orrs	r0, r5
9001c152:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001c156:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c158:	f108 0801 	add.w	r8, r8, #1
9001c15c:	4401      	add	r1, r0
9001c15e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c160:	4402      	add	r2, r0
9001c162:	e7d9      	b.n	9001c118 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c164:	b2f0      	uxtb	r0, r6
9001c166:	2e00      	cmp	r6, #0
9001c168:	d0f5      	beq.n	9001c156 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c16a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001c16e:	fa1f f980 	uxth.w	r9, r0
9001c172:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c176:	43c0      	mvns	r0, r0
9001c178:	ea4f 272c 	mov.w	r7, ip, asr #8
9001c17c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c180:	fb16 f609 	smulbb	r6, r6, r9
9001c184:	b2c0      	uxtb	r0, r0
9001c186:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c18a:	b2ed      	uxtb	r5, r5
9001c18c:	fb1a fa09 	smulbb	sl, sl, r9
9001c190:	fb07 6700 	mla	r7, r7, r0, r6
9001c194:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001c198:	fb15 f509 	smulbb	r5, r5, r9
9001c19c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001c1a0:	b2bf      	uxth	r7, r7
9001c1a2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c1a6:	fa5f fc8c 	uxtb.w	ip, ip
9001c1aa:	fb06 a600 	mla	r6, r6, r0, sl
9001c1ae:	fb0c 5500 	mla	r5, ip, r0, r5
9001c1b2:	1c78      	adds	r0, r7, #1
9001c1b4:	b2b6      	uxth	r6, r6
9001c1b6:	b2ad      	uxth	r5, r5
9001c1b8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001c1bc:	f105 0a01 	add.w	sl, r5, #1
9001c1c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c1c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c1c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c1cc:	ea4a 0707 	orr.w	r7, sl, r7
9001c1d0:	f106 0a01 	add.w	sl, r6, #1
9001c1d4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c1d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c1dc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c1e0:	ea47 070a 	orr.w	r7, r7, sl
9001c1e4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c1e8:	e7b5      	b.n	9001c156 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c1ea:	b005      	add	sp, #20
9001c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c1f0:	fffff800 	.word	0xfffff800

9001c1f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c1f8:	b087      	sub	sp, #28
9001c1fa:	468b      	mov	fp, r1
9001c1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c200:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c202:	9204      	str	r2, [sp, #16]
9001c204:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c208:	6861      	ldr	r1, [r4, #4]
9001c20a:	9205      	str	r2, [sp, #20]
9001c20c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c210:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001c214:	fb01 2000 	mla	r0, r1, r0, r2
9001c218:	6822      	ldr	r2, [r4, #0]
9001c21a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c21e:	f8de 2000 	ldr.w	r2, [lr]
9001c222:	9201      	str	r2, [sp, #4]
9001c224:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c228:	9202      	str	r2, [sp, #8]
9001c22a:	f1bb 0f00 	cmp.w	fp, #0
9001c22e:	dc03      	bgt.n	9001c238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001c230:	9a04      	ldr	r2, [sp, #16]
9001c232:	2a00      	cmp	r2, #0
9001c234:	f340 8142 	ble.w	9001c4bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c238:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c23a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c23e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c242:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c244:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c248:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c24c:	2b00      	cmp	r3, #0
9001c24e:	dd0e      	ble.n	9001c26e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c250:	140c      	asrs	r4, r1, #16
9001c252:	d405      	bmi.n	9001c260 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c254:	42bc      	cmp	r4, r7
9001c256:	da03      	bge.n	9001c260 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c258:	1414      	asrs	r4, r2, #16
9001c25a:	d401      	bmi.n	9001c260 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c25c:	42b4      	cmp	r4, r6
9001c25e:	db07      	blt.n	9001c270 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c260:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c262:	3b01      	subs	r3, #1
9001c264:	3002      	adds	r0, #2
9001c266:	4421      	add	r1, r4
9001c268:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c26a:	4422      	add	r2, r4
9001c26c:	e7ee      	b.n	9001c24c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c26e:	d019      	beq.n	9001c2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001c270:	1e5c      	subs	r4, r3, #1
9001c272:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c274:	fb05 1504 	mla	r5, r5, r4, r1
9001c278:	142d      	asrs	r5, r5, #16
9001c27a:	d409      	bmi.n	9001c290 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c27c:	42bd      	cmp	r5, r7
9001c27e:	da07      	bge.n	9001c290 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c280:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c282:	fb05 2404 	mla	r4, r5, r4, r2
9001c286:	1424      	asrs	r4, r4, #16
9001c288:	d402      	bmi.n	9001c290 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c28a:	42b4      	cmp	r4, r6
9001c28c:	f2c0 80b1 	blt.w	9001c3f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001c290:	f04f 0800 	mov.w	r8, #0
9001c294:	eb03 0408 	add.w	r4, r3, r8
9001c298:	2c00      	cmp	r4, #0
9001c29a:	dc3e      	bgt.n	9001c31a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001c29c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c2a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c2a4:	f1bb 0f00 	cmp.w	fp, #0
9001c2a8:	f340 8108 	ble.w	9001c4bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c2ac:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c2b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c2b6:	f1bb 0b01 	subs.w	fp, fp, #1
9001c2ba:	eeb0 6a62 	vmov.f32	s12, s5
9001c2be:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c2c2:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c2c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c2ca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c2ce:	eeb0 6a43 	vmov.f32	s12, s6
9001c2d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c2d6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c2da:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c2de:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c2e2:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c2e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c2ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c2ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c2f2:	ee12 2a90 	vmov	r2, s5
9001c2f6:	eef0 2a47 	vmov.f32	s5, s14
9001c2fa:	fb92 f3f3 	sdiv	r3, r2, r3
9001c2fe:	ee13 2a10 	vmov	r2, s6
9001c302:	9313      	str	r3, [sp, #76]	; 0x4c
9001c304:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c306:	eeb0 3a67 	vmov.f32	s6, s15
9001c30a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c30e:	9a04      	ldr	r2, [sp, #16]
9001c310:	9314      	str	r3, [sp, #80]	; 0x50
9001c312:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c314:	bf08      	it	eq
9001c316:	4613      	moveq	r3, r2
9001c318:	e787      	b.n	9001c22a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001c31a:	140e      	asrs	r6, r1, #16
9001c31c:	d462      	bmi.n	9001c3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c31e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c322:	42b5      	cmp	r5, r6
9001c324:	dd5e      	ble.n	9001c3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c326:	1417      	asrs	r7, r2, #16
9001c328:	d45c      	bmi.n	9001c3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c32a:	f8de 400c 	ldr.w	r4, [lr, #12]
9001c32e:	42bc      	cmp	r4, r7
9001c330:	dd58      	ble.n	9001c3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c332:	b22d      	sxth	r5, r5
9001c334:	9c02      	ldr	r4, [sp, #8]
9001c336:	fb07 6505 	mla	r5, r7, r5, r6
9001c33a:	5d66      	ldrb	r6, [r4, r5]
9001c33c:	2e00      	cmp	r6, #0
9001c33e:	d051      	beq.n	9001c3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c340:	9c01      	ldr	r4, [sp, #4]
9001c342:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001c346:	f06f 0401 	mvn.w	r4, #1
9001c34a:	fb04 f408 	mul.w	r4, r4, r8
9001c34e:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001c352:	5b05      	ldrh	r5, [r0, r4]
9001c354:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c358:	9403      	str	r4, [sp, #12]
9001c35a:	9c05      	ldr	r4, [sp, #20]
9001c35c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c360:	4366      	muls	r6, r4
9001c362:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c366:	1c74      	adds	r4, r6, #1
9001c368:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c36c:	122e      	asrs	r6, r5, #8
9001c36e:	1224      	asrs	r4, r4, #8
9001c370:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c374:	00ed      	lsls	r5, r5, #3
9001c376:	b2a7      	uxth	r7, r4
9001c378:	43e4      	mvns	r4, r4
9001c37a:	b2ed      	uxtb	r5, r5
9001c37c:	b2e4      	uxtb	r4, r4
9001c37e:	fb16 f604 	smulbb	r6, r6, r4
9001c382:	fb15 f504 	smulbb	r5, r5, r4
9001c386:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c38a:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001c38e:	fb1a fa04 	smulbb	sl, sl, r4
9001c392:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c396:	fa1f fc8c 	uxth.w	ip, ip
9001c39a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c39e:	fa5f f989 	uxtb.w	r9, r9
9001c3a2:	fb06 a607 	mla	r6, r6, r7, sl
9001c3a6:	f10c 0401 	add.w	r4, ip, #1
9001c3aa:	fb09 5507 	mla	r5, r9, r7, r5
9001c3ae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c3b2:	9c03      	ldr	r4, [sp, #12]
9001c3b4:	b2ad      	uxth	r5, r5
9001c3b6:	b2b6      	uxth	r6, r6
9001c3b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c3bc:	f105 0a01 	add.w	sl, r5, #1
9001c3c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c3c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c3c8:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c3cc:	f106 0a01 	add.w	sl, r6, #1
9001c3d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c3d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c3d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c3dc:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c3e0:	f820 c004 	strh.w	ip, [r0, r4]
9001c3e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c3e6:	f108 38ff 	add.w	r8, r8, #4294967295
9001c3ea:	4421      	add	r1, r4
9001c3ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c3ee:	4422      	add	r2, r4
9001c3f0:	e750      	b.n	9001c294 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c3f2:	f04f 0900 	mov.w	r9, #0
9001c3f6:	eba3 0409 	sub.w	r4, r3, r9
9001c3fa:	2c00      	cmp	r4, #0
9001c3fc:	f77f af4e 	ble.w	9001c29c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c400:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c404:	140d      	asrs	r5, r1, #16
9001c406:	1414      	asrs	r4, r2, #16
9001c408:	fb06 5404 	mla	r4, r6, r4, r5
9001c40c:	9d02      	ldr	r5, [sp, #8]
9001c40e:	5d2e      	ldrb	r6, [r5, r4]
9001c410:	2e00      	cmp	r6, #0
9001c412:	d04c      	beq.n	9001c4ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001c414:	9d01      	ldr	r5, [sp, #4]
9001c416:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001c41a:	9c05      	ldr	r4, [sp, #20]
9001c41c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c420:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c424:	4366      	muls	r6, r4
9001c426:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c42a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c42e:	1c74      	adds	r4, r6, #1
9001c430:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c434:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c438:	122e      	asrs	r6, r5, #8
9001c43a:	1224      	asrs	r4, r4, #8
9001c43c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c440:	00ed      	lsls	r5, r5, #3
9001c442:	b2a7      	uxth	r7, r4
9001c444:	43e4      	mvns	r4, r4
9001c446:	b2ed      	uxtb	r5, r5
9001c448:	b2e4      	uxtb	r4, r4
9001c44a:	fb16 f604 	smulbb	r6, r6, r4
9001c44e:	fb15 f504 	smulbb	r5, r5, r4
9001c452:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c456:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c45a:	fb1a fa04 	smulbb	sl, sl, r4
9001c45e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c462:	fa1f fc8c 	uxth.w	ip, ip
9001c466:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c46a:	fa5f f888 	uxtb.w	r8, r8
9001c46e:	fb06 a607 	mla	r6, r6, r7, sl
9001c472:	f10c 0401 	add.w	r4, ip, #1
9001c476:	fb08 5507 	mla	r5, r8, r7, r5
9001c47a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c47e:	b2ad      	uxth	r5, r5
9001c480:	b2b6      	uxth	r6, r6
9001c482:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c486:	f105 0a01 	add.w	sl, r5, #1
9001c48a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c48e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c492:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c496:	f106 0a01 	add.w	sl, r6, #1
9001c49a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c49e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c4a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c4a6:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c4aa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c4ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c4b0:	f109 0901 	add.w	r9, r9, #1
9001c4b4:	4421      	add	r1, r4
9001c4b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c4b8:	4422      	add	r2, r4
9001c4ba:	e79c      	b.n	9001c3f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001c4bc:	b007      	add	sp, #28
9001c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c4c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c4c6:	b085      	sub	sp, #20
9001c4c8:	468b      	mov	fp, r1
9001c4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c4ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c4d0:	9203      	str	r2, [sp, #12]
9001c4d2:	6861      	ldr	r1, [r4, #4]
9001c4d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001c4d8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001c4dc:	fb01 2000 	mla	r0, r1, r0, r2
9001c4e0:	6822      	ldr	r2, [r4, #0]
9001c4e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c4e6:	f8d8 2000 	ldr.w	r2, [r8]
9001c4ea:	9200      	str	r2, [sp, #0]
9001c4ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001c4f0:	9201      	str	r2, [sp, #4]
9001c4f2:	f1bb 0f00 	cmp.w	fp, #0
9001c4f6:	dc03      	bgt.n	9001c500 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c4f8:	9a03      	ldr	r2, [sp, #12]
9001c4fa:	2a00      	cmp	r2, #0
9001c4fc:	f340 8146 	ble.w	9001c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c502:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001c506:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c50a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c50c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001c510:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c514:	2b00      	cmp	r3, #0
9001c516:	dd0e      	ble.n	9001c536 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001c518:	140c      	asrs	r4, r1, #16
9001c51a:	d405      	bmi.n	9001c528 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c51c:	42bc      	cmp	r4, r7
9001c51e:	da03      	bge.n	9001c528 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c520:	1414      	asrs	r4, r2, #16
9001c522:	d401      	bmi.n	9001c528 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c524:	42b4      	cmp	r4, r6
9001c526:	db07      	blt.n	9001c538 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c528:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c52a:	3b01      	subs	r3, #1
9001c52c:	3002      	adds	r0, #2
9001c52e:	4421      	add	r1, r4
9001c530:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c532:	4422      	add	r2, r4
9001c534:	e7ee      	b.n	9001c514 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c536:	d017      	beq.n	9001c568 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001c538:	1e5c      	subs	r4, r3, #1
9001c53a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c53c:	fb05 1504 	mla	r5, r5, r4, r1
9001c540:	142d      	asrs	r5, r5, #16
9001c542:	d409      	bmi.n	9001c558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c544:	42bd      	cmp	r5, r7
9001c546:	da07      	bge.n	9001c558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c548:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c54a:	fb05 2404 	mla	r4, r5, r4, r2
9001c54e:	1424      	asrs	r4, r4, #16
9001c550:	d402      	bmi.n	9001c558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c552:	42b4      	cmp	r4, r6
9001c554:	f2c0 80b3 	blt.w	9001c6be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001c558:	2600      	movs	r6, #0
9001c55a:	199c      	adds	r4, r3, r6
9001c55c:	2c00      	cmp	r4, #0
9001c55e:	dc3e      	bgt.n	9001c5de <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c564:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c568:	f1bb 0f00 	cmp.w	fp, #0
9001c56c:	f340 810e 	ble.w	9001c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c570:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c576:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c57a:	f1bb 0b01 	subs.w	fp, fp, #1
9001c57e:	eeb0 6a62 	vmov.f32	s12, s5
9001c582:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c586:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c58a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c58e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c592:	eeb0 6a43 	vmov.f32	s12, s6
9001c596:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c59a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c59e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c5a2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c5a6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c5aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c5ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c5b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c5b6:	ee12 2a90 	vmov	r2, s5
9001c5ba:	eef0 2a47 	vmov.f32	s5, s14
9001c5be:	fb92 f3f3 	sdiv	r3, r2, r3
9001c5c2:	ee13 2a10 	vmov	r2, s6
9001c5c6:	9311      	str	r3, [sp, #68]	; 0x44
9001c5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c5ca:	eeb0 3a67 	vmov.f32	s6, s15
9001c5ce:	fb92 f3f3 	sdiv	r3, r2, r3
9001c5d2:	9a03      	ldr	r2, [sp, #12]
9001c5d4:	9312      	str	r3, [sp, #72]	; 0x48
9001c5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c5d8:	bf08      	it	eq
9001c5da:	4613      	moveq	r3, r2
9001c5dc:	e789      	b.n	9001c4f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001c5de:	140f      	asrs	r7, r1, #16
9001c5e0:	d418      	bmi.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c5e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001c5e6:	42bd      	cmp	r5, r7
9001c5e8:	dd14      	ble.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c5ea:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c5ee:	d411      	bmi.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c5f0:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001c5f4:	4564      	cmp	r4, ip
9001c5f6:	dd0d      	ble.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c5f8:	b22d      	sxth	r5, r5
9001c5fa:	9c01      	ldr	r4, [sp, #4]
9001c5fc:	fb0c 7505 	mla	r5, ip, r5, r7
9001c600:	5d64      	ldrb	r4, [r4, r5]
9001c602:	2cff      	cmp	r4, #255	; 0xff
9001c604:	d10c      	bne.n	9001c620 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001c606:	9c00      	ldr	r4, [sp, #0]
9001c608:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001c60c:	f06f 0401 	mvn.w	r4, #1
9001c610:	4374      	muls	r4, r6
9001c612:	5305      	strh	r5, [r0, r4]
9001c614:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c616:	3e01      	subs	r6, #1
9001c618:	4421      	add	r1, r4
9001c61a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c61c:	4422      	add	r2, r4
9001c61e:	e79c      	b.n	9001c55a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c620:	2c00      	cmp	r4, #0
9001c622:	d0f7      	beq.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c624:	9f00      	ldr	r7, [sp, #0]
9001c626:	fa1f fc84 	uxth.w	ip, r4
9001c62a:	43e4      	mvns	r4, r4
9001c62c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001c630:	f06f 0501 	mvn.w	r5, #1
9001c634:	b2e4      	uxtb	r4, r4
9001c636:	4375      	muls	r5, r6
9001c638:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001c63c:	9502      	str	r5, [sp, #8]
9001c63e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001c642:	5b45      	ldrh	r5, [r0, r5]
9001c644:	122f      	asrs	r7, r5, #8
9001c646:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c64a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c64e:	00ed      	lsls	r5, r5, #3
9001c650:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c654:	fb17 f704 	smulbb	r7, r7, r4
9001c658:	b2ed      	uxtb	r5, r5
9001c65a:	fb1a fa04 	smulbb	sl, sl, r4
9001c65e:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001c662:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001c666:	fb15 f504 	smulbb	r5, r5, r4
9001c66a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c66e:	fa1f fe8e 	uxth.w	lr, lr
9001c672:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c676:	fa5f f989 	uxtb.w	r9, r9
9001c67a:	fb07 a70c 	mla	r7, r7, ip, sl
9001c67e:	f10e 0401 	add.w	r4, lr, #1
9001c682:	fb09 550c 	mla	r5, r9, ip, r5
9001c686:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001c68a:	9c02      	ldr	r4, [sp, #8]
9001c68c:	b2ad      	uxth	r5, r5
9001c68e:	b2bf      	uxth	r7, r7
9001c690:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001c694:	f105 0a01 	add.w	sl, r5, #1
9001c698:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c69c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c6a0:	ea4a 0e0e 	orr.w	lr, sl, lr
9001c6a4:	f107 0a01 	add.w	sl, r7, #1
9001c6a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c6ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c6b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c6b4:	ea4e 0e0a 	orr.w	lr, lr, sl
9001c6b8:	f820 e004 	strh.w	lr, [r0, r4]
9001c6bc:	e7aa      	b.n	9001c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c6be:	f04f 0900 	mov.w	r9, #0
9001c6c2:	eba3 0409 	sub.w	r4, r3, r9
9001c6c6:	2c00      	cmp	r4, #0
9001c6c8:	f77f af4a 	ble.w	9001c560 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c6cc:	1414      	asrs	r4, r2, #16
9001c6ce:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001c6d2:	140d      	asrs	r5, r1, #16
9001c6d4:	fb06 5504 	mla	r5, r6, r4, r5
9001c6d8:	9c01      	ldr	r4, [sp, #4]
9001c6da:	5d64      	ldrb	r4, [r4, r5]
9001c6dc:	2cff      	cmp	r4, #255	; 0xff
9001c6de:	d10b      	bne.n	9001c6f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001c6e0:	9c00      	ldr	r4, [sp, #0]
9001c6e2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001c6e6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001c6ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c6ec:	f109 0901 	add.w	r9, r9, #1
9001c6f0:	4421      	add	r1, r4
9001c6f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c6f4:	4422      	add	r2, r4
9001c6f6:	e7e4      	b.n	9001c6c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001c6f8:	2c00      	cmp	r4, #0
9001c6fa:	d0f6      	beq.n	9001c6ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c6fc:	9e00      	ldr	r6, [sp, #0]
9001c6fe:	b2a7      	uxth	r7, r4
9001c700:	43e4      	mvns	r4, r4
9001c702:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001c706:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c70a:	b2e4      	uxtb	r4, r4
9001c70c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001c710:	122e      	asrs	r6, r5, #8
9001c712:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c716:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c71a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c71e:	00ed      	lsls	r5, r5, #3
9001c720:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c724:	fb16 f604 	smulbb	r6, r6, r4
9001c728:	b2ed      	uxtb	r5, r5
9001c72a:	fb1a fa04 	smulbb	sl, sl, r4
9001c72e:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c732:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001c736:	fb15 f504 	smulbb	r5, r5, r4
9001c73a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001c73e:	fa1f fc8c 	uxth.w	ip, ip
9001c742:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c746:	fa5f fe8e 	uxtb.w	lr, lr
9001c74a:	fb06 a607 	mla	r6, r6, r7, sl
9001c74e:	f10c 0401 	add.w	r4, ip, #1
9001c752:	fb0e 5507 	mla	r5, lr, r7, r5
9001c756:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c75a:	b2ad      	uxth	r5, r5
9001c75c:	b2b6      	uxth	r6, r6
9001c75e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c762:	f105 0a01 	add.w	sl, r5, #1
9001c766:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c76a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c76e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c772:	f106 0a01 	add.w	sl, r6, #1
9001c776:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c77a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c77e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c782:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c786:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c78a:	e7ae      	b.n	9001c6ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c78c:	b005      	add	sp, #20
9001c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c792 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c796:	b085      	sub	sp, #20
9001c798:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c79a:	9203      	str	r2, [sp, #12]
9001c79c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001c7a0:	9100      	str	r1, [sp, #0]
9001c7a2:	9201      	str	r2, [sp, #4]
9001c7a4:	6841      	ldr	r1, [r0, #4]
9001c7a6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001c7aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c7ae:	fb01 2404 	mla	r4, r1, r4, r2
9001c7b2:	6802      	ldr	r2, [r0, #0]
9001c7b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c7b8:	f8de 2000 	ldr.w	r2, [lr]
9001c7bc:	9202      	str	r2, [sp, #8]
9001c7be:	9a01      	ldr	r2, [sp, #4]
9001c7c0:	43d6      	mvns	r6, r2
9001c7c2:	b2f6      	uxtb	r6, r6
9001c7c4:	9a00      	ldr	r2, [sp, #0]
9001c7c6:	2a00      	cmp	r2, #0
9001c7c8:	dc03      	bgt.n	9001c7d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001c7ca:	9a03      	ldr	r2, [sp, #12]
9001c7cc:	2a00      	cmp	r2, #0
9001c7ce:	f340 8124 	ble.w	9001ca1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001c7d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c7d4:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001c7d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c7dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c7de:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001c7e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c7e6:	2b00      	cmp	r3, #0
9001c7e8:	dd0e      	ble.n	9001c808 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c7ea:	1408      	asrs	r0, r1, #16
9001c7ec:	d405      	bmi.n	9001c7fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c7ee:	4560      	cmp	r0, ip
9001c7f0:	da03      	bge.n	9001c7fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c7f2:	1410      	asrs	r0, r2, #16
9001c7f4:	d401      	bmi.n	9001c7fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c7f6:	42b8      	cmp	r0, r7
9001c7f8:	db07      	blt.n	9001c80a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c7fa:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c7fc:	3b01      	subs	r3, #1
9001c7fe:	3402      	adds	r4, #2
9001c800:	4401      	add	r1, r0
9001c802:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c804:	4402      	add	r2, r0
9001c806:	e7ee      	b.n	9001c7e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001c808:	d06e      	beq.n	9001c8e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001c80a:	1e58      	subs	r0, r3, #1
9001c80c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c80e:	fb05 1500 	mla	r5, r5, r0, r1
9001c812:	142d      	asrs	r5, r5, #16
9001c814:	d45c      	bmi.n	9001c8d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c816:	4565      	cmp	r5, ip
9001c818:	da5a      	bge.n	9001c8d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c81a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c81c:	fb05 2000 	mla	r0, r5, r0, r2
9001c820:	1400      	asrs	r0, r0, #16
9001c822:	d455      	bmi.n	9001c8d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c824:	42b8      	cmp	r0, r7
9001c826:	da53      	bge.n	9001c8d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c828:	4699      	mov	r9, r3
9001c82a:	46a2      	mov	sl, r4
9001c82c:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001c830:	f1b9 0f00 	cmp.w	r9, #0
9001c834:	dd54      	ble.n	9001c8e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001c836:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c83a:	140d      	asrs	r5, r1, #16
9001c83c:	1410      	asrs	r0, r2, #16
9001c83e:	f109 39ff 	add.w	r9, r9, #4294967295
9001c842:	fb07 5000 	mla	r0, r7, r0, r5
9001c846:	9d02      	ldr	r5, [sp, #8]
9001c848:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001c84c:	f8ba 5000 	ldrh.w	r5, [sl]
9001c850:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001c854:	122f      	asrs	r7, r5, #8
9001c856:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001c85a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c85e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c862:	00ed      	lsls	r5, r5, #3
9001c864:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001c868:	fb17 f706 	smulbb	r7, r7, r6
9001c86c:	b2ed      	uxtb	r5, r5
9001c86e:	fb18 f806 	smulbb	r8, r8, r6
9001c872:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001c876:	10c7      	asrs	r7, r0, #3
9001c878:	fb15 f506 	smulbb	r5, r5, r6
9001c87c:	00c0      	lsls	r0, r0, #3
9001c87e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c882:	fa1f fc8c 	uxth.w	ip, ip
9001c886:	b2c0      	uxtb	r0, r0
9001c888:	fb07 870b 	mla	r7, r7, fp, r8
9001c88c:	fb00 500b 	mla	r0, r0, fp, r5
9001c890:	f10c 0501 	add.w	r5, ip, #1
9001c894:	b2bf      	uxth	r7, r7
9001c896:	b280      	uxth	r0, r0
9001c898:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c89c:	f107 0801 	add.w	r8, r7, #1
9001c8a0:	1c45      	adds	r5, r0, #1
9001c8a2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001c8a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c8aa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001c8ae:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c8b0:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001c8b4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001c8b8:	4401      	add	r1, r0
9001c8ba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001c8be:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c8c0:	ea45 0c0c 	orr.w	ip, r5, ip
9001c8c4:	4402      	add	r2, r0
9001c8c6:	ea4c 0c08 	orr.w	ip, ip, r8
9001c8ca:	f82a cb02 	strh.w	ip, [sl], #2
9001c8ce:	e7af      	b.n	9001c830 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c8d0:	f04f 0800 	mov.w	r8, #0
9001c8d4:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001c8d8:	eb03 0008 	add.w	r0, r3, r8
9001c8dc:	2800      	cmp	r0, #0
9001c8de:	dc41      	bgt.n	9001c964 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001c8e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c8e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c8e8:	9b00      	ldr	r3, [sp, #0]
9001c8ea:	2b00      	cmp	r3, #0
9001c8ec:	f340 8095 	ble.w	9001ca1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001c8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c8f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c8f6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c8fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c8fe:	eef0 6a62 	vmov.f32	s13, s5
9001c902:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c906:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c90a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c90e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001c912:	eef0 6a43 	vmov.f32	s13, s6
9001c916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c91a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001c91e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c922:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c926:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c92a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c92e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c932:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c936:	ee12 2a90 	vmov	r2, s5
9001c93a:	eef0 2a47 	vmov.f32	s5, s14
9001c93e:	fb92 f3f3 	sdiv	r3, r2, r3
9001c942:	ee13 2a10 	vmov	r2, s6
9001c946:	9311      	str	r3, [sp, #68]	; 0x44
9001c948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c94a:	eeb0 3a67 	vmov.f32	s6, s15
9001c94e:	fb92 f3f3 	sdiv	r3, r2, r3
9001c952:	9312      	str	r3, [sp, #72]	; 0x48
9001c954:	9b00      	ldr	r3, [sp, #0]
9001c956:	9a03      	ldr	r2, [sp, #12]
9001c958:	3b01      	subs	r3, #1
9001c95a:	9300      	str	r3, [sp, #0]
9001c95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c95e:	bf08      	it	eq
9001c960:	4613      	moveq	r3, r2
9001c962:	e72f      	b.n	9001c7c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c964:	140f      	asrs	r7, r1, #16
9001c966:	d451      	bmi.n	9001ca0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c968:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c96c:	42bd      	cmp	r5, r7
9001c96e:	dd4d      	ble.n	9001ca0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c970:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c974:	d44a      	bmi.n	9001ca0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c976:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c97a:	4560      	cmp	r0, ip
9001c97c:	dd46      	ble.n	9001ca0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c97e:	b22d      	sxth	r5, r5
9001c980:	9802      	ldr	r0, [sp, #8]
9001c982:	fb0c 7505 	mla	r5, ip, r5, r7
9001c986:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001c98a:	f06f 0501 	mvn.w	r5, #1
9001c98e:	fb05 fb08 	mul.w	fp, r5, r8
9001c992:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001c996:	f834 500b 	ldrh.w	r5, [r4, fp]
9001c99a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c99e:	122f      	asrs	r7, r5, #8
9001c9a0:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001c9a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c9a8:	00ed      	lsls	r5, r5, #3
9001c9aa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001c9ae:	fb17 f706 	smulbb	r7, r7, r6
9001c9b2:	b2ed      	uxtb	r5, r5
9001c9b4:	fb19 f906 	smulbb	r9, r9, r6
9001c9b8:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001c9bc:	10c7      	asrs	r7, r0, #3
9001c9be:	fb15 f506 	smulbb	r5, r5, r6
9001c9c2:	00c0      	lsls	r0, r0, #3
9001c9c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c9c8:	fa1f fc8c 	uxth.w	ip, ip
9001c9cc:	b2c0      	uxtb	r0, r0
9001c9ce:	fb07 970a 	mla	r7, r7, sl, r9
9001c9d2:	fb00 500a 	mla	r0, r0, sl, r5
9001c9d6:	f10c 0501 	add.w	r5, ip, #1
9001c9da:	b2bf      	uxth	r7, r7
9001c9dc:	b280      	uxth	r0, r0
9001c9de:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c9e2:	f107 0901 	add.w	r9, r7, #1
9001c9e6:	1c45      	adds	r5, r0, #1
9001c9e8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001c9ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c9f0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001c9f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001c9f8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001c9fc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ca00:	ea45 0c0c 	orr.w	ip, r5, ip
9001ca04:	ea4c 0c09 	orr.w	ip, ip, r9
9001ca08:	f824 c00b 	strh.w	ip, [r4, fp]
9001ca0c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ca0e:	f108 38ff 	add.w	r8, r8, #4294967295
9001ca12:	4401      	add	r1, r0
9001ca14:	9812      	ldr	r0, [sp, #72]	; 0x48
9001ca16:	4402      	add	r2, r0
9001ca18:	e75e      	b.n	9001c8d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001ca1a:	b005      	add	sp, #20
9001ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ca20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ca24:	b085      	sub	sp, #20
9001ca26:	4693      	mov	fp, r2
9001ca28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ca2c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001ca2e:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001ca30:	6870      	ldr	r0, [r6, #4]
9001ca32:	9101      	str	r1, [sp, #4]
9001ca34:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ca38:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001ca3c:	fb00 2404 	mla	r4, r0, r4, r2
9001ca40:	6832      	ldr	r2, [r6, #0]
9001ca42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ca46:	682a      	ldr	r2, [r5, #0]
9001ca48:	9202      	str	r2, [sp, #8]
9001ca4a:	9a01      	ldr	r2, [sp, #4]
9001ca4c:	2a00      	cmp	r2, #0
9001ca4e:	dc03      	bgt.n	9001ca58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001ca50:	f1bb 0f00 	cmp.w	fp, #0
9001ca54:	f340 809a 	ble.w	9001cb8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001ca58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ca5a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001ca5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001ca62:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001ca64:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001ca68:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ca6c:	2b00      	cmp	r3, #0
9001ca6e:	dd0c      	ble.n	9001ca8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001ca70:	1406      	asrs	r6, r0, #16
9001ca72:	d405      	bmi.n	9001ca80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ca74:	454e      	cmp	r6, r9
9001ca76:	da03      	bge.n	9001ca80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ca78:	1416      	asrs	r6, r2, #16
9001ca7a:	d401      	bmi.n	9001ca80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ca7c:	4546      	cmp	r6, r8
9001ca7e:	db05      	blt.n	9001ca8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ca80:	4470      	add	r0, lr
9001ca82:	4462      	add	r2, ip
9001ca84:	3b01      	subs	r3, #1
9001ca86:	3402      	adds	r4, #2
9001ca88:	e7f0      	b.n	9001ca6c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ca8a:	d00f      	beq.n	9001caac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca8c:	1e5e      	subs	r6, r3, #1
9001ca8e:	fb0e 0706 	mla	r7, lr, r6, r0
9001ca92:	143f      	asrs	r7, r7, #16
9001ca94:	d541      	bpl.n	9001cb1a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001ca96:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001ca9a:	4698      	mov	r8, r3
9001ca9c:	9603      	str	r6, [sp, #12]
9001ca9e:	f1b8 0f00 	cmp.w	r8, #0
9001caa2:	dc56      	bgt.n	9001cb52 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001caa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001caa8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001caac:	9b01      	ldr	r3, [sp, #4]
9001caae:	2b00      	cmp	r3, #0
9001cab0:	dd6c      	ble.n	9001cb8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001cab2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cab8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cabc:	eeb0 6a62 	vmov.f32	s12, s5
9001cac0:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cac4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cac8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cacc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cad0:	eeb0 6a43 	vmov.f32	s12, s6
9001cad4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cad8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cadc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cae0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cae4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cae8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001caec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001caf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001caf4:	ee12 2a90 	vmov	r2, s5
9001caf8:	eef0 2a47 	vmov.f32	s5, s14
9001cafc:	fb92 fef3 	sdiv	lr, r2, r3
9001cb00:	ee13 2a10 	vmov	r2, s6
9001cb04:	eeb0 3a67 	vmov.f32	s6, s15
9001cb08:	fb92 fcf3 	sdiv	ip, r2, r3
9001cb0c:	9b01      	ldr	r3, [sp, #4]
9001cb0e:	3b01      	subs	r3, #1
9001cb10:	9301      	str	r3, [sp, #4]
9001cb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cb14:	bf08      	it	eq
9001cb16:	465b      	moveq	r3, fp
9001cb18:	e797      	b.n	9001ca4a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001cb1a:	454f      	cmp	r7, r9
9001cb1c:	dabb      	bge.n	9001ca96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cb1e:	fb0c 2606 	mla	r6, ip, r6, r2
9001cb22:	1436      	asrs	r6, r6, #16
9001cb24:	d4b7      	bmi.n	9001ca96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cb26:	4546      	cmp	r6, r8
9001cb28:	dab5      	bge.n	9001ca96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cb2a:	461e      	mov	r6, r3
9001cb2c:	46a0      	mov	r8, r4
9001cb2e:	2e00      	cmp	r6, #0
9001cb30:	ddb8      	ble.n	9001caa4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001cb32:	1417      	asrs	r7, r2, #16
9001cb34:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001cb38:	ea4f 4920 	mov.w	r9, r0, asr #16
9001cb3c:	9902      	ldr	r1, [sp, #8]
9001cb3e:	4470      	add	r0, lr
9001cb40:	4462      	add	r2, ip
9001cb42:	fb0a 9707 	mla	r7, sl, r7, r9
9001cb46:	3e01      	subs	r6, #1
9001cb48:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001cb4c:	f828 7b02 	strh.w	r7, [r8], #2
9001cb50:	e7ed      	b.n	9001cb2e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001cb52:	ea5f 4920 	movs.w	r9, r0, asr #16
9001cb56:	d414      	bmi.n	9001cb82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cb58:	68ae      	ldr	r6, [r5, #8]
9001cb5a:	454e      	cmp	r6, r9
9001cb5c:	dd11      	ble.n	9001cb82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cb5e:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001cb62:	d40e      	bmi.n	9001cb82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cb64:	68ef      	ldr	r7, [r5, #12]
9001cb66:	4557      	cmp	r7, sl
9001cb68:	dd0b      	ble.n	9001cb82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cb6a:	b236      	sxth	r6, r6
9001cb6c:	f06f 0101 	mvn.w	r1, #1
9001cb70:	9f02      	ldr	r7, [sp, #8]
9001cb72:	fb0a 9606 	mla	r6, sl, r6, r9
9001cb76:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001cb7a:	fb01 f608 	mul.w	r6, r1, r8
9001cb7e:	9903      	ldr	r1, [sp, #12]
9001cb80:	538f      	strh	r7, [r1, r6]
9001cb82:	4470      	add	r0, lr
9001cb84:	4462      	add	r2, ip
9001cb86:	f108 38ff 	add.w	r8, r8, #4294967295
9001cb8a:	e788      	b.n	9001ca9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001cb8c:	b005      	add	sp, #20
9001cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cb92 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cb92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cb96:	b087      	sub	sp, #28
9001cb98:	468b      	mov	fp, r1
9001cb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cb9e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001cba0:	9203      	str	r2, [sp, #12]
9001cba2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001cba6:	6841      	ldr	r1, [r0, #4]
9001cba8:	9204      	str	r2, [sp, #16]
9001cbaa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001cbae:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001cbb2:	fb01 2505 	mla	r5, r1, r5, r2
9001cbb6:	6802      	ldr	r2, [r0, #0]
9001cbb8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
9001cbbc:	f8d9 2000 	ldr.w	r2, [r9]
9001cbc0:	9201      	str	r2, [sp, #4]
9001cbc2:	f1bb 0f00 	cmp.w	fp, #0
9001cbc6:	dc03      	bgt.n	9001cbd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001cbc8:	9a03      	ldr	r2, [sp, #12]
9001cbca:	2a00      	cmp	r2, #0
9001cbcc:	f340 8158 	ble.w	9001ce80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001cbd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001cbd2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001cbd6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001cbda:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001cbdc:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001cbe0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001cbe4:	2b00      	cmp	r3, #0
9001cbe6:	dd0e      	ble.n	9001cc06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001cbe8:	1402      	asrs	r2, r0, #16
9001cbea:	d405      	bmi.n	9001cbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cbec:	42ba      	cmp	r2, r7
9001cbee:	da03      	bge.n	9001cbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cbf0:	140a      	asrs	r2, r1, #16
9001cbf2:	d401      	bmi.n	9001cbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cbf4:	42b2      	cmp	r2, r6
9001cbf6:	db07      	blt.n	9001cc08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cbf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cbfa:	3b01      	subs	r3, #1
9001cbfc:	3502      	adds	r5, #2
9001cbfe:	4410      	add	r0, r2
9001cc00:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cc02:	4411      	add	r1, r2
9001cc04:	e7ee      	b.n	9001cbe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001cc06:	d017      	beq.n	9001cc38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001cc08:	1e5a      	subs	r2, r3, #1
9001cc0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001cc0c:	fb04 0402 	mla	r4, r4, r2, r0
9001cc10:	1424      	asrs	r4, r4, #16
9001cc12:	d409      	bmi.n	9001cc28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cc14:	42bc      	cmp	r4, r7
9001cc16:	da07      	bge.n	9001cc28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cc18:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cc1a:	fb04 1202 	mla	r2, r4, r2, r1
9001cc1e:	1412      	asrs	r2, r2, #16
9001cc20:	d402      	bmi.n	9001cc28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cc22:	42b2      	cmp	r2, r6
9001cc24:	f2c0 80bf 	blt.w	9001cda6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001cc28:	2700      	movs	r7, #0
9001cc2a:	19da      	adds	r2, r3, r7
9001cc2c:	2a00      	cmp	r2, #0
9001cc2e:	dc3e      	bgt.n	9001ccae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001cc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cc34:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001cc38:	f1bb 0f00 	cmp.w	fp, #0
9001cc3c:	f340 8120 	ble.w	9001ce80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001cc40:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cc44:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cc46:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cc4a:	f1bb 0b01 	subs.w	fp, fp, #1
9001cc4e:	eeb0 6a62 	vmov.f32	s12, s5
9001cc52:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cc56:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cc5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cc5e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001cc62:	eeb0 6a43 	vmov.f32	s12, s6
9001cc66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cc6a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001cc6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cc72:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cc76:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cc7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cc7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cc82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cc86:	ee12 2a90 	vmov	r2, s5
9001cc8a:	eef0 2a47 	vmov.f32	s5, s14
9001cc8e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cc92:	ee13 2a10 	vmov	r2, s6
9001cc96:	9313      	str	r3, [sp, #76]	; 0x4c
9001cc98:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cc9a:	eeb0 3a67 	vmov.f32	s6, s15
9001cc9e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cca2:	9a03      	ldr	r2, [sp, #12]
9001cca4:	9314      	str	r3, [sp, #80]	; 0x50
9001cca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cca8:	bf08      	it	eq
9001ccaa:	4613      	moveq	r3, r2
9001ccac:	e789      	b.n	9001cbc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001ccae:	1406      	asrs	r6, r0, #16
9001ccb0:	d42d      	bmi.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001ccb2:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001ccb6:	42b4      	cmp	r4, r6
9001ccb8:	dd29      	ble.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001ccba:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001ccbe:	d426      	bmi.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001ccc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001ccc4:	4562      	cmp	r2, ip
9001ccc6:	dd22      	ble.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001ccc8:	b224      	sxth	r4, r4
9001ccca:	9a01      	ldr	r2, [sp, #4]
9001cccc:	fb0c 6404 	mla	r4, ip, r4, r6
9001ccd0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001ccd4:	0e22      	lsrs	r2, r4, #24
9001ccd6:	d01a      	beq.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001ccd8:	9e04      	ldr	r6, [sp, #16]
9001ccda:	4372      	muls	r2, r6
9001ccdc:	1c56      	adds	r6, r2, #1
9001ccde:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001cce2:	0a26      	lsrs	r6, r4, #8
9001cce4:	1212      	asrs	r2, r2, #8
9001cce6:	9605      	str	r6, [sp, #20]
9001cce8:	2aff      	cmp	r2, #255	; 0xff
9001ccea:	d116      	bne.n	9001cd1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001ccec:	f06f 0201 	mvn.w	r2, #1
9001ccf0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001ccf4:	fb02 fc07 	mul.w	ip, r2, r7
9001ccf8:	0962      	lsrs	r2, r4, #5
9001ccfa:	f026 0607 	bic.w	r6, r6, #7
9001ccfe:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001cd02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001cd06:	4316      	orrs	r6, r2
9001cd08:	4326      	orrs	r6, r4
9001cd0a:	f825 600c 	strh.w	r6, [r5, ip]
9001cd0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cd10:	3f01      	subs	r7, #1
9001cd12:	4410      	add	r0, r2
9001cd14:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cd16:	4411      	add	r1, r2
9001cd18:	e787      	b.n	9001cc2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001cd1a:	f06f 0601 	mvn.w	r6, #1
9001cd1e:	fa1f fa82 	uxth.w	sl, r2
9001cd22:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001cd26:	43d2      	mvns	r2, r2
9001cd28:	437e      	muls	r6, r7
9001cd2a:	b2e4      	uxtb	r4, r4
9001cd2c:	fb1c fc0a 	smulbb	ip, ip, sl
9001cd30:	b2d2      	uxtb	r2, r2
9001cd32:	f835 8006 	ldrh.w	r8, [r5, r6]
9001cd36:	fb14 f40a 	smulbb	r4, r4, sl
9001cd3a:	9602      	str	r6, [sp, #8]
9001cd3c:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001cd40:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001cd44:	fb16 f60a 	smulbb	r6, r6, sl
9001cd48:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001cd4c:	fb0e ce02 	mla	lr, lr, r2, ip
9001cd50:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001cd54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001cd58:	fa1f fe8e 	uxth.w	lr, lr
9001cd5c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001cd60:	fa5f f888 	uxtb.w	r8, r8
9001cd64:	fb0c 6c02 	mla	ip, ip, r2, r6
9001cd68:	fb08 4402 	mla	r4, r8, r2, r4
9001cd6c:	f10e 0201 	add.w	r2, lr, #1
9001cd70:	fa1f fc8c 	uxth.w	ip, ip
9001cd74:	b2a4      	uxth	r4, r4
9001cd76:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001cd7a:	9a02      	ldr	r2, [sp, #8]
9001cd7c:	1c66      	adds	r6, r4, #1
9001cd7e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001cd82:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001cd86:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001cd8a:	ea46 0e0e 	orr.w	lr, r6, lr
9001cd8e:	f10c 0601 	add.w	r6, ip, #1
9001cd92:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001cd96:	0976      	lsrs	r6, r6, #5
9001cd98:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001cd9c:	ea4e 0e06 	orr.w	lr, lr, r6
9001cda0:	f825 e002 	strh.w	lr, [r5, r2]
9001cda4:	e7b3      	b.n	9001cd0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cda6:	f04f 0800 	mov.w	r8, #0
9001cdaa:	eba3 0208 	sub.w	r2, r3, r8
9001cdae:	2a00      	cmp	r2, #0
9001cdb0:	f77f af3e 	ble.w	9001cc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cdb4:	1404      	asrs	r4, r0, #16
9001cdb6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001cdba:	140a      	asrs	r2, r1, #16
9001cdbc:	fb06 4202 	mla	r2, r6, r2, r4
9001cdc0:	9c01      	ldr	r4, [sp, #4]
9001cdc2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001cdc6:	0e22      	lsrs	r2, r4, #24
9001cdc8:	d015      	beq.n	9001cdf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001cdca:	9e04      	ldr	r6, [sp, #16]
9001cdcc:	4372      	muls	r2, r6
9001cdce:	1c56      	adds	r6, r2, #1
9001cdd0:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001cdd4:	0a26      	lsrs	r6, r4, #8
9001cdd6:	1212      	asrs	r2, r2, #8
9001cdd8:	2aff      	cmp	r2, #255	; 0xff
9001cdda:	d113      	bne.n	9001ce04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001cddc:	0962      	lsrs	r2, r4, #5
9001cdde:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001cde2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001cde6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001cdea:	f026 0607 	bic.w	r6, r6, #7
9001cdee:	4316      	orrs	r6, r2
9001cdf0:	4326      	orrs	r6, r4
9001cdf2:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001cdf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cdf8:	f108 0801 	add.w	r8, r8, #1
9001cdfc:	4410      	add	r0, r2
9001cdfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001ce00:	4411      	add	r1, r2
9001ce02:	e7d2      	b.n	9001cdaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001ce04:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
9001ce08:	fa1f fa82 	uxth.w	sl, r2
9001ce0c:	f3c4 4707 	ubfx	r7, r4, #16, #8
9001ce10:	43d2      	mvns	r2, r2
9001ce12:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ce16:	fb17 f70a 	smulbb	r7, r7, sl
9001ce1a:	b2d2      	uxtb	r2, r2
9001ce1c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ce20:	b2e4      	uxtb	r4, r4
9001ce22:	b2f6      	uxtb	r6, r6
9001ce24:	fb0c 7c02 	mla	ip, ip, r2, r7
9001ce28:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001ce2c:	fb14 f40a 	smulbb	r4, r4, sl
9001ce30:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ce34:	fa1f fc8c 	uxth.w	ip, ip
9001ce38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ce3c:	fb16 f60a 	smulbb	r6, r6, sl
9001ce40:	fa5f fe8e 	uxtb.w	lr, lr
9001ce44:	fb0e 4402 	mla	r4, lr, r2, r4
9001ce48:	fb07 6702 	mla	r7, r7, r2, r6
9001ce4c:	f10c 0201 	add.w	r2, ip, #1
9001ce50:	b2a4      	uxth	r4, r4
9001ce52:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001ce56:	1c66      	adds	r6, r4, #1
9001ce58:	b2bf      	uxth	r7, r7
9001ce5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ce5e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001ce62:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001ce66:	ea46 0c0c 	orr.w	ip, r6, ip
9001ce6a:	1c7e      	adds	r6, r7, #1
9001ce6c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001ce70:	0976      	lsrs	r6, r6, #5
9001ce72:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001ce76:	ea4c 0c06 	orr.w	ip, ip, r6
9001ce7a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001ce7e:	e7ba      	b.n	9001cdf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001ce80:	b007      	add	sp, #28
9001ce82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001ce88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ce8c:	b085      	sub	sp, #20
9001ce8e:	468b      	mov	fp, r1
9001ce90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ce94:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ce96:	9203      	str	r2, [sp, #12]
9001ce98:	6841      	ldr	r1, [r0, #4]
9001ce9a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001ce9e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cea2:	fb01 2404 	mla	r4, r1, r4, r2
9001cea6:	6802      	ldr	r2, [r0, #0]
9001cea8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ceac:	f8d8 2000 	ldr.w	r2, [r8]
9001ceb0:	9201      	str	r2, [sp, #4]
9001ceb2:	f1bb 0f00 	cmp.w	fp, #0
9001ceb6:	dc03      	bgt.n	9001cec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001ceb8:	9a03      	ldr	r2, [sp, #12]
9001ceba:	2a00      	cmp	r2, #0
9001cebc:	f340 814f 	ble.w	9001d15e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001cec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cec2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001cec6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001ceca:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cecc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001ced0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ced4:	2b00      	cmp	r3, #0
9001ced6:	dd0e      	ble.n	9001cef6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001ced8:	1408      	asrs	r0, r1, #16
9001ceda:	d405      	bmi.n	9001cee8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cedc:	42b8      	cmp	r0, r7
9001cede:	da03      	bge.n	9001cee8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cee0:	1410      	asrs	r0, r2, #16
9001cee2:	d401      	bmi.n	9001cee8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cee4:	42b0      	cmp	r0, r6
9001cee6:	db07      	blt.n	9001cef8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001cee8:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ceea:	3b01      	subs	r3, #1
9001ceec:	3402      	adds	r4, #2
9001ceee:	4401      	add	r1, r0
9001cef0:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cef2:	4402      	add	r2, r0
9001cef4:	e7ee      	b.n	9001ced4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001cef6:	d017      	beq.n	9001cf28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001cef8:	1e58      	subs	r0, r3, #1
9001cefa:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cefc:	fb05 1500 	mla	r5, r5, r0, r1
9001cf00:	142d      	asrs	r5, r5, #16
9001cf02:	d409      	bmi.n	9001cf18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001cf04:	42bd      	cmp	r5, r7
9001cf06:	da07      	bge.n	9001cf18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001cf08:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001cf0a:	fb05 2000 	mla	r0, r5, r0, r2
9001cf0e:	1400      	asrs	r0, r0, #16
9001cf10:	d402      	bmi.n	9001cf18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001cf12:	42b0      	cmp	r0, r6
9001cf14:	f2c0 80ba 	blt.w	9001d08c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001cf18:	2600      	movs	r6, #0
9001cf1a:	1998      	adds	r0, r3, r6
9001cf1c:	2800      	cmp	r0, #0
9001cf1e:	dc3e      	bgt.n	9001cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cf20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cf24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cf28:	f1bb 0f00 	cmp.w	fp, #0
9001cf2c:	f340 8117 	ble.w	9001d15e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001cf30:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cf34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf36:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cf3a:	f1bb 0b01 	subs.w	fp, fp, #1
9001cf3e:	eeb0 6a62 	vmov.f32	s12, s5
9001cf42:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cf46:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cf4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cf4e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cf52:	eeb0 6a43 	vmov.f32	s12, s6
9001cf56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cf5a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cf5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cf62:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cf66:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cf6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cf6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cf72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cf76:	ee12 2a90 	vmov	r2, s5
9001cf7a:	eef0 2a47 	vmov.f32	s5, s14
9001cf7e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf82:	ee13 2a10 	vmov	r2, s6
9001cf86:	9311      	str	r3, [sp, #68]	; 0x44
9001cf88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf8a:	eeb0 3a67 	vmov.f32	s6, s15
9001cf8e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf92:	9a03      	ldr	r2, [sp, #12]
9001cf94:	9312      	str	r3, [sp, #72]	; 0x48
9001cf96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf98:	bf08      	it	eq
9001cf9a:	4613      	moveq	r3, r2
9001cf9c:	e789      	b.n	9001ceb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001cf9e:	140f      	asrs	r7, r1, #16
9001cfa0:	d424      	bmi.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cfa2:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001cfa6:	42bd      	cmp	r5, r7
9001cfa8:	dd20      	ble.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cfaa:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cfae:	d41d      	bmi.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cfb0:	f8d8 000c 	ldr.w	r0, [r8, #12]
9001cfb4:	4560      	cmp	r0, ip
9001cfb6:	dd19      	ble.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cfb8:	b22d      	sxth	r5, r5
9001cfba:	9801      	ldr	r0, [sp, #4]
9001cfbc:	fb0c 7505 	mla	r5, ip, r5, r7
9001cfc0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
9001cfc4:	0e07      	lsrs	r7, r0, #24
9001cfc6:	2fff      	cmp	r7, #255	; 0xff
9001cfc8:	d116      	bne.n	9001cff8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001cfca:	f06f 0501 	mvn.w	r5, #1
9001cfce:	fb05 f706 	mul.w	r7, r5, r6
9001cfd2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001cfd6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001cfda:	0945      	lsrs	r5, r0, #5
9001cfdc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001cfe0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cfe4:	ea4c 0505 	orr.w	r5, ip, r5
9001cfe8:	4305      	orrs	r5, r0
9001cfea:	53e5      	strh	r5, [r4, r7]
9001cfec:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cfee:	3e01      	subs	r6, #1
9001cff0:	4401      	add	r1, r0
9001cff2:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cff4:	4402      	add	r2, r0
9001cff6:	e790      	b.n	9001cf1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cff8:	b2fd      	uxtb	r5, r7
9001cffa:	2f00      	cmp	r7, #0
9001cffc:	d0f6      	beq.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cffe:	f06f 0701 	mvn.w	r7, #1
9001d002:	fa1f f985 	uxth.w	r9, r5
9001d006:	43ed      	mvns	r5, r5
9001d008:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d00c:	4377      	muls	r7, r6
9001d00e:	fb1a fa09 	smulbb	sl, sl, r9
9001d012:	b2ed      	uxtb	r5, r5
9001d014:	f834 e007 	ldrh.w	lr, [r4, r7]
9001d018:	9702      	str	r7, [sp, #8]
9001d01a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001d01e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d022:	fb17 f709 	smulbb	r7, r7, r9
9001d026:	b2c0      	uxtb	r0, r0
9001d028:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d02c:	fb10 f009 	smulbb	r0, r0, r9
9001d030:	fb0c 7c05 	mla	ip, ip, r5, r7
9001d034:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d038:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d03c:	fa1f fc8c 	uxth.w	ip, ip
9001d040:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d044:	fa5f fe8e 	uxtb.w	lr, lr
9001d048:	fb07 a705 	mla	r7, r7, r5, sl
9001d04c:	fb0e 0005 	mla	r0, lr, r5, r0
9001d050:	f10c 0501 	add.w	r5, ip, #1
9001d054:	b2bf      	uxth	r7, r7
9001d056:	b280      	uxth	r0, r0
9001d058:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001d05c:	f100 0a01 	add.w	sl, r0, #1
9001d060:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d064:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d068:	9802      	ldr	r0, [sp, #8]
9001d06a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d06e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001d072:	f107 0a01 	add.w	sl, r7, #1
9001d076:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d07a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d07e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d082:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d086:	f824 c000 	strh.w	ip, [r4, r0]
9001d08a:	e7af      	b.n	9001cfec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d08c:	f04f 0e00 	mov.w	lr, #0
9001d090:	eba3 000e 	sub.w	r0, r3, lr
9001d094:	2800      	cmp	r0, #0
9001d096:	f77f af43 	ble.w	9001cf20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d09a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001d09e:	140d      	asrs	r5, r1, #16
9001d0a0:	1410      	asrs	r0, r2, #16
9001d0a2:	fb06 5000 	mla	r0, r6, r0, r5
9001d0a6:	9d01      	ldr	r5, [sp, #4]
9001d0a8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001d0ac:	0e2e      	lsrs	r6, r5, #24
9001d0ae:	2eff      	cmp	r6, #255	; 0xff
9001d0b0:	d112      	bne.n	9001d0d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
9001d0b2:	482c      	ldr	r0, [pc, #176]	; (9001d164 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
9001d0b4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001d0b8:	0968      	lsrs	r0, r5, #5
9001d0ba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d0be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d0c2:	4330      	orrs	r0, r6
9001d0c4:	4328      	orrs	r0, r5
9001d0c6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001d0ca:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d0cc:	f10e 0e01 	add.w	lr, lr, #1
9001d0d0:	4401      	add	r1, r0
9001d0d2:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d0d4:	4402      	add	r2, r0
9001d0d6:	e7db      	b.n	9001d090 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
9001d0d8:	b2f0      	uxtb	r0, r6
9001d0da:	2e00      	cmp	r6, #0
9001d0dc:	d0f5      	beq.n	9001d0ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d0de:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d0e2:	fa1f f980 	uxth.w	r9, r0
9001d0e6:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d0ea:	43c0      	mvns	r0, r0
9001d0ec:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d0f0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d0f4:	fb16 f609 	smulbb	r6, r6, r9
9001d0f8:	b2c0      	uxtb	r0, r0
9001d0fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d0fe:	b2ed      	uxtb	r5, r5
9001d100:	fb1a fa09 	smulbb	sl, sl, r9
9001d104:	fb07 6700 	mla	r7, r7, r0, r6
9001d108:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d10c:	fb15 f509 	smulbb	r5, r5, r9
9001d110:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d114:	b2bf      	uxth	r7, r7
9001d116:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d11a:	fa5f fc8c 	uxtb.w	ip, ip
9001d11e:	fb06 a600 	mla	r6, r6, r0, sl
9001d122:	fb0c 5500 	mla	r5, ip, r0, r5
9001d126:	1c78      	adds	r0, r7, #1
9001d128:	b2b6      	uxth	r6, r6
9001d12a:	b2ad      	uxth	r5, r5
9001d12c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001d130:	f105 0a01 	add.w	sl, r5, #1
9001d134:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d138:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d13c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d140:	ea4a 0707 	orr.w	r7, sl, r7
9001d144:	f106 0a01 	add.w	sl, r6, #1
9001d148:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d14c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d150:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d154:	ea47 070a 	orr.w	r7, r7, sl
9001d158:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001d15c:	e7b5      	b.n	9001d0ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d15e:	b005      	add	sp, #20
9001d160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d164:	fffff800 	.word	0xfffff800

9001d168 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d16c:	b087      	sub	sp, #28
9001d16e:	468b      	mov	fp, r1
9001d170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d174:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d176:	9203      	str	r2, [sp, #12]
9001d178:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d17c:	6841      	ldr	r1, [r0, #4]
9001d17e:	9204      	str	r2, [sp, #16]
9001d180:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d184:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d188:	fb01 2404 	mla	r4, r1, r4, r2
9001d18c:	6802      	ldr	r2, [r0, #0]
9001d18e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d192:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d196:	3201      	adds	r2, #1
9001d198:	f022 0201 	bic.w	r2, r2, #1
9001d19c:	9200      	str	r2, [sp, #0]
9001d19e:	f8d9 2000 	ldr.w	r2, [r9]
9001d1a2:	9201      	str	r2, [sp, #4]
9001d1a4:	f1bb 0f00 	cmp.w	fp, #0
9001d1a8:	dc03      	bgt.n	9001d1b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d1aa:	9a03      	ldr	r2, [sp, #12]
9001d1ac:	2a00      	cmp	r2, #0
9001d1ae:	f340 816a 	ble.w	9001d486 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d1b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d1b4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d1b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d1be:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d1c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d1c6:	2b00      	cmp	r3, #0
9001d1c8:	dd0e      	ble.n	9001d1e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d1ca:	1402      	asrs	r2, r0, #16
9001d1cc:	d405      	bmi.n	9001d1da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d1ce:	42ba      	cmp	r2, r7
9001d1d0:	da03      	bge.n	9001d1da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d1d2:	140a      	asrs	r2, r1, #16
9001d1d4:	d401      	bmi.n	9001d1da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d1d6:	42b2      	cmp	r2, r6
9001d1d8:	db07      	blt.n	9001d1ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001d1da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d1dc:	3b01      	subs	r3, #1
9001d1de:	3402      	adds	r4, #2
9001d1e0:	4410      	add	r0, r2
9001d1e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d1e4:	4411      	add	r1, r2
9001d1e6:	e7ee      	b.n	9001d1c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001d1e8:	d017      	beq.n	9001d21a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d1ea:	1e5a      	subs	r2, r3, #1
9001d1ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d1ee:	fb05 0502 	mla	r5, r5, r2, r0
9001d1f2:	142d      	asrs	r5, r5, #16
9001d1f4:	d409      	bmi.n	9001d20a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d1f6:	42bd      	cmp	r5, r7
9001d1f8:	da07      	bge.n	9001d20a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d1fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d1fc:	fb05 1202 	mla	r2, r5, r2, r1
9001d200:	1412      	asrs	r2, r2, #16
9001d202:	d402      	bmi.n	9001d20a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d204:	42b2      	cmp	r2, r6
9001d206:	f2c0 80c8 	blt.w	9001d39a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001d20a:	2700      	movs	r7, #0
9001d20c:	19da      	adds	r2, r3, r7
9001d20e:	2a00      	cmp	r2, #0
9001d210:	dc3e      	bgt.n	9001d290 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d212:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d216:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d21a:	f1bb 0f00 	cmp.w	fp, #0
9001d21e:	f340 8132 	ble.w	9001d486 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d222:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d226:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d228:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d22c:	f1bb 0b01 	subs.w	fp, fp, #1
9001d230:	eeb0 6a62 	vmov.f32	s12, s5
9001d234:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d238:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d23c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d240:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d244:	eeb0 6a43 	vmov.f32	s12, s6
9001d248:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d24c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d250:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d254:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d258:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d25c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d260:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d264:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d268:	ee12 2a90 	vmov	r2, s5
9001d26c:	eef0 2a47 	vmov.f32	s5, s14
9001d270:	fb92 f3f3 	sdiv	r3, r2, r3
9001d274:	ee13 2a10 	vmov	r2, s6
9001d278:	9313      	str	r3, [sp, #76]	; 0x4c
9001d27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d27c:	eeb0 3a67 	vmov.f32	s6, s15
9001d280:	fb92 f3f3 	sdiv	r3, r2, r3
9001d284:	9a03      	ldr	r2, [sp, #12]
9001d286:	9314      	str	r3, [sp, #80]	; 0x50
9001d288:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d28a:	bf08      	it	eq
9001d28c:	4613      	moveq	r3, r2
9001d28e:	e789      	b.n	9001d1a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d290:	1405      	asrs	r5, r0, #16
9001d292:	d436      	bmi.n	9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d294:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d298:	42aa      	cmp	r2, r5
9001d29a:	dd32      	ble.n	9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d29c:	140e      	asrs	r6, r1, #16
9001d29e:	d430      	bmi.n	9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d2a0:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d2a4:	42b2      	cmp	r2, r6
9001d2a6:	dd2c      	ble.n	9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d2a8:	9a00      	ldr	r2, [sp, #0]
9001d2aa:	fb06 5502 	mla	r5, r6, r2, r5
9001d2ae:	9e01      	ldr	r6, [sp, #4]
9001d2b0:	086a      	lsrs	r2, r5, #1
9001d2b2:	5cb2      	ldrb	r2, [r6, r2]
9001d2b4:	07ee      	lsls	r6, r5, #31
9001d2b6:	bf54      	ite	pl
9001d2b8:	f002 020f 	andpl.w	r2, r2, #15
9001d2bc:	1112      	asrmi	r2, r2, #4
9001d2be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d2c2:	b2d2      	uxtb	r2, r2
9001d2c4:	b1ea      	cbz	r2, 9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d2c6:	9d04      	ldr	r5, [sp, #16]
9001d2c8:	436a      	muls	r2, r5
9001d2ca:	1c55      	adds	r5, r2, #1
9001d2cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d2d0:	4d6e      	ldr	r5, [pc, #440]	; (9001d48c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d2d2:	1212      	asrs	r2, r2, #8
9001d2d4:	682d      	ldr	r5, [r5, #0]
9001d2d6:	2aff      	cmp	r2, #255	; 0xff
9001d2d8:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001d2dc:	9605      	str	r6, [sp, #20]
9001d2de:	d116      	bne.n	9001d30e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
9001d2e0:	f06f 0201 	mvn.w	r2, #1
9001d2e4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d2e8:	fb02 fc07 	mul.w	ip, r2, r7
9001d2ec:	096a      	lsrs	r2, r5, #5
9001d2ee:	f026 0607 	bic.w	r6, r6, #7
9001d2f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d2f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d2fa:	4316      	orrs	r6, r2
9001d2fc:	432e      	orrs	r6, r5
9001d2fe:	f824 600c 	strh.w	r6, [r4, ip]
9001d302:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d304:	3f01      	subs	r7, #1
9001d306:	4410      	add	r0, r2
9001d308:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d30a:	4411      	add	r1, r2
9001d30c:	e77e      	b.n	9001d20c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001d30e:	f06f 0601 	mvn.w	r6, #1
9001d312:	fa1f fa82 	uxth.w	sl, r2
9001d316:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001d31a:	43d2      	mvns	r2, r2
9001d31c:	437e      	muls	r6, r7
9001d31e:	b2ed      	uxtb	r5, r5
9001d320:	fb1c fc0a 	smulbb	ip, ip, sl
9001d324:	b2d2      	uxtb	r2, r2
9001d326:	f834 8006 	ldrh.w	r8, [r4, r6]
9001d32a:	fb15 f50a 	smulbb	r5, r5, sl
9001d32e:	9602      	str	r6, [sp, #8]
9001d330:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d334:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d338:	fb16 f60a 	smulbb	r6, r6, sl
9001d33c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d340:	fb0e ce02 	mla	lr, lr, r2, ip
9001d344:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d348:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d34c:	fa1f fe8e 	uxth.w	lr, lr
9001d350:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d354:	fa5f f888 	uxtb.w	r8, r8
9001d358:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d35c:	fb08 5502 	mla	r5, r8, r2, r5
9001d360:	f10e 0201 	add.w	r2, lr, #1
9001d364:	fa1f fc8c 	uxth.w	ip, ip
9001d368:	b2ad      	uxth	r5, r5
9001d36a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d36e:	9a02      	ldr	r2, [sp, #8]
9001d370:	1c6e      	adds	r6, r5, #1
9001d372:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d376:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001d37a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d37e:	ea46 0e0e 	orr.w	lr, r6, lr
9001d382:	f10c 0601 	add.w	r6, ip, #1
9001d386:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d38a:	0976      	lsrs	r6, r6, #5
9001d38c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d390:	ea4e 0e06 	orr.w	lr, lr, r6
9001d394:	f824 e002 	strh.w	lr, [r4, r2]
9001d398:	e7b3      	b.n	9001d302 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d39a:	f04f 0800 	mov.w	r8, #0
9001d39e:	eba3 0208 	sub.w	r2, r3, r8
9001d3a2:	2a00      	cmp	r2, #0
9001d3a4:	f77f af35 	ble.w	9001d212 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d3a8:	1402      	asrs	r2, r0, #16
9001d3aa:	9e00      	ldr	r6, [sp, #0]
9001d3ac:	140d      	asrs	r5, r1, #16
9001d3ae:	fb06 2505 	mla	r5, r6, r5, r2
9001d3b2:	9e01      	ldr	r6, [sp, #4]
9001d3b4:	086a      	lsrs	r2, r5, #1
9001d3b6:	07ed      	lsls	r5, r5, #31
9001d3b8:	5cb2      	ldrb	r2, [r6, r2]
9001d3ba:	bf54      	ite	pl
9001d3bc:	f002 020f 	andpl.w	r2, r2, #15
9001d3c0:	1112      	asrmi	r2, r2, #4
9001d3c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d3c6:	b2d2      	uxtb	r2, r2
9001d3c8:	b1c2      	cbz	r2, 9001d3fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d3ca:	9d04      	ldr	r5, [sp, #16]
9001d3cc:	436a      	muls	r2, r5
9001d3ce:	1c55      	adds	r5, r2, #1
9001d3d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d3d4:	4d2d      	ldr	r5, [pc, #180]	; (9001d48c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d3d6:	1212      	asrs	r2, r2, #8
9001d3d8:	682e      	ldr	r6, [r5, #0]
9001d3da:	2aff      	cmp	r2, #255	; 0xff
9001d3dc:	ea4f 2516 	mov.w	r5, r6, lsr #8
9001d3e0:	d113      	bne.n	9001d40a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001d3e2:	0972      	lsrs	r2, r6, #5
9001d3e4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
9001d3e8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001d3ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d3f0:	f025 0507 	bic.w	r5, r5, #7
9001d3f4:	4315      	orrs	r5, r2
9001d3f6:	4335      	orrs	r5, r6
9001d3f8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d3fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d3fe:	f108 0801 	add.w	r8, r8, #1
9001d402:	4410      	add	r0, r2
9001d404:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d406:	4411      	add	r1, r2
9001d408:	e7c9      	b.n	9001d39e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d40a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d40e:	fa1f fa82 	uxth.w	sl, r2
9001d412:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001d416:	43d2      	mvns	r2, r2
9001d418:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d41c:	fb17 f70a 	smulbb	r7, r7, sl
9001d420:	b2d2      	uxtb	r2, r2
9001d422:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d426:	b2f6      	uxtb	r6, r6
9001d428:	b2ed      	uxtb	r5, r5
9001d42a:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d42e:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d432:	fb16 f60a 	smulbb	r6, r6, sl
9001d436:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d43a:	fa1f fc8c 	uxth.w	ip, ip
9001d43e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d442:	fb15 f50a 	smulbb	r5, r5, sl
9001d446:	fa5f fe8e 	uxtb.w	lr, lr
9001d44a:	fb0e 6602 	mla	r6, lr, r2, r6
9001d44e:	fb07 5702 	mla	r7, r7, r2, r5
9001d452:	f10c 0201 	add.w	r2, ip, #1
9001d456:	b2b6      	uxth	r6, r6
9001d458:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d45c:	1c75      	adds	r5, r6, #1
9001d45e:	b2bf      	uxth	r7, r7
9001d460:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d464:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001d468:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001d46c:	ea45 0c0c 	orr.w	ip, r5, ip
9001d470:	1c7d      	adds	r5, r7, #1
9001d472:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001d476:	096d      	lsrs	r5, r5, #5
9001d478:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d47c:	ea4c 0c05 	orr.w	ip, ip, r5
9001d480:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001d484:	e7ba      	b.n	9001d3fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d486:	b007      	add	sp, #28
9001d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d48c:	240281a4 	.word	0x240281a4

9001d490 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d494:	b087      	sub	sp, #28
9001d496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d49a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001d7a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001d49e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d4a0:	9101      	str	r1, [sp, #4]
9001d4a2:	9205      	str	r2, [sp, #20]
9001d4a4:	6841      	ldr	r1, [r0, #4]
9001d4a6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001d4aa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d4ae:	fb01 2404 	mla	r4, r1, r4, r2
9001d4b2:	6802      	ldr	r2, [r0, #0]
9001d4b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d4b8:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d4bc:	3201      	adds	r2, #1
9001d4be:	f022 0201 	bic.w	r2, r2, #1
9001d4c2:	9202      	str	r2, [sp, #8]
9001d4c4:	f8db 2000 	ldr.w	r2, [fp]
9001d4c8:	9203      	str	r2, [sp, #12]
9001d4ca:	9a01      	ldr	r2, [sp, #4]
9001d4cc:	2a00      	cmp	r2, #0
9001d4ce:	dc03      	bgt.n	9001d4d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d4d0:	9a05      	ldr	r2, [sp, #20]
9001d4d2:	2a00      	cmp	r2, #0
9001d4d4:	f340 8162 	ble.w	9001d79c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d4d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d4da:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001d4de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d4e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d4e4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001d4e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d4ec:	2b00      	cmp	r3, #0
9001d4ee:	dd0e      	ble.n	9001d50e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d4f0:	1402      	asrs	r2, r0, #16
9001d4f2:	d405      	bmi.n	9001d500 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d4f4:	42ba      	cmp	r2, r7
9001d4f6:	da03      	bge.n	9001d500 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d4f8:	140a      	asrs	r2, r1, #16
9001d4fa:	d401      	bmi.n	9001d500 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d4fc:	42b2      	cmp	r2, r6
9001d4fe:	db07      	blt.n	9001d510 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d502:	3b01      	subs	r3, #1
9001d504:	3402      	adds	r4, #2
9001d506:	4410      	add	r0, r2
9001d508:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d50a:	4411      	add	r1, r2
9001d50c:	e7ee      	b.n	9001d4ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001d50e:	d017      	beq.n	9001d540 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001d510:	1e5a      	subs	r2, r3, #1
9001d512:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d514:	fb05 0502 	mla	r5, r5, r2, r0
9001d518:	142d      	asrs	r5, r5, #16
9001d51a:	d409      	bmi.n	9001d530 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d51c:	42bd      	cmp	r5, r7
9001d51e:	da07      	bge.n	9001d530 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d520:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d522:	fb05 1202 	mla	r2, r5, r2, r1
9001d526:	1412      	asrs	r2, r2, #16
9001d528:	d402      	bmi.n	9001d530 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d52a:	42b2      	cmp	r2, r6
9001d52c:	f2c0 80c3 	blt.w	9001d6b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001d530:	2500      	movs	r5, #0
9001d532:	195a      	adds	r2, r3, r5
9001d534:	2a00      	cmp	r2, #0
9001d536:	dc3f      	bgt.n	9001d5b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d53c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d540:	9b01      	ldr	r3, [sp, #4]
9001d542:	2b00      	cmp	r3, #0
9001d544:	f340 812a 	ble.w	9001d79c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d548:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d54e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d552:	eeb0 6a62 	vmov.f32	s12, s5
9001d556:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d55a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d55e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d562:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d566:	eeb0 6a43 	vmov.f32	s12, s6
9001d56a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d56e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d572:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d576:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d57a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d57e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d582:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d586:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d58a:	ee12 2a90 	vmov	r2, s5
9001d58e:	eef0 2a47 	vmov.f32	s5, s14
9001d592:	fb92 f3f3 	sdiv	r3, r2, r3
9001d596:	ee13 2a10 	vmov	r2, s6
9001d59a:	9313      	str	r3, [sp, #76]	; 0x4c
9001d59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d59e:	eeb0 3a67 	vmov.f32	s6, s15
9001d5a2:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5a6:	9314      	str	r3, [sp, #80]	; 0x50
9001d5a8:	9b01      	ldr	r3, [sp, #4]
9001d5aa:	9a05      	ldr	r2, [sp, #20]
9001d5ac:	3b01      	subs	r3, #1
9001d5ae:	9301      	str	r3, [sp, #4]
9001d5b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d5b2:	bf08      	it	eq
9001d5b4:	4613      	moveq	r3, r2
9001d5b6:	e788      	b.n	9001d4ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001d5b8:	1406      	asrs	r6, r0, #16
9001d5ba:	d42c      	bmi.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d5bc:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d5c0:	42b2      	cmp	r2, r6
9001d5c2:	dd28      	ble.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d5c4:	140f      	asrs	r7, r1, #16
9001d5c6:	d426      	bmi.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d5c8:	f8db 200c 	ldr.w	r2, [fp, #12]
9001d5cc:	42ba      	cmp	r2, r7
9001d5ce:	dd22      	ble.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d5d0:	9a02      	ldr	r2, [sp, #8]
9001d5d2:	fb07 6602 	mla	r6, r7, r2, r6
9001d5d6:	9f03      	ldr	r7, [sp, #12]
9001d5d8:	0872      	lsrs	r2, r6, #1
9001d5da:	07f6      	lsls	r6, r6, #31
9001d5dc:	5cba      	ldrb	r2, [r7, r2]
9001d5de:	bf54      	ite	pl
9001d5e0:	f002 020f 	andpl.w	r2, r2, #15
9001d5e4:	1112      	asrmi	r2, r2, #4
9001d5e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d5ea:	b2d2      	uxtb	r2, r2
9001d5ec:	2aff      	cmp	r2, #255	; 0xff
9001d5ee:	d118      	bne.n	9001d622 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001d5f0:	f06f 0601 	mvn.w	r6, #1
9001d5f4:	f8d8 2000 	ldr.w	r2, [r8]
9001d5f8:	fb06 f705 	mul.w	r7, r6, r5
9001d5fc:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001d600:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001d604:	0956      	lsrs	r6, r2, #5
9001d606:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001d60a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d60e:	ea4c 0606 	orr.w	r6, ip, r6
9001d612:	4316      	orrs	r6, r2
9001d614:	53e6      	strh	r6, [r4, r7]
9001d616:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d618:	3d01      	subs	r5, #1
9001d61a:	4410      	add	r0, r2
9001d61c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d61e:	4411      	add	r1, r2
9001d620:	e787      	b.n	9001d532 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d622:	2a00      	cmp	r2, #0
9001d624:	d0f7      	beq.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d626:	f06f 0601 	mvn.w	r6, #1
9001d62a:	f8d8 c000 	ldr.w	ip, [r8]
9001d62e:	fa1f f982 	uxth.w	r9, r2
9001d632:	43d2      	mvns	r2, r2
9001d634:	436e      	muls	r6, r5
9001d636:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001d63a:	b2d2      	uxtb	r2, r2
9001d63c:	f834 e006 	ldrh.w	lr, [r4, r6]
9001d640:	fb1a fa09 	smulbb	sl, sl, r9
9001d644:	9604      	str	r6, [sp, #16]
9001d646:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001d64a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001d64e:	fb16 f609 	smulbb	r6, r6, r9
9001d652:	fa5f fc8c 	uxtb.w	ip, ip
9001d656:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d65a:	fb1c fc09 	smulbb	ip, ip, r9
9001d65e:	fb07 6702 	mla	r7, r7, r2, r6
9001d662:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001d666:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d66a:	b2bf      	uxth	r7, r7
9001d66c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d670:	fa5f fe8e 	uxtb.w	lr, lr
9001d674:	fb06 a602 	mla	r6, r6, r2, sl
9001d678:	fb0e cc02 	mla	ip, lr, r2, ip
9001d67c:	1c7a      	adds	r2, r7, #1
9001d67e:	b2b6      	uxth	r6, r6
9001d680:	fa1f fc8c 	uxth.w	ip, ip
9001d684:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001d688:	9a04      	ldr	r2, [sp, #16]
9001d68a:	f10c 0a01 	add.w	sl, ip, #1
9001d68e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d692:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001d696:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d69a:	ea4a 0707 	orr.w	r7, sl, r7
9001d69e:	f106 0a01 	add.w	sl, r6, #1
9001d6a2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d6a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d6aa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d6ae:	ea47 070a 	orr.w	r7, r7, sl
9001d6b2:	52a7      	strh	r7, [r4, r2]
9001d6b4:	e7af      	b.n	9001d616 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d6b6:	f04f 0e00 	mov.w	lr, #0
9001d6ba:	eba3 020e 	sub.w	r2, r3, lr
9001d6be:	2a00      	cmp	r2, #0
9001d6c0:	f77f af3a 	ble.w	9001d538 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001d6c4:	1402      	asrs	r2, r0, #16
9001d6c6:	9e02      	ldr	r6, [sp, #8]
9001d6c8:	140d      	asrs	r5, r1, #16
9001d6ca:	fb06 2505 	mla	r5, r6, r5, r2
9001d6ce:	9e03      	ldr	r6, [sp, #12]
9001d6d0:	086a      	lsrs	r2, r5, #1
9001d6d2:	07ed      	lsls	r5, r5, #31
9001d6d4:	5cb2      	ldrb	r2, [r6, r2]
9001d6d6:	bf54      	ite	pl
9001d6d8:	f002 020f 	andpl.w	r2, r2, #15
9001d6dc:	1112      	asrmi	r2, r2, #4
9001d6de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d6e2:	b2d2      	uxtb	r2, r2
9001d6e4:	2aff      	cmp	r2, #255	; 0xff
9001d6e6:	d115      	bne.n	9001d714 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001d6e8:	f8d8 5000 	ldr.w	r5, [r8]
9001d6ec:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001d6f0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001d6f4:	096a      	lsrs	r2, r5, #5
9001d6f6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d6fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d6fe:	4332      	orrs	r2, r6
9001d700:	432a      	orrs	r2, r5
9001d702:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001d706:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d708:	f10e 0e01 	add.w	lr, lr, #1
9001d70c:	4410      	add	r0, r2
9001d70e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d710:	4411      	add	r1, r2
9001d712:	e7d2      	b.n	9001d6ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001d714:	2a00      	cmp	r2, #0
9001d716:	d0f6      	beq.n	9001d706 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001d718:	f8d8 7000 	ldr.w	r7, [r8]
9001d71c:	fa1f f982 	uxth.w	r9, r2
9001d720:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d724:	43d2      	mvns	r2, r2
9001d726:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001d72a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001d72e:	ea4f 262c 	mov.w	r6, ip, asr #8
9001d732:	fb15 f509 	smulbb	r5, r5, r9
9001d736:	b2d2      	uxtb	r2, r2
9001d738:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001d73c:	b2ff      	uxtb	r7, r7
9001d73e:	fb1a fa09 	smulbb	sl, sl, r9
9001d742:	fb06 5602 	mla	r6, r6, r2, r5
9001d746:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001d74a:	fb17 f709 	smulbb	r7, r7, r9
9001d74e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d752:	b2b6      	uxth	r6, r6
9001d754:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001d758:	fa5f fc8c 	uxtb.w	ip, ip
9001d75c:	fb05 a502 	mla	r5, r5, r2, sl
9001d760:	fb0c 7702 	mla	r7, ip, r2, r7
9001d764:	1c72      	adds	r2, r6, #1
9001d766:	b2ad      	uxth	r5, r5
9001d768:	b2bf      	uxth	r7, r7
9001d76a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001d76e:	f107 0a01 	add.w	sl, r7, #1
9001d772:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d776:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d77a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d77e:	ea4a 0606 	orr.w	r6, sl, r6
9001d782:	f105 0a01 	add.w	sl, r5, #1
9001d786:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d78a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d78e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d792:	ea46 060a 	orr.w	r6, r6, sl
9001d796:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001d79a:	e7b4      	b.n	9001d706 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001d79c:	b007      	add	sp, #28
9001d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d7a2:	bf00      	nop
9001d7a4:	240281a4 	.word	0x240281a4

9001d7a8 <_ZN8touchgfx8LCD16bppD1Ev>:
9001d7a8:	4770      	bx	lr

9001d7aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001d7aa:	4770      	bx	lr

9001d7ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001d7ac:	4770      	bx	lr

9001d7ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001d7ae:	4770      	bx	lr

9001d7b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001d7b0:	4770      	bx	lr

9001d7b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d7b2:	4770      	bx	lr

9001d7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d7b4:	4770      	bx	lr

9001d7b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d7b6:	4770      	bx	lr

9001d7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d7b8:	4770      	bx	lr

9001d7ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d7ba:	4770      	bx	lr

9001d7bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001d7bc:	4770      	bx	lr

9001d7be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d7be:	4770      	bx	lr

9001d7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d7c0:	4770      	bx	lr

9001d7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d7c2:	4770      	bx	lr

9001d7c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001d7c4:	4770      	bx	lr

9001d7c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d7c6:	4770      	bx	lr

9001d7c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d7c8:	4770      	bx	lr

9001d7ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d7ca:	4770      	bx	lr

9001d7cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d7cc:	4770      	bx	lr

9001d7ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d7ce:	4770      	bx	lr

9001d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d7d0:	4770      	bx	lr

9001d7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d7d2:	4770      	bx	lr

9001d7d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001d7d4:	4770      	bx	lr

9001d7d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d7d6:	4770      	bx	lr

9001d7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001d7d8:	4770      	bx	lr

9001d7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d7da:	4770      	bx	lr

9001d7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001d7dc:	4770      	bx	lr

9001d7de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d7de:	4770      	bx	lr

9001d7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001d7e0:	4770      	bx	lr

9001d7e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001d7e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001d7e6:	b088      	sub	sp, #32
9001d7e8:	4606      	mov	r6, r0
9001d7ea:	4688      	mov	r8, r1
9001d7ec:	4691      	mov	r9, r2
9001d7ee:	ac08      	add	r4, sp, #32
9001d7f0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001d7f4:	4620      	mov	r0, r4
9001d7f6:	f7fd fc67 	bl	9001b0c8 <_ZNK8touchgfx6Bitmap7getDataEv>
9001d7fa:	6833      	ldr	r3, [r6, #0]
9001d7fc:	4605      	mov	r5, r0
9001d7fe:	4620      	mov	r0, r4
9001d800:	699f      	ldr	r7, [r3, #24]
9001d802:	f7fd fb75 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001d806:	4682      	mov	sl, r0
9001d808:	4620      	mov	r0, r4
9001d80a:	f7fd fba5 	bl	9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001d80e:	9500      	str	r5, [sp, #0]
9001d810:	464b      	mov	r3, r9
9001d812:	4642      	mov	r2, r8
9001d814:	4631      	mov	r1, r6
9001d816:	e9cd a001 	strd	sl, r0, [sp, #4]
9001d81a:	a806      	add	r0, sp, #24
9001d81c:	47b8      	blx	r7
9001d81e:	4628      	mov	r0, r5
9001d820:	b008      	add	sp, #32
9001d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001d828 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001d828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001d82c:	2300      	movs	r3, #0
9001d82e:	9300      	str	r3, [sp, #0]
9001d830:	4b3d      	ldr	r3, [pc, #244]	; (9001d928 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001d832:	781b      	ldrb	r3, [r3, #0]
9001d834:	2b00      	cmp	r3, #0
9001d836:	d137      	bne.n	9001d8a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001d838:	4a3c      	ldr	r2, [pc, #240]	; (9001d92c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d83a:	f9b2 2000 	ldrsh.w	r2, [r2]
9001d83e:	f8ad 2004 	strh.w	r2, [sp, #4]
9001d842:	2b00      	cmp	r3, #0
9001d844:	d132      	bne.n	9001d8ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001d846:	4b3a      	ldr	r3, [pc, #232]	; (9001d930 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001d848:	f9b3 3000 	ldrsh.w	r3, [r3]
9001d84c:	ac02      	add	r4, sp, #8
9001d84e:	6808      	ldr	r0, [r1, #0]
9001d850:	f8ad 3006 	strh.w	r3, [sp, #6]
9001d854:	ab02      	add	r3, sp, #8
9001d856:	6849      	ldr	r1, [r1, #4]
9001d858:	4d36      	ldr	r5, [pc, #216]	; (9001d934 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001d85a:	c303      	stmia	r3!, {r0, r1}
9001d85c:	4669      	mov	r1, sp
9001d85e:	4620      	mov	r0, r4
9001d860:	f7fa f8b8 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001d864:	4668      	mov	r0, sp
9001d866:	f7fa f88d 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001d86a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001d86e:	f8bd 2000 	ldrh.w	r2, [sp]
9001d872:	462f      	mov	r7, r5
9001d874:	6828      	ldr	r0, [r5, #0]
9001d876:	4413      	add	r3, r2
9001d878:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001d87c:	f8ad 3008 	strh.w	r3, [sp, #8]
9001d880:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001d884:	4413      	add	r3, r2
9001d886:	f8ad 300a 	strh.w	r3, [sp, #10]
9001d88a:	6803      	ldr	r3, [r0, #0]
9001d88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001d88e:	4798      	blx	r3
9001d890:	f010 0f01 	tst.w	r0, #1
9001d894:	d00c      	beq.n	9001d8b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001d896:	6828      	ldr	r0, [r5, #0]
9001d898:	6803      	ldr	r3, [r0, #0]
9001d89a:	e894 0006 	ldmia.w	r4, {r1, r2}
9001d89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001d8a0:	4798      	blx	r3
9001d8a2:	b004      	add	sp, #16
9001d8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001d8a8:	4a21      	ldr	r2, [pc, #132]	; (9001d930 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001d8aa:	e7c6      	b.n	9001d83a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001d8ac:	4b1f      	ldr	r3, [pc, #124]	; (9001d92c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d8ae:	e7cb      	b.n	9001d848 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001d8b0:	6838      	ldr	r0, [r7, #0]
9001d8b2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001d8b6:	6803      	ldr	r3, [r0, #0]
9001d8b8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001d8bc:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001d8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001d8c2:	4798      	blx	r3
9001d8c4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001d8c8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001d8cc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001d8d0:	fb16 3602 	smlabb	r6, r6, r2, r3
9001d8d4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001d8d8:	6838      	ldr	r0, [r7, #0]
9001d8da:	6803      	ldr	r3, [r0, #0]
9001d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001d8de:	4798      	blx	r3
9001d8e0:	4a12      	ldr	r2, [pc, #72]	; (9001d92c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d8e2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001d8e6:	8813      	ldrh	r3, [r2, #0]
9001d8e8:	4691      	mov	r9, r2
9001d8ea:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001d8ee:	435d      	muls	r5, r3
9001d8f0:	fb03 1404 	mla	r4, r3, r4, r1
9001d8f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001d8f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001d8fc:	6838      	ldr	r0, [r7, #0]
9001d8fe:	42ac      	cmp	r4, r5
9001d900:	6803      	ldr	r3, [r0, #0]
9001d902:	d20e      	bcs.n	9001d922 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001d904:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001d908:	4632      	mov	r2, r6
9001d90a:	4643      	mov	r3, r8
9001d90c:	4621      	mov	r1, r4
9001d90e:	47d0      	blx	sl
9001d910:	f8b9 3000 	ldrh.w	r3, [r9]
9001d914:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d918:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001d91c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001d920:	e7ec      	b.n	9001d8fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001d924:	4798      	blx	r3
9001d926:	e7bc      	b.n	9001d8a2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001d928:	2402818c 	.word	0x2402818c
9001d92c:	2402818e 	.word	0x2402818e
9001d930:	24028190 	.word	0x24028190
9001d934:	24028194 	.word	0x24028194

9001d938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d93c:	b08b      	sub	sp, #44	; 0x2c
9001d93e:	460f      	mov	r7, r1
9001d940:	4616      	mov	r6, r2
9001d942:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001d946:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001d94a:	f1bb 0f00 	cmp.w	fp, #0
9001d94e:	d049      	beq.n	9001d9e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001d950:	6810      	ldr	r0, [r2, #0]
9001d952:	ad06      	add	r5, sp, #24
9001d954:	6851      	ldr	r1, [r2, #4]
9001d956:	c503      	stmia	r5!, {r0, r1}
9001d958:	6818      	ldr	r0, [r3, #0]
9001d95a:	ad08      	add	r5, sp, #32
9001d95c:	6859      	ldr	r1, [r3, #4]
9001d95e:	c503      	stmia	r5!, {r0, r1}
9001d960:	a806      	add	r0, sp, #24
9001d962:	f7fa f80f 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001d966:	4631      	mov	r1, r6
9001d968:	a808      	add	r0, sp, #32
9001d96a:	f7fa f833 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001d96e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001d972:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001d976:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001d97a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001d97e:	fb16 2103 	smlabb	r1, r6, r3, r2
9001d982:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001d986:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001d98a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001d98e:	4f5f      	ldr	r7, [pc, #380]	; (9001db0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001d990:	440a      	add	r2, r1
9001d992:	6838      	ldr	r0, [r7, #0]
9001d994:	46b9      	mov	r9, r7
9001d996:	f8ad 2020 	strh.w	r2, [sp, #32]
9001d99a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001d99e:	4413      	add	r3, r2
9001d9a0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001d9a4:	6803      	ldr	r3, [r0, #0]
9001d9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001d9a8:	4798      	blx	r3
9001d9aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001d9ae:	d01c      	beq.n	9001d9ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001d9b0:	f010 0f04 	tst.w	r0, #4
9001d9b4:	d01d      	beq.n	9001d9f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001d9b6:	f8d9 0000 	ldr.w	r0, [r9]
9001d9ba:	2700      	movs	r7, #0
9001d9bc:	b2ad      	uxth	r5, r5
9001d9be:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001d9c2:	6801      	ldr	r1, [r0, #0]
9001d9c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001d9c8:	f8cd b00c 	str.w	fp, [sp, #12]
9001d9cc:	9501      	str	r5, [sp, #4]
9001d9ce:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001d9d2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001d9d6:	9402      	str	r4, [sp, #8]
9001d9d8:	fa1f f488 	uxth.w	r4, r8
9001d9dc:	9400      	str	r4, [sp, #0]
9001d9de:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001d9e0:	4631      	mov	r1, r6
9001d9e2:	47a0      	blx	r4
9001d9e4:	b00b      	add	sp, #44	; 0x2c
9001d9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d9ea:	b914      	cbnz	r4, 9001d9f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001d9ec:	f010 0f01 	tst.w	r0, #1
9001d9f0:	e7e0      	b.n	9001d9b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001d9f2:	f8d9 0000 	ldr.w	r0, [r9]
9001d9f6:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001d9fa:	6803      	ldr	r3, [r0, #0]
9001d9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001d9fe:	4798      	blx	r3
9001da00:	4b43      	ldr	r3, [pc, #268]	; (9001db10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001da02:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001da06:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001da0a:	881a      	ldrh	r2, [r3, #0]
9001da0c:	469a      	mov	sl, r3
9001da0e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001da12:	fb05 f502 	mul.w	r5, r5, r2
9001da16:	fb02 1404 	mla	r4, r2, r4, r1
9001da1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001da1e:	d059      	beq.n	9001dad4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001da20:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001da24:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001da28:	fa1f f28b 	uxth.w	r2, fp
9001da2c:	469e      	mov	lr, r3
9001da2e:	fa1f f989 	uxth.w	r9, r9
9001da32:	42ac      	cmp	r4, r5
9001da34:	d264      	bcs.n	9001db00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001da36:	eb04 0a07 	add.w	sl, r4, r7
9001da3a:	4554      	cmp	r4, sl
9001da3c:	d23d      	bcs.n	9001daba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001da3e:	8821      	ldrh	r1, [r4, #0]
9001da40:	f836 3b02 	ldrh.w	r3, [r6], #2
9001da44:	1208      	asrs	r0, r1, #8
9001da46:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001da4a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001da4e:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001da52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001da56:	00c9      	lsls	r1, r1, #3
9001da58:	fb10 f009 	smulbb	r0, r0, r9
9001da5c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001da60:	b2c9      	uxtb	r1, r1
9001da62:	fb0c 0c02 	mla	ip, ip, r2, r0
9001da66:	10d8      	asrs	r0, r3, #3
9001da68:	fb1b fb09 	smulbb	fp, fp, r9
9001da6c:	00db      	lsls	r3, r3, #3
9001da6e:	fa1f fc8c 	uxth.w	ip, ip
9001da72:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001da76:	fb11 f109 	smulbb	r1, r1, r9
9001da7a:	b2db      	uxtb	r3, r3
9001da7c:	fb00 b002 	mla	r0, r0, r2, fp
9001da80:	f10c 0b01 	add.w	fp, ip, #1
9001da84:	fb03 1302 	mla	r3, r3, r2, r1
9001da88:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001da8c:	b29b      	uxth	r3, r3
9001da8e:	b280      	uxth	r0, r0
9001da90:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001da94:	f103 0c01 	add.w	ip, r3, #1
9001da98:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001da9c:	1c43      	adds	r3, r0, #1
9001da9e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001daa2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001daa6:	0940      	lsrs	r0, r0, #5
9001daa8:	ea4c 0c0b 	orr.w	ip, ip, fp
9001daac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001dab0:	ea4c 0c00 	orr.w	ip, ip, r0
9001dab4:	f824 cb02 	strh.w	ip, [r4], #2
9001dab8:	e7bf      	b.n	9001da3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001daba:	f8be 3000 	ldrh.w	r3, [lr]
9001dabe:	eba3 0308 	sub.w	r3, r3, r8
9001dac2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001dac6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001daca:	eba3 0308 	sub.w	r3, r3, r8
9001dace:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dad2:	e7ae      	b.n	9001da32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001dad4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001dad8:	f8d9 0000 	ldr.w	r0, [r9]
9001dadc:	42ac      	cmp	r4, r5
9001dade:	6803      	ldr	r3, [r0, #0]
9001dae0:	d20e      	bcs.n	9001db00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001dae2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001dae6:	4632      	mov	r2, r6
9001dae8:	463b      	mov	r3, r7
9001daea:	4621      	mov	r1, r4
9001daec:	47c0      	blx	r8
9001daee:	f8ba 3000 	ldrh.w	r3, [sl]
9001daf2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001daf6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001dafa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dafe:	e7eb      	b.n	9001dad8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001db00:	4b02      	ldr	r3, [pc, #8]	; (9001db0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001db02:	6818      	ldr	r0, [r3, #0]
9001db04:	6803      	ldr	r3, [r0, #0]
9001db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001db08:	4798      	blx	r3
9001db0a:	e76b      	b.n	9001d9e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001db0c:	24028194 	.word	0x24028194
9001db10:	2402818e 	.word	0x2402818e

9001db14 <_ZN8touchgfx8LCD16bppD0Ev>:
9001db14:	b510      	push	{r4, lr}
9001db16:	4604      	mov	r4, r0
9001db18:	2178      	movs	r1, #120	; 0x78
9001db1a:	f009 faec 	bl	900270f6 <_ZdlPvj>
9001db1e:	4620      	mov	r0, r4
9001db20:	bd10      	pop	{r4, pc}

9001db22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001db22:	b510      	push	{r4, lr}
9001db24:	4604      	mov	r4, r0
9001db26:	2104      	movs	r1, #4
9001db28:	f009 fae5 	bl	900270f6 <_ZdlPvj>
9001db2c:	4620      	mov	r0, r4
9001db2e:	bd10      	pop	{r4, pc}

9001db30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001db30:	b510      	push	{r4, lr}
9001db32:	4604      	mov	r4, r0
9001db34:	2104      	movs	r1, #4
9001db36:	f009 fade 	bl	900270f6 <_ZdlPvj>
9001db3a:	4620      	mov	r0, r4
9001db3c:	bd10      	pop	{r4, pc}

9001db3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001db3e:	b510      	push	{r4, lr}
9001db40:	4604      	mov	r4, r0
9001db42:	2104      	movs	r1, #4
9001db44:	f009 fad7 	bl	900270f6 <_ZdlPvj>
9001db48:	4620      	mov	r0, r4
9001db4a:	bd10      	pop	{r4, pc}

9001db4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001db4c:	b510      	push	{r4, lr}
9001db4e:	4604      	mov	r4, r0
9001db50:	2104      	movs	r1, #4
9001db52:	f009 fad0 	bl	900270f6 <_ZdlPvj>
9001db56:	4620      	mov	r0, r4
9001db58:	bd10      	pop	{r4, pc}

9001db5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001db5a:	b510      	push	{r4, lr}
9001db5c:	4604      	mov	r4, r0
9001db5e:	2104      	movs	r1, #4
9001db60:	f009 fac9 	bl	900270f6 <_ZdlPvj>
9001db64:	4620      	mov	r0, r4
9001db66:	bd10      	pop	{r4, pc}

9001db68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001db68:	b510      	push	{r4, lr}
9001db6a:	4604      	mov	r4, r0
9001db6c:	2104      	movs	r1, #4
9001db6e:	f009 fac2 	bl	900270f6 <_ZdlPvj>
9001db72:	4620      	mov	r0, r4
9001db74:	bd10      	pop	{r4, pc}

9001db76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001db76:	b510      	push	{r4, lr}
9001db78:	4604      	mov	r4, r0
9001db7a:	2104      	movs	r1, #4
9001db7c:	f009 fabb 	bl	900270f6 <_ZdlPvj>
9001db80:	4620      	mov	r0, r4
9001db82:	bd10      	pop	{r4, pc}

9001db84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001db84:	b510      	push	{r4, lr}
9001db86:	4604      	mov	r4, r0
9001db88:	2104      	movs	r1, #4
9001db8a:	f009 fab4 	bl	900270f6 <_ZdlPvj>
9001db8e:	4620      	mov	r0, r4
9001db90:	bd10      	pop	{r4, pc}

9001db92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001db92:	b510      	push	{r4, lr}
9001db94:	4604      	mov	r4, r0
9001db96:	2104      	movs	r1, #4
9001db98:	f009 faad 	bl	900270f6 <_ZdlPvj>
9001db9c:	4620      	mov	r0, r4
9001db9e:	bd10      	pop	{r4, pc}

9001dba0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001dba0:	b510      	push	{r4, lr}
9001dba2:	4604      	mov	r4, r0
9001dba4:	2104      	movs	r1, #4
9001dba6:	f009 faa6 	bl	900270f6 <_ZdlPvj>
9001dbaa:	4620      	mov	r0, r4
9001dbac:	bd10      	pop	{r4, pc}

9001dbae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001dbae:	b510      	push	{r4, lr}
9001dbb0:	4604      	mov	r4, r0
9001dbb2:	2104      	movs	r1, #4
9001dbb4:	f009 fa9f 	bl	900270f6 <_ZdlPvj>
9001dbb8:	4620      	mov	r0, r4
9001dbba:	bd10      	pop	{r4, pc}

9001dbbc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dbbc:	b510      	push	{r4, lr}
9001dbbe:	4604      	mov	r4, r0
9001dbc0:	2104      	movs	r1, #4
9001dbc2:	f009 fa98 	bl	900270f6 <_ZdlPvj>
9001dbc6:	4620      	mov	r0, r4
9001dbc8:	bd10      	pop	{r4, pc}

9001dbca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001dbca:	b510      	push	{r4, lr}
9001dbcc:	4604      	mov	r4, r0
9001dbce:	2104      	movs	r1, #4
9001dbd0:	f009 fa91 	bl	900270f6 <_ZdlPvj>
9001dbd4:	4620      	mov	r0, r4
9001dbd6:	bd10      	pop	{r4, pc}

9001dbd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001dbd8:	b510      	push	{r4, lr}
9001dbda:	4604      	mov	r4, r0
9001dbdc:	2104      	movs	r1, #4
9001dbde:	f009 fa8a 	bl	900270f6 <_ZdlPvj>
9001dbe2:	4620      	mov	r0, r4
9001dbe4:	bd10      	pop	{r4, pc}

9001dbe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001dbe6:	b510      	push	{r4, lr}
9001dbe8:	4604      	mov	r4, r0
9001dbea:	2104      	movs	r1, #4
9001dbec:	f009 fa83 	bl	900270f6 <_ZdlPvj>
9001dbf0:	4620      	mov	r0, r4
9001dbf2:	bd10      	pop	{r4, pc}

9001dbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001dbf4:	b510      	push	{r4, lr}
9001dbf6:	4604      	mov	r4, r0
9001dbf8:	2104      	movs	r1, #4
9001dbfa:	f009 fa7c 	bl	900270f6 <_ZdlPvj>
9001dbfe:	4620      	mov	r0, r4
9001dc00:	bd10      	pop	{r4, pc}

9001dc02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001dc02:	b510      	push	{r4, lr}
9001dc04:	4604      	mov	r4, r0
9001dc06:	2104      	movs	r1, #4
9001dc08:	f009 fa75 	bl	900270f6 <_ZdlPvj>
9001dc0c:	4620      	mov	r0, r4
9001dc0e:	bd10      	pop	{r4, pc}

9001dc10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001dc10:	b510      	push	{r4, lr}
9001dc12:	4604      	mov	r4, r0
9001dc14:	2104      	movs	r1, #4
9001dc16:	f009 fa6e 	bl	900270f6 <_ZdlPvj>
9001dc1a:	4620      	mov	r0, r4
9001dc1c:	bd10      	pop	{r4, pc}

9001dc1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001dc1e:	b510      	push	{r4, lr}
9001dc20:	4604      	mov	r4, r0
9001dc22:	2104      	movs	r1, #4
9001dc24:	f009 fa67 	bl	900270f6 <_ZdlPvj>
9001dc28:	4620      	mov	r0, r4
9001dc2a:	bd10      	pop	{r4, pc}

9001dc2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dc2c:	b510      	push	{r4, lr}
9001dc2e:	4604      	mov	r4, r0
9001dc30:	2104      	movs	r1, #4
9001dc32:	f009 fa60 	bl	900270f6 <_ZdlPvj>
9001dc36:	4620      	mov	r0, r4
9001dc38:	bd10      	pop	{r4, pc}

9001dc3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001dc3a:	b510      	push	{r4, lr}
9001dc3c:	4604      	mov	r4, r0
9001dc3e:	2104      	movs	r1, #4
9001dc40:	f009 fa59 	bl	900270f6 <_ZdlPvj>
9001dc44:	4620      	mov	r0, r4
9001dc46:	bd10      	pop	{r4, pc}

9001dc48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001dc48:	b510      	push	{r4, lr}
9001dc4a:	4604      	mov	r4, r0
9001dc4c:	2104      	movs	r1, #4
9001dc4e:	f009 fa52 	bl	900270f6 <_ZdlPvj>
9001dc52:	4620      	mov	r0, r4
9001dc54:	bd10      	pop	{r4, pc}

9001dc56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001dc56:	b510      	push	{r4, lr}
9001dc58:	4604      	mov	r4, r0
9001dc5a:	2104      	movs	r1, #4
9001dc5c:	f009 fa4b 	bl	900270f6 <_ZdlPvj>
9001dc60:	4620      	mov	r0, r4
9001dc62:	bd10      	pop	{r4, pc}

9001dc64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dc64:	b510      	push	{r4, lr}
9001dc66:	4604      	mov	r4, r0
9001dc68:	2104      	movs	r1, #4
9001dc6a:	f009 fa44 	bl	900270f6 <_ZdlPvj>
9001dc6e:	4620      	mov	r0, r4
9001dc70:	bd10      	pop	{r4, pc}

9001dc72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001dc72:	b510      	push	{r4, lr}
9001dc74:	4604      	mov	r4, r0
9001dc76:	2104      	movs	r1, #4
9001dc78:	f009 fa3d 	bl	900270f6 <_ZdlPvj>
9001dc7c:	4620      	mov	r0, r4
9001dc7e:	bd10      	pop	{r4, pc}

9001dc80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001dc80:	b510      	push	{r4, lr}
9001dc82:	4604      	mov	r4, r0
9001dc84:	2104      	movs	r1, #4
9001dc86:	f009 fa36 	bl	900270f6 <_ZdlPvj>
9001dc8a:	4620      	mov	r0, r4
9001dc8c:	bd10      	pop	{r4, pc}

9001dc8e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001dc8e:	b510      	push	{r4, lr}
9001dc90:	4604      	mov	r4, r0
9001dc92:	2104      	movs	r1, #4
9001dc94:	f009 fa2f 	bl	900270f6 <_ZdlPvj>
9001dc98:	4620      	mov	r0, r4
9001dc9a:	bd10      	pop	{r4, pc}

9001dc9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001dc9c:	b510      	push	{r4, lr}
9001dc9e:	4604      	mov	r4, r0
9001dca0:	2104      	movs	r1, #4
9001dca2:	f009 fa28 	bl	900270f6 <_ZdlPvj>
9001dca6:	4620      	mov	r0, r4
9001dca8:	bd10      	pop	{r4, pc}
	...

9001dcac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dcb0:	b091      	sub	sp, #68	; 0x44
9001dcb2:	469b      	mov	fp, r3
9001dcb4:	4616      	mov	r6, r2
9001dcb6:	f9b3 2000 	ldrsh.w	r2, [r3]
9001dcba:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001dcbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001dcc2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001dcc6:	4604      	mov	r4, r0
9001dcc8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001dccc:	4640      	mov	r0, r8
9001dcce:	460d      	mov	r5, r1
9001dcd0:	4659      	mov	r1, fp
9001dcd2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001dcd6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001dcda:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001dcde:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001dce2:	f7f4 fde7 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001dce6:	4631      	mov	r1, r6
9001dce8:	4640      	mov	r0, r8
9001dcea:	f7f4 fde3 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001dcee:	4b74      	ldr	r3, [pc, #464]	; (9001dec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001dcf0:	8818      	ldrh	r0, [r3, #0]
9001dcf2:	4b74      	ldr	r3, [pc, #464]	; (9001dec4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001dcf4:	b202      	sxth	r2, r0
9001dcf6:	8819      	ldrh	r1, [r3, #0]
9001dcf8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001dcfc:	b20e      	sxth	r6, r1
9001dcfe:	2b00      	cmp	r3, #0
9001dd00:	da07      	bge.n	9001dd12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001dd02:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001dd06:	4463      	add	r3, ip
9001dd08:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001dd0c:	2300      	movs	r3, #0
9001dd0e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001dd12:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001dd16:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001dd1a:	1ad2      	subs	r2, r2, r3
9001dd1c:	4594      	cmp	ip, r2
9001dd1e:	bfc4      	itt	gt
9001dd20:	1ac2      	subgt	r2, r0, r3
9001dd22:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001dd26:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001dd2a:	2a00      	cmp	r2, #0
9001dd2c:	da07      	bge.n	9001dd3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001dd2e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001dd32:	4462      	add	r2, ip
9001dd34:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001dd38:	2200      	movs	r2, #0
9001dd3a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001dd3e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001dd42:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001dd46:	eba6 060a 	sub.w	r6, r6, sl
9001dd4a:	42b2      	cmp	r2, r6
9001dd4c:	bfc4      	itt	gt
9001dd4e:	eba1 020a 	subgt.w	r2, r1, sl
9001dd52:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001dd56:	4a5c      	ldr	r2, [pc, #368]	; (9001dec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001dd58:	7812      	ldrb	r2, [r2, #0]
9001dd5a:	b9a2      	cbnz	r2, 9001dd86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001dd5c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001dd60:	4286      	cmp	r6, r0
9001dd62:	4640      	mov	r0, r8
9001dd64:	9303      	str	r3, [sp, #12]
9001dd66:	bf14      	ite	ne
9001dd68:	2600      	movne	r6, #0
9001dd6a:	2601      	moveq	r6, #1
9001dd6c:	f7f4 fde5 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001dd70:	9b03      	ldr	r3, [sp, #12]
9001dd72:	b160      	cbz	r0, 9001dd8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001dd74:	2300      	movs	r3, #0
9001dd76:	8023      	strh	r3, [r4, #0]
9001dd78:	8063      	strh	r3, [r4, #2]
9001dd7a:	80a3      	strh	r3, [r4, #4]
9001dd7c:	4620      	mov	r0, r4
9001dd7e:	80e3      	strh	r3, [r4, #6]
9001dd80:	b011      	add	sp, #68	; 0x44
9001dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dd86:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001dd8a:	428e      	cmp	r6, r1
9001dd8c:	e7e9      	b.n	9001dd62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001dd8e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001dd92:	a90e      	add	r1, sp, #56	; 0x38
9001dd94:	900e      	str	r0, [sp, #56]	; 0x38
9001dd96:	a80c      	add	r0, sp, #48	; 0x30
9001dd98:	9205      	str	r2, [sp, #20]
9001dd9a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001dd9e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001dda2:	9206      	str	r2, [sp, #24]
9001dda4:	f8bb 2000 	ldrh.w	r2, [fp]
9001dda8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001ddac:	1a9b      	subs	r3, r3, r2
9001ddae:	b21b      	sxth	r3, r3
9001ddb0:	9303      	str	r3, [sp, #12]
9001ddb2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001ddb6:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001ded0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001ddba:	ebaa 0a03 	sub.w	sl, sl, r3
9001ddbe:	fa0f f38a 	sxth.w	r3, sl
9001ddc2:	9304      	str	r3, [sp, #16]
9001ddc4:	9b03      	ldr	r3, [sp, #12]
9001ddc6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001ddca:	9b04      	ldr	r3, [sp, #16]
9001ddcc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001ddd0:	9b05      	ldr	r3, [sp, #20]
9001ddd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001ddd6:	9b06      	ldr	r3, [sp, #24]
9001ddd8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001dddc:	f7f9 fdfa 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001dde0:	4640      	mov	r0, r8
9001dde2:	f7f9 fdcf 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dde6:	a80e      	add	r0, sp, #56	; 0x38
9001dde8:	f7f9 fdcc 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ddec:	4b37      	ldr	r3, [pc, #220]	; (9001decc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001ddee:	4628      	mov	r0, r5
9001ddf0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001ddf4:	881b      	ldrh	r3, [r3, #0]
9001ddf6:	9307      	str	r3, [sp, #28]
9001ddf8:	682b      	ldr	r3, [r5, #0]
9001ddfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001ddfc:	4798      	blx	r3
9001ddfe:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001de02:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001de06:	4681      	mov	r9, r0
9001de08:	f8db 0000 	ldr.w	r0, [fp]
9001de0c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001de10:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001de12:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001de16:	6803      	ldr	r3, [r0, #0]
9001de18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001de1a:	4798      	blx	r3
9001de1c:	4607      	mov	r7, r0
9001de1e:	f8db 0000 	ldr.w	r0, [fp]
9001de22:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001de26:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001de2a:	6803      	ldr	r3, [r0, #0]
9001de2c:	9109      	str	r1, [sp, #36]	; 0x24
9001de2e:	9208      	str	r2, [sp, #32]
9001de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001de32:	4798      	blx	r3
9001de34:	f010 0f01 	tst.w	r0, #1
9001de38:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001de3c:	d012      	beq.n	9001de64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001de3e:	f8db 0000 	ldr.w	r0, [fp]
9001de42:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001de46:	6803      	ldr	r3, [r0, #0]
9001de48:	9200      	str	r2, [sp, #0]
9001de4a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001de4c:	462b      	mov	r3, r5
9001de4e:	e898 0006 	ldmia.w	r8, {r1, r2}
9001de52:	47b0      	blx	r6
9001de54:	9b03      	ldr	r3, [sp, #12]
9001de56:	8023      	strh	r3, [r4, #0]
9001de58:	9b04      	ldr	r3, [sp, #16]
9001de5a:	8063      	strh	r3, [r4, #2]
9001de5c:	9b05      	ldr	r3, [sp, #20]
9001de5e:	80a3      	strh	r3, [r4, #4]
9001de60:	9b06      	ldr	r3, [sp, #24]
9001de62:	e78b      	b.n	9001dd7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001de64:	fb09 f202 	mul.w	r2, r9, r2
9001de68:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001de6c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001de70:	440f      	add	r7, r1
9001de72:	b166      	cbz	r6, 9001de8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001de74:	9a07      	ldr	r2, [sp, #28]
9001de76:	4592      	cmp	sl, r2
9001de78:	d109      	bne.n	9001de8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001de7a:	f8db 0000 	ldr.w	r0, [fp]
9001de7e:	fb09 f303 	mul.w	r3, r9, r3
9001de82:	4629      	mov	r1, r5
9001de84:	6802      	ldr	r2, [r0, #0]
9001de86:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001de88:	463a      	mov	r2, r7
9001de8a:	47b0      	blx	r6
9001de8c:	e7e2      	b.n	9001de54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001de8e:	fb0a f303 	mul.w	r3, sl, r3
9001de92:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001de96:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001ded0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001de9a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001de9e:	4545      	cmp	r5, r8
9001dea0:	d2d8      	bcs.n	9001de54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001dea2:	f8db 0000 	ldr.w	r0, [fp]
9001dea6:	4629      	mov	r1, r5
9001dea8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001deac:	4435      	add	r5, r6
9001deae:	6802      	ldr	r2, [r0, #0]
9001deb0:	005b      	lsls	r3, r3, #1
9001deb2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001deb6:	463a      	mov	r2, r7
9001deb8:	47d0      	blx	sl
9001deba:	444f      	add	r7, r9
9001debc:	e7ef      	b.n	9001de9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001debe:	bf00      	nop
9001dec0:	24028188 	.word	0x24028188
9001dec4:	2402818a 	.word	0x2402818a
9001dec8:	2402818c 	.word	0x2402818c
9001decc:	2402818e 	.word	0x2402818e
9001ded0:	24028194 	.word	0x24028194

9001ded4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ded6:	4606      	mov	r6, r0
9001ded8:	b087      	sub	sp, #28
9001deda:	460c      	mov	r4, r1
9001dedc:	4617      	mov	r7, r2
9001dede:	461d      	mov	r5, r3
9001dee0:	b333      	cbz	r3, 9001df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001dee2:	4608      	mov	r0, r1
9001dee4:	f7f4 fd29 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001dee8:	bb10      	cbnz	r0, 9001df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001deea:	6820      	ldr	r0, [r4, #0]
9001deec:	ab04      	add	r3, sp, #16
9001deee:	6861      	ldr	r1, [r4, #4]
9001def0:	4c1b      	ldr	r4, [pc, #108]	; (9001df60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001def2:	c303      	stmia	r3!, {r0, r1}
9001def4:	a804      	add	r0, sp, #16
9001def6:	f7f9 fd45 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001defa:	6820      	ldr	r0, [r4, #0]
9001defc:	6803      	ldr	r3, [r0, #0]
9001defe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001df00:	4798      	blx	r3
9001df02:	2dff      	cmp	r5, #255	; 0xff
9001df04:	d016      	beq.n	9001df34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001df06:	f010 0f08 	tst.w	r0, #8
9001df0a:	6820      	ldr	r0, [r4, #0]
9001df0c:	d015      	beq.n	9001df3a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001df0e:	2400      	movs	r4, #0
9001df10:	6801      	ldr	r1, [r0, #0]
9001df12:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001df16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001df1a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001df1e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001df22:	9401      	str	r4, [sp, #4]
9001df24:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001df28:	9400      	str	r4, [sp, #0]
9001df2a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001df2c:	4639      	mov	r1, r7
9001df2e:	47a0      	blx	r4
9001df30:	b007      	add	sp, #28
9001df32:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001df34:	f010 0f02 	tst.w	r0, #2
9001df38:	e7e7      	b.n	9001df0a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001df3a:	6803      	ldr	r3, [r0, #0]
9001df3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001df3e:	4798      	blx	r3
9001df40:	4b08      	ldr	r3, [pc, #32]	; (9001df64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001df42:	4601      	mov	r1, r0
9001df44:	4630      	mov	r0, r6
9001df46:	881a      	ldrh	r2, [r3, #0]
9001df48:	6833      	ldr	r3, [r6, #0]
9001df4a:	e9cd 7500 	strd	r7, r5, [sp]
9001df4e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001df50:	ab04      	add	r3, sp, #16
9001df52:	47a8      	blx	r5
9001df54:	6820      	ldr	r0, [r4, #0]
9001df56:	6803      	ldr	r3, [r0, #0]
9001df58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001df5a:	4798      	blx	r3
9001df5c:	e7e8      	b.n	9001df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001df5e:	bf00      	nop
9001df60:	24028194 	.word	0x24028194
9001df64:	2402818e 	.word	0x2402818e

9001df68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001df68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001df6c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001df70:	4688      	mov	r8, r1
9001df72:	4614      	mov	r4, r2
9001df74:	461d      	mov	r5, r3
9001df76:	9e08      	ldr	r6, [sp, #32]
9001df78:	2f00      	cmp	r7, #0
9001df7a:	f000 80ab 	beq.w	9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001df7e:	4618      	mov	r0, r3
9001df80:	f7f4 fcdb 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001df84:	2800      	cmp	r0, #0
9001df86:	f040 80a5 	bne.w	9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001df8a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001df8e:	2fff      	cmp	r7, #255	; 0xff
9001df90:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001df94:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001df98:	fb04 1303 	mla	r3, r4, r3, r1
9001df9c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001dfa0:	eba4 0200 	sub.w	r2, r4, r0
9001dfa4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001dfa8:	fb04 f505 	mul.w	r5, r4, r5
9001dfac:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001dfb0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001dfb4:	d04a      	beq.n	9001e04c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001dfb6:	b2bc      	uxth	r4, r7
9001dfb8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001dfbc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001dfc0:	fa5f f788 	uxtb.w	r7, r8
9001dfc4:	b2f3      	uxtb	r3, r6
9001dfc6:	0040      	lsls	r0, r0, #1
9001dfc8:	fb0e fe04 	mul.w	lr, lr, r4
9001dfcc:	4367      	muls	r7, r4
9001dfce:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001dfd2:	4363      	muls	r3, r4
9001dfd4:	fa1f fc8c 	uxth.w	ip, ip
9001dfd8:	42a9      	cmp	r1, r5
9001dfda:	d27b      	bcs.n	9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001dfdc:	eb01 0900 	add.w	r9, r1, r0
9001dfe0:	4549      	cmp	r1, r9
9001dfe2:	d231      	bcs.n	9001e048 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001dfe4:	880a      	ldrh	r2, [r1, #0]
9001dfe6:	1214      	asrs	r4, r2, #8
9001dfe8:	10d6      	asrs	r6, r2, #3
9001dfea:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001dfee:	00d2      	lsls	r2, r2, #3
9001dff0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001dff4:	b2d2      	uxtb	r2, r2
9001dff6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001dffa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001dffe:	fb14 f40c 	smulbb	r4, r4, ip
9001e002:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001e006:	fb12 f20c 	smulbb	r2, r2, ip
9001e00a:	fb16 f60c 	smulbb	r6, r6, ip
9001e00e:	4474      	add	r4, lr
9001e010:	441a      	add	r2, r3
9001e012:	b2a4      	uxth	r4, r4
9001e014:	443e      	add	r6, r7
9001e016:	b292      	uxth	r2, r2
9001e018:	f104 0a01 	add.w	sl, r4, #1
9001e01c:	b2b6      	uxth	r6, r6
9001e01e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001e022:	f102 0a01 	add.w	sl, r2, #1
9001e026:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001e02a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001e02e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e032:	4322      	orrs	r2, r4
9001e034:	1c74      	adds	r4, r6, #1
9001e036:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001e03a:	0976      	lsrs	r6, r6, #5
9001e03c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e040:	4332      	orrs	r2, r6
9001e042:	f821 2b02 	strh.w	r2, [r1], #2
9001e046:	e7cb      	b.n	9001dfe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001e048:	4441      	add	r1, r8
9001e04a:	e7c5      	b.n	9001dfd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001e04c:	0973      	lsrs	r3, r6, #5
9001e04e:	4f22      	ldr	r7, [pc, #136]	; (9001e0d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001e050:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001e054:	ea08 0707 	and.w	r7, r8, r7
9001e058:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e05c:	433b      	orrs	r3, r7
9001e05e:	07e7      	lsls	r7, r4, #31
9001e060:	ea43 0306 	orr.w	r3, r3, r6
9001e064:	b29b      	uxth	r3, r3
9001e066:	d50b      	bpl.n	9001e080 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001e068:	0040      	lsls	r0, r0, #1
9001e06a:	0052      	lsls	r2, r2, #1
9001e06c:	42a9      	cmp	r1, r5
9001e06e:	d231      	bcs.n	9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e070:	180c      	adds	r4, r1, r0
9001e072:	42a1      	cmp	r1, r4
9001e074:	d202      	bcs.n	9001e07c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001e076:	f821 3b02 	strh.w	r3, [r1], #2
9001e07a:	e7fa      	b.n	9001e072 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001e07c:	4411      	add	r1, r2
9001e07e:	e7f5      	b.n	9001e06c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001e080:	078e      	lsls	r6, r1, #30
9001e082:	d008      	beq.n	9001e096 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001e084:	0066      	lsls	r6, r4, #1
9001e086:	460a      	mov	r2, r1
9001e088:	42aa      	cmp	r2, r5
9001e08a:	d202      	bcs.n	9001e092 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001e08c:	8013      	strh	r3, [r2, #0]
9001e08e:	4432      	add	r2, r6
9001e090:	e7fa      	b.n	9001e088 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001e092:	3102      	adds	r1, #2
9001e094:	3801      	subs	r0, #1
9001e096:	07c2      	lsls	r2, r0, #31
9001e098:	d50b      	bpl.n	9001e0b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001e09a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001e09e:	0066      	lsls	r6, r4, #1
9001e0a0:	3a01      	subs	r2, #1
9001e0a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001e0a6:	42aa      	cmp	r2, r5
9001e0a8:	d202      	bcs.n	9001e0b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001e0aa:	8013      	strh	r3, [r2, #0]
9001e0ac:	4432      	add	r2, r6
9001e0ae:	e7fa      	b.n	9001e0a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001e0b0:	3801      	subs	r0, #1
9001e0b2:	b178      	cbz	r0, 9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e0b4:	1040      	asrs	r0, r0, #1
9001e0b6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001e0ba:	0080      	lsls	r0, r0, #2
9001e0bc:	0064      	lsls	r4, r4, #1
9001e0be:	42a9      	cmp	r1, r5
9001e0c0:	d208      	bcs.n	9001e0d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e0c2:	180e      	adds	r6, r1, r0
9001e0c4:	460a      	mov	r2, r1
9001e0c6:	42b2      	cmp	r2, r6
9001e0c8:	d202      	bcs.n	9001e0d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001e0ca:	f842 3b04 	str.w	r3, [r2], #4
9001e0ce:	e7fa      	b.n	9001e0c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001e0d0:	4421      	add	r1, r4
9001e0d2:	e7f4      	b.n	9001e0be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001e0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e0d8:	00fff800 	.word	0x00fff800

9001e0dc <_ZN8touchgfx8LCD16bppC1Ev>:
9001e0dc:	2200      	movs	r2, #0
9001e0de:	4910      	ldr	r1, [pc, #64]	; (9001e120 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001e0e0:	6042      	str	r2, [r0, #4]
9001e0e2:	6001      	str	r1, [r0, #0]
9001e0e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001e0e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001e0ec:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001e0f0:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001e0f4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001e0f8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001e0fc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001e100:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001e104:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001e108:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001e10c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001e110:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001e114:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001e118:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001e11c:	4770      	bx	lr
9001e11e:	bf00      	nop
9001e120:	9002c2e0 	.word	0x9002c2e0

9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e128:	b08d      	sub	sp, #52	; 0x34
9001e12a:	460d      	mov	r5, r1
9001e12c:	4604      	mov	r4, r0
9001e12e:	4699      	mov	r9, r3
9001e130:	6808      	ldr	r0, [r1, #0]
9001e132:	ab08      	add	r3, sp, #32
9001e134:	6849      	ldr	r1, [r1, #4]
9001e136:	c303      	stmia	r3!, {r0, r1}
9001e138:	6810      	ldr	r0, [r2, #0]
9001e13a:	ab0a      	add	r3, sp, #40	; 0x28
9001e13c:	6851      	ldr	r1, [r2, #4]
9001e13e:	c303      	stmia	r3!, {r0, r1}
9001e140:	a808      	add	r0, sp, #32
9001e142:	f7f9 fc1f 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e146:	4629      	mov	r1, r5
9001e148:	a80a      	add	r0, sp, #40	; 0x28
9001e14a:	4d67      	ldr	r5, [pc, #412]	; (9001e2e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e14c:	f7f9 fc42 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e150:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001e154:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001e158:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001e15c:	6828      	ldr	r0, [r5, #0]
9001e15e:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e162:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001e166:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e16a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e16e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001e172:	440a      	add	r2, r1
9001e174:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e178:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001e17c:	4413      	add	r3, r2
9001e17e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e182:	6803      	ldr	r3, [r0, #0]
9001e184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e186:	4798      	blx	r3
9001e188:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e18c:	d119      	bne.n	9001e1c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001e18e:	f010 0f20 	tst.w	r0, #32
9001e192:	6828      	ldr	r0, [r5, #0]
9001e194:	d018      	beq.n	9001e1c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001e196:	2500      	movs	r5, #0
9001e198:	6801      	ldr	r1, [r0, #0]
9001e19a:	b2b6      	uxth	r6, r6
9001e19c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001e1a0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001e1a4:	9601      	str	r6, [sp, #4]
9001e1a6:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001e1aa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001e1ae:	9502      	str	r5, [sp, #8]
9001e1b0:	fa1f f588 	uxth.w	r5, r8
9001e1b4:	9500      	str	r5, [sp, #0]
9001e1b6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001e1b8:	4621      	mov	r1, r4
9001e1ba:	47a8      	blx	r5
9001e1bc:	b00d      	add	sp, #52	; 0x34
9001e1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e1c2:	f010 0f40 	tst.w	r0, #64	; 0x40
9001e1c6:	e7e4      	b.n	9001e192 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001e1c8:	6803      	ldr	r3, [r0, #0]
9001e1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e1cc:	4798      	blx	r3
9001e1ce:	4947      	ldr	r1, [pc, #284]	; (9001e2ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001e1d0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e1d4:	880b      	ldrh	r3, [r1, #0]
9001e1d6:	468a      	mov	sl, r1
9001e1d8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001e1dc:	fb03 5202 	mla	r2, r3, r2, r5
9001e1e0:	4373      	muls	r3, r6
9001e1e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e1e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e1ea:	9307      	str	r3, [sp, #28]
9001e1ec:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001e1f0:	9306      	str	r3, [sp, #24]
9001e1f2:	9b07      	ldr	r3, [sp, #28]
9001e1f4:	4298      	cmp	r0, r3
9001e1f6:	d270      	bcs.n	9001e2da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001e1f8:	9b06      	ldr	r3, [sp, #24]
9001e1fa:	4621      	mov	r1, r4
9001e1fc:	eb00 0b03 	add.w	fp, r0, r3
9001e200:	4558      	cmp	r0, fp
9001e202:	d25d      	bcs.n	9001e2c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001e204:	f851 4b04 	ldr.w	r4, [r1], #4
9001e208:	0e23      	lsrs	r3, r4, #24
9001e20a:	d014      	beq.n	9001e236 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e20c:	2bff      	cmp	r3, #255	; 0xff
9001e20e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001e212:	d112      	bne.n	9001e23a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e214:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e218:	d10f      	bne.n	9001e23a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e21a:	0963      	lsrs	r3, r4, #5
9001e21c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001e220:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e224:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e228:	f02c 0c07 	bic.w	ip, ip, #7
9001e22c:	ea43 0c0c 	orr.w	ip, r3, ip
9001e230:	ea4c 0404 	orr.w	r4, ip, r4
9001e234:	8004      	strh	r4, [r0, #0]
9001e236:	3002      	adds	r0, #2
9001e238:	e7e2      	b.n	9001e200 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001e23a:	fb09 f303 	mul.w	r3, r9, r3
9001e23e:	8807      	ldrh	r7, [r0, #0]
9001e240:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001e244:	fa5f fc8c 	uxtb.w	ip, ip
9001e248:	1c5a      	adds	r2, r3, #1
9001e24a:	123e      	asrs	r6, r7, #8
9001e24c:	10fd      	asrs	r5, r7, #3
9001e24e:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001e252:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e256:	00ff      	lsls	r7, r7, #3
9001e258:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e25c:	1212      	asrs	r2, r2, #8
9001e25e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e262:	b293      	uxth	r3, r2
9001e264:	43d2      	mvns	r2, r2
9001e266:	b2ff      	uxtb	r7, r7
9001e268:	fb1e fe03 	smulbb	lr, lr, r3
9001e26c:	b2d2      	uxtb	r2, r2
9001e26e:	fb1c fc03 	smulbb	ip, ip, r3
9001e272:	b2e4      	uxtb	r4, r4
9001e274:	fb06 e602 	mla	r6, r6, r2, lr
9001e278:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e27c:	fb14 f403 	smulbb	r4, r4, r3
9001e280:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001e284:	b2b6      	uxth	r6, r6
9001e286:	fb05 c502 	mla	r5, r5, r2, ip
9001e28a:	fb07 4702 	mla	r7, r7, r2, r4
9001e28e:	f106 0e01 	add.w	lr, r6, #1
9001e292:	b2ad      	uxth	r5, r5
9001e294:	b2bf      	uxth	r7, r7
9001e296:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001e29a:	f105 0c01 	add.w	ip, r5, #1
9001e29e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001e2a2:	1c7e      	adds	r6, r7, #1
9001e2a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e2a8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001e2ac:	096d      	lsrs	r5, r5, #5
9001e2ae:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e2b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e2b6:	ea46 060e 	orr.w	r6, r6, lr
9001e2ba:	432e      	orrs	r6, r5
9001e2bc:	8006      	strh	r6, [r0, #0]
9001e2be:	e7ba      	b.n	9001e236 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e2c0:	f8ba 3000 	ldrh.w	r3, [sl]
9001e2c4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001e2c8:	eba3 0308 	sub.w	r3, r3, r8
9001e2cc:	eba4 0408 	sub.w	r4, r4, r8
9001e2d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e2d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001e2d8:	e78b      	b.n	9001e1f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001e2da:	4b03      	ldr	r3, [pc, #12]	; (9001e2e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e2dc:	6818      	ldr	r0, [r3, #0]
9001e2de:	6803      	ldr	r3, [r0, #0]
9001e2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e2e2:	4798      	blx	r3
9001e2e4:	e76a      	b.n	9001e1bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001e2e6:	bf00      	nop
9001e2e8:	24028194 	.word	0x24028194
9001e2ec:	2402818e 	.word	0x2402818e

9001e2f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001e2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001e2f4:	b085      	sub	sp, #20
9001e2f6:	6810      	ldr	r0, [r2, #0]
9001e2f8:	460c      	mov	r4, r1
9001e2fa:	6851      	ldr	r1, [r2, #4]
9001e2fc:	466d      	mov	r5, sp
9001e2fe:	4616      	mov	r6, r2
9001e300:	c503      	stmia	r5!, {r0, r1}
9001e302:	6818      	ldr	r0, [r3, #0]
9001e304:	6859      	ldr	r1, [r3, #4]
9001e306:	c503      	stmia	r5!, {r0, r1}
9001e308:	4668      	mov	r0, sp
9001e30a:	4d2e      	ldr	r5, [pc, #184]	; (9001e3c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001e30c:	f7f9 fb3a 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e310:	4631      	mov	r1, r6
9001e312:	a802      	add	r0, sp, #8
9001e314:	4e2c      	ldr	r6, [pc, #176]	; (9001e3c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001e316:	f7f9 fb5d 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e31a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001e31e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001e322:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001e326:	6828      	ldr	r0, [r5, #0]
9001e328:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e32c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001e330:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001e334:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e338:	f8bd 1000 	ldrh.w	r1, [sp]
9001e33c:	440a      	add	r2, r1
9001e33e:	f8ad 2008 	strh.w	r2, [sp, #8]
9001e342:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001e346:	4413      	add	r3, r2
9001e348:	f8ad 300a 	strh.w	r3, [sp, #10]
9001e34c:	6803      	ldr	r3, [r0, #0]
9001e34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e350:	4798      	blx	r3
9001e352:	8833      	ldrh	r3, [r6, #0]
9001e354:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001e358:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001e35c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001e360:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001e3cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001e364:	fb03 1202 	mla	r2, r3, r2, r1
9001e368:	fb08 f303 	mul.w	r3, r8, r3
9001e36c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e370:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e374:	4298      	cmp	r0, r3
9001e376:	d21d      	bcs.n	9001e3b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001e378:	eb00 080c 	add.w	r8, r0, ip
9001e37c:	4540      	cmp	r0, r8
9001e37e:	d20f      	bcs.n	9001e3a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001e380:	f854 1b04 	ldr.w	r1, [r4], #4
9001e384:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001e388:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001e38c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001e390:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e394:	ea42 0209 	orr.w	r2, r2, r9
9001e398:	430a      	orrs	r2, r1
9001e39a:	f820 2b02 	strh.w	r2, [r0], #2
9001e39e:	e7ed      	b.n	9001e37c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001e3a0:	8832      	ldrh	r2, [r6, #0]
9001e3a2:	1bd2      	subs	r2, r2, r7
9001e3a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e3a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001e3ac:	1bd2      	subs	r2, r2, r7
9001e3ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001e3b2:	e7df      	b.n	9001e374 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001e3b4:	6828      	ldr	r0, [r5, #0]
9001e3b6:	6803      	ldr	r3, [r0, #0]
9001e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e3ba:	4798      	blx	r3
9001e3bc:	b005      	add	sp, #20
9001e3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001e3c2:	bf00      	nop
9001e3c4:	24028194 	.word	0x24028194
9001e3c8:	2402818e 	.word	0x2402818e
9001e3cc:	fffff800 	.word	0xfffff800

9001e3d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001e3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e3d4:	b08e      	sub	sp, #56	; 0x38
9001e3d6:	460e      	mov	r6, r1
9001e3d8:	4604      	mov	r4, r0
9001e3da:	461d      	mov	r5, r3
9001e3dc:	6808      	ldr	r0, [r1, #0]
9001e3de:	ab0a      	add	r3, sp, #40	; 0x28
9001e3e0:	6849      	ldr	r1, [r1, #4]
9001e3e2:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001e5b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001e3e6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001e5bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001e3ea:	c303      	stmia	r3!, {r0, r1}
9001e3ec:	6810      	ldr	r0, [r2, #0]
9001e3ee:	ab0c      	add	r3, sp, #48	; 0x30
9001e3f0:	6851      	ldr	r1, [r2, #4]
9001e3f2:	c303      	stmia	r3!, {r0, r1}
9001e3f4:	a80a      	add	r0, sp, #40	; 0x28
9001e3f6:	f7f9 fac5 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e3fa:	4631      	mov	r1, r6
9001e3fc:	a80c      	add	r0, sp, #48	; 0x30
9001e3fe:	f7f9 fae9 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e402:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001e406:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001e40a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e40e:	f8d8 0000 	ldr.w	r0, [r8]
9001e412:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e416:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001e41a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001e41e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001e422:	440c      	add	r4, r1
9001e424:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001e428:	440a      	add	r2, r1
9001e42a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001e42e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001e432:	4413      	add	r3, r2
9001e434:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e438:	6803      	ldr	r3, [r0, #0]
9001e43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e43c:	4798      	blx	r3
9001e43e:	2dff      	cmp	r5, #255	; 0xff
9001e440:	d124      	bne.n	9001e48c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001e442:	f010 0f01 	tst.w	r0, #1
9001e446:	f8d8 0000 	ldr.w	r0, [r8]
9001e44a:	d022      	beq.n	9001e492 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001e44c:	2100      	movs	r1, #0
9001e44e:	f04f 0e01 	mov.w	lr, #1
9001e452:	f8d0 c000 	ldr.w	ip, [r0]
9001e456:	b2b6      	uxth	r6, r6
9001e458:	f8cd e018 	str.w	lr, [sp, #24]
9001e45c:	b2bf      	uxth	r7, r7
9001e45e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001e462:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001e466:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001e46a:	f8b9 e000 	ldrh.w	lr, [r9]
9001e46e:	9503      	str	r5, [sp, #12]
9001e470:	9601      	str	r6, [sp, #4]
9001e472:	9700      	str	r7, [sp, #0]
9001e474:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001e478:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e47c:	9102      	str	r1, [sp, #8]
9001e47e:	4621      	mov	r1, r4
9001e480:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001e484:	47a8      	blx	r5
9001e486:	b00e      	add	sp, #56	; 0x38
9001e488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e48c:	f010 0f04 	tst.w	r0, #4
9001e490:	e7d9      	b.n	9001e446 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001e492:	6803      	ldr	r3, [r0, #0]
9001e494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e496:	4798      	blx	r3
9001e498:	f8b9 3000 	ldrh.w	r3, [r9]
9001e49c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001e4a0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001e4a4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001e4a8:	435e      	muls	r6, r3
9001e4aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e4ae:	2dff      	cmp	r5, #255	; 0xff
9001e4b0:	fb03 1202 	mla	r2, r3, r2, r1
9001e4b4:	ebac 0c07 	sub.w	ip, ip, r7
9001e4b8:	eba3 0707 	sub.w	r7, r3, r7
9001e4bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e4c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001e4c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001e4c8:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001e4cc:	d049      	beq.n	9001e562 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001e4ce:	43eb      	mvns	r3, r5
9001e4d0:	fa1f f985 	uxth.w	r9, r5
9001e4d4:	b2db      	uxtb	r3, r3
9001e4d6:	42b0      	cmp	r0, r6
9001e4d8:	d266      	bcs.n	9001e5a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e4da:	eb00 0a0e 	add.w	sl, r0, lr
9001e4de:	4550      	cmp	r0, sl
9001e4e0:	4621      	mov	r1, r4
9001e4e2:	f104 0403 	add.w	r4, r4, #3
9001e4e6:	d25b      	bcs.n	9001e5a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001e4e8:	8802      	ldrh	r2, [r0, #0]
9001e4ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e4ee:	ea4f 2822 	mov.w	r8, r2, asr #8
9001e4f2:	fb11 f109 	smulbb	r1, r1, r9
9001e4f6:	10d5      	asrs	r5, r2, #3
9001e4f8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001e4fc:	00d2      	lsls	r2, r2, #3
9001e4fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e502:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001e506:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e50a:	fb08 1803 	mla	r8, r8, r3, r1
9001e50e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001e512:	b2d2      	uxtb	r2, r2
9001e514:	fb11 f109 	smulbb	r1, r1, r9
9001e518:	fa1f f888 	uxth.w	r8, r8
9001e51c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e520:	fb05 1503 	mla	r5, r5, r3, r1
9001e524:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e528:	fb11 f109 	smulbb	r1, r1, r9
9001e52c:	b2ad      	uxth	r5, r5
9001e52e:	fb02 1203 	mla	r2, r2, r3, r1
9001e532:	f108 0101 	add.w	r1, r8, #1
9001e536:	b292      	uxth	r2, r2
9001e538:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001e53c:	1c51      	adds	r1, r2, #1
9001e53e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001e542:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001e546:	1c69      	adds	r1, r5, #1
9001e548:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001e54c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e550:	096d      	lsrs	r5, r5, #5
9001e552:	ea42 0208 	orr.w	r2, r2, r8
9001e556:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e55a:	432a      	orrs	r2, r5
9001e55c:	f820 2b02 	strh.w	r2, [r0], #2
9001e560:	e7bd      	b.n	9001e4de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001e562:	4a14      	ldr	r2, [pc, #80]	; (9001e5b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001e564:	42b0      	cmp	r0, r6
9001e566:	d21f      	bcs.n	9001e5a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e568:	eb00 050e 	add.w	r5, r0, lr
9001e56c:	42a8      	cmp	r0, r5
9001e56e:	4621      	mov	r1, r4
9001e570:	f104 0403 	add.w	r4, r4, #3
9001e574:	d210      	bcs.n	9001e598 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001e576:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001e57a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e57e:	00db      	lsls	r3, r3, #3
9001e580:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001e584:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e588:	430b      	orrs	r3, r1
9001e58a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e58e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001e592:	f820 3b02 	strh.w	r3, [r0], #2
9001e596:	e7e9      	b.n	9001e56c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001e598:	4438      	add	r0, r7
9001e59a:	eb01 040c 	add.w	r4, r1, ip
9001e59e:	e7e1      	b.n	9001e564 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001e5a0:	4438      	add	r0, r7
9001e5a2:	eb01 040c 	add.w	r4, r1, ip
9001e5a6:	e796      	b.n	9001e4d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001e5a8:	4b03      	ldr	r3, [pc, #12]	; (9001e5b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001e5aa:	6818      	ldr	r0, [r3, #0]
9001e5ac:	6803      	ldr	r3, [r0, #0]
9001e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e5b0:	4798      	blx	r3
9001e5b2:	e768      	b.n	9001e486 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001e5b4:	fffff800 	.word	0xfffff800
9001e5b8:	24028194 	.word	0x24028194
9001e5bc:	2402818e 	.word	0x2402818e

9001e5c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001e5c0:	b4f0      	push	{r4, r5, r6, r7}
9001e5c2:	4616      	mov	r6, r2
9001e5c4:	461c      	mov	r4, r3
9001e5c6:	460d      	mov	r5, r1
9001e5c8:	9a04      	ldr	r2, [sp, #16]
9001e5ca:	2e01      	cmp	r6, #1
9001e5cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001e5d0:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001e5d4:	d012      	beq.n	9001e5fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001e5d6:	d303      	bcc.n	9001e5e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001e5d8:	2e02      	cmp	r6, #2
9001e5da:	d00a      	beq.n	9001e5f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001e5dc:	bcf0      	pop	{r4, r5, r6, r7}
9001e5de:	4770      	bx	lr
9001e5e0:	6805      	ldr	r5, [r0, #0]
9001e5e2:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001e5e6:	68ed      	ldr	r5, [r5, #12]
9001e5e8:	4613      	mov	r3, r2
9001e5ea:	4622      	mov	r2, r4
9001e5ec:	46ac      	mov	ip, r5
9001e5ee:	bcf0      	pop	{r4, r5, r6, r7}
9001e5f0:	4760      	bx	ip
9001e5f2:	4621      	mov	r1, r4
9001e5f4:	4628      	mov	r0, r5
9001e5f6:	bcf0      	pop	{r4, r5, r6, r7}
9001e5f8:	f7ff bd94 	b.w	9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001e5fc:	4621      	mov	r1, r4
9001e5fe:	4628      	mov	r0, r5
9001e600:	bcf0      	pop	{r4, r5, r6, r7}
9001e602:	f7ff bee5 	b.w	9001e3d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001e608 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e60c:	b093      	sub	sp, #76	; 0x4c
9001e60e:	4681      	mov	r9, r0
9001e610:	4688      	mov	r8, r1
9001e612:	6810      	ldr	r0, [r2, #0]
9001e614:	6851      	ldr	r1, [r2, #4]
9001e616:	ac0e      	add	r4, sp, #56	; 0x38
9001e618:	4616      	mov	r6, r2
9001e61a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001e61e:	4f6b      	ldr	r7, [pc, #428]	; (9001e7cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001e620:	c403      	stmia	r4!, {r0, r1}
9001e622:	6818      	ldr	r0, [r3, #0]
9001e624:	ac10      	add	r4, sp, #64	; 0x40
9001e626:	6859      	ldr	r1, [r3, #4]
9001e628:	c403      	stmia	r4!, {r0, r1}
9001e62a:	a80e      	add	r0, sp, #56	; 0x38
9001e62c:	f7f9 f9aa 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e630:	4631      	mov	r1, r6
9001e632:	a810      	add	r0, sp, #64	; 0x40
9001e634:	4e66      	ldr	r6, [pc, #408]	; (9001e7d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001e636:	f7f9 f9cd 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e63a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001e63e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001e642:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001e646:	6830      	ldr	r0, [r6, #0]
9001e648:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e64c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001e650:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001e654:	4489      	add	r9, r1
9001e656:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001e65a:	440a      	add	r2, r1
9001e65c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001e660:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001e664:	4413      	add	r3, r2
9001e666:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001e66a:	6803      	ldr	r3, [r0, #0]
9001e66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e66e:	4798      	blx	r3
9001e670:	f010 0f80 	tst.w	r0, #128	; 0x80
9001e674:	6830      	ldr	r0, [r6, #0]
9001e676:	d01d      	beq.n	9001e6b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001e678:	2200      	movs	r2, #0
9001e67a:	6801      	ldr	r1, [r0, #0]
9001e67c:	b2a4      	uxth	r4, r4
9001e67e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001e682:	b2ad      	uxth	r5, r5
9001e684:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001e688:	220b      	movs	r2, #11
9001e68a:	9207      	str	r2, [sp, #28]
9001e68c:	883a      	ldrh	r2, [r7, #0]
9001e68e:	9502      	str	r5, [sp, #8]
9001e690:	9206      	str	r2, [sp, #24]
9001e692:	2201      	movs	r2, #1
9001e694:	9401      	str	r4, [sp, #4]
9001e696:	e9cd a204 	strd	sl, r2, [sp, #16]
9001e69a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001e69e:	9203      	str	r2, [sp, #12]
9001e6a0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001e6a4:	9200      	str	r2, [sp, #0]
9001e6a6:	4642      	mov	r2, r8
9001e6a8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001e6aa:	4649      	mov	r1, r9
9001e6ac:	47a0      	blx	r4
9001e6ae:	b013      	add	sp, #76	; 0x4c
9001e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e6b4:	6803      	ldr	r3, [r0, #0]
9001e6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e6b8:	4798      	blx	r3
9001e6ba:	883b      	ldrh	r3, [r7, #0]
9001e6bc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001e6c0:	f04f 0e04 	mov.w	lr, #4
9001e6c4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001e6c8:	435d      	muls	r5, r3
9001e6ca:	fb03 1202 	mla	r2, r3, r2, r1
9001e6ce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e6d2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001e6d6:	920c      	str	r2, [sp, #48]	; 0x30
9001e6d8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001e6dc:	1b12      	subs	r2, r2, r4
9001e6de:	920d      	str	r2, [sp, #52]	; 0x34
9001e6e0:	0062      	lsls	r2, r4, #1
9001e6e2:	1b1c      	subs	r4, r3, r4
9001e6e4:	920a      	str	r2, [sp, #40]	; 0x28
9001e6e6:	0063      	lsls	r3, r4, #1
9001e6e8:	930b      	str	r3, [sp, #44]	; 0x2c
9001e6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001e6ec:	4298      	cmp	r0, r3
9001e6ee:	d266      	bcs.n	9001e7be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001e6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e6f2:	eb00 0b03 	add.w	fp, r0, r3
9001e6f6:	4558      	cmp	r0, fp
9001e6f8:	d25c      	bcs.n	9001e7b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001e6fa:	f819 3b01 	ldrb.w	r3, [r9], #1
9001e6fe:	fb1e e303 	smlabb	r3, lr, r3, lr
9001e702:	f858 2003 	ldr.w	r2, [r8, r3]
9001e706:	0e11      	lsrs	r1, r2, #24
9001e708:	d012      	beq.n	9001e730 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001e70a:	29ff      	cmp	r1, #255	; 0xff
9001e70c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001e710:	d110      	bne.n	9001e734 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001e712:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001e716:	d10d      	bne.n	9001e734 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001e718:	0953      	lsrs	r3, r2, #5
9001e71a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001e71e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001e722:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e726:	f027 0707 	bic.w	r7, r7, #7
9001e72a:	431f      	orrs	r7, r3
9001e72c:	433a      	orrs	r2, r7
9001e72e:	8002      	strh	r2, [r0, #0]
9001e730:	3002      	adds	r0, #2
9001e732:	e7e0      	b.n	9001e6f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001e734:	fb0a f101 	mul.w	r1, sl, r1
9001e738:	8806      	ldrh	r6, [r0, #0]
9001e73a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001e73e:	b2d2      	uxtb	r2, r2
9001e740:	1c4b      	adds	r3, r1, #1
9001e742:	1235      	asrs	r5, r6, #8
9001e744:	10f4      	asrs	r4, r6, #3
9001e746:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001e74a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001e74e:	00f6      	lsls	r6, r6, #3
9001e750:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001e754:	121b      	asrs	r3, r3, #8
9001e756:	b2f6      	uxtb	r6, r6
9001e758:	b299      	uxth	r1, r3
9001e75a:	43db      	mvns	r3, r3
9001e75c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001e760:	fb1c fc01 	smulbb	ip, ip, r1
9001e764:	b2db      	uxtb	r3, r3
9001e766:	fb12 f201 	smulbb	r2, r2, r1
9001e76a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e76e:	fb05 c503 	mla	r5, r5, r3, ip
9001e772:	b2ff      	uxtb	r7, r7
9001e774:	fb06 2203 	mla	r2, r6, r3, r2
9001e778:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001e77c:	fb17 f701 	smulbb	r7, r7, r1
9001e780:	b2ad      	uxth	r5, r5
9001e782:	b292      	uxth	r2, r2
9001e784:	fb04 7403 	mla	r4, r4, r3, r7
9001e788:	f105 0c01 	add.w	ip, r5, #1
9001e78c:	1c57      	adds	r7, r2, #1
9001e78e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e792:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001e796:	b2a4      	uxth	r4, r4
9001e798:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001e79c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001e7a0:	433d      	orrs	r5, r7
9001e7a2:	1c67      	adds	r7, r4, #1
9001e7a4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001e7a8:	0964      	lsrs	r4, r4, #5
9001e7aa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001e7ae:	4325      	orrs	r5, r4
9001e7b0:	8005      	strh	r5, [r0, #0]
9001e7b2:	e7bd      	b.n	9001e730 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001e7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001e7b6:	4418      	add	r0, r3
9001e7b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e7ba:	4499      	add	r9, r3
9001e7bc:	e795      	b.n	9001e6ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001e7be:	4b04      	ldr	r3, [pc, #16]	; (9001e7d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001e7c0:	6818      	ldr	r0, [r3, #0]
9001e7c2:	6803      	ldr	r3, [r0, #0]
9001e7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e7c6:	4798      	blx	r3
9001e7c8:	e771      	b.n	9001e6ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001e7ca:	bf00      	nop
9001e7cc:	2402818e 	.word	0x2402818e
9001e7d0:	24028194 	.word	0x24028194

9001e7d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e7d8:	b087      	sub	sp, #28
9001e7da:	4680      	mov	r8, r0
9001e7dc:	460d      	mov	r5, r1
9001e7de:	4614      	mov	r4, r2
9001e7e0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001e7e4:	2e00      	cmp	r6, #0
9001e7e6:	f000 80b9 	beq.w	9001e95c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001e7ea:	6810      	ldr	r0, [r2, #0]
9001e7ec:	af02      	add	r7, sp, #8
9001e7ee:	6851      	ldr	r1, [r2, #4]
9001e7f0:	c703      	stmia	r7!, {r0, r1}
9001e7f2:	6818      	ldr	r0, [r3, #0]
9001e7f4:	af04      	add	r7, sp, #16
9001e7f6:	6859      	ldr	r1, [r3, #4]
9001e7f8:	c703      	stmia	r7!, {r0, r1}
9001e7fa:	a802      	add	r0, sp, #8
9001e7fc:	f7f9 f8c2 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e800:	4621      	mov	r1, r4
9001e802:	a804      	add	r0, sp, #16
9001e804:	f7f9 f8e6 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e808:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001e80c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001e810:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001e814:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001e818:	fb14 2103 	smlabb	r1, r4, r3, r2
9001e81c:	eb08 0401 	add.w	r4, r8, r1
9001e820:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001e824:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001e828:	440a      	add	r2, r1
9001e82a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001e82e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001e832:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001e836:	4413      	add	r3, r2
9001e838:	f8ad 3012 	strh.w	r3, [sp, #18]
9001e83c:	4b49      	ldr	r3, [pc, #292]	; (9001e964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001e83e:	6818      	ldr	r0, [r3, #0]
9001e840:	6803      	ldr	r3, [r0, #0]
9001e842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e844:	4798      	blx	r3
9001e846:	4b48      	ldr	r3, [pc, #288]	; (9001e968 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001e848:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001e84c:	2eff      	cmp	r6, #255	; 0xff
9001e84e:	881a      	ldrh	r2, [r3, #0]
9001e850:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001e854:	fb02 c101 	mla	r1, r2, r1, ip
9001e858:	fb02 f207 	mul.w	r2, r2, r7
9001e85c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001e860:	f105 0104 	add.w	r1, r5, #4
9001e864:	461d      	mov	r5, r3
9001e866:	d05a      	beq.n	9001e91e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001e868:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001e86c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001e870:	b2b6      	uxth	r6, r6
9001e872:	9301      	str	r3, [sp, #4]
9001e874:	fa1f fe8e 	uxth.w	lr, lr
9001e878:	4282      	cmp	r2, r0
9001e87a:	d96a      	bls.n	9001e952 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001e87c:	eb00 0b0a 	add.w	fp, r0, sl
9001e880:	4583      	cmp	fp, r0
9001e882:	d940      	bls.n	9001e906 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001e884:	8805      	ldrh	r5, [r0, #0]
9001e886:	f814 3b01 	ldrb.w	r3, [r4], #1
9001e88a:	122f      	asrs	r7, r5, #8
9001e88c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001e890:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001e894:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e898:	00ed      	lsls	r5, r5, #3
9001e89a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001e89e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001e8a2:	fb17 f70e 	smulbb	r7, r7, lr
9001e8a6:	b2ed      	uxtb	r5, r5
9001e8a8:	fb19 f90e 	smulbb	r9, r9, lr
9001e8ac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001e8b0:	fb15 f50e 	smulbb	r5, r5, lr
9001e8b4:	fb0c 7c06 	mla	ip, ip, r6, r7
9001e8b8:	10df      	asrs	r7, r3, #3
9001e8ba:	00db      	lsls	r3, r3, #3
9001e8bc:	fa1f fc8c 	uxth.w	ip, ip
9001e8c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e8c4:	b2db      	uxtb	r3, r3
9001e8c6:	fb07 9706 	mla	r7, r7, r6, r9
9001e8ca:	f10c 0901 	add.w	r9, ip, #1
9001e8ce:	fb03 5306 	mla	r3, r3, r6, r5
9001e8d2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001e8d6:	b29b      	uxth	r3, r3
9001e8d8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001e8dc:	b2bf      	uxth	r7, r7
9001e8de:	f103 0c01 	add.w	ip, r3, #1
9001e8e2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001e8e6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001e8ea:	ea4c 0c09 	orr.w	ip, ip, r9
9001e8ee:	f107 0901 	add.w	r9, r7, #1
9001e8f2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001e8f6:	097f      	lsrs	r7, r7, #5
9001e8f8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e8fc:	ea4c 0c07 	orr.w	ip, ip, r7
9001e900:	f820 cb02 	strh.w	ip, [r0], #2
9001e904:	e7bc      	b.n	9001e880 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001e906:	9b01      	ldr	r3, [sp, #4]
9001e908:	881b      	ldrh	r3, [r3, #0]
9001e90a:	eba3 0308 	sub.w	r3, r3, r8
9001e90e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e912:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001e916:	eba3 0308 	sub.w	r3, r3, r8
9001e91a:	441c      	add	r4, r3
9001e91c:	e7ac      	b.n	9001e878 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001e91e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001e922:	4282      	cmp	r2, r0
9001e924:	d915      	bls.n	9001e952 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001e926:	eb00 060a 	add.w	r6, r0, sl
9001e92a:	4286      	cmp	r6, r0
9001e92c:	d906      	bls.n	9001e93c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001e92e:	f814 3b01 	ldrb.w	r3, [r4], #1
9001e932:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001e936:	f820 3b02 	strh.w	r3, [r0], #2
9001e93a:	e7f6      	b.n	9001e92a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001e93c:	882b      	ldrh	r3, [r5, #0]
9001e93e:	eba3 0308 	sub.w	r3, r3, r8
9001e942:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e946:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001e94a:	eba3 0308 	sub.w	r3, r3, r8
9001e94e:	441c      	add	r4, r3
9001e950:	e7e7      	b.n	9001e922 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001e952:	4b04      	ldr	r3, [pc, #16]	; (9001e964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001e954:	6818      	ldr	r0, [r3, #0]
9001e956:	6803      	ldr	r3, [r0, #0]
9001e958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e95a:	4798      	blx	r3
9001e95c:	b007      	add	sp, #28
9001e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e962:	bf00      	nop
9001e964:	24028194 	.word	0x24028194
9001e968:	2402818e 	.word	0x2402818e

9001e96c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001e96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e970:	b091      	sub	sp, #68	; 0x44
9001e972:	4680      	mov	r8, r0
9001e974:	460f      	mov	r7, r1
9001e976:	4614      	mov	r4, r2
9001e978:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001e97c:	2d00      	cmp	r5, #0
9001e97e:	d051      	beq.n	9001ea24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001e980:	6810      	ldr	r0, [r2, #0]
9001e982:	ae0c      	add	r6, sp, #48	; 0x30
9001e984:	6851      	ldr	r1, [r2, #4]
9001e986:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001eb88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001e98a:	c603      	stmia	r6!, {r0, r1}
9001e98c:	6818      	ldr	r0, [r3, #0]
9001e98e:	ae0e      	add	r6, sp, #56	; 0x38
9001e990:	6859      	ldr	r1, [r3, #4]
9001e992:	c603      	stmia	r6!, {r0, r1}
9001e994:	a80c      	add	r0, sp, #48	; 0x30
9001e996:	f7f8 fff5 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e99a:	4621      	mov	r1, r4
9001e99c:	a80e      	add	r0, sp, #56	; 0x38
9001e99e:	f7f9 f819 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e9a2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001e9a6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001e9aa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001e9ae:	f8d9 0000 	ldr.w	r0, [r9]
9001e9b2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e9b6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001e9ba:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001e9be:	eb08 0401 	add.w	r4, r8, r1
9001e9c2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001e9c6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001eb8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001e9ca:	440a      	add	r2, r1
9001e9cc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001e9d0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001e9d4:	4413      	add	r3, r2
9001e9d6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001e9da:	6803      	ldr	r3, [r0, #0]
9001e9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e9de:	4798      	blx	r3
9001e9e0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001e9e4:	f8d9 0000 	ldr.w	r0, [r9]
9001e9e8:	d01f      	beq.n	9001ea2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001e9ea:	2200      	movs	r2, #0
9001e9ec:	6801      	ldr	r1, [r0, #0]
9001e9ee:	b2b6      	uxth	r6, r6
9001e9f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001e9f4:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001e9f8:	220b      	movs	r2, #11
9001e9fa:	9207      	str	r2, [sp, #28]
9001e9fc:	f8b8 2000 	ldrh.w	r2, [r8]
9001ea00:	9601      	str	r6, [sp, #4]
9001ea02:	9206      	str	r2, [sp, #24]
9001ea04:	2201      	movs	r2, #1
9001ea06:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ea0a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ea0e:	9203      	str	r2, [sp, #12]
9001ea10:	fa1f f28a 	uxth.w	r2, sl
9001ea14:	9202      	str	r2, [sp, #8]
9001ea16:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ea1a:	9200      	str	r2, [sp, #0]
9001ea1c:	463a      	mov	r2, r7
9001ea1e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ea20:	4621      	mov	r1, r4
9001ea22:	47a8      	blx	r5
9001ea24:	b011      	add	sp, #68	; 0x44
9001ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ea2a:	6803      	ldr	r3, [r0, #0]
9001ea2c:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ea30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ea32:	4798      	blx	r3
9001ea34:	f8b8 2000 	ldrh.w	r2, [r8]
9001ea38:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ea3c:	2dff      	cmp	r5, #255	; 0xff
9001ea3e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ea42:	fb0a fa02 	mul.w	sl, sl, r2
9001ea46:	fb02 1303 	mla	r3, r2, r3, r1
9001ea4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ea4e:	d062      	beq.n	9001eb16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ea50:	ea6f 0c05 	mvn.w	ip, r5
9001ea54:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ea58:	b2ad      	uxth	r5, r5
9001ea5a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ea5e:	fa5f fc8c 	uxtb.w	ip, ip
9001ea62:	930a      	str	r3, [sp, #40]	; 0x28
9001ea64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ea66:	4298      	cmp	r0, r3
9001ea68:	f080 8085 	bcs.w	9001eb76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ea6c:	eb00 0b09 	add.w	fp, r0, r9
9001ea70:	4558      	cmp	r0, fp
9001ea72:	d246      	bcs.n	9001eb02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ea74:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ea78:	2303      	movs	r3, #3
9001ea7a:	2204      	movs	r2, #4
9001ea7c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ea80:	8803      	ldrh	r3, [r0, #0]
9001ea82:	eb07 0a0e 	add.w	sl, r7, lr
9001ea86:	1219      	asrs	r1, r3, #8
9001ea88:	10da      	asrs	r2, r3, #3
9001ea8a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ea8e:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ea92:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ea96:	00db      	lsls	r3, r3, #3
9001ea98:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ea9c:	fb18 f805 	smulbb	r8, r8, r5
9001eaa0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001eaa4:	fb1e fe05 	smulbb	lr, lr, r5
9001eaa8:	b2db      	uxtb	r3, r3
9001eaaa:	fb01 810c 	mla	r1, r1, ip, r8
9001eaae:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001eab2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001eab6:	fb18 f805 	smulbb	r8, r8, r5
9001eaba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001eabe:	b289      	uxth	r1, r1
9001eac0:	fb02 820c 	mla	r2, r2, ip, r8
9001eac4:	fb03 e30c 	mla	r3, r3, ip, lr
9001eac8:	f101 0801 	add.w	r8, r1, #1
9001eacc:	b292      	uxth	r2, r2
9001eace:	b29b      	uxth	r3, r3
9001ead0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001ead4:	f102 0801 	add.w	r8, r2, #1
9001ead8:	f103 0e01 	add.w	lr, r3, #1
9001eadc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001eae0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001eae4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001eae8:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001eaec:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001eaf0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001eaf4:	ea4e 0101 	orr.w	r1, lr, r1
9001eaf8:	ea41 0108 	orr.w	r1, r1, r8
9001eafc:	f820 1b02 	strh.w	r1, [r0], #2
9001eb00:	e7b6      	b.n	9001ea70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001eb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001eb04:	881b      	ldrh	r3, [r3, #0]
9001eb06:	1b9b      	subs	r3, r3, r6
9001eb08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001eb0c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001eb10:	1b9b      	subs	r3, r3, r6
9001eb12:	441c      	add	r4, r3
9001eb14:	e7a6      	b.n	9001ea64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001eb16:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001eb1a:	2203      	movs	r2, #3
9001eb1c:	2504      	movs	r5, #4
9001eb1e:	4919      	ldr	r1, [pc, #100]	; (9001eb84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001eb20:	4550      	cmp	r0, sl
9001eb22:	d228      	bcs.n	9001eb76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001eb24:	eb00 0c09 	add.w	ip, r0, r9
9001eb28:	4560      	cmp	r0, ip
9001eb2a:	4623      	mov	r3, r4
9001eb2c:	d219      	bcs.n	9001eb62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001eb2e:	f893 e000 	ldrb.w	lr, [r3]
9001eb32:	3401      	adds	r4, #1
9001eb34:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001eb38:	eb07 0b0e 	add.w	fp, r7, lr
9001eb3c:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001eb40:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001eb44:	f89b b001 	ldrb.w	fp, [fp, #1]
9001eb48:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001eb4c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001eb50:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001eb54:	ea43 030b 	orr.w	r3, r3, fp
9001eb58:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001eb5c:	f820 3b02 	strh.w	r3, [r0], #2
9001eb60:	e7e2      	b.n	9001eb28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001eb62:	f8b8 3000 	ldrh.w	r3, [r8]
9001eb66:	1b9b      	subs	r3, r3, r6
9001eb68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001eb6c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001eb70:	1b9b      	subs	r3, r3, r6
9001eb72:	441c      	add	r4, r3
9001eb74:	e7d4      	b.n	9001eb20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001eb76:	4b04      	ldr	r3, [pc, #16]	; (9001eb88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001eb78:	6818      	ldr	r0, [r3, #0]
9001eb7a:	6803      	ldr	r3, [r0, #0]
9001eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001eb7e:	4798      	blx	r3
9001eb80:	e750      	b.n	9001ea24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001eb82:	bf00      	nop
9001eb84:	fffff800 	.word	0xfffff800
9001eb88:	24028194 	.word	0x24028194
9001eb8c:	2402818e 	.word	0x2402818e

9001eb90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001eb90:	b430      	push	{r4, r5}
9001eb92:	780d      	ldrb	r5, [r1, #0]
9001eb94:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001eb98:	2d01      	cmp	r5, #1
9001eb9a:	d00a      	beq.n	9001ebb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001eb9c:	d305      	bcc.n	9001ebaa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001eb9e:	2d02      	cmp	r5, #2
9001eba0:	d10b      	bne.n	9001ebba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001eba2:	9402      	str	r4, [sp, #8]
9001eba4:	bc30      	pop	{r4, r5}
9001eba6:	f7ff be15 	b.w	9001e7d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001ebaa:	9402      	str	r4, [sp, #8]
9001ebac:	bc30      	pop	{r4, r5}
9001ebae:	f7ff bd2b 	b.w	9001e608 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001ebb2:	9402      	str	r4, [sp, #8]
9001ebb4:	bc30      	pop	{r4, r5}
9001ebb6:	f7ff bed9 	b.w	9001e96c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001ebba:	bc30      	pop	{r4, r5}
9001ebbc:	4770      	bx	lr
	...

9001ebc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ebc4:	b087      	sub	sp, #28
9001ebc6:	4604      	mov	r4, r0
9001ebc8:	460e      	mov	r6, r1
9001ebca:	6810      	ldr	r0, [r2, #0]
9001ebcc:	6851      	ldr	r1, [r2, #4]
9001ebce:	ad02      	add	r5, sp, #8
9001ebd0:	4617      	mov	r7, r2
9001ebd2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001ebd6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001ee08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001ebda:	c503      	stmia	r5!, {r0, r1}
9001ebdc:	6818      	ldr	r0, [r3, #0]
9001ebde:	ad04      	add	r5, sp, #16
9001ebe0:	6859      	ldr	r1, [r3, #4]
9001ebe2:	c503      	stmia	r5!, {r0, r1}
9001ebe4:	a802      	add	r0, sp, #8
9001ebe6:	f7f8 fecd 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ebea:	4639      	mov	r1, r7
9001ebec:	a804      	add	r0, sp, #16
9001ebee:	f7f8 fef1 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ebf2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ebf6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ebfa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001ebfe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ec02:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ec06:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001ec0a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001ec0e:	440e      	add	r6, r1
9001ec10:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ec14:	440a      	add	r2, r1
9001ec16:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ec1a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ec1e:	4413      	add	r3, r2
9001ec20:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ec24:	4b77      	ldr	r3, [pc, #476]	; (9001ee04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001ec26:	6818      	ldr	r0, [r3, #0]
9001ec28:	6803      	ldr	r3, [r0, #0]
9001ec2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ec2c:	4798      	blx	r3
9001ec2e:	f8b9 b000 	ldrh.w	fp, [r9]
9001ec32:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ec36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001ec3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ec3e:	fb05 f50b 	mul.w	r5, r5, fp
9001ec42:	fb0b 2303 	mla	r3, fp, r3, r2
9001ec46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ec4a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001ec4e:	9300      	str	r3, [sp, #0]
9001ec50:	d069      	beq.n	9001ed26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001ec52:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001ec56:	4558      	cmp	r0, fp
9001ec58:	f080 80cc 	bcs.w	9001edf4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ec5c:	9b00      	ldr	r3, [sp, #0]
9001ec5e:	4631      	mov	r1, r6
9001ec60:	18c3      	adds	r3, r0, r3
9001ec62:	9301      	str	r3, [sp, #4]
9001ec64:	9b01      	ldr	r3, [sp, #4]
9001ec66:	4298      	cmp	r0, r3
9001ec68:	d24f      	bcs.n	9001ed0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001ec6a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001ec6e:	2a00      	cmp	r2, #0
9001ec70:	d048      	beq.n	9001ed04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ec72:	fb0a f202 	mul.w	r2, sl, r2
9001ec76:	1c53      	adds	r3, r2, #1
9001ec78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ec7c:	121b      	asrs	r3, r3, #8
9001ec7e:	d041      	beq.n	9001ed04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ec80:	8802      	ldrh	r2, [r0, #0]
9001ec82:	b29e      	uxth	r6, r3
9001ec84:	f8b4 c000 	ldrh.w	ip, [r4]
9001ec88:	43db      	mvns	r3, r3
9001ec8a:	1215      	asrs	r5, r2, #8
9001ec8c:	b2db      	uxtb	r3, r3
9001ec8e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001ec92:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ec96:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001ec9a:	fb15 f503 	smulbb	r5, r5, r3
9001ec9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001eca2:	00d2      	lsls	r2, r2, #3
9001eca4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001eca8:	fb07 5706 	mla	r7, r7, r6, r5
9001ecac:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001ecb0:	b2d2      	uxtb	r2, r2
9001ecb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001ecb6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001ecba:	fb1e fe03 	smulbb	lr, lr, r3
9001ecbe:	b2bf      	uxth	r7, r7
9001ecc0:	fb12 f203 	smulbb	r2, r2, r3
9001ecc4:	fa5f fc8c 	uxtb.w	ip, ip
9001ecc8:	fb05 e506 	mla	r5, r5, r6, lr
9001eccc:	f107 0e01 	add.w	lr, r7, #1
9001ecd0:	fb0c 2c06 	mla	ip, ip, r6, r2
9001ecd4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001ecd8:	fa1f fc8c 	uxth.w	ip, ip
9001ecdc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001ece0:	b2ad      	uxth	r5, r5
9001ece2:	f10c 0701 	add.w	r7, ip, #1
9001ece6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ecea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ecee:	ea47 070e 	orr.w	r7, r7, lr
9001ecf2:	f105 0e01 	add.w	lr, r5, #1
9001ecf6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001ecfa:	096d      	lsrs	r5, r5, #5
9001ecfc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ed00:	432f      	orrs	r7, r5
9001ed02:	8007      	strh	r7, [r0, #0]
9001ed04:	3002      	adds	r0, #2
9001ed06:	3402      	adds	r4, #2
9001ed08:	e7ac      	b.n	9001ec64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001ed0a:	f8b9 3000 	ldrh.w	r3, [r9]
9001ed0e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ed12:	eba3 0308 	sub.w	r3, r3, r8
9001ed16:	eba6 0608 	sub.w	r6, r6, r8
9001ed1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ed1e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001ed22:	440e      	add	r6, r1
9001ed24:	e797      	b.n	9001ec56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001ed26:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001ed2a:	42a8      	cmp	r0, r5
9001ed2c:	d262      	bcs.n	9001edf4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ed2e:	9b00      	ldr	r3, [sp, #0]
9001ed30:	4631      	mov	r1, r6
9001ed32:	eb00 0b03 	add.w	fp, r0, r3
9001ed36:	4558      	cmp	r0, fp
9001ed38:	d24e      	bcs.n	9001edd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001ed3a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001ed3e:	b12b      	cbz	r3, 9001ed4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001ed40:	2bff      	cmp	r3, #255	; 0xff
9001ed42:	f8b4 e000 	ldrh.w	lr, [r4]
9001ed46:	d104      	bne.n	9001ed52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001ed48:	f8a0 e000 	strh.w	lr, [r0]
9001ed4c:	3002      	adds	r0, #2
9001ed4e:	3402      	adds	r4, #2
9001ed50:	e7f1      	b.n	9001ed36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001ed52:	8802      	ldrh	r2, [r0, #0]
9001ed54:	b29f      	uxth	r7, r3
9001ed56:	43db      	mvns	r3, r3
9001ed58:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ed5c:	1216      	asrs	r6, r2, #8
9001ed5e:	b2db      	uxtb	r3, r3
9001ed60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ed64:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001ed68:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001ed6c:	00d2      	lsls	r2, r2, #3
9001ed6e:	fb16 f603 	smulbb	r6, r6, r3
9001ed72:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001ed76:	b2d2      	uxtb	r2, r2
9001ed78:	fb0c 6c07 	mla	ip, ip, r7, r6
9001ed7c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001ed80:	fb1a fa03 	smulbb	sl, sl, r3
9001ed84:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ed88:	fa1f fc8c 	uxth.w	ip, ip
9001ed8c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ed90:	fb12 f303 	smulbb	r3, r2, r3
9001ed94:	fa5f fe8e 	uxtb.w	lr, lr
9001ed98:	fb06 a607 	mla	r6, r6, r7, sl
9001ed9c:	f10c 0201 	add.w	r2, ip, #1
9001eda0:	fb0e 3307 	mla	r3, lr, r7, r3
9001eda4:	b2b6      	uxth	r6, r6
9001eda6:	b29b      	uxth	r3, r3
9001eda8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001edac:	f106 0a01 	add.w	sl, r6, #1
9001edb0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001edb4:	f103 0c01 	add.w	ip, r3, #1
9001edb8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001edbc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001edc0:	0976      	lsrs	r6, r6, #5
9001edc2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001edc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001edca:	ea4c 0c02 	orr.w	ip, ip, r2
9001edce:	ea4c 0c06 	orr.w	ip, ip, r6
9001edd2:	f8a0 c000 	strh.w	ip, [r0]
9001edd6:	e7b9      	b.n	9001ed4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001edd8:	f8b9 3000 	ldrh.w	r3, [r9]
9001eddc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ede0:	eba3 0308 	sub.w	r3, r3, r8
9001ede4:	eba6 0608 	sub.w	r6, r6, r8
9001ede8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001edec:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001edf0:	440e      	add	r6, r1
9001edf2:	e79a      	b.n	9001ed2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001edf4:	4b03      	ldr	r3, [pc, #12]	; (9001ee04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001edf6:	6818      	ldr	r0, [r3, #0]
9001edf8:	6803      	ldr	r3, [r0, #0]
9001edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001edfc:	4798      	blx	r3
9001edfe:	b007      	add	sp, #28
9001ee00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee04:	24028194 	.word	0x24028194
9001ee08:	2402818e 	.word	0x2402818e

9001ee0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ee10:	b089      	sub	sp, #36	; 0x24
9001ee12:	4682      	mov	sl, r0
9001ee14:	460f      	mov	r7, r1
9001ee16:	4691      	mov	r9, r2
9001ee18:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001ee1c:	4698      	mov	r8, r3
9001ee1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ee20:	2e00      	cmp	r6, #0
9001ee22:	d036      	beq.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ee24:	4608      	mov	r0, r1
9001ee26:	f7fc f863 	bl	9001aef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001ee2a:	4605      	mov	r5, r0
9001ee2c:	4638      	mov	r0, r7
9001ee2e:	f7fc f893 	bl	9001af58 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001ee32:	f8ad 000e 	strh.w	r0, [sp, #14]
9001ee36:	4638      	mov	r0, r7
9001ee38:	f8ad 9008 	strh.w	r9, [sp, #8]
9001ee3c:	f8ad 500c 	strh.w	r5, [sp, #12]
9001ee40:	f8ad 800a 	strh.w	r8, [sp, #10]
9001ee44:	f7fc f940 	bl	9001b0c8 <_ZNK8touchgfx6Bitmap7getDataEv>
9001ee48:	4605      	mov	r5, r0
9001ee4a:	4638      	mov	r0, r7
9001ee4c:	f7fc f96c 	bl	9001b128 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001ee50:	4681      	mov	r9, r0
9001ee52:	4638      	mov	r0, r7
9001ee54:	f7fc f9bc 	bl	9001b1d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001ee58:	280b      	cmp	r0, #11
9001ee5a:	d81a      	bhi.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ee5c:	e8df f000 	tbb	[pc, r0]
9001ee60:	1906aebd 	.word	0x1906aebd
9001ee64:	19191919 	.word	0x19191919
9001ee68:	b5191919 	.word	0xb5191919
9001ee6c:	4bb0      	ldr	r3, [pc, #704]	; (9001f130 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001ee6e:	6818      	ldr	r0, [r3, #0]
9001ee70:	6803      	ldr	r3, [r0, #0]
9001ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ee74:	4798      	blx	r3
9001ee76:	2eff      	cmp	r6, #255	; 0xff
9001ee78:	d121      	bne.n	9001eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001ee7a:	0683      	lsls	r3, r0, #26
9001ee7c:	d41f      	bmi.n	9001eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001ee7e:	4638      	mov	r0, r7
9001ee80:	f7fc f8ea 	bl	9001b058 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001ee84:	b940      	cbnz	r0, 9001ee98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001ee86:	4623      	mov	r3, r4
9001ee88:	aa02      	add	r2, sp, #8
9001ee8a:	4629      	mov	r1, r5
9001ee8c:	4650      	mov	r0, sl
9001ee8e:	f7ff fa2f 	bl	9001e2f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001ee92:	b009      	add	sp, #36	; 0x24
9001ee94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee98:	f10d 0818 	add.w	r8, sp, #24
9001ee9c:	4639      	mov	r1, r7
9001ee9e:	af04      	add	r7, sp, #16
9001eea0:	4640      	mov	r0, r8
9001eea2:	f7fc f88d 	bl	9001afc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001eea6:	e898 0003 	ldmia.w	r8, {r0, r1}
9001eeaa:	e887 0003 	stmia.w	r7, {r0, r1}
9001eeae:	4638      	mov	r0, r7
9001eeb0:	4621      	mov	r1, r4
9001eeb2:	f7f3 fcff 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001eeb6:	4638      	mov	r0, r7
9001eeb8:	f7f3 fd3f 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001eebc:	b130      	cbz	r0, 9001eecc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001eebe:	4633      	mov	r3, r6
9001eec0:	4622      	mov	r2, r4
9001eec2:	a902      	add	r1, sp, #8
9001eec4:	4628      	mov	r0, r5
9001eec6:	f7ff f92d 	bl	9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eeca:	e7e2      	b.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001eecc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001eed0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001eed4:	4293      	cmp	r3, r2
9001eed6:	dd12      	ble.n	9001eefe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001eed8:	1a9b      	subs	r3, r3, r2
9001eeda:	f9b4 0000 	ldrsh.w	r0, [r4]
9001eede:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001eee2:	f8ad 0018 	strh.w	r0, [sp, #24]
9001eee6:	4628      	mov	r0, r5
9001eee8:	f8ad 201a 	strh.w	r2, [sp, #26]
9001eeec:	4642      	mov	r2, r8
9001eeee:	f8ad 101c 	strh.w	r1, [sp, #28]
9001eef2:	a902      	add	r1, sp, #8
9001eef4:	f8ad 301e 	strh.w	r3, [sp, #30]
9001eef8:	4633      	mov	r3, r6
9001eefa:	f7ff f913 	bl	9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eefe:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001ef02:	f9b4 2000 	ldrsh.w	r2, [r4]
9001ef06:	4293      	cmp	r3, r2
9001ef08:	dd12      	ble.n	9001ef30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001ef0a:	1a9b      	subs	r3, r3, r2
9001ef0c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001ef10:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001ef14:	f8ad 2018 	strh.w	r2, [sp, #24]
9001ef18:	4642      	mov	r2, r8
9001ef1a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001ef1e:	4628      	mov	r0, r5
9001ef20:	f8ad 301c 	strh.w	r3, [sp, #28]
9001ef24:	23ff      	movs	r3, #255	; 0xff
9001ef26:	f8ad 101e 	strh.w	r1, [sp, #30]
9001ef2a:	a902      	add	r1, sp, #8
9001ef2c:	f7ff f8fa 	bl	9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ef30:	463b      	mov	r3, r7
9001ef32:	aa02      	add	r2, sp, #8
9001ef34:	4629      	mov	r1, r5
9001ef36:	4650      	mov	r0, sl
9001ef38:	f7ff f9da 	bl	9001e2f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001ef3c:	88a2      	ldrh	r2, [r4, #4]
9001ef3e:	8823      	ldrh	r3, [r4, #0]
9001ef40:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001ef44:	4413      	add	r3, r2
9001ef46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001ef4a:	440a      	add	r2, r1
9001ef4c:	b29b      	uxth	r3, r3
9001ef4e:	b292      	uxth	r2, r2
9001ef50:	b218      	sxth	r0, r3
9001ef52:	b211      	sxth	r1, r2
9001ef54:	4288      	cmp	r0, r1
9001ef56:	dd12      	ble.n	9001ef7e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001ef58:	1a9b      	subs	r3, r3, r2
9001ef5a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001ef5e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001ef62:	4642      	mov	r2, r8
9001ef64:	f8ad 1018 	strh.w	r1, [sp, #24]
9001ef68:	a902      	add	r1, sp, #8
9001ef6a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001ef6e:	23ff      	movs	r3, #255	; 0xff
9001ef70:	f8ad 001e 	strh.w	r0, [sp, #30]
9001ef74:	4628      	mov	r0, r5
9001ef76:	f8ad 601a 	strh.w	r6, [sp, #26]
9001ef7a:	f7ff f8d3 	bl	9001e124 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ef7e:	88e2      	ldrh	r2, [r4, #6]
9001ef80:	8863      	ldrh	r3, [r4, #2]
9001ef82:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001ef86:	4413      	add	r3, r2
9001ef88:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001ef8c:	440a      	add	r2, r1
9001ef8e:	b29b      	uxth	r3, r3
9001ef90:	b292      	uxth	r2, r2
9001ef92:	b218      	sxth	r0, r3
9001ef94:	b211      	sxth	r1, r2
9001ef96:	4288      	cmp	r0, r1
9001ef98:	f77f af7b 	ble.w	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ef9c:	1a9b      	subs	r3, r3, r2
9001ef9e:	f9b4 6000 	ldrsh.w	r6, [r4]
9001efa2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001efa6:	4642      	mov	r2, r8
9001efa8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001efac:	23ff      	movs	r3, #255	; 0xff
9001efae:	f8ad 6018 	strh.w	r6, [sp, #24]
9001efb2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001efb6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001efba:	e782      	b.n	9001eec2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001efbc:	4633      	mov	r3, r6
9001efbe:	4622      	mov	r2, r4
9001efc0:	a902      	add	r1, sp, #8
9001efc2:	4628      	mov	r0, r5
9001efc4:	f7ff fa04 	bl	9001e3d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001efc8:	e763      	b.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001efca:	9600      	str	r6, [sp, #0]
9001efcc:	4623      	mov	r3, r4
9001efce:	aa02      	add	r2, sp, #8
9001efd0:	4649      	mov	r1, r9
9001efd2:	4628      	mov	r0, r5
9001efd4:	f7ff fddc 	bl	9001eb90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001efd8:	e75b      	b.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001efda:	4638      	mov	r0, r7
9001efdc:	f7fc f83c 	bl	9001b058 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001efe0:	b950      	cbnz	r0, 9001eff8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001efe2:	f8da 3000 	ldr.w	r3, [sl]
9001efe6:	aa02      	add	r2, sp, #8
9001efe8:	4629      	mov	r1, r5
9001efea:	e9cd 6000 	strd	r6, r0, [sp]
9001efee:	4650      	mov	r0, sl
9001eff0:	68de      	ldr	r6, [r3, #12]
9001eff2:	4623      	mov	r3, r4
9001eff4:	47b0      	blx	r6
9001eff6:	e74c      	b.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001eff8:	f10d 0818 	add.w	r8, sp, #24
9001effc:	4639      	mov	r1, r7
9001effe:	af04      	add	r7, sp, #16
9001f000:	4640      	mov	r0, r8
9001f002:	f7fb ffdd 	bl	9001afc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f006:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f00a:	e887 0003 	stmia.w	r7, {r0, r1}
9001f00e:	4638      	mov	r0, r7
9001f010:	4621      	mov	r1, r4
9001f012:	f7f3 fc4f 	bl	900128b4 <_ZN8touchgfx4RectaNERKS0_>
9001f016:	4638      	mov	r0, r7
9001f018:	f7f3 fc8f 	bl	9001293a <_ZNK8touchgfx4Rect7isEmptyEv>
9001f01c:	b138      	cbz	r0, 9001f02e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001f01e:	4623      	mov	r3, r4
9001f020:	9600      	str	r6, [sp, #0]
9001f022:	aa02      	add	r2, sp, #8
9001f024:	4649      	mov	r1, r9
9001f026:	4628      	mov	r0, r5
9001f028:	f7ff fdca 	bl	9001ebc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f02c:	e731      	b.n	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f02e:	f8da 3000 	ldr.w	r3, [sl]
9001f032:	aa02      	add	r2, sp, #8
9001f034:	4629      	mov	r1, r5
9001f036:	e9cd 6000 	strd	r6, r0, [sp]
9001f03a:	4650      	mov	r0, sl
9001f03c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001f040:	463b      	mov	r3, r7
9001f042:	47d8      	blx	fp
9001f044:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f048:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f04c:	4293      	cmp	r3, r2
9001f04e:	dd13      	ble.n	9001f078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001f050:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f054:	1a9b      	subs	r3, r3, r2
9001f056:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f05a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f05e:	4628      	mov	r0, r5
9001f060:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f064:	aa02      	add	r2, sp, #8
9001f066:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f06a:	4649      	mov	r1, r9
9001f06c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f070:	4643      	mov	r3, r8
9001f072:	9600      	str	r6, [sp, #0]
9001f074:	f7ff fda4 	bl	9001ebc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f078:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f07c:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f080:	4293      	cmp	r3, r2
9001f082:	dd13      	ble.n	9001f0ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001f084:	1a9b      	subs	r3, r3, r2
9001f086:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f08a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f08e:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f092:	aa02      	add	r2, sp, #8
9001f094:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f098:	4628      	mov	r0, r5
9001f09a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f09e:	4643      	mov	r3, r8
9001f0a0:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f0a4:	4649      	mov	r1, r9
9001f0a6:	9600      	str	r6, [sp, #0]
9001f0a8:	f7ff fd8a 	bl	9001ebc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f0ac:	88a2      	ldrh	r2, [r4, #4]
9001f0ae:	8823      	ldrh	r3, [r4, #0]
9001f0b0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f0b4:	4413      	add	r3, r2
9001f0b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f0ba:	440a      	add	r2, r1
9001f0bc:	b29b      	uxth	r3, r3
9001f0be:	b292      	uxth	r2, r2
9001f0c0:	b218      	sxth	r0, r3
9001f0c2:	b211      	sxth	r1, r2
9001f0c4:	4288      	cmp	r0, r1
9001f0c6:	dd13      	ble.n	9001f0f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001f0c8:	1a9b      	subs	r3, r3, r2
9001f0ca:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f0ce:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001f0d2:	aa02      	add	r2, sp, #8
9001f0d4:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f0d8:	4649      	mov	r1, r9
9001f0da:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f0de:	4643      	mov	r3, r8
9001f0e0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f0e4:	4628      	mov	r0, r5
9001f0e6:	9600      	str	r6, [sp, #0]
9001f0e8:	f8ad 701a 	strh.w	r7, [sp, #26]
9001f0ec:	f7ff fd68 	bl	9001ebc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f0f0:	88e2      	ldrh	r2, [r4, #6]
9001f0f2:	8863      	ldrh	r3, [r4, #2]
9001f0f4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f0f8:	4413      	add	r3, r2
9001f0fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f0fe:	440a      	add	r2, r1
9001f100:	b29b      	uxth	r3, r3
9001f102:	b292      	uxth	r2, r2
9001f104:	b218      	sxth	r0, r3
9001f106:	b211      	sxth	r1, r2
9001f108:	4288      	cmp	r0, r1
9001f10a:	f77f aec2 	ble.w	9001ee92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f10e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001f112:	1a9b      	subs	r3, r3, r2
9001f114:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f118:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f11c:	4643      	mov	r3, r8
9001f11e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001f122:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f126:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f12a:	9600      	str	r6, [sp, #0]
9001f12c:	e779      	b.n	9001f022 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001f12e:	bf00      	nop
9001f130:	24028194 	.word	0x24028194

9001f134 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001f134:	b180      	cbz	r0, 9001f158 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001f136:	2903      	cmp	r1, #3
9001f138:	d81c      	bhi.n	9001f174 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f13a:	e8df f001 	tbb	[pc, r1]
9001f13e:	1d02      	.short	0x1d02
9001f140:	1f08      	.short	0x1f08
9001f142:	4b10      	ldr	r3, [pc, #64]	; (9001f184 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f144:	8818      	ldrh	r0, [r3, #0]
9001f146:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f14a:	4240      	negs	r0, r0
9001f14c:	4770      	bx	lr
9001f14e:	4b0d      	ldr	r3, [pc, #52]	; (9001f184 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f150:	8818      	ldrh	r0, [r3, #0]
9001f152:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f156:	4770      	bx	lr
9001f158:	2903      	cmp	r1, #3
9001f15a:	d80b      	bhi.n	9001f174 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f15c:	a301      	add	r3, pc, #4	; (adr r3, 9001f164 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001f15e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f162:	bf00      	nop
9001f164:	9001f179 	.word	0x9001f179
9001f168:	9001f14f 	.word	0x9001f14f
9001f16c:	9001f17d 	.word	0x9001f17d
9001f170:	9001f143 	.word	0x9001f143
9001f174:	2000      	movs	r0, #0
9001f176:	4770      	bx	lr
9001f178:	2001      	movs	r0, #1
9001f17a:	4770      	bx	lr
9001f17c:	f04f 30ff 	mov.w	r0, #4294967295
9001f180:	4770      	bx	lr
9001f182:	bf00      	nop
9001f184:	2402818e 	.word	0x2402818e

9001f188 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001f188:	b180      	cbz	r0, 9001f1ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001f18a:	2903      	cmp	r1, #3
9001f18c:	d81c      	bhi.n	9001f1c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f18e:	e8df f001 	tbb	[pc, r1]
9001f192:	021d      	.short	0x021d
9001f194:	071f      	.short	0x071f
9001f196:	4b10      	ldr	r3, [pc, #64]	; (9001f1d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f198:	8818      	ldrh	r0, [r3, #0]
9001f19a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f19e:	4770      	bx	lr
9001f1a0:	4b0d      	ldr	r3, [pc, #52]	; (9001f1d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f1a2:	8818      	ldrh	r0, [r3, #0]
9001f1a4:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f1a8:	4240      	negs	r0, r0
9001f1aa:	4770      	bx	lr
9001f1ac:	2903      	cmp	r1, #3
9001f1ae:	d80b      	bhi.n	9001f1c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f1b0:	a301      	add	r3, pc, #4	; (adr r3, 9001f1b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001f1b2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f1b6:	bf00      	nop
9001f1b8:	9001f197 	.word	0x9001f197
9001f1bc:	9001f1d1 	.word	0x9001f1d1
9001f1c0:	9001f1a1 	.word	0x9001f1a1
9001f1c4:	9001f1cd 	.word	0x9001f1cd
9001f1c8:	2000      	movs	r0, #0
9001f1ca:	4770      	bx	lr
9001f1cc:	2001      	movs	r0, #1
9001f1ce:	4770      	bx	lr
9001f1d0:	f04f 30ff 	mov.w	r0, #4294967295
9001f1d4:	4770      	bx	lr
9001f1d6:	bf00      	nop
9001f1d8:	2402818e 	.word	0x2402818e

9001f1dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001f1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f1e0:	b099      	sub	sp, #100	; 0x64
9001f1e2:	910b      	str	r1, [sp, #44]	; 0x2c
9001f1e4:	a914      	add	r1, sp, #80	; 0x50
9001f1e6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001f1ea:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001f1ee:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001f1f2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001f1f6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001f1fa:	e881 000c 	stmia.w	r1, {r2, r3}
9001f1fe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001f202:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001f206:	9309      	str	r3, [sp, #36]	; 0x24
9001f208:	f891 900d 	ldrb.w	r9, [r1, #13]
9001f20c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f210:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001f214:	9310      	str	r3, [sp, #64]	; 0x40
9001f216:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001f21a:	930c      	str	r3, [sp, #48]	; 0x30
9001f21c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001f220:	798f      	ldrb	r7, [r1, #6]
9001f222:	431f      	orrs	r7, r3
9001f224:	f000 8195 	beq.w	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f228:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001f22c:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001f230:	f891 9007 	ldrb.w	r9, [r1, #7]
9001f234:	ea59 0903 	orrs.w	r9, r9, r3
9001f238:	f000 818b 	beq.w	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f23c:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001f240:	b29b      	uxth	r3, r3
9001f242:	2d00      	cmp	r5, #0
9001f244:	f000 812e 	beq.w	9001f4a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001f248:	1aed      	subs	r5, r5, r3
9001f24a:	b2ad      	uxth	r5, r5
9001f24c:	042b      	lsls	r3, r5, #16
9001f24e:	d502      	bpl.n	9001f256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f250:	1b64      	subs	r4, r4, r5
9001f252:	2500      	movs	r5, #0
9001f254:	b224      	sxth	r4, r4
9001f256:	f9b2 1000 	ldrsh.w	r1, [r2]
9001f25a:	a814      	add	r0, sp, #80	; 0x50
9001f25c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001f260:	428c      	cmp	r4, r1
9001f262:	b28b      	uxth	r3, r1
9001f264:	bfbf      	itttt	lt
9001f266:	18ed      	addlt	r5, r5, r3
9001f268:	1b2c      	sublt	r4, r5, r4
9001f26a:	b2a5      	uxthlt	r5, r4
9001f26c:	460c      	movlt	r4, r1
9001f26e:	8891      	ldrh	r1, [r2, #4]
9001f270:	440b      	add	r3, r1
9001f272:	4621      	mov	r1, r4
9001f274:	b21b      	sxth	r3, r3
9001f276:	930f      	str	r3, [sp, #60]	; 0x3c
9001f278:	88d3      	ldrh	r3, [r2, #6]
9001f27a:	8852      	ldrh	r2, [r2, #2]
9001f27c:	4413      	add	r3, r2
9001f27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f280:	b21b      	sxth	r3, r3
9001f282:	930d      	str	r3, [sp, #52]	; 0x34
9001f284:	4bbd      	ldr	r3, [pc, #756]	; (9001f57c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001f286:	f893 b000 	ldrb.w	fp, [r3]
9001f28a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001f28e:	f1dc 0300 	rsbs	r3, ip, #0
9001f292:	eb43 030c 	adc.w	r3, r3, ip
9001f296:	930e      	str	r3, [sp, #56]	; 0x38
9001f298:	4653      	mov	r3, sl
9001f29a:	f7f8 f9ed 	bl	90017678 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001f29e:	4621      	mov	r1, r4
9001f2a0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001f2a4:	4653      	mov	r3, sl
9001f2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f2a8:	a814      	add	r0, sp, #80	; 0x50
9001f2aa:	f7f8 fa02 	bl	900176b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001f2ae:	a918      	add	r1, sp, #96	; 0x60
9001f2b0:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001f2b4:	a817      	add	r0, sp, #92	; 0x5c
9001f2b6:	f7f8 fb23 	bl	90017900 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001f2ba:	f1ba 0f00 	cmp.w	sl, #0
9001f2be:	f040 80f4 	bne.w	9001f4aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001f2c2:	f1bb 0f01 	cmp.w	fp, #1
9001f2c6:	f040 80f8 	bne.w	9001f4ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001f2ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f2cc:	2b00      	cmp	r3, #0
9001f2ce:	f040 8145 	bne.w	9001f55c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001f2d2:	b2ba      	uxth	r2, r7
9001f2d4:	b905      	cbnz	r5, 9001f2d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001f2d6:	b16e      	cbz	r6, 9001f2f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001f2d8:	fb06 5302 	mla	r3, r6, r2, r5
9001f2dc:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001f2de:	4631      	mov	r1, r6
9001f2e0:	fb08 f303 	mul.w	r3, r8, r3
9001f2e4:	f003 0607 	and.w	r6, r3, #7
9001f2e8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001f2ec:	9328      	str	r3, [sp, #160]	; 0xa0
9001f2ee:	eba9 0301 	sub.w	r3, r9, r1
9001f2f2:	930a      	str	r3, [sp, #40]	; 0x28
9001f2f4:	4651      	mov	r1, sl
9001f2f6:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f2f8:	f7ff ff1c 	bl	9001f134 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001f2fc:	4681      	mov	r9, r0
9001f2fe:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f300:	f7ff ff42 	bl	9001f188 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001f304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f306:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f308:	4683      	mov	fp, r0
9001f30a:	eba3 0a01 	sub.w	sl, r3, r1
9001f30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f310:	459a      	cmp	sl, r3
9001f312:	bfa8      	it	ge
9001f314:	469a      	movge	sl, r3
9001f316:	f1ba 0f00 	cmp.w	sl, #0
9001f31a:	f340 811a 	ble.w	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f31e:	1b64      	subs	r4, r4, r5
9001f320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f322:	1b1c      	subs	r4, r3, r4
9001f324:	42bc      	cmp	r4, r7
9001f326:	bfd4      	ite	le
9001f328:	ebc5 0504 	rsble	r5, r5, r4
9001f32c:	ebc5 0507 	rsbgt	r5, r5, r7
9001f330:	2d00      	cmp	r5, #0
9001f332:	f340 810e 	ble.w	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f336:	1b52      	subs	r2, r2, r5
9001f338:	fb08 f302 	mul.w	r3, r8, r2
9001f33c:	930f      	str	r3, [sp, #60]	; 0x3c
9001f33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f340:	2b00      	cmp	r3, #0
9001f342:	f040 8116 	bne.w	9001f572 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001f346:	4b8e      	ldr	r3, [pc, #568]	; (9001f580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001f348:	6818      	ldr	r0, [r3, #0]
9001f34a:	6803      	ldr	r3, [r0, #0]
9001f34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f34e:	4798      	blx	r3
9001f350:	2301      	movs	r3, #1
9001f352:	4a8c      	ldr	r2, [pc, #560]	; (9001f584 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001f354:	fa03 f308 	lsl.w	r3, r3, r8
9001f358:	8811      	ldrh	r1, [r2, #0]
9001f35a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001f35e:	3b01      	subs	r3, #1
9001f360:	b2db      	uxtb	r3, r3
9001f362:	930e      	str	r3, [sp, #56]	; 0x38
9001f364:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001f368:	fb01 2303 	mla	r3, r1, r3, r2
9001f36c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001f370:	930a      	str	r3, [sp, #40]	; 0x28
9001f372:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f374:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001f378:	9313      	str	r3, [sp, #76]	; 0x4c
9001f37a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f37c:	0a19      	lsrs	r1, r3, #8
9001f37e:	b2cb      	uxtb	r3, r1
9001f380:	9312      	str	r3, [sp, #72]	; 0x48
9001f382:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f384:	b2db      	uxtb	r3, r3
9001f386:	9311      	str	r3, [sp, #68]	; 0x44
9001f388:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f38a:	095a      	lsrs	r2, r3, #5
9001f38c:	4b7e      	ldr	r3, [pc, #504]	; (9001f588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001f38e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f392:	400b      	ands	r3, r1
9001f394:	4313      	orrs	r3, r2
9001f396:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001f398:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f39c:	4313      	orrs	r3, r2
9001f39e:	b29b      	uxth	r3, r3
9001f3a0:	9310      	str	r3, [sp, #64]	; 0x40
9001f3a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f3a4:	781a      	ldrb	r2, [r3, #0]
9001f3a6:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f3aa:	fb05 b919 	mls	r9, r5, r9, fp
9001f3ae:	4132      	asrs	r2, r6
9001f3b0:	fb03 fb05 	mul.w	fp, r3, r5
9001f3b4:	930d      	str	r3, [sp, #52]	; 0x34
9001f3b6:	b2d2      	uxtb	r2, r2
9001f3b8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001f3bc:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001f3c0:	f0c0 80f5 	bcc.w	9001f5ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001f3c4:	46ae      	mov	lr, r5
9001f3c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001f3ca:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001f3ce:	f0c0 80dd 	bcc.w	9001f58c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001f3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f3d4:	4013      	ands	r3, r2
9001f3d6:	d055      	beq.n	9001f484 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001f3d8:	20ff      	movs	r0, #255	; 0xff
9001f3da:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f3dc:	fb90 f1f1 	sdiv	r1, r0, r1
9001f3e0:	434b      	muls	r3, r1
9001f3e2:	2bfe      	cmp	r3, #254	; 0xfe
9001f3e4:	dd03      	ble.n	9001f3ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001f3e6:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f3e8:	4281      	cmp	r1, r0
9001f3ea:	f000 80c4 	beq.w	9001f576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001f3ee:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f3f0:	f8bc 4000 	ldrh.w	r4, [ip]
9001f3f4:	fb11 f303 	smulbb	r3, r1, r3
9001f3f8:	1220      	asrs	r0, r4, #8
9001f3fa:	b29b      	uxth	r3, r3
9001f3fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f400:	1c59      	adds	r1, r3, #1
9001f402:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001f406:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001f40a:	10e1      	asrs	r1, r4, #3
9001f40c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f410:	00e4      	lsls	r4, r4, #3
9001f412:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f416:	b29f      	uxth	r7, r3
9001f418:	43db      	mvns	r3, r3
9001f41a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001f41e:	b2db      	uxtb	r3, r3
9001f420:	b2e4      	uxtb	r4, r4
9001f422:	9309      	str	r3, [sp, #36]	; 0x24
9001f424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f426:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001f42a:	fb13 f907 	smulbb	r9, r3, r7
9001f42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f430:	fb00 9003 	mla	r0, r0, r3, r9
9001f434:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001f436:	fb13 f907 	smulbb	r9, r3, r7
9001f43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f43c:	b280      	uxth	r0, r0
9001f43e:	fb01 9103 	mla	r1, r1, r3, r9
9001f442:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f444:	fb13 f707 	smulbb	r7, r3, r7
9001f448:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f44a:	b289      	uxth	r1, r1
9001f44c:	fb04 7403 	mla	r4, r4, r3, r7
9001f450:	1c43      	adds	r3, r0, #1
9001f452:	b2a4      	uxth	r4, r4
9001f454:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001f458:	f104 0901 	add.w	r9, r4, #1
9001f45c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001f460:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001f464:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001f468:	ea49 0000 	orr.w	r0, r9, r0
9001f46c:	f101 0901 	add.w	r9, r1, #1
9001f470:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001f474:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f478:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f47c:	ea40 0009 	orr.w	r0, r0, r9
9001f480:	f8ac 0000 	strh.w	r0, [ip]
9001f484:	4446      	add	r6, r8
9001f486:	b2b6      	uxth	r6, r6
9001f488:	2e07      	cmp	r6, #7
9001f48a:	bf89      	itett	hi
9001f48c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001f48e:	fa42 f208 	asrls.w	r2, r2, r8
9001f492:	2600      	movhi	r6, #0
9001f494:	785a      	ldrbhi	r2, [r3, #1]
9001f496:	bf8a      	itet	hi
9001f498:	3301      	addhi	r3, #1
9001f49a:	b2d2      	uxtbls	r2, r2
9001f49c:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001f49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f4a0:	449c      	add	ip, r3
9001f4a2:	e792      	b.n	9001f3ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001f4a4:	441c      	add	r4, r3
9001f4a6:	b224      	sxth	r4, r4
9001f4a8:	e6d5      	b.n	9001f256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f4aa:	f1ba 0f01 	cmp.w	sl, #1
9001f4ae:	f47f af0c 	bne.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f4b2:	f1bb 0f01 	cmp.w	fp, #1
9001f4b6:	f47f af08 	bne.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f4ba:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001f580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001f4be:	f8db 0000 	ldr.w	r0, [fp]
9001f4c2:	6803      	ldr	r3, [r0, #0]
9001f4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f4c6:	4798      	blx	r3
9001f4c8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001f4cc:	465a      	mov	r2, fp
9001f4ce:	d006      	beq.n	9001f4de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f4d0:	f1b8 0f04 	cmp.w	r8, #4
9001f4d4:	d140      	bne.n	9001f558 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001f4d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f4d8:	3300      	adds	r3, #0
9001f4da:	bf18      	it	ne
9001f4dc:	2301      	movne	r3, #1
9001f4de:	0580      	lsls	r0, r0, #22
9001f4e0:	d56e      	bpl.n	9001f5c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f4e2:	f1b8 0f08 	cmp.w	r8, #8
9001f4e6:	d16b      	bne.n	9001f5c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f4e8:	2b00      	cmp	r3, #0
9001f4ea:	bf0c      	ite	eq
9001f4ec:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001f4f0:	f44f 7180 	movne.w	r1, #256	; 0x100
9001f4f4:	2d00      	cmp	r5, #0
9001f4f6:	f47f aee8 	bne.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f4fa:	2e00      	cmp	r6, #0
9001f4fc:	f47f aee5 	bne.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f500:	19e3      	adds	r3, r4, r7
9001f502:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f504:	4283      	cmp	r3, r0
9001f506:	f73f aee0 	bgt.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f50c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001f50e:	444b      	add	r3, r9
9001f510:	4283      	cmp	r3, r0
9001f512:	f73f aeda 	bgt.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f516:	b2bf      	uxth	r7, r7
9001f518:	f1b8 0f08 	cmp.w	r8, #8
9001f51c:	6810      	ldr	r0, [r2, #0]
9001f51e:	f04f 0500 	mov.w	r5, #0
9001f522:	bf18      	it	ne
9001f524:	3701      	addne	r7, #1
9001f526:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001f52a:	6804      	ldr	r4, [r0, #0]
9001f52c:	bf18      	it	ne
9001f52e:	f027 0701 	bicne.w	r7, r7, #1
9001f532:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001f536:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001f53a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f53c:	bf18      	it	ne
9001f53e:	b2bf      	uxthne	r7, r7
9001f540:	9104      	str	r1, [sp, #16]
9001f542:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001f544:	e9cd 7900 	strd	r7, r9, [sp]
9001f548:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001f54c:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001f54e:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001f550:	47a0      	blx	r4
9001f552:	b019      	add	sp, #100	; 0x64
9001f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f558:	2300      	movs	r3, #0
9001f55a:	e7c0      	b.n	9001f4de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f55c:	2208      	movs	r2, #8
9001f55e:	fb92 f3f8 	sdiv	r3, r2, r8
9001f562:	1e5a      	subs	r2, r3, #1
9001f564:	443a      	add	r2, r7
9001f566:	fb92 f2f3 	sdiv	r2, r2, r3
9001f56a:	fb12 f203 	smulbb	r2, r2, r3
9001f56e:	b292      	uxth	r2, r2
9001f570:	e6b0      	b.n	9001f2d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001f572:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f574:	e6ec      	b.n	9001f350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001f576:	9810      	ldr	r0, [sp, #64]	; 0x40
9001f578:	e782      	b.n	9001f480 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001f57a:	bf00      	nop
9001f57c:	2402818c 	.word	0x2402818c
9001f580:	24028194 	.word	0x24028194
9001f584:	2402818e 	.word	0x2402818e
9001f588:	00fff800 	.word	0x00fff800
9001f58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f58e:	b153      	cbz	r3, 9001f5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001f590:	441e      	add	r6, r3
9001f592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f594:	b2b6      	uxth	r6, r6
9001f596:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001f59a:	f006 0607 	and.w	r6, r6, #7
9001f59e:	781a      	ldrb	r2, [r3, #0]
9001f5a0:	9328      	str	r3, [sp, #160]	; 0xa0
9001f5a2:	4132      	asrs	r2, r6
9001f5a4:	b2d2      	uxtb	r2, r2
9001f5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f5a8:	445b      	add	r3, fp
9001f5aa:	930a      	str	r3, [sp, #40]	; 0x28
9001f5ac:	e706      	b.n	9001f3bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001f5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f5b0:	2b00      	cmp	r3, #0
9001f5b2:	d1ce      	bne.n	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f5b4:	4b05      	ldr	r3, [pc, #20]	; (9001f5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001f5b6:	6818      	ldr	r0, [r3, #0]
9001f5b8:	6803      	ldr	r3, [r0, #0]
9001f5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f5bc:	4798      	blx	r3
9001f5be:	e7c8      	b.n	9001f552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f5c0:	2b00      	cmp	r3, #0
9001f5c2:	f43f ae82 	beq.w	9001f2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f5c6:	f44f 7180 	mov.w	r1, #256	; 0x100
9001f5ca:	e793      	b.n	9001f4f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001f5cc:	24028194 	.word	0x24028194

9001f5d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001f5d0:	b538      	push	{r3, r4, r5, lr}
9001f5d2:	4c15      	ldr	r4, [pc, #84]	; (9001f628 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001f5d4:	4605      	mov	r5, r0
9001f5d6:	7823      	ldrb	r3, [r4, #0]
9001f5d8:	f3bf 8f5b 	dmb	ish
9001f5dc:	07da      	lsls	r2, r3, #31
9001f5de:	d40b      	bmi.n	9001f5f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001f5e0:	4620      	mov	r0, r4
9001f5e2:	f007 fd8a 	bl	900270fa <__cxa_guard_acquire>
9001f5e6:	b138      	cbz	r0, 9001f5f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001f5e8:	4620      	mov	r0, r4
9001f5ea:	f007 fd92 	bl	90027112 <__cxa_guard_release>
9001f5ee:	4a0f      	ldr	r2, [pc, #60]	; (9001f62c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001f5f0:	490f      	ldr	r1, [pc, #60]	; (9001f630 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001f5f2:	4810      	ldr	r0, [pc, #64]	; (9001f634 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001f5f4:	f007 fd7a 	bl	900270ec <__aeabi_atexit>
9001f5f8:	4c0f      	ldr	r4, [pc, #60]	; (9001f638 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001f5fa:	7823      	ldrb	r3, [r4, #0]
9001f5fc:	f3bf 8f5b 	dmb	ish
9001f600:	07db      	lsls	r3, r3, #31
9001f602:	d40b      	bmi.n	9001f61c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001f604:	4620      	mov	r0, r4
9001f606:	f007 fd78 	bl	900270fa <__cxa_guard_acquire>
9001f60a:	b138      	cbz	r0, 9001f61c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001f60c:	4620      	mov	r0, r4
9001f60e:	f007 fd80 	bl	90027112 <__cxa_guard_release>
9001f612:	4a06      	ldr	r2, [pc, #24]	; (9001f62c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001f614:	4909      	ldr	r1, [pc, #36]	; (9001f63c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001f616:	480a      	ldr	r0, [pc, #40]	; (9001f640 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001f618:	f007 fd68 	bl	900270ec <__aeabi_atexit>
9001f61c:	4b05      	ldr	r3, [pc, #20]	; (9001f634 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001f61e:	612b      	str	r3, [r5, #16]
9001f620:	4b07      	ldr	r3, [pc, #28]	; (9001f640 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001f622:	616b      	str	r3, [r5, #20]
9001f624:	bd38      	pop	{r3, r4, r5, pc}
9001f626:	bf00      	nop
9001f628:	24028268 	.word	0x24028268
9001f62c:	24000000 	.word	0x24000000
9001f630:	9001d7dd 	.word	0x9001d7dd
9001f634:	240000ac 	.word	0x240000ac
9001f638:	2402826c 	.word	0x2402826c
9001f63c:	9001d7db 	.word	0x9001d7db
9001f640:	240000b0 	.word	0x240000b0

9001f644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001f644:	b538      	push	{r3, r4, r5, lr}
9001f646:	4c15      	ldr	r4, [pc, #84]	; (9001f69c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001f648:	4605      	mov	r5, r0
9001f64a:	7823      	ldrb	r3, [r4, #0]
9001f64c:	f3bf 8f5b 	dmb	ish
9001f650:	07da      	lsls	r2, r3, #31
9001f652:	d40b      	bmi.n	9001f66c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001f654:	4620      	mov	r0, r4
9001f656:	f007 fd50 	bl	900270fa <__cxa_guard_acquire>
9001f65a:	b138      	cbz	r0, 9001f66c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001f65c:	4620      	mov	r0, r4
9001f65e:	f007 fd58 	bl	90027112 <__cxa_guard_release>
9001f662:	4a0f      	ldr	r2, [pc, #60]	; (9001f6a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001f664:	490f      	ldr	r1, [pc, #60]	; (9001f6a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001f666:	4810      	ldr	r0, [pc, #64]	; (9001f6a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001f668:	f007 fd40 	bl	900270ec <__aeabi_atexit>
9001f66c:	4c0f      	ldr	r4, [pc, #60]	; (9001f6ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001f66e:	7823      	ldrb	r3, [r4, #0]
9001f670:	f3bf 8f5b 	dmb	ish
9001f674:	07db      	lsls	r3, r3, #31
9001f676:	d40b      	bmi.n	9001f690 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001f678:	4620      	mov	r0, r4
9001f67a:	f007 fd3e 	bl	900270fa <__cxa_guard_acquire>
9001f67e:	b138      	cbz	r0, 9001f690 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001f680:	4620      	mov	r0, r4
9001f682:	f007 fd46 	bl	90027112 <__cxa_guard_release>
9001f686:	4a06      	ldr	r2, [pc, #24]	; (9001f6a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001f688:	4909      	ldr	r1, [pc, #36]	; (9001f6b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001f68a:	480a      	ldr	r0, [pc, #40]	; (9001f6b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001f68c:	f007 fd2e 	bl	900270ec <__aeabi_atexit>
9001f690:	4b05      	ldr	r3, [pc, #20]	; (9001f6a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001f692:	60ab      	str	r3, [r5, #8]
9001f694:	4b07      	ldr	r3, [pc, #28]	; (9001f6b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001f696:	60eb      	str	r3, [r5, #12]
9001f698:	bd38      	pop	{r3, r4, r5, pc}
9001f69a:	bf00      	nop
9001f69c:	24028240 	.word	0x24028240
9001f6a0:	24000000 	.word	0x24000000
9001f6a4:	9001d7e1 	.word	0x9001d7e1
9001f6a8:	24000084 	.word	0x24000084
9001f6ac:	24028244 	.word	0x24028244
9001f6b0:	9001d7df 	.word	0x9001d7df
9001f6b4:	24000088 	.word	0x24000088

9001f6b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001f6b8:	b510      	push	{r4, lr}
9001f6ba:	4604      	mov	r4, r0
9001f6bc:	f7ff ff88 	bl	9001f5d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001f6c0:	4620      	mov	r0, r4
9001f6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f6c6:	f7ff bfbd 	b.w	9001f644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001f6cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001f6cc:	b538      	push	{r3, r4, r5, lr}
9001f6ce:	4c15      	ldr	r4, [pc, #84]	; (9001f724 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001f6d0:	4605      	mov	r5, r0
9001f6d2:	7823      	ldrb	r3, [r4, #0]
9001f6d4:	f3bf 8f5b 	dmb	ish
9001f6d8:	07da      	lsls	r2, r3, #31
9001f6da:	d40b      	bmi.n	9001f6f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001f6dc:	4620      	mov	r0, r4
9001f6de:	f007 fd0c 	bl	900270fa <__cxa_guard_acquire>
9001f6e2:	b138      	cbz	r0, 9001f6f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001f6e4:	4620      	mov	r0, r4
9001f6e6:	f007 fd14 	bl	90027112 <__cxa_guard_release>
9001f6ea:	4a0f      	ldr	r2, [pc, #60]	; (9001f728 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001f6ec:	490f      	ldr	r1, [pc, #60]	; (9001f72c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001f6ee:	4810      	ldr	r0, [pc, #64]	; (9001f730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001f6f0:	f007 fcfc 	bl	900270ec <__aeabi_atexit>
9001f6f4:	4c0f      	ldr	r4, [pc, #60]	; (9001f734 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001f6f6:	7823      	ldrb	r3, [r4, #0]
9001f6f8:	f3bf 8f5b 	dmb	ish
9001f6fc:	07db      	lsls	r3, r3, #31
9001f6fe:	d40b      	bmi.n	9001f718 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001f700:	4620      	mov	r0, r4
9001f702:	f007 fcfa 	bl	900270fa <__cxa_guard_acquire>
9001f706:	b138      	cbz	r0, 9001f718 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001f708:	4620      	mov	r0, r4
9001f70a:	f007 fd02 	bl	90027112 <__cxa_guard_release>
9001f70e:	4a06      	ldr	r2, [pc, #24]	; (9001f728 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001f710:	4909      	ldr	r1, [pc, #36]	; (9001f738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001f712:	480a      	ldr	r0, [pc, #40]	; (9001f73c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001f714:	f007 fcea 	bl	900270ec <__aeabi_atexit>
9001f718:	4b05      	ldr	r3, [pc, #20]	; (9001f730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001f71a:	622b      	str	r3, [r5, #32]
9001f71c:	4b07      	ldr	r3, [pc, #28]	; (9001f73c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001f71e:	626b      	str	r3, [r5, #36]	; 0x24
9001f720:	bd38      	pop	{r3, r4, r5, pc}
9001f722:	bf00      	nop
9001f724:	24028270 	.word	0x24028270
9001f728:	24000000 	.word	0x24000000
9001f72c:	9001d7d5 	.word	0x9001d7d5
9001f730:	240000b4 	.word	0x240000b4
9001f734:	24028274 	.word	0x24028274
9001f738:	9001d7d3 	.word	0x9001d7d3
9001f73c:	240000b8 	.word	0x240000b8

9001f740 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001f740:	b538      	push	{r3, r4, r5, lr}
9001f742:	4c15      	ldr	r4, [pc, #84]	; (9001f798 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001f744:	4605      	mov	r5, r0
9001f746:	7823      	ldrb	r3, [r4, #0]
9001f748:	f3bf 8f5b 	dmb	ish
9001f74c:	07da      	lsls	r2, r3, #31
9001f74e:	d40b      	bmi.n	9001f768 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001f750:	4620      	mov	r0, r4
9001f752:	f007 fcd2 	bl	900270fa <__cxa_guard_acquire>
9001f756:	b138      	cbz	r0, 9001f768 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001f758:	4620      	mov	r0, r4
9001f75a:	f007 fcda 	bl	90027112 <__cxa_guard_release>
9001f75e:	4a0f      	ldr	r2, [pc, #60]	; (9001f79c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001f760:	490f      	ldr	r1, [pc, #60]	; (9001f7a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001f762:	4810      	ldr	r0, [pc, #64]	; (9001f7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001f764:	f007 fcc2 	bl	900270ec <__aeabi_atexit>
9001f768:	4c0f      	ldr	r4, [pc, #60]	; (9001f7a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001f76a:	7823      	ldrb	r3, [r4, #0]
9001f76c:	f3bf 8f5b 	dmb	ish
9001f770:	07db      	lsls	r3, r3, #31
9001f772:	d40b      	bmi.n	9001f78c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001f774:	4620      	mov	r0, r4
9001f776:	f007 fcc0 	bl	900270fa <__cxa_guard_acquire>
9001f77a:	b138      	cbz	r0, 9001f78c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001f77c:	4620      	mov	r0, r4
9001f77e:	f007 fcc8 	bl	90027112 <__cxa_guard_release>
9001f782:	4a06      	ldr	r2, [pc, #24]	; (9001f79c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001f784:	4909      	ldr	r1, [pc, #36]	; (9001f7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001f786:	480a      	ldr	r0, [pc, #40]	; (9001f7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001f788:	f007 fcb0 	bl	900270ec <__aeabi_atexit>
9001f78c:	4b05      	ldr	r3, [pc, #20]	; (9001f7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001f78e:	61ab      	str	r3, [r5, #24]
9001f790:	4b07      	ldr	r3, [pc, #28]	; (9001f7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001f792:	61eb      	str	r3, [r5, #28]
9001f794:	bd38      	pop	{r3, r4, r5, pc}
9001f796:	bf00      	nop
9001f798:	24028248 	.word	0x24028248
9001f79c:	24000000 	.word	0x24000000
9001f7a0:	9001d7d9 	.word	0x9001d7d9
9001f7a4:	2400008c 	.word	0x2400008c
9001f7a8:	2402824c 	.word	0x2402824c
9001f7ac:	9001d7d7 	.word	0x9001d7d7
9001f7b0:	24000090 	.word	0x24000090

9001f7b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001f7b4:	b510      	push	{r4, lr}
9001f7b6:	4604      	mov	r4, r0
9001f7b8:	f7ff ff88 	bl	9001f6cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001f7bc:	4620      	mov	r0, r4
9001f7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f7c2:	f7ff bfbd 	b.w	9001f740 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001f7c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001f7c8:	b538      	push	{r3, r4, r5, lr}
9001f7ca:	4c15      	ldr	r4, [pc, #84]	; (9001f820 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001f7cc:	4605      	mov	r5, r0
9001f7ce:	7823      	ldrb	r3, [r4, #0]
9001f7d0:	f3bf 8f5b 	dmb	ish
9001f7d4:	07da      	lsls	r2, r3, #31
9001f7d6:	d40b      	bmi.n	9001f7f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001f7d8:	4620      	mov	r0, r4
9001f7da:	f007 fc8e 	bl	900270fa <__cxa_guard_acquire>
9001f7de:	b138      	cbz	r0, 9001f7f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001f7e0:	4620      	mov	r0, r4
9001f7e2:	f007 fc96 	bl	90027112 <__cxa_guard_release>
9001f7e6:	4a0f      	ldr	r2, [pc, #60]	; (9001f824 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001f7e8:	490f      	ldr	r1, [pc, #60]	; (9001f828 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001f7ea:	4810      	ldr	r0, [pc, #64]	; (9001f82c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001f7ec:	f007 fc7e 	bl	900270ec <__aeabi_atexit>
9001f7f0:	4c0f      	ldr	r4, [pc, #60]	; (9001f830 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001f7f2:	7823      	ldrb	r3, [r4, #0]
9001f7f4:	f3bf 8f5b 	dmb	ish
9001f7f8:	07db      	lsls	r3, r3, #31
9001f7fa:	d40b      	bmi.n	9001f814 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001f7fc:	4620      	mov	r0, r4
9001f7fe:	f007 fc7c 	bl	900270fa <__cxa_guard_acquire>
9001f802:	b138      	cbz	r0, 9001f814 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001f804:	4620      	mov	r0, r4
9001f806:	f007 fc84 	bl	90027112 <__cxa_guard_release>
9001f80a:	4a06      	ldr	r2, [pc, #24]	; (9001f824 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001f80c:	4909      	ldr	r1, [pc, #36]	; (9001f834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001f80e:	480a      	ldr	r0, [pc, #40]	; (9001f838 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001f810:	f007 fc6c 	bl	900270ec <__aeabi_atexit>
9001f814:	4b05      	ldr	r3, [pc, #20]	; (9001f82c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001f816:	632b      	str	r3, [r5, #48]	; 0x30
9001f818:	4b07      	ldr	r3, [pc, #28]	; (9001f838 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001f81a:	636b      	str	r3, [r5, #52]	; 0x34
9001f81c:	bd38      	pop	{r3, r4, r5, pc}
9001f81e:	bf00      	nop
9001f820:	24028280 	.word	0x24028280
9001f824:	24000000 	.word	0x24000000
9001f828:	9001d7cd 	.word	0x9001d7cd
9001f82c:	240000c4 	.word	0x240000c4
9001f830:	24028284 	.word	0x24028284
9001f834:	9001d7cb 	.word	0x9001d7cb
9001f838:	240000c8 	.word	0x240000c8

9001f83c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001f83c:	b538      	push	{r3, r4, r5, lr}
9001f83e:	4c15      	ldr	r4, [pc, #84]	; (9001f894 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001f840:	4605      	mov	r5, r0
9001f842:	7823      	ldrb	r3, [r4, #0]
9001f844:	f3bf 8f5b 	dmb	ish
9001f848:	07da      	lsls	r2, r3, #31
9001f84a:	d40b      	bmi.n	9001f864 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001f84c:	4620      	mov	r0, r4
9001f84e:	f007 fc54 	bl	900270fa <__cxa_guard_acquire>
9001f852:	b138      	cbz	r0, 9001f864 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001f854:	4620      	mov	r0, r4
9001f856:	f007 fc5c 	bl	90027112 <__cxa_guard_release>
9001f85a:	4a0f      	ldr	r2, [pc, #60]	; (9001f898 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001f85c:	490f      	ldr	r1, [pc, #60]	; (9001f89c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001f85e:	4810      	ldr	r0, [pc, #64]	; (9001f8a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001f860:	f007 fc44 	bl	900270ec <__aeabi_atexit>
9001f864:	4c0f      	ldr	r4, [pc, #60]	; (9001f8a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001f866:	7823      	ldrb	r3, [r4, #0]
9001f868:	f3bf 8f5b 	dmb	ish
9001f86c:	07db      	lsls	r3, r3, #31
9001f86e:	d40b      	bmi.n	9001f888 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001f870:	4620      	mov	r0, r4
9001f872:	f007 fc42 	bl	900270fa <__cxa_guard_acquire>
9001f876:	b138      	cbz	r0, 9001f888 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001f878:	4620      	mov	r0, r4
9001f87a:	f007 fc4a 	bl	90027112 <__cxa_guard_release>
9001f87e:	4a06      	ldr	r2, [pc, #24]	; (9001f898 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001f880:	4909      	ldr	r1, [pc, #36]	; (9001f8a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001f882:	480a      	ldr	r0, [pc, #40]	; (9001f8ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001f884:	f007 fc32 	bl	900270ec <__aeabi_atexit>
9001f888:	4b05      	ldr	r3, [pc, #20]	; (9001f8a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001f88a:	62ab      	str	r3, [r5, #40]	; 0x28
9001f88c:	4b07      	ldr	r3, [pc, #28]	; (9001f8ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001f88e:	62eb      	str	r3, [r5, #44]	; 0x2c
9001f890:	bd38      	pop	{r3, r4, r5, pc}
9001f892:	bf00      	nop
9001f894:	24028250 	.word	0x24028250
9001f898:	24000000 	.word	0x24000000
9001f89c:	9001d7d1 	.word	0x9001d7d1
9001f8a0:	24000094 	.word	0x24000094
9001f8a4:	24028254 	.word	0x24028254
9001f8a8:	9001d7cf 	.word	0x9001d7cf
9001f8ac:	24000098 	.word	0x24000098

9001f8b0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001f8b0:	b510      	push	{r4, lr}
9001f8b2:	4604      	mov	r4, r0
9001f8b4:	f7ff ff88 	bl	9001f7c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001f8b8:	4620      	mov	r0, r4
9001f8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f8be:	f7ff bfbd 	b.w	9001f83c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001f8c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001f8c4:	b538      	push	{r3, r4, r5, lr}
9001f8c6:	4c15      	ldr	r4, [pc, #84]	; (9001f91c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001f8c8:	4605      	mov	r5, r0
9001f8ca:	7823      	ldrb	r3, [r4, #0]
9001f8cc:	f3bf 8f5b 	dmb	ish
9001f8d0:	07da      	lsls	r2, r3, #31
9001f8d2:	d40b      	bmi.n	9001f8ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001f8d4:	4620      	mov	r0, r4
9001f8d6:	f007 fc10 	bl	900270fa <__cxa_guard_acquire>
9001f8da:	b138      	cbz	r0, 9001f8ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001f8dc:	4620      	mov	r0, r4
9001f8de:	f007 fc18 	bl	90027112 <__cxa_guard_release>
9001f8e2:	4a0f      	ldr	r2, [pc, #60]	; (9001f920 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001f8e4:	490f      	ldr	r1, [pc, #60]	; (9001f924 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001f8e6:	4810      	ldr	r0, [pc, #64]	; (9001f928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001f8e8:	f007 fc00 	bl	900270ec <__aeabi_atexit>
9001f8ec:	4c0f      	ldr	r4, [pc, #60]	; (9001f92c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001f8ee:	7823      	ldrb	r3, [r4, #0]
9001f8f0:	f3bf 8f5b 	dmb	ish
9001f8f4:	07db      	lsls	r3, r3, #31
9001f8f6:	d40b      	bmi.n	9001f910 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001f8f8:	4620      	mov	r0, r4
9001f8fa:	f007 fbfe 	bl	900270fa <__cxa_guard_acquire>
9001f8fe:	b138      	cbz	r0, 9001f910 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001f900:	4620      	mov	r0, r4
9001f902:	f007 fc06 	bl	90027112 <__cxa_guard_release>
9001f906:	4a06      	ldr	r2, [pc, #24]	; (9001f920 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001f908:	4909      	ldr	r1, [pc, #36]	; (9001f930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001f90a:	480a      	ldr	r0, [pc, #40]	; (9001f934 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001f90c:	f007 fbee 	bl	900270ec <__aeabi_atexit>
9001f910:	4b05      	ldr	r3, [pc, #20]	; (9001f928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001f912:	652b      	str	r3, [r5, #80]	; 0x50
9001f914:	4b07      	ldr	r3, [pc, #28]	; (9001f934 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001f916:	656b      	str	r3, [r5, #84]	; 0x54
9001f918:	bd38      	pop	{r3, r4, r5, pc}
9001f91a:	bf00      	nop
9001f91c:	24028288 	.word	0x24028288
9001f920:	24000000 	.word	0x24000000
9001f924:	9001d7bd 	.word	0x9001d7bd
9001f928:	240000cc 	.word	0x240000cc
9001f92c:	2402828c 	.word	0x2402828c
9001f930:	9001d7bb 	.word	0x9001d7bb
9001f934:	240000d0 	.word	0x240000d0

9001f938 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001f938:	b538      	push	{r3, r4, r5, lr}
9001f93a:	4c15      	ldr	r4, [pc, #84]	; (9001f990 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001f93c:	4605      	mov	r5, r0
9001f93e:	7823      	ldrb	r3, [r4, #0]
9001f940:	f3bf 8f5b 	dmb	ish
9001f944:	07da      	lsls	r2, r3, #31
9001f946:	d40b      	bmi.n	9001f960 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001f948:	4620      	mov	r0, r4
9001f94a:	f007 fbd6 	bl	900270fa <__cxa_guard_acquire>
9001f94e:	b138      	cbz	r0, 9001f960 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001f950:	4620      	mov	r0, r4
9001f952:	f007 fbde 	bl	90027112 <__cxa_guard_release>
9001f956:	4a0f      	ldr	r2, [pc, #60]	; (9001f994 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001f958:	490f      	ldr	r1, [pc, #60]	; (9001f998 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001f95a:	4810      	ldr	r0, [pc, #64]	; (9001f99c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001f95c:	f007 fbc6 	bl	900270ec <__aeabi_atexit>
9001f960:	4c0f      	ldr	r4, [pc, #60]	; (9001f9a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001f962:	7823      	ldrb	r3, [r4, #0]
9001f964:	f3bf 8f5b 	dmb	ish
9001f968:	07db      	lsls	r3, r3, #31
9001f96a:	d40b      	bmi.n	9001f984 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001f96c:	4620      	mov	r0, r4
9001f96e:	f007 fbc4 	bl	900270fa <__cxa_guard_acquire>
9001f972:	b138      	cbz	r0, 9001f984 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001f974:	4620      	mov	r0, r4
9001f976:	f007 fbcc 	bl	90027112 <__cxa_guard_release>
9001f97a:	4a06      	ldr	r2, [pc, #24]	; (9001f994 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001f97c:	4909      	ldr	r1, [pc, #36]	; (9001f9a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001f97e:	480a      	ldr	r0, [pc, #40]	; (9001f9a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001f980:	f007 fbb4 	bl	900270ec <__aeabi_atexit>
9001f984:	4b05      	ldr	r3, [pc, #20]	; (9001f99c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001f986:	64ab      	str	r3, [r5, #72]	; 0x48
9001f988:	4b07      	ldr	r3, [pc, #28]	; (9001f9a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001f98a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001f98c:	bd38      	pop	{r3, r4, r5, pc}
9001f98e:	bf00      	nop
9001f990:	24028290 	.word	0x24028290
9001f994:	24000000 	.word	0x24000000
9001f998:	9001d7c1 	.word	0x9001d7c1
9001f99c:	240000d4 	.word	0x240000d4
9001f9a0:	24028294 	.word	0x24028294
9001f9a4:	9001d7bf 	.word	0x9001d7bf
9001f9a8:	240000d8 	.word	0x240000d8

9001f9ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001f9ac:	b538      	push	{r3, r4, r5, lr}
9001f9ae:	4c15      	ldr	r4, [pc, #84]	; (9001fa04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001f9b0:	4605      	mov	r5, r0
9001f9b2:	7823      	ldrb	r3, [r4, #0]
9001f9b4:	f3bf 8f5b 	dmb	ish
9001f9b8:	07da      	lsls	r2, r3, #31
9001f9ba:	d40b      	bmi.n	9001f9d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001f9bc:	4620      	mov	r0, r4
9001f9be:	f007 fb9c 	bl	900270fa <__cxa_guard_acquire>
9001f9c2:	b138      	cbz	r0, 9001f9d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001f9c4:	4620      	mov	r0, r4
9001f9c6:	f007 fba4 	bl	90027112 <__cxa_guard_release>
9001f9ca:	4a0f      	ldr	r2, [pc, #60]	; (9001fa08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001f9cc:	490f      	ldr	r1, [pc, #60]	; (9001fa0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001f9ce:	4810      	ldr	r0, [pc, #64]	; (9001fa10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001f9d0:	f007 fb8c 	bl	900270ec <__aeabi_atexit>
9001f9d4:	4c0f      	ldr	r4, [pc, #60]	; (9001fa14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001f9d6:	7823      	ldrb	r3, [r4, #0]
9001f9d8:	f3bf 8f5b 	dmb	ish
9001f9dc:	07db      	lsls	r3, r3, #31
9001f9de:	d40b      	bmi.n	9001f9f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001f9e0:	4620      	mov	r0, r4
9001f9e2:	f007 fb8a 	bl	900270fa <__cxa_guard_acquire>
9001f9e6:	b138      	cbz	r0, 9001f9f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001f9e8:	4620      	mov	r0, r4
9001f9ea:	f007 fb92 	bl	90027112 <__cxa_guard_release>
9001f9ee:	4a06      	ldr	r2, [pc, #24]	; (9001fa08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001f9f0:	4909      	ldr	r1, [pc, #36]	; (9001fa18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001f9f2:	480a      	ldr	r0, [pc, #40]	; (9001fa1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001f9f4:	f007 fb7a 	bl	900270ec <__aeabi_atexit>
9001f9f8:	4b05      	ldr	r3, [pc, #20]	; (9001fa10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001f9fa:	642b      	str	r3, [r5, #64]	; 0x40
9001f9fc:	4b07      	ldr	r3, [pc, #28]	; (9001fa1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001f9fe:	646b      	str	r3, [r5, #68]	; 0x44
9001fa00:	bd38      	pop	{r3, r4, r5, pc}
9001fa02:	bf00      	nop
9001fa04:	24028258 	.word	0x24028258
9001fa08:	24000000 	.word	0x24000000
9001fa0c:	9001d7c5 	.word	0x9001d7c5
9001fa10:	2400009c 	.word	0x2400009c
9001fa14:	2402825c 	.word	0x2402825c
9001fa18:	9001d7c3 	.word	0x9001d7c3
9001fa1c:	240000a0 	.word	0x240000a0

9001fa20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001fa20:	b538      	push	{r3, r4, r5, lr}
9001fa22:	4c15      	ldr	r4, [pc, #84]	; (9001fa78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001fa24:	4605      	mov	r5, r0
9001fa26:	7823      	ldrb	r3, [r4, #0]
9001fa28:	f3bf 8f5b 	dmb	ish
9001fa2c:	07da      	lsls	r2, r3, #31
9001fa2e:	d40b      	bmi.n	9001fa48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001fa30:	4620      	mov	r0, r4
9001fa32:	f007 fb62 	bl	900270fa <__cxa_guard_acquire>
9001fa36:	b138      	cbz	r0, 9001fa48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001fa38:	4620      	mov	r0, r4
9001fa3a:	f007 fb6a 	bl	90027112 <__cxa_guard_release>
9001fa3e:	4a0f      	ldr	r2, [pc, #60]	; (9001fa7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001fa40:	490f      	ldr	r1, [pc, #60]	; (9001fa80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001fa42:	4810      	ldr	r0, [pc, #64]	; (9001fa84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001fa44:	f007 fb52 	bl	900270ec <__aeabi_atexit>
9001fa48:	4c0f      	ldr	r4, [pc, #60]	; (9001fa88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001fa4a:	7823      	ldrb	r3, [r4, #0]
9001fa4c:	f3bf 8f5b 	dmb	ish
9001fa50:	07db      	lsls	r3, r3, #31
9001fa52:	d40b      	bmi.n	9001fa6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fa54:	4620      	mov	r0, r4
9001fa56:	f007 fb50 	bl	900270fa <__cxa_guard_acquire>
9001fa5a:	b138      	cbz	r0, 9001fa6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fa5c:	4620      	mov	r0, r4
9001fa5e:	f007 fb58 	bl	90027112 <__cxa_guard_release>
9001fa62:	4a06      	ldr	r2, [pc, #24]	; (9001fa7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001fa64:	4909      	ldr	r1, [pc, #36]	; (9001fa8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001fa66:	480a      	ldr	r0, [pc, #40]	; (9001fa90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001fa68:	f007 fb40 	bl	900270ec <__aeabi_atexit>
9001fa6c:	4b05      	ldr	r3, [pc, #20]	; (9001fa84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001fa6e:	63ab      	str	r3, [r5, #56]	; 0x38
9001fa70:	4b07      	ldr	r3, [pc, #28]	; (9001fa90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001fa72:	63eb      	str	r3, [r5, #60]	; 0x3c
9001fa74:	bd38      	pop	{r3, r4, r5, pc}
9001fa76:	bf00      	nop
9001fa78:	24028278 	.word	0x24028278
9001fa7c:	24000000 	.word	0x24000000
9001fa80:	9001d7c9 	.word	0x9001d7c9
9001fa84:	240000bc 	.word	0x240000bc
9001fa88:	2402827c 	.word	0x2402827c
9001fa8c:	9001d7c7 	.word	0x9001d7c7
9001fa90:	240000c0 	.word	0x240000c0

9001fa94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001fa94:	b510      	push	{r4, lr}
9001fa96:	4604      	mov	r4, r0
9001fa98:	f7ff ff14 	bl	9001f8c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001fa9c:	4620      	mov	r0, r4
9001fa9e:	f7ff ff85 	bl	9001f9ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001faa2:	4620      	mov	r0, r4
9001faa4:	f7ff ff48 	bl	9001f938 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001faa8:	4620      	mov	r0, r4
9001faaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001faae:	f7ff bfb7 	b.w	9001fa20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001fab4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001fab4:	b538      	push	{r3, r4, r5, lr}
9001fab6:	4c15      	ldr	r4, [pc, #84]	; (9001fb0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001fab8:	4605      	mov	r5, r0
9001faba:	7823      	ldrb	r3, [r4, #0]
9001fabc:	f3bf 8f5b 	dmb	ish
9001fac0:	07da      	lsls	r2, r3, #31
9001fac2:	d40b      	bmi.n	9001fadc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001fac4:	4620      	mov	r0, r4
9001fac6:	f007 fb18 	bl	900270fa <__cxa_guard_acquire>
9001faca:	b138      	cbz	r0, 9001fadc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001facc:	4620      	mov	r0, r4
9001face:	f007 fb20 	bl	90027112 <__cxa_guard_release>
9001fad2:	4a0f      	ldr	r2, [pc, #60]	; (9001fb10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001fad4:	490f      	ldr	r1, [pc, #60]	; (9001fb14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001fad6:	4810      	ldr	r0, [pc, #64]	; (9001fb18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001fad8:	f007 fb08 	bl	900270ec <__aeabi_atexit>
9001fadc:	4c0f      	ldr	r4, [pc, #60]	; (9001fb1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001fade:	7823      	ldrb	r3, [r4, #0]
9001fae0:	f3bf 8f5b 	dmb	ish
9001fae4:	07db      	lsls	r3, r3, #31
9001fae6:	d40b      	bmi.n	9001fb00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001fae8:	4620      	mov	r0, r4
9001faea:	f007 fb06 	bl	900270fa <__cxa_guard_acquire>
9001faee:	b138      	cbz	r0, 9001fb00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001faf0:	4620      	mov	r0, r4
9001faf2:	f007 fb0e 	bl	90027112 <__cxa_guard_release>
9001faf6:	4a06      	ldr	r2, [pc, #24]	; (9001fb10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001faf8:	4909      	ldr	r1, [pc, #36]	; (9001fb20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001fafa:	480a      	ldr	r0, [pc, #40]	; (9001fb24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001fafc:	f007 faf6 	bl	900270ec <__aeabi_atexit>
9001fb00:	4b05      	ldr	r3, [pc, #20]	; (9001fb18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001fb02:	662b      	str	r3, [r5, #96]	; 0x60
9001fb04:	4b07      	ldr	r3, [pc, #28]	; (9001fb24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001fb06:	666b      	str	r3, [r5, #100]	; 0x64
9001fb08:	bd38      	pop	{r3, r4, r5, pc}
9001fb0a:	bf00      	nop
9001fb0c:	24028260 	.word	0x24028260
9001fb10:	24000000 	.word	0x24000000
9001fb14:	9001d7b5 	.word	0x9001d7b5
9001fb18:	240000a4 	.word	0x240000a4
9001fb1c:	24028264 	.word	0x24028264
9001fb20:	9001d7b3 	.word	0x9001d7b3
9001fb24:	240000a8 	.word	0x240000a8

9001fb28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001fb28:	b538      	push	{r3, r4, r5, lr}
9001fb2a:	4c15      	ldr	r4, [pc, #84]	; (9001fb80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001fb2c:	4605      	mov	r5, r0
9001fb2e:	7823      	ldrb	r3, [r4, #0]
9001fb30:	f3bf 8f5b 	dmb	ish
9001fb34:	07da      	lsls	r2, r3, #31
9001fb36:	d40b      	bmi.n	9001fb50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001fb38:	4620      	mov	r0, r4
9001fb3a:	f007 fade 	bl	900270fa <__cxa_guard_acquire>
9001fb3e:	b138      	cbz	r0, 9001fb50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001fb40:	4620      	mov	r0, r4
9001fb42:	f007 fae6 	bl	90027112 <__cxa_guard_release>
9001fb46:	4a0f      	ldr	r2, [pc, #60]	; (9001fb84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001fb48:	490f      	ldr	r1, [pc, #60]	; (9001fb88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001fb4a:	4810      	ldr	r0, [pc, #64]	; (9001fb8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001fb4c:	f007 face 	bl	900270ec <__aeabi_atexit>
9001fb50:	4c0f      	ldr	r4, [pc, #60]	; (9001fb90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001fb52:	7823      	ldrb	r3, [r4, #0]
9001fb54:	f3bf 8f5b 	dmb	ish
9001fb58:	07db      	lsls	r3, r3, #31
9001fb5a:	d40b      	bmi.n	9001fb74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001fb5c:	4620      	mov	r0, r4
9001fb5e:	f007 facc 	bl	900270fa <__cxa_guard_acquire>
9001fb62:	b138      	cbz	r0, 9001fb74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001fb64:	4620      	mov	r0, r4
9001fb66:	f007 fad4 	bl	90027112 <__cxa_guard_release>
9001fb6a:	4a06      	ldr	r2, [pc, #24]	; (9001fb84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001fb6c:	4909      	ldr	r1, [pc, #36]	; (9001fb94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001fb6e:	480a      	ldr	r0, [pc, #40]	; (9001fb98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001fb70:	f007 fabc 	bl	900270ec <__aeabi_atexit>
9001fb74:	4b05      	ldr	r3, [pc, #20]	; (9001fb8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001fb76:	65ab      	str	r3, [r5, #88]	; 0x58
9001fb78:	4b07      	ldr	r3, [pc, #28]	; (9001fb98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001fb7a:	65eb      	str	r3, [r5, #92]	; 0x5c
9001fb7c:	bd38      	pop	{r3, r4, r5, pc}
9001fb7e:	bf00      	nop
9001fb80:	24028238 	.word	0x24028238
9001fb84:	24000000 	.word	0x24000000
9001fb88:	9001d7b9 	.word	0x9001d7b9
9001fb8c:	2400007c 	.word	0x2400007c
9001fb90:	2402823c 	.word	0x2402823c
9001fb94:	9001d7b7 	.word	0x9001d7b7
9001fb98:	24000080 	.word	0x24000080

9001fb9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001fb9c:	b510      	push	{r4, lr}
9001fb9e:	4604      	mov	r4, r0
9001fba0:	f7ff ff88 	bl	9001fab4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001fba4:	4620      	mov	r0, r4
9001fba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fbaa:	f7ff bfbd 	b.w	9001fb28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001fbb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001fbb0:	b538      	push	{r3, r4, r5, lr}
9001fbb2:	4c15      	ldr	r4, [pc, #84]	; (9001fc08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001fbb4:	4605      	mov	r5, r0
9001fbb6:	7823      	ldrb	r3, [r4, #0]
9001fbb8:	f3bf 8f5b 	dmb	ish
9001fbbc:	07da      	lsls	r2, r3, #31
9001fbbe:	d40b      	bmi.n	9001fbd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001fbc0:	4620      	mov	r0, r4
9001fbc2:	f007 fa9a 	bl	900270fa <__cxa_guard_acquire>
9001fbc6:	b138      	cbz	r0, 9001fbd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001fbc8:	4620      	mov	r0, r4
9001fbca:	f007 faa2 	bl	90027112 <__cxa_guard_release>
9001fbce:	4a0f      	ldr	r2, [pc, #60]	; (9001fc0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001fbd0:	490f      	ldr	r1, [pc, #60]	; (9001fc10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001fbd2:	4810      	ldr	r0, [pc, #64]	; (9001fc14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001fbd4:	f007 fa8a 	bl	900270ec <__aeabi_atexit>
9001fbd8:	4c0f      	ldr	r4, [pc, #60]	; (9001fc18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001fbda:	7823      	ldrb	r3, [r4, #0]
9001fbdc:	f3bf 8f5b 	dmb	ish
9001fbe0:	07db      	lsls	r3, r3, #31
9001fbe2:	d40b      	bmi.n	9001fbfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001fbe4:	4620      	mov	r0, r4
9001fbe6:	f007 fa88 	bl	900270fa <__cxa_guard_acquire>
9001fbea:	b138      	cbz	r0, 9001fbfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001fbec:	4620      	mov	r0, r4
9001fbee:	f007 fa90 	bl	90027112 <__cxa_guard_release>
9001fbf2:	4a06      	ldr	r2, [pc, #24]	; (9001fc0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001fbf4:	4909      	ldr	r1, [pc, #36]	; (9001fc1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001fbf6:	480a      	ldr	r0, [pc, #40]	; (9001fc20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001fbf8:	f007 fa78 	bl	900270ec <__aeabi_atexit>
9001fbfc:	4b05      	ldr	r3, [pc, #20]	; (9001fc14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001fbfe:	672b      	str	r3, [r5, #112]	; 0x70
9001fc00:	4b07      	ldr	r3, [pc, #28]	; (9001fc20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001fc02:	676b      	str	r3, [r5, #116]	; 0x74
9001fc04:	bd38      	pop	{r3, r4, r5, pc}
9001fc06:	bf00      	nop
9001fc08:	24028230 	.word	0x24028230
9001fc0c:	24000000 	.word	0x24000000
9001fc10:	9001d7ad 	.word	0x9001d7ad
9001fc14:	24000074 	.word	0x24000074
9001fc18:	24028234 	.word	0x24028234
9001fc1c:	9001d7ab 	.word	0x9001d7ab
9001fc20:	24000078 	.word	0x24000078

9001fc24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001fc24:	b538      	push	{r3, r4, r5, lr}
9001fc26:	4c15      	ldr	r4, [pc, #84]	; (9001fc7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001fc28:	4605      	mov	r5, r0
9001fc2a:	7823      	ldrb	r3, [r4, #0]
9001fc2c:	f3bf 8f5b 	dmb	ish
9001fc30:	07da      	lsls	r2, r3, #31
9001fc32:	d40b      	bmi.n	9001fc4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001fc34:	4620      	mov	r0, r4
9001fc36:	f007 fa60 	bl	900270fa <__cxa_guard_acquire>
9001fc3a:	b138      	cbz	r0, 9001fc4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001fc3c:	4620      	mov	r0, r4
9001fc3e:	f007 fa68 	bl	90027112 <__cxa_guard_release>
9001fc42:	4a0f      	ldr	r2, [pc, #60]	; (9001fc80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001fc44:	490f      	ldr	r1, [pc, #60]	; (9001fc84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001fc46:	4810      	ldr	r0, [pc, #64]	; (9001fc88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001fc48:	f007 fa50 	bl	900270ec <__aeabi_atexit>
9001fc4c:	4c0f      	ldr	r4, [pc, #60]	; (9001fc8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001fc4e:	7823      	ldrb	r3, [r4, #0]
9001fc50:	f3bf 8f5b 	dmb	ish
9001fc54:	07db      	lsls	r3, r3, #31
9001fc56:	d40b      	bmi.n	9001fc70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001fc58:	4620      	mov	r0, r4
9001fc5a:	f007 fa4e 	bl	900270fa <__cxa_guard_acquire>
9001fc5e:	b138      	cbz	r0, 9001fc70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001fc60:	4620      	mov	r0, r4
9001fc62:	f007 fa56 	bl	90027112 <__cxa_guard_release>
9001fc66:	4a06      	ldr	r2, [pc, #24]	; (9001fc80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001fc68:	4909      	ldr	r1, [pc, #36]	; (9001fc90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001fc6a:	480a      	ldr	r0, [pc, #40]	; (9001fc94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001fc6c:	f007 fa3e 	bl	900270ec <__aeabi_atexit>
9001fc70:	4b05      	ldr	r3, [pc, #20]	; (9001fc88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001fc72:	66ab      	str	r3, [r5, #104]	; 0x68
9001fc74:	4b07      	ldr	r3, [pc, #28]	; (9001fc94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001fc76:	66eb      	str	r3, [r5, #108]	; 0x6c
9001fc78:	bd38      	pop	{r3, r4, r5, pc}
9001fc7a:	bf00      	nop
9001fc7c:	24028228 	.word	0x24028228
9001fc80:	24000000 	.word	0x24000000
9001fc84:	9001d7b1 	.word	0x9001d7b1
9001fc88:	2400006c 	.word	0x2400006c
9001fc8c:	2402822c 	.word	0x2402822c
9001fc90:	9001d7af 	.word	0x9001d7af
9001fc94:	24000070 	.word	0x24000070

9001fc98 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001fc98:	b510      	push	{r4, lr}
9001fc9a:	4604      	mov	r4, r0
9001fc9c:	f7ff ff88 	bl	9001fbb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001fca0:	4620      	mov	r0, r4
9001fca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fca6:	f7ff bfbd 	b.w	9001fc24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001fcaa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001fcaa:	b510      	push	{r4, lr}
9001fcac:	4604      	mov	r4, r0
9001fcae:	f7ff fff3 	bl	9001fc98 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001fcb2:	4620      	mov	r0, r4
9001fcb4:	f7ff ff72 	bl	9001fb9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001fcb8:	4620      	mov	r0, r4
9001fcba:	f7ff fdf9 	bl	9001f8b0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001fcbe:	4620      	mov	r0, r4
9001fcc0:	f7ff fcfa 	bl	9001f6b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001fcc4:	4620      	mov	r0, r4
9001fcc6:	f7ff fd75 	bl	9001f7b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001fcca:	4620      	mov	r0, r4
9001fccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fcd0:	f7ff bee0 	b.w	9001fa94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001fcd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fcd8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001fcdc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001fce0:	2d00      	cmp	r5, #0
9001fce2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001fce6:	fb05 4c0e 	mla	ip, r5, lr, r4
9001fcea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001fcee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001fcf2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001fcf6:	eb02 0a0c 	add.w	sl, r2, ip
9001fcfa:	8808      	ldrh	r0, [r1, #0]
9001fcfc:	f2c0 80b0 	blt.w	9001fe60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001fd00:	45ab      	cmp	fp, r5
9001fd02:	f340 80ad 	ble.w	9001fe60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001fd06:	2c00      	cmp	r4, #0
9001fd08:	f2c0 80a8 	blt.w	9001fe5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001fd0c:	45a6      	cmp	lr, r4
9001fd0e:	f340 80a5 	ble.w	9001fe5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001fd12:	f812 200c 	ldrb.w	r2, [r2, ip]
9001fd16:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001fd1a:	1c62      	adds	r2, r4, #1
9001fd1c:	f100 80a3 	bmi.w	9001fe66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fd20:	4596      	cmp	lr, r2
9001fd22:	f340 80a0 	ble.w	9001fe66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fd26:	f1b9 0f00 	cmp.w	r9, #0
9001fd2a:	f000 809c 	beq.w	9001fe66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fd2e:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001fd32:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001fd36:	3501      	adds	r5, #1
9001fd38:	f100 8099 	bmi.w	9001fe6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fd3c:	45ab      	cmp	fp, r5
9001fd3e:	f340 8096 	ble.w	9001fe6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fd42:	2f00      	cmp	r7, #0
9001fd44:	f000 8093 	beq.w	9001fe6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fd48:	2c00      	cmp	r4, #0
9001fd4a:	f2c0 808e 	blt.w	9001fe6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001fd4e:	45a6      	cmp	lr, r4
9001fd50:	f340 808b 	ble.w	9001fe6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001fd54:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001fd58:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001fd5c:	3401      	adds	r4, #1
9001fd5e:	f100 8089 	bmi.w	9001fe74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fd62:	45a6      	cmp	lr, r4
9001fd64:	f340 8086 	ble.w	9001fe74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fd68:	f1b9 0f00 	cmp.w	r9, #0
9001fd6c:	f000 8082 	beq.w	9001fe74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fd70:	44d6      	add	lr, sl
9001fd72:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001fd76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001fd7a:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001fd7e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001fd82:	fb19 fe07 	smulbb	lr, r9, r7
9001fd86:	f1c7 0210 	rsb	r2, r7, #16
9001fd8a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001fd8e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001fd92:	eba2 0209 	sub.w	r2, r2, r9
9001fd96:	ea44 0808 	orr.w	r8, r4, r8
9001fd9a:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001fd9e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001fda2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001fda6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001fdaa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001fdae:	ea44 0c0c 	orr.w	ip, r4, ip
9001fdb2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001fdb6:	fb04 f40c 	mul.w	r4, r4, ip
9001fdba:	fb02 4808 	mla	r8, r2, r8, r4
9001fdbe:	041a      	lsls	r2, r3, #16
9001fdc0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001fdc4:	b2b4      	uxth	r4, r6
9001fdc6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001fdca:	43f6      	mvns	r6, r6
9001fdcc:	4313      	orrs	r3, r2
9001fdce:	042a      	lsls	r2, r5, #16
9001fdd0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fdd4:	b2f6      	uxtb	r6, r6
9001fdd6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001fdda:	fb0e 8303 	mla	r3, lr, r3, r8
9001fdde:	432a      	orrs	r2, r5
9001fde0:	fb07 3202 	mla	r2, r7, r2, r3
9001fde4:	10c7      	asrs	r7, r0, #3
9001fde6:	0d53      	lsrs	r3, r2, #21
9001fde8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001fdec:	0952      	lsrs	r2, r2, #5
9001fdee:	fb17 f706 	smulbb	r7, r7, r6
9001fdf2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001fdf6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fdfa:	431a      	orrs	r2, r3
9001fdfc:	b293      	uxth	r3, r2
9001fdfe:	1202      	asrs	r2, r0, #8
9001fe00:	121d      	asrs	r5, r3, #8
9001fe02:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001fe06:	00c0      	lsls	r0, r0, #3
9001fe08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001fe0c:	fb12 f206 	smulbb	r2, r2, r6
9001fe10:	b2c0      	uxtb	r0, r0
9001fe12:	fb05 2504 	mla	r5, r5, r4, r2
9001fe16:	10da      	asrs	r2, r3, #3
9001fe18:	fb10 f006 	smulbb	r0, r0, r6
9001fe1c:	00db      	lsls	r3, r3, #3
9001fe1e:	b2ad      	uxth	r5, r5
9001fe20:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001fe24:	b2db      	uxtb	r3, r3
9001fe26:	fb02 7204 	mla	r2, r2, r4, r7
9001fe2a:	fb03 0004 	mla	r0, r3, r4, r0
9001fe2e:	1c6b      	adds	r3, r5, #1
9001fe30:	b292      	uxth	r2, r2
9001fe32:	b280      	uxth	r0, r0
9001fe34:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001fe38:	1c43      	adds	r3, r0, #1
9001fe3a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001fe3e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001fe42:	1c50      	adds	r0, r2, #1
9001fe44:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001fe48:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001fe4c:	0952      	lsrs	r2, r2, #5
9001fe4e:	432b      	orrs	r3, r5
9001fe50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fe54:	4313      	orrs	r3, r2
9001fe56:	800b      	strh	r3, [r1, #0]
9001fe58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fe5c:	4680      	mov	r8, r0
9001fe5e:	e75c      	b.n	9001fd1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001fe60:	4684      	mov	ip, r0
9001fe62:	4680      	mov	r8, r0
9001fe64:	e767      	b.n	9001fd36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001fe66:	4684      	mov	ip, r0
9001fe68:	e765      	b.n	9001fd36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001fe6a:	4605      	mov	r5, r0
9001fe6c:	e776      	b.n	9001fd5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001fe6e:	4603      	mov	r3, r0
9001fe70:	4605      	mov	r5, r0
9001fe72:	e782      	b.n	9001fd7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001fe74:	4603      	mov	r3, r0
9001fe76:	e780      	b.n	9001fd7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001fe78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fe7c:	b099      	sub	sp, #100	; 0x64
9001fe7e:	9215      	str	r2, [sp, #84]	; 0x54
9001fe80:	9309      	str	r3, [sp, #36]	; 0x24
9001fe82:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001fe84:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001fe88:	9016      	str	r0, [sp, #88]	; 0x58
9001fe8a:	930d      	str	r3, [sp, #52]	; 0x34
9001fe8c:	6850      	ldr	r0, [r2, #4]
9001fe8e:	910c      	str	r1, [sp, #48]	; 0x30
9001fe90:	6812      	ldr	r2, [r2, #0]
9001fe92:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001fe96:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001fe9a:	fb00 1303 	mla	r3, r0, r3, r1
9001fe9e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001fea2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fea4:	681b      	ldr	r3, [r3, #0]
9001fea6:	930b      	str	r3, [sp, #44]	; 0x2c
9001fea8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001feaa:	685e      	ldr	r6, [r3, #4]
9001feac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001feae:	3604      	adds	r6, #4
9001feb0:	43db      	mvns	r3, r3
9001feb2:	b2db      	uxtb	r3, r3
9001feb4:	930a      	str	r3, [sp, #40]	; 0x28
9001feb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001feb8:	2b00      	cmp	r3, #0
9001feba:	dc03      	bgt.n	9001fec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001febc:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001febe:	2b00      	cmp	r3, #0
9001fec0:	f340 8225 	ble.w	9002030e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001fec4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fec6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001feca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001fece:	1e48      	subs	r0, r1, #1
9001fed0:	1e57      	subs	r7, r2, #1
9001fed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fed4:	2b00      	cmp	r3, #0
9001fed6:	f340 80e3 	ble.w	900200a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001feda:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001fede:	ea4f 4325 	mov.w	r3, r5, asr #16
9001fee2:	d406      	bmi.n	9001fef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001fee4:	4584      	cmp	ip, r0
9001fee6:	da04      	bge.n	9001fef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001fee8:	2b00      	cmp	r3, #0
9001feea:	db02      	blt.n	9001fef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001feec:	42bb      	cmp	r3, r7
9001feee:	f2c0 80d8 	blt.w	900200a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001fef2:	f11c 0c01 	adds.w	ip, ip, #1
9001fef6:	f100 80c9 	bmi.w	9002008c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001fefa:	4561      	cmp	r1, ip
9001fefc:	f2c0 80c6 	blt.w	9002008c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ff00:	3301      	adds	r3, #1
9001ff02:	f100 80c3 	bmi.w	9002008c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ff06:	429a      	cmp	r2, r3
9001ff08:	f2c0 80c0 	blt.w	9002008c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ff0c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001ff10:	4647      	mov	r7, r8
9001ff12:	f1bb 0f00 	cmp.w	fp, #0
9001ff16:	f340 80e3 	ble.w	900200e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001ff1a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001ff1c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001ff20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ff22:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001ff26:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001ff2a:	ea5f 422a 	movs.w	r2, sl, asr #16
9001ff2e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001ff32:	689b      	ldr	r3, [r3, #8]
9001ff34:	f100 8121 	bmi.w	9002017a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ff38:	f103 39ff 	add.w	r9, r3, #4294967295
9001ff3c:	454a      	cmp	r2, r9
9001ff3e:	f280 811c 	bge.w	9002017a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ff42:	f1bc 0f00 	cmp.w	ip, #0
9001ff46:	f2c0 8118 	blt.w	9002017a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ff4a:	f10e 39ff 	add.w	r9, lr, #4294967295
9001ff4e:	45cc      	cmp	ip, r9
9001ff50:	f280 8113 	bge.w	9002017a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ff54:	b21b      	sxth	r3, r3
9001ff56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ff58:	fb0c 2203 	mla	r2, ip, r3, r2
9001ff5c:	eb04 0902 	add.w	r9, r4, r2
9001ff60:	5ca2      	ldrb	r2, [r4, r2]
9001ff62:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001ff66:	2800      	cmp	r0, #0
9001ff68:	f000 80fe 	beq.w	90020168 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001ff6c:	f899 2001 	ldrb.w	r2, [r9, #1]
9001ff70:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001ff74:	9211      	str	r2, [sp, #68]	; 0x44
9001ff76:	b151      	cbz	r1, 9001ff8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001ff78:	eb09 0203 	add.w	r2, r9, r3
9001ff7c:	f819 3003 	ldrb.w	r3, [r9, r3]
9001ff80:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ff84:	930f      	str	r3, [sp, #60]	; 0x3c
9001ff86:	7853      	ldrb	r3, [r2, #1]
9001ff88:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ff8c:	9312      	str	r3, [sp, #72]	; 0x48
9001ff8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ff90:	fb10 f201 	smulbb	r2, r0, r1
9001ff94:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ff96:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001ff9a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ff9e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ffa2:	10d2      	asrs	r2, r2, #3
9001ffa4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ffa8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001ffac:	ea4c 0c03 	orr.w	ip, ip, r3
9001ffb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001ffb2:	041b      	lsls	r3, r3, #16
9001ffb4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ffb8:	4323      	orrs	r3, r4
9001ffba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001ffbc:	4353      	muls	r3, r2
9001ffbe:	fb09 330c 	mla	r3, r9, ip, r3
9001ffc2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001ffc6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ffca:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ffce:	ea4c 0e0e 	orr.w	lr, ip, lr
9001ffd2:	f1c1 0c10 	rsb	ip, r1, #16
9001ffd6:	ebac 0c00 	sub.w	ip, ip, r0
9001ffda:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001ffde:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001ffe2:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001ffe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ffe8:	0418      	lsls	r0, r3, #16
9001ffea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ffee:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001fff2:	4318      	orrs	r0, r3
9001fff4:	fb02 c200 	mla	r2, r2, r0, ip
9001fff8:	8838      	ldrh	r0, [r7, #0]
9001fffa:	0d53      	lsrs	r3, r2, #21
9001fffc:	0952      	lsrs	r2, r2, #5
9001fffe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020002:	1201      	asrs	r1, r0, #8
90020004:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020008:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9002000c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020010:	00c0      	lsls	r0, r0, #3
90020012:	431a      	orrs	r2, r3
90020014:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
90020018:	fb11 f104 	smulbb	r1, r1, r4
9002001c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020020:	b292      	uxth	r2, r2
90020022:	fb1e fe04 	smulbb	lr, lr, r4
90020026:	b2c0      	uxtb	r0, r0
90020028:	ea4f 2c22 	mov.w	ip, r2, asr #8
9002002c:	fb10 f004 	smulbb	r0, r0, r4
90020030:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020034:	fb0c 1c03 	mla	ip, ip, r3, r1
90020038:	10d1      	asrs	r1, r2, #3
9002003a:	00d2      	lsls	r2, r2, #3
9002003c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020040:	fa1f fc8c 	uxth.w	ip, ip
90020044:	b2d2      	uxtb	r2, r2
90020046:	fb01 e103 	mla	r1, r1, r3, lr
9002004a:	fb02 0303 	mla	r3, r2, r3, r0
9002004e:	b289      	uxth	r1, r1
90020050:	b29a      	uxth	r2, r3
90020052:	f10c 0301 	add.w	r3, ip, #1
90020056:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9002005a:	1c53      	adds	r3, r2, #1
9002005c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020060:	1c4a      	adds	r2, r1, #1
90020062:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90020066:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002006a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002006e:	0949      	lsrs	r1, r1, #5
90020070:	ea43 030c 	orr.w	r3, r3, ip
90020074:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020078:	430b      	orrs	r3, r1
9002007a:	803b      	strh	r3, [r7, #0]
9002007c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002007e:	3702      	adds	r7, #2
90020080:	f10b 3bff 	add.w	fp, fp, #4294967295
90020084:	449a      	add	sl, r3
90020086:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020088:	441d      	add	r5, r3
9002008a:	e742      	b.n	9001ff12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9002008c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002008e:	f108 0802 	add.w	r8, r8, #2
90020092:	449a      	add	sl, r3
90020094:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020096:	441d      	add	r5, r3
90020098:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002009a:	3b01      	subs	r3, #1
9002009c:	9309      	str	r3, [sp, #36]	; 0x24
9002009e:	e718      	b.n	9001fed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
900200a0:	d023      	beq.n	900200ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900200a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900200a4:	9825      	ldr	r0, [sp, #148]	; 0x94
900200a6:	3b01      	subs	r3, #1
900200a8:	fb00 a003 	mla	r0, r0, r3, sl
900200ac:	1400      	asrs	r0, r0, #16
900200ae:	f53f af2d 	bmi.w	9001ff0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900200b2:	3901      	subs	r1, #1
900200b4:	4288      	cmp	r0, r1
900200b6:	f6bf af29 	bge.w	9001ff0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900200ba:	9926      	ldr	r1, [sp, #152]	; 0x98
900200bc:	fb01 5303 	mla	r3, r1, r3, r5
900200c0:	141b      	asrs	r3, r3, #16
900200c2:	f53f af23 	bmi.w	9001ff0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900200c6:	3a01      	subs	r2, #1
900200c8:	4293      	cmp	r3, r2
900200ca:	f6bf af1f 	bge.w	9001ff0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900200ce:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900200d2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
900200d6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
900200da:	f1be 0f00 	cmp.w	lr, #0
900200de:	dc6c      	bgt.n	900201ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900200e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900200e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900200e6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
900200ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900200ec:	2b00      	cmp	r3, #0
900200ee:	f340 810e 	ble.w	9002030e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
900200f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900200f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
900200f8:	ee30 0a04 	vadd.f32	s0, s0, s8
900200fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020100:	eef0 6a62 	vmov.f32	s13, s5
90020104:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020108:	ee31 1a05 	vadd.f32	s2, s2, s10
9002010c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020110:	ee16 aa90 	vmov	sl, s13
90020114:	eef0 6a43 	vmov.f32	s13, s6
90020118:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002011c:	ee16 5a90 	vmov	r5, s13
90020120:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020124:	ee61 7a27 	vmul.f32	s15, s2, s15
90020128:	ee77 2a62 	vsub.f32	s5, s14, s5
9002012c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020130:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020134:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020138:	ee12 2a90 	vmov	r2, s5
9002013c:	eef0 2a47 	vmov.f32	s5, s14
90020140:	fb92 f3f3 	sdiv	r3, r2, r3
90020144:	ee13 2a10 	vmov	r2, s6
90020148:	9325      	str	r3, [sp, #148]	; 0x94
9002014a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9002014c:	eeb0 3a67 	vmov.f32	s6, s15
90020150:	fb92 f3f3 	sdiv	r3, r2, r3
90020154:	9326      	str	r3, [sp, #152]	; 0x98
90020156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020158:	9a15      	ldr	r2, [sp, #84]	; 0x54
9002015a:	3b01      	subs	r3, #1
9002015c:	930c      	str	r3, [sp, #48]	; 0x30
9002015e:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020160:	bf08      	it	eq
90020162:	4613      	moveq	r3, r2
90020164:	9309      	str	r3, [sp, #36]	; 0x24
90020166:	e6a6      	b.n	9001feb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90020168:	2900      	cmp	r1, #0
9002016a:	f43f af10 	beq.w	9001ff8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002016e:	f819 3003 	ldrb.w	r3, [r9, r3]
90020172:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020176:	930f      	str	r3, [sp, #60]	; 0x3c
90020178:	e709      	b.n	9001ff8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002017a:	f112 0901 	adds.w	r9, r2, #1
9002017e:	f53f af7d 	bmi.w	9002007c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020182:	454b      	cmp	r3, r9
90020184:	f6ff af7a 	blt.w	9002007c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020188:	f11c 0901 	adds.w	r9, ip, #1
9002018c:	f53f af76 	bmi.w	9002007c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020190:	45ce      	cmp	lr, r9
90020192:	f6ff af73 	blt.w	9002007c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020196:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90020198:	b21b      	sxth	r3, r3
9002019a:	9202      	str	r2, [sp, #8]
9002019c:	fa0f f28e 	sxth.w	r2, lr
900201a0:	9300      	str	r3, [sp, #0]
900201a2:	4633      	mov	r3, r6
900201a4:	9201      	str	r2, [sp, #4]
900201a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900201a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
900201ac:	e9cd c003 	strd	ip, r0, [sp, #12]
900201b0:	4639      	mov	r1, r7
900201b2:	9816      	ldr	r0, [sp, #88]	; 0x58
900201b4:	f7ff fd8e 	bl	9001fcd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
900201b8:	e760      	b.n	9002007c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900201ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900201bc:	ea4f 422a 	mov.w	r2, sl, asr #16
900201c0:	1429      	asrs	r1, r5, #16
900201c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900201c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900201c8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
900201cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
900201d0:	fb03 2101 	mla	r1, r3, r1, r2
900201d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900201d6:	440a      	add	r2, r1
900201d8:	5c61      	ldrb	r1, [r4, r1]
900201da:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
900201de:	f1bc 0f00 	cmp.w	ip, #0
900201e2:	f000 808c 	beq.w	900202fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
900201e6:	7857      	ldrb	r7, [r2, #1]
900201e8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
900201ec:	9413      	str	r4, [sp, #76]	; 0x4c
900201ee:	b140      	cbz	r0, 90020202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900201f0:	18d7      	adds	r7, r2, r3
900201f2:	5cd3      	ldrb	r3, [r2, r3]
900201f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900201f8:	9310      	str	r3, [sp, #64]	; 0x40
900201fa:	787b      	ldrb	r3, [r7, #1]
900201fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020200:	9314      	str	r3, [sp, #80]	; 0x50
90020202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90020204:	fb1c f200 	smulbb	r2, ip, r0
90020208:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002020a:	f10e 3eff 	add.w	lr, lr, #4294967295
9002020e:	041f      	lsls	r7, r3, #16
90020210:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020214:	10d2      	asrs	r2, r2, #3
90020216:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9002021a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9002021e:	431f      	orrs	r7, r3
90020220:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
90020224:	9317      	str	r3, [sp, #92]	; 0x5c
90020226:	9b14      	ldr	r3, [sp, #80]	; 0x50
90020228:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9002022a:	041b      	lsls	r3, r3, #16
9002022c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020230:	ea43 030b 	orr.w	r3, r3, fp
90020234:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020238:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002023c:	4353      	muls	r3, r2
9002023e:	fb04 3707 	mla	r7, r4, r7, r3
90020242:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020246:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90020248:	ea43 0b01 	orr.w	fp, r3, r1
9002024c:	f1c0 0110 	rsb	r1, r0, #16
90020250:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020252:	eba1 0c0c 	sub.w	ip, r1, ip
90020256:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002025a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9002025e:	fb0c 770b 	mla	r7, ip, fp, r7
90020262:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020266:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9002026a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002026e:	ea4c 0c0b 	orr.w	ip, ip, fp
90020272:	fb02 770c 	mla	r7, r2, ip, r7
90020276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020278:	0d79      	lsrs	r1, r7, #21
9002027a:	8812      	ldrh	r2, [r2, #0]
9002027c:	097f      	lsrs	r7, r7, #5
9002027e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020282:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020286:	430f      	orrs	r7, r1
90020288:	1211      	asrs	r1, r2, #8
9002028a:	b2bb      	uxth	r3, r7
9002028c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020290:	10d7      	asrs	r7, r2, #3
90020292:	fb11 f104 	smulbb	r1, r1, r4
90020296:	1218      	asrs	r0, r3, #8
90020298:	00d2      	lsls	r2, r2, #3
9002029a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002029e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900202a2:	fb17 f704 	smulbb	r7, r7, r4
900202a6:	b2d2      	uxtb	r2, r2
900202a8:	fb00 1009 	mla	r0, r0, r9, r1
900202ac:	10d9      	asrs	r1, r3, #3
900202ae:	fb12 f204 	smulbb	r2, r2, r4
900202b2:	00db      	lsls	r3, r3, #3
900202b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900202b8:	b280      	uxth	r0, r0
900202ba:	b2db      	uxtb	r3, r3
900202bc:	fb01 7109 	mla	r1, r1, r9, r7
900202c0:	fb03 2309 	mla	r3, r3, r9, r2
900202c4:	1c42      	adds	r2, r0, #1
900202c6:	b289      	uxth	r1, r1
900202c8:	b29b      	uxth	r3, r3
900202ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900202ce:	1c4f      	adds	r7, r1, #1
900202d0:	1c5a      	adds	r2, r3, #1
900202d2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
900202d6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900202da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900202de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900202e0:	0949      	lsrs	r1, r1, #5
900202e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900202e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900202ea:	4310      	orrs	r0, r2
900202ec:	4308      	orrs	r0, r1
900202ee:	f823 0b02 	strh.w	r0, [r3], #2
900202f2:	930e      	str	r3, [sp, #56]	; 0x38
900202f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900202f6:	449a      	add	sl, r3
900202f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
900202fa:	441d      	add	r5, r3
900202fc:	e6ed      	b.n	900200da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
900202fe:	2800      	cmp	r0, #0
90020300:	f43f af7f 	beq.w	90020202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020304:	5cd3      	ldrb	r3, [r2, r3]
90020306:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002030a:	9310      	str	r3, [sp, #64]	; 0x40
9002030c:	e779      	b.n	90020202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002030e:	b019      	add	sp, #100	; 0x64
90020310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90020314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020318:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9002031c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
90020320:	f1b8 0f00 	cmp.w	r8, #0
90020324:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
90020328:	fb08 470e 	mla	r7, r8, lr, r4
9002032c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90020330:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90020334:	eb02 0907 	add.w	r9, r2, r7
90020338:	8808      	ldrh	r0, [r1, #0]
9002033a:	db67      	blt.n	9002040c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9002033c:	45c2      	cmp	sl, r8
9002033e:	dd65      	ble.n	9002040c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
90020340:	2c00      	cmp	r4, #0
90020342:	db61      	blt.n	90020408 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020344:	45a6      	cmp	lr, r4
90020346:	dd5f      	ble.n	90020408 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020348:	5dd2      	ldrb	r2, [r2, r7]
9002034a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9002034e:	1c62      	adds	r2, r4, #1
90020350:	d45f      	bmi.n	90020412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020352:	4596      	cmp	lr, r2
90020354:	dd5d      	ble.n	90020412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020356:	2d00      	cmp	r5, #0
90020358:	d05b      	beq.n	90020412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9002035a:	f899 2001 	ldrb.w	r2, [r9, #1]
9002035e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
90020362:	f118 0801 	adds.w	r8, r8, #1
90020366:	d458      	bmi.n	9002041a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020368:	45c2      	cmp	sl, r8
9002036a:	dd56      	ble.n	9002041a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9002036c:	2e00      	cmp	r6, #0
9002036e:	d054      	beq.n	9002041a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020370:	2c00      	cmp	r4, #0
90020372:	db50      	blt.n	90020416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020374:	45a6      	cmp	lr, r4
90020376:	dd4e      	ble.n	90020416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020378:	f819 200e 	ldrb.w	r2, [r9, lr]
9002037c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
90020380:	3401      	adds	r4, #1
90020382:	d407      	bmi.n	90020394 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020384:	45a6      	cmp	lr, r4
90020386:	dd05      	ble.n	90020394 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020388:	b125      	cbz	r5, 90020394 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9002038a:	44ce      	add	lr, r9
9002038c:	f89e 0001 	ldrb.w	r0, [lr, #1]
90020390:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
90020394:	fb15 f406 	smulbb	r4, r5, r6
90020398:	ea4f 430c 	mov.w	r3, ip, lsl #16
9002039c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900203a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900203a4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900203a8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900203ac:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900203b0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900203b4:	ea43 0c0c 	orr.w	ip, r3, ip
900203b8:	f1c6 0310 	rsb	r3, r6, #16
900203bc:	ea4e 0707 	orr.w	r7, lr, r7
900203c0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900203c4:	1b5b      	subs	r3, r3, r5
900203c6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900203ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900203ce:	437d      	muls	r5, r7
900203d0:	fb03 5c0c 	mla	ip, r3, ip, r5
900203d4:	0403      	lsls	r3, r0, #16
900203d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900203da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900203de:	4318      	orrs	r0, r3
900203e0:	0413      	lsls	r3, r2, #16
900203e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900203e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900203ea:	fb04 c000 	mla	r0, r4, r0, ip
900203ee:	4313      	orrs	r3, r2
900203f0:	fb06 0003 	mla	r0, r6, r3, r0
900203f4:	0d43      	lsrs	r3, r0, #21
900203f6:	0940      	lsrs	r0, r0, #5
900203f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900203fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020400:	4318      	orrs	r0, r3
90020402:	8008      	strh	r0, [r1, #0]
90020404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020408:	4684      	mov	ip, r0
9002040a:	e7a0      	b.n	9002034e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9002040c:	4607      	mov	r7, r0
9002040e:	4684      	mov	ip, r0
90020410:	e7a7      	b.n	90020362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020412:	4607      	mov	r7, r0
90020414:	e7a5      	b.n	90020362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020416:	4602      	mov	r2, r0
90020418:	e7b2      	b.n	90020380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9002041a:	4602      	mov	r2, r0
9002041c:	e7ba      	b.n	90020394 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9002041e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002041e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020422:	b093      	sub	sp, #76	; 0x4c
90020424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90020428:	920f      	str	r2, [sp, #60]	; 0x3c
9002042a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002042c:	9010      	str	r0, [sp, #64]	; 0x40
9002042e:	9108      	str	r1, [sp, #32]
90020430:	6850      	ldr	r0, [r2, #4]
90020432:	9306      	str	r3, [sp, #24]
90020434:	6812      	ldr	r2, [r2, #0]
90020436:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002043a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9002043e:	fb00 1303 	mla	r3, r0, r3, r1
90020442:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90020446:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020448:	681b      	ldr	r3, [r3, #0]
9002044a:	9307      	str	r3, [sp, #28]
9002044c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002044e:	685f      	ldr	r7, [r3, #4]
90020450:	3704      	adds	r7, #4
90020452:	9b08      	ldr	r3, [sp, #32]
90020454:	2b00      	cmp	r3, #0
90020456:	dc03      	bgt.n	90020460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90020458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002045a:	2b00      	cmp	r3, #0
9002045c:	f340 81b2 	ble.w	900207c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020460:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020462:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020466:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002046a:	1e48      	subs	r0, r1, #1
9002046c:	f102 3cff 	add.w	ip, r2, #4294967295
90020470:	9b06      	ldr	r3, [sp, #24]
90020472:	2b00      	cmp	r3, #0
90020474:	f340 80a9 	ble.w	900205ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020478:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002047c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020480:	d406      	bmi.n	90020490 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020482:	4586      	cmp	lr, r0
90020484:	da04      	bge.n	90020490 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020486:	2b00      	cmp	r3, #0
90020488:	db02      	blt.n	90020490 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9002048a:	4563      	cmp	r3, ip
9002048c:	f2c0 809e 	blt.w	900205cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
90020490:	f11e 0e01 	adds.w	lr, lr, #1
90020494:	f100 808f 	bmi.w	900205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020498:	4571      	cmp	r1, lr
9002049a:	f2c0 808c 	blt.w	900205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9002049e:	3301      	adds	r3, #1
900204a0:	f100 8089 	bmi.w	900205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900204a4:	429a      	cmp	r2, r3
900204a6:	f2c0 8086 	blt.w	900205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900204aa:	f8dd b018 	ldr.w	fp, [sp, #24]
900204ae:	46c8      	mov	r8, r9
900204b0:	f1bb 0f00 	cmp.w	fp, #0
900204b4:	f340 80a6 	ble.w	90020604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
900204b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
900204ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
900204be:	9b24      	ldr	r3, [sp, #144]	; 0x90
900204c0:	f3c4 3003 	ubfx	r0, r4, #12, #4
900204c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900204c8:	1422      	asrs	r2, r4, #16
900204ca:	f3c6 3103 	ubfx	r1, r6, #12, #4
900204ce:	689b      	ldr	r3, [r3, #8]
900204d0:	f100 80e3 	bmi.w	9002069a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900204d4:	f103 3aff 	add.w	sl, r3, #4294967295
900204d8:	4552      	cmp	r2, sl
900204da:	f280 80de 	bge.w	9002069a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900204de:	f1bc 0f00 	cmp.w	ip, #0
900204e2:	f2c0 80da 	blt.w	9002069a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900204e6:	f10e 3aff 	add.w	sl, lr, #4294967295
900204ea:	45d4      	cmp	ip, sl
900204ec:	f280 80d5 	bge.w	9002069a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900204f0:	b21b      	sxth	r3, r3
900204f2:	9d07      	ldr	r5, [sp, #28]
900204f4:	fb0c 2203 	mla	r2, ip, r3, r2
900204f8:	eb05 0a02 	add.w	sl, r5, r2
900204fc:	5caa      	ldrb	r2, [r5, r2]
900204fe:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
90020502:	2800      	cmp	r0, #0
90020504:	f000 80c0 	beq.w	90020688 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90020508:	f89a 2001 	ldrb.w	r2, [sl, #1]
9002050c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
90020510:	920b      	str	r2, [sp, #44]	; 0x2c
90020512:	b151      	cbz	r1, 9002052a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020514:	eb0a 0203 	add.w	r2, sl, r3
90020518:	f81a 3003 	ldrb.w	r3, [sl, r3]
9002051c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020520:	9309      	str	r3, [sp, #36]	; 0x24
90020522:	7853      	ldrb	r3, [r2, #1]
90020524:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020528:	930c      	str	r3, [sp, #48]	; 0x30
9002052a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002052c:	fb10 f201 	smulbb	r2, r0, r1
90020530:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020532:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020536:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002053a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002053e:	10d2      	asrs	r2, r2, #3
90020540:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020544:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
90020548:	ea4c 0c03 	orr.w	ip, ip, r3
9002054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002054e:	041b      	lsls	r3, r3, #16
90020550:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020554:	432b      	orrs	r3, r5
90020556:	4353      	muls	r3, r2
90020558:	fb0a 330c 	mla	r3, sl, ip, r3
9002055c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90020560:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90020564:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020568:	ea4c 0e0e 	orr.w	lr, ip, lr
9002056c:	f1c1 0c10 	rsb	ip, r1, #16
90020570:	ebac 0c00 	sub.w	ip, ip, r0
90020574:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
90020578:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9002057c:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020580:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020582:	0418      	lsls	r0, r3, #16
90020584:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020588:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002058c:	4318      	orrs	r0, r3
9002058e:	fb02 c200 	mla	r2, r2, r0, ip
90020592:	0d53      	lsrs	r3, r2, #21
90020594:	0952      	lsrs	r2, r2, #5
90020596:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002059a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002059e:	431a      	orrs	r2, r3
900205a0:	f8a8 2000 	strh.w	r2, [r8]
900205a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900205a6:	f108 0802 	add.w	r8, r8, #2
900205aa:	f10b 3bff 	add.w	fp, fp, #4294967295
900205ae:	441c      	add	r4, r3
900205b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900205b2:	441e      	add	r6, r3
900205b4:	e77c      	b.n	900204b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900205b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900205b8:	f109 0902 	add.w	r9, r9, #2
900205bc:	441c      	add	r4, r3
900205be:	9b20      	ldr	r3, [sp, #128]	; 0x80
900205c0:	441e      	add	r6, r3
900205c2:	9b06      	ldr	r3, [sp, #24]
900205c4:	3b01      	subs	r3, #1
900205c6:	9306      	str	r3, [sp, #24]
900205c8:	e752      	b.n	90020470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900205ca:	d020      	beq.n	9002060e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
900205cc:	9b06      	ldr	r3, [sp, #24]
900205ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
900205d0:	3b01      	subs	r3, #1
900205d2:	fb00 4003 	mla	r0, r0, r3, r4
900205d6:	1400      	asrs	r0, r0, #16
900205d8:	f53f af67 	bmi.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900205dc:	3901      	subs	r1, #1
900205de:	4288      	cmp	r0, r1
900205e0:	f6bf af63 	bge.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900205e4:	9920      	ldr	r1, [sp, #128]	; 0x80
900205e6:	fb01 6303 	mla	r3, r1, r3, r6
900205ea:	141b      	asrs	r3, r3, #16
900205ec:	f53f af5d 	bmi.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900205f0:	3a01      	subs	r2, #1
900205f2:	4293      	cmp	r3, r2
900205f4:	f6bf af59 	bge.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900205f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
900205fc:	46ca      	mov	sl, r9
900205fe:	f1b8 0f00 	cmp.w	r8, #0
90020602:	dc67      	bgt.n	900206d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90020604:	9b06      	ldr	r3, [sp, #24]
90020606:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002060a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9002060e:	9b08      	ldr	r3, [sp, #32]
90020610:	2b00      	cmp	r3, #0
90020612:	f340 80d7 	ble.w	900207c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020616:	ee30 0a04 	vadd.f32	s0, s0, s8
9002061a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002061c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020620:	eeb0 6a62 	vmov.f32	s12, s5
90020624:	eec6 7a80 	vdiv.f32	s15, s13, s0
90020628:	ee31 1a05 	vadd.f32	s2, s2, s10
9002062c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020630:	ee16 4a10 	vmov	r4, s12
90020634:	eeb0 6a43 	vmov.f32	s12, s6
90020638:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9002063c:	ee16 6a10 	vmov	r6, s12
90020640:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020644:	ee61 7a27 	vmul.f32	s15, s2, s15
90020648:	ee77 2a62 	vsub.f32	s5, s14, s5
9002064c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020650:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020654:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020658:	ee12 2a90 	vmov	r2, s5
9002065c:	eef0 2a47 	vmov.f32	s5, s14
90020660:	fb92 f3f3 	sdiv	r3, r2, r3
90020664:	ee13 2a10 	vmov	r2, s6
90020668:	931f      	str	r3, [sp, #124]	; 0x7c
9002066a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002066c:	eeb0 3a67 	vmov.f32	s6, s15
90020670:	fb92 f3f3 	sdiv	r3, r2, r3
90020674:	9320      	str	r3, [sp, #128]	; 0x80
90020676:	9b08      	ldr	r3, [sp, #32]
90020678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002067a:	3b01      	subs	r3, #1
9002067c:	9308      	str	r3, [sp, #32]
9002067e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020680:	bf08      	it	eq
90020682:	4613      	moveq	r3, r2
90020684:	9306      	str	r3, [sp, #24]
90020686:	e6e4      	b.n	90020452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020688:	2900      	cmp	r1, #0
9002068a:	f43f af4e 	beq.w	9002052a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9002068e:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020692:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020696:	9309      	str	r3, [sp, #36]	; 0x24
90020698:	e747      	b.n	9002052a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9002069a:	f112 0a01 	adds.w	sl, r2, #1
9002069e:	d481      	bmi.n	900205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900206a0:	4553      	cmp	r3, sl
900206a2:	f6ff af7f 	blt.w	900205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900206a6:	f11c 0a01 	adds.w	sl, ip, #1
900206aa:	f53f af7b 	bmi.w	900205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900206ae:	45d6      	cmp	lr, sl
900206b0:	f6ff af78 	blt.w	900205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900206b4:	b21b      	sxth	r3, r3
900206b6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
900206ba:	fa0f f28e 	sxth.w	r2, lr
900206be:	9300      	str	r3, [sp, #0]
900206c0:	463b      	mov	r3, r7
900206c2:	9201      	str	r2, [sp, #4]
900206c4:	9a07      	ldr	r2, [sp, #28]
900206c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
900206ca:	4641      	mov	r1, r8
900206cc:	9810      	ldr	r0, [sp, #64]	; 0x40
900206ce:	f7ff fe21 	bl	90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
900206d2:	e767      	b.n	900205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900206d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900206d6:	1422      	asrs	r2, r4, #16
900206d8:	1431      	asrs	r1, r6, #16
900206da:	9d07      	ldr	r5, [sp, #28]
900206dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900206e0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
900206e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
900206e8:	fb03 2101 	mla	r1, r3, r1, r2
900206ec:	9a07      	ldr	r2, [sp, #28]
900206ee:	440a      	add	r2, r1
900206f0:	5c69      	ldrb	r1, [r5, r1]
900206f2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
900206f6:	f1be 0f00 	cmp.w	lr, #0
900206fa:	d05c      	beq.n	900207b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
900206fc:	f892 c001 	ldrb.w	ip, [r2, #1]
90020700:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
90020704:	950d      	str	r5, [sp, #52]	; 0x34
90020706:	b150      	cbz	r0, 9002071e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020708:	eb02 0c03 	add.w	ip, r2, r3
9002070c:	5cd3      	ldrb	r3, [r2, r3]
9002070e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020712:	930a      	str	r3, [sp, #40]	; 0x28
90020714:	f89c 3001 	ldrb.w	r3, [ip, #1]
90020718:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9002071c:	930e      	str	r3, [sp, #56]	; 0x38
9002071e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020720:	fb1e f200 	smulbb	r2, lr, r0
90020724:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020726:	f108 38ff 	add.w	r8, r8, #4294967295
9002072a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9002072e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020732:	10d2      	asrs	r2, r2, #3
90020734:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
90020738:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002073c:	ea4c 0c03 	orr.w	ip, ip, r3
90020740:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
90020744:	9311      	str	r3, [sp, #68]	; 0x44
90020746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020748:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002074a:	041b      	lsls	r3, r3, #16
9002074c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020750:	ea43 030b 	orr.w	r3, r3, fp
90020754:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020758:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002075c:	4353      	muls	r3, r2
9002075e:	fb05 3c0c 	mla	ip, r5, ip, r3
90020762:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020766:	ea43 0b01 	orr.w	fp, r3, r1
9002076a:	f1c0 0110 	rsb	r1, r0, #16
9002076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020770:	eba1 0e0e 	sub.w	lr, r1, lr
90020774:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
90020778:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9002077c:	fb0e cc0b 	mla	ip, lr, fp, ip
90020780:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90020784:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90020788:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002078c:	ea4b 0e0e 	orr.w	lr, fp, lr
90020790:	fb02 cc0e 	mla	ip, r2, lr, ip
90020794:	ea4f 535c 	mov.w	r3, ip, lsr #21
90020798:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002079c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900207a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900207a4:	ea43 0c0c 	orr.w	ip, r3, ip
900207a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900207aa:	441c      	add	r4, r3
900207ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
900207ae:	f82a cb02 	strh.w	ip, [sl], #2
900207b2:	441e      	add	r6, r3
900207b4:	e723      	b.n	900205fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
900207b6:	2800      	cmp	r0, #0
900207b8:	d0b1      	beq.n	9002071e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
900207ba:	5cd3      	ldrb	r3, [r2, r3]
900207bc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900207c0:	930a      	str	r3, [sp, #40]	; 0x28
900207c2:	e7ac      	b.n	9002071e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
900207c4:	b013      	add	sp, #76	; 0x4c
900207c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900207ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
900207ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900207ce:	880d      	ldrh	r5, [r1, #0]
900207d0:	b087      	sub	sp, #28
900207d2:	10ef      	asrs	r7, r5, #3
900207d4:	9103      	str	r1, [sp, #12]
900207d6:	ea4f 2a25 	mov.w	sl, r5, asr #8
900207da:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
900207de:	00ed      	lsls	r5, r5, #3
900207e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900207e4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
900207e8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
900207ec:	b2ed      	uxtb	r5, r5
900207ee:	9701      	str	r7, [sp, #4]
900207f0:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
900207f4:	9502      	str	r5, [sp, #8]
900207f6:	9d01      	ldr	r5, [sp, #4]
900207f8:	9902      	ldr	r1, [sp, #8]
900207fa:	022d      	lsls	r5, r5, #8
900207fc:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
90020800:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
90020804:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
90020808:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9002080c:	430d      	orrs	r5, r1
9002080e:	fb06 0709 	mla	r7, r6, r9, r0
90020812:	2e00      	cmp	r6, #0
90020814:	9505      	str	r5, [sp, #20]
90020816:	eb02 0c07 	add.w	ip, r2, r7
9002081a:	f2c0 80b6 	blt.w	9002098a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9002081e:	45b3      	cmp	fp, r6
90020820:	f340 80b3 	ble.w	9002098a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020824:	2800      	cmp	r0, #0
90020826:	f2c0 80ae 	blt.w	90020986 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9002082a:	4581      	cmp	r9, r0
9002082c:	f340 80ab 	ble.w	90020986 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020830:	5dd7      	ldrb	r7, [r2, r7]
90020832:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020836:	441f      	add	r7, r3
90020838:	1c42      	adds	r2, r0, #1
9002083a:	f100 80a9 	bmi.w	90020990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9002083e:	4591      	cmp	r9, r2
90020840:	f340 80a6 	ble.w	90020990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020844:	2c00      	cmp	r4, #0
90020846:	f000 80a3 	beq.w	90020990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9002084a:	f89c 5001 	ldrb.w	r5, [ip, #1]
9002084e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020852:	441d      	add	r5, r3
90020854:	3601      	adds	r6, #1
90020856:	f100 809f 	bmi.w	90020998 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9002085a:	45b3      	cmp	fp, r6
9002085c:	f340 809c 	ble.w	90020998 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020860:	f1be 0f00 	cmp.w	lr, #0
90020864:	f000 8098 	beq.w	90020998 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020868:	2800      	cmp	r0, #0
9002086a:	f2c0 8093 	blt.w	90020994 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9002086e:	4581      	cmp	r9, r0
90020870:	f340 8090 	ble.w	90020994 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020874:	f81c 6009 	ldrb.w	r6, [ip, r9]
90020878:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9002087c:	441e      	add	r6, r3
9002087e:	3001      	adds	r0, #1
90020880:	f100 808d 	bmi.w	9002099e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020884:	4581      	cmp	r9, r0
90020886:	f340 808a 	ble.w	9002099e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9002088a:	2c00      	cmp	r4, #0
9002088c:	f000 8087 	beq.w	9002099e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020890:	44e1      	add	r9, ip
90020892:	f899 2001 	ldrb.w	r2, [r9, #1]
90020896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002089a:	4413      	add	r3, r2
9002089c:	b2a4      	uxth	r4, r4
9002089e:	f897 c002 	ldrb.w	ip, [r7, #2]
900208a2:	fa1f fe8e 	uxth.w	lr, lr
900208a6:	9901      	ldr	r1, [sp, #4]
900208a8:	fb04 fb0e 	mul.w	fp, r4, lr
900208ac:	0124      	lsls	r4, r4, #4
900208ae:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
900208b2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
900208b6:	eba4 040b 	sub.w	r4, r4, fp
900208ba:	fa1f f08e 	uxth.w	r0, lr
900208be:	b2a2      	uxth	r2, r4
900208c0:	78ac      	ldrb	r4, [r5, #2]
900208c2:	eba9 0900 	sub.w	r9, r9, r0
900208c6:	fa1f fe88 	uxth.w	lr, r8
900208ca:	4354      	muls	r4, r2
900208cc:	ea6f 0808 	mvn.w	r8, r8
900208d0:	fa1f f989 	uxth.w	r9, r9
900208d4:	fa5f f888 	uxtb.w	r8, r8
900208d8:	fb09 440c 	mla	r4, r9, ip, r4
900208dc:	f896 c002 	ldrb.w	ip, [r6, #2]
900208e0:	fb1a fa08 	smulbb	sl, sl, r8
900208e4:	fb00 440c 	mla	r4, r0, ip, r4
900208e8:	f893 c002 	ldrb.w	ip, [r3, #2]
900208ec:	fb0b 4c0c 	mla	ip, fp, ip, r4
900208f0:	787c      	ldrb	r4, [r7, #1]
900208f2:	783f      	ldrb	r7, [r7, #0]
900208f4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
900208f8:	fb0c ac0e 	mla	ip, ip, lr, sl
900208fc:	f895 a001 	ldrb.w	sl, [r5, #1]
90020900:	782d      	ldrb	r5, [r5, #0]
90020902:	fb02 fa0a 	mul.w	sl, r2, sl
90020906:	fa1f fc8c 	uxth.w	ip, ip
9002090a:	436a      	muls	r2, r5
9002090c:	7835      	ldrb	r5, [r6, #0]
9002090e:	fb09 aa04 	mla	sl, r9, r4, sl
90020912:	7874      	ldrb	r4, [r6, #1]
90020914:	fb09 2207 	mla	r2, r9, r7, r2
90020918:	fb00 aa04 	mla	sl, r0, r4, sl
9002091c:	785c      	ldrb	r4, [r3, #1]
9002091e:	fb00 2005 	mla	r0, r0, r5, r2
90020922:	781b      	ldrb	r3, [r3, #0]
90020924:	fb0b a404 	mla	r4, fp, r4, sl
90020928:	fb11 fa08 	smulbb	sl, r1, r8
9002092c:	fb0b 0b03 	mla	fp, fp, r3, r0
90020930:	9b02      	ldr	r3, [sp, #8]
90020932:	f3c4 2407 	ubfx	r4, r4, #8, #8
90020936:	fb13 f808 	smulbb	r8, r3, r8
9002093a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9002093e:	fb04 a40e 	mla	r4, r4, lr, sl
90020942:	f10c 0301 	add.w	r3, ip, #1
90020946:	fb0b 8e0e 	mla	lr, fp, lr, r8
9002094a:	b2a4      	uxth	r4, r4
9002094c:	fa1f fe8e 	uxth.w	lr, lr
90020950:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020954:	f104 0a01 	add.w	sl, r4, #1
90020958:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9002095c:	f10e 0c01 	add.w	ip, lr, #1
90020960:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90020964:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020968:	0964      	lsrs	r4, r4, #5
9002096a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9002096e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90020972:	ea4c 0c03 	orr.w	ip, ip, r3
90020976:	9b03      	ldr	r3, [sp, #12]
90020978:	ea4c 0c04 	orr.w	ip, ip, r4
9002097c:	f8a3 c000 	strh.w	ip, [r3]
90020980:	b007      	add	sp, #28
90020982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020986:	af05      	add	r7, sp, #20
90020988:	e756      	b.n	90020838 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9002098a:	ad05      	add	r5, sp, #20
9002098c:	462f      	mov	r7, r5
9002098e:	e761      	b.n	90020854 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020990:	ad05      	add	r5, sp, #20
90020992:	e75f      	b.n	90020854 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020994:	ae05      	add	r6, sp, #20
90020996:	e772      	b.n	9002087e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90020998:	ab05      	add	r3, sp, #20
9002099a:	461e      	mov	r6, r3
9002099c:	e77e      	b.n	9002089c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9002099e:	ab05      	add	r3, sp, #20
900209a0:	e77c      	b.n	9002089c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

900209a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900209a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900209a6:	b095      	sub	sp, #84	; 0x54
900209a8:	9212      	str	r2, [sp, #72]	; 0x48
900209aa:	9309      	str	r3, [sp, #36]	; 0x24
900209ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
900209ae:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
900209b2:	9013      	str	r0, [sp, #76]	; 0x4c
900209b4:	930f      	str	r3, [sp, #60]	; 0x3c
900209b6:	6850      	ldr	r0, [r2, #4]
900209b8:	910e      	str	r1, [sp, #56]	; 0x38
900209ba:	6812      	ldr	r2, [r2, #0]
900209bc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
900209c0:	fb00 1303 	mla	r3, r0, r3, r1
900209c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900209c8:	930a      	str	r3, [sp, #40]	; 0x28
900209ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
900209cc:	681b      	ldr	r3, [r3, #0]
900209ce:	930d      	str	r3, [sp, #52]	; 0x34
900209d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900209d2:	685c      	ldr	r4, [r3, #4]
900209d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900209d6:	3404      	adds	r4, #4
900209d8:	43db      	mvns	r3, r3
900209da:	b2db      	uxtb	r3, r3
900209dc:	930b      	str	r3, [sp, #44]	; 0x2c
900209de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900209e0:	2b00      	cmp	r3, #0
900209e2:	dc03      	bgt.n	900209ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900209e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
900209e6:	2b00      	cmp	r3, #0
900209e8:	f340 8255 	ble.w	90020e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
900209ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
900209ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900209f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900209f6:	1e48      	subs	r0, r1, #1
900209f8:	1e55      	subs	r5, r2, #1
900209fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900209fc:	2b00      	cmp	r3, #0
900209fe:	f340 80f9 	ble.w	90020bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90020a02:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90020a04:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020a06:	1436      	asrs	r6, r6, #16
90020a08:	ea4f 4323 	mov.w	r3, r3, asr #16
90020a0c:	d406      	bmi.n	90020a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020a0e:	4286      	cmp	r6, r0
90020a10:	da04      	bge.n	90020a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020a12:	2b00      	cmp	r3, #0
90020a14:	db02      	blt.n	90020a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020a16:	42ab      	cmp	r3, r5
90020a18:	f2c0 80ed 	blt.w	90020bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
90020a1c:	3601      	adds	r6, #1
90020a1e:	f100 80da 	bmi.w	90020bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020a22:	42b1      	cmp	r1, r6
90020a24:	f2c0 80d7 	blt.w	90020bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020a28:	3301      	adds	r3, #1
90020a2a:	f100 80d4 	bmi.w	90020bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020a2e:	429a      	cmp	r2, r3
90020a30:	f2c0 80d1 	blt.w	90020bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020a36:	9311      	str	r3, [sp, #68]	; 0x44
90020a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020a3a:	930c      	str	r3, [sp, #48]	; 0x30
90020a3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020a3e:	2b00      	cmp	r3, #0
90020a40:	f340 80fa 	ble.w	90020c38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90020a44:	9826      	ldr	r0, [sp, #152]	; 0x98
90020a46:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020a4a:	68c6      	ldr	r6, [r0, #12]
90020a4c:	141d      	asrs	r5, r3, #16
90020a4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020a50:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020a56:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020a58:	1400      	asrs	r0, r0, #16
90020a5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020a5e:	6892      	ldr	r2, [r2, #8]
90020a60:	f100 813e 	bmi.w	90020ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020a64:	1e57      	subs	r7, r2, #1
90020a66:	42b8      	cmp	r0, r7
90020a68:	f280 813a 	bge.w	90020ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020a6c:	2d00      	cmp	r5, #0
90020a6e:	f2c0 8137 	blt.w	90020ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020a72:	1e77      	subs	r7, r6, #1
90020a74:	42bd      	cmp	r5, r7
90020a76:	f280 8133 	bge.w	90020ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020a7a:	b212      	sxth	r2, r2
90020a7c:	fb05 0002 	mla	r0, r5, r2, r0
90020a80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020a82:	f815 a000 	ldrb.w	sl, [r5, r0]
90020a86:	182e      	adds	r6, r5, r0
90020a88:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
90020a8c:	eb04 050a 	add.w	r5, r4, sl
90020a90:	2b00      	cmp	r3, #0
90020a92:	f000 8117 	beq.w	90020cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
90020a96:	f896 c001 	ldrb.w	ip, [r6, #1]
90020a9a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90020a9e:	44a4      	add	ip, r4
90020aa0:	2900      	cmp	r1, #0
90020aa2:	f000 8117 	beq.w	90020cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
90020aa6:	18b0      	adds	r0, r6, r2
90020aa8:	5cb2      	ldrb	r2, [r6, r2]
90020aaa:	7840      	ldrb	r0, [r0, #1]
90020aac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020ab0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020ab4:	4422      	add	r2, r4
90020ab6:	4420      	add	r0, r4
90020ab8:	b29b      	uxth	r3, r3
90020aba:	f89c 7002 	ldrb.w	r7, [ip, #2]
90020abe:	b289      	uxth	r1, r1
90020ac0:	f895 b002 	ldrb.w	fp, [r5, #2]
90020ac4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020ac6:	fb03 f901 	mul.w	r9, r3, r1
90020aca:	011b      	lsls	r3, r3, #4
90020acc:	f8b6 e000 	ldrh.w	lr, [r6]
90020ad0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020ad4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90020ad8:	eba3 0309 	sub.w	r3, r3, r9
90020adc:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90020ae0:	b289      	uxth	r1, r1
90020ae2:	f814 a00a 	ldrb.w	sl, [r4, sl]
90020ae6:	b29b      	uxth	r3, r3
90020ae8:	eba8 0801 	sub.w	r8, r8, r1
90020aec:	435f      	muls	r7, r3
90020aee:	fa1f f888 	uxth.w	r8, r8
90020af2:	9310      	str	r3, [sp, #64]	; 0x40
90020af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020af6:	fb08 770b 	mla	r7, r8, fp, r7
90020afa:	f892 b002 	ldrb.w	fp, [r2, #2]
90020afe:	fb01 770b 	mla	r7, r1, fp, r7
90020b02:	f890 b002 	ldrb.w	fp, [r0, #2]
90020b06:	fb09 770b 	mla	r7, r9, fp, r7
90020b0a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
90020b0e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90020b12:	f3c7 2707 	ubfx	r7, r7, #8, #8
90020b16:	fb1b fb03 	smulbb	fp, fp, r3
90020b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020b1c:	fb07 b706 	mla	r7, r7, r6, fp
90020b20:	f895 b001 	ldrb.w	fp, [r5, #1]
90020b24:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020b28:	f89c c000 	ldrb.w	ip, [ip]
90020b2c:	b2bf      	uxth	r7, r7
90020b2e:	435d      	muls	r5, r3
90020b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020b32:	fb08 550b 	mla	r5, r8, fp, r5
90020b36:	f892 b001 	ldrb.w	fp, [r2, #1]
90020b3a:	fb01 550b 	mla	r5, r1, fp, r5
90020b3e:	f890 b001 	ldrb.w	fp, [r0, #1]
90020b42:	fb09 550b 	mla	r5, r9, fp, r5
90020b46:	ea4f 0bee 	mov.w	fp, lr, asr #3
90020b4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020b4e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90020b52:	f3c5 2507 	ubfx	r5, r5, #8, #8
90020b56:	fa5f fe8e 	uxtb.w	lr, lr
90020b5a:	fb1b fb03 	smulbb	fp, fp, r3
90020b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020b60:	fb03 f30c 	mul.w	r3, r3, ip
90020b64:	f892 c000 	ldrb.w	ip, [r2]
90020b68:	fb05 b506 	mla	r5, r5, r6, fp
90020b6c:	fb08 330a 	mla	r3, r8, sl, r3
90020b70:	b2ad      	uxth	r5, r5
90020b72:	fb01 330c 	mla	r3, r1, ip, r3
90020b76:	f890 c000 	ldrb.w	ip, [r0]
90020b7a:	f105 0b01 	add.w	fp, r5, #1
90020b7e:	fb09 3c0c 	mla	ip, r9, ip, r3
90020b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020b84:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90020b88:	fb1e fe03 	smulbb	lr, lr, r3
90020b8c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020b90:	1c7b      	adds	r3, r7, #1
90020b92:	096d      	lsrs	r5, r5, #5
90020b94:	fb0c e606 	mla	r6, ip, r6, lr
90020b98:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90020b9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020ba0:	b2b6      	uxth	r6, r6
90020ba2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
90020ba6:	1c77      	adds	r7, r6, #1
90020ba8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
90020bac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90020bb0:	431f      	orrs	r7, r3
90020bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020bb4:	433d      	orrs	r5, r7
90020bb6:	801d      	strh	r5, [r3, #0]
90020bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020bba:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020bbc:	3302      	adds	r3, #2
90020bbe:	930c      	str	r3, [sp, #48]	; 0x30
90020bc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020bc2:	4413      	add	r3, r2
90020bc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
90020bc6:	931f      	str	r3, [sp, #124]	; 0x7c
90020bc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020bca:	4413      	add	r3, r2
90020bcc:	9320      	str	r3, [sp, #128]	; 0x80
90020bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020bd0:	3b01      	subs	r3, #1
90020bd2:	9311      	str	r3, [sp, #68]	; 0x44
90020bd4:	e732      	b.n	90020a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90020bd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020bd8:	9e21      	ldr	r6, [sp, #132]	; 0x84
90020bda:	4433      	add	r3, r6
90020bdc:	9e22      	ldr	r6, [sp, #136]	; 0x88
90020bde:	931f      	str	r3, [sp, #124]	; 0x7c
90020be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020be2:	4433      	add	r3, r6
90020be4:	9320      	str	r3, [sp, #128]	; 0x80
90020be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020be8:	3b01      	subs	r3, #1
90020bea:	9309      	str	r3, [sp, #36]	; 0x24
90020bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020bee:	3302      	adds	r3, #2
90020bf0:	930a      	str	r3, [sp, #40]	; 0x28
90020bf2:	e702      	b.n	900209fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020bf4:	d027      	beq.n	90020c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
90020bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020bf8:	9821      	ldr	r0, [sp, #132]	; 0x84
90020bfa:	3b01      	subs	r3, #1
90020bfc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90020bfe:	fb00 5003 	mla	r0, r0, r3, r5
90020c02:	1400      	asrs	r0, r0, #16
90020c04:	f53f af16 	bmi.w	90020a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020c08:	3901      	subs	r1, #1
90020c0a:	4288      	cmp	r0, r1
90020c0c:	f6bf af12 	bge.w	90020a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020c10:	9922      	ldr	r1, [sp, #136]	; 0x88
90020c12:	9820      	ldr	r0, [sp, #128]	; 0x80
90020c14:	fb01 0303 	mla	r3, r1, r3, r0
90020c18:	141b      	asrs	r3, r3, #16
90020c1a:	f53f af0b 	bmi.w	90020a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020c1e:	3a01      	subs	r2, #1
90020c20:	4293      	cmp	r3, r2
90020c22:	f6bf af07 	bge.w	90020a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020c28:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
90020c2c:	9311      	str	r3, [sp, #68]	; 0x44
90020c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020c30:	930c      	str	r3, [sp, #48]	; 0x30
90020c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020c34:	2b00      	cmp	r3, #0
90020c36:	dc70      	bgt.n	90020d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020c3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90020c40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020c44:	930a      	str	r3, [sp, #40]	; 0x28
90020c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020c48:	2b00      	cmp	r3, #0
90020c4a:	f340 8124 	ble.w	90020e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
90020c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020c52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020c54:	ee30 0a04 	vadd.f32	s0, s0, s8
90020c58:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020c5c:	eef0 6a62 	vmov.f32	s13, s5
90020c60:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020c64:	ee31 1a05 	vadd.f32	s2, s2, s10
90020c68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020c6c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
90020c70:	eef0 6a43 	vmov.f32	s13, s6
90020c74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020c78:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
90020c7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020c80:	ee61 7a27 	vmul.f32	s15, s2, s15
90020c84:	ee77 2a62 	vsub.f32	s5, s14, s5
90020c88:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020c8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020c90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020c94:	ee12 2a90 	vmov	r2, s5
90020c98:	eef0 2a47 	vmov.f32	s5, s14
90020c9c:	fb92 f3f3 	sdiv	r3, r2, r3
90020ca0:	ee13 2a10 	vmov	r2, s6
90020ca4:	9321      	str	r3, [sp, #132]	; 0x84
90020ca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020ca8:	eeb0 3a67 	vmov.f32	s6, s15
90020cac:	fb92 f3f3 	sdiv	r3, r2, r3
90020cb0:	9322      	str	r3, [sp, #136]	; 0x88
90020cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
90020cb6:	3b01      	subs	r3, #1
90020cb8:	930e      	str	r3, [sp, #56]	; 0x38
90020cba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020cbc:	bf08      	it	eq
90020cbe:	4613      	moveq	r3, r2
90020cc0:	9309      	str	r3, [sp, #36]	; 0x24
90020cc2:	e68c      	b.n	900209de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90020cc4:	b149      	cbz	r1, 90020cda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
90020cc6:	5cb2      	ldrb	r2, [r6, r2]
90020cc8:	4628      	mov	r0, r5
90020cca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020cce:	4422      	add	r2, r4
90020cd0:	46ac      	mov	ip, r5
90020cd2:	e6f1      	b.n	90020ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020cd4:	4628      	mov	r0, r5
90020cd6:	462a      	mov	r2, r5
90020cd8:	e6ee      	b.n	90020ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020cda:	4628      	mov	r0, r5
90020cdc:	462a      	mov	r2, r5
90020cde:	e7f7      	b.n	90020cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
90020ce0:	1c47      	adds	r7, r0, #1
90020ce2:	f53f af69 	bmi.w	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020ce6:	42ba      	cmp	r2, r7
90020ce8:	f6ff af66 	blt.w	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020cec:	1c6f      	adds	r7, r5, #1
90020cee:	f53f af63 	bmi.w	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020cf2:	42be      	cmp	r6, r7
90020cf4:	f6ff af60 	blt.w	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020cf8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90020cfa:	b236      	sxth	r6, r6
90020cfc:	b212      	sxth	r2, r2
90020cfe:	9002      	str	r0, [sp, #8]
90020d00:	9601      	str	r6, [sp, #4]
90020d02:	9200      	str	r2, [sp, #0]
90020d04:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020d06:	e9cd 1705 	strd	r1, r7, [sp, #20]
90020d0a:	e9cd 5303 	strd	r5, r3, [sp, #12]
90020d0e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
90020d12:	4623      	mov	r3, r4
90020d14:	f7ff fd59 	bl	900207ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
90020d18:	e74e      	b.n	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020d1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020d1c:	9820      	ldr	r0, [sp, #128]	; 0x80
90020d1e:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020d22:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90020d24:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020d26:	1400      	asrs	r0, r0, #16
90020d28:	142d      	asrs	r5, r5, #16
90020d2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020d2c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90020d30:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020d34:	fb02 5000 	mla	r0, r2, r0, r5
90020d38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020d3a:	f815 9000 	ldrb.w	r9, [r5, r0]
90020d3e:	182e      	adds	r6, r5, r0
90020d40:	eb09 0949 	add.w	r9, r9, r9, lsl #1
90020d44:	eb04 0509 	add.w	r5, r4, r9
90020d48:	2b00      	cmp	r3, #0
90020d4a:	f000 8096 	beq.w	90020e7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90020d4e:	7877      	ldrb	r7, [r6, #1]
90020d50:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020d54:	4427      	add	r7, r4
90020d56:	2900      	cmp	r1, #0
90020d58:	f000 8097 	beq.w	90020e8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
90020d5c:	18b0      	adds	r0, r6, r2
90020d5e:	5cb2      	ldrb	r2, [r6, r2]
90020d60:	7840      	ldrb	r0, [r0, #1]
90020d62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020d66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020d6a:	4422      	add	r2, r4
90020d6c:	4420      	add	r0, r4
90020d6e:	b29b      	uxth	r3, r3
90020d70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020d72:	b289      	uxth	r1, r1
90020d74:	f895 b002 	ldrb.w	fp, [r5, #2]
90020d78:	f8b6 c000 	ldrh.w	ip, [r6]
90020d7c:	fb03 f801 	mul.w	r8, r3, r1
90020d80:	011b      	lsls	r3, r3, #4
90020d82:	78be      	ldrb	r6, [r7, #2]
90020d84:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
90020d88:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90020d8c:	eba3 0308 	sub.w	r3, r3, r8
90020d90:	f814 9009 	ldrb.w	r9, [r4, r9]
90020d94:	b289      	uxth	r1, r1
90020d96:	b29b      	uxth	r3, r3
90020d98:	ebae 0e01 	sub.w	lr, lr, r1
90020d9c:	435e      	muls	r6, r3
90020d9e:	fa1f fe8e 	uxth.w	lr, lr
90020da2:	9310      	str	r3, [sp, #64]	; 0x40
90020da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020da6:	fb0e 660b 	mla	r6, lr, fp, r6
90020daa:	f892 b002 	ldrb.w	fp, [r2, #2]
90020dae:	fb01 660b 	mla	r6, r1, fp, r6
90020db2:	f890 b002 	ldrb.w	fp, [r0, #2]
90020db6:	fb08 660b 	mla	r6, r8, fp, r6
90020dba:	ea4f 2b2c 	mov.w	fp, ip, asr #8
90020dbe:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90020dc2:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020dc6:	fb1b fb03 	smulbb	fp, fp, r3
90020dca:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020dcc:	fb06 b60a 	mla	r6, r6, sl, fp
90020dd0:	f895 b001 	ldrb.w	fp, [r5, #1]
90020dd4:	787d      	ldrb	r5, [r7, #1]
90020dd6:	783f      	ldrb	r7, [r7, #0]
90020dd8:	b2b6      	uxth	r6, r6
90020dda:	435d      	muls	r5, r3
90020ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020dde:	fb0e 550b 	mla	r5, lr, fp, r5
90020de2:	f892 b001 	ldrb.w	fp, [r2, #1]
90020de6:	fb01 550b 	mla	r5, r1, fp, r5
90020dea:	f890 b001 	ldrb.w	fp, [r0, #1]
90020dee:	fb08 550b 	mla	r5, r8, fp, r5
90020df2:	ea4f 0bec 	mov.w	fp, ip, asr #3
90020df6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90020dfa:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90020dfe:	f3c5 2507 	ubfx	r5, r5, #8, #8
90020e02:	fa5f fc8c 	uxtb.w	ip, ip
90020e06:	fb1b fb03 	smulbb	fp, fp, r3
90020e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020e0c:	437b      	muls	r3, r7
90020e0e:	7817      	ldrb	r7, [r2, #0]
90020e10:	fb05 b50a 	mla	r5, r5, sl, fp
90020e14:	fb0e 3309 	mla	r3, lr, r9, r3
90020e18:	b2ad      	uxth	r5, r5
90020e1a:	fb01 3307 	mla	r3, r1, r7, r3
90020e1e:	7807      	ldrb	r7, [r0, #0]
90020e20:	f105 0b01 	add.w	fp, r5, #1
90020e24:	fb08 3707 	mla	r7, r8, r7, r3
90020e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020e2a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90020e2e:	fb1c fc03 	smulbb	ip, ip, r3
90020e32:	f3c7 2707 	ubfx	r7, r7, #8, #8
90020e36:	1c73      	adds	r3, r6, #1
90020e38:	096d      	lsrs	r5, r5, #5
90020e3a:	fb07 c70a 	mla	r7, r7, sl, ip
90020e3e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90020e42:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020e46:	b2bf      	uxth	r7, r7
90020e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020e4a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90020e4e:	1c7a      	adds	r2, r7, #1
90020e50:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90020e54:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020e58:	4316      	orrs	r6, r2
90020e5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020e5c:	432e      	orrs	r6, r5
90020e5e:	f823 6b02 	strh.w	r6, [r3], #2
90020e62:	930c      	str	r3, [sp, #48]	; 0x30
90020e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020e66:	4413      	add	r3, r2
90020e68:	9a22      	ldr	r2, [sp, #136]	; 0x88
90020e6a:	931f      	str	r3, [sp, #124]	; 0x7c
90020e6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020e6e:	4413      	add	r3, r2
90020e70:	9320      	str	r3, [sp, #128]	; 0x80
90020e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020e74:	3b01      	subs	r3, #1
90020e76:	9311      	str	r3, [sp, #68]	; 0x44
90020e78:	e6db      	b.n	90020c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
90020e7a:	b149      	cbz	r1, 90020e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
90020e7c:	5cb2      	ldrb	r2, [r6, r2]
90020e7e:	4628      	mov	r0, r5
90020e80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020e84:	4422      	add	r2, r4
90020e86:	462f      	mov	r7, r5
90020e88:	e771      	b.n	90020d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90020e8a:	4628      	mov	r0, r5
90020e8c:	462a      	mov	r2, r5
90020e8e:	e76e      	b.n	90020d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90020e90:	4628      	mov	r0, r5
90020e92:	462a      	mov	r2, r5
90020e94:	e7f7      	b.n	90020e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020e96:	b015      	add	sp, #84	; 0x54
90020e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020e9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
90020e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020ea0:	880f      	ldrh	r7, [r1, #0]
90020ea2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
90020ea6:	023c      	lsls	r4, r7, #8
90020ea8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
90020eac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
90020eb0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
90020eb4:	017c      	lsls	r4, r7, #5
90020eb6:	00ff      	lsls	r7, r7, #3
90020eb8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90020ebc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
90020ec0:	b2ff      	uxtb	r7, r7
90020ec2:	ea4b 0404 	orr.w	r4, fp, r4
90020ec6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
90020eca:	4327      	orrs	r7, r4
90020ecc:	fb05 ca0e 	mla	sl, r5, lr, ip
90020ed0:	2d00      	cmp	r5, #0
90020ed2:	9701      	str	r7, [sp, #4]
90020ed4:	eb02 080a 	add.w	r8, r2, sl
90020ed8:	db7e      	blt.n	90020fd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
90020eda:	45a9      	cmp	r9, r5
90020edc:	dd7c      	ble.n	90020fd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
90020ede:	f1bc 0f00 	cmp.w	ip, #0
90020ee2:	db77      	blt.n	90020fd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90020ee4:	45e6      	cmp	lr, ip
90020ee6:	dd75      	ble.n	90020fd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90020ee8:	f812 700a 	ldrb.w	r7, [r2, sl]
90020eec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020ef0:	441f      	add	r7, r3
90020ef2:	f11c 0201 	adds.w	r2, ip, #1
90020ef6:	d472      	bmi.n	90020fde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020ef8:	4596      	cmp	lr, r2
90020efa:	dd70      	ble.n	90020fde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020efc:	2800      	cmp	r0, #0
90020efe:	d06e      	beq.n	90020fde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020f00:	f898 4001 	ldrb.w	r4, [r8, #1]
90020f04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90020f08:	441c      	add	r4, r3
90020f0a:	3501      	adds	r5, #1
90020f0c:	d46b      	bmi.n	90020fe6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020f0e:	45a9      	cmp	r9, r5
90020f10:	dd69      	ble.n	90020fe6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020f12:	2e00      	cmp	r6, #0
90020f14:	d067      	beq.n	90020fe6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020f16:	f1bc 0f00 	cmp.w	ip, #0
90020f1a:	db62      	blt.n	90020fe2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90020f1c:	45e6      	cmp	lr, ip
90020f1e:	dd60      	ble.n	90020fe2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90020f20:	f818 500e 	ldrb.w	r5, [r8, lr]
90020f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020f28:	441d      	add	r5, r3
90020f2a:	f11c 0201 	adds.w	r2, ip, #1
90020f2e:	d45d      	bmi.n	90020fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020f30:	4596      	cmp	lr, r2
90020f32:	dd5b      	ble.n	90020fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020f34:	2800      	cmp	r0, #0
90020f36:	d059      	beq.n	90020fec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020f38:	44c6      	add	lr, r8
90020f3a:	f89e 2001 	ldrb.w	r2, [lr, #1]
90020f3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020f42:	4413      	add	r3, r2
90020f44:	b280      	uxth	r0, r0
90020f46:	f897 e002 	ldrb.w	lr, [r7, #2]
90020f4a:	b2b2      	uxth	r2, r6
90020f4c:	f897 9000 	ldrb.w	r9, [r7]
90020f50:	787f      	ldrb	r7, [r7, #1]
90020f52:	fb00 f602 	mul.w	r6, r0, r2
90020f56:	0100      	lsls	r0, r0, #4
90020f58:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
90020f5c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
90020f60:	1b80      	subs	r0, r0, r6
90020f62:	fa1f fc82 	uxth.w	ip, r2
90020f66:	b282      	uxth	r2, r0
90020f68:	78a0      	ldrb	r0, [r4, #2]
90020f6a:	eba8 080c 	sub.w	r8, r8, ip
90020f6e:	4350      	muls	r0, r2
90020f70:	fa1f f888 	uxth.w	r8, r8
90020f74:	fb08 0e0e 	mla	lr, r8, lr, r0
90020f78:	78a8      	ldrb	r0, [r5, #2]
90020f7a:	fb0c e000 	mla	r0, ip, r0, lr
90020f7e:	f893 e002 	ldrb.w	lr, [r3, #2]
90020f82:	fb06 0e0e 	mla	lr, r6, lr, r0
90020f86:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
90020f8a:	f894 e000 	ldrb.w	lr, [r4]
90020f8e:	fb02 fe0e 	mul.w	lr, r2, lr
90020f92:	fb08 e909 	mla	r9, r8, r9, lr
90020f96:	f895 e000 	ldrb.w	lr, [r5]
90020f9a:	fb0c 990e 	mla	r9, ip, lr, r9
90020f9e:	f893 e000 	ldrb.w	lr, [r3]
90020fa2:	785b      	ldrb	r3, [r3, #1]
90020fa4:	fb06 9e0e 	mla	lr, r6, lr, r9
90020fa8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90020fac:	ea4e 0e00 	orr.w	lr, lr, r0
90020fb0:	7860      	ldrb	r0, [r4, #1]
90020fb2:	4350      	muls	r0, r2
90020fb4:	786a      	ldrb	r2, [r5, #1]
90020fb6:	fb08 0007 	mla	r0, r8, r7, r0
90020fba:	fb0c 0202 	mla	r2, ip, r2, r0
90020fbe:	fb06 2303 	mla	r3, r6, r3, r2
90020fc2:	095b      	lsrs	r3, r3, #5
90020fc4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020fc8:	ea4e 0303 	orr.w	r3, lr, r3
90020fcc:	800b      	strh	r3, [r1, #0]
90020fce:	b003      	add	sp, #12
90020fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020fd4:	af01      	add	r7, sp, #4
90020fd6:	e78c      	b.n	90020ef2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
90020fd8:	ac01      	add	r4, sp, #4
90020fda:	4627      	mov	r7, r4
90020fdc:	e795      	b.n	90020f0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90020fde:	ac01      	add	r4, sp, #4
90020fe0:	e793      	b.n	90020f0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90020fe2:	ad01      	add	r5, sp, #4
90020fe4:	e7a1      	b.n	90020f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
90020fe6:	ab01      	add	r3, sp, #4
90020fe8:	461d      	mov	r5, r3
90020fea:	e7ab      	b.n	90020f44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
90020fec:	ab01      	add	r3, sp, #4
90020fee:	e7a9      	b.n	90020f44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

90020ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020ff4:	b08f      	sub	sp, #60	; 0x3c
90020ff6:	920c      	str	r2, [sp, #48]	; 0x30
90020ff8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90020ffa:	900d      	str	r0, [sp, #52]	; 0x34
90020ffc:	910a      	str	r1, [sp, #40]	; 0x28
90020ffe:	6850      	ldr	r0, [r2, #4]
90021000:	9306      	str	r3, [sp, #24]
90021002:	6812      	ldr	r2, [r2, #0]
90021004:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
90021008:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9002100c:	fb00 1303 	mla	r3, r0, r3, r1
90021010:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021014:	9307      	str	r3, [sp, #28]
90021016:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021018:	681b      	ldr	r3, [r3, #0]
9002101a:	9308      	str	r3, [sp, #32]
9002101c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002101e:	685c      	ldr	r4, [r3, #4]
90021020:	3404      	adds	r4, #4
90021022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021024:	2b00      	cmp	r3, #0
90021026:	dc03      	bgt.n	90021030 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90021028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002102a:	2b00      	cmp	r3, #0
9002102c:	f340 81d5 	ble.w	900213da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021030:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021032:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021036:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002103a:	1e48      	subs	r0, r1, #1
9002103c:	1e56      	subs	r6, r2, #1
9002103e:	9b06      	ldr	r3, [sp, #24]
90021040:	2b00      	cmp	r3, #0
90021042:	f340 80b6 	ble.w	900211b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90021046:	ea5f 472b 	movs.w	r7, fp, asr #16
9002104a:	ea4f 4325 	mov.w	r3, r5, asr #16
9002104e:	d406      	bmi.n	9002105e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021050:	4287      	cmp	r7, r0
90021052:	da04      	bge.n	9002105e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021054:	2b00      	cmp	r3, #0
90021056:	db02      	blt.n	9002105e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021058:	42b3      	cmp	r3, r6
9002105a:	f2c0 80ab 	blt.w	900211b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9002105e:	3701      	adds	r7, #1
90021060:	f100 809c 	bmi.w	9002119c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021064:	42b9      	cmp	r1, r7
90021066:	f2c0 8099 	blt.w	9002119c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9002106a:	3301      	adds	r3, #1
9002106c:	f100 8096 	bmi.w	9002119c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021070:	429a      	cmp	r2, r3
90021072:	f2c0 8093 	blt.w	9002119c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021076:	9b06      	ldr	r3, [sp, #24]
90021078:	930b      	str	r3, [sp, #44]	; 0x2c
9002107a:	9b07      	ldr	r3, [sp, #28]
9002107c:	9309      	str	r3, [sp, #36]	; 0x24
9002107e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021080:	2b00      	cmp	r3, #0
90021082:	f340 80b4 	ble.w	900211ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90021086:	9820      	ldr	r0, [sp, #128]	; 0x80
90021088:	142e      	asrs	r6, r5, #16
9002108a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002108c:	f3cb 3303 	ubfx	r3, fp, #12, #4
90021090:	68c7      	ldr	r7, [r0, #12]
90021092:	ea5f 402b 	movs.w	r0, fp, asr #16
90021096:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002109a:	6892      	ldr	r2, [r2, #8]
9002109c:	f100 80fb 	bmi.w	90021296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900210a0:	f102 3cff 	add.w	ip, r2, #4294967295
900210a4:	4560      	cmp	r0, ip
900210a6:	f280 80f6 	bge.w	90021296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900210aa:	2e00      	cmp	r6, #0
900210ac:	f2c0 80f3 	blt.w	90021296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900210b0:	f107 3cff 	add.w	ip, r7, #4294967295
900210b4:	4566      	cmp	r6, ip
900210b6:	f280 80ee 	bge.w	90021296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900210ba:	b212      	sxth	r2, r2
900210bc:	fb06 0002 	mla	r0, r6, r2, r0
900210c0:	9e08      	ldr	r6, [sp, #32]
900210c2:	1837      	adds	r7, r6, r0
900210c4:	5c30      	ldrb	r0, [r6, r0]
900210c6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
900210ca:	eb04 0c08 	add.w	ip, r4, r8
900210ce:	2b00      	cmp	r3, #0
900210d0:	f000 80d3 	beq.w	9002127a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
900210d4:	787e      	ldrb	r6, [r7, #1]
900210d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
900210da:	4426      	add	r6, r4
900210dc:	2900      	cmp	r1, #0
900210de:	f000 80d4 	beq.w	9002128a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
900210e2:	18b8      	adds	r0, r7, r2
900210e4:	5cba      	ldrb	r2, [r7, r2]
900210e6:	7840      	ldrb	r0, [r0, #1]
900210e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900210ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900210f0:	4422      	add	r2, r4
900210f2:	4420      	add	r0, r4
900210f4:	b29b      	uxth	r3, r3
900210f6:	78b7      	ldrb	r7, [r6, #2]
900210f8:	b289      	uxth	r1, r1
900210fa:	f89c a002 	ldrb.w	sl, [ip, #2]
900210fe:	f89c c001 	ldrb.w	ip, [ip, #1]
90021102:	fb03 f901 	mul.w	r9, r3, r1
90021106:	011b      	lsls	r3, r3, #4
90021108:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002110c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021110:	eba3 0309 	sub.w	r3, r3, r9
90021114:	b289      	uxth	r1, r1
90021116:	b29b      	uxth	r3, r3
90021118:	ebae 0e01 	sub.w	lr, lr, r1
9002111c:	435f      	muls	r7, r3
9002111e:	fa1f fe8e 	uxth.w	lr, lr
90021122:	fb0e 770a 	mla	r7, lr, sl, r7
90021126:	f892 a002 	ldrb.w	sl, [r2, #2]
9002112a:	fb01 770a 	mla	r7, r1, sl, r7
9002112e:	f890 a002 	ldrb.w	sl, [r0, #2]
90021132:	fb09 7a0a 	mla	sl, r9, sl, r7
90021136:	f814 7008 	ldrb.w	r7, [r4, r8]
9002113a:	f896 8000 	ldrb.w	r8, [r6]
9002113e:	7876      	ldrb	r6, [r6, #1]
90021140:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
90021144:	fb03 f808 	mul.w	r8, r3, r8
90021148:	4373      	muls	r3, r6
9002114a:	fb0e 8807 	mla	r8, lr, r7, r8
9002114e:	7817      	ldrb	r7, [r2, #0]
90021150:	fb0e 330c 	mla	r3, lr, ip, r3
90021154:	fb01 8807 	mla	r8, r1, r7, r8
90021158:	7807      	ldrb	r7, [r0, #0]
9002115a:	fb09 8707 	mla	r7, r9, r7, r8
9002115e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90021162:	ea47 070a 	orr.w	r7, r7, sl
90021166:	f892 a001 	ldrb.w	sl, [r2, #1]
9002116a:	fb01 310a 	mla	r1, r1, sl, r3
9002116e:	f890 a001 	ldrb.w	sl, [r0, #1]
90021172:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021174:	fb09 1a0a 	mla	sl, r9, sl, r1
90021178:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9002117c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021180:	ea47 070a 	orr.w	r7, r7, sl
90021184:	801f      	strh	r7, [r3, #0]
90021186:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021188:	3302      	adds	r3, #2
9002118a:	9309      	str	r3, [sp, #36]	; 0x24
9002118c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002118e:	449b      	add	fp, r3
90021190:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021192:	441d      	add	r5, r3
90021194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021196:	3b01      	subs	r3, #1
90021198:	930b      	str	r3, [sp, #44]	; 0x2c
9002119a:	e770      	b.n	9002107e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002119c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002119e:	449b      	add	fp, r3
900211a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900211a2:	441d      	add	r5, r3
900211a4:	9b06      	ldr	r3, [sp, #24]
900211a6:	3b01      	subs	r3, #1
900211a8:	9306      	str	r3, [sp, #24]
900211aa:	9b07      	ldr	r3, [sp, #28]
900211ac:	3302      	adds	r3, #2
900211ae:	9307      	str	r3, [sp, #28]
900211b0:	e745      	b.n	9002103e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
900211b2:	d023      	beq.n	900211fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900211b4:	9b06      	ldr	r3, [sp, #24]
900211b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
900211b8:	3b01      	subs	r3, #1
900211ba:	fb00 b003 	mla	r0, r0, r3, fp
900211be:	1400      	asrs	r0, r0, #16
900211c0:	f53f af59 	bmi.w	90021076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900211c4:	3901      	subs	r1, #1
900211c6:	4288      	cmp	r0, r1
900211c8:	f6bf af55 	bge.w	90021076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900211cc:	991c      	ldr	r1, [sp, #112]	; 0x70
900211ce:	fb01 5303 	mla	r3, r1, r3, r5
900211d2:	141b      	asrs	r3, r3, #16
900211d4:	f53f af4f 	bmi.w	90021076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900211d8:	3a01      	subs	r2, #1
900211da:	4293      	cmp	r3, r2
900211dc:	f6bf af4b 	bge.w	90021076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900211e0:	9b06      	ldr	r3, [sp, #24]
900211e2:	9309      	str	r3, [sp, #36]	; 0x24
900211e4:	9b07      	ldr	r3, [sp, #28]
900211e6:	930b      	str	r3, [sp, #44]	; 0x2c
900211e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900211ea:	2b00      	cmp	r3, #0
900211ec:	dc70      	bgt.n	900212d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
900211ee:	9b06      	ldr	r3, [sp, #24]
900211f0:	9a07      	ldr	r2, [sp, #28]
900211f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900211f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900211fa:	9307      	str	r3, [sp, #28]
900211fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900211fe:	2b00      	cmp	r3, #0
90021200:	f340 80eb 	ble.w	900213da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021208:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002120a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002120e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021212:	eef0 6a62 	vmov.f32	s13, s5
90021216:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002121a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002121e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021222:	ee16 ba90 	vmov	fp, s13
90021226:	eef0 6a43 	vmov.f32	s13, s6
9002122a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002122e:	ee16 5a90 	vmov	r5, s13
90021232:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021236:	ee61 7a27 	vmul.f32	s15, s2, s15
9002123a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002123e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021246:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002124a:	ee12 2a90 	vmov	r2, s5
9002124e:	eef0 2a47 	vmov.f32	s5, s14
90021252:	fb92 f3f3 	sdiv	r3, r2, r3
90021256:	ee13 2a10 	vmov	r2, s6
9002125a:	931b      	str	r3, [sp, #108]	; 0x6c
9002125c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002125e:	eeb0 3a67 	vmov.f32	s6, s15
90021262:	fb92 f3f3 	sdiv	r3, r2, r3
90021266:	931c      	str	r3, [sp, #112]	; 0x70
90021268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002126a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9002126c:	3b01      	subs	r3, #1
9002126e:	930a      	str	r3, [sp, #40]	; 0x28
90021270:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021272:	bf08      	it	eq
90021274:	4613      	moveq	r3, r2
90021276:	9306      	str	r3, [sp, #24]
90021278:	e6d3      	b.n	90021022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9002127a:	b149      	cbz	r1, 90021290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9002127c:	5cba      	ldrb	r2, [r7, r2]
9002127e:	4660      	mov	r0, ip
90021280:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021284:	4422      	add	r2, r4
90021286:	4666      	mov	r6, ip
90021288:	e734      	b.n	900210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9002128a:	4660      	mov	r0, ip
9002128c:	4662      	mov	r2, ip
9002128e:	e731      	b.n	900210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
90021290:	4660      	mov	r0, ip
90021292:	4662      	mov	r2, ip
90021294:	e7f7      	b.n	90021286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90021296:	f110 0c01 	adds.w	ip, r0, #1
9002129a:	f53f af74 	bmi.w	90021186 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002129e:	4562      	cmp	r2, ip
900212a0:	f6ff af71 	blt.w	90021186 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900212a4:	f116 0c01 	adds.w	ip, r6, #1
900212a8:	f53f af6d 	bmi.w	90021186 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900212ac:	4567      	cmp	r7, ip
900212ae:	f6ff af6a 	blt.w	90021186 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900212b2:	b23f      	sxth	r7, r7
900212b4:	b212      	sxth	r2, r2
900212b6:	9701      	str	r7, [sp, #4]
900212b8:	9200      	str	r2, [sp, #0]
900212ba:	e9cd 3104 	strd	r3, r1, [sp, #16]
900212be:	e9cd 0602 	strd	r0, r6, [sp, #8]
900212c2:	4623      	mov	r3, r4
900212c4:	980d      	ldr	r0, [sp, #52]	; 0x34
900212c6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
900212ca:	f7ff fde7 	bl	90020e9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
900212ce:	e75a      	b.n	90021186 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900212d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
900212d2:	ea4f 462b 	mov.w	r6, fp, asr #16
900212d6:	1428      	asrs	r0, r5, #16
900212d8:	f3cb 3303 	ubfx	r3, fp, #12, #4
900212dc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
900212e0:	f3c5 3103 	ubfx	r1, r5, #12, #4
900212e4:	fb02 6000 	mla	r0, r2, r0, r6
900212e8:	9e08      	ldr	r6, [sp, #32]
900212ea:	f816 8000 	ldrb.w	r8, [r6, r0]
900212ee:	1837      	adds	r7, r6, r0
900212f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
900212f4:	eb04 0c08 	add.w	ip, r4, r8
900212f8:	2b00      	cmp	r3, #0
900212fa:	d060      	beq.n	900213be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
900212fc:	787e      	ldrb	r6, [r7, #1]
900212fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90021302:	4426      	add	r6, r4
90021304:	2900      	cmp	r1, #0
90021306:	d062      	beq.n	900213ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
90021308:	18b8      	adds	r0, r7, r2
9002130a:	5cba      	ldrb	r2, [r7, r2]
9002130c:	7840      	ldrb	r0, [r0, #1]
9002130e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021312:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021316:	4422      	add	r2, r4
90021318:	4420      	add	r0, r4
9002131a:	b29b      	uxth	r3, r3
9002131c:	78b7      	ldrb	r7, [r6, #2]
9002131e:	b289      	uxth	r1, r1
90021320:	f89c a002 	ldrb.w	sl, [ip, #2]
90021324:	f89c c001 	ldrb.w	ip, [ip, #1]
90021328:	fb03 f901 	mul.w	r9, r3, r1
9002132c:	011b      	lsls	r3, r3, #4
9002132e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021332:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021336:	eba3 0309 	sub.w	r3, r3, r9
9002133a:	b289      	uxth	r1, r1
9002133c:	b29b      	uxth	r3, r3
9002133e:	ebae 0e01 	sub.w	lr, lr, r1
90021342:	435f      	muls	r7, r3
90021344:	fa1f fe8e 	uxth.w	lr, lr
90021348:	fb0e 770a 	mla	r7, lr, sl, r7
9002134c:	f892 a002 	ldrb.w	sl, [r2, #2]
90021350:	fb01 770a 	mla	r7, r1, sl, r7
90021354:	f890 a002 	ldrb.w	sl, [r0, #2]
90021358:	fb09 7a0a 	mla	sl, r9, sl, r7
9002135c:	f814 7008 	ldrb.w	r7, [r4, r8]
90021360:	f896 8000 	ldrb.w	r8, [r6]
90021364:	7876      	ldrb	r6, [r6, #1]
90021366:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9002136a:	fb03 f808 	mul.w	r8, r3, r8
9002136e:	4373      	muls	r3, r6
90021370:	7856      	ldrb	r6, [r2, #1]
90021372:	fb0e 8807 	mla	r8, lr, r7, r8
90021376:	7817      	ldrb	r7, [r2, #0]
90021378:	fb0e 330c 	mla	r3, lr, ip, r3
9002137c:	fb01 8807 	mla	r8, r1, r7, r8
90021380:	7807      	ldrb	r7, [r0, #0]
90021382:	fb01 3306 	mla	r3, r1, r6, r3
90021386:	fb09 8707 	mla	r7, r9, r7, r8
9002138a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9002138e:	ea47 070a 	orr.w	r7, r7, sl
90021392:	f890 a001 	ldrb.w	sl, [r0, #1]
90021396:	fb09 3a0a 	mla	sl, r9, sl, r3
9002139a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002139c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900213a0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900213a4:	ea47 070a 	orr.w	r7, r7, sl
900213a8:	f823 7b02 	strh.w	r7, [r3], #2
900213ac:	930b      	str	r3, [sp, #44]	; 0x2c
900213ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900213b0:	449b      	add	fp, r3
900213b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900213b4:	441d      	add	r5, r3
900213b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900213b8:	3b01      	subs	r3, #1
900213ba:	9309      	str	r3, [sp, #36]	; 0x24
900213bc:	e714      	b.n	900211e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
900213be:	b149      	cbz	r1, 900213d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
900213c0:	5cba      	ldrb	r2, [r7, r2]
900213c2:	4660      	mov	r0, ip
900213c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900213c8:	4422      	add	r2, r4
900213ca:	4666      	mov	r6, ip
900213cc:	e7a5      	b.n	9002131a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
900213ce:	4660      	mov	r0, ip
900213d0:	4662      	mov	r2, ip
900213d2:	e7a2      	b.n	9002131a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
900213d4:	4660      	mov	r0, ip
900213d6:	4662      	mov	r2, ip
900213d8:	e7f7      	b.n	900213ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
900213da:	b00f      	add	sp, #60	; 0x3c
900213dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900213e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
900213e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900213e4:	b085      	sub	sp, #20
900213e6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
900213ea:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
900213ee:	9102      	str	r1, [sp, #8]
900213f0:	2c00      	cmp	r4, #0
900213f2:	fb04 710c 	mla	r1, r4, ip, r7
900213f6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
900213fa:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
900213fe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90021402:	eb02 0e01 	add.w	lr, r2, r1
90021406:	f2c0 8122 	blt.w	9002164e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9002140a:	45a0      	cmp	r8, r4
9002140c:	f340 811f 	ble.w	9002164e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
90021410:	2f00      	cmp	r7, #0
90021412:	f2c0 811a 	blt.w	9002164a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
90021416:	45bc      	cmp	ip, r7
90021418:	f340 8117 	ble.w	9002164a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9002141c:	5c52      	ldrb	r2, [r2, r1]
9002141e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90021422:	1c7a      	adds	r2, r7, #1
90021424:	f100 8116 	bmi.w	90021654 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
90021428:	4594      	cmp	ip, r2
9002142a:	f340 8113 	ble.w	90021654 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9002142e:	2e00      	cmp	r6, #0
90021430:	f000 8112 	beq.w	90021658 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
90021434:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9002143c:	3401      	adds	r4, #1
9002143e:	f100 810f 	bmi.w	90021660 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021442:	45a0      	cmp	r8, r4
90021444:	f340 810c 	ble.w	90021660 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021448:	2800      	cmp	r0, #0
9002144a:	f000 810c 	beq.w	90021666 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9002144e:	2f00      	cmp	r7, #0
90021450:	f2c0 8104 	blt.w	9002165c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
90021454:	45bc      	cmp	ip, r7
90021456:	f340 8101 	ble.w	9002165c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9002145a:	f81e 200c 	ldrb.w	r2, [lr, ip]
9002145e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
90021462:	3701      	adds	r7, #1
90021464:	f100 8102 	bmi.w	9002166c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
90021468:	45bc      	cmp	ip, r7
9002146a:	f340 80ff 	ble.w	9002166c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9002146e:	2e00      	cmp	r6, #0
90021470:	f000 80fe 	beq.w	90021670 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
90021474:	44f4      	add	ip, lr
90021476:	f89c 2001 	ldrb.w	r2, [ip, #1]
9002147a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9002147e:	b2b6      	uxth	r6, r6
90021480:	b280      	uxth	r0, r0
90021482:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021486:	fb00 fe06 	mul.w	lr, r0, r6
9002148a:	0136      	lsls	r6, r6, #4
9002148c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021490:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021494:	eba6 070e 	sub.w	r7, r6, lr
90021498:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002149c:	ea4f 6914 	mov.w	r9, r4, lsr #24
900214a0:	b280      	uxth	r0, r0
900214a2:	b2bf      	uxth	r7, r7
900214a4:	1a1b      	subs	r3, r3, r0
900214a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
900214aa:	fb0a f607 	mul.w	r6, sl, r7
900214ae:	b29b      	uxth	r3, r3
900214b0:	fb0b 6603 	mla	r6, fp, r3, r6
900214b4:	fb00 6609 	mla	r6, r0, r9, r6
900214b8:	fb0e 6608 	mla	r6, lr, r8, r6
900214bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
900214c0:	9600      	str	r6, [sp, #0]
900214c2:	2e00      	cmp	r6, #0
900214c4:	f000 80be 	beq.w	90021644 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
900214c8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900214cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900214d0:	9e02      	ldr	r6, [sp, #8]
900214d2:	fb0b fc0c 	mul.w	ip, fp, ip
900214d6:	fb0b f505 	mul.w	r5, fp, r5
900214da:	8836      	ldrh	r6, [r6, #0]
900214dc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900214e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900214e4:	9501      	str	r5, [sp, #4]
900214e6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900214ea:	44dc      	add	ip, fp
900214ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900214f0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900214f4:	9503      	str	r5, [sp, #12]
900214f6:	9d01      	ldr	r5, [sp, #4]
900214f8:	f505 7c80 	add.w	ip, r5, #256	; 0x100
900214fc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021500:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021504:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021508:	fb0a fc0c 	mul.w	ip, sl, ip
9002150c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021510:	fb0a fa01 	mul.w	sl, sl, r1
90021514:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021518:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002151c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021520:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021524:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021528:	4465      	add	r5, ip
9002152a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002152e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021532:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021536:	fb09 fc0c 	mul.w	ip, r9, ip
9002153a:	0a2d      	lsrs	r5, r5, #8
9002153c:	fb09 f904 	mul.w	r9, r9, r4
90021540:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021544:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021548:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002154c:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021550:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021554:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021558:	437d      	muls	r5, r7
9002155a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002155e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021562:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021566:	4461      	add	r1, ip
90021568:	fb08 f404 	mul.w	r4, r8, r4
9002156c:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021570:	fb08 f802 	mul.w	r8, r8, r2
90021574:	0a09      	lsrs	r1, r1, #8
90021576:	0a22      	lsrs	r2, r4, #8
90021578:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9002157c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021580:	fb07 f70a 	mul.w	r7, r7, sl
90021584:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021588:	4414      	add	r4, r2
9002158a:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002158e:	0a24      	lsrs	r4, r4, #8
90021590:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021594:	9a03      	ldr	r2, [sp, #12]
90021596:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9002159a:	fb02 5503 	mla	r5, r2, r3, r5
9002159e:	ea4f 2818 	mov.w	r8, r8, lsr #8
900215a2:	9a00      	ldr	r2, [sp, #0]
900215a4:	fb04 540e 	mla	r4, r4, lr, r5
900215a8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900215ac:	1235      	asrs	r5, r6, #8
900215ae:	fb01 4100 	mla	r1, r1, r0, r4
900215b2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900215b6:	0a09      	lsrs	r1, r1, #8
900215b8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900215bc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900215c0:	fb03 7101 	mla	r1, r3, r1, r7
900215c4:	fb0e 1e08 	mla	lr, lr, r8, r1
900215c8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
900215cc:	fb00 e101 	mla	r1, r0, r1, lr
900215d0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900215d4:	b287      	uxth	r7, r0
900215d6:	0a09      	lsrs	r1, r1, #8
900215d8:	437a      	muls	r2, r7
900215da:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900215de:	1c53      	adds	r3, r2, #1
900215e0:	4321      	orrs	r1, r4
900215e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900215e6:	0c0a      	lsrs	r2, r1, #16
900215e8:	f3c1 2407 	ubfx	r4, r1, #8, #8
900215ec:	ea6f 2313 	mvn.w	r3, r3, lsr #8
900215f0:	b2c8      	uxtb	r0, r1
900215f2:	fb12 f207 	smulbb	r2, r2, r7
900215f6:	fb14 f407 	smulbb	r4, r4, r7
900215fa:	b2db      	uxtb	r3, r3
900215fc:	fb10 f007 	smulbb	r0, r0, r7
90021600:	fb05 2503 	mla	r5, r5, r3, r2
90021604:	10f2      	asrs	r2, r6, #3
90021606:	00f6      	lsls	r6, r6, #3
90021608:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002160c:	b2ad      	uxth	r5, r5
9002160e:	b2f6      	uxtb	r6, r6
90021610:	fb02 4203 	mla	r2, r2, r3, r4
90021614:	fb06 0303 	mla	r3, r6, r3, r0
90021618:	b294      	uxth	r4, r2
9002161a:	b299      	uxth	r1, r3
9002161c:	1c6b      	adds	r3, r5, #1
9002161e:	1c62      	adds	r2, r4, #1
90021620:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90021624:	1c4b      	adds	r3, r1, #1
90021626:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9002162a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9002162e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90021632:	0952      	lsrs	r2, r2, #5
90021634:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021638:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002163c:	432b      	orrs	r3, r5
9002163e:	4313      	orrs	r3, r2
90021640:	9a02      	ldr	r2, [sp, #8]
90021642:	8013      	strh	r3, [r2, #0]
90021644:	b005      	add	sp, #20
90021646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002164a:	2500      	movs	r5, #0
9002164c:	e6e9      	b.n	90021422 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9002164e:	2100      	movs	r1, #0
90021650:	460d      	mov	r5, r1
90021652:	e6f3      	b.n	9002143c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021654:	2100      	movs	r1, #0
90021656:	e6f1      	b.n	9002143c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021658:	4631      	mov	r1, r6
9002165a:	e6ef      	b.n	9002143c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9002165c:	2400      	movs	r4, #0
9002165e:	e700      	b.n	90021462 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
90021660:	2200      	movs	r2, #0
90021662:	4614      	mov	r4, r2
90021664:	e70b      	b.n	9002147e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021666:	4602      	mov	r2, r0
90021668:	4604      	mov	r4, r0
9002166a:	e708      	b.n	9002147e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9002166c:	2200      	movs	r2, #0
9002166e:	e706      	b.n	9002147e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021670:	4632      	mov	r2, r6
90021672:	e704      	b.n	9002147e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

90021674 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021678:	b09f      	sub	sp, #124	; 0x7c
9002167a:	921b      	str	r2, [sp, #108]	; 0x6c
9002167c:	9309      	str	r3, [sp, #36]	; 0x24
9002167e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90021680:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90021684:	901d      	str	r0, [sp, #116]	; 0x74
90021686:	931c      	str	r3, [sp, #112]	; 0x70
90021688:	6850      	ldr	r0, [r2, #4]
9002168a:	9119      	str	r1, [sp, #100]	; 0x64
9002168c:	6812      	ldr	r2, [r2, #0]
9002168e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90021690:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90021694:	fb00 1303 	mla	r3, r0, r3, r1
90021698:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002169c:	930c      	str	r3, [sp, #48]	; 0x30
9002169e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900216a0:	681b      	ldr	r3, [r3, #0]
900216a2:	9312      	str	r3, [sp, #72]	; 0x48
900216a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900216a6:	685e      	ldr	r6, [r3, #4]
900216a8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
900216ac:	3604      	adds	r6, #4
900216ae:	930d      	str	r3, [sp, #52]	; 0x34
900216b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
900216b2:	2b00      	cmp	r3, #0
900216b4:	dc03      	bgt.n	900216be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900216b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900216b8:	2b00      	cmp	r3, #0
900216ba:	f340 8387 	ble.w	90021dcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
900216be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900216c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900216c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900216c8:	1e48      	subs	r0, r1, #1
900216ca:	1e57      	subs	r7, r2, #1
900216cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
900216ce:	2b00      	cmp	r3, #0
900216d0:	f340 8194 	ble.w	900219fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
900216d4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
900216d6:	142b      	asrs	r3, r5, #16
900216d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900216dc:	d406      	bmi.n	900216ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900216de:	4584      	cmp	ip, r0
900216e0:	da04      	bge.n	900216ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900216e2:	2b00      	cmp	r3, #0
900216e4:	db02      	blt.n	900216ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900216e6:	42bb      	cmp	r3, r7
900216e8:	f2c0 8189 	blt.w	900219fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900216ec:	f11c 0c01 	adds.w	ip, ip, #1
900216f0:	f100 8177 	bmi.w	900219e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900216f4:	4561      	cmp	r1, ip
900216f6:	f2c0 8174 	blt.w	900219e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900216fa:	3301      	adds	r3, #1
900216fc:	f100 8171 	bmi.w	900219e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021700:	429a      	cmp	r2, r3
90021702:	f2c0 816e 	blt.w	900219e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021706:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021708:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9002170a:	931a      	str	r3, [sp, #104]	; 0x68
9002170c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9002170e:	2b00      	cmp	r3, #0
90021710:	f340 8193 	ble.w	90021a3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90021714:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021716:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002171a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002171e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021722:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021724:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
90021728:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002172a:	141b      	asrs	r3, r3, #16
9002172c:	f100 81d6 	bmi.w	90021adc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021730:	f100 38ff 	add.w	r8, r0, #4294967295
90021734:	4543      	cmp	r3, r8
90021736:	f280 81d1 	bge.w	90021adc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9002173a:	f1bc 0f00 	cmp.w	ip, #0
9002173e:	f2c0 81cd 	blt.w	90021adc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021742:	f10e 38ff 	add.w	r8, lr, #4294967295
90021746:	45c4      	cmp	ip, r8
90021748:	f280 81c8 	bge.w	90021adc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9002174c:	b200      	sxth	r0, r0
9002174e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021750:	fb0c 3300 	mla	r3, ip, r0, r3
90021754:	eb04 0803 	add.w	r8, r4, r3
90021758:	5ce3      	ldrb	r3, [r4, r3]
9002175a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9002175e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90021762:	2a00      	cmp	r2, #0
90021764:	f000 81af 	beq.w	90021ac6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90021768:	f898 c001 	ldrb.w	ip, [r8, #1]
9002176c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90021770:	940e      	str	r4, [sp, #56]	; 0x38
90021772:	0e24      	lsrs	r4, r4, #24
90021774:	9415      	str	r4, [sp, #84]	; 0x54
90021776:	b179      	cbz	r1, 90021798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021778:	eb08 0c00 	add.w	ip, r8, r0
9002177c:	f818 0000 	ldrb.w	r0, [r8, r0]
90021780:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021784:	900a      	str	r0, [sp, #40]	; 0x28
90021786:	0e00      	lsrs	r0, r0, #24
90021788:	9013      	str	r0, [sp, #76]	; 0x4c
9002178a:	f89c 0001 	ldrb.w	r0, [ip, #1]
9002178e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021792:	900f      	str	r0, [sp, #60]	; 0x3c
90021794:	0e00      	lsrs	r0, r0, #24
90021796:	9016      	str	r0, [sp, #88]	; 0x58
90021798:	b292      	uxth	r2, r2
9002179a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002179c:	b289      	uxth	r1, r1
9002179e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900217a0:	fb02 f901 	mul.w	r9, r2, r1
900217a4:	0112      	lsls	r2, r2, #4
900217a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
900217aa:	eba2 0809 	sub.w	r8, r2, r9
900217ae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900217b2:	b289      	uxth	r1, r1
900217b4:	fa1f f888 	uxth.w	r8, r8
900217b8:	1a52      	subs	r2, r2, r1
900217ba:	fb08 f000 	mul.w	r0, r8, r0
900217be:	b292      	uxth	r2, r2
900217c0:	fb02 000e 	mla	r0, r2, lr, r0
900217c4:	fb01 0004 	mla	r0, r1, r4, r0
900217c8:	9c16      	ldr	r4, [sp, #88]	; 0x58
900217ca:	fb09 0004 	mla	r0, r9, r4, r0
900217ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
900217d2:	2800      	cmp	r0, #0
900217d4:	f000 80fa 	beq.w	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900217d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900217dc:	d01b      	beq.n	90021816 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900217de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900217e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900217e6:	fb0e fa0a 	mul.w	sl, lr, sl
900217ea:	fb0e fe03 	mul.w	lr, lr, r3
900217ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
900217f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900217f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900217fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900217fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021802:	4453      	add	r3, sl
90021804:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021808:	0a1b      	lsrs	r3, r3, #8
9002180a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002180e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021812:	ea43 030c 	orr.w	r3, r3, ip
90021816:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021818:	2cff      	cmp	r4, #255	; 0xff
9002181a:	d021      	beq.n	90021860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9002181c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002181e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021822:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021824:	fb04 fb0b 	mul.w	fp, r4, fp
90021828:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002182a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002182e:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021830:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021834:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021838:	fb04 fa0a 	mul.w	sl, r4, sl
9002183c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021840:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021844:	44de      	add	lr, fp
90021846:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002184a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002184e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021852:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021856:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002185a:	ea4e 040a 	orr.w	r4, lr, sl
9002185e:	940e      	str	r4, [sp, #56]	; 0x38
90021860:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021862:	2cff      	cmp	r4, #255	; 0xff
90021864:	d021      	beq.n	900218aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90021866:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021868:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9002186c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002186e:	fb04 fb0b 	mul.w	fp, r4, fp
90021872:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021874:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002187a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002187e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021882:	fb04 fa0a 	mul.w	sl, r4, sl
90021886:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002188a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002188e:	44de      	add	lr, fp
90021890:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021894:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021898:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002189c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218a4:	ea4e 040a 	orr.w	r4, lr, sl
900218a8:	940a      	str	r4, [sp, #40]	; 0x28
900218aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
900218ac:	2cff      	cmp	r4, #255	; 0xff
900218ae:	d021      	beq.n	900218f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
900218b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900218b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900218b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
900218b8:	fb04 fb0b 	mul.w	fp, r4, fp
900218bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900218be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900218c2:	9c16      	ldr	r4, [sp, #88]	; 0x58
900218c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900218c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900218cc:	fb04 fa0a 	mul.w	sl, r4, sl
900218d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900218d8:	44de      	add	lr, fp
900218da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900218de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900218e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900218e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218ee:	ea4e 040a 	orr.w	r4, lr, sl
900218f2:	940f      	str	r4, [sp, #60]	; 0x3c
900218f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900218f6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
900218fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900218fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021904:	fb08 fc0c 	mul.w	ip, r8, ip
90021908:	fb02 cc0e 	mla	ip, r2, lr, ip
9002190c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021910:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021912:	fb01 cc0e 	mla	ip, r1, lr, ip
90021916:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002191a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002191c:	fb09 cc0e 	mla	ip, r9, lr, ip
90021920:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90021924:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021926:	fb08 f80e 	mul.w	r8, r8, lr
9002192a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002192e:	fb02 8303 	mla	r3, r2, r3, r8
90021932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021938:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9002193c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002193e:	fb01 330a 	mla	r3, r1, sl, r3
90021942:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
90021946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90021948:	fb09 3901 	mla	r9, r9, r1, r3
9002194c:	883b      	ldrh	r3, [r7, #0]
9002194e:	4342      	muls	r2, r0
90021950:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021954:	1c50      	adds	r0, r2, #1
90021956:	1219      	asrs	r1, r3, #8
90021958:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002195c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90021960:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021964:	ea4c 0c09 	orr.w	ip, ip, r9
90021968:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9002196c:	ea4f 421c 	mov.w	r2, ip, lsr #16
90021970:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90021974:	b2c0      	uxtb	r0, r0
90021976:	fb12 f204 	smulbb	r2, r2, r4
9002197a:	fa5f fc8c 	uxtb.w	ip, ip
9002197e:	fb1e fe04 	smulbb	lr, lr, r4
90021982:	fb01 2100 	mla	r1, r1, r0, r2
90021986:	10da      	asrs	r2, r3, #3
90021988:	fb1c fc04 	smulbb	ip, ip, r4
9002198c:	00db      	lsls	r3, r3, #3
9002198e:	b289      	uxth	r1, r1
90021990:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021994:	b2db      	uxtb	r3, r3
90021996:	fb02 e200 	mla	r2, r2, r0, lr
9002199a:	fb03 c300 	mla	r3, r3, r0, ip
9002199e:	b292      	uxth	r2, r2
900219a0:	fa1f fc83 	uxth.w	ip, r3
900219a4:	1c4b      	adds	r3, r1, #1
900219a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900219aa:	f10c 0301 	add.w	r3, ip, #1
900219ae:	eb03 231c 	add.w	r3, r3, ip, lsr #8
900219b2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900219b6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900219ba:	430b      	orrs	r3, r1
900219bc:	1c51      	adds	r1, r2, #1
900219be:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900219c2:	0952      	lsrs	r2, r2, #5
900219c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900219c8:	4313      	orrs	r3, r2
900219ca:	803b      	strh	r3, [r7, #0]
900219cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
900219ce:	3702      	adds	r7, #2
900219d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900219d2:	441a      	add	r2, r3
900219d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900219d6:	441d      	add	r5, r3
900219d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
900219da:	9229      	str	r2, [sp, #164]	; 0xa4
900219dc:	3b01      	subs	r3, #1
900219de:	931a      	str	r3, [sp, #104]	; 0x68
900219e0:	e694      	b.n	9002170c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900219e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
900219e4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
900219e6:	441c      	add	r4, r3
900219e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900219ea:	441d      	add	r5, r3
900219ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
900219ee:	9429      	str	r4, [sp, #164]	; 0xa4
900219f0:	3b01      	subs	r3, #1
900219f2:	9309      	str	r3, [sp, #36]	; 0x24
900219f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900219f6:	3302      	adds	r3, #2
900219f8:	930c      	str	r3, [sp, #48]	; 0x30
900219fa:	e667      	b.n	900216cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900219fc:	d024      	beq.n	90021a48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
900219fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021a00:	982b      	ldr	r0, [sp, #172]	; 0xac
90021a02:	3b01      	subs	r3, #1
90021a04:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021a06:	fb00 4003 	mla	r0, r0, r3, r4
90021a0a:	1400      	asrs	r0, r0, #16
90021a0c:	f53f ae7b 	bmi.w	90021706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021a10:	3901      	subs	r1, #1
90021a12:	4288      	cmp	r0, r1
90021a14:	f6bf ae77 	bge.w	90021706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021a18:	992c      	ldr	r1, [sp, #176]	; 0xb0
90021a1a:	fb01 5303 	mla	r3, r1, r3, r5
90021a1e:	141b      	asrs	r3, r3, #16
90021a20:	f53f ae71 	bmi.w	90021706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021a24:	3a01      	subs	r2, #1
90021a26:	4293      	cmp	r3, r2
90021a28:	f6bf ae6d 	bge.w	90021706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021a2c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90021a30:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90021a34:	f1bb 0f00 	cmp.w	fp, #0
90021a38:	dc70      	bgt.n	90021b1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90021a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021a3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90021a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021a42:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90021a46:	930c      	str	r3, [sp, #48]	; 0x30
90021a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021a4a:	2b00      	cmp	r3, #0
90021a4c:	f340 81be 	ble.w	90021dcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021a54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021a56:	ee30 0a04 	vadd.f32	s0, s0, s8
90021a5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021a5e:	eef0 6a62 	vmov.f32	s13, s5
90021a62:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021a66:	ee31 1a05 	vadd.f32	s2, s2, s10
90021a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a6e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
90021a72:	eef0 6a43 	vmov.f32	s13, s6
90021a76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a7a:	ee16 5a90 	vmov	r5, s13
90021a7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021a82:	ee61 7a27 	vmul.f32	s15, s2, s15
90021a86:	ee77 2a62 	vsub.f32	s5, s14, s5
90021a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021a96:	ee12 2a90 	vmov	r2, s5
90021a9a:	eef0 2a47 	vmov.f32	s5, s14
90021a9e:	fb92 f3f3 	sdiv	r3, r2, r3
90021aa2:	ee13 2a10 	vmov	r2, s6
90021aa6:	932b      	str	r3, [sp, #172]	; 0xac
90021aa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021aaa:	eeb0 3a67 	vmov.f32	s6, s15
90021aae:	fb92 f3f3 	sdiv	r3, r2, r3
90021ab2:	932c      	str	r3, [sp, #176]	; 0xb0
90021ab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021ab6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90021ab8:	3b01      	subs	r3, #1
90021aba:	9319      	str	r3, [sp, #100]	; 0x64
90021abc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021abe:	bf08      	it	eq
90021ac0:	4613      	moveq	r3, r2
90021ac2:	9309      	str	r3, [sp, #36]	; 0x24
90021ac4:	e5f4      	b.n	900216b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021ac6:	2900      	cmp	r1, #0
90021ac8:	f43f ae66 	beq.w	90021798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021acc:	f818 0000 	ldrb.w	r0, [r8, r0]
90021ad0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021ad4:	900a      	str	r0, [sp, #40]	; 0x28
90021ad6:	0e00      	lsrs	r0, r0, #24
90021ad8:	9013      	str	r0, [sp, #76]	; 0x4c
90021ada:	e65d      	b.n	90021798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021adc:	f113 0801 	adds.w	r8, r3, #1
90021ae0:	f53f af74 	bmi.w	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021ae4:	4540      	cmp	r0, r8
90021ae6:	f6ff af71 	blt.w	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021aea:	f11c 0801 	adds.w	r8, ip, #1
90021aee:	f53f af6d 	bmi.w	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021af2:	45c6      	cmp	lr, r8
90021af4:	f6ff af6a 	blt.w	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021af8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90021afa:	b200      	sxth	r0, r0
90021afc:	9302      	str	r3, [sp, #8]
90021afe:	fa0f f38e 	sxth.w	r3, lr
90021b02:	9000      	str	r0, [sp, #0]
90021b04:	9301      	str	r3, [sp, #4]
90021b06:	4633      	mov	r3, r6
90021b08:	981d      	ldr	r0, [sp, #116]	; 0x74
90021b0a:	e9cd 1405 	strd	r1, r4, [sp, #20]
90021b0e:	e9cd c203 	strd	ip, r2, [sp, #12]
90021b12:	4639      	mov	r1, r7
90021b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
90021b16:	f7ff fc63 	bl	900213e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
90021b1a:	e757      	b.n	900219cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021b1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021b1e:	f3c5 3003 	ubfx	r0, r5, #12, #4
90021b22:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021b24:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021b28:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021b2a:	1427      	asrs	r7, r4, #16
90021b2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021b2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021b32:	142b      	asrs	r3, r5, #16
90021b34:	fb01 7303 	mla	r3, r1, r3, r7
90021b38:	18e7      	adds	r7, r4, r3
90021b3a:	5ce3      	ldrb	r3, [r4, r3]
90021b3c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021b40:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021b44:	2a00      	cmp	r2, #0
90021b46:	f000 8137 	beq.w	90021db8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
90021b4a:	f897 e001 	ldrb.w	lr, [r7, #1]
90021b4e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90021b52:	9410      	str	r4, [sp, #64]	; 0x40
90021b54:	0e24      	lsrs	r4, r4, #24
90021b56:	9417      	str	r4, [sp, #92]	; 0x5c
90021b58:	b170      	cbz	r0, 90021b78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021b5a:	eb07 0e01 	add.w	lr, r7, r1
90021b5e:	5c79      	ldrb	r1, [r7, r1]
90021b60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021b64:	910b      	str	r1, [sp, #44]	; 0x2c
90021b66:	0e09      	lsrs	r1, r1, #24
90021b68:	9114      	str	r1, [sp, #80]	; 0x50
90021b6a:	f89e 1001 	ldrb.w	r1, [lr, #1]
90021b6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021b72:	9111      	str	r1, [sp, #68]	; 0x44
90021b74:	0e09      	lsrs	r1, r1, #24
90021b76:	9118      	str	r1, [sp, #96]	; 0x60
90021b78:	b292      	uxth	r2, r2
90021b7a:	9917      	ldr	r1, [sp, #92]	; 0x5c
90021b7c:	b280      	uxth	r0, r0
90021b7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021b80:	fb02 f800 	mul.w	r8, r2, r0
90021b84:	0112      	lsls	r2, r2, #4
90021b86:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90021b8a:	eba2 0e08 	sub.w	lr, r2, r8
90021b8e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021b92:	b280      	uxth	r0, r0
90021b94:	fa1f fe8e 	uxth.w	lr, lr
90021b98:	1a12      	subs	r2, r2, r0
90021b9a:	fb0e f101 	mul.w	r1, lr, r1
90021b9e:	b292      	uxth	r2, r2
90021ba0:	fb02 110c 	mla	r1, r2, ip, r1
90021ba4:	fb00 1104 	mla	r1, r0, r4, r1
90021ba8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021baa:	fb08 1104 	mla	r1, r8, r4, r1
90021bae:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021bb2:	2900      	cmp	r1, #0
90021bb4:	f000 80f5 	beq.w	90021da2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
90021bb8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021bbc:	d019      	beq.n	90021bf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
90021bbe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021bc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021bc6:	fb0c fa0a 	mul.w	sl, ip, sl
90021bca:	fb0c fc03 	mul.w	ip, ip, r3
90021bce:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021bd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021bd6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021bda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021bde:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021be2:	4453      	add	r3, sl
90021be4:	0a3f      	lsrs	r7, r7, #8
90021be6:	0a1b      	lsrs	r3, r3, #8
90021be8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021bec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021bf0:	433b      	orrs	r3, r7
90021bf2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021bf4:	2cff      	cmp	r4, #255	; 0xff
90021bf6:	d020      	beq.n	90021c3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
90021bf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021bfa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021bfe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021c00:	4367      	muls	r7, r4
90021c02:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021c04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021c0c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021c0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c16:	fb04 fa0a 	mul.w	sl, r4, sl
90021c1a:	44bc      	add	ip, r7
90021c1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c34:	ea4c 040a 	orr.w	r4, ip, sl
90021c38:	9410      	str	r4, [sp, #64]	; 0x40
90021c3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021c3c:	2cff      	cmp	r4, #255	; 0xff
90021c3e:	d020      	beq.n	90021c82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
90021c40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021c42:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021c46:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021c48:	4367      	muls	r7, r4
90021c4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021c4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021c54:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021c56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c5e:	fb04 fa0a 	mul.w	sl, r4, sl
90021c62:	44bc      	add	ip, r7
90021c64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c7c:	ea4c 040a 	orr.w	r4, ip, sl
90021c80:	940b      	str	r4, [sp, #44]	; 0x2c
90021c82:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c84:	2cff      	cmp	r4, #255	; 0xff
90021c86:	d020      	beq.n	90021cca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
90021c88:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021c8a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021c8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c90:	4367      	muls	r7, r4
90021c92:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021c94:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c98:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021c9c:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c9e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021ca2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ca6:	fb04 fa0a 	mul.w	sl, r4, sl
90021caa:	44bc      	add	ip, r7
90021cac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021cb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021cb4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021cb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021cbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021cc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021cc4:	ea4c 040a 	orr.w	r4, ip, sl
90021cc8:	9411      	str	r4, [sp, #68]	; 0x44
90021cca:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021ccc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021cd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021cd4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021cd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021cda:	fb0e f707 	mul.w	r7, lr, r7
90021cde:	fb02 770c 	mla	r7, r2, ip, r7
90021ce2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021ce6:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021ce8:	fb00 770c 	mla	r7, r0, ip, r7
90021cec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021cf0:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021cf2:	fb08 770c 	mla	r7, r8, ip, r7
90021cf6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90021cfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021cfc:	fb0e fe0c 	mul.w	lr, lr, ip
90021d00:	0a3f      	lsrs	r7, r7, #8
90021d02:	fb02 e303 	mla	r3, r2, r3, lr
90021d06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90021d08:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021d0c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021d10:	9a11      	ldr	r2, [sp, #68]	; 0x44
90021d12:	fb00 330a 	mla	r3, r0, sl, r3
90021d16:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90021d1a:	f8b9 0000 	ldrh.w	r0, [r9]
90021d1e:	fb08 3c0c 	mla	ip, r8, ip, r3
90021d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90021d24:	1202      	asrs	r2, r0, #8
90021d26:	434b      	muls	r3, r1
90021d28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d2c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90021d30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021d34:	1c59      	adds	r1, r3, #1
90021d36:	ea47 070c 	orr.w	r7, r7, ip
90021d3a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90021d3e:	0c3b      	lsrs	r3, r7, #16
90021d40:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90021d44:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90021d48:	b2ff      	uxtb	r7, r7
90021d4a:	fb13 f304 	smulbb	r3, r3, r4
90021d4e:	b2c9      	uxtb	r1, r1
90021d50:	fb1c fc04 	smulbb	ip, ip, r4
90021d54:	fb02 3201 	mla	r2, r2, r1, r3
90021d58:	10c3      	asrs	r3, r0, #3
90021d5a:	fb17 f704 	smulbb	r7, r7, r4
90021d5e:	00c0      	lsls	r0, r0, #3
90021d60:	b292      	uxth	r2, r2
90021d62:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90021d66:	b2c0      	uxtb	r0, r0
90021d68:	fb03 c301 	mla	r3, r3, r1, ip
90021d6c:	f102 0c01 	add.w	ip, r2, #1
90021d70:	fb00 7001 	mla	r0, r0, r1, r7
90021d74:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
90021d78:	b280      	uxth	r0, r0
90021d7a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
90021d7e:	b29b      	uxth	r3, r3
90021d80:	1c42      	adds	r2, r0, #1
90021d82:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021d86:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90021d8a:	ea42 020c 	orr.w	r2, r2, ip
90021d8e:	f103 0c01 	add.w	ip, r3, #1
90021d92:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90021d96:	095b      	lsrs	r3, r3, #5
90021d98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021d9c:	431a      	orrs	r2, r3
90021d9e:	f8a9 2000 	strh.w	r2, [r9]
90021da2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021da4:	f109 0902 	add.w	r9, r9, #2
90021da8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021daa:	f10b 3bff 	add.w	fp, fp, #4294967295
90021dae:	441a      	add	r2, r3
90021db0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021db2:	9229      	str	r2, [sp, #164]	; 0xa4
90021db4:	441d      	add	r5, r3
90021db6:	e63d      	b.n	90021a34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
90021db8:	2800      	cmp	r0, #0
90021dba:	f43f aedd 	beq.w	90021b78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021dbe:	5c79      	ldrb	r1, [r7, r1]
90021dc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021dc4:	910b      	str	r1, [sp, #44]	; 0x2c
90021dc6:	0e09      	lsrs	r1, r1, #24
90021dc8:	9114      	str	r1, [sp, #80]	; 0x50
90021dca:	e6d5      	b.n	90021b78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021dcc:	b01f      	add	sp, #124	; 0x7c
90021dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021dd2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
90021dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021dd6:	b089      	sub	sp, #36	; 0x24
90021dd8:	9101      	str	r1, [sp, #4]
90021dda:	9801      	ldr	r0, [sp, #4]
90021ddc:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
90021de0:	8800      	ldrh	r0, [r0, #0]
90021de2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
90021de6:	1206      	asrs	r6, r0, #8
90021de8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90021dec:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
90021df0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90021df4:	9602      	str	r6, [sp, #8]
90021df6:	10c6      	asrs	r6, r0, #3
90021df8:	00c0      	lsls	r0, r0, #3
90021dfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90021dfe:	b2c0      	uxtb	r0, r0
90021e00:	9603      	str	r6, [sp, #12]
90021e02:	9004      	str	r0, [sp, #16]
90021e04:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
90021e08:	fb07 100c 	mla	r0, r7, ip, r1
90021e0c:	2f00      	cmp	r7, #0
90021e0e:	eb02 0e00 	add.w	lr, r2, r0
90021e12:	f2c0 810a 	blt.w	9002202a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90021e16:	45b8      	cmp	r8, r7
90021e18:	f340 8107 	ble.w	9002202a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90021e1c:	2900      	cmp	r1, #0
90021e1e:	f2c0 8102 	blt.w	90022026 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90021e22:	458c      	cmp	ip, r1
90021e24:	f340 80ff 	ble.w	90022026 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90021e28:	5c12      	ldrb	r2, [r2, r0]
90021e2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90021e2e:	1c4a      	adds	r2, r1, #1
90021e30:	f100 80fe 	bmi.w	90022030 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90021e34:	4594      	cmp	ip, r2
90021e36:	f340 80fb 	ble.w	90022030 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90021e3a:	2d00      	cmp	r5, #0
90021e3c:	f000 80fa 	beq.w	90022034 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
90021e40:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021e44:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90021e48:	3701      	adds	r7, #1
90021e4a:	f100 80f7 	bmi.w	9002203c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90021e4e:	45b8      	cmp	r8, r7
90021e50:	f340 80f4 	ble.w	9002203c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90021e54:	2c00      	cmp	r4, #0
90021e56:	f000 80f4 	beq.w	90022042 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
90021e5a:	2900      	cmp	r1, #0
90021e5c:	eb0e 020c 	add.w	r2, lr, ip
90021e60:	f2c0 80ea 	blt.w	90022038 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90021e64:	458c      	cmp	ip, r1
90021e66:	f340 80e7 	ble.w	90022038 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90021e6a:	f81e 700c 	ldrb.w	r7, [lr, ip]
90021e6e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
90021e72:	3101      	adds	r1, #1
90021e74:	f100 80e8 	bmi.w	90022048 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90021e78:	458c      	cmp	ip, r1
90021e7a:	f340 80e5 	ble.w	90022048 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90021e7e:	2d00      	cmp	r5, #0
90021e80:	f000 80e4 	beq.w	9002204c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
90021e84:	7852      	ldrb	r2, [r2, #1]
90021e86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90021e8a:	0e0b      	lsrs	r3, r1, #24
90021e8c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
90021e90:	ea4f 6a10 	mov.w	sl, r0, lsr #24
90021e94:	9300      	str	r3, [sp, #0]
90021e96:	b2a4      	uxth	r4, r4
90021e98:	b2ab      	uxth	r3, r5
90021e9a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
90021e9e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
90021ea2:	fb03 f904 	mul.w	r9, r3, r4
90021ea6:	011b      	lsls	r3, r3, #4
90021ea8:	fb0a f505 	mul.w	r5, sl, r5
90021eac:	ea4f 6817 	mov.w	r8, r7, lsr #24
90021eb0:	eba3 0e09 	sub.w	lr, r3, r9
90021eb4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
90021eb8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
90021ebc:	0a28      	lsrs	r0, r5, #8
90021ebe:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
90021ec2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021ec6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021eca:	fb0a f303 	mul.w	r3, sl, r3
90021ece:	fb08 f707 	mul.w	r7, r8, r7
90021ed2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
90021ed6:	4405      	add	r5, r0
90021ed8:	fb08 fc0c 	mul.w	ip, r8, ip
90021edc:	b2a4      	uxth	r4, r4
90021ede:	0a2d      	lsrs	r5, r5, #8
90021ee0:	fa1f fe8e 	uxth.w	lr, lr
90021ee4:	1b12      	subs	r2, r2, r4
90021ee6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
90021eea:	b292      	uxth	r2, r2
90021eec:	9005      	str	r0, [sp, #20]
90021eee:	f503 7080 	add.w	r0, r3, #256	; 0x100
90021ef2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90021ef6:	ea4f 201c 	mov.w	r0, ip, lsr #8
90021efa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021efe:	0a1b      	lsrs	r3, r3, #8
90021f00:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021f04:	9306      	str	r3, [sp, #24]
90021f06:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
90021f0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90021f0e:	4460      	add	r0, ip
90021f10:	fb0b f303 	mul.w	r3, fp, r3
90021f14:	fb0b f606 	mul.w	r6, fp, r6
90021f18:	0a00      	lsrs	r0, r0, #8
90021f1a:	0a1d      	lsrs	r5, r3, #8
90021f1c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
90021f20:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021f24:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021f28:	441d      	add	r5, r3
90021f2a:	f506 7380 	add.w	r3, r6, #256	; 0x100
90021f2e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90021f32:	f507 7380 	add.w	r3, r7, #256	; 0x100
90021f36:	0a2d      	lsrs	r5, r5, #8
90021f38:	eb03 2317 	add.w	r3, r3, r7, lsr #8
90021f3c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
90021f40:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021f44:	0a36      	lsrs	r6, r6, #8
90021f46:	0a1b      	lsrs	r3, r3, #8
90021f48:	fb05 f50e 	mul.w	r5, r5, lr
90021f4c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90021f50:	9307      	str	r3, [sp, #28]
90021f52:	0e0b      	lsrs	r3, r1, #24
90021f54:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021f58:	fb0e f606 	mul.w	r6, lr, r6
90021f5c:	435f      	muls	r7, r3
90021f5e:	4359      	muls	r1, r3
90021f60:	9b05      	ldr	r3, [sp, #20]
90021f62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021f66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021f6a:	fb03 5502 	mla	r5, r3, r2, r5
90021f6e:	9b06      	ldr	r3, [sp, #24]
90021f70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021f74:	fb0e fe0b 	mul.w	lr, lr, fp
90021f78:	44bc      	add	ip, r7
90021f7a:	f501 7780 	add.w	r7, r1, #256	; 0x100
90021f7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021f82:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90021f86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021f8a:	0a09      	lsrs	r1, r1, #8
90021f8c:	fb0c 5509 	mla	r5, ip, r9, r5
90021f90:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021f94:	fb00 5504 	mla	r5, r0, r4, r5
90021f98:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
90021f9c:	9b07      	ldr	r3, [sp, #28]
90021f9e:	fb02 6000 	mla	r0, r2, r0, r6
90021fa2:	0a2d      	lsrs	r5, r5, #8
90021fa4:	fb02 e20a 	mla	r2, r2, sl, lr
90021fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021fac:	fb09 0001 	mla	r0, r9, r1, r0
90021fb0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021fb4:	fb04 0003 	mla	r0, r4, r3, r0
90021fb8:	9b00      	ldr	r3, [sp, #0]
90021fba:	fb04 2408 	mla	r4, r4, r8, r2
90021fbe:	9a04      	ldr	r2, [sp, #16]
90021fc0:	0a00      	lsrs	r0, r0, #8
90021fc2:	fb09 4903 	mla	r9, r9, r3, r4
90021fc6:	9b02      	ldr	r3, [sp, #8]
90021fc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90021fcc:	ea6f 2929 	mvn.w	r9, r9, asr #8
90021fd0:	4305      	orrs	r5, r0
90021fd2:	fa5f f989 	uxtb.w	r9, r9
90021fd6:	fb03 f109 	mul.w	r1, r3, r9
90021fda:	9b03      	ldr	r3, [sp, #12]
90021fdc:	fb03 f309 	mul.w	r3, r3, r9
90021fe0:	fb02 f909 	mul.w	r9, r2, r9
90021fe4:	1c4a      	adds	r2, r1, #1
90021fe6:	1c58      	adds	r0, r3, #1
90021fe8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90021fec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90021ff0:	0c2a      	lsrs	r2, r5, #16
90021ff2:	0a2b      	lsrs	r3, r5, #8
90021ff4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
90021ff8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90021ffc:	0212      	lsls	r2, r2, #8
90021ffe:	00db      	lsls	r3, r3, #3
90022000:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90022004:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022008:	4313      	orrs	r3, r2
9002200a:	f109 0201 	add.w	r2, r9, #1
9002200e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
90022012:	eb05 2519 	add.w	r5, r5, r9, lsr #8
90022016:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9002201a:	431d      	orrs	r5, r3
9002201c:	9b01      	ldr	r3, [sp, #4]
9002201e:	801d      	strh	r5, [r3, #0]
90022020:	b009      	add	sp, #36	; 0x24
90022022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022026:	2000      	movs	r0, #0
90022028:	e701      	b.n	90021e2e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9002202a:	2600      	movs	r6, #0
9002202c:	4630      	mov	r0, r6
9002202e:	e70b      	b.n	90021e48 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022030:	2600      	movs	r6, #0
90022032:	e709      	b.n	90021e48 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022034:	462e      	mov	r6, r5
90022036:	e707      	b.n	90021e48 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022038:	2700      	movs	r7, #0
9002203a:	e71a      	b.n	90021e72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9002203c:	2100      	movs	r1, #0
9002203e:	460f      	mov	r7, r1
90022040:	e723      	b.n	90021e8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022042:	4621      	mov	r1, r4
90022044:	4627      	mov	r7, r4
90022046:	e720      	b.n	90021e8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022048:	2100      	movs	r1, #0
9002204a:	e71e      	b.n	90021e8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9002204c:	4629      	mov	r1, r5
9002204e:	e71c      	b.n	90021e8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

90022050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022054:	b09b      	sub	sp, #108	; 0x6c
90022056:	9218      	str	r2, [sp, #96]	; 0x60
90022058:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002205a:	9019      	str	r0, [sp, #100]	; 0x64
9002205c:	9116      	str	r1, [sp, #88]	; 0x58
9002205e:	6850      	ldr	r0, [r2, #4]
90022060:	9307      	str	r3, [sp, #28]
90022062:	6812      	ldr	r2, [r2, #0]
90022064:	9d26      	ldr	r5, [sp, #152]	; 0x98
90022066:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002206a:	fb00 1303 	mla	r3, r0, r3, r1
9002206e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022072:	930a      	str	r3, [sp, #40]	; 0x28
90022074:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022076:	681b      	ldr	r3, [r3, #0]
90022078:	930f      	str	r3, [sp, #60]	; 0x3c
9002207a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002207c:	685e      	ldr	r6, [r3, #4]
9002207e:	3604      	adds	r6, #4
90022080:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022082:	2b00      	cmp	r3, #0
90022084:	dc03      	bgt.n	9002208e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90022086:	9b18      	ldr	r3, [sp, #96]	; 0x60
90022088:	2b00      	cmp	r3, #0
9002208a:	f340 8373 	ble.w	90022774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9002208e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022090:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022094:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022098:	1e48      	subs	r0, r1, #1
9002209a:	1e57      	subs	r7, r2, #1
9002209c:	9b07      	ldr	r3, [sp, #28]
9002209e:	2b00      	cmp	r3, #0
900220a0:	f340 818f 	ble.w	900223c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
900220a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
900220a6:	142b      	asrs	r3, r5, #16
900220a8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900220ac:	d406      	bmi.n	900220bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900220ae:	4584      	cmp	ip, r0
900220b0:	da04      	bge.n	900220bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900220b2:	2b00      	cmp	r3, #0
900220b4:	db02      	blt.n	900220bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900220b6:	42bb      	cmp	r3, r7
900220b8:	f2c0 8184 	blt.w	900223c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
900220bc:	f11c 0c01 	adds.w	ip, ip, #1
900220c0:	f100 8172 	bmi.w	900223a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220c4:	4561      	cmp	r1, ip
900220c6:	f2c0 816f 	blt.w	900223a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220ca:	3301      	adds	r3, #1
900220cc:	f100 816c 	bmi.w	900223a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220d0:	429a      	cmp	r2, r3
900220d2:	f2c0 8169 	blt.w	900223a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220d6:	9b07      	ldr	r3, [sp, #28]
900220d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900220da:	9317      	str	r3, [sp, #92]	; 0x5c
900220dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900220de:	2b00      	cmp	r3, #0
900220e0:	f340 818e 	ble.w	90022400 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
900220e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900220e6:	ea4f 4c25 	mov.w	ip, r5, asr #16
900220ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
900220ee:	f3c3 3203 	ubfx	r2, r3, #12, #4
900220f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900220f4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
900220f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
900220fa:	141b      	asrs	r3, r3, #16
900220fc:	f100 81d1 	bmi.w	900224a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022100:	f101 38ff 	add.w	r8, r1, #4294967295
90022104:	4543      	cmp	r3, r8
90022106:	f280 81cc 	bge.w	900224a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002210a:	f1bc 0f00 	cmp.w	ip, #0
9002210e:	f2c0 81c8 	blt.w	900224a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022112:	f10e 38ff 	add.w	r8, lr, #4294967295
90022116:	45c4      	cmp	ip, r8
90022118:	f280 81c3 	bge.w	900224a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002211c:	b209      	sxth	r1, r1
9002211e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022120:	fb0c 3301 	mla	r3, ip, r1, r3
90022124:	eb04 0803 	add.w	r8, r4, r3
90022128:	5ce3      	ldrb	r3, [r4, r3]
9002212a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9002212e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90022132:	2a00      	cmp	r2, #0
90022134:	f000 81aa 	beq.w	9002248c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
90022138:	f898 c001 	ldrb.w	ip, [r8, #1]
9002213c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90022140:	940b      	str	r4, [sp, #44]	; 0x2c
90022142:	0e24      	lsrs	r4, r4, #24
90022144:	9412      	str	r4, [sp, #72]	; 0x48
90022146:	b178      	cbz	r0, 90022168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022148:	eb08 0c01 	add.w	ip, r8, r1
9002214c:	f818 1001 	ldrb.w	r1, [r8, r1]
90022150:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022154:	9108      	str	r1, [sp, #32]
90022156:	0e09      	lsrs	r1, r1, #24
90022158:	9110      	str	r1, [sp, #64]	; 0x40
9002215a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9002215e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022162:	910c      	str	r1, [sp, #48]	; 0x30
90022164:	0e09      	lsrs	r1, r1, #24
90022166:	9113      	str	r1, [sp, #76]	; 0x4c
90022168:	b292      	uxth	r2, r2
9002216a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002216c:	b280      	uxth	r0, r0
9002216e:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022170:	fb02 f900 	mul.w	r9, r2, r0
90022174:	0112      	lsls	r2, r2, #4
90022176:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002217a:	eba2 0809 	sub.w	r8, r2, r9
9002217e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022182:	b280      	uxth	r0, r0
90022184:	fa1f f888 	uxth.w	r8, r8
90022188:	1a12      	subs	r2, r2, r0
9002218a:	fb08 f101 	mul.w	r1, r8, r1
9002218e:	b292      	uxth	r2, r2
90022190:	fb02 110e 	mla	r1, r2, lr, r1
90022194:	fb00 1104 	mla	r1, r0, r4, r1
90022198:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002219a:	fb09 1104 	mla	r1, r9, r4, r1
9002219e:	f3c1 2107 	ubfx	r1, r1, #8, #8
900221a2:	2900      	cmp	r1, #0
900221a4:	f000 80f5 	beq.w	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900221a8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900221ac:	d01b      	beq.n	900221e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900221ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900221b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900221b6:	fb0e fa0a 	mul.w	sl, lr, sl
900221ba:	fb0e fe03 	mul.w	lr, lr, r3
900221be:	ea4f 231a 	mov.w	r3, sl, lsr #8
900221c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900221c6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900221ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900221ce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900221d2:	4453      	add	r3, sl
900221d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900221d8:	0a1b      	lsrs	r3, r3, #8
900221da:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900221de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900221e2:	ea43 030c 	orr.w	r3, r3, ip
900221e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
900221e8:	2cff      	cmp	r4, #255	; 0xff
900221ea:	d021      	beq.n	90022230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
900221ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900221ee:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900221f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
900221f4:	fb04 fb0b 	mul.w	fp, r4, fp
900221f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900221fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900221fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022200:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022204:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022208:	fb04 fa0a 	mul.w	sl, r4, sl
9002220c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022210:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022214:	44de      	add	lr, fp
90022216:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002221a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002221e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022222:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022226:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002222a:	ea4e 040a 	orr.w	r4, lr, sl
9002222e:	940b      	str	r4, [sp, #44]	; 0x2c
90022230:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022232:	2cff      	cmp	r4, #255	; 0xff
90022234:	d021      	beq.n	9002227a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90022236:	9c08      	ldr	r4, [sp, #32]
90022238:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9002223c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002223e:	fb04 fb0b 	mul.w	fp, r4, fp
90022242:	9c08      	ldr	r4, [sp, #32]
90022244:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022248:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002224a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002224e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022252:	fb04 fa0a 	mul.w	sl, r4, sl
90022256:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002225a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002225e:	44de      	add	lr, fp
90022260:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022264:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002226c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022270:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022274:	ea4e 040a 	orr.w	r4, lr, sl
90022278:	9408      	str	r4, [sp, #32]
9002227a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002227c:	2cff      	cmp	r4, #255	; 0xff
9002227e:	d021      	beq.n	900222c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
90022280:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022282:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022286:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022288:	fb04 fb0b 	mul.w	fp, r4, fp
9002228c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9002228e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022292:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022294:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022298:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002229c:	fb04 fa0a 	mul.w	sl, r4, sl
900222a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900222a4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900222a8:	44de      	add	lr, fp
900222aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900222ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900222b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900222b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900222ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900222be:	ea4e 040a 	orr.w	r4, lr, sl
900222c2:	940c      	str	r4, [sp, #48]	; 0x30
900222c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900222c6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
900222ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900222ce:	43c9      	mvns	r1, r1
900222d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900222d4:	9c08      	ldr	r4, [sp, #32]
900222d6:	fb08 fc0c 	mul.w	ip, r8, ip
900222da:	fb02 cc0e 	mla	ip, r2, lr, ip
900222de:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
900222e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900222e4:	fb00 cc0e 	mla	ip, r0, lr, ip
900222e8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
900222ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900222ee:	fb09 cc0e 	mla	ip, r9, lr, ip
900222f2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
900222f6:	fb08 f80e 	mul.w	r8, r8, lr
900222fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900222fe:	fa5f fe81 	uxtb.w	lr, r1
90022302:	fb02 8303 	mla	r3, r2, r3, r8
90022306:	9a08      	ldr	r2, [sp, #32]
90022308:	f8b7 8000 	ldrh.w	r8, [r7]
9002230c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022310:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9002231a:	fb00 330a 	mla	r3, r0, sl, r3
9002231e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
90022322:	ea4f 2228 	mov.w	r2, r8, asr #8
90022326:	fb09 3900 	mla	r9, r9, r0, r3
9002232a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9002232e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022332:	b2c9      	uxtb	r1, r1
90022334:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022338:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002233c:	fb02 f20e 	mul.w	r2, r2, lr
90022340:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90022344:	fb00 f00e 	mul.w	r0, r0, lr
90022348:	1c53      	adds	r3, r2, #1
9002234a:	fb01 f10e 	mul.w	r1, r1, lr
9002234e:	ea4c 0c09 	orr.w	ip, ip, r9
90022352:	eb03 2212 	add.w	r2, r3, r2, lsr #8
90022356:	ea4f 431c 	mov.w	r3, ip, lsr #16
9002235a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002235e:	4a60      	ldr	r2, [pc, #384]	; (900224e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
90022360:	b2db      	uxtb	r3, r3
90022362:	ea02 2203 	and.w	r2, r2, r3, lsl #8
90022366:	1c43      	adds	r3, r0, #1
90022368:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9002236c:	ea4f 231c 	mov.w	r3, ip, lsr #8
90022370:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90022374:	00db      	lsls	r3, r3, #3
90022376:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002237a:	4313      	orrs	r3, r2
9002237c:	1c4a      	adds	r2, r1, #1
9002237e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022382:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90022386:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9002238a:	ea4c 0c03 	orr.w	ip, ip, r3
9002238e:	f8a7 c000 	strh.w	ip, [r7]
90022392:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022394:	3702      	adds	r7, #2
90022396:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022398:	441a      	add	r2, r3
9002239a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002239c:	441d      	add	r5, r3
9002239e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900223a0:	9225      	str	r2, [sp, #148]	; 0x94
900223a2:	3b01      	subs	r3, #1
900223a4:	9317      	str	r3, [sp, #92]	; 0x5c
900223a6:	e699      	b.n	900220dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900223a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900223aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
900223ac:	441c      	add	r4, r3
900223ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900223b0:	441d      	add	r5, r3
900223b2:	9b07      	ldr	r3, [sp, #28]
900223b4:	9425      	str	r4, [sp, #148]	; 0x94
900223b6:	3b01      	subs	r3, #1
900223b8:	9307      	str	r3, [sp, #28]
900223ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900223bc:	3302      	adds	r3, #2
900223be:	930a      	str	r3, [sp, #40]	; 0x28
900223c0:	e66c      	b.n	9002209c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900223c2:	d024      	beq.n	9002240e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
900223c4:	9b07      	ldr	r3, [sp, #28]
900223c6:	9827      	ldr	r0, [sp, #156]	; 0x9c
900223c8:	3b01      	subs	r3, #1
900223ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
900223cc:	fb00 4003 	mla	r0, r0, r3, r4
900223d0:	1400      	asrs	r0, r0, #16
900223d2:	f53f ae80 	bmi.w	900220d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900223d6:	3901      	subs	r1, #1
900223d8:	4288      	cmp	r0, r1
900223da:	f6bf ae7c 	bge.w	900220d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900223de:	9928      	ldr	r1, [sp, #160]	; 0xa0
900223e0:	fb01 5303 	mla	r3, r1, r3, r5
900223e4:	141b      	asrs	r3, r3, #16
900223e6:	f53f ae76 	bmi.w	900220d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900223ea:	3a01      	subs	r2, #1
900223ec:	4293      	cmp	r3, r2
900223ee:	f6bf ae72 	bge.w	900220d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900223f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
900223f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900223fa:	f1bb 0f00 	cmp.w	fp, #0
900223fe:	dc71      	bgt.n	900224e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90022400:	9b07      	ldr	r3, [sp, #28]
90022402:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022408:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002240c:	930a      	str	r3, [sp, #40]	; 0x28
9002240e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022410:	2b00      	cmp	r3, #0
90022412:	f340 81af 	ble.w	90022774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
90022416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002241a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002241c:	ee30 0a04 	vadd.f32	s0, s0, s8
90022420:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022424:	eef0 6a62 	vmov.f32	s13, s5
90022428:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002242c:	ee31 1a05 	vadd.f32	s2, s2, s10
90022430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022434:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
90022438:	eef0 6a43 	vmov.f32	s13, s6
9002243c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022440:	ee16 5a90 	vmov	r5, s13
90022444:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022448:	ee61 7a27 	vmul.f32	s15, s2, s15
9002244c:	ee77 2a62 	vsub.f32	s5, s14, s5
90022450:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022454:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022458:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002245c:	ee12 2a90 	vmov	r2, s5
90022460:	eef0 2a47 	vmov.f32	s5, s14
90022464:	fb92 f3f3 	sdiv	r3, r2, r3
90022468:	ee13 2a10 	vmov	r2, s6
9002246c:	9327      	str	r3, [sp, #156]	; 0x9c
9002246e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022470:	eeb0 3a67 	vmov.f32	s6, s15
90022474:	fb92 f3f3 	sdiv	r3, r2, r3
90022478:	9328      	str	r3, [sp, #160]	; 0xa0
9002247a:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002247c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9002247e:	3b01      	subs	r3, #1
90022480:	9316      	str	r3, [sp, #88]	; 0x58
90022482:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022484:	bf08      	it	eq
90022486:	4613      	moveq	r3, r2
90022488:	9307      	str	r3, [sp, #28]
9002248a:	e5f9      	b.n	90022080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9002248c:	2800      	cmp	r0, #0
9002248e:	f43f ae6b 	beq.w	90022168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022492:	f818 1001 	ldrb.w	r1, [r8, r1]
90022496:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002249a:	9108      	str	r1, [sp, #32]
9002249c:	0e09      	lsrs	r1, r1, #24
9002249e:	9110      	str	r1, [sp, #64]	; 0x40
900224a0:	e662      	b.n	90022168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900224a2:	f113 0801 	adds.w	r8, r3, #1
900224a6:	f53f af74 	bmi.w	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900224aa:	4541      	cmp	r1, r8
900224ac:	f6ff af71 	blt.w	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900224b0:	f11c 0801 	adds.w	r8, ip, #1
900224b4:	f53f af6d 	bmi.w	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900224b8:	45c6      	cmp	lr, r8
900224ba:	f6ff af6a 	blt.w	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900224be:	b209      	sxth	r1, r1
900224c0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
900224c4:	fa0f f38e 	sxth.w	r3, lr
900224c8:	9100      	str	r1, [sp, #0]
900224ca:	4639      	mov	r1, r7
900224cc:	9301      	str	r3, [sp, #4]
900224ce:	4633      	mov	r3, r6
900224d0:	e9cd 2004 	strd	r2, r0, [sp, #16]
900224d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900224d6:	9819      	ldr	r0, [sp, #100]	; 0x64
900224d8:	f7ff fc7b 	bl	90021dd2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
900224dc:	e759      	b.n	90022392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900224de:	bf00      	nop
900224e0:	fffff800 	.word	0xfffff800
900224e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900224e6:	f3c5 3003 	ubfx	r0, r5, #12, #4
900224ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
900224ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
900224f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900224f2:	1427      	asrs	r7, r4, #16
900224f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900224f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900224fa:	142b      	asrs	r3, r5, #16
900224fc:	fb01 7303 	mla	r3, r1, r3, r7
90022500:	18e7      	adds	r7, r4, r3
90022502:	5ce3      	ldrb	r3, [r4, r3]
90022504:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022508:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002250c:	2a00      	cmp	r2, #0
9002250e:	f000 8127 	beq.w	90022760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
90022512:	f897 e001 	ldrb.w	lr, [r7, #1]
90022516:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9002251a:	940d      	str	r4, [sp, #52]	; 0x34
9002251c:	0e24      	lsrs	r4, r4, #24
9002251e:	9414      	str	r4, [sp, #80]	; 0x50
90022520:	b170      	cbz	r0, 90022540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022522:	eb07 0e01 	add.w	lr, r7, r1
90022526:	5c79      	ldrb	r1, [r7, r1]
90022528:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002252c:	9109      	str	r1, [sp, #36]	; 0x24
9002252e:	0e09      	lsrs	r1, r1, #24
90022530:	9111      	str	r1, [sp, #68]	; 0x44
90022532:	f89e 1001 	ldrb.w	r1, [lr, #1]
90022536:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002253a:	910e      	str	r1, [sp, #56]	; 0x38
9002253c:	0e09      	lsrs	r1, r1, #24
9002253e:	9115      	str	r1, [sp, #84]	; 0x54
90022540:	b292      	uxth	r2, r2
90022542:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022544:	b280      	uxth	r0, r0
90022546:	fb02 f800 	mul.w	r8, r2, r0
9002254a:	0112      	lsls	r2, r2, #4
9002254c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90022550:	eba2 0e08 	sub.w	lr, r2, r8
90022554:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90022558:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002255a:	b280      	uxth	r0, r0
9002255c:	fa1f fe8e 	uxth.w	lr, lr
90022560:	1a09      	subs	r1, r1, r0
90022562:	fb0e f202 	mul.w	r2, lr, r2
90022566:	b289      	uxth	r1, r1
90022568:	fb01 220c 	mla	r2, r1, ip, r2
9002256c:	fb00 2204 	mla	r2, r0, r4, r2
90022570:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022572:	fb08 2204 	mla	r2, r8, r4, r2
90022576:	f3c2 2207 	ubfx	r2, r2, #8, #8
9002257a:	2a00      	cmp	r2, #0
9002257c:	f000 80e5 	beq.w	9002274a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
90022580:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90022584:	d019      	beq.n	900225ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
90022586:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9002258a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002258e:	fb0c fa0a 	mul.w	sl, ip, sl
90022592:	fb0c fc03 	mul.w	ip, ip, r3
90022596:	ea4f 231a 	mov.w	r3, sl, lsr #8
9002259a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002259e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900225a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900225a6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900225aa:	4453      	add	r3, sl
900225ac:	0a3f      	lsrs	r7, r7, #8
900225ae:	0a1b      	lsrs	r3, r3, #8
900225b0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900225b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900225b8:	433b      	orrs	r3, r7
900225ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
900225bc:	2cff      	cmp	r4, #255	; 0xff
900225be:	d020      	beq.n	90022602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
900225c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900225c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900225c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
900225c8:	4367      	muls	r7, r4
900225ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900225cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900225d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900225d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
900225d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900225da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900225de:	fb04 fa0a 	mul.w	sl, r4, sl
900225e2:	44bc      	add	ip, r7
900225e4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900225e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900225ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900225f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900225f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900225f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900225fc:	ea4c 040a 	orr.w	r4, ip, sl
90022600:	940d      	str	r4, [sp, #52]	; 0x34
90022602:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022604:	2cff      	cmp	r4, #255	; 0xff
90022606:	d020      	beq.n	9002264a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
90022608:	9c09      	ldr	r4, [sp, #36]	; 0x24
9002260a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002260e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022610:	4367      	muls	r7, r4
90022612:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022614:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022618:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002261c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9002261e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022622:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022626:	fb04 fa0a 	mul.w	sl, r4, sl
9002262a:	44bc      	add	ip, r7
9002262c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022634:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022638:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002263c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022640:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022644:	ea4c 040a 	orr.w	r4, ip, sl
90022648:	9409      	str	r4, [sp, #36]	; 0x24
9002264a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9002264c:	2cff      	cmp	r4, #255	; 0xff
9002264e:	d020      	beq.n	90022692 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
90022650:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022652:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022656:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022658:	4367      	muls	r7, r4
9002265a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002265c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022660:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022664:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022666:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002266a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002266e:	fb04 fa0a 	mul.w	sl, r4, sl
90022672:	44bc      	add	ip, r7
90022674:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002267c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022684:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022688:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002268c:	ea4c 040a 	orr.w	r4, ip, sl
90022690:	940e      	str	r4, [sp, #56]	; 0x38
90022692:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022694:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002269c:	43d2      	mvns	r2, r2
9002269e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900226a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
900226a4:	b2d2      	uxtb	r2, r2
900226a6:	fb0e f707 	mul.w	r7, lr, r7
900226aa:	fb01 770c 	mla	r7, r1, ip, r7
900226ae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900226b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900226b4:	fb00 770c 	mla	r7, r0, ip, r7
900226b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900226bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900226be:	fb08 770c 	mla	r7, r8, ip, r7
900226c2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
900226c6:	fb0e fe0c 	mul.w	lr, lr, ip
900226ca:	0a3f      	lsrs	r7, r7, #8
900226cc:	fb01 e303 	mla	r3, r1, r3, lr
900226d0:	9909      	ldr	r1, [sp, #36]	; 0x24
900226d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900226d6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
900226da:	990e      	ldr	r1, [sp, #56]	; 0x38
900226dc:	fb00 330a 	mla	r3, r0, sl, r3
900226e0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
900226e4:	fb08 3c0c 	mla	ip, r8, ip, r3
900226e8:	f8b9 3000 	ldrh.w	r3, [r9]
900226ec:	1218      	asrs	r0, r3, #8
900226ee:	10d9      	asrs	r1, r3, #3
900226f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900226f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900226f8:	00db      	lsls	r3, r3, #3
900226fa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900226fe:	4350      	muls	r0, r2
90022700:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022704:	b2db      	uxtb	r3, r3
90022706:	4351      	muls	r1, r2
90022708:	ea47 070c 	orr.w	r7, r7, ip
9002270c:	4353      	muls	r3, r2
9002270e:	1c42      	adds	r2, r0, #1
90022710:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022714:	0c3a      	lsrs	r2, r7, #16
90022716:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002271a:	4a18      	ldr	r2, [pc, #96]	; (9002277c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9002271c:	b2c0      	uxtb	r0, r0
9002271e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
90022722:	1c4a      	adds	r2, r1, #1
90022724:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022728:	0a3a      	lsrs	r2, r7, #8
9002272a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002272e:	00c9      	lsls	r1, r1, #3
90022730:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022734:	4301      	orrs	r1, r0
90022736:	1c58      	adds	r0, r3, #1
90022738:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9002273c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90022740:	f3c7 00c4 	ubfx	r0, r7, #3, #5
90022744:	4308      	orrs	r0, r1
90022746:	f8a9 0000 	strh.w	r0, [r9]
9002274a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002274c:	f109 0902 	add.w	r9, r9, #2
90022750:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022752:	f10b 3bff 	add.w	fp, fp, #4294967295
90022756:	441a      	add	r2, r3
90022758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002275a:	9225      	str	r2, [sp, #148]	; 0x94
9002275c:	441d      	add	r5, r3
9002275e:	e64c      	b.n	900223fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022760:	2800      	cmp	r0, #0
90022762:	f43f aeed 	beq.w	90022540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022766:	5c79      	ldrb	r1, [r7, r1]
90022768:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002276c:	9109      	str	r1, [sp, #36]	; 0x24
9002276e:	0e09      	lsrs	r1, r1, #24
90022770:	9111      	str	r1, [sp, #68]	; 0x44
90022772:	e6e5      	b.n	90022540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022774:	b01b      	add	sp, #108	; 0x6c
90022776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002277a:	bf00      	nop
9002277c:	fffff800 	.word	0xfffff800

90022780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90022780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022784:	b085      	sub	sp, #20
90022786:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9002278a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9002278e:	2800      	cmp	r0, #0
90022790:	9103      	str	r1, [sp, #12]
90022792:	fb00 7406 	mla	r4, r0, r6, r7
90022796:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002279a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9002279e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
900227a2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
900227a6:	eb03 0904 	add.w	r9, r3, r4
900227aa:	9501      	str	r5, [sp, #4]
900227ac:	f2c0 8150 	blt.w	90022a50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
900227b0:	4583      	cmp	fp, r0
900227b2:	f340 814d 	ble.w	90022a50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
900227b6:	2f00      	cmp	r7, #0
900227b8:	f2c0 8146 	blt.w	90022a48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
900227bc:	42be      	cmp	r6, r7
900227be:	f340 8143 	ble.w	90022a48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
900227c2:	f813 c004 	ldrb.w	ip, [r3, r4]
900227c6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
900227ca:	f64f 041f 	movw	r4, #63519	; 0xf81f
900227ce:	ea4f 02ec 	mov.w	r2, ip, asr #3
900227d2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
900227d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900227da:	4355      	muls	r5, r2
900227dc:	fb0c f203 	mul.w	r2, ip, r3
900227e0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
900227e4:	f605 0501 	addw	r5, r5, #2049	; 0x801
900227e8:	441d      	add	r5, r3
900227ea:	f102 0320 	add.w	r3, r2, #32
900227ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900227f2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
900227f6:	0a1b      	lsrs	r3, r3, #8
900227f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900227fc:	431c      	orrs	r4, r3
900227fe:	1c7b      	adds	r3, r7, #1
90022800:	f100 812b 	bmi.w	90022a5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022804:	429e      	cmp	r6, r3
90022806:	f340 8128 	ble.w	90022a5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9002280a:	2900      	cmp	r1, #0
9002280c:	f000 8128 	beq.w	90022a60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
90022810:	9a01      	ldr	r2, [sp, #4]
90022812:	f899 3001 	ldrb.w	r3, [r9, #1]
90022816:	8855      	ldrh	r5, [r2, #2]
90022818:	ea4f 08e3 	mov.w	r8, r3, asr #3
9002281c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90022820:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022824:	fb08 f802 	mul.w	r8, r8, r2
90022828:	f64f 021f 	movw	r2, #63519	; 0xf81f
9002282c:	435d      	muls	r5, r3
9002282e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90022832:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022836:	44d0      	add	r8, sl
90022838:	f105 0a20 	add.w	sl, r5, #32
9002283c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90022840:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90022844:	0a2d      	lsrs	r5, r5, #8
90022846:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002284a:	432a      	orrs	r2, r5
9002284c:	3001      	adds	r0, #1
9002284e:	f100 810d 	bmi.w	90022a6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022852:	4583      	cmp	fp, r0
90022854:	f340 810a 	ble.w	90022a6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022858:	f1be 0f00 	cmp.w	lr, #0
9002285c:	f000 810b 	beq.w	90022a76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
90022860:	2f00      	cmp	r7, #0
90022862:	f2c0 8100 	blt.w	90022a66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022866:	42be      	cmp	r6, r7
90022868:	f340 80fd 	ble.w	90022a66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9002286c:	9801      	ldr	r0, [sp, #4]
9002286e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90022872:	f819 5006 	ldrb.w	r5, [r9, r6]
90022876:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9002287a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9002287e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90022882:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90022886:	fb0a fa00 	mul.w	sl, sl, r0
9002288a:	fb05 f808 	mul.w	r8, r5, r8
9002288e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90022892:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
90022896:	4482      	add	sl, r0
90022898:	f108 0020 	add.w	r0, r8, #32
9002289c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900228a0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
900228a4:	0a00      	lsrs	r0, r0, #8
900228a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900228aa:	ea4b 0b00 	orr.w	fp, fp, r0
900228ae:	3701      	adds	r7, #1
900228b0:	f100 80e6 	bmi.w	90022a80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
900228b4:	42be      	cmp	r6, r7
900228b6:	f340 80e3 	ble.w	90022a80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
900228ba:	2900      	cmp	r1, #0
900228bc:	f000 80e3 	beq.w	90022a86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
900228c0:	3601      	adds	r6, #1
900228c2:	9801      	ldr	r0, [sp, #4]
900228c4:	f819 7006 	ldrb.w	r7, [r9, r6]
900228c8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
900228cc:	ea4f 09e7 	mov.w	r9, r7, asr #3
900228d0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
900228d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900228d8:	fb09 f906 	mul.w	r9, r9, r6
900228dc:	fb07 f800 	mul.w	r8, r7, r0
900228e0:	f64f 001f 	movw	r0, #63519	; 0xf81f
900228e4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
900228e8:	f609 0901 	addw	r9, r9, #2049	; 0x801
900228ec:	44d1      	add	r9, sl
900228ee:	ea00 1659 	and.w	r6, r0, r9, lsr #5
900228f2:	f108 0020 	add.w	r0, r8, #32
900228f6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900228fa:	0a00      	lsrs	r0, r0, #8
900228fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022900:	4330      	orrs	r0, r6
90022902:	b28e      	uxth	r6, r1
90022904:	fa1f f98e 	uxth.w	r9, lr
90022908:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9002290c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90022910:	fb06 f809 	mul.w	r8, r6, r9
90022914:	0136      	lsls	r6, r6, #4
90022916:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002291a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9002291e:	9601      	str	r6, [sp, #4]
90022920:	ea4a 0404 	orr.w	r4, sl, r4
90022924:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022928:	fa1f f689 	uxth.w	r6, r9
9002292c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022930:	fb11 f90e 	smulbb	r9, r1, lr
90022934:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022938:	9602      	str	r6, [sp, #8]
9002293a:	4626      	mov	r6, r4
9002293c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90022940:	f1ce 0410 	rsb	r4, lr, #16
90022944:	ea4a 0202 	orr.w	r2, sl, r2
90022948:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9002294c:	1a64      	subs	r4, r4, r1
9002294e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90022952:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022956:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002295a:	434a      	muls	r2, r1
9002295c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90022960:	ea4a 0000 	orr.w	r0, sl, r0
90022964:	9903      	ldr	r1, [sp, #12]
90022966:	fb04 2406 	mla	r4, r4, r6, r2
9002296a:	9e02      	ldr	r6, [sp, #8]
9002296c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90022970:	fb09 4200 	mla	r2, r9, r0, r4
90022974:	ea4f 440b 	mov.w	r4, fp, lsl #16
90022978:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9002297c:	8808      	ldrh	r0, [r1, #0]
9002297e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90022982:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
90022986:	ea44 0b0b 	orr.w	fp, r4, fp
9002298a:	9c01      	ldr	r4, [sp, #4]
9002298c:	b289      	uxth	r1, r1
9002298e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
90022992:	fb0e 2e0b 	mla	lr, lr, fp, r2
90022996:	1ba4      	subs	r4, r4, r6
90022998:	9e01      	ldr	r6, [sp, #4]
9002299a:	ea4f 525e 	mov.w	r2, lr, lsr #21
9002299e:	eba6 0608 	sub.w	r6, r6, r8
900229a2:	b2a4      	uxth	r4, r4
900229a4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
900229a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900229ac:	b2b6      	uxth	r6, r6
900229ae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900229b2:	4373      	muls	r3, r6
900229b4:	ea42 0e0e 	orr.w	lr, r2, lr
900229b8:	fb0c 3304 	mla	r3, ip, r4, r3
900229bc:	9c02      	ldr	r4, [sp, #8]
900229be:	fa1f f28e 	uxth.w	r2, lr
900229c2:	fb04 3505 	mla	r5, r4, r5, r3
900229c6:	10d4      	asrs	r4, r2, #3
900229c8:	fb08 5707 	mla	r7, r8, r7, r5
900229cc:	1215      	asrs	r5, r2, #8
900229ce:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
900229d2:	00d2      	lsls	r2, r2, #3
900229d4:	f3c7 2707 	ubfx	r7, r7, #8, #8
900229d8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900229dc:	b2d2      	uxtb	r2, r2
900229de:	434f      	muls	r7, r1
900229e0:	1c7b      	adds	r3, r7, #1
900229e2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
900229e6:	1203      	asrs	r3, r0, #8
900229e8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
900229ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900229f0:	b2ff      	uxtb	r7, r7
900229f2:	fb13 f307 	smulbb	r3, r3, r7
900229f6:	fb05 3501 	mla	r5, r5, r1, r3
900229fa:	10c3      	asrs	r3, r0, #3
900229fc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022a00:	b2ad      	uxth	r5, r5
90022a02:	fb13 f307 	smulbb	r3, r3, r7
90022a06:	fb04 3401 	mla	r4, r4, r1, r3
90022a0a:	00c3      	lsls	r3, r0, #3
90022a0c:	b2db      	uxtb	r3, r3
90022a0e:	b2a4      	uxth	r4, r4
90022a10:	fb13 f307 	smulbb	r3, r3, r7
90022a14:	fb02 3101 	mla	r1, r2, r1, r3
90022a18:	1c6b      	adds	r3, r5, #1
90022a1a:	1c62      	adds	r2, r4, #1
90022a1c:	b289      	uxth	r1, r1
90022a1e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022a22:	1c4b      	adds	r3, r1, #1
90022a24:	eb02 2414 	add.w	r4, r2, r4, lsr #8
90022a28:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022a2c:	9a03      	ldr	r2, [sp, #12]
90022a2e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90022a32:	0964      	lsrs	r4, r4, #5
90022a34:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022a38:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90022a3c:	432b      	orrs	r3, r5
90022a3e:	4323      	orrs	r3, r4
90022a40:	8013      	strh	r3, [r2, #0]
90022a42:	b005      	add	sp, #20
90022a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022a48:	f04f 0c00 	mov.w	ip, #0
90022a4c:	4664      	mov	r4, ip
90022a4e:	e6d6      	b.n	900227fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
90022a50:	2300      	movs	r3, #0
90022a52:	469c      	mov	ip, r3
90022a54:	461a      	mov	r2, r3
90022a56:	461c      	mov	r4, r3
90022a58:	e6f8      	b.n	9002284c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022a5a:	2300      	movs	r3, #0
90022a5c:	461a      	mov	r2, r3
90022a5e:	e6f5      	b.n	9002284c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022a60:	460b      	mov	r3, r1
90022a62:	460a      	mov	r2, r1
90022a64:	e6f2      	b.n	9002284c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022a66:	2500      	movs	r5, #0
90022a68:	46ab      	mov	fp, r5
90022a6a:	e720      	b.n	900228ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
90022a6c:	2700      	movs	r7, #0
90022a6e:	463d      	mov	r5, r7
90022a70:	4638      	mov	r0, r7
90022a72:	46bb      	mov	fp, r7
90022a74:	e745      	b.n	90022902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022a76:	4677      	mov	r7, lr
90022a78:	4675      	mov	r5, lr
90022a7a:	4670      	mov	r0, lr
90022a7c:	46f3      	mov	fp, lr
90022a7e:	e740      	b.n	90022902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022a80:	2700      	movs	r7, #0
90022a82:	4638      	mov	r0, r7
90022a84:	e73d      	b.n	90022902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022a86:	460f      	mov	r7, r1
90022a88:	4608      	mov	r0, r1
90022a8a:	e73a      	b.n	90022902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

90022a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022a90:	b097      	sub	sp, #92	; 0x5c
90022a92:	9214      	str	r2, [sp, #80]	; 0x50
90022a94:	9308      	str	r3, [sp, #32]
90022a96:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022a98:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90022a9c:	9015      	str	r0, [sp, #84]	; 0x54
90022a9e:	9312      	str	r3, [sp, #72]	; 0x48
90022aa0:	6850      	ldr	r0, [r2, #4]
90022aa2:	9111      	str	r1, [sp, #68]	; 0x44
90022aa4:	6812      	ldr	r2, [r2, #0]
90022aa6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90022aaa:	fb00 1303 	mla	r3, r0, r3, r1
90022aae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022ab2:	9309      	str	r3, [sp, #36]	; 0x24
90022ab4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022ab6:	681b      	ldr	r3, [r3, #0]
90022ab8:	930b      	str	r3, [sp, #44]	; 0x2c
90022aba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022abc:	685b      	ldr	r3, [r3, #4]
90022abe:	930c      	str	r3, [sp, #48]	; 0x30
90022ac0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90022ac4:	930a      	str	r3, [sp, #40]	; 0x28
90022ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022ac8:	2b00      	cmp	r3, #0
90022aca:	dc03      	bgt.n	90022ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022ace:	2b00      	cmp	r3, #0
90022ad0:	f340 83cd 	ble.w	9002326e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022ad4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022ad6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022ada:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022ade:	1e48      	subs	r0, r1, #1
90022ae0:	1e55      	subs	r5, r2, #1
90022ae2:	9b08      	ldr	r3, [sp, #32]
90022ae4:	2b00      	cmp	r3, #0
90022ae6:	f340 81a5 	ble.w	90022e34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
90022aea:	9e21      	ldr	r6, [sp, #132]	; 0x84
90022aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022aee:	1436      	asrs	r6, r6, #16
90022af0:	ea4f 4323 	mov.w	r3, r3, asr #16
90022af4:	d406      	bmi.n	90022b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022af6:	4286      	cmp	r6, r0
90022af8:	da04      	bge.n	90022b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022afa:	2b00      	cmp	r3, #0
90022afc:	db02      	blt.n	90022b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022afe:	42ab      	cmp	r3, r5
90022b00:	f2c0 8199 	blt.w	90022e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022b04:	3601      	adds	r6, #1
90022b06:	f100 8186 	bmi.w	90022e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022b0a:	42b1      	cmp	r1, r6
90022b0c:	f2c0 8183 	blt.w	90022e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022b10:	3301      	adds	r3, #1
90022b12:	f100 8180 	bmi.w	90022e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022b16:	429a      	cmp	r2, r3
90022b18:	f2c0 817d 	blt.w	90022e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022b1c:	9b08      	ldr	r3, [sp, #32]
90022b1e:	f64f 061f 	movw	r6, #63519	; 0xf81f
90022b22:	9f09      	ldr	r7, [sp, #36]	; 0x24
90022b24:	9313      	str	r3, [sp, #76]	; 0x4c
90022b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022b28:	2b00      	cmp	r3, #0
90022b2a:	f340 81a6 	ble.w	90022e7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90022b2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022b30:	9d21      	ldr	r5, [sp, #132]	; 0x84
90022b32:	1418      	asrs	r0, r3, #16
90022b34:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022b36:	142d      	asrs	r5, r5, #16
90022b38:	f3c3 3103 	ubfx	r1, r3, #12, #4
90022b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022b3e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90022b42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022b44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90022b48:	f100 81fa 	bmi.w	90022f40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022b4c:	f102 3eff 	add.w	lr, r2, #4294967295
90022b50:	4575      	cmp	r5, lr
90022b52:	f280 81f5 	bge.w	90022f40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022b56:	2800      	cmp	r0, #0
90022b58:	f2c0 81f2 	blt.w	90022f40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022b5c:	f103 3eff 	add.w	lr, r3, #4294967295
90022b60:	4570      	cmp	r0, lr
90022b62:	f280 81ed 	bge.w	90022f40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022b66:	b212      	sxth	r2, r2
90022b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022b6a:	fa1f fe81 	uxth.w	lr, r1
90022b6e:	fb00 5002 	mla	r0, r0, r2, r5
90022b72:	ea4f 150e 	mov.w	r5, lr, lsl #4
90022b76:	eb03 0a00 	add.w	sl, r3, r0
90022b7a:	f813 9000 	ldrb.w	r9, [r3, r0]
90022b7e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90022b82:	f89a 8001 	ldrb.w	r8, [sl, #1]
90022b86:	b29b      	uxth	r3, r3
90022b88:	f1bc 0f00 	cmp.w	ip, #0
90022b8c:	f000 81bb 	beq.w	90022f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
90022b90:	f81a 4002 	ldrb.w	r4, [sl, r2]
90022b94:	eb0a 0b02 	add.w	fp, sl, r2
90022b98:	fa1f fa8c 	uxth.w	sl, ip
90022b9c:	940d      	str	r4, [sp, #52]	; 0x34
90022b9e:	fb0a fe0e 	mul.w	lr, sl, lr
90022ba2:	f89b 4001 	ldrb.w	r4, [fp, #1]
90022ba6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90022baa:	eba5 050e 	sub.w	r5, r5, lr
90022bae:	940e      	str	r4, [sp, #56]	; 0x38
90022bb0:	fa1f fa8a 	uxth.w	sl, sl
90022bb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022bb6:	b2ad      	uxth	r5, r5
90022bb8:	eba3 030a 	sub.w	r3, r3, sl
90022bbc:	fb08 f505 	mul.w	r5, r8, r5
90022bc0:	b29b      	uxth	r3, r3
90022bc2:	fb09 5303 	mla	r3, r9, r3, r5
90022bc6:	fb0a 3304 	mla	r3, sl, r4, r3
90022bca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022bcc:	fb0e 3304 	mla	r3, lr, r4, r3
90022bd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022bd4:	2b00      	cmp	r3, #0
90022bd6:	f000 8111 	beq.w	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022bda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022bdc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90022be0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90022be4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90022be8:	f000 8192 	beq.w	90022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
90022bec:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90022bf0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90022bf4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022bf8:	fb0a fe0e 	mul.w	lr, sl, lr
90022bfc:	fb09 f000 	mul.w	r0, r9, r0
90022c00:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90022c04:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90022c08:	f100 0b20 	add.w	fp, r0, #32
90022c0c:	44ce      	add	lr, r9
90022c0e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90022c12:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90022c16:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022c1a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90022c1e:	ea4e 0909 	orr.w	r9, lr, r9
90022c22:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90022c26:	8868      	ldrh	r0, [r5, #2]
90022c28:	d019      	beq.n	90022c5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90022c2a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90022c2e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90022c32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022c36:	fb0a fe0e 	mul.w	lr, sl, lr
90022c3a:	fb08 f800 	mul.w	r8, r8, r0
90022c3e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90022c42:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90022c46:	f108 0b20 	add.w	fp, r8, #32
90022c4a:	4486      	add	lr, r0
90022c4c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90022c50:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90022c54:	0a00      	lsrs	r0, r0, #8
90022c56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022c5a:	ea4e 0000 	orr.w	r0, lr, r0
90022c5e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90022c62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90022c66:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90022c6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90022c6e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90022c72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022c76:	ea4e 0909 	orr.w	r9, lr, r9
90022c7a:	ea4a 0000 	orr.w	r0, sl, r0
90022c7e:	f1bc 0f00 	cmp.w	ip, #0
90022c82:	f000 8147 	beq.w	90022f14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
90022c86:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90022c8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022c8c:	3a01      	subs	r2, #1
90022c8e:	2cff      	cmp	r4, #255	; 0xff
90022c90:	ea4f 0242 	mov.w	r2, r2, lsl #1
90022c94:	f102 0202 	add.w	r2, r2, #2
90022c98:	eb05 0e02 	add.w	lr, r5, r2
90022c9c:	5aaa      	ldrh	r2, [r5, r2]
90022c9e:	d018      	beq.n	90022cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90022ca0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90022ca4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022ca8:	ea4f 08e4 	mov.w	r8, r4, asr #3
90022cac:	fb04 fa02 	mul.w	sl, r4, r2
90022cb0:	fb08 f805 	mul.w	r8, r8, r5
90022cb4:	f10a 0520 	add.w	r5, sl, #32
90022cb8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90022cbc:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022cc0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90022cc4:	4442      	add	r2, r8
90022cc6:	0a2d      	lsrs	r5, r5, #8
90022cc8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90022ccc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022cd0:	432a      	orrs	r2, r5
90022cd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022cd4:	f8be 5002 	ldrh.w	r5, [lr, #2]
90022cd8:	2cff      	cmp	r4, #255	; 0xff
90022cda:	d01a      	beq.n	90022d12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
90022cdc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90022ce0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022ce4:	ea4f 08e4 	mov.w	r8, r4, asr #3
90022ce8:	fb04 fa05 	mul.w	sl, r4, r5
90022cec:	fb08 f80e 	mul.w	r8, r8, lr
90022cf0:	f10a 0e20 	add.w	lr, sl, #32
90022cf4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90022cf8:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022cfc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90022d00:	4445      	add	r5, r8
90022d02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022d06:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90022d0a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90022d0e:	ea45 050e 	orr.w	r5, r5, lr
90022d12:	fb1c fe01 	smulbb	lr, ip, r1
90022d16:	f1cc 0810 	rsb	r8, ip, #16
90022d1a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022d1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022d22:	ea4f 0eee 	mov.w	lr, lr, asr #3
90022d26:	eba8 0801 	sub.w	r8, r8, r1
90022d2a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90022d2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022d32:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90022d36:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90022d3a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90022d3e:	ea4a 0202 	orr.w	r2, sl, r2
90022d42:	4341      	muls	r1, r0
90022d44:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90022d48:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90022d4c:	fb09 1108 	mla	r1, r9, r8, r1
90022d50:	ea4b 0505 	orr.w	r5, fp, r5
90022d54:	fb0c 1102 	mla	r1, ip, r2, r1
90022d58:	fb0e 1e05 	mla	lr, lr, r5, r1
90022d5c:	ea4f 525e 	mov.w	r2, lr, lsr #21
90022d60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022d64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022d68:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022d6c:	ea42 0e0e 	orr.w	lr, r2, lr
90022d70:	fa1f f28e 	uxth.w	r2, lr
90022d74:	2bff      	cmp	r3, #255	; 0xff
90022d76:	d103      	bne.n	90022d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90022d78:	9912      	ldr	r1, [sp, #72]	; 0x48
90022d7a:	29ff      	cmp	r1, #255	; 0xff
90022d7c:	f000 80de 	beq.w	90022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
90022d80:	990a      	ldr	r1, [sp, #40]	; 0x28
90022d82:	1215      	asrs	r5, r2, #8
90022d84:	8838      	ldrh	r0, [r7, #0]
90022d86:	434b      	muls	r3, r1
90022d88:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90022d8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90022d8e:	f103 0c01 	add.w	ip, r3, #1
90022d92:	eb0c 2323 	add.w	r3, ip, r3, asr #8
90022d96:	ea6f 2323 	mvn.w	r3, r3, asr #8
90022d9a:	fa5f fc83 	uxtb.w	ip, r3
90022d9e:	1203      	asrs	r3, r0, #8
90022da0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022da4:	fb13 f30c 	smulbb	r3, r3, ip
90022da8:	fb05 3501 	mla	r5, r5, r1, r3
90022dac:	10c3      	asrs	r3, r0, #3
90022dae:	10d1      	asrs	r1, r2, #3
90022db0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022db4:	00d2      	lsls	r2, r2, #3
90022db6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022dba:	b2ad      	uxth	r5, r5
90022dbc:	fb13 f30c 	smulbb	r3, r3, ip
90022dc0:	b2d2      	uxtb	r2, r2
90022dc2:	fb01 3104 	mla	r1, r1, r4, r3
90022dc6:	00c3      	lsls	r3, r0, #3
90022dc8:	b2db      	uxtb	r3, r3
90022dca:	b289      	uxth	r1, r1
90022dcc:	fb13 f30c 	smulbb	r3, r3, ip
90022dd0:	fb02 3304 	mla	r3, r2, r4, r3
90022dd4:	b29a      	uxth	r2, r3
90022dd6:	1c6b      	adds	r3, r5, #1
90022dd8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022ddc:	1c53      	adds	r3, r2, #1
90022dde:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022de2:	1c4a      	adds	r2, r1, #1
90022de4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022de8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022dec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022df0:	0949      	lsrs	r1, r1, #5
90022df2:	432b      	orrs	r3, r5
90022df4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022df8:	430b      	orrs	r3, r1
90022dfa:	803b      	strh	r3, [r7, #0]
90022dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022dfe:	3702      	adds	r7, #2
90022e00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90022e02:	4413      	add	r3, r2
90022e04:	9a22      	ldr	r2, [sp, #136]	; 0x88
90022e06:	9321      	str	r3, [sp, #132]	; 0x84
90022e08:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022e0a:	441a      	add	r2, r3
90022e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022e0e:	3b01      	subs	r3, #1
90022e10:	9222      	str	r2, [sp, #136]	; 0x88
90022e12:	9313      	str	r3, [sp, #76]	; 0x4c
90022e14:	e687      	b.n	90022b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90022e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022e18:	9e23      	ldr	r6, [sp, #140]	; 0x8c
90022e1a:	9c22      	ldr	r4, [sp, #136]	; 0x88
90022e1c:	4433      	add	r3, r6
90022e1e:	9321      	str	r3, [sp, #132]	; 0x84
90022e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022e22:	441c      	add	r4, r3
90022e24:	9b08      	ldr	r3, [sp, #32]
90022e26:	3b01      	subs	r3, #1
90022e28:	9422      	str	r4, [sp, #136]	; 0x88
90022e2a:	9308      	str	r3, [sp, #32]
90022e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022e2e:	3302      	adds	r3, #2
90022e30:	9309      	str	r3, [sp, #36]	; 0x24
90022e32:	e656      	b.n	90022ae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
90022e34:	d028      	beq.n	90022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90022e36:	9b08      	ldr	r3, [sp, #32]
90022e38:	9823      	ldr	r0, [sp, #140]	; 0x8c
90022e3a:	3b01      	subs	r3, #1
90022e3c:	9d21      	ldr	r5, [sp, #132]	; 0x84
90022e3e:	fb00 5003 	mla	r0, r0, r3, r5
90022e42:	1400      	asrs	r0, r0, #16
90022e44:	f53f ae6a 	bmi.w	90022b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022e48:	3901      	subs	r1, #1
90022e4a:	4288      	cmp	r0, r1
90022e4c:	f6bf ae66 	bge.w	90022b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022e50:	9924      	ldr	r1, [sp, #144]	; 0x90
90022e52:	9822      	ldr	r0, [sp, #136]	; 0x88
90022e54:	fb01 0303 	mla	r3, r1, r3, r0
90022e58:	141b      	asrs	r3, r3, #16
90022e5a:	f53f ae5f 	bmi.w	90022b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022e5e:	3a01      	subs	r2, #1
90022e60:	4293      	cmp	r3, r2
90022e62:	f6bf ae5b 	bge.w	90022b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022e66:	9b08      	ldr	r3, [sp, #32]
90022e68:	f64f 061f 	movw	r6, #63519	; 0xf81f
90022e6c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90022e70:	9313      	str	r3, [sp, #76]	; 0x4c
90022e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022e74:	2b00      	cmp	r3, #0
90022e76:	f300 8082 	bgt.w	90022f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
90022e7a:	9b08      	ldr	r3, [sp, #32]
90022e7c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022e82:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90022e86:	9309      	str	r3, [sp, #36]	; 0x24
90022e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022e8a:	2b00      	cmp	r3, #0
90022e8c:	f340 81ef 	ble.w	9002326e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022e94:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022e96:	ee30 0a04 	vadd.f32	s0, s0, s8
90022e9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022e9e:	eef0 6a62 	vmov.f32	s13, s5
90022ea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022ea6:	ee31 1a05 	vadd.f32	s2, s2, s10
90022eaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022eae:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
90022eb2:	eef0 6a43 	vmov.f32	s13, s6
90022eb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022eba:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
90022ebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022ec2:	ee61 7a27 	vmul.f32	s15, s2, s15
90022ec6:	ee77 2a62 	vsub.f32	s5, s14, s5
90022eca:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022ece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022ed2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022ed6:	ee12 2a90 	vmov	r2, s5
90022eda:	eef0 2a47 	vmov.f32	s5, s14
90022ede:	fb92 f3f3 	sdiv	r3, r2, r3
90022ee2:	ee13 2a10 	vmov	r2, s6
90022ee6:	9323      	str	r3, [sp, #140]	; 0x8c
90022ee8:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022eea:	eeb0 3a67 	vmov.f32	s6, s15
90022eee:	fb92 f3f3 	sdiv	r3, r2, r3
90022ef2:	9324      	str	r3, [sp, #144]	; 0x90
90022ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022ef6:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022ef8:	3b01      	subs	r3, #1
90022efa:	9311      	str	r3, [sp, #68]	; 0x44
90022efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022efe:	bf08      	it	eq
90022f00:	4613      	moveq	r3, r2
90022f02:	9308      	str	r3, [sp, #32]
90022f04:	e5df      	b.n	90022ac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022f06:	fb08 f505 	mul.w	r5, r8, r5
90022f0a:	fb09 5303 	mla	r3, r9, r3, r5
90022f0e:	e65f      	b.n	90022bd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
90022f10:	4681      	mov	r9, r0
90022f12:	e686      	b.n	90022c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90022f14:	f1c1 0210 	rsb	r2, r1, #16
90022f18:	4341      	muls	r1, r0
90022f1a:	fb09 1902 	mla	r9, r9, r2, r1
90022f1e:	ea4f 0949 	mov.w	r9, r9, lsl #1
90022f22:	ea4f 5259 	mov.w	r2, r9, lsr #21
90022f26:	ea4f 1959 	mov.w	r9, r9, lsr #5
90022f2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022f2e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90022f32:	ea42 0909 	orr.w	r9, r2, r9
90022f36:	fa1f f289 	uxth.w	r2, r9
90022f3a:	e71b      	b.n	90022d74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90022f3c:	803a      	strh	r2, [r7, #0]
90022f3e:	e75d      	b.n	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f40:	f115 0e01 	adds.w	lr, r5, #1
90022f44:	f53f af5a 	bmi.w	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f48:	4572      	cmp	r2, lr
90022f4a:	f6ff af57 	blt.w	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f4e:	f110 0e01 	adds.w	lr, r0, #1
90022f52:	f53f af53 	bmi.w	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f56:	4573      	cmp	r3, lr
90022f58:	f6ff af50 	blt.w	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022f5e:	b21b      	sxth	r3, r3
90022f60:	b212      	sxth	r2, r2
90022f62:	9502      	str	r5, [sp, #8]
90022f64:	9301      	str	r3, [sp, #4]
90022f66:	9200      	str	r2, [sp, #0]
90022f68:	e9cd 0103 	strd	r0, r1, [sp, #12]
90022f6c:	e9cd c405 	strd	ip, r4, [sp, #20]
90022f70:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
90022f74:	4639      	mov	r1, r7
90022f76:	9815      	ldr	r0, [sp, #84]	; 0x54
90022f78:	f7ff fc02 	bl	90022780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
90022f7c:	e73e      	b.n	90022dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022f80:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f86:	f3c3 3503 	ubfx	r5, r3, #12, #4
90022f8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022f8c:	fa1f fc82 	uxth.w	ip, r2
90022f90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f96:	ea4f 100c 	mov.w	r0, ip, lsl #4
90022f9a:	141f      	asrs	r7, r3, #16
90022f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022f9e:	141b      	asrs	r3, r3, #16
90022fa0:	fb01 3707 	mla	r7, r1, r7, r3
90022fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022fa6:	eb03 0a07 	add.w	sl, r3, r7
90022faa:	f813 9007 	ldrb.w	r9, [r3, r7]
90022fae:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90022fb2:	f89a 8001 	ldrb.w	r8, [sl, #1]
90022fb6:	b29b      	uxth	r3, r3
90022fb8:	2d00      	cmp	r5, #0
90022fba:	f000 813d 	beq.w	90023238 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
90022fbe:	f81a 4001 	ldrb.w	r4, [sl, r1]
90022fc2:	eb0a 0b01 	add.w	fp, sl, r1
90022fc6:	fa1f fa85 	uxth.w	sl, r5
90022fca:	940f      	str	r4, [sp, #60]	; 0x3c
90022fcc:	fb0a fc0c 	mul.w	ip, sl, ip
90022fd0:	f89b 4001 	ldrb.w	r4, [fp, #1]
90022fd4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90022fd8:	eba0 000c 	sub.w	r0, r0, ip
90022fdc:	9410      	str	r4, [sp, #64]	; 0x40
90022fde:	fa1f fa8a 	uxth.w	sl, sl
90022fe2:	b280      	uxth	r0, r0
90022fe4:	eba3 030a 	sub.w	r3, r3, sl
90022fe8:	fb08 f000 	mul.w	r0, r8, r0
90022fec:	b29b      	uxth	r3, r3
90022fee:	fb09 0303 	mla	r3, r9, r3, r0
90022ff2:	980f      	ldr	r0, [sp, #60]	; 0x3c
90022ff4:	fb0a 3300 	mla	r3, sl, r0, r3
90022ff8:	fb0c 3304 	mla	r3, ip, r4, r3
90022ffc:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023000:	2b00      	cmp	r3, #0
90023002:	f000 810b 	beq.w	9002321c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
90023006:	980b      	ldr	r0, [sp, #44]	; 0x2c
90023008:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9002300c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002300e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023012:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023016:	f000 8114 	beq.w	90023242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9002301a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002301e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023022:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023026:	fb0a fc0c 	mul.w	ip, sl, ip
9002302a:	fb09 f707 	mul.w	r7, r9, r7
9002302e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023032:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023036:	f107 0b20 	add.w	fp, r7, #32
9002303a:	44cc      	add	ip, r9
9002303c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023040:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023044:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023048:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002304c:	ea4c 0909 	orr.w	r9, ip, r9
90023050:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023054:	8847      	ldrh	r7, [r0, #2]
90023056:	d019      	beq.n	9002308c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
90023058:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002305c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023060:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023064:	fb0a fc0c 	mul.w	ip, sl, ip
90023068:	fb08 f807 	mul.w	r8, r8, r7
9002306c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023070:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023074:	f108 0b20 	add.w	fp, r8, #32
90023078:	44bc      	add	ip, r7
9002307a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9002307e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023082:	0a3f      	lsrs	r7, r7, #8
90023084:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023088:	ea4c 0707 	orr.w	r7, ip, r7
9002308c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023090:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023094:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023098:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002309c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900230a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900230a4:	ea4c 0909 	orr.w	r9, ip, r9
900230a8:	ea4a 0707 	orr.w	r7, sl, r7
900230ac:	2d00      	cmp	r5, #0
900230ae:	f000 80ca 	beq.w	90023246 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
900230b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900230b6:	3901      	subs	r1, #1
900230b8:	0049      	lsls	r1, r1, #1
900230ba:	3102      	adds	r1, #2
900230bc:	eb00 0c01 	add.w	ip, r0, r1
900230c0:	5a41      	ldrh	r1, [r0, r1]
900230c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
900230c4:	28ff      	cmp	r0, #255	; 0xff
900230c6:	d019      	beq.n	900230fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
900230c8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
900230cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900230ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900230d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
900230d6:	fb04 fa01 	mul.w	sl, r4, r1
900230da:	fb08 f800 	mul.w	r8, r8, r0
900230de:	f10a 0020 	add.w	r0, sl, #32
900230e2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
900230e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
900230ea:	eb00 201a 	add.w	r0, r0, sl, lsr #8
900230ee:	4441      	add	r1, r8
900230f0:	0a00      	lsrs	r0, r0, #8
900230f2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
900230f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900230fa:	4301      	orrs	r1, r0
900230fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
900230fe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023102:	2cff      	cmp	r4, #255	; 0xff
90023104:	d01a      	beq.n	9002313c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
90023106:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002310a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002310e:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023112:	fb04 fa00 	mul.w	sl, r4, r0
90023116:	fb08 f80c 	mul.w	r8, r8, ip
9002311a:	f10a 0c20 	add.w	ip, sl, #32
9002311e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90023122:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023126:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9002312a:	4440      	add	r0, r8
9002312c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023130:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90023134:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90023138:	ea40 000c 	orr.w	r0, r0, ip
9002313c:	fb15 fc02 	smulbb	ip, r5, r2
90023140:	f1c5 0810 	rsb	r8, r5, #16
90023144:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023148:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002314c:	ea4f 0cec 	mov.w	ip, ip, asr #3
90023150:	eba8 0802 	sub.w	r8, r8, r2
90023154:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90023158:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002315c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90023160:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023164:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90023168:	ea4a 0101 	orr.w	r1, sl, r1
9002316c:	437a      	muls	r2, r7
9002316e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90023172:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023176:	fb09 2208 	mla	r2, r9, r8, r2
9002317a:	ea4b 0000 	orr.w	r0, fp, r0
9002317e:	fb05 2201 	mla	r2, r5, r1, r2
90023182:	fb0c 2200 	mla	r2, ip, r0, r2
90023186:	0d57      	lsrs	r7, r2, #21
90023188:	0952      	lsrs	r2, r2, #5
9002318a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002318e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023192:	433a      	orrs	r2, r7
90023194:	2bff      	cmp	r3, #255	; 0xff
90023196:	b292      	uxth	r2, r2
90023198:	d102      	bne.n	900231a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9002319a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002319c:	29ff      	cmp	r1, #255	; 0xff
9002319e:	d063      	beq.n	90023268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
900231a0:	980a      	ldr	r0, [sp, #40]	; 0x28
900231a2:	1215      	asrs	r5, r2, #8
900231a4:	f8be 1000 	ldrh.w	r1, [lr]
900231a8:	4343      	muls	r3, r0
900231aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900231ac:	10cf      	asrs	r7, r1, #3
900231ae:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900231b2:	1c58      	adds	r0, r3, #1
900231b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900231b8:	eb00 2323 	add.w	r3, r0, r3, asr #8
900231bc:	1208      	asrs	r0, r1, #8
900231be:	ea6f 2323 	mvn.w	r3, r3, asr #8
900231c2:	00c9      	lsls	r1, r1, #3
900231c4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900231c8:	b2db      	uxtb	r3, r3
900231ca:	b2c9      	uxtb	r1, r1
900231cc:	fb10 f003 	smulbb	r0, r0, r3
900231d0:	fb11 f103 	smulbb	r1, r1, r3
900231d4:	fb05 0504 	mla	r5, r5, r4, r0
900231d8:	10d0      	asrs	r0, r2, #3
900231da:	fb17 f703 	smulbb	r7, r7, r3
900231de:	00d2      	lsls	r2, r2, #3
900231e0:	b2ad      	uxth	r5, r5
900231e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900231e6:	b2d2      	uxtb	r2, r2
900231e8:	fb00 7004 	mla	r0, r0, r4, r7
900231ec:	1c6b      	adds	r3, r5, #1
900231ee:	fb02 1204 	mla	r2, r2, r4, r1
900231f2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900231f6:	b292      	uxth	r2, r2
900231f8:	b280      	uxth	r0, r0
900231fa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900231fe:	1c57      	adds	r7, r2, #1
90023200:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90023204:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90023208:	433d      	orrs	r5, r7
9002320a:	1c47      	adds	r7, r0, #1
9002320c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90023210:	097f      	lsrs	r7, r7, #5
90023212:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023216:	433d      	orrs	r5, r7
90023218:	f8ae 5000 	strh.w	r5, [lr]
9002321c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002321e:	f10e 0e02 	add.w	lr, lr, #2
90023222:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90023224:	4413      	add	r3, r2
90023226:	9a22      	ldr	r2, [sp, #136]	; 0x88
90023228:	9321      	str	r3, [sp, #132]	; 0x84
9002322a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002322c:	441a      	add	r2, r3
9002322e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023230:	3b01      	subs	r3, #1
90023232:	9222      	str	r2, [sp, #136]	; 0x88
90023234:	9313      	str	r3, [sp, #76]	; 0x4c
90023236:	e61c      	b.n	90022e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90023238:	fb08 f000 	mul.w	r0, r8, r0
9002323c:	fb09 0303 	mla	r3, r9, r3, r0
90023240:	e6dc      	b.n	90022ffc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
90023242:	46b9      	mov	r9, r7
90023244:	e704      	b.n	90023050 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
90023246:	f1c2 0110 	rsb	r1, r2, #16
9002324a:	437a      	muls	r2, r7
9002324c:	fb09 2901 	mla	r9, r9, r1, r2
90023250:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023254:	ea4f 5059 	mov.w	r0, r9, lsr #21
90023258:	ea4f 1259 	mov.w	r2, r9, lsr #5
9002325c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023260:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023264:	4302      	orrs	r2, r0
90023266:	e795      	b.n	90023194 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
90023268:	f8ae 2000 	strh.w	r2, [lr]
9002326c:	e7d6      	b.n	9002321c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9002326e:	b017      	add	sp, #92	; 0x5c
90023270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90023274 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90023274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023278:	b085      	sub	sp, #20
9002327a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9002327e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90023282:	2800      	cmp	r0, #0
90023284:	9103      	str	r1, [sp, #12]
90023286:	fb00 7406 	mla	r4, r0, r6, r7
9002328a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002328e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90023292:	eb03 0544 	add.w	r5, r3, r4, lsl #1
90023296:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9002329a:	eb02 0904 	add.w	r9, r2, r4
9002329e:	9501      	str	r5, [sp, #4]
900232a0:	f2c0 8141 	blt.w	90023526 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900232a4:	4583      	cmp	fp, r0
900232a6:	f340 813e 	ble.w	90023526 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900232aa:	2f00      	cmp	r7, #0
900232ac:	f2c0 8137 	blt.w	9002351e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900232b0:	42be      	cmp	r6, r7
900232b2:	f340 8134 	ble.w	9002351e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900232b6:	f812 c004 	ldrb.w	ip, [r2, r4]
900232ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
900232be:	f64f 041f 	movw	r4, #63519	; 0xf81f
900232c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
900232c6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
900232ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900232ce:	4355      	muls	r5, r2
900232d0:	fb0c f203 	mul.w	r2, ip, r3
900232d4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
900232d8:	f605 0501 	addw	r5, r5, #2049	; 0x801
900232dc:	441d      	add	r5, r3
900232de:	f102 0320 	add.w	r3, r2, #32
900232e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900232e6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
900232ea:	0a1b      	lsrs	r3, r3, #8
900232ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900232f0:	431c      	orrs	r4, r3
900232f2:	1c7b      	adds	r3, r7, #1
900232f4:	f100 811c 	bmi.w	90023530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
900232f8:	429e      	cmp	r6, r3
900232fa:	f340 8119 	ble.w	90023530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
900232fe:	2900      	cmp	r1, #0
90023300:	f000 8119 	beq.w	90023536 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
90023304:	9a01      	ldr	r2, [sp, #4]
90023306:	f899 3001 	ldrb.w	r3, [r9, #1]
9002330a:	8855      	ldrh	r5, [r2, #2]
9002330c:	ea4f 08e3 	mov.w	r8, r3, asr #3
90023310:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90023314:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023318:	fb08 f802 	mul.w	r8, r8, r2
9002331c:	f64f 021f 	movw	r2, #63519	; 0xf81f
90023320:	435d      	muls	r5, r3
90023322:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90023326:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002332a:	44d0      	add	r8, sl
9002332c:	f105 0a20 	add.w	sl, r5, #32
90023330:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90023334:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90023338:	0a2d      	lsrs	r5, r5, #8
9002333a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002333e:	432a      	orrs	r2, r5
90023340:	3001      	adds	r0, #1
90023342:	f100 80fe 	bmi.w	90023542 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
90023346:	4583      	cmp	fp, r0
90023348:	f340 80fb 	ble.w	90023542 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9002334c:	f1be 0f00 	cmp.w	lr, #0
90023350:	f000 80fc 	beq.w	9002354c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
90023354:	2f00      	cmp	r7, #0
90023356:	f2c0 80f1 	blt.w	9002353c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9002335a:	42be      	cmp	r6, r7
9002335c:	f340 80ee 	ble.w	9002353c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
90023360:	9801      	ldr	r0, [sp, #4]
90023362:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90023366:	f819 5006 	ldrb.w	r5, [r9, r6]
9002336a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9002336e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90023372:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90023376:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9002337a:	fb0a fa00 	mul.w	sl, sl, r0
9002337e:	fb05 f808 	mul.w	r8, r5, r8
90023382:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90023386:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9002338a:	4482      	add	sl, r0
9002338c:	f108 0020 	add.w	r0, r8, #32
90023390:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90023394:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90023398:	0a00      	lsrs	r0, r0, #8
9002339a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002339e:	ea4b 0b00 	orr.w	fp, fp, r0
900233a2:	3701      	adds	r7, #1
900233a4:	f100 80d7 	bmi.w	90023556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900233a8:	42be      	cmp	r6, r7
900233aa:	f340 80d4 	ble.w	90023556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900233ae:	2900      	cmp	r1, #0
900233b0:	f000 80d4 	beq.w	9002355c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
900233b4:	3601      	adds	r6, #1
900233b6:	9801      	ldr	r0, [sp, #4]
900233b8:	f819 7006 	ldrb.w	r7, [r9, r6]
900233bc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
900233c0:	ea4f 09e7 	mov.w	r9, r7, asr #3
900233c4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
900233c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900233cc:	fb09 f906 	mul.w	r9, r9, r6
900233d0:	fb07 f800 	mul.w	r8, r7, r0
900233d4:	f64f 001f 	movw	r0, #63519	; 0xf81f
900233d8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
900233dc:	f609 0901 	addw	r9, r9, #2049	; 0x801
900233e0:	44d1      	add	r9, sl
900233e2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
900233e6:	f108 0020 	add.w	r0, r8, #32
900233ea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900233ee:	0a00      	lsrs	r0, r0, #8
900233f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900233f4:	4330      	orrs	r0, r6
900233f6:	b28e      	uxth	r6, r1
900233f8:	fa1f f98e 	uxth.w	r9, lr
900233fc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90023400:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90023404:	fb06 f809 	mul.w	r8, r6, r9
90023408:	0136      	lsls	r6, r6, #4
9002340a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002340e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90023412:	9601      	str	r6, [sp, #4]
90023414:	ea4a 0404 	orr.w	r4, sl, r4
90023418:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002341c:	fa1f f689 	uxth.w	r6, r9
90023420:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023424:	fb11 f90e 	smulbb	r9, r1, lr
90023428:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002342c:	9602      	str	r6, [sp, #8]
9002342e:	4626      	mov	r6, r4
90023430:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90023434:	f1ce 0410 	rsb	r4, lr, #16
90023438:	ea4a 0202 	orr.w	r2, sl, r2
9002343c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023440:	1a64      	subs	r4, r4, r1
90023442:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90023446:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002344a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002344e:	434a      	muls	r2, r1
90023450:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90023454:	ea4a 0000 	orr.w	r0, sl, r0
90023458:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9002345c:	fb04 2406 	mla	r4, r4, r6, r2
90023460:	9903      	ldr	r1, [sp, #12]
90023462:	fb09 4200 	mla	r2, r9, r0, r4
90023466:	ea4f 440b 	mov.w	r4, fp, lsl #16
9002346a:	9801      	ldr	r0, [sp, #4]
9002346c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90023470:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023474:	8809      	ldrh	r1, [r1, #0]
90023476:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9002347a:	ea44 0b0b 	orr.w	fp, r4, fp
9002347e:	9c02      	ldr	r4, [sp, #8]
90023480:	1b00      	subs	r0, r0, r4
90023482:	9c01      	ldr	r4, [sp, #4]
90023484:	fb0e 2e0b 	mla	lr, lr, fp, r2
90023488:	eba4 0608 	sub.w	r6, r4, r8
9002348c:	b280      	uxth	r0, r0
9002348e:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023492:	b2b6      	uxth	r6, r6
90023494:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023498:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002349c:	4373      	muls	r3, r6
9002349e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900234a2:	fb0c 3300 	mla	r3, ip, r0, r3
900234a6:	9802      	ldr	r0, [sp, #8]
900234a8:	ea42 0e0e 	orr.w	lr, r2, lr
900234ac:	fb00 3505 	mla	r5, r0, r5, r3
900234b0:	120b      	asrs	r3, r1, #8
900234b2:	10c8      	asrs	r0, r1, #3
900234b4:	fb08 5707 	mla	r7, r8, r7, r5
900234b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900234bc:	00c9      	lsls	r1, r1, #3
900234be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900234c2:	ea6f 2727 	mvn.w	r7, r7, asr #8
900234c6:	fa1f f28e 	uxth.w	r2, lr
900234ca:	b2c9      	uxtb	r1, r1
900234cc:	b2ff      	uxtb	r7, r7
900234ce:	437b      	muls	r3, r7
900234d0:	4378      	muls	r0, r7
900234d2:	434f      	muls	r7, r1
900234d4:	1c59      	adds	r1, r3, #1
900234d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900234da:	1213      	asrs	r3, r2, #8
900234dc:	f023 0307 	bic.w	r3, r3, #7
900234e0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900234e4:	1c41      	adds	r1, r0, #1
900234e6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900234ea:	10d1      	asrs	r1, r2, #3
900234ec:	021b      	lsls	r3, r3, #8
900234ee:	f021 0103 	bic.w	r1, r1, #3
900234f2:	00d2      	lsls	r2, r2, #3
900234f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900234f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
900234fc:	00c9      	lsls	r1, r1, #3
900234fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023502:	430b      	orrs	r3, r1
90023504:	1c79      	adds	r1, r7, #1
90023506:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9002350a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9002350e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023512:	431a      	orrs	r2, r3
90023514:	9b03      	ldr	r3, [sp, #12]
90023516:	801a      	strh	r2, [r3, #0]
90023518:	b005      	add	sp, #20
9002351a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002351e:	f04f 0c00 	mov.w	ip, #0
90023522:	4664      	mov	r4, ip
90023524:	e6e5      	b.n	900232f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
90023526:	2300      	movs	r3, #0
90023528:	469c      	mov	ip, r3
9002352a:	461a      	mov	r2, r3
9002352c:	461c      	mov	r4, r3
9002352e:	e707      	b.n	90023340 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023530:	2300      	movs	r3, #0
90023532:	461a      	mov	r2, r3
90023534:	e704      	b.n	90023340 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023536:	460b      	mov	r3, r1
90023538:	460a      	mov	r2, r1
9002353a:	e701      	b.n	90023340 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9002353c:	2500      	movs	r5, #0
9002353e:	46ab      	mov	fp, r5
90023540:	e72f      	b.n	900233a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
90023542:	2700      	movs	r7, #0
90023544:	463d      	mov	r5, r7
90023546:	4638      	mov	r0, r7
90023548:	46bb      	mov	fp, r7
9002354a:	e754      	b.n	900233f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9002354c:	4677      	mov	r7, lr
9002354e:	4675      	mov	r5, lr
90023550:	4670      	mov	r0, lr
90023552:	46f3      	mov	fp, lr
90023554:	e74f      	b.n	900233f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023556:	2700      	movs	r7, #0
90023558:	4638      	mov	r0, r7
9002355a:	e74c      	b.n	900233f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9002355c:	460f      	mov	r7, r1
9002355e:	4608      	mov	r0, r1
90023560:	e749      	b.n	900233f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

90023564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023568:	b093      	sub	sp, #76	; 0x4c
9002356a:	9210      	str	r2, [sp, #64]	; 0x40
9002356c:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002356e:	9011      	str	r0, [sp, #68]	; 0x44
90023570:	910e      	str	r1, [sp, #56]	; 0x38
90023572:	6850      	ldr	r0, [r2, #4]
90023574:	9306      	str	r3, [sp, #24]
90023576:	6812      	ldr	r2, [r2, #0]
90023578:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002357c:	fb00 1303 	mla	r3, r0, r3, r1
90023580:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023584:	9307      	str	r3, [sp, #28]
90023586:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023588:	681b      	ldr	r3, [r3, #0]
9002358a:	9308      	str	r3, [sp, #32]
9002358c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002358e:	685b      	ldr	r3, [r3, #4]
90023590:	9309      	str	r3, [sp, #36]	; 0x24
90023592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023594:	2b00      	cmp	r3, #0
90023596:	dc03      	bgt.n	900235a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90023598:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002359a:	2b00      	cmp	r3, #0
9002359c:	f340 83b6 	ble.w	90023d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
900235a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900235a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900235a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900235aa:	1e48      	subs	r0, r1, #1
900235ac:	1e55      	subs	r5, r2, #1
900235ae:	9b06      	ldr	r3, [sp, #24]
900235b0:	2b00      	cmp	r3, #0
900235b2:	f340 8165 	ble.w	90023880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900235b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
900235b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900235ba:	1436      	asrs	r6, r6, #16
900235bc:	ea4f 4323 	mov.w	r3, r3, asr #16
900235c0:	d406      	bmi.n	900235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900235c2:	4286      	cmp	r6, r0
900235c4:	da04      	bge.n	900235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900235c6:	2b00      	cmp	r3, #0
900235c8:	db02      	blt.n	900235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900235ca:	42ab      	cmp	r3, r5
900235cc:	f2c0 8159 	blt.w	90023882 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900235d0:	3601      	adds	r6, #1
900235d2:	f100 8146 	bmi.w	90023862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
900235d6:	42b1      	cmp	r1, r6
900235d8:	f2c0 8143 	blt.w	90023862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
900235dc:	3301      	adds	r3, #1
900235de:	f100 8140 	bmi.w	90023862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
900235e2:	429a      	cmp	r2, r3
900235e4:	f2c0 813d 	blt.w	90023862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
900235e8:	9b06      	ldr	r3, [sp, #24]
900235ea:	f64f 061f 	movw	r6, #63519	; 0xf81f
900235ee:	9f07      	ldr	r7, [sp, #28]
900235f0:	930f      	str	r3, [sp, #60]	; 0x3c
900235f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900235f4:	2b00      	cmp	r3, #0
900235f6:	f340 8166 	ble.w	900238c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900235fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900235fc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
900235fe:	1418      	asrs	r0, r3, #16
90023600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023602:	142d      	asrs	r5, r5, #16
90023604:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023608:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9002360a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9002360e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023610:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023614:	f100 81f0 	bmi.w	900239f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023618:	f102 3eff 	add.w	lr, r2, #4294967295
9002361c:	4575      	cmp	r5, lr
9002361e:	f280 81eb 	bge.w	900239f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023622:	2800      	cmp	r0, #0
90023624:	f2c0 81e8 	blt.w	900239f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023628:	f103 3eff 	add.w	lr, r3, #4294967295
9002362c:	4570      	cmp	r0, lr
9002362e:	f280 81e3 	bge.w	900239f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023632:	b212      	sxth	r2, r2
90023634:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023636:	fa1f fe81 	uxth.w	lr, r1
9002363a:	fb00 5002 	mla	r0, r0, r2, r5
9002363e:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023642:	eb03 0a00 	add.w	sl, r3, r0
90023646:	f813 9000 	ldrb.w	r9, [r3, r0]
9002364a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9002364e:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023652:	b29b      	uxth	r3, r3
90023654:	f1bc 0f00 	cmp.w	ip, #0
90023658:	f000 817b 	beq.w	90023952 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9002365c:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023660:	eb0a 0b02 	add.w	fp, sl, r2
90023664:	fa1f fa8c 	uxth.w	sl, ip
90023668:	940a      	str	r4, [sp, #40]	; 0x28
9002366a:	fb0a fe0e 	mul.w	lr, sl, lr
9002366e:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023672:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90023676:	eba5 050e 	sub.w	r5, r5, lr
9002367a:	940b      	str	r4, [sp, #44]	; 0x2c
9002367c:	fa1f fa8a 	uxth.w	sl, sl
90023680:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023682:	b2ad      	uxth	r5, r5
90023684:	eba3 030a 	sub.w	r3, r3, sl
90023688:	fb08 f505 	mul.w	r5, r8, r5
9002368c:	b29b      	uxth	r3, r3
9002368e:	fb09 5303 	mla	r3, r9, r3, r5
90023692:	fb0a 3304 	mla	r3, sl, r4, r3
90023696:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023698:	fb0e 3304 	mla	r3, lr, r4, r3
9002369c:	f3c3 2307 	ubfx	r3, r3, #8, #8
900236a0:	2b00      	cmp	r3, #0
900236a2:	f000 80d1 	beq.w	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
900236a6:	9c08      	ldr	r4, [sp, #32]
900236a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900236ac:	eb04 0540 	add.w	r5, r4, r0, lsl #1
900236b0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
900236b4:	f000 8152 	beq.w	9002395c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
900236b8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
900236bc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
900236c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900236c4:	fb0a fe0e 	mul.w	lr, sl, lr
900236c8:	fb09 f000 	mul.w	r0, r9, r0
900236cc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
900236d0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
900236d4:	f100 0b20 	add.w	fp, r0, #32
900236d8:	44ce      	add	lr, r9
900236da:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
900236de:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
900236e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
900236e6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900236ea:	ea4e 0909 	orr.w	r9, lr, r9
900236ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900236f2:	8868      	ldrh	r0, [r5, #2]
900236f4:	d019      	beq.n	9002372a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
900236f6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
900236fa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
900236fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023702:	fb0a fe0e 	mul.w	lr, sl, lr
90023706:	fb08 f800 	mul.w	r8, r8, r0
9002370a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9002370e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023712:	f108 0b20 	add.w	fp, r8, #32
90023716:	4486      	add	lr, r0
90023718:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9002371c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023720:	0a00      	lsrs	r0, r0, #8
90023722:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023726:	ea4e 0000 	orr.w	r0, lr, r0
9002372a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9002372e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023732:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023736:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002373a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9002373e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023742:	ea4e 0909 	orr.w	r9, lr, r9
90023746:	ea4a 0000 	orr.w	r0, sl, r0
9002374a:	f1bc 0f00 	cmp.w	ip, #0
9002374e:	f000 8107 	beq.w	90023960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023752:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90023756:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023758:	3a01      	subs	r2, #1
9002375a:	2cff      	cmp	r4, #255	; 0xff
9002375c:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023760:	f102 0202 	add.w	r2, r2, #2
90023764:	eb05 0e02 	add.w	lr, r5, r2
90023768:	5aaa      	ldrh	r2, [r5, r2]
9002376a:	d018      	beq.n	9002379e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9002376c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90023770:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023774:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023778:	fb04 fa02 	mul.w	sl, r4, r2
9002377c:	fb08 f805 	mul.w	r8, r8, r5
90023780:	f10a 0520 	add.w	r5, sl, #32
90023784:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90023788:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002378c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023790:	4442      	add	r2, r8
90023792:	0a2d      	lsrs	r5, r5, #8
90023794:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90023798:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002379c:	432a      	orrs	r2, r5
9002379e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900237a0:	f8be 5002 	ldrh.w	r5, [lr, #2]
900237a4:	2cff      	cmp	r4, #255	; 0xff
900237a6:	d01a      	beq.n	900237de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900237a8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
900237ac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900237b0:	ea4f 08e4 	mov.w	r8, r4, asr #3
900237b4:	fb04 fa05 	mul.w	sl, r4, r5
900237b8:	fb08 f80e 	mul.w	r8, r8, lr
900237bc:	f10a 0e20 	add.w	lr, sl, #32
900237c0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
900237c4:	f608 0801 	addw	r8, r8, #2049	; 0x801
900237c8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
900237cc:	4445      	add	r5, r8
900237ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900237d2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
900237d6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
900237da:	ea45 050e 	orr.w	r5, r5, lr
900237de:	fb1c fe01 	smulbb	lr, ip, r1
900237e2:	f1cc 0810 	rsb	r8, ip, #16
900237e6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
900237ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900237ee:	ea4f 0eee 	mov.w	lr, lr, asr #3
900237f2:	eba8 0801 	sub.w	r8, r8, r1
900237f6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
900237fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900237fe:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023802:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023806:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9002380a:	ea4a 0202 	orr.w	r2, sl, r2
9002380e:	4341      	muls	r1, r0
90023810:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023814:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023818:	fb09 1108 	mla	r1, r9, r8, r1
9002381c:	ea4b 0505 	orr.w	r5, fp, r5
90023820:	fb0c 1102 	mla	r1, ip, r2, r1
90023824:	fb0e 1e05 	mla	lr, lr, r5, r1
90023828:	ea4f 525e 	mov.w	r2, lr, lsr #21
9002382c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023830:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023834:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023838:	ea42 0e0e 	orr.w	lr, r2, lr
9002383c:	fa1f f28e 	uxth.w	r2, lr
90023840:	2bff      	cmp	r3, #255	; 0xff
90023842:	f040 80a1 	bne.w	90023988 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
90023846:	803a      	strh	r2, [r7, #0]
90023848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9002384a:	3702      	adds	r7, #2
9002384c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9002384e:	4413      	add	r3, r2
90023850:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023852:	931d      	str	r3, [sp, #116]	; 0x74
90023854:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023856:	441a      	add	r2, r3
90023858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002385a:	3b01      	subs	r3, #1
9002385c:	921e      	str	r2, [sp, #120]	; 0x78
9002385e:	930f      	str	r3, [sp, #60]	; 0x3c
90023860:	e6c7      	b.n	900235f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90023862:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023864:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90023866:	9c1e      	ldr	r4, [sp, #120]	; 0x78
90023868:	4433      	add	r3, r6
9002386a:	931d      	str	r3, [sp, #116]	; 0x74
9002386c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002386e:	441c      	add	r4, r3
90023870:	9b06      	ldr	r3, [sp, #24]
90023872:	3b01      	subs	r3, #1
90023874:	941e      	str	r4, [sp, #120]	; 0x78
90023876:	9306      	str	r3, [sp, #24]
90023878:	9b07      	ldr	r3, [sp, #28]
9002387a:	3302      	adds	r3, #2
9002387c:	9307      	str	r3, [sp, #28]
9002387e:	e696      	b.n	900235ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90023880:	d028      	beq.n	900238d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023882:	9b06      	ldr	r3, [sp, #24]
90023884:	981f      	ldr	r0, [sp, #124]	; 0x7c
90023886:	3b01      	subs	r3, #1
90023888:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9002388a:	fb00 5003 	mla	r0, r0, r3, r5
9002388e:	1400      	asrs	r0, r0, #16
90023890:	f53f aeaa 	bmi.w	900235e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023894:	3901      	subs	r1, #1
90023896:	4288      	cmp	r0, r1
90023898:	f6bf aea6 	bge.w	900235e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9002389c:	9920      	ldr	r1, [sp, #128]	; 0x80
9002389e:	981e      	ldr	r0, [sp, #120]	; 0x78
900238a0:	fb01 0303 	mla	r3, r1, r3, r0
900238a4:	141b      	asrs	r3, r3, #16
900238a6:	f53f ae9f 	bmi.w	900235e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900238aa:	3a01      	subs	r2, #1
900238ac:	4293      	cmp	r3, r2
900238ae:	f6bf ae9b 	bge.w	900235e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900238b2:	9b06      	ldr	r3, [sp, #24]
900238b4:	f64f 061f 	movw	r6, #63519	; 0xf81f
900238b8:	f8dd e01c 	ldr.w	lr, [sp, #28]
900238bc:	930f      	str	r3, [sp, #60]	; 0x3c
900238be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900238c0:	2b00      	cmp	r3, #0
900238c2:	f300 80b6 	bgt.w	90023a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
900238c6:	9b06      	ldr	r3, [sp, #24]
900238c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900238cc:	9b07      	ldr	r3, [sp, #28]
900238ce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
900238d2:	9307      	str	r3, [sp, #28]
900238d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900238d6:	2b00      	cmp	r3, #0
900238d8:	f340 8218 	ble.w	90023d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
900238dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900238e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900238e2:	ee30 0a04 	vadd.f32	s0, s0, s8
900238e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900238ea:	eef0 6a62 	vmov.f32	s13, s5
900238ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
900238f2:	ee31 1a05 	vadd.f32	s2, s2, s10
900238f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900238fa:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
900238fe:	eef0 6a43 	vmov.f32	s13, s6
90023902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023906:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9002390a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002390e:	ee61 7a27 	vmul.f32	s15, s2, s15
90023912:	ee77 2a62 	vsub.f32	s5, s14, s5
90023916:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002391a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002391e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023922:	ee12 2a90 	vmov	r2, s5
90023926:	eef0 2a47 	vmov.f32	s5, s14
9002392a:	fb92 f3f3 	sdiv	r3, r2, r3
9002392e:	ee13 2a10 	vmov	r2, s6
90023932:	931f      	str	r3, [sp, #124]	; 0x7c
90023934:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023936:	eeb0 3a67 	vmov.f32	s6, s15
9002393a:	fb92 f3f3 	sdiv	r3, r2, r3
9002393e:	9320      	str	r3, [sp, #128]	; 0x80
90023940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023942:	9a10      	ldr	r2, [sp, #64]	; 0x40
90023944:	3b01      	subs	r3, #1
90023946:	930e      	str	r3, [sp, #56]	; 0x38
90023948:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002394a:	bf08      	it	eq
9002394c:	4613      	moveq	r3, r2
9002394e:	9306      	str	r3, [sp, #24]
90023950:	e61f      	b.n	90023592 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90023952:	fb08 f505 	mul.w	r5, r8, r5
90023956:	fb09 5303 	mla	r3, r9, r3, r5
9002395a:	e69f      	b.n	9002369c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9002395c:	4681      	mov	r9, r0
9002395e:	e6c6      	b.n	900236ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
90023960:	f1c1 0210 	rsb	r2, r1, #16
90023964:	4341      	muls	r1, r0
90023966:	fb09 1902 	mla	r9, r9, r2, r1
9002396a:	ea4f 0949 	mov.w	r9, r9, lsl #1
9002396e:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023972:	ea4f 1959 	mov.w	r9, r9, lsr #5
90023976:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002397a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9002397e:	ea42 0909 	orr.w	r9, r2, r9
90023982:	fa1f f289 	uxth.w	r2, r9
90023986:	e75b      	b.n	90023840 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
90023988:	f8b7 c000 	ldrh.w	ip, [r7]
9002398c:	43db      	mvns	r3, r3
9002398e:	ea4f 202c 	mov.w	r0, ip, asr #8
90023992:	fa5f fe83 	uxtb.w	lr, r3
90023996:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002399a:	ea4f 05ec 	mov.w	r5, ip, asr #3
9002399e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
900239a2:	fb00 f00e 	mul.w	r0, r0, lr
900239a6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900239aa:	b2db      	uxtb	r3, r3
900239ac:	1c41      	adds	r1, r0, #1
900239ae:	fb05 f50e 	mul.w	r5, r5, lr
900239b2:	fb03 f30e 	mul.w	r3, r3, lr
900239b6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900239ba:	1211      	asrs	r1, r2, #8
900239bc:	f021 0107 	bic.w	r1, r1, #7
900239c0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
900239c4:	48d3      	ldr	r0, [pc, #844]	; (90023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
900239c6:	b2c9      	uxtb	r1, r1
900239c8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
900239cc:	1c69      	adds	r1, r5, #1
900239ce:	eb01 2515 	add.w	r5, r1, r5, lsr #8
900239d2:	10d1      	asrs	r1, r2, #3
900239d4:	00d2      	lsls	r2, r2, #3
900239d6:	f021 0103 	bic.w	r1, r1, #3
900239da:	eb01 2115 	add.w	r1, r1, r5, lsr #8
900239de:	00c9      	lsls	r1, r1, #3
900239e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900239e4:	4301      	orrs	r1, r0
900239e6:	1c58      	adds	r0, r3, #1
900239e8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
900239ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900239f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900239f4:	430a      	orrs	r2, r1
900239f6:	e726      	b.n	90023846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
900239f8:	f115 0e01 	adds.w	lr, r5, #1
900239fc:	f53f af24 	bmi.w	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023a00:	4572      	cmp	r2, lr
90023a02:	f6ff af21 	blt.w	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023a06:	f110 0e01 	adds.w	lr, r0, #1
90023a0a:	f53f af1d 	bmi.w	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023a0e:	4573      	cmp	r3, lr
90023a10:	f6ff af1a 	blt.w	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023a14:	b21b      	sxth	r3, r3
90023a16:	b212      	sxth	r2, r2
90023a18:	9301      	str	r3, [sp, #4]
90023a1a:	9200      	str	r2, [sp, #0]
90023a1c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90023a20:	e9cd 5002 	strd	r5, r0, [sp, #8]
90023a24:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90023a28:	4639      	mov	r1, r7
90023a2a:	9811      	ldr	r0, [sp, #68]	; 0x44
90023a2c:	f7ff fc22 	bl	90023274 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90023a30:	e70a      	b.n	90023848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023a32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023a34:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023a3a:	f3c3 3503 	ubfx	r5, r3, #12, #4
90023a3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023a40:	fa1f fc82 	uxth.w	ip, r2
90023a44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023a48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023a4a:	ea4f 100c 	mov.w	r0, ip, lsl #4
90023a4e:	141f      	asrs	r7, r3, #16
90023a50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023a52:	141b      	asrs	r3, r3, #16
90023a54:	fb01 3707 	mla	r7, r1, r7, r3
90023a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023a5a:	eb03 0a07 	add.w	sl, r3, r7
90023a5e:	f813 9007 	ldrb.w	r9, [r3, r7]
90023a62:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90023a66:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023a6a:	b29b      	uxth	r3, r3
90023a6c:	2d00      	cmp	r5, #0
90023a6e:	f000 80fe 	beq.w	90023c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
90023a72:	f81a 4001 	ldrb.w	r4, [sl, r1]
90023a76:	eb0a 0b01 	add.w	fp, sl, r1
90023a7a:	fa1f fa85 	uxth.w	sl, r5
90023a7e:	940c      	str	r4, [sp, #48]	; 0x30
90023a80:	fb0a fc0c 	mul.w	ip, sl, ip
90023a84:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023a88:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023a8c:	eba0 000c 	sub.w	r0, r0, ip
90023a90:	940d      	str	r4, [sp, #52]	; 0x34
90023a92:	fa1f fa8a 	uxth.w	sl, sl
90023a96:	b280      	uxth	r0, r0
90023a98:	eba3 030a 	sub.w	r3, r3, sl
90023a9c:	fb08 f000 	mul.w	r0, r8, r0
90023aa0:	b29b      	uxth	r3, r3
90023aa2:	fb09 0303 	mla	r3, r9, r3, r0
90023aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
90023aa8:	fb0a 3300 	mla	r3, sl, r0, r3
90023aac:	fb0c 3304 	mla	r3, ip, r4, r3
90023ab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023ab4:	2b00      	cmp	r3, #0
90023ab6:	f000 80cc 	beq.w	90023c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023aba:	9808      	ldr	r0, [sp, #32]
90023abc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023ac0:	9c08      	ldr	r4, [sp, #32]
90023ac2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023ac6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023aca:	f000 80d5 	beq.w	90023c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
90023ace:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023ad2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023ad6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023ada:	fb0a fc0c 	mul.w	ip, sl, ip
90023ade:	fb09 f707 	mul.w	r7, r9, r7
90023ae2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023ae6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023aea:	f107 0b20 	add.w	fp, r7, #32
90023aee:	44cc      	add	ip, r9
90023af0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023af4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023af8:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023afc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023b00:	ea4c 0909 	orr.w	r9, ip, r9
90023b04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023b08:	8847      	ldrh	r7, [r0, #2]
90023b0a:	d019      	beq.n	90023b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
90023b0c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023b10:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023b14:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023b18:	fb0a fc0c 	mul.w	ip, sl, ip
90023b1c:	fb08 f807 	mul.w	r8, r8, r7
90023b20:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023b24:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023b28:	f108 0b20 	add.w	fp, r8, #32
90023b2c:	44bc      	add	ip, r7
90023b2e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90023b32:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023b36:	0a3f      	lsrs	r7, r7, #8
90023b38:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023b3c:	ea4c 0707 	orr.w	r7, ip, r7
90023b40:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023b44:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023b48:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023b4c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90023b50:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90023b54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023b58:	ea4c 0909 	orr.w	r9, ip, r9
90023b5c:	ea4a 0707 	orr.w	r7, sl, r7
90023b60:	2d00      	cmp	r5, #0
90023b62:	f000 808b 	beq.w	90023c7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
90023b66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90023b6a:	3901      	subs	r1, #1
90023b6c:	0049      	lsls	r1, r1, #1
90023b6e:	3102      	adds	r1, #2
90023b70:	eb00 0c01 	add.w	ip, r0, r1
90023b74:	5a41      	ldrh	r1, [r0, r1]
90023b76:	980c      	ldr	r0, [sp, #48]	; 0x30
90023b78:	28ff      	cmp	r0, #255	; 0xff
90023b7a:	d019      	beq.n	90023bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
90023b7c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90023b80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90023b82:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023b86:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023b8a:	fb04 fa01 	mul.w	sl, r4, r1
90023b8e:	fb08 f800 	mul.w	r8, r8, r0
90023b92:	f10a 0020 	add.w	r0, sl, #32
90023b96:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023b9a:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023b9e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90023ba2:	4441      	add	r1, r8
90023ba4:	0a00      	lsrs	r0, r0, #8
90023ba6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023baa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023bae:	4301      	orrs	r1, r0
90023bb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90023bb2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023bb6:	2cff      	cmp	r4, #255	; 0xff
90023bb8:	d01a      	beq.n	90023bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
90023bba:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90023bbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023bc2:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023bc6:	fb04 fa00 	mul.w	sl, r4, r0
90023bca:	fb08 f80c 	mul.w	r8, r8, ip
90023bce:	f10a 0c20 	add.w	ip, sl, #32
90023bd2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90023bd6:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023bda:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
90023bde:	4440      	add	r0, r8
90023be0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023be4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90023be8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90023bec:	ea40 000c 	orr.w	r0, r0, ip
90023bf0:	fb15 fc02 	smulbb	ip, r5, r2
90023bf4:	f1c5 0810 	rsb	r8, r5, #16
90023bf8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023bfc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90023c00:	ea4f 0cec 	mov.w	ip, ip, asr #3
90023c04:	eba8 0802 	sub.w	r8, r8, r2
90023c08:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90023c0c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023c10:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90023c14:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023c18:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90023c1c:	ea4a 0101 	orr.w	r1, sl, r1
90023c20:	437a      	muls	r2, r7
90023c22:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90023c26:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023c2a:	fb09 2208 	mla	r2, r9, r8, r2
90023c2e:	ea4b 0000 	orr.w	r0, fp, r0
90023c32:	fb05 2201 	mla	r2, r5, r1, r2
90023c36:	fb0c 2200 	mla	r2, ip, r0, r2
90023c3a:	0d57      	lsrs	r7, r2, #21
90023c3c:	0952      	lsrs	r2, r2, #5
90023c3e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023c42:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023c46:	433a      	orrs	r2, r7
90023c48:	2bff      	cmp	r3, #255	; 0xff
90023c4a:	b292      	uxth	r2, r2
90023c4c:	d127      	bne.n	90023c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
90023c4e:	f8ae 2000 	strh.w	r2, [lr]
90023c52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023c54:	f10e 0e02 	add.w	lr, lr, #2
90023c58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
90023c5a:	4413      	add	r3, r2
90023c5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023c5e:	931d      	str	r3, [sp, #116]	; 0x74
90023c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023c62:	441a      	add	r2, r3
90023c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023c66:	3b01      	subs	r3, #1
90023c68:	921e      	str	r2, [sp, #120]	; 0x78
90023c6a:	930f      	str	r3, [sp, #60]	; 0x3c
90023c6c:	e627      	b.n	900238be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90023c6e:	fb08 f000 	mul.w	r0, r8, r0
90023c72:	fb09 0303 	mla	r3, r9, r3, r0
90023c76:	e71b      	b.n	90023ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
90023c78:	46b9      	mov	r9, r7
90023c7a:	e743      	b.n	90023b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
90023c7c:	f1c2 0110 	rsb	r1, r2, #16
90023c80:	437a      	muls	r2, r7
90023c82:	fb09 2901 	mla	r9, r9, r1, r2
90023c86:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023c8a:	ea4f 5059 	mov.w	r0, r9, lsr #21
90023c8e:	ea4f 1259 	mov.w	r2, r9, lsr #5
90023c92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023c96:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023c9a:	4302      	orrs	r2, r0
90023c9c:	e7d4      	b.n	90023c48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
90023c9e:	f8be 7000 	ldrh.w	r7, [lr]
90023ca2:	43db      	mvns	r3, r3
90023ca4:	4c1b      	ldr	r4, [pc, #108]	; (90023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023ca6:	1238      	asrs	r0, r7, #8
90023ca8:	fa5f fc83 	uxtb.w	ip, r3
90023cac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023cb0:	10fd      	asrs	r5, r7, #3
90023cb2:	00fb      	lsls	r3, r7, #3
90023cb4:	fb00 f00c 	mul.w	r0, r0, ip
90023cb8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023cbc:	b2db      	uxtb	r3, r3
90023cbe:	fb05 f10c 	mul.w	r1, r5, ip
90023cc2:	1c45      	adds	r5, r0, #1
90023cc4:	fb03 f30c 	mul.w	r3, r3, ip
90023cc8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90023ccc:	1215      	asrs	r5, r2, #8
90023cce:	f025 0507 	bic.w	r5, r5, #7
90023cd2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90023cd6:	1c4d      	adds	r5, r1, #1
90023cd8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90023cdc:	10d1      	asrs	r1, r2, #3
90023cde:	b2c0      	uxtb	r0, r0
90023ce0:	f021 0103 	bic.w	r1, r1, #3
90023ce4:	00d2      	lsls	r2, r2, #3
90023ce6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
90023cea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90023cee:	00c9      	lsls	r1, r1, #3
90023cf0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023cf4:	4308      	orrs	r0, r1
90023cf6:	1c59      	adds	r1, r3, #1
90023cf8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90023cfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90023d00:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90023d04:	4318      	orrs	r0, r3
90023d06:	f8ae 0000 	strh.w	r0, [lr]
90023d0a:	e7a2      	b.n	90023c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023d0c:	b013      	add	sp, #76	; 0x4c
90023d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023d12:	bf00      	nop
90023d14:	fffff800 	.word	0xfffff800

90023d18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90023d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023d1c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90023d20:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90023d24:	fb05 4c03 	mla	ip, r5, r3, r4
90023d28:	2d00      	cmp	r5, #0
90023d2a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
90023d2e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90023d32:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
90023d36:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90023d3a:	8808      	ldrh	r0, [r1, #0]
90023d3c:	f2c0 80a7 	blt.w	90023e8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90023d40:	45aa      	cmp	sl, r5
90023d42:	f340 80a4 	ble.w	90023e8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90023d46:	2c00      	cmp	r4, #0
90023d48:	f2c0 809f 	blt.w	90023e8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90023d4c:	42a3      	cmp	r3, r4
90023d4e:	f340 809c 	ble.w	90023e8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90023d52:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
90023d56:	1c62      	adds	r2, r4, #1
90023d58:	f100 809c 	bmi.w	90023e94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023d5c:	4293      	cmp	r3, r2
90023d5e:	f340 8099 	ble.w	90023e94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023d62:	f1b9 0f00 	cmp.w	r9, #0
90023d66:	f000 8095 	beq.w	90023e94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023d6a:	f8be c002 	ldrh.w	ip, [lr, #2]
90023d6e:	3501      	adds	r5, #1
90023d70:	f100 8094 	bmi.w	90023e9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023d74:	45aa      	cmp	sl, r5
90023d76:	f340 8091 	ble.w	90023e9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023d7a:	2f00      	cmp	r7, #0
90023d7c:	f000 808e 	beq.w	90023e9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023d80:	2c00      	cmp	r4, #0
90023d82:	f2c0 8089 	blt.w	90023e98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90023d86:	42a3      	cmp	r3, r4
90023d88:	f340 8086 	ble.w	90023e98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90023d8c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
90023d90:	3401      	adds	r4, #1
90023d92:	f100 8086 	bmi.w	90023ea2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023d96:	42a3      	cmp	r3, r4
90023d98:	f340 8083 	ble.w	90023ea2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023d9c:	f1b9 0f00 	cmp.w	r9, #0
90023da0:	d07f      	beq.n	90023ea2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023da2:	3301      	adds	r3, #1
90023da4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
90023da8:	ea4f 4408 	mov.w	r4, r8, lsl #16
90023dac:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90023db0:	fb19 fe07 	smulbb	lr, r9, r7
90023db4:	f1c7 0210 	rsb	r2, r7, #16
90023db8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023dbc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90023dc0:	eba2 0209 	sub.w	r2, r2, r9
90023dc4:	ea44 0808 	orr.w	r8, r4, r8
90023dc8:	ea4f 440c 	mov.w	r4, ip, lsl #16
90023dcc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90023dd0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90023dd4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023dd8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
90023ddc:	ea44 0c0c 	orr.w	ip, r4, ip
90023de0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90023de4:	fb04 f40c 	mul.w	r4, r4, ip
90023de8:	fb02 4808 	mla	r8, r2, r8, r4
90023dec:	041a      	lsls	r2, r3, #16
90023dee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90023df2:	b2b4      	uxth	r4, r6
90023df4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90023df8:	43f6      	mvns	r6, r6
90023dfa:	4313      	orrs	r3, r2
90023dfc:	042a      	lsls	r2, r5, #16
90023dfe:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023e02:	b2f6      	uxtb	r6, r6
90023e04:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90023e08:	fb0e 8303 	mla	r3, lr, r3, r8
90023e0c:	432a      	orrs	r2, r5
90023e0e:	fb07 3202 	mla	r2, r7, r2, r3
90023e12:	10c7      	asrs	r7, r0, #3
90023e14:	0d53      	lsrs	r3, r2, #21
90023e16:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90023e1a:	0952      	lsrs	r2, r2, #5
90023e1c:	fb17 f706 	smulbb	r7, r7, r6
90023e20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023e24:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023e28:	431a      	orrs	r2, r3
90023e2a:	b293      	uxth	r3, r2
90023e2c:	1202      	asrs	r2, r0, #8
90023e2e:	121d      	asrs	r5, r3, #8
90023e30:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90023e34:	00c0      	lsls	r0, r0, #3
90023e36:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90023e3a:	fb12 f206 	smulbb	r2, r2, r6
90023e3e:	b2c0      	uxtb	r0, r0
90023e40:	fb05 2504 	mla	r5, r5, r4, r2
90023e44:	10da      	asrs	r2, r3, #3
90023e46:	fb10 f006 	smulbb	r0, r0, r6
90023e4a:	00db      	lsls	r3, r3, #3
90023e4c:	b2ad      	uxth	r5, r5
90023e4e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90023e52:	b2db      	uxtb	r3, r3
90023e54:	fb02 7204 	mla	r2, r2, r4, r7
90023e58:	fb03 0004 	mla	r0, r3, r4, r0
90023e5c:	1c6b      	adds	r3, r5, #1
90023e5e:	b292      	uxth	r2, r2
90023e60:	b280      	uxth	r0, r0
90023e62:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023e66:	1c43      	adds	r3, r0, #1
90023e68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90023e6c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90023e70:	1c50      	adds	r0, r2, #1
90023e72:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90023e76:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90023e7a:	0952      	lsrs	r2, r2, #5
90023e7c:	432b      	orrs	r3, r5
90023e7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023e82:	4313      	orrs	r3, r2
90023e84:	800b      	strh	r3, [r1, #0]
90023e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023e8a:	4680      	mov	r8, r0
90023e8c:	e763      	b.n	90023d56 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
90023e8e:	4684      	mov	ip, r0
90023e90:	4680      	mov	r8, r0
90023e92:	e76c      	b.n	90023d6e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90023e94:	4684      	mov	ip, r0
90023e96:	e76a      	b.n	90023d6e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90023e98:	4605      	mov	r5, r0
90023e9a:	e779      	b.n	90023d90 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
90023e9c:	4603      	mov	r3, r0
90023e9e:	4605      	mov	r5, r0
90023ea0:	e782      	b.n	90023da8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
90023ea2:	4603      	mov	r3, r0
90023ea4:	e780      	b.n	90023da8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

90023ea6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023eaa:	b093      	sub	sp, #76	; 0x4c
90023eac:	461d      	mov	r5, r3
90023eae:	9210      	str	r2, [sp, #64]	; 0x40
90023eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023eb2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
90023eb6:	910a      	str	r1, [sp, #40]	; 0x28
90023eb8:	920b      	str	r2, [sp, #44]	; 0x2c
90023eba:	6859      	ldr	r1, [r3, #4]
90023ebc:	681b      	ldr	r3, [r3, #0]
90023ebe:	9011      	str	r0, [sp, #68]	; 0x44
90023ec0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90023ec4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90023ec8:	fb01 2707 	mla	r7, r1, r7, r2
90023ecc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90023ed0:	9307      	str	r3, [sp, #28]
90023ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023ed4:	681b      	ldr	r3, [r3, #0]
90023ed6:	9309      	str	r3, [sp, #36]	; 0x24
90023ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90023eda:	43db      	mvns	r3, r3
90023edc:	b2db      	uxtb	r3, r3
90023ede:	9308      	str	r3, [sp, #32]
90023ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90023ee2:	2b00      	cmp	r3, #0
90023ee4:	dc03      	bgt.n	90023eee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90023ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
90023ee8:	2b00      	cmp	r3, #0
90023eea:	f340 8205 	ble.w	900242f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90023eee:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023ef0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023ef4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90023ef8:	1e48      	subs	r0, r1, #1
90023efa:	f102 3cff 	add.w	ip, r2, #4294967295
90023efe:	2d00      	cmp	r5, #0
90023f00:	f340 80da 	ble.w	900240b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90023f04:	ea5f 4e24 	movs.w	lr, r4, asr #16
90023f08:	ea4f 4326 	mov.w	r3, r6, asr #16
90023f0c:	d406      	bmi.n	90023f1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023f0e:	4586      	cmp	lr, r0
90023f10:	da04      	bge.n	90023f1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023f12:	2b00      	cmp	r3, #0
90023f14:	db02      	blt.n	90023f1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023f16:	4563      	cmp	r3, ip
90023f18:	f2c0 80cf 	blt.w	900240ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90023f1c:	f11e 0e01 	adds.w	lr, lr, #1
90023f20:	f100 80c1 	bmi.w	900240a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023f24:	4571      	cmp	r1, lr
90023f26:	f2c0 80be 	blt.w	900240a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023f2a:	3301      	adds	r3, #1
90023f2c:	f100 80bb 	bmi.w	900240a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023f30:	429a      	cmp	r2, r3
90023f32:	f2c0 80b8 	blt.w	900240a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023f36:	46a9      	mov	r9, r5
90023f38:	f8dd 801c 	ldr.w	r8, [sp, #28]
90023f3c:	f1b9 0f00 	cmp.w	r9, #0
90023f40:	f340 80d8 	ble.w	900240f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90023f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023f46:	1421      	asrs	r1, r4, #16
90023f48:	ea4f 4026 	mov.w	r0, r6, asr #16
90023f4c:	f3c4 3203 	ubfx	r2, r4, #12, #4
90023f50:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90023f54:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90023f58:	f100 8112 	bmi.w	90024180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023f5c:	f10e 3aff 	add.w	sl, lr, #4294967295
90023f60:	4551      	cmp	r1, sl
90023f62:	f280 810d 	bge.w	90024180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023f66:	2800      	cmp	r0, #0
90023f68:	f2c0 810a 	blt.w	90024180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023f6c:	f103 3aff 	add.w	sl, r3, #4294967295
90023f70:	4550      	cmp	r0, sl
90023f72:	f280 8105 	bge.w	90024180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023f76:	fa0f f38e 	sxth.w	r3, lr
90023f7a:	fb00 1103 	mla	r1, r0, r3, r1
90023f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
90023f80:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90023f84:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90023f88:	f8ba 1002 	ldrh.w	r1, [sl, #2]
90023f8c:	f1bc 0f00 	cmp.w	ip, #0
90023f90:	d007      	beq.n	90023fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90023f92:	005b      	lsls	r3, r3, #1
90023f94:	eb0a 0003 	add.w	r0, sl, r3
90023f98:	f83a 3003 	ldrh.w	r3, [sl, r3]
90023f9c:	930c      	str	r3, [sp, #48]	; 0x30
90023f9e:	8843      	ldrh	r3, [r0, #2]
90023fa0:	930d      	str	r3, [sp, #52]	; 0x34
90023fa2:	ea4f 400e 	mov.w	r0, lr, lsl #16
90023fa6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023faa:	fb12 f30c 	smulbb	r3, r2, ip
90023fae:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023fb2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90023fb6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90023fba:	10db      	asrs	r3, r3, #3
90023fbc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023fc0:	ea40 000e 	orr.w	r0, r0, lr
90023fc4:	f1cc 0e10 	rsb	lr, ip, #16
90023fc8:	ea4a 0101 	orr.w	r1, sl, r1
90023fcc:	9f08      	ldr	r7, [sp, #32]
90023fce:	ebae 0e02 	sub.w	lr, lr, r2
90023fd2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90023fd6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90023fda:	4351      	muls	r1, r2
90023fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90023fde:	fb0e 1e00 	mla	lr, lr, r0, r1
90023fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
90023fe4:	0410      	lsls	r0, r2, #16
90023fe6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023fea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90023fee:	4310      	orrs	r0, r2
90023ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90023ff2:	0412      	lsls	r2, r2, #16
90023ff4:	fb03 e000 	mla	r0, r3, r0, lr
90023ff8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90023ffc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90024000:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024004:	ea42 020e 	orr.w	r2, r2, lr
90024008:	fb03 0302 	mla	r3, r3, r2, r0
9002400c:	f8b8 0000 	ldrh.w	r0, [r8]
90024010:	0d5a      	lsrs	r2, r3, #21
90024012:	095b      	lsrs	r3, r3, #5
90024014:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024018:	1201      	asrs	r1, r0, #8
9002401a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002401e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90024022:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90024026:	00c0      	lsls	r0, r0, #3
90024028:	4313      	orrs	r3, r2
9002402a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9002402e:	fb11 f107 	smulbb	r1, r1, r7
90024032:	b2c0      	uxtb	r0, r0
90024034:	b29b      	uxth	r3, r3
90024036:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9002403a:	fb10 f007 	smulbb	r0, r0, r7
9002403e:	fb1e fe07 	smulbb	lr, lr, r7
90024042:	ea4f 2c23 	mov.w	ip, r3, asr #8
90024046:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9002404a:	fb0c 1c02 	mla	ip, ip, r2, r1
9002404e:	10d9      	asrs	r1, r3, #3
90024050:	00db      	lsls	r3, r3, #3
90024052:	fa1f fc8c 	uxth.w	ip, ip
90024056:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002405a:	b2db      	uxtb	r3, r3
9002405c:	fb01 e102 	mla	r1, r1, r2, lr
90024060:	fb03 0302 	mla	r3, r3, r2, r0
90024064:	b289      	uxth	r1, r1
90024066:	b29a      	uxth	r2, r3
90024068:	f10c 0301 	add.w	r3, ip, #1
9002406c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90024070:	1c53      	adds	r3, r2, #1
90024072:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024076:	1c4a      	adds	r2, r1, #1
90024078:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9002407c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90024080:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024084:	0949      	lsrs	r1, r1, #5
90024086:	ea43 030c 	orr.w	r3, r3, ip
9002408a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002408e:	430b      	orrs	r3, r1
90024090:	f8a8 3000 	strh.w	r3, [r8]
90024094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024096:	f108 0802 	add.w	r8, r8, #2
9002409a:	f109 39ff 	add.w	r9, r9, #4294967295
9002409e:	441c      	add	r4, r3
900240a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900240a2:	441e      	add	r6, r3
900240a4:	e74a      	b.n	90023f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900240a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900240a8:	3d01      	subs	r5, #1
900240aa:	441c      	add	r4, r3
900240ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
900240ae:	441e      	add	r6, r3
900240b0:	9b07      	ldr	r3, [sp, #28]
900240b2:	3302      	adds	r3, #2
900240b4:	9307      	str	r3, [sp, #28]
900240b6:	e722      	b.n	90023efe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900240b8:	d022      	beq.n	90024100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900240ba:	1e6b      	subs	r3, r5, #1
900240bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
900240be:	fb00 4003 	mla	r0, r0, r3, r4
900240c2:	1400      	asrs	r0, r0, #16
900240c4:	f53f af37 	bmi.w	90023f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900240c8:	3901      	subs	r1, #1
900240ca:	4288      	cmp	r0, r1
900240cc:	f6bf af33 	bge.w	90023f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900240d0:	9920      	ldr	r1, [sp, #128]	; 0x80
900240d2:	fb01 6303 	mla	r3, r1, r3, r6
900240d6:	141b      	asrs	r3, r3, #16
900240d8:	f53f af2d 	bmi.w	90023f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900240dc:	3a01      	subs	r2, #1
900240de:	4293      	cmp	r3, r2
900240e0:	f6bf af29 	bge.w	90023f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900240e4:	46a8      	mov	r8, r5
900240e6:	f8dd 901c 	ldr.w	r9, [sp, #28]
900240ea:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
900240ee:	f1b8 0f00 	cmp.w	r8, #0
900240f2:	dc60      	bgt.n	900241b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
900240f4:	9b07      	ldr	r3, [sp, #28]
900240f6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900240fa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900240fe:	9307      	str	r3, [sp, #28]
90024100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024102:	2b00      	cmp	r3, #0
90024104:	f340 80f8 	ble.w	900242f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002410c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002410e:	ee30 0a04 	vadd.f32	s0, s0, s8
90024112:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024116:	eef0 6a62 	vmov.f32	s13, s5
9002411a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002411e:	ee31 1a05 	vadd.f32	s2, s2, s10
90024122:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024126:	ee16 4a90 	vmov	r4, s13
9002412a:	eef0 6a43 	vmov.f32	s13, s6
9002412e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024132:	ee16 6a90 	vmov	r6, s13
90024136:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002413a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002413e:	ee77 2a62 	vsub.f32	s5, s14, s5
90024142:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024146:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002414a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002414e:	ee12 2a90 	vmov	r2, s5
90024152:	eef0 2a47 	vmov.f32	s5, s14
90024156:	fb92 f3f3 	sdiv	r3, r2, r3
9002415a:	ee13 2a10 	vmov	r2, s6
9002415e:	931f      	str	r3, [sp, #124]	; 0x7c
90024160:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024162:	eeb0 3a67 	vmov.f32	s6, s15
90024166:	fb92 f3f3 	sdiv	r3, r2, r3
9002416a:	9320      	str	r3, [sp, #128]	; 0x80
9002416c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002416e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024170:	3b01      	subs	r3, #1
90024172:	930a      	str	r3, [sp, #40]	; 0x28
90024174:	bf08      	it	eq
90024176:	4615      	moveq	r5, r2
90024178:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002417a:	bf18      	it	ne
9002417c:	461d      	movne	r5, r3
9002417e:	e6af      	b.n	90023ee0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90024180:	f111 0a01 	adds.w	sl, r1, #1
90024184:	d486      	bmi.n	90024094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024186:	45d6      	cmp	lr, sl
90024188:	db84      	blt.n	90024094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002418a:	f110 0a01 	adds.w	sl, r0, #1
9002418e:	d481      	bmi.n	90024094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024190:	4553      	cmp	r3, sl
90024192:	f6ff af7f 	blt.w	90024094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024196:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90024198:	b21b      	sxth	r3, r3
9002419a:	9101      	str	r1, [sp, #4]
9002419c:	4641      	mov	r1, r8
9002419e:	9300      	str	r3, [sp, #0]
900241a0:	fa0f f38e 	sxth.w	r3, lr
900241a4:	e9cd 0202 	strd	r0, r2, [sp, #8]
900241a8:	e9cd c704 	strd	ip, r7, [sp, #16]
900241ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
900241ae:	9811      	ldr	r0, [sp, #68]	; 0x44
900241b0:	f7ff fdb2 	bl	90023d18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900241b4:	e76e      	b.n	90024094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900241b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900241b8:	1430      	asrs	r0, r6, #16
900241ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
900241bc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900241c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900241c4:	1423      	asrs	r3, r4, #16
900241c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900241ca:	fb01 3000 	mla	r0, r1, r0, r3
900241ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
900241d0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
900241d4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
900241d8:	8858      	ldrh	r0, [r3, #2]
900241da:	f1be 0f00 	cmp.w	lr, #0
900241de:	d00b      	beq.n	900241f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
900241e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900241e4:	3901      	subs	r1, #1
900241e6:	0049      	lsls	r1, r1, #1
900241e8:	3102      	adds	r1, #2
900241ea:	eb03 0b01 	add.w	fp, r3, r1
900241ee:	5a5b      	ldrh	r3, [r3, r1]
900241f0:	930e      	str	r3, [sp, #56]	; 0x38
900241f2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900241f6:	930f      	str	r3, [sp, #60]	; 0x3c
900241f8:	ea4f 410c 	mov.w	r1, ip, lsl #16
900241fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024200:	fb12 f30e 	smulbb	r3, r2, lr
90024204:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90024208:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002420c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024210:	10db      	asrs	r3, r3, #3
90024212:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024216:	ea41 010c 	orr.w	r1, r1, ip
9002421a:	f1ce 0c10 	rsb	ip, lr, #16
9002421e:	ea4b 0000 	orr.w	r0, fp, r0
90024222:	9f08      	ldr	r7, [sp, #32]
90024224:	ebac 0c02 	sub.w	ip, ip, r2
90024228:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002422c:	f108 38ff 	add.w	r8, r8, #4294967295
90024230:	4350      	muls	r0, r2
90024232:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90024238:	fb0c 0c01 	mla	ip, ip, r1, r0
9002423c:	980e      	ldr	r0, [sp, #56]	; 0x38
9002423e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024242:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90024246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90024248:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002424c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024250:	0412      	lsls	r2, r2, #16
90024252:	ea4b 0101 	orr.w	r1, fp, r1
90024256:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002425a:	fb03 c101 	mla	r1, r3, r1, ip
9002425e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024262:	4302      	orrs	r2, r0
90024264:	fb03 1202 	mla	r2, r3, r2, r1
90024268:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9002426c:	0952      	lsrs	r2, r2, #5
9002426e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90024272:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
90024276:	f8b9 2000 	ldrh.w	r2, [r9]
9002427a:	ea4b 0303 	orr.w	r3, fp, r3
9002427e:	1211      	asrs	r1, r2, #8
90024280:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90024284:	b29b      	uxth	r3, r3
90024286:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002428a:	00d2      	lsls	r2, r2, #3
9002428c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90024290:	fb11 f107 	smulbb	r1, r1, r7
90024294:	1218      	asrs	r0, r3, #8
90024296:	fb1c fc07 	smulbb	ip, ip, r7
9002429a:	b2d2      	uxtb	r2, r2
9002429c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900242a0:	fb12 f207 	smulbb	r2, r2, r7
900242a4:	fb00 100a 	mla	r0, r0, sl, r1
900242a8:	10d9      	asrs	r1, r3, #3
900242aa:	00db      	lsls	r3, r3, #3
900242ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900242b0:	b280      	uxth	r0, r0
900242b2:	b2db      	uxtb	r3, r3
900242b4:	fb01 c10a 	mla	r1, r1, sl, ip
900242b8:	fb03 230a 	mla	r3, r3, sl, r2
900242bc:	1c42      	adds	r2, r0, #1
900242be:	b289      	uxth	r1, r1
900242c0:	b29b      	uxth	r3, r3
900242c2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900242c6:	f101 0c01 	add.w	ip, r1, #1
900242ca:	1c5a      	adds	r2, r3, #1
900242cc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900242d0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900242d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900242d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900242da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900242de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900242e2:	441c      	add	r4, r3
900242e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900242e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900242ea:	4310      	orrs	r0, r2
900242ec:	441e      	add	r6, r3
900242ee:	ea40 000c 	orr.w	r0, r0, ip
900242f2:	f829 0b02 	strh.w	r0, [r9], #2
900242f6:	e6fa      	b.n	900240ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
900242f8:	b013      	add	sp, #76	; 0x4c
900242fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900242fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
900242fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90024302:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90024306:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002430a:	fb0e 4703 	mla	r7, lr, r3, r4
9002430e:	f1be 0f00 	cmp.w	lr, #0
90024312:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90024316:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002431a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002431e:	8808      	ldrh	r0, [r1, #0]
90024320:	db60      	blt.n	900243e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024322:	45f1      	cmp	r9, lr
90024324:	dd5e      	ble.n	900243e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024326:	2c00      	cmp	r4, #0
90024328:	db5a      	blt.n	900243e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002432a:	42a3      	cmp	r3, r4
9002432c:	dd58      	ble.n	900243e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002432e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90024332:	1c62      	adds	r2, r4, #1
90024334:	d459      	bmi.n	900243ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90024336:	4293      	cmp	r3, r2
90024338:	dd57      	ble.n	900243ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002433a:	2d00      	cmp	r5, #0
9002433c:	d055      	beq.n	900243ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002433e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90024342:	f11e 0e01 	adds.w	lr, lr, #1
90024346:	d454      	bmi.n	900243f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024348:	45f1      	cmp	r9, lr
9002434a:	dd52      	ble.n	900243f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9002434c:	2e00      	cmp	r6, #0
9002434e:	d050      	beq.n	900243f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024350:	2c00      	cmp	r4, #0
90024352:	db4c      	blt.n	900243ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024354:	42a3      	cmp	r3, r4
90024356:	dd4a      	ble.n	900243ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024358:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9002435c:	3401      	adds	r4, #1
9002435e:	d405      	bmi.n	9002436c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024360:	42a3      	cmp	r3, r4
90024362:	dd03      	ble.n	9002436c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024364:	b115      	cbz	r5, 9002436c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024366:	3301      	adds	r3, #1
90024368:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9002436c:	fb15 f406 	smulbb	r4, r5, r6
90024370:	ea4f 430c 	mov.w	r3, ip, lsl #16
90024374:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90024378:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9002437c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024380:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90024384:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90024388:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002438c:	ea43 0c0c 	orr.w	ip, r3, ip
90024390:	f1c6 0310 	rsb	r3, r6, #16
90024394:	ea4e 0707 	orr.w	r7, lr, r7
90024398:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9002439c:	1b5b      	subs	r3, r3, r5
9002439e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900243a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900243a6:	437d      	muls	r5, r7
900243a8:	fb03 5c0c 	mla	ip, r3, ip, r5
900243ac:	0403      	lsls	r3, r0, #16
900243ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900243b2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900243b6:	4318      	orrs	r0, r3
900243b8:	0413      	lsls	r3, r2, #16
900243ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900243be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900243c2:	fb04 c000 	mla	r0, r4, r0, ip
900243c6:	4313      	orrs	r3, r2
900243c8:	fb06 0003 	mla	r0, r6, r3, r0
900243cc:	0d43      	lsrs	r3, r0, #21
900243ce:	0940      	lsrs	r0, r0, #5
900243d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900243d4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900243d8:	4318      	orrs	r0, r3
900243da:	8008      	strh	r0, [r1, #0]
900243dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900243e0:	4684      	mov	ip, r0
900243e2:	e7a6      	b.n	90024332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
900243e4:	4607      	mov	r7, r0
900243e6:	4684      	mov	ip, r0
900243e8:	e7ab      	b.n	90024342 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900243ea:	4607      	mov	r7, r0
900243ec:	e7a9      	b.n	90024342 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900243ee:	4602      	mov	r2, r0
900243f0:	e7b4      	b.n	9002435c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
900243f2:	4602      	mov	r2, r0
900243f4:	e7ba      	b.n	9002436c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

900243f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900243f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900243fa:	b08f      	sub	sp, #60	; 0x3c
900243fc:	461d      	mov	r5, r3
900243fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024400:	9107      	str	r1, [sp, #28]
90024402:	920c      	str	r2, [sp, #48]	; 0x30
90024404:	6859      	ldr	r1, [r3, #4]
90024406:	681b      	ldr	r3, [r3, #0]
90024408:	900d      	str	r0, [sp, #52]	; 0x34
9002440a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002440e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90024412:	fb01 2707 	mla	r7, r1, r7, r2
90024416:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002441a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002441c:	f8d3 8000 	ldr.w	r8, [r3]
90024420:	9b07      	ldr	r3, [sp, #28]
90024422:	2b00      	cmp	r3, #0
90024424:	dc03      	bgt.n	9002442e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90024426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90024428:	2b00      	cmp	r3, #0
9002442a:	f340 8182 	ble.w	90024732 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9002442e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024430:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024434:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024438:	1e48      	subs	r0, r1, #1
9002443a:	f102 3cff 	add.w	ip, r2, #4294967295
9002443e:	2d00      	cmp	r5, #0
90024440:	f340 809b 	ble.w	9002457a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90024444:	ea5f 4e24 	movs.w	lr, r4, asr #16
90024448:	ea4f 4326 	mov.w	r3, r6, asr #16
9002444c:	d406      	bmi.n	9002445c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002444e:	4586      	cmp	lr, r0
90024450:	da04      	bge.n	9002445c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024452:	2b00      	cmp	r3, #0
90024454:	db02      	blt.n	9002445c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024456:	4563      	cmp	r3, ip
90024458:	f2c0 8090 	blt.w	9002457c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9002445c:	f11e 0e01 	adds.w	lr, lr, #1
90024460:	f100 8084 	bmi.w	9002456c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024464:	4571      	cmp	r1, lr
90024466:	f2c0 8081 	blt.w	9002456c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002446a:	3301      	adds	r3, #1
9002446c:	d47e      	bmi.n	9002456c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002446e:	429a      	cmp	r2, r3
90024470:	db7c      	blt.n	9002456c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024472:	46aa      	mov	sl, r5
90024474:	46b9      	mov	r9, r7
90024476:	f1ba 0f00 	cmp.w	sl, #0
9002447a:	f340 8099 	ble.w	900245b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
9002447e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024480:	1421      	asrs	r1, r4, #16
90024482:	ea4f 4026 	mov.w	r0, r6, asr #16
90024486:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002448a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002448e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024492:	f100 80d1 	bmi.w	90024638 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024496:	f10e 3bff 	add.w	fp, lr, #4294967295
9002449a:	4559      	cmp	r1, fp
9002449c:	f280 80cc 	bge.w	90024638 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900244a0:	2800      	cmp	r0, #0
900244a2:	f2c0 80c9 	blt.w	90024638 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900244a6:	f103 3bff 	add.w	fp, r3, #4294967295
900244aa:	4558      	cmp	r0, fp
900244ac:	f280 80c4 	bge.w	90024638 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900244b0:	fa0f fe8e 	sxth.w	lr, lr
900244b4:	fb00 110e 	mla	r1, r0, lr, r1
900244b8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900244bc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
900244c0:	8841      	ldrh	r1, [r0, #2]
900244c2:	f1bc 0f00 	cmp.w	ip, #0
900244c6:	d00b      	beq.n	900244e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
900244c8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
900244cc:	3b01      	subs	r3, #1
900244ce:	005b      	lsls	r3, r3, #1
900244d0:	3302      	adds	r3, #2
900244d2:	eb00 0e03 	add.w	lr, r0, r3
900244d6:	5ac3      	ldrh	r3, [r0, r3]
900244d8:	9308      	str	r3, [sp, #32]
900244da:	f8be 3002 	ldrh.w	r3, [lr, #2]
900244de:	9309      	str	r3, [sp, #36]	; 0x24
900244e0:	ea4f 400b 	mov.w	r0, fp, lsl #16
900244e4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900244e8:	fb12 f30c 	smulbb	r3, r2, ip
900244ec:	f1cc 0e10 	rsb	lr, ip, #16
900244f0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900244f4:	10db      	asrs	r3, r3, #3
900244f6:	ebae 0e02 	sub.w	lr, lr, r2
900244fa:	ea40 000b 	orr.w	r0, r0, fp
900244fe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024502:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024506:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002450a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002450e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90024512:	ea4b 0101 	orr.w	r1, fp, r1
90024516:	4351      	muls	r1, r2
90024518:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002451a:	fb0e 1e00 	mla	lr, lr, r0, r1
9002451e:	0410      	lsls	r0, r2, #16
90024520:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024524:	9908      	ldr	r1, [sp, #32]
90024526:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002452a:	4310      	orrs	r0, r2
9002452c:	9a08      	ldr	r2, [sp, #32]
9002452e:	0412      	lsls	r2, r2, #16
90024530:	fb03 e000 	mla	r0, r3, r0, lr
90024534:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90024538:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9002453c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024540:	ea42 020e 	orr.w	r2, r2, lr
90024544:	fb03 0302 	mla	r3, r3, r2, r0
90024548:	0d5a      	lsrs	r2, r3, #21
9002454a:	095b      	lsrs	r3, r3, #5
9002454c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024550:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024554:	4313      	orrs	r3, r2
90024556:	f8a9 3000 	strh.w	r3, [r9]
9002455a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002455c:	f109 0902 	add.w	r9, r9, #2
90024560:	f10a 3aff 	add.w	sl, sl, #4294967295
90024564:	441c      	add	r4, r3
90024566:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024568:	441e      	add	r6, r3
9002456a:	e784      	b.n	90024476 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9002456c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002456e:	3d01      	subs	r5, #1
90024570:	3702      	adds	r7, #2
90024572:	441c      	add	r4, r3
90024574:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024576:	441e      	add	r6, r3
90024578:	e761      	b.n	9002443e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9002457a:	d01d      	beq.n	900245b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002457c:	1e6b      	subs	r3, r5, #1
9002457e:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024580:	fb00 4003 	mla	r0, r0, r3, r4
90024584:	1400      	asrs	r0, r0, #16
90024586:	f53f af74 	bmi.w	90024472 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002458a:	3901      	subs	r1, #1
9002458c:	4288      	cmp	r0, r1
9002458e:	f6bf af70 	bge.w	90024472 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024592:	991c      	ldr	r1, [sp, #112]	; 0x70
90024594:	fb01 6303 	mla	r3, r1, r3, r6
90024598:	141b      	asrs	r3, r3, #16
9002459a:	f53f af6a 	bmi.w	90024472 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002459e:	3a01      	subs	r2, #1
900245a0:	4293      	cmp	r3, r2
900245a2:	f6bf af66 	bge.w	90024472 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900245a6:	46a9      	mov	r9, r5
900245a8:	46ba      	mov	sl, r7
900245aa:	f1b9 0f00 	cmp.w	r9, #0
900245ae:	dc5b      	bgt.n	90024668 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900245b0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900245b4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
900245b8:	9b07      	ldr	r3, [sp, #28]
900245ba:	2b00      	cmp	r3, #0
900245bc:	f340 80b9 	ble.w	90024732 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900245c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900245c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
900245c6:	ee30 0a04 	vadd.f32	s0, s0, s8
900245ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
900245ce:	eef0 6a62 	vmov.f32	s13, s5
900245d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900245d6:	ee31 1a05 	vadd.f32	s2, s2, s10
900245da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900245de:	ee16 4a90 	vmov	r4, s13
900245e2:	eef0 6a43 	vmov.f32	s13, s6
900245e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900245ea:	ee16 6a90 	vmov	r6, s13
900245ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
900245f2:	ee61 7a27 	vmul.f32	s15, s2, s15
900245f6:	ee77 2a62 	vsub.f32	s5, s14, s5
900245fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
900245fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024602:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024606:	ee12 2a90 	vmov	r2, s5
9002460a:	eef0 2a47 	vmov.f32	s5, s14
9002460e:	fb92 f3f3 	sdiv	r3, r2, r3
90024612:	ee13 2a10 	vmov	r2, s6
90024616:	931b      	str	r3, [sp, #108]	; 0x6c
90024618:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002461a:	eeb0 3a67 	vmov.f32	s6, s15
9002461e:	fb92 f3f3 	sdiv	r3, r2, r3
90024622:	931c      	str	r3, [sp, #112]	; 0x70
90024624:	9b07      	ldr	r3, [sp, #28]
90024626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024628:	3b01      	subs	r3, #1
9002462a:	9307      	str	r3, [sp, #28]
9002462c:	bf08      	it	eq
9002462e:	4615      	moveq	r5, r2
90024630:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024632:	bf18      	it	ne
90024634:	461d      	movne	r5, r3
90024636:	e6f3      	b.n	90024420 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90024638:	f111 0b01 	adds.w	fp, r1, #1
9002463c:	d48d      	bmi.n	9002455a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002463e:	45de      	cmp	lr, fp
90024640:	db8b      	blt.n	9002455a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024642:	f110 0b01 	adds.w	fp, r0, #1
90024646:	d488      	bmi.n	9002455a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024648:	455b      	cmp	r3, fp
9002464a:	db86      	blt.n	9002455a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002464c:	b21b      	sxth	r3, r3
9002464e:	e9cd 1001 	strd	r1, r0, [sp, #4]
90024652:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90024656:	9300      	str	r3, [sp, #0]
90024658:	4642      	mov	r2, r8
9002465a:	fa0f f38e 	sxth.w	r3, lr
9002465e:	4649      	mov	r1, r9
90024660:	980d      	ldr	r0, [sp, #52]	; 0x34
90024662:	f7ff fe4c 	bl	900242fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90024666:	e778      	b.n	9002455a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024668:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002466a:	1420      	asrs	r0, r4, #16
9002466c:	1431      	asrs	r1, r6, #16
9002466e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90024676:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002467a:	fb03 0101 	mla	r1, r3, r1, r0
9002467e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024682:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90024686:	8841      	ldrh	r1, [r0, #2]
90024688:	f1be 0f00 	cmp.w	lr, #0
9002468c:	d00b      	beq.n	900246a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9002468e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90024692:	3b01      	subs	r3, #1
90024694:	005b      	lsls	r3, r3, #1
90024696:	3302      	adds	r3, #2
90024698:	eb00 0b03 	add.w	fp, r0, r3
9002469c:	5ac3      	ldrh	r3, [r0, r3]
9002469e:	930a      	str	r3, [sp, #40]	; 0x28
900246a0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900246a4:	930b      	str	r3, [sp, #44]	; 0x2c
900246a6:	ea4f 400c 	mov.w	r0, ip, lsl #16
900246aa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900246ae:	fb12 f30e 	smulbb	r3, r2, lr
900246b2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900246b6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900246ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900246be:	10db      	asrs	r3, r3, #3
900246c0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900246c4:	ea40 000c 	orr.w	r0, r0, ip
900246c8:	f1ce 0c10 	rsb	ip, lr, #16
900246cc:	ea4b 0101 	orr.w	r1, fp, r1
900246d0:	f109 39ff 	add.w	r9, r9, #4294967295
900246d4:	ebac 0c02 	sub.w	ip, ip, r2
900246d8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900246dc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900246e0:	4351      	muls	r1, r2
900246e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900246e4:	fb0c 1c00 	mla	ip, ip, r0, r1
900246e8:	990a      	ldr	r1, [sp, #40]	; 0x28
900246ea:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900246ee:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
900246f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900246f4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900246f8:	0412      	lsls	r2, r2, #16
900246fa:	ea4b 0000 	orr.w	r0, fp, r0
900246fe:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90024702:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024706:	fb03 c000 	mla	r0, r3, r0, ip
9002470a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9002470e:	ea42 0b0b 	orr.w	fp, r2, fp
90024712:	fb03 000b 	mla	r0, r3, fp, r0
90024716:	0d43      	lsrs	r3, r0, #21
90024718:	0940      	lsrs	r0, r0, #5
9002471a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002471e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024722:	4318      	orrs	r0, r3
90024724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024726:	441c      	add	r4, r3
90024728:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002472a:	f82a 0b02 	strh.w	r0, [sl], #2
9002472e:	441e      	add	r6, r3
90024730:	e73b      	b.n	900245aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90024732:	b00f      	add	sp, #60	; 0x3c
90024734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90024738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90024738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002473c:	b085      	sub	sp, #20
9002473e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90024742:	9102      	str	r1, [sp, #8]
90024744:	2c00      	cmp	r4, #0
90024746:	fb04 7103 	mla	r1, r4, r3, r7
9002474a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9002474e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90024752:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90024756:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9002475a:	f2c0 811b 	blt.w	90024994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9002475e:	45a6      	cmp	lr, r4
90024760:	f340 8118 	ble.w	90024994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024764:	2f00      	cmp	r7, #0
90024766:	f2c0 8113 	blt.w	90024990 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9002476a:	42bb      	cmp	r3, r7
9002476c:	f340 8110 	ble.w	90024990 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024770:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90024774:	1c7a      	adds	r2, r7, #1
90024776:	f100 8110 	bmi.w	9002499a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9002477a:	4293      	cmp	r3, r2
9002477c:	f340 810d 	ble.w	9002499a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024780:	2e00      	cmp	r6, #0
90024782:	f000 810c 	beq.w	9002499e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90024786:	f8dc 1004 	ldr.w	r1, [ip, #4]
9002478a:	3401      	adds	r4, #1
9002478c:	f100 810b 	bmi.w	900249a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024790:	45a6      	cmp	lr, r4
90024792:	f340 8108 	ble.w	900249a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024796:	2800      	cmp	r0, #0
90024798:	f000 8108 	beq.w	900249ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
9002479c:	2f00      	cmp	r7, #0
9002479e:	f2c0 8100 	blt.w	900249a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900247a2:	42bb      	cmp	r3, r7
900247a4:	f340 80fd 	ble.w	900249a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900247a8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900247ac:	3701      	adds	r7, #1
900247ae:	f100 8100 	bmi.w	900249b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900247b2:	42bb      	cmp	r3, r7
900247b4:	f340 80fd 	ble.w	900249b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900247b8:	2e00      	cmp	r6, #0
900247ba:	f000 80fc 	beq.w	900249b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
900247be:	3301      	adds	r3, #1
900247c0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
900247c4:	b2b6      	uxth	r6, r6
900247c6:	b280      	uxth	r0, r0
900247c8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900247cc:	fb00 fe06 	mul.w	lr, r0, r6
900247d0:	0136      	lsls	r6, r6, #4
900247d2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900247d6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900247da:	eba6 070e 	sub.w	r7, r6, lr
900247de:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900247e2:	ea4f 6914 	mov.w	r9, r4, lsr #24
900247e6:	b280      	uxth	r0, r0
900247e8:	b2bf      	uxth	r7, r7
900247ea:	1a1b      	subs	r3, r3, r0
900247ec:	ea4f 6812 	mov.w	r8, r2, lsr #24
900247f0:	fb0a f607 	mul.w	r6, sl, r7
900247f4:	b29b      	uxth	r3, r3
900247f6:	fb0b 6603 	mla	r6, fp, r3, r6
900247fa:	fb00 6609 	mla	r6, r0, r9, r6
900247fe:	fb0e 6608 	mla	r6, lr, r8, r6
90024802:	f3c6 2607 	ubfx	r6, r6, #8, #8
90024806:	9600      	str	r6, [sp, #0]
90024808:	2e00      	cmp	r6, #0
9002480a:	f000 80be 	beq.w	9002498a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
9002480e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024812:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90024816:	9e02      	ldr	r6, [sp, #8]
90024818:	fb0b fc0c 	mul.w	ip, fp, ip
9002481c:	fb0b f505 	mul.w	r5, fp, r5
90024820:	8836      	ldrh	r6, [r6, #0]
90024822:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90024826:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002482a:	9501      	str	r5, [sp, #4]
9002482c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90024830:	44dc      	add	ip, fp
90024832:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024836:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9002483a:	9503      	str	r5, [sp, #12]
9002483c:	9d01      	ldr	r5, [sp, #4]
9002483e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90024842:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90024846:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9002484a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002484e:	fb0a fc0c 	mul.w	ip, sl, ip
90024852:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90024856:	fb0a fa01 	mul.w	sl, sl, r1
9002485a:	ea4f 251c 	mov.w	r5, ip, lsr #8
9002485e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024862:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90024866:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002486a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9002486e:	4465      	add	r5, ip
90024870:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90024874:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90024878:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002487c:	fb09 fc0c 	mul.w	ip, r9, ip
90024880:	0a2d      	lsrs	r5, r5, #8
90024882:	fb09 f904 	mul.w	r9, r9, r4
90024886:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002488a:	ea4f 211c 	mov.w	r1, ip, lsr #8
9002488e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024892:	f509 7480 	add.w	r4, r9, #256	; 0x100
90024896:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002489a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002489e:	437d      	muls	r5, r7
900248a0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900248a4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900248a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900248ac:	4461      	add	r1, ip
900248ae:	fb08 f404 	mul.w	r4, r8, r4
900248b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
900248b6:	fb08 f802 	mul.w	r8, r8, r2
900248ba:	0a09      	lsrs	r1, r1, #8
900248bc:	0a22      	lsrs	r2, r4, #8
900248be:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900248c2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900248c6:	fb07 f70a 	mul.w	r7, r7, sl
900248ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900248ce:	4414      	add	r4, r2
900248d0:	f508 7280 	add.w	r2, r8, #256	; 0x100
900248d4:	0a24      	lsrs	r4, r4, #8
900248d6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900248da:	9a03      	ldr	r2, [sp, #12]
900248dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900248e0:	fb02 5503 	mla	r5, r2, r3, r5
900248e4:	ea4f 2818 	mov.w	r8, r8, lsr #8
900248e8:	9a00      	ldr	r2, [sp, #0]
900248ea:	fb04 540e 	mla	r4, r4, lr, r5
900248ee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900248f2:	1235      	asrs	r5, r6, #8
900248f4:	fb01 4100 	mla	r1, r1, r0, r4
900248f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900248fc:	0a09      	lsrs	r1, r1, #8
900248fe:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90024902:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90024906:	fb03 7101 	mla	r1, r3, r1, r7
9002490a:	fb0e 1e08 	mla	lr, lr, r8, r1
9002490e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90024912:	fb00 e101 	mla	r1, r0, r1, lr
90024916:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9002491a:	b287      	uxth	r7, r0
9002491c:	0a09      	lsrs	r1, r1, #8
9002491e:	437a      	muls	r2, r7
90024920:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024924:	1c53      	adds	r3, r2, #1
90024926:	4321      	orrs	r1, r4
90024928:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002492c:	0c0a      	lsrs	r2, r1, #16
9002492e:	f3c1 2407 	ubfx	r4, r1, #8, #8
90024932:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90024936:	b2c8      	uxtb	r0, r1
90024938:	fb12 f207 	smulbb	r2, r2, r7
9002493c:	fb14 f407 	smulbb	r4, r4, r7
90024940:	b2db      	uxtb	r3, r3
90024942:	fb10 f007 	smulbb	r0, r0, r7
90024946:	fb05 2503 	mla	r5, r5, r3, r2
9002494a:	10f2      	asrs	r2, r6, #3
9002494c:	00f6      	lsls	r6, r6, #3
9002494e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024952:	b2ad      	uxth	r5, r5
90024954:	b2f6      	uxtb	r6, r6
90024956:	fb02 4203 	mla	r2, r2, r3, r4
9002495a:	fb06 0303 	mla	r3, r6, r3, r0
9002495e:	b294      	uxth	r4, r2
90024960:	b299      	uxth	r1, r3
90024962:	1c6b      	adds	r3, r5, #1
90024964:	1c62      	adds	r2, r4, #1
90024966:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9002496a:	1c4b      	adds	r3, r1, #1
9002496c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90024970:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90024974:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90024978:	0952      	lsrs	r2, r2, #5
9002497a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002497e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024982:	432b      	orrs	r3, r5
90024984:	4313      	orrs	r3, r2
90024986:	9a02      	ldr	r2, [sp, #8]
90024988:	8013      	strh	r3, [r2, #0]
9002498a:	b005      	add	sp, #20
9002498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024990:	2500      	movs	r5, #0
90024992:	e6ef      	b.n	90024774 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90024994:	2100      	movs	r1, #0
90024996:	460d      	mov	r5, r1
90024998:	e6f7      	b.n	9002478a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9002499a:	2100      	movs	r1, #0
9002499c:	e6f5      	b.n	9002478a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9002499e:	4631      	mov	r1, r6
900249a0:	e6f3      	b.n	9002478a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
900249a2:	2400      	movs	r4, #0
900249a4:	e702      	b.n	900247ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
900249a6:	2200      	movs	r2, #0
900249a8:	4614      	mov	r4, r2
900249aa:	e70b      	b.n	900247c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
900249ac:	4602      	mov	r2, r0
900249ae:	4604      	mov	r4, r0
900249b0:	e708      	b.n	900247c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
900249b2:	2200      	movs	r2, #0
900249b4:	e706      	b.n	900247c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
900249b6:	4632      	mov	r2, r6
900249b8:	e704      	b.n	900247c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

900249ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900249ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900249be:	b09d      	sub	sp, #116	; 0x74
900249c0:	9219      	str	r2, [sp, #100]	; 0x64
900249c2:	9307      	str	r3, [sp, #28]
900249c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
900249c6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
900249ca:	901b      	str	r0, [sp, #108]	; 0x6c
900249cc:	931a      	str	r3, [sp, #104]	; 0x68
900249ce:	6850      	ldr	r0, [r2, #4]
900249d0:	9117      	str	r1, [sp, #92]	; 0x5c
900249d2:	6812      	ldr	r2, [r2, #0]
900249d4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
900249d8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
900249dc:	fb00 1303 	mla	r3, r0, r3, r1
900249e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900249e4:	930a      	str	r3, [sp, #40]	; 0x28
900249e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900249e8:	681b      	ldr	r3, [r3, #0]
900249ea:	9310      	str	r3, [sp, #64]	; 0x40
900249ec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
900249f0:	930b      	str	r3, [sp, #44]	; 0x2c
900249f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900249f4:	2b00      	cmp	r3, #0
900249f6:	dc03      	bgt.n	90024a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
900249f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
900249fa:	2b00      	cmp	r3, #0
900249fc:	f340 8375 	ble.w	900250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024a00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024a02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024a06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024a0a:	1e48      	subs	r0, r1, #1
90024a0c:	1e57      	subs	r7, r2, #1
90024a0e:	9b07      	ldr	r3, [sp, #28]
90024a10:	2b00      	cmp	r3, #0
90024a12:	f340 818e 	ble.w	90024d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90024a16:	ea5f 4c24 	movs.w	ip, r4, asr #16
90024a1a:	ea4f 4326 	mov.w	r3, r6, asr #16
90024a1e:	d406      	bmi.n	90024a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024a20:	4584      	cmp	ip, r0
90024a22:	da04      	bge.n	90024a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024a24:	2b00      	cmp	r3, #0
90024a26:	db02      	blt.n	90024a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024a28:	42bb      	cmp	r3, r7
90024a2a:	f2c0 8183 	blt.w	90024d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90024a2e:	f11c 0c01 	adds.w	ip, ip, #1
90024a32:	f100 8173 	bmi.w	90024d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024a36:	4561      	cmp	r1, ip
90024a38:	f2c0 8170 	blt.w	90024d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024a3c:	3301      	adds	r3, #1
90024a3e:	f100 816d 	bmi.w	90024d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024a42:	429a      	cmp	r2, r3
90024a44:	f2c0 816a 	blt.w	90024d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024a48:	9b07      	ldr	r3, [sp, #28]
90024a4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90024a4c:	9318      	str	r3, [sp, #96]	; 0x60
90024a4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024a50:	2b00      	cmp	r3, #0
90024a52:	f340 818c 	ble.w	90024d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90024a56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90024a58:	ea4f 4c26 	mov.w	ip, r6, asr #16
90024a5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024a5e:	f3c4 3003 	ubfx	r0, r4, #12, #4
90024a62:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90024a66:	1422      	asrs	r2, r4, #16
90024a68:	f3c6 3103 	ubfx	r1, r6, #12, #4
90024a6c:	689b      	ldr	r3, [r3, #8]
90024a6e:	f100 81cd 	bmi.w	90024e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a72:	f103 38ff 	add.w	r8, r3, #4294967295
90024a76:	4542      	cmp	r2, r8
90024a78:	f280 81c8 	bge.w	90024e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a7c:	f1bc 0f00 	cmp.w	ip, #0
90024a80:	f2c0 81c4 	blt.w	90024e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a84:	f10e 38ff 	add.w	r8, lr, #4294967295
90024a88:	45c4      	cmp	ip, r8
90024a8a:	f280 81bf 	bge.w	90024e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a8e:	b21b      	sxth	r3, r3
90024a90:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024a92:	fb0c 2203 	mla	r2, ip, r3, r2
90024a96:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90024a9a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90024a9e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90024aa2:	2800      	cmp	r0, #0
90024aa4:	f000 81a9 	beq.w	90024dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90024aa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
90024aac:	950c      	str	r5, [sp, #48]	; 0x30
90024aae:	0e2d      	lsrs	r5, r5, #24
90024ab0:	9513      	str	r5, [sp, #76]	; 0x4c
90024ab2:	b181      	cbz	r1, 90024ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90024ab8:	3b01      	subs	r3, #1
90024aba:	009b      	lsls	r3, r3, #2
90024abc:	3304      	adds	r3, #4
90024abe:	eb08 0c03 	add.w	ip, r8, r3
90024ac2:	f858 3003 	ldr.w	r3, [r8, r3]
90024ac6:	9308      	str	r3, [sp, #32]
90024ac8:	0e1b      	lsrs	r3, r3, #24
90024aca:	9311      	str	r3, [sp, #68]	; 0x44
90024acc:	f8dc 3004 	ldr.w	r3, [ip, #4]
90024ad0:	930d      	str	r3, [sp, #52]	; 0x34
90024ad2:	0e1b      	lsrs	r3, r3, #24
90024ad4:	9314      	str	r3, [sp, #80]	; 0x50
90024ad6:	b280      	uxth	r0, r0
90024ad8:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024ada:	b289      	uxth	r1, r1
90024adc:	fb00 f901 	mul.w	r9, r0, r1
90024ae0:	0100      	lsls	r0, r0, #4
90024ae2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90024ae6:	eba0 0809 	sub.w	r8, r0, r9
90024aea:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024aee:	9813      	ldr	r0, [sp, #76]	; 0x4c
90024af0:	b289      	uxth	r1, r1
90024af2:	fa1f f888 	uxth.w	r8, r8
90024af6:	1a5b      	subs	r3, r3, r1
90024af8:	fb08 f000 	mul.w	r0, r8, r0
90024afc:	b29b      	uxth	r3, r3
90024afe:	fb03 000e 	mla	r0, r3, lr, r0
90024b02:	fb01 0005 	mla	r0, r1, r5, r0
90024b06:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024b08:	fb09 0005 	mla	r0, r9, r5, r0
90024b0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90024b10:	2800      	cmp	r0, #0
90024b12:	f000 80fa 	beq.w	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024b16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90024b1a:	d01b      	beq.n	90024b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90024b1c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90024b20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024b24:	fb0e fa0a 	mul.w	sl, lr, sl
90024b28:	fb0e fe02 	mul.w	lr, lr, r2
90024b2c:	ea4f 221a 	mov.w	r2, sl, lsr #8
90024b30:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90024b34:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90024b38:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024b3c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90024b40:	4452      	add	r2, sl
90024b42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024b46:	0a12      	lsrs	r2, r2, #8
90024b48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90024b4c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024b50:	ea42 020c 	orr.w	r2, r2, ip
90024b54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024b56:	2dff      	cmp	r5, #255	; 0xff
90024b58:	d021      	beq.n	90024b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90024b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024b5c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024b60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024b62:	fb05 fb0b 	mul.w	fp, r5, fp
90024b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024b68:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024b6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024b6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024b72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024b76:	fb05 fa0a 	mul.w	sl, r5, sl
90024b7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024b82:	44de      	add	lr, fp
90024b84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024b88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024b8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024b90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024b98:	ea4e 050a 	orr.w	r5, lr, sl
90024b9c:	950c      	str	r5, [sp, #48]	; 0x30
90024b9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024ba0:	2dff      	cmp	r5, #255	; 0xff
90024ba2:	d021      	beq.n	90024be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90024ba4:	9d08      	ldr	r5, [sp, #32]
90024ba6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024baa:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024bac:	fb05 fb0b 	mul.w	fp, r5, fp
90024bb0:	9d08      	ldr	r5, [sp, #32]
90024bb2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024bb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024bb8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024bbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024bc0:	fb05 fa0a 	mul.w	sl, r5, sl
90024bc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024bc8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024bcc:	44de      	add	lr, fp
90024bce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024bd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024bd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024bda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024bde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024be2:	ea4e 050a 	orr.w	r5, lr, sl
90024be6:	9508      	str	r5, [sp, #32]
90024be8:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024bea:	2dff      	cmp	r5, #255	; 0xff
90024bec:	d021      	beq.n	90024c32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90024bee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024bf0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024bf4:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024bf6:	fb05 fb0b 	mul.w	fp, r5, fp
90024bfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024bfc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024c00:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024c02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024c06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024c0a:	fb05 fa0a 	mul.w	sl, r5, sl
90024c0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024c12:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024c16:	44de      	add	lr, fp
90024c18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024c1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024c20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024c24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024c28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024c2c:	ea4e 050a 	orr.w	r5, lr, sl
90024c30:	950d      	str	r5, [sp, #52]	; 0x34
90024c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024c34:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90024c38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024c3c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024c40:	9d08      	ldr	r5, [sp, #32]
90024c42:	fb08 fc0c 	mul.w	ip, r8, ip
90024c46:	fb03 cc0e 	mla	ip, r3, lr, ip
90024c4a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90024c4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024c50:	fb01 cc0e 	mla	ip, r1, lr, ip
90024c54:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90024c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024c5a:	fb09 cc0e 	mla	ip, r9, lr, ip
90024c5e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90024c62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90024c64:	fb08 f80e 	mul.w	r8, r8, lr
90024c68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024c6c:	fb03 8202 	mla	r2, r3, r2, r8
90024c70:	9b08      	ldr	r3, [sp, #32]
90024c72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024c76:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
90024c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90024c7c:	fb01 220a 	mla	r2, r1, sl, r2
90024c80:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90024c84:	883b      	ldrh	r3, [r7, #0]
90024c86:	fb09 2901 	mla	r9, r9, r1, r2
90024c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024c8c:	1219      	asrs	r1, r3, #8
90024c8e:	4342      	muls	r2, r0
90024c90:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024c94:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90024c98:	1c50      	adds	r0, r2, #1
90024c9a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90024c9e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90024ca2:	ea4c 0c09 	orr.w	ip, ip, r9
90024ca6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90024caa:	ea4f 421c 	mov.w	r2, ip, lsr #16
90024cae:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90024cb2:	fa5f fc8c 	uxtb.w	ip, ip
90024cb6:	fb12 f205 	smulbb	r2, r2, r5
90024cba:	b2c0      	uxtb	r0, r0
90024cbc:	fb1c fc05 	smulbb	ip, ip, r5
90024cc0:	fb01 2100 	mla	r1, r1, r0, r2
90024cc4:	10da      	asrs	r2, r3, #3
90024cc6:	fb1e fe05 	smulbb	lr, lr, r5
90024cca:	00db      	lsls	r3, r3, #3
90024ccc:	b289      	uxth	r1, r1
90024cce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024cd2:	b2db      	uxtb	r3, r3
90024cd4:	fb02 e200 	mla	r2, r2, r0, lr
90024cd8:	fb03 c300 	mla	r3, r3, r0, ip
90024cdc:	b292      	uxth	r2, r2
90024cde:	fa1f fc83 	uxth.w	ip, r3
90024ce2:	1c4b      	adds	r3, r1, #1
90024ce4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90024ce8:	f10c 0301 	add.w	r3, ip, #1
90024cec:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90024cf0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90024cf4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024cf8:	430b      	orrs	r3, r1
90024cfa:	1c51      	adds	r1, r2, #1
90024cfc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90024d00:	0952      	lsrs	r2, r2, #5
90024d02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024d06:	4313      	orrs	r3, r2
90024d08:	803b      	strh	r3, [r7, #0]
90024d0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024d0c:	3702      	adds	r7, #2
90024d0e:	441c      	add	r4, r3
90024d10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024d12:	441e      	add	r6, r3
90024d14:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024d16:	3b01      	subs	r3, #1
90024d18:	9318      	str	r3, [sp, #96]	; 0x60
90024d1a:	e698      	b.n	90024a4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90024d1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024d1e:	441c      	add	r4, r3
90024d20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024d22:	441e      	add	r6, r3
90024d24:	9b07      	ldr	r3, [sp, #28]
90024d26:	3b01      	subs	r3, #1
90024d28:	9307      	str	r3, [sp, #28]
90024d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024d2c:	3302      	adds	r3, #2
90024d2e:	930a      	str	r3, [sp, #40]	; 0x28
90024d30:	e66d      	b.n	90024a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90024d32:	d023      	beq.n	90024d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90024d34:	9b07      	ldr	r3, [sp, #28]
90024d36:	9829      	ldr	r0, [sp, #164]	; 0xa4
90024d38:	3b01      	subs	r3, #1
90024d3a:	fb00 4003 	mla	r0, r0, r3, r4
90024d3e:	1400      	asrs	r0, r0, #16
90024d40:	f53f ae82 	bmi.w	90024a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024d44:	3901      	subs	r1, #1
90024d46:	4288      	cmp	r0, r1
90024d48:	f6bf ae7e 	bge.w	90024a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024d4c:	992a      	ldr	r1, [sp, #168]	; 0xa8
90024d4e:	fb01 6303 	mla	r3, r1, r3, r6
90024d52:	141b      	asrs	r3, r3, #16
90024d54:	f53f ae78 	bmi.w	90024a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024d58:	3a01      	subs	r2, #1
90024d5a:	4293      	cmp	r3, r2
90024d5c:	f6bf ae74 	bge.w	90024a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024d60:	f8dd b01c 	ldr.w	fp, [sp, #28]
90024d64:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90024d68:	f1bb 0f00 	cmp.w	fp, #0
90024d6c:	dc6c      	bgt.n	90024e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90024d6e:	9b07      	ldr	r3, [sp, #28]
90024d70:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90024d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024d76:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90024d7a:	930a      	str	r3, [sp, #40]	; 0x28
90024d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024d7e:	2b00      	cmp	r3, #0
90024d80:	f340 81b3 	ble.w	900250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024d88:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024d8a:	ee30 0a04 	vadd.f32	s0, s0, s8
90024d8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024d92:	eef0 6a62 	vmov.f32	s13, s5
90024d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024d9a:	ee31 1a05 	vadd.f32	s2, s2, s10
90024d9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024da2:	ee16 4a90 	vmov	r4, s13
90024da6:	eef0 6a43 	vmov.f32	s13, s6
90024daa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024dae:	ee16 6a90 	vmov	r6, s13
90024db2:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024db6:	ee61 7a27 	vmul.f32	s15, s2, s15
90024dba:	ee77 2a62 	vsub.f32	s5, s14, s5
90024dbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024dc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024dc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024dca:	ee12 2a90 	vmov	r2, s5
90024dce:	eef0 2a47 	vmov.f32	s5, s14
90024dd2:	fb92 f3f3 	sdiv	r3, r2, r3
90024dd6:	ee13 2a10 	vmov	r2, s6
90024dda:	9329      	str	r3, [sp, #164]	; 0xa4
90024ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024dde:	eeb0 3a67 	vmov.f32	s6, s15
90024de2:	fb92 f3f3 	sdiv	r3, r2, r3
90024de6:	932a      	str	r3, [sp, #168]	; 0xa8
90024de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024dea:	9a19      	ldr	r2, [sp, #100]	; 0x64
90024dec:	3b01      	subs	r3, #1
90024dee:	9317      	str	r3, [sp, #92]	; 0x5c
90024df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024df2:	bf08      	it	eq
90024df4:	4613      	moveq	r3, r2
90024df6:	9307      	str	r3, [sp, #28]
90024df8:	e5fb      	b.n	900249f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90024dfa:	2900      	cmp	r1, #0
90024dfc:	f43f ae6b 	beq.w	90024ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024e00:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90024e04:	9308      	str	r3, [sp, #32]
90024e06:	0e1b      	lsrs	r3, r3, #24
90024e08:	9311      	str	r3, [sp, #68]	; 0x44
90024e0a:	e664      	b.n	90024ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024e0c:	f112 0801 	adds.w	r8, r2, #1
90024e10:	f53f af7b 	bmi.w	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024e14:	4543      	cmp	r3, r8
90024e16:	f6ff af78 	blt.w	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024e1a:	f11c 0801 	adds.w	r8, ip, #1
90024e1e:	f53f af74 	bmi.w	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024e22:	45c6      	cmp	lr, r8
90024e24:	f6ff af71 	blt.w	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024e28:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90024e2a:	b21b      	sxth	r3, r3
90024e2c:	9201      	str	r2, [sp, #4]
90024e2e:	fa0f f28e 	sxth.w	r2, lr
90024e32:	e9cd 1504 	strd	r1, r5, [sp, #16]
90024e36:	e9cd c002 	strd	ip, r0, [sp, #8]
90024e3a:	9200      	str	r2, [sp, #0]
90024e3c:	4639      	mov	r1, r7
90024e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024e40:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024e42:	f7ff fc79 	bl	90024738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90024e46:	e760      	b.n	90024d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024e48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024e4a:	1427      	asrs	r7, r4, #16
90024e4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024e4e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024e52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024e56:	1433      	asrs	r3, r6, #16
90024e58:	f3c6 3003 	ubfx	r0, r6, #12, #4
90024e5c:	fb01 7303 	mla	r3, r1, r3, r7
90024e60:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90024e64:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90024e68:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90024e6c:	2a00      	cmp	r2, #0
90024e6e:	f000 8133 	beq.w	900250d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
90024e72:	687d      	ldr	r5, [r7, #4]
90024e74:	950e      	str	r5, [sp, #56]	; 0x38
90024e76:	0e2d      	lsrs	r5, r5, #24
90024e78:	9515      	str	r5, [sp, #84]	; 0x54
90024e7a:	b178      	cbz	r0, 90024e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90024e7c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90024e80:	3901      	subs	r1, #1
90024e82:	0089      	lsls	r1, r1, #2
90024e84:	3104      	adds	r1, #4
90024e86:	eb07 0e01 	add.w	lr, r7, r1
90024e8a:	5879      	ldr	r1, [r7, r1]
90024e8c:	9109      	str	r1, [sp, #36]	; 0x24
90024e8e:	0e09      	lsrs	r1, r1, #24
90024e90:	9112      	str	r1, [sp, #72]	; 0x48
90024e92:	f8de 1004 	ldr.w	r1, [lr, #4]
90024e96:	910f      	str	r1, [sp, #60]	; 0x3c
90024e98:	0e09      	lsrs	r1, r1, #24
90024e9a:	9116      	str	r1, [sp, #88]	; 0x58
90024e9c:	b292      	uxth	r2, r2
90024e9e:	9915      	ldr	r1, [sp, #84]	; 0x54
90024ea0:	b280      	uxth	r0, r0
90024ea2:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024ea4:	fb02 f800 	mul.w	r8, r2, r0
90024ea8:	0112      	lsls	r2, r2, #4
90024eaa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90024eae:	eba2 0e08 	sub.w	lr, r2, r8
90024eb2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90024eb6:	b280      	uxth	r0, r0
90024eb8:	fa1f fe8e 	uxth.w	lr, lr
90024ebc:	1a12      	subs	r2, r2, r0
90024ebe:	fb0e f101 	mul.w	r1, lr, r1
90024ec2:	b292      	uxth	r2, r2
90024ec4:	fb02 110c 	mla	r1, r2, ip, r1
90024ec8:	fb00 1105 	mla	r1, r0, r5, r1
90024ecc:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024ece:	fb08 1105 	mla	r1, r8, r5, r1
90024ed2:	f3c1 2107 	ubfx	r1, r1, #8, #8
90024ed6:	2900      	cmp	r1, #0
90024ed8:	f000 80f5 	beq.w	900250c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
90024edc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90024ee0:	d019      	beq.n	90024f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90024ee2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90024ee6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90024eea:	fb0c fa0a 	mul.w	sl, ip, sl
90024eee:	fb0c fc03 	mul.w	ip, ip, r3
90024ef2:	ea4f 231a 	mov.w	r3, sl, lsr #8
90024ef6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90024efa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90024efe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90024f02:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90024f06:	4453      	add	r3, sl
90024f08:	0a3f      	lsrs	r7, r7, #8
90024f0a:	0a1b      	lsrs	r3, r3, #8
90024f0c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90024f10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90024f14:	433b      	orrs	r3, r7
90024f16:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024f18:	2dff      	cmp	r5, #255	; 0xff
90024f1a:	d020      	beq.n	90024f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90024f1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024f1e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024f22:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024f24:	436f      	muls	r7, r5
90024f26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024f28:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024f2c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024f30:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024f32:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024f36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f3a:	fb05 fa0a 	mul.w	sl, r5, sl
90024f3e:	44bc      	add	ip, r7
90024f40:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024f44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024f48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024f4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024f54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024f58:	ea4c 050a 	orr.w	r5, ip, sl
90024f5c:	950e      	str	r5, [sp, #56]	; 0x38
90024f5e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024f60:	2dff      	cmp	r5, #255	; 0xff
90024f62:	d020      	beq.n	90024fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90024f64:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024f66:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024f6a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024f6c:	436f      	muls	r7, r5
90024f6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024f70:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024f74:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024f78:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024f7a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024f7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f82:	fb05 fa0a 	mul.w	sl, r5, sl
90024f86:	44bc      	add	ip, r7
90024f88:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024f8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024f90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024f94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024f9c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024fa0:	ea4c 050a 	orr.w	r5, ip, sl
90024fa4:	9509      	str	r5, [sp, #36]	; 0x24
90024fa6:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024fa8:	2dff      	cmp	r5, #255	; 0xff
90024faa:	d020      	beq.n	90024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
90024fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90024fae:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024fb2:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024fb4:	436f      	muls	r7, r5
90024fb6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90024fb8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024fbc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024fc0:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024fc2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024fc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024fca:	fb05 fa0a 	mul.w	sl, r5, sl
90024fce:	44bc      	add	ip, r7
90024fd0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024fd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024fd8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024fdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024fe0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024fe4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024fe8:	ea4c 050a 	orr.w	r5, ip, sl
90024fec:	950f      	str	r5, [sp, #60]	; 0x3c
90024fee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024ff0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90024ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90024ff8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024ffc:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024ffe:	fb0e f707 	mul.w	r7, lr, r7
90025002:	fb02 770c 	mla	r7, r2, ip, r7
90025006:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002500a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002500c:	fb00 770c 	mla	r7, r0, ip, r7
90025010:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025014:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025016:	fb08 770c 	mla	r7, r8, ip, r7
9002501a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002501e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025020:	fb0e fe0c 	mul.w	lr, lr, ip
90025024:	0a3f      	lsrs	r7, r7, #8
90025026:	fb02 e303 	mla	r3, r2, r3, lr
9002502a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002502c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025030:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90025034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025036:	fb00 330a 	mla	r3, r0, sl, r3
9002503a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002503e:	f8b9 0000 	ldrh.w	r0, [r9]
90025042:	fb08 3c0c 	mla	ip, r8, ip, r3
90025046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90025048:	1202      	asrs	r2, r0, #8
9002504a:	4359      	muls	r1, r3
9002504c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025050:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90025054:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025058:	1c4b      	adds	r3, r1, #1
9002505a:	ea47 070c 	orr.w	r7, r7, ip
9002505e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90025062:	0c3b      	lsrs	r3, r7, #16
90025064:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90025068:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9002506c:	b2ff      	uxtb	r7, r7
9002506e:	fb13 f305 	smulbb	r3, r3, r5
90025072:	b2c9      	uxtb	r1, r1
90025074:	fb17 f705 	smulbb	r7, r7, r5
90025078:	fb02 3201 	mla	r2, r2, r1, r3
9002507c:	10c3      	asrs	r3, r0, #3
9002507e:	fb1c fc05 	smulbb	ip, ip, r5
90025082:	00c0      	lsls	r0, r0, #3
90025084:	b292      	uxth	r2, r2
90025086:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002508a:	b2c0      	uxtb	r0, r0
9002508c:	fb03 c301 	mla	r3, r3, r1, ip
90025090:	fb00 7001 	mla	r0, r0, r1, r7
90025094:	1c51      	adds	r1, r2, #1
90025096:	b29b      	uxth	r3, r3
90025098:	b280      	uxth	r0, r0
9002509a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002509e:	f100 0c01 	add.w	ip, r0, #1
900250a2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900250a6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900250aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900250ae:	ea4c 0202 	orr.w	r2, ip, r2
900250b2:	f103 0c01 	add.w	ip, r3, #1
900250b6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900250ba:	095b      	lsrs	r3, r3, #5
900250bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900250c0:	431a      	orrs	r2, r3
900250c2:	f8a9 2000 	strh.w	r2, [r9]
900250c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900250c8:	f109 0902 	add.w	r9, r9, #2
900250cc:	f10b 3bff 	add.w	fp, fp, #4294967295
900250d0:	441c      	add	r4, r3
900250d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900250d4:	441e      	add	r6, r3
900250d6:	e647      	b.n	90024d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
900250d8:	2800      	cmp	r0, #0
900250da:	f43f aedf 	beq.w	90024e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900250de:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
900250e2:	9109      	str	r1, [sp, #36]	; 0x24
900250e4:	0e09      	lsrs	r1, r1, #24
900250e6:	9112      	str	r1, [sp, #72]	; 0x48
900250e8:	e6d8      	b.n	90024e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900250ea:	b01d      	add	sp, #116	; 0x74
900250ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900250f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
900250f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900250f4:	b085      	sub	sp, #20
900250f6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
900250fa:	9102      	str	r1, [sp, #8]
900250fc:	2c00      	cmp	r4, #0
900250fe:	fb04 7103 	mla	r1, r4, r3, r7
90025102:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90025106:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002510a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002510e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90025112:	f2c0 810c 	blt.w	9002532e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90025116:	45a6      	cmp	lr, r4
90025118:	f340 8109 	ble.w	9002532e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002511c:	2f00      	cmp	r7, #0
9002511e:	f2c0 8104 	blt.w	9002532a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025122:	42bb      	cmp	r3, r7
90025124:	f340 8101 	ble.w	9002532a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025128:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9002512c:	1c7a      	adds	r2, r7, #1
9002512e:	f100 8101 	bmi.w	90025334 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025132:	4293      	cmp	r3, r2
90025134:	f340 80fe 	ble.w	90025334 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025138:	2e00      	cmp	r6, #0
9002513a:	f000 80fd 	beq.w	90025338 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9002513e:	f8dc 1004 	ldr.w	r1, [ip, #4]
90025142:	3401      	adds	r4, #1
90025144:	f100 80fc 	bmi.w	90025340 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90025148:	45a6      	cmp	lr, r4
9002514a:	f340 80f9 	ble.w	90025340 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9002514e:	2800      	cmp	r0, #0
90025150:	f000 80f9 	beq.w	90025346 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90025154:	2f00      	cmp	r7, #0
90025156:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9002515a:	f2c0 80ef 	blt.w	9002533c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9002515e:	42bb      	cmp	r3, r7
90025160:	f340 80ec 	ble.w	9002533c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90025164:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90025168:	3701      	adds	r7, #1
9002516a:	f100 80ef 	bmi.w	9002534c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9002516e:	42bb      	cmp	r3, r7
90025170:	f340 80ec 	ble.w	9002534c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90025174:	2e00      	cmp	r6, #0
90025176:	f000 80eb 	beq.w	90025350 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9002517a:	6852      	ldr	r2, [r2, #4]
9002517c:	b2b6      	uxth	r6, r6
9002517e:	b280      	uxth	r0, r0
90025180:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90025184:	fb00 fe06 	mul.w	lr, r0, r6
90025188:	0136      	lsls	r6, r6, #4
9002518a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002518e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90025192:	eba6 070e 	sub.w	r7, r6, lr
90025196:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002519a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002519e:	b280      	uxth	r0, r0
900251a0:	b2bf      	uxth	r7, r7
900251a2:	1a1b      	subs	r3, r3, r0
900251a4:	ea4f 6812 	mov.w	r8, r2, lsr #24
900251a8:	fb07 f60a 	mul.w	r6, r7, sl
900251ac:	b29b      	uxth	r3, r3
900251ae:	fb0b 6603 	mla	r6, fp, r3, r6
900251b2:	fb00 6609 	mla	r6, r0, r9, r6
900251b6:	fb0e 6608 	mla	r6, lr, r8, r6
900251ba:	f3c6 2607 	ubfx	r6, r6, #8, #8
900251be:	9600      	str	r6, [sp, #0]
900251c0:	2e00      	cmp	r6, #0
900251c2:	f000 80af 	beq.w	90025324 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
900251c6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900251ca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900251ce:	9e02      	ldr	r6, [sp, #8]
900251d0:	fb0b fc0c 	mul.w	ip, fp, ip
900251d4:	fb0b f505 	mul.w	r5, fp, r5
900251d8:	8836      	ldrh	r6, [r6, #0]
900251da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900251de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900251e2:	9501      	str	r5, [sp, #4]
900251e4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900251e8:	44dc      	add	ip, fp
900251ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900251ee:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900251f2:	9503      	str	r5, [sp, #12]
900251f4:	9d01      	ldr	r5, [sp, #4]
900251f6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
900251fa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900251fe:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90025202:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025206:	fb0a fc0c 	mul.w	ip, sl, ip
9002520a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002520e:	fb0a fa01 	mul.w	sl, sl, r1
90025212:	ea4f 251c 	mov.w	r5, ip, lsr #8
90025216:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002521a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002521e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90025222:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90025226:	4465      	add	r5, ip
90025228:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002522c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90025230:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025234:	fb09 fc0c 	mul.w	ip, r9, ip
90025238:	0a2d      	lsrs	r5, r5, #8
9002523a:	fb09 f904 	mul.w	r9, r9, r4
9002523e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025242:	ea4f 211c 	mov.w	r1, ip, lsr #8
90025246:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002524a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9002524e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025252:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90025256:	437d      	muls	r5, r7
90025258:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002525c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90025260:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025264:	4461      	add	r1, ip
90025266:	fb08 f404 	mul.w	r4, r8, r4
9002526a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002526e:	fb08 f802 	mul.w	r8, r8, r2
90025272:	0a09      	lsrs	r1, r1, #8
90025274:	0a22      	lsrs	r2, r4, #8
90025276:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9002527a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002527e:	fb07 f70a 	mul.w	r7, r7, sl
90025282:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025286:	4414      	add	r4, r2
90025288:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002528c:	0a24      	lsrs	r4, r4, #8
9002528e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90025292:	9a03      	ldr	r2, [sp, #12]
90025294:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025298:	fb02 5503 	mla	r5, r2, r3, r5
9002529c:	ea4f 2818 	mov.w	r8, r8, lsr #8
900252a0:	fb04 540e 	mla	r4, r4, lr, r5
900252a4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900252a8:	fb01 4100 	mla	r1, r1, r0, r4
900252ac:	0a09      	lsrs	r1, r1, #8
900252ae:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900252b2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900252b6:	fb03 7101 	mla	r1, r3, r1, r7
900252ba:	9b00      	ldr	r3, [sp, #0]
900252bc:	fb0e 1e08 	mla	lr, lr, r8, r1
900252c0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
900252c4:	43da      	mvns	r2, r3
900252c6:	1233      	asrs	r3, r6, #8
900252c8:	fb00 e101 	mla	r1, r0, r1, lr
900252cc:	10f0      	asrs	r0, r6, #3
900252ce:	b2d2      	uxtb	r2, r2
900252d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900252d4:	0a09      	lsrs	r1, r1, #8
900252d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900252da:	00f6      	lsls	r6, r6, #3
900252dc:	4353      	muls	r3, r2
900252de:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900252e2:	4350      	muls	r0, r2
900252e4:	b2f6      	uxtb	r6, r6
900252e6:	4321      	orrs	r1, r4
900252e8:	4356      	muls	r6, r2
900252ea:	1c5a      	adds	r2, r3, #1
900252ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900252f0:	0c0b      	lsrs	r3, r1, #16
900252f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900252f6:	1c42      	adds	r2, r0, #1
900252f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900252fc:	0a0a      	lsrs	r2, r1, #8
900252fe:	021b      	lsls	r3, r3, #8
90025300:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025304:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90025308:	00d2      	lsls	r2, r2, #3
9002530a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002530e:	4313      	orrs	r3, r2
90025310:	1c72      	adds	r2, r6, #1
90025312:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90025316:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002531a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002531e:	4319      	orrs	r1, r3
90025320:	9b02      	ldr	r3, [sp, #8]
90025322:	8019      	strh	r1, [r3, #0]
90025324:	b005      	add	sp, #20
90025326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002532a:	2500      	movs	r5, #0
9002532c:	e6fe      	b.n	9002512c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9002532e:	2100      	movs	r1, #0
90025330:	460d      	mov	r5, r1
90025332:	e706      	b.n	90025142 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025334:	2100      	movs	r1, #0
90025336:	e704      	b.n	90025142 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025338:	4631      	mov	r1, r6
9002533a:	e702      	b.n	90025142 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002533c:	2400      	movs	r4, #0
9002533e:	e713      	b.n	90025168 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90025340:	2200      	movs	r2, #0
90025342:	4614      	mov	r4, r2
90025344:	e71a      	b.n	9002517c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025346:	4602      	mov	r2, r0
90025348:	4604      	mov	r4, r0
9002534a:	e717      	b.n	9002517c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002534c:	2200      	movs	r2, #0
9002534e:	e715      	b.n	9002517c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025350:	4632      	mov	r2, r6
90025352:	e713      	b.n	9002517c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90025354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025358:	b09b      	sub	sp, #108	; 0x6c
9002535a:	9218      	str	r2, [sp, #96]	; 0x60
9002535c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002535e:	9019      	str	r0, [sp, #100]	; 0x64
90025360:	9116      	str	r1, [sp, #88]	; 0x58
90025362:	6850      	ldr	r0, [r2, #4]
90025364:	9307      	str	r3, [sp, #28]
90025366:	6812      	ldr	r2, [r2, #0]
90025368:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002536c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90025370:	fb00 1303 	mla	r3, r0, r3, r1
90025374:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90025378:	930a      	str	r3, [sp, #40]	; 0x28
9002537a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002537c:	681b      	ldr	r3, [r3, #0]
9002537e:	930f      	str	r3, [sp, #60]	; 0x3c
90025380:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025382:	2b00      	cmp	r3, #0
90025384:	dc03      	bgt.n	9002538e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025386:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025388:	2b00      	cmp	r3, #0
9002538a:	f340 8387 	ble.w	90025a9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002538e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025390:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025394:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025398:	1e48      	subs	r0, r1, #1
9002539a:	1e57      	subs	r7, r2, #1
9002539c:	9b07      	ldr	r3, [sp, #28]
9002539e:	2b00      	cmp	r3, #0
900253a0:	f340 8166 	ble.w	90025670 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900253a4:	ea5f 4c24 	movs.w	ip, r4, asr #16
900253a8:	ea4f 4326 	mov.w	r3, r6, asr #16
900253ac:	d406      	bmi.n	900253bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900253ae:	4584      	cmp	ip, r0
900253b0:	da04      	bge.n	900253bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900253b2:	2b00      	cmp	r3, #0
900253b4:	db02      	blt.n	900253bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900253b6:	42bb      	cmp	r3, r7
900253b8:	f2c0 815b 	blt.w	90025672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900253bc:	f11c 0c01 	adds.w	ip, ip, #1
900253c0:	f100 814b 	bmi.w	9002565a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900253c4:	4561      	cmp	r1, ip
900253c6:	f2c0 8148 	blt.w	9002565a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900253ca:	3301      	adds	r3, #1
900253cc:	f100 8145 	bmi.w	9002565a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900253d0:	429a      	cmp	r2, r3
900253d2:	f2c0 8142 	blt.w	9002565a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900253d6:	9b07      	ldr	r3, [sp, #28]
900253d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900253da:	9317      	str	r3, [sp, #92]	; 0x5c
900253dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900253de:	2b00      	cmp	r3, #0
900253e0:	f340 8165 	ble.w	900256ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900253e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
900253e6:	ea4f 4c26 	mov.w	ip, r6, asr #16
900253ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900253ec:	f3c4 3103 	ubfx	r1, r4, #12, #4
900253f0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900253f4:	1422      	asrs	r2, r4, #16
900253f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
900253fa:	689b      	ldr	r3, [r3, #8]
900253fc:	f100 81d5 	bmi.w	900257aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025400:	f103 38ff 	add.w	r8, r3, #4294967295
90025404:	4542      	cmp	r2, r8
90025406:	f280 81d0 	bge.w	900257aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002540a:	f1bc 0f00 	cmp.w	ip, #0
9002540e:	f2c0 81cc 	blt.w	900257aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025412:	f10e 38ff 	add.w	r8, lr, #4294967295
90025416:	45c4      	cmp	ip, r8
90025418:	f280 81c7 	bge.w	900257aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002541c:	b21b      	sxth	r3, r3
9002541e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025420:	fb0c 2203 	mla	r2, ip, r3, r2
90025424:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90025428:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002542c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90025430:	2900      	cmp	r1, #0
90025432:	f000 8182 	beq.w	9002573a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90025436:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002543a:	950b      	str	r5, [sp, #44]	; 0x2c
9002543c:	0e2d      	lsrs	r5, r5, #24
9002543e:	9512      	str	r5, [sp, #72]	; 0x48
90025440:	b180      	cbz	r0, 90025464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90025446:	3b01      	subs	r3, #1
90025448:	009b      	lsls	r3, r3, #2
9002544a:	3304      	adds	r3, #4
9002544c:	eb08 0c03 	add.w	ip, r8, r3
90025450:	f858 3003 	ldr.w	r3, [r8, r3]
90025454:	9308      	str	r3, [sp, #32]
90025456:	0e1b      	lsrs	r3, r3, #24
90025458:	9310      	str	r3, [sp, #64]	; 0x40
9002545a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9002545e:	930c      	str	r3, [sp, #48]	; 0x30
90025460:	0e1b      	lsrs	r3, r3, #24
90025462:	9313      	str	r3, [sp, #76]	; 0x4c
90025464:	b289      	uxth	r1, r1
90025466:	9b12      	ldr	r3, [sp, #72]	; 0x48
90025468:	b280      	uxth	r0, r0
9002546a:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002546c:	fb01 f900 	mul.w	r9, r1, r0
90025470:	0109      	lsls	r1, r1, #4
90025472:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025476:	eba1 0809 	sub.w	r8, r1, r9
9002547a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
9002547e:	b280      	uxth	r0, r0
90025480:	fa1f f888 	uxth.w	r8, r8
90025484:	1a09      	subs	r1, r1, r0
90025486:	fb08 f303 	mul.w	r3, r8, r3
9002548a:	b289      	uxth	r1, r1
9002548c:	fb01 330e 	mla	r3, r1, lr, r3
90025490:	fb00 3305 	mla	r3, r0, r5, r3
90025494:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025496:	fb09 3305 	mla	r3, r9, r5, r3
9002549a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002549e:	2b00      	cmp	r3, #0
900254a0:	f000 80d2 	beq.w	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900254a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900254a8:	d01b      	beq.n	900254e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900254aa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900254ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900254b2:	fb0e fa0a 	mul.w	sl, lr, sl
900254b6:	fb0e fe02 	mul.w	lr, lr, r2
900254ba:	ea4f 221a 	mov.w	r2, sl, lsr #8
900254be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900254c2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900254c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900254ca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900254ce:	4452      	add	r2, sl
900254d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900254d4:	0a12      	lsrs	r2, r2, #8
900254d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900254da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900254de:	ea42 020c 	orr.w	r2, r2, ip
900254e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900254e4:	2dff      	cmp	r5, #255	; 0xff
900254e6:	d021      	beq.n	9002552c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
900254e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900254ea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900254ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
900254f0:	fb05 fb0b 	mul.w	fp, r5, fp
900254f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900254f6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900254fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
900254fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025500:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025504:	fb05 fa0a 	mul.w	sl, r5, sl
90025508:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002550c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025510:	44de      	add	lr, fp
90025512:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025516:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002551a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002551e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025522:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025526:	ea4e 050a 	orr.w	r5, lr, sl
9002552a:	950b      	str	r5, [sp, #44]	; 0x2c
9002552c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002552e:	2dff      	cmp	r5, #255	; 0xff
90025530:	d021      	beq.n	90025576 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90025532:	9d08      	ldr	r5, [sp, #32]
90025534:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025538:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002553a:	fb05 fb0b 	mul.w	fp, r5, fp
9002553e:	9d08      	ldr	r5, [sp, #32]
90025540:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025544:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025546:	fb05 fa0e 	mul.w	sl, r5, lr
9002554a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002554e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025552:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025556:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002555a:	44de      	add	lr, fp
9002555c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025560:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025564:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025568:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002556c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025570:	ea4e 050a 	orr.w	r5, lr, sl
90025574:	9508      	str	r5, [sp, #32]
90025576:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025578:	2dff      	cmp	r5, #255	; 0xff
9002557a:	d021      	beq.n	900255c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
9002557c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002557e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025582:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025584:	fb05 fb0b 	mul.w	fp, r5, fp
90025588:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002558a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002558e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025590:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025594:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025598:	fb05 fa0a 	mul.w	sl, r5, sl
9002559c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900255a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900255a4:	44de      	add	lr, fp
900255a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900255aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900255ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900255b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900255b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900255ba:	ea4e 050a 	orr.w	r5, lr, sl
900255be:	950c      	str	r5, [sp, #48]	; 0x30
900255c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900255c2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
900255c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900255ca:	2bff      	cmp	r3, #255	; 0xff
900255cc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900255d0:	9d08      	ldr	r5, [sp, #32]
900255d2:	fb08 fc0c 	mul.w	ip, r8, ip
900255d6:	fb01 cc0e 	mla	ip, r1, lr, ip
900255da:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900255de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900255e0:	fb00 cc0e 	mla	ip, r0, lr, ip
900255e4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900255e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900255ea:	fb09 cc0e 	mla	ip, r9, lr, ip
900255ee:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900255f2:	fb08 f80e 	mul.w	r8, r8, lr
900255f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900255fa:	fb01 8202 	mla	r2, r1, r2, r8
900255fe:	9908      	ldr	r1, [sp, #32]
90025600:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025604:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025608:	990c      	ldr	r1, [sp, #48]	; 0x30
9002560a:	fb00 220a 	mla	r2, r0, sl, r2
9002560e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90025612:	fb09 2900 	mla	r9, r9, r0, r2
90025616:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002561a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002561e:	ea4c 0c09 	orr.w	ip, ip, r9
90025622:	ea4f 221c 	mov.w	r2, ip, lsr #8
90025626:	f040 8091 	bne.w	9002574c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9002562a:	ea4f 135c 	mov.w	r3, ip, lsr #5
9002562e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90025632:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025636:	f022 0207 	bic.w	r2, r2, #7
9002563a:	431a      	orrs	r2, r3
9002563c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90025640:	ea4c 0c02 	orr.w	ip, ip, r2
90025644:	f8a7 c000 	strh.w	ip, [r7]
90025648:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002564a:	3702      	adds	r7, #2
9002564c:	441c      	add	r4, r3
9002564e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025650:	441e      	add	r6, r3
90025652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90025654:	3b01      	subs	r3, #1
90025656:	9317      	str	r3, [sp, #92]	; 0x5c
90025658:	e6c0      	b.n	900253dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
9002565a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002565c:	441c      	add	r4, r3
9002565e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025660:	441e      	add	r6, r3
90025662:	9b07      	ldr	r3, [sp, #28]
90025664:	3b01      	subs	r3, #1
90025666:	9307      	str	r3, [sp, #28]
90025668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002566a:	3302      	adds	r3, #2
9002566c:	930a      	str	r3, [sp, #40]	; 0x28
9002566e:	e695      	b.n	9002539c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025670:	d024      	beq.n	900256bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90025672:	9b07      	ldr	r3, [sp, #28]
90025674:	9827      	ldr	r0, [sp, #156]	; 0x9c
90025676:	3b01      	subs	r3, #1
90025678:	fb00 4003 	mla	r0, r0, r3, r4
9002567c:	1400      	asrs	r0, r0, #16
9002567e:	f53f aeaa 	bmi.w	900253d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025682:	3901      	subs	r1, #1
90025684:	4288      	cmp	r0, r1
90025686:	f6bf aea6 	bge.w	900253d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002568a:	9928      	ldr	r1, [sp, #160]	; 0xa0
9002568c:	fb01 6303 	mla	r3, r1, r3, r6
90025690:	141b      	asrs	r3, r3, #16
90025692:	f53f aea0 	bmi.w	900253d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025696:	3a01      	subs	r2, #1
90025698:	4293      	cmp	r3, r2
9002569a:	f6bf ae9c 	bge.w	900253d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002569e:	f8dd b01c 	ldr.w	fp, [sp, #28]
900256a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
900256a6:	f1bb 0f00 	cmp.w	fp, #0
900256aa:	f300 809a 	bgt.w	900257e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900256ae:	9b07      	ldr	r3, [sp, #28]
900256b0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900256b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900256b6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900256ba:	930a      	str	r3, [sp, #40]	; 0x28
900256bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
900256be:	2b00      	cmp	r3, #0
900256c0:	f340 81ec 	ble.w	90025a9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900256c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900256c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900256ca:	ee30 0a04 	vadd.f32	s0, s0, s8
900256ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
900256d2:	eef0 6a62 	vmov.f32	s13, s5
900256d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
900256da:	ee31 1a05 	vadd.f32	s2, s2, s10
900256de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900256e2:	ee16 4a90 	vmov	r4, s13
900256e6:	eef0 6a43 	vmov.f32	s13, s6
900256ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900256ee:	ee16 6a90 	vmov	r6, s13
900256f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900256f6:	ee61 7a27 	vmul.f32	s15, s2, s15
900256fa:	ee77 2a62 	vsub.f32	s5, s14, s5
900256fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002570a:	ee12 2a90 	vmov	r2, s5
9002570e:	eef0 2a47 	vmov.f32	s5, s14
90025712:	fb92 f3f3 	sdiv	r3, r2, r3
90025716:	ee13 2a10 	vmov	r2, s6
9002571a:	9327      	str	r3, [sp, #156]	; 0x9c
9002571c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002571e:	eeb0 3a67 	vmov.f32	s6, s15
90025722:	fb92 f3f3 	sdiv	r3, r2, r3
90025726:	9328      	str	r3, [sp, #160]	; 0xa0
90025728:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002572a:	9a18      	ldr	r2, [sp, #96]	; 0x60
9002572c:	3b01      	subs	r3, #1
9002572e:	9316      	str	r3, [sp, #88]	; 0x58
90025730:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025732:	bf08      	it	eq
90025734:	4613      	moveq	r3, r2
90025736:	9307      	str	r3, [sp, #28]
90025738:	e622      	b.n	90025380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
9002573a:	2800      	cmp	r0, #0
9002573c:	f43f ae92 	beq.w	90025464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025740:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025744:	9308      	str	r3, [sp, #32]
90025746:	0e1b      	lsrs	r3, r3, #24
90025748:	9310      	str	r3, [sp, #64]	; 0x40
9002574a:	e68b      	b.n	90025464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9002574c:	8839      	ldrh	r1, [r7, #0]
9002574e:	43db      	mvns	r3, r3
90025750:	4dd4      	ldr	r5, [pc, #848]	; (90025aa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025752:	ea4f 2e21 	mov.w	lr, r1, asr #8
90025756:	fa5f f883 	uxtb.w	r8, r3
9002575a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9002575e:	10c8      	asrs	r0, r1, #3
90025760:	00cb      	lsls	r3, r1, #3
90025762:	fb0e fe08 	mul.w	lr, lr, r8
90025766:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002576a:	b2db      	uxtb	r3, r3
9002576c:	f10e 0101 	add.w	r1, lr, #1
90025770:	fb00 f008 	mul.w	r0, r0, r8
90025774:	fb03 f308 	mul.w	r3, r3, r8
90025778:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
9002577c:	ea4f 411c 	mov.w	r1, ip, lsr #16
90025780:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90025784:	f100 0e01 	add.w	lr, r0, #1
90025788:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
9002578c:	b2c9      	uxtb	r1, r1
9002578e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025792:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90025796:	00d2      	lsls	r2, r2, #3
90025798:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002579c:	430a      	orrs	r2, r1
9002579e:	1c59      	adds	r1, r3, #1
900257a0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900257a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900257a8:	e748      	b.n	9002563c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
900257aa:	f112 0801 	adds.w	r8, r2, #1
900257ae:	f53f af4b 	bmi.w	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900257b2:	4543      	cmp	r3, r8
900257b4:	f6ff af48 	blt.w	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900257b8:	f11c 0801 	adds.w	r8, ip, #1
900257bc:	f53f af44 	bmi.w	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900257c0:	45c6      	cmp	lr, r8
900257c2:	f6ff af41 	blt.w	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900257c6:	b21b      	sxth	r3, r3
900257c8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
900257cc:	fa0f f28e 	sxth.w	r2, lr
900257d0:	e9cd 1003 	strd	r1, r0, [sp, #12]
900257d4:	9200      	str	r2, [sp, #0]
900257d6:	4639      	mov	r1, r7
900257d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900257da:	9819      	ldr	r0, [sp, #100]	; 0x64
900257dc:	f7ff fc88 	bl	900250f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
900257e0:	e732      	b.n	90025648 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900257e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900257e4:	1421      	asrs	r1, r4, #16
900257e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900257e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
900257ec:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
900257f0:	1433      	asrs	r3, r6, #16
900257f2:	f3c6 3003 	ubfx	r0, r6, #12, #4
900257f6:	fb07 1303 	mla	r3, r7, r3, r1
900257fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
900257fc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90025800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025804:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90025808:	2a00      	cmp	r2, #0
9002580a:	f000 8108 	beq.w	90025a1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
9002580e:	684d      	ldr	r5, [r1, #4]
90025810:	950d      	str	r5, [sp, #52]	; 0x34
90025812:	0e2d      	lsrs	r5, r5, #24
90025814:	9514      	str	r5, [sp, #80]	; 0x50
90025816:	b178      	cbz	r0, 90025838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025818:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
9002581c:	3f01      	subs	r7, #1
9002581e:	00bf      	lsls	r7, r7, #2
90025820:	3704      	adds	r7, #4
90025822:	eb01 0e07 	add.w	lr, r1, r7
90025826:	59c9      	ldr	r1, [r1, r7]
90025828:	9109      	str	r1, [sp, #36]	; 0x24
9002582a:	0e09      	lsrs	r1, r1, #24
9002582c:	9111      	str	r1, [sp, #68]	; 0x44
9002582e:	f8de 1004 	ldr.w	r1, [lr, #4]
90025832:	910e      	str	r1, [sp, #56]	; 0x38
90025834:	0e09      	lsrs	r1, r1, #24
90025836:	9115      	str	r1, [sp, #84]	; 0x54
90025838:	b292      	uxth	r2, r2
9002583a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002583c:	b280      	uxth	r0, r0
9002583e:	fb02 f900 	mul.w	r9, r2, r0
90025842:	0112      	lsls	r2, r2, #4
90025844:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025848:	eba2 0e09 	sub.w	lr, r2, r9
9002584c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90025850:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025852:	b280      	uxth	r0, r0
90025854:	fa1f fe8e 	uxth.w	lr, lr
90025858:	1a09      	subs	r1, r1, r0
9002585a:	fb0e f202 	mul.w	r2, lr, r2
9002585e:	b289      	uxth	r1, r1
90025860:	fb01 220c 	mla	r2, r1, ip, r2
90025864:	fb00 2205 	mla	r2, r0, r5, r2
90025868:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002586a:	fb09 2205 	mla	r2, r9, r5, r2
9002586e:	f3c2 2207 	ubfx	r2, r2, #8, #8
90025872:	2a00      	cmp	r2, #0
90025874:	f000 80ca 	beq.w	90025a0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025878:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9002587c:	d019      	beq.n	900258b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
9002587e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025886:	fb0c fa0a 	mul.w	sl, ip, sl
9002588a:	fb0c fc03 	mul.w	ip, ip, r3
9002588e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025892:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025896:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002589a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002589e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900258a2:	4453      	add	r3, sl
900258a4:	0a3f      	lsrs	r7, r7, #8
900258a6:	0a1b      	lsrs	r3, r3, #8
900258a8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900258ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900258b0:	433b      	orrs	r3, r7
900258b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
900258b4:	2dff      	cmp	r5, #255	; 0xff
900258b6:	d020      	beq.n	900258fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
900258b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900258ba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900258be:	9d14      	ldr	r5, [sp, #80]	; 0x50
900258c0:	436f      	muls	r7, r5
900258c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900258c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900258c8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900258cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
900258ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900258d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258d6:	fb05 fa0a 	mul.w	sl, r5, sl
900258da:	44bc      	add	ip, r7
900258dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900258e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900258e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900258e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900258f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900258f4:	ea4c 050a 	orr.w	r5, ip, sl
900258f8:	950d      	str	r5, [sp, #52]	; 0x34
900258fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
900258fc:	2dff      	cmp	r5, #255	; 0xff
900258fe:	d020      	beq.n	90025942 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90025900:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025902:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025906:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025908:	436f      	muls	r7, r5
9002590a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002590c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025910:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025912:	fb05 fa0c 	mul.w	sl, r5, ip
90025916:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002591a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002591e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025922:	44bc      	add	ip, r7
90025924:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025928:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002592c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025930:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025938:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002593c:	ea4c 050a 	orr.w	r5, ip, sl
90025940:	9509      	str	r5, [sp, #36]	; 0x24
90025942:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025944:	2dff      	cmp	r5, #255	; 0xff
90025946:	d020      	beq.n	9002598a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90025948:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002594a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002594e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025950:	436f      	muls	r7, r5
90025952:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025954:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025958:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002595c:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002595e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025962:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025966:	fb05 fa0a 	mul.w	sl, r5, sl
9002596a:	44bc      	add	ip, r7
9002596c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025970:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025974:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025978:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002597c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025980:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025984:	ea4c 050a 	orr.w	r5, ip, sl
90025988:	950e      	str	r5, [sp, #56]	; 0x38
9002598a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002598c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025990:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025994:	2aff      	cmp	r2, #255	; 0xff
90025996:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002599a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002599c:	fb0e f707 	mul.w	r7, lr, r7
900259a0:	fb01 770c 	mla	r7, r1, ip, r7
900259a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900259a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900259aa:	fb00 770c 	mla	r7, r0, ip, r7
900259ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900259b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900259b4:	fb09 770c 	mla	r7, r9, ip, r7
900259b8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
900259bc:	fb0e fe0c 	mul.w	lr, lr, ip
900259c0:	ea4f 2717 	mov.w	r7, r7, lsr #8
900259c4:	fb01 e303 	mla	r3, r1, r3, lr
900259c8:	9909      	ldr	r1, [sp, #36]	; 0x24
900259ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900259ce:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
900259d2:	990e      	ldr	r1, [sp, #56]	; 0x38
900259d4:	fb00 330a 	mla	r3, r0, sl, r3
900259d8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
900259dc:	fb09 3c0c 	mla	ip, r9, ip, r3
900259e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900259e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900259e8:	ea47 070c 	orr.w	r7, r7, ip
900259ec:	ea4f 2317 	mov.w	r3, r7, lsr #8
900259f0:	d11e      	bne.n	90025a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
900259f2:	097a      	lsrs	r2, r7, #5
900259f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
900259f8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
900259fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025a00:	f023 0307 	bic.w	r3, r3, #7
90025a04:	4313      	orrs	r3, r2
90025a06:	431f      	orrs	r7, r3
90025a08:	f8a8 7000 	strh.w	r7, [r8]
90025a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025a0e:	f108 0802 	add.w	r8, r8, #2
90025a12:	f10b 3bff 	add.w	fp, fp, #4294967295
90025a16:	441c      	add	r4, r3
90025a18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025a1a:	441e      	add	r6, r3
90025a1c:	e643      	b.n	900256a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90025a1e:	2800      	cmp	r0, #0
90025a20:	f43f af0a 	beq.w	90025838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025a24:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90025a28:	9109      	str	r1, [sp, #36]	; 0x24
90025a2a:	0e09      	lsrs	r1, r1, #24
90025a2c:	9111      	str	r1, [sp, #68]	; 0x44
90025a2e:	e703      	b.n	90025838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025a30:	f8b8 1000 	ldrh.w	r1, [r8]
90025a34:	43d2      	mvns	r2, r2
90025a36:	ea4f 2c21 	mov.w	ip, r1, asr #8
90025a3a:	fa5f fe82 	uxtb.w	lr, r2
90025a3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90025a42:	10c8      	asrs	r0, r1, #3
90025a44:	00ca      	lsls	r2, r1, #3
90025a46:	fb0c fc0e 	mul.w	ip, ip, lr
90025a4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025a4e:	b2d2      	uxtb	r2, r2
90025a50:	f10c 0101 	add.w	r1, ip, #1
90025a54:	fb00 f00e 	mul.w	r0, r0, lr
90025a58:	fb02 f20e 	mul.w	r2, r2, lr
90025a5c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025a60:	0c39      	lsrs	r1, r7, #16
90025a62:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025a66:	490f      	ldr	r1, [pc, #60]	; (90025aa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025a68:	fa5f fc8c 	uxtb.w	ip, ip
90025a6c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90025a70:	1c41      	adds	r1, r0, #1
90025a72:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90025a76:	1c51      	adds	r1, r2, #1
90025a78:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90025a7c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025a80:	00c0      	lsls	r0, r0, #3
90025a82:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90025a86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025a8a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025a8e:	ea4c 0c00 	orr.w	ip, ip, r0
90025a92:	ea47 0c0c 	orr.w	ip, r7, ip
90025a96:	f8a8 c000 	strh.w	ip, [r8]
90025a9a:	e7b7      	b.n	90025a0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025a9c:	b01b      	add	sp, #108	; 0x6c
90025a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025aa2:	bf00      	nop
90025aa4:	fffff800 	.word	0xfffff800

90025aa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90025aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025aac:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90025ab0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90025ab4:	2d00      	cmp	r5, #0
90025ab6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90025aba:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90025abe:	fb05 0e03 	mla	lr, r5, r3, r0
90025ac2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90025ac6:	f2c0 808c 	blt.w	90025be2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025aca:	45a9      	cmp	r9, r5
90025acc:	f340 8089 	ble.w	90025be2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025ad0:	2800      	cmp	r0, #0
90025ad2:	f2c0 8084 	blt.w	90025bde <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025ad6:	4580      	cmp	r8, r0
90025ad8:	f340 8081 	ble.w	90025bde <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025adc:	ea4f 045e 	mov.w	r4, lr, lsr #1
90025ae0:	f01e 0f01 	tst.w	lr, #1
90025ae4:	5d16      	ldrb	r6, [r2, r4]
90025ae6:	bf0c      	ite	eq
90025ae8:	f006 060f 	andeq.w	r6, r6, #15
90025aec:	1136      	asrne	r6, r6, #4
90025aee:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90025af2:	b2f6      	uxtb	r6, r6
90025af4:	1c44      	adds	r4, r0, #1
90025af6:	d477      	bmi.n	90025be8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025af8:	45a0      	cmp	r8, r4
90025afa:	dd75      	ble.n	90025be8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025afc:	2f00      	cmp	r7, #0
90025afe:	d075      	beq.n	90025bec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90025b00:	f10e 0a01 	add.w	sl, lr, #1
90025b04:	ea4f 045a 	mov.w	r4, sl, lsr #1
90025b08:	f01a 0f01 	tst.w	sl, #1
90025b0c:	5d14      	ldrb	r4, [r2, r4]
90025b0e:	bf0c      	ite	eq
90025b10:	f004 040f 	andeq.w	r4, r4, #15
90025b14:	1124      	asrne	r4, r4, #4
90025b16:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90025b1a:	b2e4      	uxtb	r4, r4
90025b1c:	3501      	adds	r5, #1
90025b1e:	d469      	bmi.n	90025bf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025b20:	45a9      	cmp	r9, r5
90025b22:	dd67      	ble.n	90025bf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025b24:	f1bc 0f00 	cmp.w	ip, #0
90025b28:	d067      	beq.n	90025bfa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90025b2a:	2800      	cmp	r0, #0
90025b2c:	db60      	blt.n	90025bf0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025b2e:	4580      	cmp	r8, r0
90025b30:	dd5e      	ble.n	90025bf0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025b32:	eb03 090e 	add.w	r9, r3, lr
90025b36:	ea4f 0559 	mov.w	r5, r9, lsr #1
90025b3a:	f019 0f01 	tst.w	r9, #1
90025b3e:	5d55      	ldrb	r5, [r2, r5]
90025b40:	bf0c      	ite	eq
90025b42:	f005 050f 	andeq.w	r5, r5, #15
90025b46:	112d      	asrne	r5, r5, #4
90025b48:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90025b4c:	b2ed      	uxtb	r5, r5
90025b4e:	3001      	adds	r0, #1
90025b50:	d456      	bmi.n	90025c00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025b52:	4580      	cmp	r8, r0
90025b54:	dd54      	ble.n	90025c00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025b56:	2f00      	cmp	r7, #0
90025b58:	d054      	beq.n	90025c04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90025b5a:	3301      	adds	r3, #1
90025b5c:	449e      	add	lr, r3
90025b5e:	ea4f 035e 	mov.w	r3, lr, lsr #1
90025b62:	f01e 0f01 	tst.w	lr, #1
90025b66:	5cd0      	ldrb	r0, [r2, r3]
90025b68:	bf0c      	ite	eq
90025b6a:	f000 000f 	andeq.w	r0, r0, #15
90025b6e:	1100      	asrne	r0, r0, #4
90025b70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90025b74:	b2c3      	uxtb	r3, r0
90025b76:	b2ba      	uxth	r2, r7
90025b78:	fa1f fc8c 	uxth.w	ip, ip
90025b7c:	fb02 f00c 	mul.w	r0, r2, ip
90025b80:	0112      	lsls	r2, r2, #4
90025b82:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90025b86:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90025b8a:	1a12      	subs	r2, r2, r0
90025b8c:	fa1f fc8c 	uxth.w	ip, ip
90025b90:	b292      	uxth	r2, r2
90025b92:	eba7 070c 	sub.w	r7, r7, ip
90025b96:	4362      	muls	r2, r4
90025b98:	b2bf      	uxth	r7, r7
90025b9a:	fb06 2207 	mla	r2, r6, r7, r2
90025b9e:	fb0c 2505 	mla	r5, ip, r5, r2
90025ba2:	fb00 5303 	mla	r3, r0, r3, r5
90025ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025baa:	b1b3      	cbz	r3, 90025bda <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90025bac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90025bb0:	435a      	muls	r2, r3
90025bb2:	1c53      	adds	r3, r2, #1
90025bb4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025bb8:	4a2d      	ldr	r2, [pc, #180]	; (90025c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90025bba:	121b      	asrs	r3, r3, #8
90025bbc:	6812      	ldr	r2, [r2, #0]
90025bbe:	2bff      	cmp	r3, #255	; 0xff
90025bc0:	ea4f 2612 	mov.w	r6, r2, lsr #8
90025bc4:	d120      	bne.n	90025c08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90025bc6:	0950      	lsrs	r0, r2, #5
90025bc8:	4b2a      	ldr	r3, [pc, #168]	; (90025c74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90025bca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90025bce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025bd2:	4033      	ands	r3, r6
90025bd4:	4318      	orrs	r0, r3
90025bd6:	4302      	orrs	r2, r0
90025bd8:	800a      	strh	r2, [r1, #0]
90025bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90025bde:	2600      	movs	r6, #0
90025be0:	e788      	b.n	90025af4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90025be2:	2400      	movs	r4, #0
90025be4:	4626      	mov	r6, r4
90025be6:	e799      	b.n	90025b1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025be8:	2400      	movs	r4, #0
90025bea:	e797      	b.n	90025b1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025bec:	463c      	mov	r4, r7
90025bee:	e795      	b.n	90025b1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025bf0:	2500      	movs	r5, #0
90025bf2:	e7ac      	b.n	90025b4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90025bf4:	2300      	movs	r3, #0
90025bf6:	461d      	mov	r5, r3
90025bf8:	e7bd      	b.n	90025b76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025bfa:	4663      	mov	r3, ip
90025bfc:	4665      	mov	r5, ip
90025bfe:	e7ba      	b.n	90025b76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025c00:	2300      	movs	r3, #0
90025c02:	e7b8      	b.n	90025b76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025c04:	463b      	mov	r3, r7
90025c06:	e7b6      	b.n	90025b76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025c08:	880d      	ldrh	r5, [r1, #0]
90025c0a:	b29f      	uxth	r7, r3
90025c0c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90025c10:	43db      	mvns	r3, r3
90025c12:	122c      	asrs	r4, r5, #8
90025c14:	fb10 f007 	smulbb	r0, r0, r7
90025c18:	b2db      	uxtb	r3, r3
90025c1a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90025c1e:	b2f6      	uxtb	r6, r6
90025c20:	b2d2      	uxtb	r2, r2
90025c22:	fb04 0403 	mla	r4, r4, r3, r0
90025c26:	10e8      	asrs	r0, r5, #3
90025c28:	fb12 f207 	smulbb	r2, r2, r7
90025c2c:	00ed      	lsls	r5, r5, #3
90025c2e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025c32:	b2a4      	uxth	r4, r4
90025c34:	fb16 f607 	smulbb	r6, r6, r7
90025c38:	b2ed      	uxtb	r5, r5
90025c3a:	fb00 6603 	mla	r6, r0, r3, r6
90025c3e:	fb05 2303 	mla	r3, r5, r3, r2
90025c42:	b2b0      	uxth	r0, r6
90025c44:	b29a      	uxth	r2, r3
90025c46:	1c63      	adds	r3, r4, #1
90025c48:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90025c4c:	1c53      	adds	r3, r2, #1
90025c4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025c52:	1c42      	adds	r2, r0, #1
90025c54:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90025c58:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90025c5c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90025c60:	0940      	lsrs	r0, r0, #5
90025c62:	4323      	orrs	r3, r4
90025c64:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025c68:	4303      	orrs	r3, r0
90025c6a:	800b      	strh	r3, [r1, #0]
90025c6c:	e7b5      	b.n	90025bda <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90025c6e:	bf00      	nop
90025c70:	240281a4 	.word	0x240281a4
90025c74:	00fff800 	.word	0x00fff800

90025c78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025c7c:	b097      	sub	sp, #92	; 0x5c
90025c7e:	9214      	str	r2, [sp, #80]	; 0x50
90025c80:	9309      	str	r3, [sp, #36]	; 0x24
90025c82:	9a25      	ldr	r2, [sp, #148]	; 0x94
90025c84:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90025c88:	9015      	str	r0, [sp, #84]	; 0x54
90025c8a:	910d      	str	r1, [sp, #52]	; 0x34
90025c8c:	6850      	ldr	r0, [r2, #4]
90025c8e:	930f      	str	r3, [sp, #60]	; 0x3c
90025c90:	6812      	ldr	r2, [r2, #0]
90025c92:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90025c96:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90025c9a:	fb00 1303 	mla	r3, r0, r3, r1
90025c9e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90025ca2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025ca4:	689b      	ldr	r3, [r3, #8]
90025ca6:	3301      	adds	r3, #1
90025ca8:	f023 0301 	bic.w	r3, r3, #1
90025cac:	930a      	str	r3, [sp, #40]	; 0x28
90025cae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025cb0:	681f      	ldr	r7, [r3, #0]
90025cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025cb4:	2b00      	cmp	r3, #0
90025cb6:	dc03      	bgt.n	90025cc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
90025cba:	2b00      	cmp	r3, #0
90025cbc:	f340 8289 	ble.w	900261d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90025cc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025cc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025cc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025cca:	1e48      	subs	r0, r1, #1
90025ccc:	f102 3cff 	add.w	ip, r2, #4294967295
90025cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025cd2:	2b00      	cmp	r3, #0
90025cd4:	f340 80c5 	ble.w	90025e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90025cd8:	ea5f 4e24 	movs.w	lr, r4, asr #16
90025cdc:	ea4f 4326 	mov.w	r3, r6, asr #16
90025ce0:	d406      	bmi.n	90025cf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025ce2:	4586      	cmp	lr, r0
90025ce4:	da04      	bge.n	90025cf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025ce6:	2b00      	cmp	r3, #0
90025ce8:	db02      	blt.n	90025cf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025cea:	4563      	cmp	r3, ip
90025cec:	f2c0 80ba 	blt.w	90025e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90025cf0:	f11e 0e01 	adds.w	lr, lr, #1
90025cf4:	f100 80ab 	bmi.w	90025e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025cf8:	4571      	cmp	r1, lr
90025cfa:	f2c0 80a8 	blt.w	90025e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025cfe:	3301      	adds	r3, #1
90025d00:	f100 80a5 	bmi.w	90025e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025d04:	429a      	cmp	r2, r3
90025d06:	f2c0 80a2 	blt.w	90025e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025d0c:	46c8      	mov	r8, r9
90025d0e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90025d12:	930e      	str	r3, [sp, #56]	; 0x38
90025d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90025d16:	2b00      	cmp	r3, #0
90025d18:	f340 80c4 	ble.w	90025ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90025d1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025d1e:	1430      	asrs	r0, r6, #16
90025d20:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025d24:	f3c6 3103 	ubfx	r1, r6, #12, #4
90025d28:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90025d2c:	1423      	asrs	r3, r4, #16
90025d2e:	f100 814f 	bmi.w	90025fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025d32:	f10c 3bff 	add.w	fp, ip, #4294967295
90025d36:	455b      	cmp	r3, fp
90025d38:	f280 814a 	bge.w	90025fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025d3c:	2800      	cmp	r0, #0
90025d3e:	f2c0 8147 	blt.w	90025fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025d42:	f10e 3bff 	add.w	fp, lr, #4294967295
90025d46:	4558      	cmp	r0, fp
90025d48:	f280 8142 	bge.w	90025fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025d4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90025d4e:	fb00 3305 	mla	r3, r0, r5, r3
90025d52:	0858      	lsrs	r0, r3, #1
90025d54:	07dd      	lsls	r5, r3, #31
90025d56:	f817 c000 	ldrb.w	ip, [r7, r0]
90025d5a:	bf54      	ite	pl
90025d5c:	f00c 0c0f 	andpl.w	ip, ip, #15
90025d60:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90025d64:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90025d68:	fa5f fc8c 	uxtb.w	ip, ip
90025d6c:	2a00      	cmp	r2, #0
90025d6e:	f000 80dd 	beq.w	90025f2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90025d72:	1c58      	adds	r0, r3, #1
90025d74:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90025d78:	07c0      	lsls	r0, r0, #31
90025d7a:	f817 e00e 	ldrb.w	lr, [r7, lr]
90025d7e:	bf54      	ite	pl
90025d80:	f00e 0e0f 	andpl.w	lr, lr, #15
90025d84:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90025d88:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90025d8c:	fa5f f08e 	uxtb.w	r0, lr
90025d90:	9010      	str	r0, [sp, #64]	; 0x40
90025d92:	b1d9      	cbz	r1, 90025dcc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025d94:	4453      	add	r3, sl
90025d96:	0858      	lsrs	r0, r3, #1
90025d98:	07dd      	lsls	r5, r3, #31
90025d9a:	f103 0301 	add.w	r3, r3, #1
90025d9e:	5c38      	ldrb	r0, [r7, r0]
90025da0:	bf54      	ite	pl
90025da2:	f000 000f 	andpl.w	r0, r0, #15
90025da6:	1100      	asrmi	r0, r0, #4
90025da8:	07dd      	lsls	r5, r3, #31
90025daa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90025dae:	b2c0      	uxtb	r0, r0
90025db0:	900b      	str	r0, [sp, #44]	; 0x2c
90025db2:	ea4f 0053 	mov.w	r0, r3, lsr #1
90025db6:	f817 e000 	ldrb.w	lr, [r7, r0]
90025dba:	bf54      	ite	pl
90025dbc:	f00e 030f 	andpl.w	r3, lr, #15
90025dc0:	ea4f 132e 	movmi.w	r3, lr, asr #4
90025dc4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90025dc8:	b2db      	uxtb	r3, r3
90025dca:	9311      	str	r3, [sp, #68]	; 0x44
90025dcc:	b292      	uxth	r2, r2
90025dce:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025dd0:	b289      	uxth	r1, r1
90025dd2:	fb02 f301 	mul.w	r3, r2, r1
90025dd6:	0112      	lsls	r2, r2, #4
90025dd8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90025ddc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90025de0:	1ad2      	subs	r2, r2, r3
90025de2:	b289      	uxth	r1, r1
90025de4:	b292      	uxth	r2, r2
90025de6:	1a40      	subs	r0, r0, r1
90025de8:	436a      	muls	r2, r5
90025dea:	b280      	uxth	r0, r0
90025dec:	fb0c 2c00 	mla	ip, ip, r0, r2
90025df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90025df2:	fb01 c102 	mla	r1, r1, r2, ip
90025df6:	9a11      	ldr	r2, [sp, #68]	; 0x44
90025df8:	fb03 1302 	mla	r3, r3, r2, r1
90025dfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025e00:	b1db      	cbz	r3, 90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025e04:	4353      	muls	r3, r2
90025e06:	1c5a      	adds	r2, r3, #1
90025e08:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90025e0c:	4ac6      	ldr	r2, [pc, #792]	; (90026128 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90025e0e:	121b      	asrs	r3, r3, #8
90025e10:	6812      	ldr	r2, [r2, #0]
90025e12:	2bff      	cmp	r3, #255	; 0xff
90025e14:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90025e18:	f040 8099 	bne.w	90025f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90025e1c:	0953      	lsrs	r3, r2, #5
90025e1e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90025e22:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90025e26:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025e2a:	f02c 0c07 	bic.w	ip, ip, #7
90025e2e:	ea43 0c0c 	orr.w	ip, r3, ip
90025e32:	ea4c 0202 	orr.w	r2, ip, r2
90025e36:	f8a8 2000 	strh.w	r2, [r8]
90025e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90025e3c:	f108 0802 	add.w	r8, r8, #2
90025e40:	441c      	add	r4, r3
90025e42:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025e44:	441e      	add	r6, r3
90025e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90025e48:	3b01      	subs	r3, #1
90025e4a:	930e      	str	r3, [sp, #56]	; 0x38
90025e4c:	e762      	b.n	90025d14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90025e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90025e50:	f109 0902 	add.w	r9, r9, #2
90025e54:	441c      	add	r4, r3
90025e56:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025e58:	441e      	add	r6, r3
90025e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025e5c:	3b01      	subs	r3, #1
90025e5e:	9309      	str	r3, [sp, #36]	; 0x24
90025e60:	e736      	b.n	90025cd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90025e62:	d024      	beq.n	90025eae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90025e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025e66:	9823      	ldr	r0, [sp, #140]	; 0x8c
90025e68:	3b01      	subs	r3, #1
90025e6a:	fb00 4003 	mla	r0, r0, r3, r4
90025e6e:	1400      	asrs	r0, r0, #16
90025e70:	f53f af4b 	bmi.w	90025d0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e74:	3901      	subs	r1, #1
90025e76:	4288      	cmp	r0, r1
90025e78:	f6bf af47 	bge.w	90025d0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e7c:	9924      	ldr	r1, [sp, #144]	; 0x90
90025e7e:	fb01 6303 	mla	r3, r1, r3, r6
90025e82:	141b      	asrs	r3, r3, #16
90025e84:	f53f af41 	bmi.w	90025d0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e88:	3a01      	subs	r2, #1
90025e8a:	4293      	cmp	r3, r2
90025e8c:	f6bf af3d 	bge.w	90025d0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e90:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90025e94:	46c8      	mov	r8, r9
90025e96:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90025e9a:	930e      	str	r3, [sp, #56]	; 0x38
90025e9c:	f1bb 0f00 	cmp.w	fp, #0
90025ea0:	f300 80b7 	bgt.w	90026012 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90025ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025ea6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025eaa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90025eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025eb0:	2b00      	cmp	r3, #0
90025eb2:	f340 818e 	ble.w	900261d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90025eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025eba:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025ebc:	ee30 0a04 	vadd.f32	s0, s0, s8
90025ec0:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025ec4:	eef0 6a62 	vmov.f32	s13, s5
90025ec8:	eec7 7a00 	vdiv.f32	s15, s14, s0
90025ecc:	ee31 1a05 	vadd.f32	s2, s2, s10
90025ed0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025ed4:	ee16 4a90 	vmov	r4, s13
90025ed8:	eef0 6a43 	vmov.f32	s13, s6
90025edc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025ee0:	ee16 6a90 	vmov	r6, s13
90025ee4:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025ee8:	ee61 7a27 	vmul.f32	s15, s2, s15
90025eec:	ee77 2a62 	vsub.f32	s5, s14, s5
90025ef0:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025ef4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025ef8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90025efc:	ee12 2a90 	vmov	r2, s5
90025f00:	eef0 2a47 	vmov.f32	s5, s14
90025f04:	fb92 f3f3 	sdiv	r3, r2, r3
90025f08:	ee13 2a10 	vmov	r2, s6
90025f0c:	9323      	str	r3, [sp, #140]	; 0x8c
90025f0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025f10:	eeb0 3a67 	vmov.f32	s6, s15
90025f14:	fb92 f3f3 	sdiv	r3, r2, r3
90025f18:	9324      	str	r3, [sp, #144]	; 0x90
90025f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025f1e:	3b01      	subs	r3, #1
90025f20:	930d      	str	r3, [sp, #52]	; 0x34
90025f22:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025f24:	bf08      	it	eq
90025f26:	4613      	moveq	r3, r2
90025f28:	9309      	str	r3, [sp, #36]	; 0x24
90025f2a:	e6c2      	b.n	90025cb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025f2c:	2900      	cmp	r1, #0
90025f2e:	f43f af4d 	beq.w	90025dcc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025f32:	eb0a 0003 	add.w	r0, sl, r3
90025f36:	0843      	lsrs	r3, r0, #1
90025f38:	07c0      	lsls	r0, r0, #31
90025f3a:	5cfb      	ldrb	r3, [r7, r3]
90025f3c:	bf54      	ite	pl
90025f3e:	f003 030f 	andpl.w	r3, r3, #15
90025f42:	111b      	asrmi	r3, r3, #4
90025f44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90025f48:	b2db      	uxtb	r3, r3
90025f4a:	930b      	str	r3, [sp, #44]	; 0x2c
90025f4c:	e73e      	b.n	90025dcc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025f4e:	f8b8 e000 	ldrh.w	lr, [r8]
90025f52:	fa1f fb83 	uxth.w	fp, r3
90025f56:	f3c2 4107 	ubfx	r1, r2, #16, #8
90025f5a:	43db      	mvns	r3, r3
90025f5c:	ea4f 202e 	mov.w	r0, lr, asr #8
90025f60:	fb11 f10b 	smulbb	r1, r1, fp
90025f64:	b2db      	uxtb	r3, r3
90025f66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90025f6a:	fa5f fc8c 	uxtb.w	ip, ip
90025f6e:	b2d2      	uxtb	r2, r2
90025f70:	fb00 1003 	mla	r0, r0, r3, r1
90025f74:	ea4f 01ee 	mov.w	r1, lr, asr #3
90025f78:	fb1c fc0b 	smulbb	ip, ip, fp
90025f7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90025f80:	b280      	uxth	r0, r0
90025f82:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90025f86:	fb12 fb0b 	smulbb	fp, r2, fp
90025f8a:	fa5f fe8e 	uxtb.w	lr, lr
90025f8e:	fb01 cc03 	mla	ip, r1, r3, ip
90025f92:	fb0e bb03 	mla	fp, lr, r3, fp
90025f96:	1c43      	adds	r3, r0, #1
90025f98:	fa1f fc8c 	uxth.w	ip, ip
90025f9c:	fa1f fb8b 	uxth.w	fp, fp
90025fa0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90025fa4:	f10c 0101 	add.w	r1, ip, #1
90025fa8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
90025fac:	f10b 0001 	add.w	r0, fp, #1
90025fb0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025fb4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90025fb8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90025fbc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90025fc0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90025fc4:	4318      	orrs	r0, r3
90025fc6:	ea40 000c 	orr.w	r0, r0, ip
90025fca:	f8a8 0000 	strh.w	r0, [r8]
90025fce:	e734      	b.n	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025fd0:	f113 0b01 	adds.w	fp, r3, #1
90025fd4:	f53f af31 	bmi.w	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025fd8:	45dc      	cmp	ip, fp
90025fda:	f6ff af2e 	blt.w	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025fde:	f110 0b01 	adds.w	fp, r0, #1
90025fe2:	f53f af2a 	bmi.w	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025fe6:	45de      	cmp	lr, fp
90025fe8:	f6ff af27 	blt.w	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025fec:	9302      	str	r3, [sp, #8]
90025fee:	fa0f f38e 	sxth.w	r3, lr
90025ff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025ff4:	9301      	str	r3, [sp, #4]
90025ff6:	fa0f f38c 	sxth.w	r3, ip
90025ffa:	e9cd 0203 	strd	r0, r2, [sp, #12]
90025ffe:	e9cd 1505 	strd	r1, r5, [sp, #20]
90026002:	9300      	str	r3, [sp, #0]
90026004:	463a      	mov	r2, r7
90026006:	4653      	mov	r3, sl
90026008:	4641      	mov	r1, r8
9002600a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002600c:	f7ff fd4c 	bl	90025aa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90026010:	e713      	b.n	90025e3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026012:	1422      	asrs	r2, r4, #16
90026014:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90026016:	1433      	asrs	r3, r6, #16
90026018:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002601c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026020:	fb05 2303 	mla	r3, r5, r3, r2
90026024:	085a      	lsrs	r2, r3, #1
90026026:	07dd      	lsls	r5, r3, #31
90026028:	5cba      	ldrb	r2, [r7, r2]
9002602a:	bf54      	ite	pl
9002602c:	f002 020f 	andpl.w	r2, r2, #15
90026030:	1112      	asrmi	r2, r2, #4
90026032:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026036:	b2d2      	uxtb	r2, r2
90026038:	2900      	cmp	r1, #0
9002603a:	d077      	beq.n	9002612c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002603c:	f103 0e01 	add.w	lr, r3, #1
90026040:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90026044:	f01e 0f01 	tst.w	lr, #1
90026048:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002604c:	bf0c      	ite	eq
9002604e:	f00c 0c0f 	andeq.w	ip, ip, #15
90026052:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90026056:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002605a:	fa5f f58c 	uxtb.w	r5, ip
9002605e:	9512      	str	r5, [sp, #72]	; 0x48
90026060:	b308      	cbz	r0, 900260a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026062:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026064:	442b      	add	r3, r5
90026066:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002606a:	07dd      	lsls	r5, r3, #31
9002606c:	f103 0301 	add.w	r3, r3, #1
90026070:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026074:	bf54      	ite	pl
90026076:	f00c 0c0f 	andpl.w	ip, ip, #15
9002607a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002607e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026082:	fa5f f58c 	uxtb.w	r5, ip
90026086:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002608a:	950c      	str	r5, [sp, #48]	; 0x30
9002608c:	07dd      	lsls	r5, r3, #31
9002608e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026092:	bf54      	ite	pl
90026094:	f00c 0c0f 	andpl.w	ip, ip, #15
90026098:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002609c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900260a0:	fa5f f38c 	uxtb.w	r3, ip
900260a4:	9313      	str	r3, [sp, #76]	; 0x4c
900260a6:	b289      	uxth	r1, r1
900260a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900260aa:	b280      	uxth	r0, r0
900260ac:	fb01 f300 	mul.w	r3, r1, r0
900260b0:	0109      	lsls	r1, r1, #4
900260b2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900260b6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900260ba:	1ac9      	subs	r1, r1, r3
900260bc:	b280      	uxth	r0, r0
900260be:	b289      	uxth	r1, r1
900260c0:	ebac 0c00 	sub.w	ip, ip, r0
900260c4:	4369      	muls	r1, r5
900260c6:	fa1f fc8c 	uxth.w	ip, ip
900260ca:	fb02 120c 	mla	r2, r2, ip, r1
900260ce:	990c      	ldr	r1, [sp, #48]	; 0x30
900260d0:	fb00 2001 	mla	r0, r0, r1, r2
900260d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900260d6:	fb03 0302 	mla	r3, r3, r2, r0
900260da:	f3c3 2307 	ubfx	r3, r3, #8, #8
900260de:	b1d3      	cbz	r3, 90026116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900260e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900260e2:	4353      	muls	r3, r2
900260e4:	1c5a      	adds	r2, r3, #1
900260e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900260ea:	4a0f      	ldr	r2, [pc, #60]	; (90026128 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900260ec:	121b      	asrs	r3, r3, #8
900260ee:	6812      	ldr	r2, [r2, #0]
900260f0:	2bff      	cmp	r3, #255	; 0xff
900260f2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
900260f6:	d12d      	bne.n	90026154 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
900260f8:	0953      	lsrs	r3, r2, #5
900260fa:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
900260fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026102:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026106:	f02c 0c07 	bic.w	ip, ip, #7
9002610a:	ea43 0c0c 	orr.w	ip, r3, ip
9002610e:	ea4c 0202 	orr.w	r2, ip, r2
90026112:	f8a8 2000 	strh.w	r2, [r8]
90026116:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026118:	f108 0802 	add.w	r8, r8, #2
9002611c:	f10b 3bff 	add.w	fp, fp, #4294967295
90026120:	441c      	add	r4, r3
90026122:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026124:	441e      	add	r6, r3
90026126:	e6b9      	b.n	90025e9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90026128:	240281a4 	.word	0x240281a4
9002612c:	2800      	cmp	r0, #0
9002612e:	d0ba      	beq.n	900260a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026132:	442b      	add	r3, r5
90026134:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90026138:	07db      	lsls	r3, r3, #31
9002613a:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002613e:	bf54      	ite	pl
90026140:	f00c 0c0f 	andpl.w	ip, ip, #15
90026144:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026148:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002614c:	fa5f f38c 	uxtb.w	r3, ip
90026150:	930c      	str	r3, [sp, #48]	; 0x30
90026152:	e7a8      	b.n	900260a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026154:	f8b8 e000 	ldrh.w	lr, [r8]
90026158:	fa1f fa83 	uxth.w	sl, r3
9002615c:	f3c2 4107 	ubfx	r1, r2, #16, #8
90026160:	43db      	mvns	r3, r3
90026162:	ea4f 202e 	mov.w	r0, lr, asr #8
90026166:	fb11 f10a 	smulbb	r1, r1, sl
9002616a:	b2db      	uxtb	r3, r3
9002616c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90026170:	b2d2      	uxtb	r2, r2
90026172:	fa5f fc8c 	uxtb.w	ip, ip
90026176:	fb00 1003 	mla	r0, r0, r3, r1
9002617a:	ea4f 01ee 	mov.w	r1, lr, asr #3
9002617e:	fb12 f20a 	smulbb	r2, r2, sl
90026182:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026186:	b280      	uxth	r0, r0
90026188:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002618c:	fb1c fc0a 	smulbb	ip, ip, sl
90026190:	fa5f fe8e 	uxtb.w	lr, lr
90026194:	fb0e 2203 	mla	r2, lr, r3, r2
90026198:	fb01 cc03 	mla	ip, r1, r3, ip
9002619c:	1c43      	adds	r3, r0, #1
9002619e:	b292      	uxth	r2, r2
900261a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900261a4:	1c51      	adds	r1, r2, #1
900261a6:	fa1f fc8c 	uxth.w	ip, ip
900261aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900261ae:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900261b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900261b6:	4308      	orrs	r0, r1
900261b8:	f10c 0101 	add.w	r1, ip, #1
900261bc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900261c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900261c4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900261c8:	ea40 000c 	orr.w	r0, r0, ip
900261cc:	f8a8 0000 	strh.w	r0, [r8]
900261d0:	e7a1      	b.n	90026116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900261d2:	b017      	add	sp, #92	; 0x5c
900261d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900261d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
900261d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900261dc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
900261e0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900261e4:	2d00      	cmp	r5, #0
900261e6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900261ea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900261ee:	fb05 0e03 	mla	lr, r5, r3, r0
900261f2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900261f6:	f2c0 80b0 	blt.w	9002635a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
900261fa:	45a9      	cmp	r9, r5
900261fc:	f340 80ad 	ble.w	9002635a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90026200:	2800      	cmp	r0, #0
90026202:	f2c0 80a8 	blt.w	90026356 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90026206:	4580      	cmp	r8, r0
90026208:	f340 80a5 	ble.w	90026356 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002620c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90026210:	f01e 0f01 	tst.w	lr, #1
90026214:	5d16      	ldrb	r6, [r2, r4]
90026216:	bf0c      	ite	eq
90026218:	f006 060f 	andeq.w	r6, r6, #15
9002621c:	1136      	asrne	r6, r6, #4
9002621e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90026222:	b2f6      	uxtb	r6, r6
90026224:	1c44      	adds	r4, r0, #1
90026226:	f100 809b 	bmi.w	90026360 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002622a:	45a0      	cmp	r8, r4
9002622c:	f340 8098 	ble.w	90026360 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90026230:	2f00      	cmp	r7, #0
90026232:	f000 8097 	beq.w	90026364 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90026236:	f10e 0a01 	add.w	sl, lr, #1
9002623a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002623e:	f01a 0f01 	tst.w	sl, #1
90026242:	5d14      	ldrb	r4, [r2, r4]
90026244:	bf0c      	ite	eq
90026246:	f004 040f 	andeq.w	r4, r4, #15
9002624a:	1124      	asrne	r4, r4, #4
9002624c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90026250:	b2e4      	uxtb	r4, r4
90026252:	3501      	adds	r5, #1
90026254:	f100 808a 	bmi.w	9002636c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90026258:	45a9      	cmp	r9, r5
9002625a:	f340 8087 	ble.w	9002636c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002625e:	f1bc 0f00 	cmp.w	ip, #0
90026262:	f000 8086 	beq.w	90026372 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90026266:	2800      	cmp	r0, #0
90026268:	db7e      	blt.n	90026368 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002626a:	4580      	cmp	r8, r0
9002626c:	dd7c      	ble.n	90026368 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002626e:	eb03 090e 	add.w	r9, r3, lr
90026272:	ea4f 0559 	mov.w	r5, r9, lsr #1
90026276:	f019 0f01 	tst.w	r9, #1
9002627a:	5d55      	ldrb	r5, [r2, r5]
9002627c:	bf0c      	ite	eq
9002627e:	f005 050f 	andeq.w	r5, r5, #15
90026282:	112d      	asrne	r5, r5, #4
90026284:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90026288:	b2ed      	uxtb	r5, r5
9002628a:	3001      	adds	r0, #1
9002628c:	d474      	bmi.n	90026378 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002628e:	4580      	cmp	r8, r0
90026290:	dd72      	ble.n	90026378 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90026292:	2f00      	cmp	r7, #0
90026294:	d072      	beq.n	9002637c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90026296:	3301      	adds	r3, #1
90026298:	449e      	add	lr, r3
9002629a:	ea4f 035e 	mov.w	r3, lr, lsr #1
9002629e:	f01e 0f01 	tst.w	lr, #1
900262a2:	5cd0      	ldrb	r0, [r2, r3]
900262a4:	bf0c      	ite	eq
900262a6:	f000 000f 	andeq.w	r0, r0, #15
900262aa:	1100      	asrne	r0, r0, #4
900262ac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900262b0:	b2c3      	uxtb	r3, r0
900262b2:	b2ba      	uxth	r2, r7
900262b4:	fa1f fc8c 	uxth.w	ip, ip
900262b8:	fb02 f00c 	mul.w	r0, r2, ip
900262bc:	0112      	lsls	r2, r2, #4
900262be:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900262c2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900262c6:	1a12      	subs	r2, r2, r0
900262c8:	fa1f fc8c 	uxth.w	ip, ip
900262cc:	b292      	uxth	r2, r2
900262ce:	eba7 070c 	sub.w	r7, r7, ip
900262d2:	4362      	muls	r2, r4
900262d4:	b2bf      	uxth	r7, r7
900262d6:	fb06 2207 	mla	r2, r6, r7, r2
900262da:	fb0c 2505 	mla	r5, ip, r5, r2
900262de:	fb00 5303 	mla	r3, r0, r3, r5
900262e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900262e6:	b3a3      	cbz	r3, 90026352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
900262e8:	4a25      	ldr	r2, [pc, #148]	; (90026380 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
900262ea:	880e      	ldrh	r6, [r1, #0]
900262ec:	6815      	ldr	r5, [r2, #0]
900262ee:	b29a      	uxth	r2, r3
900262f0:	1234      	asrs	r4, r6, #8
900262f2:	43db      	mvns	r3, r3
900262f4:	f3c5 4007 	ubfx	r0, r5, #16, #8
900262f8:	f3c5 2707 	ubfx	r7, r5, #8, #8
900262fc:	b2db      	uxtb	r3, r3
900262fe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90026302:	fb10 f002 	smulbb	r0, r0, r2
90026306:	b2ed      	uxtb	r5, r5
90026308:	fb17 f702 	smulbb	r7, r7, r2
9002630c:	fb04 0403 	mla	r4, r4, r3, r0
90026310:	10f0      	asrs	r0, r6, #3
90026312:	fb15 f202 	smulbb	r2, r5, r2
90026316:	00f6      	lsls	r6, r6, #3
90026318:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002631c:	b2a4      	uxth	r4, r4
9002631e:	b2f6      	uxtb	r6, r6
90026320:	fb00 7003 	mla	r0, r0, r3, r7
90026324:	fb06 2303 	mla	r3, r6, r3, r2
90026328:	b280      	uxth	r0, r0
9002632a:	b29a      	uxth	r2, r3
9002632c:	1c63      	adds	r3, r4, #1
9002632e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90026332:	1c53      	adds	r3, r2, #1
90026334:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026338:	1c42      	adds	r2, r0, #1
9002633a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9002633e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90026342:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90026346:	0940      	lsrs	r0, r0, #5
90026348:	4323      	orrs	r3, r4
9002634a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002634e:	4303      	orrs	r3, r0
90026350:	800b      	strh	r3, [r1, #0]
90026352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90026356:	2600      	movs	r6, #0
90026358:	e764      	b.n	90026224 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
9002635a:	2400      	movs	r4, #0
9002635c:	4626      	mov	r6, r4
9002635e:	e778      	b.n	90026252 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026360:	2400      	movs	r4, #0
90026362:	e776      	b.n	90026252 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026364:	463c      	mov	r4, r7
90026366:	e774      	b.n	90026252 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026368:	2500      	movs	r5, #0
9002636a:	e78e      	b.n	9002628a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
9002636c:	2300      	movs	r3, #0
9002636e:	461d      	mov	r5, r3
90026370:	e79f      	b.n	900262b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026372:	4663      	mov	r3, ip
90026374:	4665      	mov	r5, ip
90026376:	e79c      	b.n	900262b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026378:	2300      	movs	r3, #0
9002637a:	e79a      	b.n	900262b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
9002637c:	463b      	mov	r3, r7
9002637e:	e798      	b.n	900262b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026380:	240281a4 	.word	0x240281a4

90026384 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026388:	b093      	sub	sp, #76	; 0x4c
9002638a:	461d      	mov	r5, r3
9002638c:	920c      	str	r2, [sp, #48]	; 0x30
9002638e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90026390:	9011      	str	r0, [sp, #68]	; 0x44
90026392:	9107      	str	r1, [sp, #28]
90026394:	6850      	ldr	r0, [r2, #4]
90026396:	6812      	ldr	r2, [r2, #0]
90026398:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002639c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900263a0:	fb00 1303 	mla	r3, r0, r3, r1
900263a4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900263a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263aa:	689b      	ldr	r3, [r3, #8]
900263ac:	3301      	adds	r3, #1
900263ae:	f023 0301 	bic.w	r3, r3, #1
900263b2:	9306      	str	r3, [sp, #24]
900263b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263b6:	681f      	ldr	r7, [r3, #0]
900263b8:	9b07      	ldr	r3, [sp, #28]
900263ba:	2b00      	cmp	r3, #0
900263bc:	dc03      	bgt.n	900263c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900263be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900263c0:	2b00      	cmp	r3, #0
900263c2:	f340 8267 	ble.w	90026894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900263c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900263cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900263d0:	1e48      	subs	r0, r1, #1
900263d2:	f102 3cff 	add.w	ip, r2, #4294967295
900263d6:	2d00      	cmp	r5, #0
900263d8:	f340 80b7 	ble.w	9002654a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
900263dc:	ea5f 4e24 	movs.w	lr, r4, asr #16
900263e0:	ea4f 4326 	mov.w	r3, r6, asr #16
900263e4:	d406      	bmi.n	900263f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900263e6:	4586      	cmp	lr, r0
900263e8:	da04      	bge.n	900263f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900263ea:	2b00      	cmp	r3, #0
900263ec:	db02      	blt.n	900263f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900263ee:	4563      	cmp	r3, ip
900263f0:	f2c0 80ac 	blt.w	9002654c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900263f4:	f11e 0e01 	adds.w	lr, lr, #1
900263f8:	f100 809f 	bmi.w	9002653a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
900263fc:	4571      	cmp	r1, lr
900263fe:	f2c0 809c 	blt.w	9002653a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026402:	3301      	adds	r3, #1
90026404:	f100 8099 	bmi.w	9002653a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026408:	429a      	cmp	r2, r3
9002640a:	f2c0 8096 	blt.w	9002653a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002640e:	46c8      	mov	r8, r9
90026410:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90026414:	9509      	str	r5, [sp, #36]	; 0x24
90026416:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026418:	2b00      	cmp	r3, #0
9002641a:	f340 80b5 	ble.w	90026588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002641e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90026422:	1430      	asrs	r0, r6, #16
90026424:	f3c6 3103 	ubfx	r1, r6, #12, #4
90026428:	9308      	str	r3, [sp, #32]
9002642a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002642c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90026430:	1423      	asrs	r3, r4, #16
90026432:	f100 813f 	bmi.w	900266b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026436:	f10c 3bff 	add.w	fp, ip, #4294967295
9002643a:	455b      	cmp	r3, fp
9002643c:	f280 813a 	bge.w	900266b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026440:	2800      	cmp	r0, #0
90026442:	f2c0 8137 	blt.w	900266b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026446:	f10e 3bff 	add.w	fp, lr, #4294967295
9002644a:	4558      	cmp	r0, fp
9002644c:	f280 8132 	bge.w	900266b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026450:	9a06      	ldr	r2, [sp, #24]
90026452:	fb00 3302 	mla	r3, r0, r2, r3
90026456:	0858      	lsrs	r0, r3, #1
90026458:	07da      	lsls	r2, r3, #31
9002645a:	9a08      	ldr	r2, [sp, #32]
9002645c:	f817 c000 	ldrb.w	ip, [r7, r0]
90026460:	bf54      	ite	pl
90026462:	f00c 0c0f 	andpl.w	ip, ip, #15
90026466:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002646a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002646e:	fa5f fc8c 	uxtb.w	ip, ip
90026472:	2a00      	cmp	r2, #0
90026474:	f000 80cc 	beq.w	90026610 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90026478:	1c58      	adds	r0, r3, #1
9002647a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
9002647e:	07c0      	lsls	r0, r0, #31
90026480:	f817 e00e 	ldrb.w	lr, [r7, lr]
90026484:	bf54      	ite	pl
90026486:	f00e 0e0f 	andpl.w	lr, lr, #15
9002648a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
9002648e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90026492:	fa5f fe8e 	uxtb.w	lr, lr
90026496:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
9002649a:	b1b9      	cbz	r1, 900264cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002649c:	4453      	add	r3, sl
9002649e:	0858      	lsrs	r0, r3, #1
900264a0:	07da      	lsls	r2, r3, #31
900264a2:	5c38      	ldrb	r0, [r7, r0]
900264a4:	bf54      	ite	pl
900264a6:	f000 000f 	andpl.w	r0, r0, #15
900264aa:	1100      	asrmi	r0, r0, #4
900264ac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900264b0:	b2c0      	uxtb	r0, r0
900264b2:	900a      	str	r0, [sp, #40]	; 0x28
900264b4:	1c58      	adds	r0, r3, #1
900264b6:	0843      	lsrs	r3, r0, #1
900264b8:	07c2      	lsls	r2, r0, #31
900264ba:	5cfb      	ldrb	r3, [r7, r3]
900264bc:	bf54      	ite	pl
900264be:	f003 030f 	andpl.w	r3, r3, #15
900264c2:	111b      	asrmi	r3, r3, #4
900264c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900264c8:	b2db      	uxtb	r3, r3
900264ca:	930e      	str	r3, [sp, #56]	; 0x38
900264cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
900264d0:	b289      	uxth	r1, r1
900264d2:	fb02 f301 	mul.w	r3, r2, r1
900264d6:	0112      	lsls	r2, r2, #4
900264d8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900264dc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
900264e0:	1ad2      	subs	r2, r2, r3
900264e2:	b289      	uxth	r1, r1
900264e4:	b292      	uxth	r2, r2
900264e6:	1a40      	subs	r0, r0, r1
900264e8:	fa1f fe80 	uxth.w	lr, r0
900264ec:	980d      	ldr	r0, [sp, #52]	; 0x34
900264ee:	4342      	muls	r2, r0
900264f0:	fb0c 2c0e 	mla	ip, ip, lr, r2
900264f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900264f6:	fb01 c102 	mla	r1, r1, r2, ip
900264fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900264fc:	fb03 1302 	mla	r3, r3, r2, r1
90026500:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026504:	2bff      	cmp	r3, #255	; 0xff
90026506:	f040 8094 	bne.w	90026632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002650a:	4bbf      	ldr	r3, [pc, #764]	; (90026808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002650c:	681a      	ldr	r2, [r3, #0]
9002650e:	4bbf      	ldr	r3, [pc, #764]	; (9002680c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026510:	0951      	lsrs	r1, r2, #5
90026512:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026516:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002651a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002651e:	430b      	orrs	r3, r1
90026520:	4313      	orrs	r3, r2
90026522:	f8a8 3000 	strh.w	r3, [r8]
90026526:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026528:	f108 0802 	add.w	r8, r8, #2
9002652c:	441c      	add	r4, r3
9002652e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026530:	441e      	add	r6, r3
90026532:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026534:	3b01      	subs	r3, #1
90026536:	9309      	str	r3, [sp, #36]	; 0x24
90026538:	e76d      	b.n	90026416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002653a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002653c:	3d01      	subs	r5, #1
9002653e:	f109 0902 	add.w	r9, r9, #2
90026542:	441c      	add	r4, r3
90026544:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026546:	441e      	add	r6, r3
90026548:	e745      	b.n	900263d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002654a:	d021      	beq.n	90026590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9002654c:	1e6b      	subs	r3, r5, #1
9002654e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90026550:	fb00 4003 	mla	r0, r0, r3, r4
90026554:	1400      	asrs	r0, r0, #16
90026556:	f53f af5a 	bmi.w	9002640e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002655a:	3901      	subs	r1, #1
9002655c:	4288      	cmp	r0, r1
9002655e:	f6bf af56 	bge.w	9002640e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026562:	9920      	ldr	r1, [sp, #128]	; 0x80
90026564:	fb01 6303 	mla	r3, r1, r3, r6
90026568:	141b      	asrs	r3, r3, #16
9002656a:	f53f af50 	bmi.w	9002640e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002656e:	3a01      	subs	r2, #1
90026570:	4293      	cmp	r3, r2
90026572:	f6bf af4c 	bge.w	9002640e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026576:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9002657a:	46a8      	mov	r8, r5
9002657c:	46ce      	mov	lr, r9
9002657e:	9308      	str	r3, [sp, #32]
90026580:	f1b8 0f00 	cmp.w	r8, #0
90026584:	f300 80b6 	bgt.w	900266f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90026588:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002658c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90026590:	9b07      	ldr	r3, [sp, #28]
90026592:	2b00      	cmp	r3, #0
90026594:	f340 817e 	ble.w	90026894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002659c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002659e:	ee30 0a04 	vadd.f32	s0, s0, s8
900265a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900265a6:	eef0 6a62 	vmov.f32	s13, s5
900265aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
900265ae:	ee31 1a05 	vadd.f32	s2, s2, s10
900265b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900265b6:	ee16 4a90 	vmov	r4, s13
900265ba:	eef0 6a43 	vmov.f32	s13, s6
900265be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900265c2:	ee16 6a90 	vmov	r6, s13
900265c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900265ca:	ee61 7a27 	vmul.f32	s15, s2, s15
900265ce:	ee77 2a62 	vsub.f32	s5, s14, s5
900265d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900265d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900265da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900265de:	ee12 2a90 	vmov	r2, s5
900265e2:	eef0 2a47 	vmov.f32	s5, s14
900265e6:	fb92 f3f3 	sdiv	r3, r2, r3
900265ea:	ee13 2a10 	vmov	r2, s6
900265ee:	931f      	str	r3, [sp, #124]	; 0x7c
900265f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900265f2:	eeb0 3a67 	vmov.f32	s6, s15
900265f6:	fb92 f3f3 	sdiv	r3, r2, r3
900265fa:	9320      	str	r3, [sp, #128]	; 0x80
900265fc:	9b07      	ldr	r3, [sp, #28]
900265fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90026600:	3b01      	subs	r3, #1
90026602:	9307      	str	r3, [sp, #28]
90026604:	bf08      	it	eq
90026606:	4615      	moveq	r5, r2
90026608:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002660a:	bf18      	it	ne
9002660c:	461d      	movne	r5, r3
9002660e:	e6d3      	b.n	900263b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90026610:	2900      	cmp	r1, #0
90026612:	f43f af5b 	beq.w	900264cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026616:	eb0a 0003 	add.w	r0, sl, r3
9002661a:	0843      	lsrs	r3, r0, #1
9002661c:	07c0      	lsls	r0, r0, #31
9002661e:	5cfb      	ldrb	r3, [r7, r3]
90026620:	bf54      	ite	pl
90026622:	f003 030f 	andpl.w	r3, r3, #15
90026626:	111b      	asrmi	r3, r3, #4
90026628:	eb03 1303 	add.w	r3, r3, r3, lsl #4
9002662c:	b2db      	uxtb	r3, r3
9002662e:	930a      	str	r3, [sp, #40]	; 0x28
90026630:	e74c      	b.n	900264cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026632:	2b00      	cmp	r3, #0
90026634:	f43f af77 	beq.w	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026638:	4a73      	ldr	r2, [pc, #460]	; (90026808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002663a:	fa1f fe83 	uxth.w	lr, r3
9002663e:	f8b8 c000 	ldrh.w	ip, [r8]
90026642:	43db      	mvns	r3, r3
90026644:	6810      	ldr	r0, [r2, #0]
90026646:	ea4f 212c 	mov.w	r1, ip, asr #8
9002664a:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002664e:	b2db      	uxtb	r3, r3
90026650:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026654:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026658:	fb12 f20e 	smulbb	r2, r2, lr
9002665c:	b2c0      	uxtb	r0, r0
9002665e:	fb1b fb0e 	smulbb	fp, fp, lr
90026662:	fb01 2103 	mla	r1, r1, r3, r2
90026666:	ea4f 02ec 	mov.w	r2, ip, asr #3
9002666a:	fb10 fe0e 	smulbb	lr, r0, lr
9002666e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026672:	b289      	uxth	r1, r1
90026674:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026678:	fa5f fc8c 	uxtb.w	ip, ip
9002667c:	fb02 b203 	mla	r2, r2, r3, fp
90026680:	1c48      	adds	r0, r1, #1
90026682:	fb0c e303 	mla	r3, ip, r3, lr
90026686:	b292      	uxth	r2, r2
90026688:	b29b      	uxth	r3, r3
9002668a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
9002668e:	f102 0b01 	add.w	fp, r2, #1
90026692:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90026696:	1c59      	adds	r1, r3, #1
90026698:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
9002669c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900266a0:	0952      	lsrs	r2, r2, #5
900266a2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900266a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900266aa:	4301      	orrs	r1, r0
900266ac:	4311      	orrs	r1, r2
900266ae:	f8a8 1000 	strh.w	r1, [r8]
900266b2:	e738      	b.n	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266b4:	f113 0b01 	adds.w	fp, r3, #1
900266b8:	f53f af35 	bmi.w	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266bc:	45dc      	cmp	ip, fp
900266be:	f6ff af32 	blt.w	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266c2:	f110 0b01 	adds.w	fp, r0, #1
900266c6:	f53f af2e 	bmi.w	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266ca:	45de      	cmp	lr, fp
900266cc:	f6ff af2b 	blt.w	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266d0:	9302      	str	r3, [sp, #8]
900266d2:	fa0f f38e 	sxth.w	r3, lr
900266d6:	9a08      	ldr	r2, [sp, #32]
900266d8:	9301      	str	r3, [sp, #4]
900266da:	fa0f f38c 	sxth.w	r3, ip
900266de:	9105      	str	r1, [sp, #20]
900266e0:	4641      	mov	r1, r8
900266e2:	9300      	str	r3, [sp, #0]
900266e4:	4653      	mov	r3, sl
900266e6:	e9cd 0203 	strd	r0, r2, [sp, #12]
900266ea:	463a      	mov	r2, r7
900266ec:	9811      	ldr	r0, [sp, #68]	; 0x44
900266ee:	f7ff fd73 	bl	900261d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
900266f2:	e718      	b.n	90026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900266f4:	1422      	asrs	r2, r4, #16
900266f6:	9906      	ldr	r1, [sp, #24]
900266f8:	1433      	asrs	r3, r6, #16
900266fa:	f3c4 3003 	ubfx	r0, r4, #12, #4
900266fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90026702:	fb01 2303 	mla	r3, r1, r3, r2
90026706:	085a      	lsrs	r2, r3, #1
90026708:	07d9      	lsls	r1, r3, #31
9002670a:	5cba      	ldrb	r2, [r7, r2]
9002670c:	bf54      	ite	pl
9002670e:	f002 020f 	andpl.w	r2, r2, #15
90026712:	1112      	asrmi	r2, r2, #4
90026714:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026718:	b2d2      	uxtb	r2, r2
9002671a:	2800      	cmp	r0, #0
9002671c:	d063      	beq.n	900267e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
9002671e:	f103 0a01 	add.w	sl, r3, #1
90026722:	ea4f 015a 	mov.w	r1, sl, lsr #1
90026726:	f01a 0f01 	tst.w	sl, #1
9002672a:	5c79      	ldrb	r1, [r7, r1]
9002672c:	bf0c      	ite	eq
9002672e:	f001 010f 	andeq.w	r1, r1, #15
90026732:	1109      	asrne	r1, r1, #4
90026734:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026738:	b2c9      	uxtb	r1, r1
9002673a:	910f      	str	r1, [sp, #60]	; 0x3c
9002673c:	f1bc 0f00 	cmp.w	ip, #0
90026740:	d01a      	beq.n	90026778 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026742:	9908      	ldr	r1, [sp, #32]
90026744:	440b      	add	r3, r1
90026746:	0859      	lsrs	r1, r3, #1
90026748:	f013 0f01 	tst.w	r3, #1
9002674c:	f103 0301 	add.w	r3, r3, #1
90026750:	5c79      	ldrb	r1, [r7, r1]
90026752:	bf0c      	ite	eq
90026754:	f001 010f 	andeq.w	r1, r1, #15
90026758:	1109      	asrne	r1, r1, #4
9002675a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
9002675e:	b2c9      	uxtb	r1, r1
90026760:	910b      	str	r1, [sp, #44]	; 0x2c
90026762:	0859      	lsrs	r1, r3, #1
90026764:	07db      	lsls	r3, r3, #31
90026766:	5c79      	ldrb	r1, [r7, r1]
90026768:	bf54      	ite	pl
9002676a:	f001 010f 	andpl.w	r1, r1, #15
9002676e:	1109      	asrmi	r1, r1, #4
90026770:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026774:	b2c9      	uxtb	r1, r1
90026776:	9110      	str	r1, [sp, #64]	; 0x40
90026778:	b280      	uxth	r0, r0
9002677a:	fa1f fc8c 	uxth.w	ip, ip
9002677e:	fb00 f30c 	mul.w	r3, r0, ip
90026782:	0100      	lsls	r0, r0, #4
90026784:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90026788:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
9002678c:	1ac0      	subs	r0, r0, r3
9002678e:	fa1f fc8c 	uxth.w	ip, ip
90026792:	b280      	uxth	r0, r0
90026794:	eba1 010c 	sub.w	r1, r1, ip
90026798:	fa1f fa81 	uxth.w	sl, r1
9002679c:	990f      	ldr	r1, [sp, #60]	; 0x3c
9002679e:	4348      	muls	r0, r1
900267a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900267a2:	fb02 020a 	mla	r2, r2, sl, r0
900267a6:	fb0c 2c01 	mla	ip, ip, r1, r2
900267aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
900267ac:	fb03 c302 	mla	r3, r3, r2, ip
900267b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
900267b4:	2bff      	cmp	r3, #255	; 0xff
900267b6:	d12b      	bne.n	90026810 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
900267b8:	4b13      	ldr	r3, [pc, #76]	; (90026808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
900267ba:	681a      	ldr	r2, [r3, #0]
900267bc:	4b13      	ldr	r3, [pc, #76]	; (9002680c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
900267be:	0951      	lsrs	r1, r2, #5
900267c0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
900267c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900267c8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900267cc:	430b      	orrs	r3, r1
900267ce:	4313      	orrs	r3, r2
900267d0:	f8ae 3000 	strh.w	r3, [lr]
900267d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900267d6:	f10e 0e02 	add.w	lr, lr, #2
900267da:	f108 38ff 	add.w	r8, r8, #4294967295
900267de:	441c      	add	r4, r3
900267e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900267e2:	441e      	add	r6, r3
900267e4:	e6cc      	b.n	90026580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900267e6:	f1bc 0f00 	cmp.w	ip, #0
900267ea:	d0c5      	beq.n	90026778 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
900267ec:	9908      	ldr	r1, [sp, #32]
900267ee:	440b      	add	r3, r1
900267f0:	0859      	lsrs	r1, r3, #1
900267f2:	07db      	lsls	r3, r3, #31
900267f4:	5c79      	ldrb	r1, [r7, r1]
900267f6:	bf54      	ite	pl
900267f8:	f001 010f 	andpl.w	r1, r1, #15
900267fc:	1109      	asrmi	r1, r1, #4
900267fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026802:	b2c9      	uxtb	r1, r1
90026804:	910b      	str	r1, [sp, #44]	; 0x2c
90026806:	e7b7      	b.n	90026778 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026808:	240281a4 	.word	0x240281a4
9002680c:	fffff800 	.word	0xfffff800
90026810:	2b00      	cmp	r3, #0
90026812:	d0df      	beq.n	900267d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026814:	4a21      	ldr	r2, [pc, #132]	; (9002689c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90026816:	fa1f fa83 	uxth.w	sl, r3
9002681a:	f8be c000 	ldrh.w	ip, [lr]
9002681e:	43db      	mvns	r3, r3
90026820:	6810      	ldr	r0, [r2, #0]
90026822:	ea4f 212c 	mov.w	r1, ip, asr #8
90026826:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002682a:	b2db      	uxtb	r3, r3
9002682c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026830:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026834:	fb12 f20a 	smulbb	r2, r2, sl
90026838:	b2c0      	uxtb	r0, r0
9002683a:	fb1b fb0a 	smulbb	fp, fp, sl
9002683e:	fb01 2103 	mla	r1, r1, r3, r2
90026842:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026846:	fb10 f00a 	smulbb	r0, r0, sl
9002684a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002684e:	b289      	uxth	r1, r1
90026850:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026854:	fa5f fc8c 	uxtb.w	ip, ip
90026858:	fb02 b203 	mla	r2, r2, r3, fp
9002685c:	fb0c 0003 	mla	r0, ip, r3, r0
90026860:	1c4b      	adds	r3, r1, #1
90026862:	b292      	uxth	r2, r2
90026864:	b280      	uxth	r0, r0
90026866:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9002686a:	f100 0b01 	add.w	fp, r0, #1
9002686e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90026872:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90026876:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
9002687a:	ea4b 0101 	orr.w	r1, fp, r1
9002687e:	f102 0b01 	add.w	fp, r2, #1
90026882:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026886:	0952      	lsrs	r2, r2, #5
90026888:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002688c:	4311      	orrs	r1, r2
9002688e:	f8ae 1000 	strh.w	r1, [lr]
90026892:	e79f      	b.n	900267d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026894:	b013      	add	sp, #76	; 0x4c
90026896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002689a:	bf00      	nop
9002689c:	240281a4 	.word	0x240281a4

900268a0 <CRC_Lock>:
900268a0:	4a20      	ldr	r2, [pc, #128]	; (90026924 <CRC_Lock+0x84>)
900268a2:	b530      	push	{r4, r5, lr}
900268a4:	6813      	ldr	r3, [r2, #0]
900268a6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
900268aa:	f24c 2540 	movw	r5, #49728	; 0xc240
900268ae:	f023 0301 	bic.w	r3, r3, #1
900268b2:	6013      	str	r3, [r2, #0]
900268b4:	4b1c      	ldr	r3, [pc, #112]	; (90026928 <CRC_Lock+0x88>)
900268b6:	681a      	ldr	r2, [r3, #0]
900268b8:	4022      	ands	r2, r4
900268ba:	42aa      	cmp	r2, r5
900268bc:	d005      	beq.n	900268ca <CRC_Lock+0x2a>
900268be:	681b      	ldr	r3, [r3, #0]
900268c0:	f24c 2270 	movw	r2, #49776	; 0xc270
900268c4:	4023      	ands	r3, r4
900268c6:	4293      	cmp	r3, r2
900268c8:	d124      	bne.n	90026914 <CRC_Lock+0x74>
900268ca:	4b18      	ldr	r3, [pc, #96]	; (9002692c <CRC_Lock+0x8c>)
900268cc:	681b      	ldr	r3, [r3, #0]
900268ce:	bb0b      	cbnz	r3, 90026914 <CRC_Lock+0x74>
900268d0:	4b17      	ldr	r3, [pc, #92]	; (90026930 <CRC_Lock+0x90>)
900268d2:	681a      	ldr	r2, [r3, #0]
900268d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
900268d8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
900268dc:	d00d      	beq.n	900268fa <CRC_Lock+0x5a>
900268de:	681a      	ldr	r2, [r3, #0]
900268e0:	f240 4483 	movw	r4, #1155	; 0x483
900268e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
900268e8:	42a2      	cmp	r2, r4
900268ea:	d006      	beq.n	900268fa <CRC_Lock+0x5a>
900268ec:	681b      	ldr	r3, [r3, #0]
900268ee:	f240 4285 	movw	r2, #1157	; 0x485
900268f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
900268f6:	4293      	cmp	r3, r2
900268f8:	d10c      	bne.n	90026914 <CRC_Lock+0x74>
900268fa:	4b0e      	ldr	r3, [pc, #56]	; (90026934 <CRC_Lock+0x94>)
900268fc:	2201      	movs	r2, #1
900268fe:	601a      	str	r2, [r3, #0]
90026900:	681a      	ldr	r2, [r3, #0]
90026902:	2a00      	cmp	r2, #0
90026904:	d1fc      	bne.n	90026900 <CRC_Lock+0x60>
90026906:	4b0c      	ldr	r3, [pc, #48]	; (90026938 <CRC_Lock+0x98>)
90026908:	6018      	str	r0, [r3, #0]
9002690a:	6818      	ldr	r0, [r3, #0]
9002690c:	1a43      	subs	r3, r0, r1
9002690e:	4258      	negs	r0, r3
90026910:	4158      	adcs	r0, r3
90026912:	bd30      	pop	{r4, r5, pc}
90026914:	4b09      	ldr	r3, [pc, #36]	; (9002693c <CRC_Lock+0x9c>)
90026916:	2201      	movs	r2, #1
90026918:	601a      	str	r2, [r3, #0]
9002691a:	681a      	ldr	r2, [r3, #0]
9002691c:	2a00      	cmp	r2, #0
9002691e:	d1fc      	bne.n	9002691a <CRC_Lock+0x7a>
90026920:	4b07      	ldr	r3, [pc, #28]	; (90026940 <CRC_Lock+0xa0>)
90026922:	e7f1      	b.n	90026908 <CRC_Lock+0x68>
90026924:	e0002000 	.word	0xe0002000
90026928:	e000ed00 	.word	0xe000ed00
9002692c:	e0042000 	.word	0xe0042000
90026930:	5c001000 	.word	0x5c001000
90026934:	58024c08 	.word	0x58024c08
90026938:	58024c00 	.word	0x58024c00
9002693c:	40023008 	.word	0x40023008
90026940:	40023000 	.word	0x40023000

90026944 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90026944:	6101      	str	r1, [r0, #16]
90026946:	4770      	bx	lr

90026948 <_ZN8touchgfx8Gestures4tickEv>:
90026948:	7b83      	ldrb	r3, [r0, #14]
9002694a:	b14b      	cbz	r3, 90026960 <_ZN8touchgfx8Gestures4tickEv+0x18>
9002694c:	8903      	ldrh	r3, [r0, #8]
9002694e:	3301      	adds	r3, #1
90026950:	b29b      	uxth	r3, r3
90026952:	2b07      	cmp	r3, #7
90026954:	8103      	strh	r3, [r0, #8]
90026956:	bf81      	itttt	hi
90026958:	2300      	movhi	r3, #0
9002695a:	8143      	strhhi	r3, [r0, #10]
9002695c:	8183      	strhhi	r3, [r0, #12]
9002695e:	7383      	strbhi	r3, [r0, #14]
90026960:	4770      	bx	lr
	...

90026964 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90026964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90026968:	4698      	mov	r8, r3
9002696a:	8883      	ldrh	r3, [r0, #4]
9002696c:	4604      	mov	r4, r0
9002696e:	4617      	mov	r7, r2
90026970:	f8ad 3006 	strh.w	r3, [sp, #6]
90026974:	eba8 0303 	sub.w	r3, r8, r3
90026978:	4a19      	ldr	r2, [pc, #100]	; (900269e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
9002697a:	460e      	mov	r6, r1
9002697c:	b21b      	sxth	r3, r3
9002697e:	88c1      	ldrh	r1, [r0, #6]
90026980:	9200      	str	r2, [sp, #0]
90026982:	2000      	movs	r0, #0
90026984:	2b00      	cmp	r3, #0
90026986:	8aa2      	ldrh	r2, [r4, #20]
90026988:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
9002698c:	bfb8      	it	lt
9002698e:	425b      	neglt	r3, r3
90026990:	f88d 0004 	strb.w	r0, [sp, #4]
90026994:	f8ad 1008 	strh.w	r1, [sp, #8]
90026998:	b21b      	sxth	r3, r3
9002699a:	f8ad 800a 	strh.w	r8, [sp, #10]
9002699e:	f8ad 500c 	strh.w	r5, [sp, #12]
900269a2:	4293      	cmp	r3, r2
900269a4:	dc07      	bgt.n	900269b6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
900269a6:	1a69      	subs	r1, r5, r1
900269a8:	b209      	sxth	r1, r1
900269aa:	2900      	cmp	r1, #0
900269ac:	bfb8      	it	lt
900269ae:	4249      	neglt	r1, r1
900269b0:	b209      	sxth	r1, r1
900269b2:	428a      	cmp	r2, r1
900269b4:	da10      	bge.n	900269d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
900269b6:	6920      	ldr	r0, [r4, #16]
900269b8:	4669      	mov	r1, sp
900269ba:	eba8 0606 	sub.w	r6, r8, r6
900269be:	1bef      	subs	r7, r5, r7
900269c0:	6803      	ldr	r3, [r0, #0]
900269c2:	685b      	ldr	r3, [r3, #4]
900269c4:	4798      	blx	r3
900269c6:	2300      	movs	r3, #0
900269c8:	2001      	movs	r0, #1
900269ca:	8166      	strh	r6, [r4, #10]
900269cc:	8123      	strh	r3, [r4, #8]
900269ce:	81a7      	strh	r7, [r4, #12]
900269d0:	f8a4 8004 	strh.w	r8, [r4, #4]
900269d4:	80e5      	strh	r5, [r4, #6]
900269d6:	73a0      	strb	r0, [r4, #14]
900269d8:	b004      	add	sp, #16
900269da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900269de:	bf00      	nop
900269e0:	9002c054 	.word	0x9002c054

900269e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
900269e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900269e6:	461e      	mov	r6, r3
900269e8:	1e4b      	subs	r3, r1, #1
900269ea:	b085      	sub	sp, #20
900269ec:	4604      	mov	r4, r0
900269ee:	2b01      	cmp	r3, #1
900269f0:	460d      	mov	r5, r1
900269f2:	4617      	mov	r7, r2
900269f4:	d84b      	bhi.n	90026a8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
900269f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
900269fa:	1cd3      	adds	r3, r2, #3
900269fc:	b29b      	uxth	r3, r3
900269fe:	2b06      	cmp	r3, #6
90026a00:	d916      	bls.n	90026a30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90026a02:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90026aa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026a06:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026a0a:	f8cd c004 	str.w	ip, [sp, #4]
90026a0e:	f04f 0c00 	mov.w	ip, #0
90026a12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026a16:	6900      	ldr	r0, [r0, #16]
90026a18:	f8ad 100c 	strh.w	r1, [sp, #12]
90026a1c:	a901      	add	r1, sp, #4
90026a1e:	f88d c008 	strb.w	ip, [sp, #8]
90026a22:	f8ad 200a 	strh.w	r2, [sp, #10]
90026a26:	f8ad 300e 	strh.w	r3, [sp, #14]
90026a2a:	6803      	ldr	r3, [r0, #0]
90026a2c:	689b      	ldr	r3, [r3, #8]
90026a2e:	4798      	blx	r3
90026a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90026a34:	1cd3      	adds	r3, r2, #3
90026a36:	b29b      	uxth	r3, r3
90026a38:	2b06      	cmp	r3, #6
90026a3a:	d916      	bls.n	90026a6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026a3c:	f8df c064 	ldr.w	ip, [pc, #100]	; 90026aa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026a40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026a44:	f8cd c004 	str.w	ip, [sp, #4]
90026a48:	f04f 0c01 	mov.w	ip, #1
90026a4c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026a50:	6920      	ldr	r0, [r4, #16]
90026a52:	f8ad 100c 	strh.w	r1, [sp, #12]
90026a56:	a901      	add	r1, sp, #4
90026a58:	f88d c008 	strb.w	ip, [sp, #8]
90026a5c:	f8ad 200a 	strh.w	r2, [sp, #10]
90026a60:	f8ad 300e 	strh.w	r3, [sp, #14]
90026a64:	6803      	ldr	r3, [r0, #0]
90026a66:	689b      	ldr	r3, [r3, #8]
90026a68:	4798      	blx	r3
90026a6a:	4b0d      	ldr	r3, [pc, #52]	; (90026aa0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90026a6c:	a901      	add	r1, sp, #4
90026a6e:	6920      	ldr	r0, [r4, #16]
90026a70:	9301      	str	r3, [sp, #4]
90026a72:	2300      	movs	r3, #0
90026a74:	f88d 5008 	strb.w	r5, [sp, #8]
90026a78:	f8ad 700a 	strh.w	r7, [sp, #10]
90026a7c:	f8ad 600c 	strh.w	r6, [sp, #12]
90026a80:	f8ad 300e 	strh.w	r3, [sp, #14]
90026a84:	6803      	ldr	r3, [r0, #0]
90026a86:	681b      	ldr	r3, [r3, #0]
90026a88:	4798      	blx	r3
90026a8a:	b005      	add	sp, #20
90026a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90026a8e:	2900      	cmp	r1, #0
90026a90:	d1eb      	bne.n	90026a6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026a92:	80a2      	strh	r2, [r4, #4]
90026a94:	80c6      	strh	r6, [r0, #6]
90026a96:	60a1      	str	r1, [r4, #8]
90026a98:	81a1      	strh	r1, [r4, #12]
90026a9a:	73a1      	strb	r1, [r4, #14]
90026a9c:	e7e5      	b.n	90026a6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026a9e:	bf00      	nop
90026aa0:	9002c040 	.word	0x9002c040
90026aa4:	9002c068 	.word	0x9002c068

90026aa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
90026aa8:	10c9      	asrs	r1, r1, #3
90026aaa:	2900      	cmp	r1, #0
90026aac:	bfb8      	it	lt
90026aae:	4249      	neglt	r1, r1
90026ab0:	2801      	cmp	r0, #1
90026ab2:	d108      	bne.n	90026ac6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026ab4:	f3c1 0008 	ubfx	r0, r1, #0, #9
90026ab8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
90026abc:	4601      	mov	r1, r0
90026abe:	dd02      	ble.n	90026ac6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026ac0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
90026ac4:	4770      	bx	lr
90026ac6:	29ff      	cmp	r1, #255	; 0xff
90026ac8:	bfa8      	it	ge
90026aca:	21ff      	movge	r1, #255	; 0xff
90026acc:	4608      	mov	r0, r1
90026ace:	4770      	bx	lr

90026ad0 <_ZN8touchgfx10Rasterizer6lineToEii>:
90026ad0:	b410      	push	{r4}
90026ad2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90026ad6:	429c      	cmp	r4, r3
90026ad8:	d803      	bhi.n	90026ae2 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
90026ada:	f85d 4b04 	ldr.w	r4, [sp], #4
90026ade:	f7ef ba63 	b.w	90015fa8 <_ZN8touchgfx7Outline6lineToEii>
90026ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
90026ae6:	4770      	bx	lr

90026ae8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
90026ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026aec:	b08b      	sub	sp, #44	; 0x2c
90026aee:	4606      	mov	r6, r0
90026af0:	468a      	mov	sl, r1
90026af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
90026af6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90026afa:	9308      	str	r3, [sp, #32]
90026afc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90026b00:	9309      	str	r3, [sp, #36]	; 0x24
90026b02:	f7ef fbbc 	bl	9001627e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
90026b06:	68b5      	ldr	r5, [r6, #8]
90026b08:	4604      	mov	r4, r0
90026b0a:	2d00      	cmp	r5, #0
90026b0c:	d044      	beq.n	90026b98 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026b0e:	6873      	ldr	r3, [r6, #4]
90026b10:	42ab      	cmp	r3, r5
90026b12:	d33d      	bcc.n	90026b90 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
90026b14:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90026b18:	f04f 0800 	mov.w	r8, #0
90026b1c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
90026b20:	eb02 0b03 	add.w	fp, r2, r3
90026b24:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
90026b28:	fb02 1203 	mla	r2, r2, r3, r1
90026b2c:	9205      	str	r2, [sp, #20]
90026b2e:	1e6a      	subs	r2, r5, #1
90026b30:	9204      	str	r2, [sp, #16]
90026b32:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
90026b36:	f9b4 7000 	ldrsh.w	r7, [r4]
90026b3a:	454b      	cmp	r3, r9
90026b3c:	463a      	mov	r2, r7
90026b3e:	d008      	beq.n	90026b52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
90026b40:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
90026b44:	eb03 0b09 	add.w	fp, r3, r9
90026b48:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
90026b4c:	fb03 1309 	mla	r3, r3, r9, r1
90026b50:	9305      	str	r3, [sp, #20]
90026b52:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90026b56:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90026b5a:	4498      	add	r8, r3
90026b5c:	9b04      	ldr	r3, [sp, #16]
90026b5e:	3b01      	subs	r3, #1
90026b60:	9304      	str	r3, [sp, #16]
90026b62:	9b04      	ldr	r3, [sp, #16]
90026b64:	3301      	adds	r3, #1
90026b66:	d015      	beq.n	90026b94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
90026b68:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
90026b6c:	42bb      	cmp	r3, r7
90026b6e:	d117      	bne.n	90026ba0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
90026b70:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
90026b74:	9b04      	ldr	r3, [sp, #16]
90026b76:	4548      	cmp	r0, r9
90026b78:	f103 33ff 	add.w	r3, r3, #4294967295
90026b7c:	d17d      	bne.n	90026c7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
90026b7e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
90026b82:	4401      	add	r1, r0
90026b84:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90026b88:	4480      	add	r8, r0
90026b8a:	e7e9      	b.n	90026b60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
90026b8c:	461f      	mov	r7, r3
90026b8e:	e042      	b.n	90026c16 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
90026b90:	2000      	movs	r0, #0
90026b92:	e002      	b.n	90026b9a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
90026b94:	2900      	cmp	r1, #0
90026b96:	d16d      	bne.n	90026c74 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
90026b98:	2001      	movs	r0, #1
90026b9a:	b00b      	add	sp, #44	; 0x2c
90026b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026ba0:	b379      	cbz	r1, 90026c02 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
90026ba2:	2f00      	cmp	r7, #0
90026ba4:	db29      	blt.n	90026bfa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026ba6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
90026baa:	42bb      	cmp	r3, r7
90026bac:	dd25      	ble.n	90026bfa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026bae:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
90026bb2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
90026bb6:	f7ff ff77 	bl	90026aa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
90026bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026bbc:	fb10 f003 	smulbb	r0, r0, r3
90026bc0:	b280      	uxth	r0, r0
90026bc2:	1c41      	adds	r1, r0, #1
90026bc4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90026bc8:	1209      	asrs	r1, r1, #8
90026bca:	f011 0fff 	tst.w	r1, #255	; 0xff
90026bce:	d014      	beq.n	90026bfa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026bd0:	b2c9      	uxtb	r1, r1
90026bd2:	9808      	ldr	r0, [sp, #32]
90026bd4:	b2ba      	uxth	r2, r7
90026bd6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90026bd8:	9102      	str	r1, [sp, #8]
90026bda:	2101      	movs	r1, #1
90026bdc:	4413      	add	r3, r2
90026bde:	4402      	add	r2, r0
90026be0:	9101      	str	r1, [sp, #4]
90026be2:	fa0f f18b 	sxth.w	r1, fp
90026be6:	f8da 0000 	ldr.w	r0, [sl]
90026bea:	b21b      	sxth	r3, r3
90026bec:	9100      	str	r1, [sp, #0]
90026bee:	b212      	sxth	r2, r2
90026bf0:	6941      	ldr	r1, [r0, #20]
90026bf2:	4650      	mov	r0, sl
90026bf4:	460d      	mov	r5, r1
90026bf6:	9905      	ldr	r1, [sp, #20]
90026bf8:	47a8      	blx	r5
90026bfa:	9b04      	ldr	r3, [sp, #16]
90026bfc:	1c7a      	adds	r2, r7, #1
90026bfe:	3301      	adds	r3, #1
90026c00:	d0ca      	beq.n	90026b98 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026c02:	f9b4 7000 	ldrsh.w	r7, [r4]
90026c06:	1abb      	subs	r3, r7, r2
90026c08:	2b00      	cmp	r3, #0
90026c0a:	dd31      	ble.n	90026c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026c0c:	2a00      	cmp	r2, #0
90026c0e:	dabd      	bge.n	90026b8c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
90026c10:	2f00      	cmp	r7, #0
90026c12:	dd2d      	ble.n	90026c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026c14:	2200      	movs	r2, #0
90026c16:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
90026c1a:	19d1      	adds	r1, r2, r7
90026c1c:	4299      	cmp	r1, r3
90026c1e:	db02      	blt.n	90026c26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
90026c20:	1a9f      	subs	r7, r3, r2
90026c22:	2f00      	cmp	r7, #0
90026c24:	dd24      	ble.n	90026c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026c26:	ea4f 1188 	mov.w	r1, r8, lsl #6
90026c2a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
90026c2e:	f7ff ff3b 	bl	90026aa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
90026c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026c34:	fb10 f003 	smulbb	r0, r0, r3
90026c38:	b280      	uxth	r0, r0
90026c3a:	1c41      	adds	r1, r0, #1
90026c3c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90026c40:	1209      	asrs	r1, r1, #8
90026c42:	f011 0fff 	tst.w	r1, #255	; 0xff
90026c46:	d013      	beq.n	90026c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026c48:	b292      	uxth	r2, r2
90026c4a:	9808      	ldr	r0, [sp, #32]
90026c4c:	b2c9      	uxtb	r1, r1
90026c4e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90026c50:	b23f      	sxth	r7, r7
90026c52:	4413      	add	r3, r2
90026c54:	9102      	str	r1, [sp, #8]
90026c56:	4402      	add	r2, r0
90026c58:	fa0f f18b 	sxth.w	r1, fp
90026c5c:	f8da 0000 	ldr.w	r0, [sl]
90026c60:	b21b      	sxth	r3, r3
90026c62:	9100      	str	r1, [sp, #0]
90026c64:	b212      	sxth	r2, r2
90026c66:	9701      	str	r7, [sp, #4]
90026c68:	9905      	ldr	r1, [sp, #20]
90026c6a:	6947      	ldr	r7, [r0, #20]
90026c6c:	4650      	mov	r0, sl
90026c6e:	47b8      	blx	r7
90026c70:	464b      	mov	r3, r9
90026c72:	e75e      	b.n	90026b32 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
90026c74:	2f00      	cmp	r7, #0
90026c76:	da96      	bge.n	90026ba6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
90026c78:	e78e      	b.n	90026b98 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026c7a:	2900      	cmp	r1, #0
90026c7c:	d0f8      	beq.n	90026c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026c7e:	e790      	b.n	90026ba2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

90026c80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
90026c80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90026c84:	4b4a      	ldr	r3, [pc, #296]	; (90026db0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
90026c86:	2500      	movs	r5, #0
90026c88:	f100 0620 	add.w	r6, r0, #32
90026c8c:	4604      	mov	r4, r0
90026c8e:	4690      	mov	r8, r2
90026c90:	f100 0718 	add.w	r7, r0, #24
90026c94:	e9c0 3100 	strd	r3, r1, [r0]
90026c98:	e9c0 5502 	strd	r5, r5, [r0, #8]
90026c9c:	e9c0 5504 	strd	r5, r5, [r0, #16]
90026ca0:	e9c0 5506 	strd	r5, r5, [r0, #24]
90026ca4:	4630      	mov	r0, r6
90026ca6:	f7ee fcc5 	bl	90015634 <_ZN8touchgfx7OutlineC1Ev>
90026caa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
90026cae:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
90026cb2:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
90026cb6:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
90026cba:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
90026cbe:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
90026cc2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
90026cc6:	f8d4 c004 	ldr.w	ip, [r4, #4]
90026cca:	9500      	str	r5, [sp, #0]
90026ccc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
90026cd0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
90026cd4:	f9b8 2000 	ldrsh.w	r2, [r8]
90026cd8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
90026cdc:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
90026ce0:	4410      	add	r0, r2
90026ce2:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
90026ce6:	b280      	uxth	r0, r0
90026ce8:	fa0f fa80 	sxth.w	sl, r0
90026cec:	45aa      	cmp	sl, r5
90026cee:	dd5c      	ble.n	90026daa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026cf0:	4591      	cmp	r9, r2
90026cf2:	dd5a      	ble.n	90026daa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026cf4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
90026cf8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
90026cfc:	440b      	add	r3, r1
90026cfe:	b29b      	uxth	r3, r3
90026d00:	b21d      	sxth	r5, r3
90026d02:	2d00      	cmp	r5, #0
90026d04:	dd51      	ble.n	90026daa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026d06:	458e      	cmp	lr, r1
90026d08:	dd4f      	ble.n	90026daa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026d0a:	45d1      	cmp	r9, sl
90026d0c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
90026d10:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
90026d14:	bfb8      	it	lt
90026d16:	fa1f f089 	uxthlt.w	r0, r9
90026d1a:	45ae      	cmp	lr, r5
90026d1c:	f8ad 2000 	strh.w	r2, [sp]
90026d20:	bfb8      	it	lt
90026d22:	fa1f f38e 	uxthlt.w	r3, lr
90026d26:	1a80      	subs	r0, r0, r2
90026d28:	f8ad 1002 	strh.w	r1, [sp, #2]
90026d2c:	1a5b      	subs	r3, r3, r1
90026d2e:	f8ad 0004 	strh.w	r0, [sp, #4]
90026d32:	f8ad 3006 	strh.w	r3, [sp, #6]
90026d36:	466d      	mov	r5, sp
90026d38:	e895 0003 	ldmia.w	r5, {r0, r1}
90026d3c:	e887 0003 	stmia.w	r7, {r0, r1}
90026d40:	f8dc 3000 	ldr.w	r3, [ip]
90026d44:	4660      	mov	r0, ip
90026d46:	4639      	mov	r1, r7
90026d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026d4a:	4798      	blx	r3
90026d4c:	6861      	ldr	r1, [r4, #4]
90026d4e:	4628      	mov	r0, r5
90026d50:	3104      	adds	r1, #4
90026d52:	f7f0 fe3f 	bl	900179d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90026d56:	4638      	mov	r0, r7
90026d58:	f7f0 fe14 	bl	90017984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90026d5c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90026d60:	f8bd 2000 	ldrh.w	r2, [sp]
90026d64:	4630      	mov	r0, r6
90026d66:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
90026d6a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
90026d6e:	f7ee fc45 	bl	900155fc <_ZN8touchgfx7Outline5resetEv>
90026d72:	f9bd 3000 	ldrsh.w	r3, [sp]
90026d76:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
90026d7a:	4620      	mov	r0, r4
90026d7c:	015b      	lsls	r3, r3, #5
90026d7e:	60a3      	str	r3, [r4, #8]
90026d80:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90026d84:	015b      	lsls	r3, r3, #5
90026d86:	60e3      	str	r3, [r4, #12]
90026d88:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90026d8c:	015b      	lsls	r3, r3, #5
90026d8e:	6123      	str	r3, [r4, #16]
90026d90:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90026d94:	015b      	lsls	r3, r3, #5
90026d96:	6163      	str	r3, [r4, #20]
90026d98:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
90026d9c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
90026da0:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
90026da4:	b002      	add	sp, #8
90026da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90026daa:	2300      	movs	r3, #0
90026dac:	9301      	str	r3, [sp, #4]
90026dae:	e7c2      	b.n	90026d36 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
90026db0:	9002c338 	.word	0x9002c338

90026db4 <_ZN8touchgfx6Canvas5closeEv>:
90026db4:	b538      	push	{r3, r4, r5, lr}
90026db6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
90026dba:	4604      	mov	r4, r0
90026dbc:	b193      	cbz	r3, 90026de4 <_ZN8touchgfx6Canvas5closeEv+0x30>
90026dbe:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
90026dc2:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
90026dc6:	4213      	tst	r3, r2
90026dc8:	d10c      	bne.n	90026de4 <_ZN8touchgfx6Canvas5closeEv+0x30>
90026dca:	f100 0520 	add.w	r5, r0, #32
90026dce:	b123      	cbz	r3, 90026dda <_ZN8touchgfx6Canvas5closeEv+0x26>
90026dd0:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
90026dd4:	4628      	mov	r0, r5
90026dd6:	f7ff fe7b 	bl	90026ad0 <_ZN8touchgfx10Rasterizer6lineToEii>
90026dda:	4628      	mov	r0, r5
90026ddc:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
90026de0:	f7ff fe76 	bl	90026ad0 <_ZN8touchgfx10Rasterizer6lineToEii>
90026de4:	2300      	movs	r3, #0
90026de6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90026dea:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
90026dee:	4298      	cmp	r0, r3
90026df0:	bf34      	ite	cc
90026df2:	2000      	movcc	r0, #0
90026df4:	2001      	movcs	r0, #1
90026df6:	bd38      	pop	{r3, r4, r5, pc}

90026df8 <_ZN8touchgfx6Canvas6renderEh>:
90026df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90026dfc:	4604      	mov	r4, r0
90026dfe:	6840      	ldr	r0, [r0, #4]
90026e00:	460d      	mov	r5, r1
90026e02:	6803      	ldr	r3, [r0, #0]
90026e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90026e06:	4798      	blx	r3
90026e08:	fb10 f105 	smulbb	r1, r0, r5
90026e0c:	b289      	uxth	r1, r1
90026e0e:	1c4d      	adds	r5, r1, #1
90026e10:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90026e14:	122d      	asrs	r5, r5, #8
90026e16:	f000 8097 	beq.w	90026f48 <_ZN8touchgfx6Canvas6renderEh+0x150>
90026e1a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
90026e1e:	2b00      	cmp	r3, #0
90026e20:	f000 8092 	beq.w	90026f48 <_ZN8touchgfx6Canvas6renderEh+0x150>
90026e24:	4620      	mov	r0, r4
90026e26:	f7ff ffc5 	bl	90026db4 <_ZN8touchgfx6Canvas5closeEv>
90026e2a:	4607      	mov	r7, r0
90026e2c:	2800      	cmp	r0, #0
90026e2e:	d043      	beq.n	90026eb8 <_ZN8touchgfx6Canvas6renderEh+0xc0>
90026e30:	6863      	ldr	r3, [r4, #4]
90026e32:	4e46      	ldr	r6, [pc, #280]	; (90026f4c <_ZN8touchgfx6Canvas6renderEh+0x154>)
90026e34:	6a98      	ldr	r0, [r3, #40]	; 0x28
90026e36:	6837      	ldr	r7, [r6, #0]
90026e38:	6803      	ldr	r3, [r0, #0]
90026e3a:	689b      	ldr	r3, [r3, #8]
90026e3c:	4798      	blx	r3
90026e3e:	4601      	mov	r1, r0
90026e40:	4638      	mov	r0, r7
90026e42:	f7ec fc51 	bl	900136e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
90026e46:	4607      	mov	r7, r0
90026e48:	f7ec f812 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90026e4c:	6803      	ldr	r3, [r0, #0]
90026e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90026e50:	4798      	blx	r3
90026e52:	4680      	mov	r8, r0
90026e54:	f7ec f80c 	bl	90012e70 <_ZN8touchgfx3HAL3lcdEv>
90026e58:	6803      	ldr	r3, [r0, #0]
90026e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026e5c:	4798      	blx	r3
90026e5e:	280b      	cmp	r0, #11
90026e60:	d857      	bhi.n	90026f12 <_ZN8touchgfx6Canvas6renderEh+0x11a>
90026e62:	e8df f000 	tbb	[pc, r0]
90026e66:	584d      	.short	0x584d
90026e68:	2d560668 	.word	0x2d560668
90026e6c:	6161613d 	.word	0x6161613d
90026e70:	6161      	.short	0x6161
90026e72:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026e76:	2208      	movs	r2, #8
90026e78:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026e7c:	fb91 f2f2 	sdiv	r2, r1, r2
90026e80:	fb08 2303 	mla	r3, r8, r3, r2
90026e84:	441f      	add	r7, r3
90026e86:	424b      	negs	r3, r1
90026e88:	f001 0107 	and.w	r1, r1, #7
90026e8c:	f003 0307 	and.w	r3, r3, #7
90026e90:	bf58      	it	pl
90026e92:	4259      	negpl	r1, r3
90026e94:	b2c9      	uxtb	r1, r1
90026e96:	6860      	ldr	r0, [r4, #4]
90026e98:	b2ed      	uxtb	r5, r5
90026e9a:	fa0f f388 	sxth.w	r3, r8
90026e9e:	463a      	mov	r2, r7
90026ea0:	e9cd 1500 	strd	r1, r5, [sp]
90026ea4:	6a81      	ldr	r1, [r0, #40]	; 0x28
90026ea6:	f104 0020 	add.w	r0, r4, #32
90026eaa:	f7ff fe1d 	bl	90026ae8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
90026eae:	4607      	mov	r7, r0
90026eb0:	6830      	ldr	r0, [r6, #0]
90026eb2:	6803      	ldr	r3, [r0, #0]
90026eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026eb6:	4798      	blx	r3
90026eb8:	4638      	mov	r0, r7
90026eba:	b002      	add	sp, #8
90026ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026ec0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026ec4:	2204      	movs	r2, #4
90026ec6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026eca:	fb91 f2f2 	sdiv	r2, r1, r2
90026ece:	fb08 2303 	mla	r3, r8, r3, r2
90026ed2:	441f      	add	r7, r3
90026ed4:	424b      	negs	r3, r1
90026ed6:	f001 0103 	and.w	r1, r1, #3
90026eda:	f003 0303 	and.w	r3, r3, #3
90026ede:	e7d7      	b.n	90026e90 <_ZN8touchgfx6Canvas6renderEh+0x98>
90026ee0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026ee4:	2202      	movs	r2, #2
90026ee6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026eea:	2900      	cmp	r1, #0
90026eec:	fb91 f2f2 	sdiv	r2, r1, r2
90026ef0:	f001 0101 	and.w	r1, r1, #1
90026ef4:	fb08 2303 	mla	r3, r8, r3, r2
90026ef8:	bfb8      	it	lt
90026efa:	4249      	neglt	r1, r1
90026efc:	441f      	add	r7, r3
90026efe:	e7c9      	b.n	90026e94 <_ZN8touchgfx6Canvas6renderEh+0x9c>
90026f00:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026f04:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026f08:	fb08 f303 	mul.w	r3, r8, r3
90026f0c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90026f10:	441f      	add	r7, r3
90026f12:	2100      	movs	r1, #0
90026f14:	e7bf      	b.n	90026e96 <_ZN8touchgfx6Canvas6renderEh+0x9e>
90026f16:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026f1a:	2103      	movs	r1, #3
90026f1c:	fb08 f203 	mul.w	r2, r8, r3
90026f20:	8b23      	ldrh	r3, [r4, #24]
90026f22:	fb13 2301 	smlabb	r3, r3, r1, r2
90026f26:	e7f3      	b.n	90026f10 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026f28:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026f2c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026f30:	fb08 2303 	mla	r3, r8, r3, r2
90026f34:	e7ec      	b.n	90026f10 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026f36:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026f3a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026f3e:	fb08 f303 	mul.w	r3, r8, r3
90026f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
90026f46:	e7e3      	b.n	90026f10 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026f48:	2701      	movs	r7, #1
90026f4a:	e7b5      	b.n	90026eb8 <_ZN8touchgfx6Canvas6renderEh+0xc0>
90026f4c:	24028194 	.word	0x24028194

90026f50 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
90026f50:	4b07      	ldr	r3, [pc, #28]	; (90026f70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
90026f52:	b510      	push	{r4, lr}
90026f54:	781b      	ldrb	r3, [r3, #0]
90026f56:	2b01      	cmp	r3, #1
90026f58:	d108      	bne.n	90026f6c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
90026f5a:	6843      	ldr	r3, [r0, #4]
90026f5c:	6814      	ldr	r4, [r2, #0]
90026f5e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90026f62:	680b      	ldr	r3, [r1, #0]
90026f64:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
90026f68:	6013      	str	r3, [r2, #0]
90026f6a:	600c      	str	r4, [r1, #0]
90026f6c:	bd10      	pop	{r4, pc}
90026f6e:	bf00      	nop
90026f70:	2402818c 	.word	0x2402818c

90026f74 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
90026f74:	b513      	push	{r0, r1, r4, lr}
90026f76:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
90026f7a:	4604      	mov	r4, r0
90026f7c:	e9cd 2100 	strd	r2, r1, [sp]
90026f80:	b9a3      	cbnz	r3, 90026fac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
90026f82:	466a      	mov	r2, sp
90026f84:	a901      	add	r1, sp, #4
90026f86:	4620      	mov	r0, r4
90026f88:	f7ff ffe2 	bl	90026f50 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
90026f8c:	68a3      	ldr	r3, [r4, #8]
90026f8e:	9901      	ldr	r1, [sp, #4]
90026f90:	9a00      	ldr	r2, [sp, #0]
90026f92:	1ac9      	subs	r1, r1, r3
90026f94:	68e3      	ldr	r3, [r4, #12]
90026f96:	1ad2      	subs	r2, r2, r3
90026f98:	9101      	str	r1, [sp, #4]
90026f9a:	2a00      	cmp	r2, #0
90026f9c:	9200      	str	r2, [sp, #0]
90026f9e:	da0b      	bge.n	90026fb8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
90026fa0:	2301      	movs	r3, #1
90026fa2:	2900      	cmp	r1, #0
90026fa4:	da0e      	bge.n	90026fc4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
90026fa6:	f043 0304 	orr.w	r3, r3, #4
90026faa:	e013      	b.n	90026fd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
90026fac:	f7ff ff02 	bl	90026db4 <_ZN8touchgfx6Canvas5closeEv>
90026fb0:	2800      	cmp	r0, #0
90026fb2:	d1e6      	bne.n	90026f82 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
90026fb4:	b002      	add	sp, #8
90026fb6:	bd10      	pop	{r4, pc}
90026fb8:	6963      	ldr	r3, [r4, #20]
90026fba:	429a      	cmp	r2, r3
90026fbc:	bfac      	ite	ge
90026fbe:	2302      	movge	r3, #2
90026fc0:	2300      	movlt	r3, #0
90026fc2:	e7ee      	b.n	90026fa2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
90026fc4:	6920      	ldr	r0, [r4, #16]
90026fc6:	4281      	cmp	r1, r0
90026fc8:	bfac      	ite	ge
90026fca:	2008      	movge	r0, #8
90026fcc:	2000      	movlt	r0, #0
90026fce:	4318      	orrs	r0, r3
90026fd0:	b2c3      	uxtb	r3, r0
90026fd2:	b158      	cbz	r0, 90026fec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
90026fd4:	2200      	movs	r2, #0
90026fd6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
90026fda:	9901      	ldr	r1, [sp, #4]
90026fdc:	9a00      	ldr	r2, [sp, #0]
90026fde:	66a1      	str	r1, [r4, #104]	; 0x68
90026fe0:	66e2      	str	r2, [r4, #108]	; 0x6c
90026fe2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
90026fe6:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
90026fea:	e7e3      	b.n	90026fb4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
90026fec:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90026ff0:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90026ff4:	4298      	cmp	r0, r3
90026ff6:	d803      	bhi.n	90027000 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
90026ff8:	f104 0020 	add.w	r0, r4, #32
90026ffc:	f7ee ffee 	bl	90015fdc <_ZN8touchgfx7Outline6moveToEii>
90027000:	2301      	movs	r3, #1
90027002:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90027006:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9002700a:	2300      	movs	r3, #0
9002700c:	e7e5      	b.n	90026fda <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

9002700e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
9002700e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90027010:	ab02      	add	r3, sp, #8
90027012:	4604      	mov	r4, r0
90027014:	9101      	str	r1, [sp, #4]
90027016:	a901      	add	r1, sp, #4
90027018:	f843 2d08 	str.w	r2, [r3, #-8]!
9002701c:	461a      	mov	r2, r3
9002701e:	f7ff ff97 	bl	90026f50 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
90027022:	68a3      	ldr	r3, [r4, #8]
90027024:	9901      	ldr	r1, [sp, #4]
90027026:	9a00      	ldr	r2, [sp, #0]
90027028:	1ac9      	subs	r1, r1, r3
9002702a:	68e3      	ldr	r3, [r4, #12]
9002702c:	1ad2      	subs	r2, r2, r3
9002702e:	9101      	str	r1, [sp, #4]
90027030:	2a00      	cmp	r2, #0
90027032:	9200      	str	r2, [sp, #0]
90027034:	db1c      	blt.n	90027070 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
90027036:	6963      	ldr	r3, [r4, #20]
90027038:	429a      	cmp	r2, r3
9002703a:	bfac      	ite	ge
9002703c:	2002      	movge	r0, #2
9002703e:	2000      	movlt	r0, #0
90027040:	2900      	cmp	r1, #0
90027042:	db17      	blt.n	90027074 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
90027044:	6923      	ldr	r3, [r4, #16]
90027046:	4299      	cmp	r1, r3
90027048:	bfac      	ite	ge
9002704a:	2308      	movge	r3, #8
9002704c:	2300      	movlt	r3, #0
9002704e:	4303      	orrs	r3, r0
90027050:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
90027054:	b2dd      	uxtb	r5, r3
90027056:	b978      	cbnz	r0, 90027078 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
90027058:	f104 0020 	add.w	r0, r4, #32
9002705c:	f7ff fd38 	bl	90026ad0 <_ZN8touchgfx10Rasterizer6lineToEii>
90027060:	9b01      	ldr	r3, [sp, #4]
90027062:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
90027066:	65e3      	str	r3, [r4, #92]	; 0x5c
90027068:	9b00      	ldr	r3, [sp, #0]
9002706a:	6623      	str	r3, [r4, #96]	; 0x60
9002706c:	b002      	add	sp, #8
9002706e:	bd70      	pop	{r4, r5, r6, pc}
90027070:	2001      	movs	r0, #1
90027072:	e7e5      	b.n	90027040 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
90027074:	2304      	movs	r3, #4
90027076:	e7ea      	b.n	9002704e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
90027078:	b113      	cbz	r3, 90027080 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
9002707a:	ea10 0305 	ands.w	r3, r0, r5
9002707e:	d11c      	bne.n	900270ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
90027080:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
90027084:	f104 0620 	add.w	r6, r4, #32
90027088:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
9002708c:	b98b      	cbnz	r3, 900270b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
9002708e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90027092:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90027096:	4298      	cmp	r0, r3
90027098:	d802      	bhi.n	900270a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
9002709a:	4630      	mov	r0, r6
9002709c:	f7ee ff9e 	bl	90015fdc <_ZN8touchgfx7Outline6moveToEii>
900270a0:	2301      	movs	r3, #1
900270a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
900270a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900270aa:	4630      	mov	r0, r6
900270ac:	e9dd 2100 	ldrd	r2, r1, [sp]
900270b0:	e7d4      	b.n	9002705c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
900270b2:	4630      	mov	r0, r6
900270b4:	f7ff fd0c 	bl	90026ad0 <_ZN8touchgfx10Rasterizer6lineToEii>
900270b8:	e7f7      	b.n	900270aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
900270ba:	461d      	mov	r5, r3
900270bc:	e7d0      	b.n	90027060 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

900270c0 <_ZN8touchgfx6CanvasD1Ev>:
900270c0:	4b04      	ldr	r3, [pc, #16]	; (900270d4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
900270c2:	b510      	push	{r4, lr}
900270c4:	4604      	mov	r4, r0
900270c6:	f840 3b20 	str.w	r3, [r0], #32
900270ca:	f7ee fa8f 	bl	900155ec <_ZN8touchgfx7OutlineD1Ev>
900270ce:	4620      	mov	r0, r4
900270d0:	bd10      	pop	{r4, pc}
900270d2:	bf00      	nop
900270d4:	9002c338 	.word	0x9002c338

900270d8 <_ZN8touchgfx6CanvasD0Ev>:
900270d8:	b510      	push	{r4, lr}
900270da:	4604      	mov	r4, r0
900270dc:	f7ff fff0 	bl	900270c0 <_ZN8touchgfx6CanvasD1Ev>
900270e0:	2170      	movs	r1, #112	; 0x70
900270e2:	4620      	mov	r0, r4
900270e4:	f000 f807 	bl	900270f6 <_ZdlPvj>
900270e8:	4620      	mov	r0, r4
900270ea:	bd10      	pop	{r4, pc}

900270ec <__aeabi_atexit>:
900270ec:	460b      	mov	r3, r1
900270ee:	4601      	mov	r1, r0
900270f0:	4618      	mov	r0, r3
900270f2:	f000 b90f 	b.w	90027314 <__cxa_atexit>

900270f6 <_ZdlPvj>:
900270f6:	f000 b812 	b.w	9002711e <_ZdlPv>

900270fa <__cxa_guard_acquire>:
900270fa:	6803      	ldr	r3, [r0, #0]
900270fc:	07db      	lsls	r3, r3, #31
900270fe:	d406      	bmi.n	9002710e <__cxa_guard_acquire+0x14>
90027100:	7843      	ldrb	r3, [r0, #1]
90027102:	b103      	cbz	r3, 90027106 <__cxa_guard_acquire+0xc>
90027104:	deff      	udf	#255	; 0xff
90027106:	2301      	movs	r3, #1
90027108:	7043      	strb	r3, [r0, #1]
9002710a:	4618      	mov	r0, r3
9002710c:	4770      	bx	lr
9002710e:	2000      	movs	r0, #0
90027110:	4770      	bx	lr

90027112 <__cxa_guard_release>:
90027112:	2301      	movs	r3, #1
90027114:	6003      	str	r3, [r0, #0]
90027116:	4770      	bx	lr

90027118 <__cxa_pure_virtual>:
90027118:	b508      	push	{r3, lr}
9002711a:	f000 f80f 	bl	9002713c <_ZSt9terminatev>

9002711e <_ZdlPv>:
9002711e:	f000 b845 	b.w	900271ac <free>

90027122 <_ZN10__cxxabiv111__terminateEPFvvE>:
90027122:	b508      	push	{r3, lr}
90027124:	4780      	blx	r0
90027126:	f000 f80e 	bl	90027146 <abort>
	...

9002712c <_ZSt13get_terminatev>:
9002712c:	4b02      	ldr	r3, [pc, #8]	; (90027138 <_ZSt13get_terminatev+0xc>)
9002712e:	6818      	ldr	r0, [r3, #0]
90027130:	f3bf 8f5b 	dmb	ish
90027134:	4770      	bx	lr
90027136:	bf00      	nop
90027138:	240000dc 	.word	0x240000dc

9002713c <_ZSt9terminatev>:
9002713c:	b508      	push	{r3, lr}
9002713e:	f7ff fff5 	bl	9002712c <_ZSt13get_terminatev>
90027142:	f7ff ffee 	bl	90027122 <_ZN10__cxxabiv111__terminateEPFvvE>

90027146 <abort>:
90027146:	b508      	push	{r3, lr}
90027148:	2006      	movs	r0, #6
9002714a:	f000 faf9 	bl	90027740 <raise>
9002714e:	2001      	movs	r0, #1
90027150:	f7dd fe5e 	bl	90004e10 <_exit>

90027154 <__assert_func>:
90027154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90027156:	4614      	mov	r4, r2
90027158:	461a      	mov	r2, r3
9002715a:	4b09      	ldr	r3, [pc, #36]	; (90027180 <__assert_func+0x2c>)
9002715c:	681b      	ldr	r3, [r3, #0]
9002715e:	4605      	mov	r5, r0
90027160:	68d8      	ldr	r0, [r3, #12]
90027162:	b14c      	cbz	r4, 90027178 <__assert_func+0x24>
90027164:	4b07      	ldr	r3, [pc, #28]	; (90027184 <__assert_func+0x30>)
90027166:	9100      	str	r1, [sp, #0]
90027168:	e9cd 3401 	strd	r3, r4, [sp, #4]
9002716c:	4906      	ldr	r1, [pc, #24]	; (90027188 <__assert_func+0x34>)
9002716e:	462b      	mov	r3, r5
90027170:	f000 f982 	bl	90027478 <fiprintf>
90027174:	f7ff ffe7 	bl	90027146 <abort>
90027178:	4b04      	ldr	r3, [pc, #16]	; (9002718c <__assert_func+0x38>)
9002717a:	461c      	mov	r4, r3
9002717c:	e7f3      	b.n	90027166 <__assert_func+0x12>
9002717e:	bf00      	nop
90027180:	24000138 	.word	0x24000138
90027184:	9002c344 	.word	0x9002c344
90027188:	9002c351 	.word	0x9002c351
9002718c:	9002c37f 	.word	0x9002c37f

90027190 <atexit>:
90027190:	2300      	movs	r3, #0
90027192:	4601      	mov	r1, r0
90027194:	461a      	mov	r2, r3
90027196:	4618      	mov	r0, r3
90027198:	f000 bb80 	b.w	9002789c <__register_exitproc>

9002719c <malloc>:
9002719c:	4b02      	ldr	r3, [pc, #8]	; (900271a8 <malloc+0xc>)
9002719e:	4601      	mov	r1, r0
900271a0:	6818      	ldr	r0, [r3, #0]
900271a2:	f000 b82b 	b.w	900271fc <_malloc_r>
900271a6:	bf00      	nop
900271a8:	24000138 	.word	0x24000138

900271ac <free>:
900271ac:	4b02      	ldr	r3, [pc, #8]	; (900271b8 <free+0xc>)
900271ae:	4601      	mov	r1, r0
900271b0:	6818      	ldr	r0, [r3, #0]
900271b2:	f000 bbd1 	b.w	90027958 <_free_r>
900271b6:	bf00      	nop
900271b8:	24000138 	.word	0x24000138

900271bc <sbrk_aligned>:
900271bc:	b570      	push	{r4, r5, r6, lr}
900271be:	4e0e      	ldr	r6, [pc, #56]	; (900271f8 <sbrk_aligned+0x3c>)
900271c0:	460c      	mov	r4, r1
900271c2:	6831      	ldr	r1, [r6, #0]
900271c4:	4605      	mov	r5, r0
900271c6:	b911      	cbnz	r1, 900271ce <sbrk_aligned+0x12>
900271c8:	f000 fb0a 	bl	900277e0 <_sbrk_r>
900271cc:	6030      	str	r0, [r6, #0]
900271ce:	4621      	mov	r1, r4
900271d0:	4628      	mov	r0, r5
900271d2:	f000 fb05 	bl	900277e0 <_sbrk_r>
900271d6:	1c43      	adds	r3, r0, #1
900271d8:	d00a      	beq.n	900271f0 <sbrk_aligned+0x34>
900271da:	1cc4      	adds	r4, r0, #3
900271dc:	f024 0403 	bic.w	r4, r4, #3
900271e0:	42a0      	cmp	r0, r4
900271e2:	d007      	beq.n	900271f4 <sbrk_aligned+0x38>
900271e4:	1a21      	subs	r1, r4, r0
900271e6:	4628      	mov	r0, r5
900271e8:	f000 fafa 	bl	900277e0 <_sbrk_r>
900271ec:	3001      	adds	r0, #1
900271ee:	d101      	bne.n	900271f4 <sbrk_aligned+0x38>
900271f0:	f04f 34ff 	mov.w	r4, #4294967295
900271f4:	4620      	mov	r0, r4
900271f6:	bd70      	pop	{r4, r5, r6, pc}
900271f8:	2402829c 	.word	0x2402829c

900271fc <_malloc_r>:
900271fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027200:	1ccd      	adds	r5, r1, #3
90027202:	f025 0503 	bic.w	r5, r5, #3
90027206:	3508      	adds	r5, #8
90027208:	2d0c      	cmp	r5, #12
9002720a:	bf38      	it	cc
9002720c:	250c      	movcc	r5, #12
9002720e:	2d00      	cmp	r5, #0
90027210:	4607      	mov	r7, r0
90027212:	db01      	blt.n	90027218 <_malloc_r+0x1c>
90027214:	42a9      	cmp	r1, r5
90027216:	d905      	bls.n	90027224 <_malloc_r+0x28>
90027218:	230c      	movs	r3, #12
9002721a:	603b      	str	r3, [r7, #0]
9002721c:	2600      	movs	r6, #0
9002721e:	4630      	mov	r0, r6
90027220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 900272f8 <_malloc_r+0xfc>
90027228:	f000 f868 	bl	900272fc <__malloc_lock>
9002722c:	f8d8 3000 	ldr.w	r3, [r8]
90027230:	461c      	mov	r4, r3
90027232:	bb5c      	cbnz	r4, 9002728c <_malloc_r+0x90>
90027234:	4629      	mov	r1, r5
90027236:	4638      	mov	r0, r7
90027238:	f7ff ffc0 	bl	900271bc <sbrk_aligned>
9002723c:	1c43      	adds	r3, r0, #1
9002723e:	4604      	mov	r4, r0
90027240:	d155      	bne.n	900272ee <_malloc_r+0xf2>
90027242:	f8d8 4000 	ldr.w	r4, [r8]
90027246:	4626      	mov	r6, r4
90027248:	2e00      	cmp	r6, #0
9002724a:	d145      	bne.n	900272d8 <_malloc_r+0xdc>
9002724c:	2c00      	cmp	r4, #0
9002724e:	d048      	beq.n	900272e2 <_malloc_r+0xe6>
90027250:	6823      	ldr	r3, [r4, #0]
90027252:	4631      	mov	r1, r6
90027254:	4638      	mov	r0, r7
90027256:	eb04 0903 	add.w	r9, r4, r3
9002725a:	f000 fac1 	bl	900277e0 <_sbrk_r>
9002725e:	4581      	cmp	r9, r0
90027260:	d13f      	bne.n	900272e2 <_malloc_r+0xe6>
90027262:	6821      	ldr	r1, [r4, #0]
90027264:	1a6d      	subs	r5, r5, r1
90027266:	4629      	mov	r1, r5
90027268:	4638      	mov	r0, r7
9002726a:	f7ff ffa7 	bl	900271bc <sbrk_aligned>
9002726e:	3001      	adds	r0, #1
90027270:	d037      	beq.n	900272e2 <_malloc_r+0xe6>
90027272:	6823      	ldr	r3, [r4, #0]
90027274:	442b      	add	r3, r5
90027276:	6023      	str	r3, [r4, #0]
90027278:	f8d8 3000 	ldr.w	r3, [r8]
9002727c:	2b00      	cmp	r3, #0
9002727e:	d038      	beq.n	900272f2 <_malloc_r+0xf6>
90027280:	685a      	ldr	r2, [r3, #4]
90027282:	42a2      	cmp	r2, r4
90027284:	d12b      	bne.n	900272de <_malloc_r+0xe2>
90027286:	2200      	movs	r2, #0
90027288:	605a      	str	r2, [r3, #4]
9002728a:	e00f      	b.n	900272ac <_malloc_r+0xb0>
9002728c:	6822      	ldr	r2, [r4, #0]
9002728e:	1b52      	subs	r2, r2, r5
90027290:	d41f      	bmi.n	900272d2 <_malloc_r+0xd6>
90027292:	2a0b      	cmp	r2, #11
90027294:	d917      	bls.n	900272c6 <_malloc_r+0xca>
90027296:	1961      	adds	r1, r4, r5
90027298:	42a3      	cmp	r3, r4
9002729a:	6025      	str	r5, [r4, #0]
9002729c:	bf18      	it	ne
9002729e:	6059      	strne	r1, [r3, #4]
900272a0:	6863      	ldr	r3, [r4, #4]
900272a2:	bf08      	it	eq
900272a4:	f8c8 1000 	streq.w	r1, [r8]
900272a8:	5162      	str	r2, [r4, r5]
900272aa:	604b      	str	r3, [r1, #4]
900272ac:	4638      	mov	r0, r7
900272ae:	f104 060b 	add.w	r6, r4, #11
900272b2:	f000 f829 	bl	90027308 <__malloc_unlock>
900272b6:	f026 0607 	bic.w	r6, r6, #7
900272ba:	1d23      	adds	r3, r4, #4
900272bc:	1af2      	subs	r2, r6, r3
900272be:	d0ae      	beq.n	9002721e <_malloc_r+0x22>
900272c0:	1b9b      	subs	r3, r3, r6
900272c2:	50a3      	str	r3, [r4, r2]
900272c4:	e7ab      	b.n	9002721e <_malloc_r+0x22>
900272c6:	42a3      	cmp	r3, r4
900272c8:	6862      	ldr	r2, [r4, #4]
900272ca:	d1dd      	bne.n	90027288 <_malloc_r+0x8c>
900272cc:	f8c8 2000 	str.w	r2, [r8]
900272d0:	e7ec      	b.n	900272ac <_malloc_r+0xb0>
900272d2:	4623      	mov	r3, r4
900272d4:	6864      	ldr	r4, [r4, #4]
900272d6:	e7ac      	b.n	90027232 <_malloc_r+0x36>
900272d8:	4634      	mov	r4, r6
900272da:	6876      	ldr	r6, [r6, #4]
900272dc:	e7b4      	b.n	90027248 <_malloc_r+0x4c>
900272de:	4613      	mov	r3, r2
900272e0:	e7cc      	b.n	9002727c <_malloc_r+0x80>
900272e2:	230c      	movs	r3, #12
900272e4:	603b      	str	r3, [r7, #0]
900272e6:	4638      	mov	r0, r7
900272e8:	f000 f80e 	bl	90027308 <__malloc_unlock>
900272ec:	e797      	b.n	9002721e <_malloc_r+0x22>
900272ee:	6025      	str	r5, [r4, #0]
900272f0:	e7dc      	b.n	900272ac <_malloc_r+0xb0>
900272f2:	605b      	str	r3, [r3, #4]
900272f4:	deff      	udf	#255	; 0xff
900272f6:	bf00      	nop
900272f8:	24028298 	.word	0x24028298

900272fc <__malloc_lock>:
900272fc:	4801      	ldr	r0, [pc, #4]	; (90027304 <__malloc_lock+0x8>)
900272fe:	f000 babc 	b.w	9002787a <__retarget_lock_acquire_recursive>
90027302:	bf00      	nop
90027304:	240283e1 	.word	0x240283e1

90027308 <__malloc_unlock>:
90027308:	4801      	ldr	r0, [pc, #4]	; (90027310 <__malloc_unlock+0x8>)
9002730a:	f000 bab7 	b.w	9002787c <__retarget_lock_release_recursive>
9002730e:	bf00      	nop
90027310:	240283e1 	.word	0x240283e1

90027314 <__cxa_atexit>:
90027314:	b510      	push	{r4, lr}
90027316:	4c05      	ldr	r4, [pc, #20]	; (9002732c <__cxa_atexit+0x18>)
90027318:	4613      	mov	r3, r2
9002731a:	b12c      	cbz	r4, 90027328 <__cxa_atexit+0x14>
9002731c:	460a      	mov	r2, r1
9002731e:	4601      	mov	r1, r0
90027320:	2002      	movs	r0, #2
90027322:	f000 fabb 	bl	9002789c <__register_exitproc>
90027326:	bd10      	pop	{r4, pc}
90027328:	4620      	mov	r0, r4
9002732a:	e7fc      	b.n	90027326 <__cxa_atexit+0x12>
9002732c:	9002789d 	.word	0x9002789d

90027330 <std>:
90027330:	2300      	movs	r3, #0
90027332:	b510      	push	{r4, lr}
90027334:	4604      	mov	r4, r0
90027336:	e9c0 3300 	strd	r3, r3, [r0]
9002733a:	e9c0 3304 	strd	r3, r3, [r0, #16]
9002733e:	6083      	str	r3, [r0, #8]
90027340:	8181      	strh	r1, [r0, #12]
90027342:	6643      	str	r3, [r0, #100]	; 0x64
90027344:	81c2      	strh	r2, [r0, #14]
90027346:	6183      	str	r3, [r0, #24]
90027348:	4619      	mov	r1, r3
9002734a:	2208      	movs	r2, #8
9002734c:	305c      	adds	r0, #92	; 0x5c
9002734e:	f000 f9b5 	bl	900276bc <memset>
90027352:	4b0d      	ldr	r3, [pc, #52]	; (90027388 <std+0x58>)
90027354:	6263      	str	r3, [r4, #36]	; 0x24
90027356:	4b0d      	ldr	r3, [pc, #52]	; (9002738c <std+0x5c>)
90027358:	62a3      	str	r3, [r4, #40]	; 0x28
9002735a:	4b0d      	ldr	r3, [pc, #52]	; (90027390 <std+0x60>)
9002735c:	62e3      	str	r3, [r4, #44]	; 0x2c
9002735e:	4b0d      	ldr	r3, [pc, #52]	; (90027394 <std+0x64>)
90027360:	6323      	str	r3, [r4, #48]	; 0x30
90027362:	4b0d      	ldr	r3, [pc, #52]	; (90027398 <std+0x68>)
90027364:	6224      	str	r4, [r4, #32]
90027366:	429c      	cmp	r4, r3
90027368:	d006      	beq.n	90027378 <std+0x48>
9002736a:	f103 0268 	add.w	r2, r3, #104	; 0x68
9002736e:	4294      	cmp	r4, r2
90027370:	d002      	beq.n	90027378 <std+0x48>
90027372:	33d0      	adds	r3, #208	; 0xd0
90027374:	429c      	cmp	r4, r3
90027376:	d105      	bne.n	90027384 <std+0x54>
90027378:	f104 0058 	add.w	r0, r4, #88	; 0x58
9002737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027380:	f000 ba7a 	b.w	90027878 <__retarget_lock_init_recursive>
90027384:	bd10      	pop	{r4, pc}
90027386:	bf00      	nop
90027388:	900274d9 	.word	0x900274d9
9002738c:	900274fb 	.word	0x900274fb
90027390:	90027533 	.word	0x90027533
90027394:	90027557 	.word	0x90027557
90027398:	240282a0 	.word	0x240282a0

9002739c <stdio_exit_handler>:
9002739c:	4a02      	ldr	r2, [pc, #8]	; (900273a8 <stdio_exit_handler+0xc>)
9002739e:	4903      	ldr	r1, [pc, #12]	; (900273ac <stdio_exit_handler+0x10>)
900273a0:	4803      	ldr	r0, [pc, #12]	; (900273b0 <stdio_exit_handler+0x14>)
900273a2:	f000 b87b 	b.w	9002749c <_fwalk_sglue>
900273a6:	bf00      	nop
900273a8:	240000e0 	.word	0x240000e0
900273ac:	900280a5 	.word	0x900280a5
900273b0:	240000ec 	.word	0x240000ec

900273b4 <cleanup_stdio>:
900273b4:	6841      	ldr	r1, [r0, #4]
900273b6:	4b0c      	ldr	r3, [pc, #48]	; (900273e8 <cleanup_stdio+0x34>)
900273b8:	4299      	cmp	r1, r3
900273ba:	b510      	push	{r4, lr}
900273bc:	4604      	mov	r4, r0
900273be:	d001      	beq.n	900273c4 <cleanup_stdio+0x10>
900273c0:	f000 fe70 	bl	900280a4 <_fflush_r>
900273c4:	68a1      	ldr	r1, [r4, #8]
900273c6:	4b09      	ldr	r3, [pc, #36]	; (900273ec <cleanup_stdio+0x38>)
900273c8:	4299      	cmp	r1, r3
900273ca:	d002      	beq.n	900273d2 <cleanup_stdio+0x1e>
900273cc:	4620      	mov	r0, r4
900273ce:	f000 fe69 	bl	900280a4 <_fflush_r>
900273d2:	68e1      	ldr	r1, [r4, #12]
900273d4:	4b06      	ldr	r3, [pc, #24]	; (900273f0 <cleanup_stdio+0x3c>)
900273d6:	4299      	cmp	r1, r3
900273d8:	d004      	beq.n	900273e4 <cleanup_stdio+0x30>
900273da:	4620      	mov	r0, r4
900273dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900273e0:	f000 be60 	b.w	900280a4 <_fflush_r>
900273e4:	bd10      	pop	{r4, pc}
900273e6:	bf00      	nop
900273e8:	240282a0 	.word	0x240282a0
900273ec:	24028308 	.word	0x24028308
900273f0:	24028370 	.word	0x24028370

900273f4 <global_stdio_init.part.0>:
900273f4:	b510      	push	{r4, lr}
900273f6:	4b0b      	ldr	r3, [pc, #44]	; (90027424 <global_stdio_init.part.0+0x30>)
900273f8:	4c0b      	ldr	r4, [pc, #44]	; (90027428 <global_stdio_init.part.0+0x34>)
900273fa:	4a0c      	ldr	r2, [pc, #48]	; (9002742c <global_stdio_init.part.0+0x38>)
900273fc:	601a      	str	r2, [r3, #0]
900273fe:	4620      	mov	r0, r4
90027400:	2200      	movs	r2, #0
90027402:	2104      	movs	r1, #4
90027404:	f7ff ff94 	bl	90027330 <std>
90027408:	f104 0068 	add.w	r0, r4, #104	; 0x68
9002740c:	2201      	movs	r2, #1
9002740e:	2109      	movs	r1, #9
90027410:	f7ff ff8e 	bl	90027330 <std>
90027414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90027418:	2202      	movs	r2, #2
9002741a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002741e:	2112      	movs	r1, #18
90027420:	f7ff bf86 	b.w	90027330 <std>
90027424:	240283d8 	.word	0x240283d8
90027428:	240282a0 	.word	0x240282a0
9002742c:	9002739d 	.word	0x9002739d

90027430 <__sfp_lock_acquire>:
90027430:	4801      	ldr	r0, [pc, #4]	; (90027438 <__sfp_lock_acquire+0x8>)
90027432:	f000 ba22 	b.w	9002787a <__retarget_lock_acquire_recursive>
90027436:	bf00      	nop
90027438:	240283e2 	.word	0x240283e2

9002743c <__sfp_lock_release>:
9002743c:	4801      	ldr	r0, [pc, #4]	; (90027444 <__sfp_lock_release+0x8>)
9002743e:	f000 ba1d 	b.w	9002787c <__retarget_lock_release_recursive>
90027442:	bf00      	nop
90027444:	240283e2 	.word	0x240283e2

90027448 <__sinit>:
90027448:	b510      	push	{r4, lr}
9002744a:	4604      	mov	r4, r0
9002744c:	f7ff fff0 	bl	90027430 <__sfp_lock_acquire>
90027450:	6a23      	ldr	r3, [r4, #32]
90027452:	b11b      	cbz	r3, 9002745c <__sinit+0x14>
90027454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027458:	f7ff bff0 	b.w	9002743c <__sfp_lock_release>
9002745c:	4b04      	ldr	r3, [pc, #16]	; (90027470 <__sinit+0x28>)
9002745e:	6223      	str	r3, [r4, #32]
90027460:	4b04      	ldr	r3, [pc, #16]	; (90027474 <__sinit+0x2c>)
90027462:	681b      	ldr	r3, [r3, #0]
90027464:	2b00      	cmp	r3, #0
90027466:	d1f5      	bne.n	90027454 <__sinit+0xc>
90027468:	f7ff ffc4 	bl	900273f4 <global_stdio_init.part.0>
9002746c:	e7f2      	b.n	90027454 <__sinit+0xc>
9002746e:	bf00      	nop
90027470:	900273b5 	.word	0x900273b5
90027474:	240283d8 	.word	0x240283d8

90027478 <fiprintf>:
90027478:	b40e      	push	{r1, r2, r3}
9002747a:	b503      	push	{r0, r1, lr}
9002747c:	4601      	mov	r1, r0
9002747e:	ab03      	add	r3, sp, #12
90027480:	4805      	ldr	r0, [pc, #20]	; (90027498 <fiprintf+0x20>)
90027482:	f853 2b04 	ldr.w	r2, [r3], #4
90027486:	6800      	ldr	r0, [r0, #0]
90027488:	9301      	str	r3, [sp, #4]
9002748a:	f000 fadb 	bl	90027a44 <_vfiprintf_r>
9002748e:	b002      	add	sp, #8
90027490:	f85d eb04 	ldr.w	lr, [sp], #4
90027494:	b003      	add	sp, #12
90027496:	4770      	bx	lr
90027498:	24000138 	.word	0x24000138

9002749c <_fwalk_sglue>:
9002749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900274a0:	4607      	mov	r7, r0
900274a2:	4688      	mov	r8, r1
900274a4:	4614      	mov	r4, r2
900274a6:	2600      	movs	r6, #0
900274a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900274ac:	f1b9 0901 	subs.w	r9, r9, #1
900274b0:	d505      	bpl.n	900274be <_fwalk_sglue+0x22>
900274b2:	6824      	ldr	r4, [r4, #0]
900274b4:	2c00      	cmp	r4, #0
900274b6:	d1f7      	bne.n	900274a8 <_fwalk_sglue+0xc>
900274b8:	4630      	mov	r0, r6
900274ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900274be:	89ab      	ldrh	r3, [r5, #12]
900274c0:	2b01      	cmp	r3, #1
900274c2:	d907      	bls.n	900274d4 <_fwalk_sglue+0x38>
900274c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900274c8:	3301      	adds	r3, #1
900274ca:	d003      	beq.n	900274d4 <_fwalk_sglue+0x38>
900274cc:	4629      	mov	r1, r5
900274ce:	4638      	mov	r0, r7
900274d0:	47c0      	blx	r8
900274d2:	4306      	orrs	r6, r0
900274d4:	3568      	adds	r5, #104	; 0x68
900274d6:	e7e9      	b.n	900274ac <_fwalk_sglue+0x10>

900274d8 <__sread>:
900274d8:	b510      	push	{r4, lr}
900274da:	460c      	mov	r4, r1
900274dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900274e0:	f000 f958 	bl	90027794 <_read_r>
900274e4:	2800      	cmp	r0, #0
900274e6:	bfab      	itete	ge
900274e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
900274ea:	89a3      	ldrhlt	r3, [r4, #12]
900274ec:	181b      	addge	r3, r3, r0
900274ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
900274f2:	bfac      	ite	ge
900274f4:	6563      	strge	r3, [r4, #84]	; 0x54
900274f6:	81a3      	strhlt	r3, [r4, #12]
900274f8:	bd10      	pop	{r4, pc}

900274fa <__swrite>:
900274fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900274fe:	461f      	mov	r7, r3
90027500:	898b      	ldrh	r3, [r1, #12]
90027502:	05db      	lsls	r3, r3, #23
90027504:	4605      	mov	r5, r0
90027506:	460c      	mov	r4, r1
90027508:	4616      	mov	r6, r2
9002750a:	d505      	bpl.n	90027518 <__swrite+0x1e>
9002750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027510:	2302      	movs	r3, #2
90027512:	2200      	movs	r2, #0
90027514:	f000 f92c 	bl	90027770 <_lseek_r>
90027518:	89a3      	ldrh	r3, [r4, #12]
9002751a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002751e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90027522:	81a3      	strh	r3, [r4, #12]
90027524:	4632      	mov	r2, r6
90027526:	463b      	mov	r3, r7
90027528:	4628      	mov	r0, r5
9002752a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9002752e:	f000 b967 	b.w	90027800 <_write_r>

90027532 <__sseek>:
90027532:	b510      	push	{r4, lr}
90027534:	460c      	mov	r4, r1
90027536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002753a:	f000 f919 	bl	90027770 <_lseek_r>
9002753e:	1c43      	adds	r3, r0, #1
90027540:	89a3      	ldrh	r3, [r4, #12]
90027542:	bf15      	itete	ne
90027544:	6560      	strne	r0, [r4, #84]	; 0x54
90027546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9002754a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9002754e:	81a3      	strheq	r3, [r4, #12]
90027550:	bf18      	it	ne
90027552:	81a3      	strhne	r3, [r4, #12]
90027554:	bd10      	pop	{r4, pc}

90027556 <__sclose>:
90027556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002755a:	f000 b8f9 	b.w	90027750 <_close_r>

9002755e <__swbuf_r>:
9002755e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027560:	460e      	mov	r6, r1
90027562:	4614      	mov	r4, r2
90027564:	4605      	mov	r5, r0
90027566:	b118      	cbz	r0, 90027570 <__swbuf_r+0x12>
90027568:	6a03      	ldr	r3, [r0, #32]
9002756a:	b90b      	cbnz	r3, 90027570 <__swbuf_r+0x12>
9002756c:	f7ff ff6c 	bl	90027448 <__sinit>
90027570:	69a3      	ldr	r3, [r4, #24]
90027572:	60a3      	str	r3, [r4, #8]
90027574:	89a3      	ldrh	r3, [r4, #12]
90027576:	071a      	lsls	r2, r3, #28
90027578:	d525      	bpl.n	900275c6 <__swbuf_r+0x68>
9002757a:	6923      	ldr	r3, [r4, #16]
9002757c:	b31b      	cbz	r3, 900275c6 <__swbuf_r+0x68>
9002757e:	6823      	ldr	r3, [r4, #0]
90027580:	6922      	ldr	r2, [r4, #16]
90027582:	1a98      	subs	r0, r3, r2
90027584:	6963      	ldr	r3, [r4, #20]
90027586:	b2f6      	uxtb	r6, r6
90027588:	4283      	cmp	r3, r0
9002758a:	4637      	mov	r7, r6
9002758c:	dc04      	bgt.n	90027598 <__swbuf_r+0x3a>
9002758e:	4621      	mov	r1, r4
90027590:	4628      	mov	r0, r5
90027592:	f000 fd87 	bl	900280a4 <_fflush_r>
90027596:	b9e0      	cbnz	r0, 900275d2 <__swbuf_r+0x74>
90027598:	68a3      	ldr	r3, [r4, #8]
9002759a:	3b01      	subs	r3, #1
9002759c:	60a3      	str	r3, [r4, #8]
9002759e:	6823      	ldr	r3, [r4, #0]
900275a0:	1c5a      	adds	r2, r3, #1
900275a2:	6022      	str	r2, [r4, #0]
900275a4:	701e      	strb	r6, [r3, #0]
900275a6:	6962      	ldr	r2, [r4, #20]
900275a8:	1c43      	adds	r3, r0, #1
900275aa:	429a      	cmp	r2, r3
900275ac:	d004      	beq.n	900275b8 <__swbuf_r+0x5a>
900275ae:	89a3      	ldrh	r3, [r4, #12]
900275b0:	07db      	lsls	r3, r3, #31
900275b2:	d506      	bpl.n	900275c2 <__swbuf_r+0x64>
900275b4:	2e0a      	cmp	r6, #10
900275b6:	d104      	bne.n	900275c2 <__swbuf_r+0x64>
900275b8:	4621      	mov	r1, r4
900275ba:	4628      	mov	r0, r5
900275bc:	f000 fd72 	bl	900280a4 <_fflush_r>
900275c0:	b938      	cbnz	r0, 900275d2 <__swbuf_r+0x74>
900275c2:	4638      	mov	r0, r7
900275c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900275c6:	4621      	mov	r1, r4
900275c8:	4628      	mov	r0, r5
900275ca:	f000 f805 	bl	900275d8 <__swsetup_r>
900275ce:	2800      	cmp	r0, #0
900275d0:	d0d5      	beq.n	9002757e <__swbuf_r+0x20>
900275d2:	f04f 37ff 	mov.w	r7, #4294967295
900275d6:	e7f4      	b.n	900275c2 <__swbuf_r+0x64>

900275d8 <__swsetup_r>:
900275d8:	b538      	push	{r3, r4, r5, lr}
900275da:	4b2a      	ldr	r3, [pc, #168]	; (90027684 <__swsetup_r+0xac>)
900275dc:	4605      	mov	r5, r0
900275de:	6818      	ldr	r0, [r3, #0]
900275e0:	460c      	mov	r4, r1
900275e2:	b118      	cbz	r0, 900275ec <__swsetup_r+0x14>
900275e4:	6a03      	ldr	r3, [r0, #32]
900275e6:	b90b      	cbnz	r3, 900275ec <__swsetup_r+0x14>
900275e8:	f7ff ff2e 	bl	90027448 <__sinit>
900275ec:	89a3      	ldrh	r3, [r4, #12]
900275ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900275f2:	0718      	lsls	r0, r3, #28
900275f4:	d422      	bmi.n	9002763c <__swsetup_r+0x64>
900275f6:	06d9      	lsls	r1, r3, #27
900275f8:	d407      	bmi.n	9002760a <__swsetup_r+0x32>
900275fa:	2309      	movs	r3, #9
900275fc:	602b      	str	r3, [r5, #0]
900275fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90027602:	81a3      	strh	r3, [r4, #12]
90027604:	f04f 30ff 	mov.w	r0, #4294967295
90027608:	e034      	b.n	90027674 <__swsetup_r+0x9c>
9002760a:	0758      	lsls	r0, r3, #29
9002760c:	d512      	bpl.n	90027634 <__swsetup_r+0x5c>
9002760e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027610:	b141      	cbz	r1, 90027624 <__swsetup_r+0x4c>
90027612:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027616:	4299      	cmp	r1, r3
90027618:	d002      	beq.n	90027620 <__swsetup_r+0x48>
9002761a:	4628      	mov	r0, r5
9002761c:	f000 f99c 	bl	90027958 <_free_r>
90027620:	2300      	movs	r3, #0
90027622:	6363      	str	r3, [r4, #52]	; 0x34
90027624:	89a3      	ldrh	r3, [r4, #12]
90027626:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9002762a:	81a3      	strh	r3, [r4, #12]
9002762c:	2300      	movs	r3, #0
9002762e:	6063      	str	r3, [r4, #4]
90027630:	6923      	ldr	r3, [r4, #16]
90027632:	6023      	str	r3, [r4, #0]
90027634:	89a3      	ldrh	r3, [r4, #12]
90027636:	f043 0308 	orr.w	r3, r3, #8
9002763a:	81a3      	strh	r3, [r4, #12]
9002763c:	6923      	ldr	r3, [r4, #16]
9002763e:	b94b      	cbnz	r3, 90027654 <__swsetup_r+0x7c>
90027640:	89a3      	ldrh	r3, [r4, #12]
90027642:	f403 7320 	and.w	r3, r3, #640	; 0x280
90027646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9002764a:	d003      	beq.n	90027654 <__swsetup_r+0x7c>
9002764c:	4621      	mov	r1, r4
9002764e:	4628      	mov	r0, r5
90027650:	f000 fd76 	bl	90028140 <__smakebuf_r>
90027654:	89a0      	ldrh	r0, [r4, #12]
90027656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9002765a:	f010 0301 	ands.w	r3, r0, #1
9002765e:	d00a      	beq.n	90027676 <__swsetup_r+0x9e>
90027660:	2300      	movs	r3, #0
90027662:	60a3      	str	r3, [r4, #8]
90027664:	6963      	ldr	r3, [r4, #20]
90027666:	425b      	negs	r3, r3
90027668:	61a3      	str	r3, [r4, #24]
9002766a:	6923      	ldr	r3, [r4, #16]
9002766c:	b943      	cbnz	r3, 90027680 <__swsetup_r+0xa8>
9002766e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90027672:	d1c4      	bne.n	900275fe <__swsetup_r+0x26>
90027674:	bd38      	pop	{r3, r4, r5, pc}
90027676:	0781      	lsls	r1, r0, #30
90027678:	bf58      	it	pl
9002767a:	6963      	ldrpl	r3, [r4, #20]
9002767c:	60a3      	str	r3, [r4, #8]
9002767e:	e7f4      	b.n	9002766a <__swsetup_r+0x92>
90027680:	2000      	movs	r0, #0
90027682:	e7f7      	b.n	90027674 <__swsetup_r+0x9c>
90027684:	24000138 	.word	0x24000138

90027688 <memmove>:
90027688:	4288      	cmp	r0, r1
9002768a:	b510      	push	{r4, lr}
9002768c:	eb01 0402 	add.w	r4, r1, r2
90027690:	d902      	bls.n	90027698 <memmove+0x10>
90027692:	4284      	cmp	r4, r0
90027694:	4623      	mov	r3, r4
90027696:	d807      	bhi.n	900276a8 <memmove+0x20>
90027698:	1e43      	subs	r3, r0, #1
9002769a:	42a1      	cmp	r1, r4
9002769c:	d008      	beq.n	900276b0 <memmove+0x28>
9002769e:	f811 2b01 	ldrb.w	r2, [r1], #1
900276a2:	f803 2f01 	strb.w	r2, [r3, #1]!
900276a6:	e7f8      	b.n	9002769a <memmove+0x12>
900276a8:	4402      	add	r2, r0
900276aa:	4601      	mov	r1, r0
900276ac:	428a      	cmp	r2, r1
900276ae:	d100      	bne.n	900276b2 <memmove+0x2a>
900276b0:	bd10      	pop	{r4, pc}
900276b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
900276b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
900276ba:	e7f7      	b.n	900276ac <memmove+0x24>

900276bc <memset>:
900276bc:	4402      	add	r2, r0
900276be:	4603      	mov	r3, r0
900276c0:	4293      	cmp	r3, r2
900276c2:	d100      	bne.n	900276c6 <memset+0xa>
900276c4:	4770      	bx	lr
900276c6:	f803 1b01 	strb.w	r1, [r3], #1
900276ca:	e7f9      	b.n	900276c0 <memset+0x4>

900276cc <strncmp>:
900276cc:	b510      	push	{r4, lr}
900276ce:	b16a      	cbz	r2, 900276ec <strncmp+0x20>
900276d0:	3901      	subs	r1, #1
900276d2:	1884      	adds	r4, r0, r2
900276d4:	f810 2b01 	ldrb.w	r2, [r0], #1
900276d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
900276dc:	429a      	cmp	r2, r3
900276de:	d103      	bne.n	900276e8 <strncmp+0x1c>
900276e0:	42a0      	cmp	r0, r4
900276e2:	d001      	beq.n	900276e8 <strncmp+0x1c>
900276e4:	2a00      	cmp	r2, #0
900276e6:	d1f5      	bne.n	900276d4 <strncmp+0x8>
900276e8:	1ad0      	subs	r0, r2, r3
900276ea:	bd10      	pop	{r4, pc}
900276ec:	4610      	mov	r0, r2
900276ee:	e7fc      	b.n	900276ea <strncmp+0x1e>

900276f0 <_raise_r>:
900276f0:	291f      	cmp	r1, #31
900276f2:	b538      	push	{r3, r4, r5, lr}
900276f4:	4604      	mov	r4, r0
900276f6:	460d      	mov	r5, r1
900276f8:	d904      	bls.n	90027704 <_raise_r+0x14>
900276fa:	2316      	movs	r3, #22
900276fc:	6003      	str	r3, [r0, #0]
900276fe:	f04f 30ff 	mov.w	r0, #4294967295
90027702:	bd38      	pop	{r3, r4, r5, pc}
90027704:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90027706:	b112      	cbz	r2, 9002770e <_raise_r+0x1e>
90027708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9002770c:	b94b      	cbnz	r3, 90027722 <_raise_r+0x32>
9002770e:	4620      	mov	r0, r4
90027710:	f000 f864 	bl	900277dc <_getpid_r>
90027714:	462a      	mov	r2, r5
90027716:	4601      	mov	r1, r0
90027718:	4620      	mov	r0, r4
9002771a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9002771e:	f000 b84b 	b.w	900277b8 <_kill_r>
90027722:	2b01      	cmp	r3, #1
90027724:	d00a      	beq.n	9002773c <_raise_r+0x4c>
90027726:	1c59      	adds	r1, r3, #1
90027728:	d103      	bne.n	90027732 <_raise_r+0x42>
9002772a:	2316      	movs	r3, #22
9002772c:	6003      	str	r3, [r0, #0]
9002772e:	2001      	movs	r0, #1
90027730:	e7e7      	b.n	90027702 <_raise_r+0x12>
90027732:	2400      	movs	r4, #0
90027734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90027738:	4628      	mov	r0, r5
9002773a:	4798      	blx	r3
9002773c:	2000      	movs	r0, #0
9002773e:	e7e0      	b.n	90027702 <_raise_r+0x12>

90027740 <raise>:
90027740:	4b02      	ldr	r3, [pc, #8]	; (9002774c <raise+0xc>)
90027742:	4601      	mov	r1, r0
90027744:	6818      	ldr	r0, [r3, #0]
90027746:	f7ff bfd3 	b.w	900276f0 <_raise_r>
9002774a:	bf00      	nop
9002774c:	24000138 	.word	0x24000138

90027750 <_close_r>:
90027750:	b538      	push	{r3, r4, r5, lr}
90027752:	4d06      	ldr	r5, [pc, #24]	; (9002776c <_close_r+0x1c>)
90027754:	2300      	movs	r3, #0
90027756:	4604      	mov	r4, r0
90027758:	4608      	mov	r0, r1
9002775a:	602b      	str	r3, [r5, #0]
9002775c:	f7dd fb7a 	bl	90004e54 <_close>
90027760:	1c43      	adds	r3, r0, #1
90027762:	d102      	bne.n	9002776a <_close_r+0x1a>
90027764:	682b      	ldr	r3, [r5, #0]
90027766:	b103      	cbz	r3, 9002776a <_close_r+0x1a>
90027768:	6023      	str	r3, [r4, #0]
9002776a:	bd38      	pop	{r3, r4, r5, pc}
9002776c:	240283dc 	.word	0x240283dc

90027770 <_lseek_r>:
90027770:	b538      	push	{r3, r4, r5, lr}
90027772:	4d07      	ldr	r5, [pc, #28]	; (90027790 <_lseek_r+0x20>)
90027774:	4604      	mov	r4, r0
90027776:	4608      	mov	r0, r1
90027778:	4611      	mov	r1, r2
9002777a:	2200      	movs	r2, #0
9002777c:	602a      	str	r2, [r5, #0]
9002777e:	461a      	mov	r2, r3
90027780:	f7dd fb74 	bl	90004e6c <_lseek>
90027784:	1c43      	adds	r3, r0, #1
90027786:	d102      	bne.n	9002778e <_lseek_r+0x1e>
90027788:	682b      	ldr	r3, [r5, #0]
9002778a:	b103      	cbz	r3, 9002778e <_lseek_r+0x1e>
9002778c:	6023      	str	r3, [r4, #0]
9002778e:	bd38      	pop	{r3, r4, r5, pc}
90027790:	240283dc 	.word	0x240283dc

90027794 <_read_r>:
90027794:	b538      	push	{r3, r4, r5, lr}
90027796:	4d07      	ldr	r5, [pc, #28]	; (900277b4 <_read_r+0x20>)
90027798:	4604      	mov	r4, r0
9002779a:	4608      	mov	r0, r1
9002779c:	4611      	mov	r1, r2
9002779e:	2200      	movs	r2, #0
900277a0:	602a      	str	r2, [r5, #0]
900277a2:	461a      	mov	r2, r3
900277a4:	f7dd fb3a 	bl	90004e1c <_read>
900277a8:	1c43      	adds	r3, r0, #1
900277aa:	d102      	bne.n	900277b2 <_read_r+0x1e>
900277ac:	682b      	ldr	r3, [r5, #0]
900277ae:	b103      	cbz	r3, 900277b2 <_read_r+0x1e>
900277b0:	6023      	str	r3, [r4, #0]
900277b2:	bd38      	pop	{r3, r4, r5, pc}
900277b4:	240283dc 	.word	0x240283dc

900277b8 <_kill_r>:
900277b8:	b538      	push	{r3, r4, r5, lr}
900277ba:	4d07      	ldr	r5, [pc, #28]	; (900277d8 <_kill_r+0x20>)
900277bc:	2300      	movs	r3, #0
900277be:	4604      	mov	r4, r0
900277c0:	4608      	mov	r0, r1
900277c2:	4611      	mov	r1, r2
900277c4:	602b      	str	r3, [r5, #0]
900277c6:	f7dd fb19 	bl	90004dfc <_kill>
900277ca:	1c43      	adds	r3, r0, #1
900277cc:	d102      	bne.n	900277d4 <_kill_r+0x1c>
900277ce:	682b      	ldr	r3, [r5, #0]
900277d0:	b103      	cbz	r3, 900277d4 <_kill_r+0x1c>
900277d2:	6023      	str	r3, [r4, #0]
900277d4:	bd38      	pop	{r3, r4, r5, pc}
900277d6:	bf00      	nop
900277d8:	240283dc 	.word	0x240283dc

900277dc <_getpid_r>:
900277dc:	f7dd bb0c 	b.w	90004df8 <_getpid>

900277e0 <_sbrk_r>:
900277e0:	b538      	push	{r3, r4, r5, lr}
900277e2:	4d06      	ldr	r5, [pc, #24]	; (900277fc <_sbrk_r+0x1c>)
900277e4:	2300      	movs	r3, #0
900277e6:	4604      	mov	r4, r0
900277e8:	4608      	mov	r0, r1
900277ea:	602b      	str	r3, [r5, #0]
900277ec:	f7dd fb40 	bl	90004e70 <_sbrk>
900277f0:	1c43      	adds	r3, r0, #1
900277f2:	d102      	bne.n	900277fa <_sbrk_r+0x1a>
900277f4:	682b      	ldr	r3, [r5, #0]
900277f6:	b103      	cbz	r3, 900277fa <_sbrk_r+0x1a>
900277f8:	6023      	str	r3, [r4, #0]
900277fa:	bd38      	pop	{r3, r4, r5, pc}
900277fc:	240283dc 	.word	0x240283dc

90027800 <_write_r>:
90027800:	b538      	push	{r3, r4, r5, lr}
90027802:	4d07      	ldr	r5, [pc, #28]	; (90027820 <_write_r+0x20>)
90027804:	4604      	mov	r4, r0
90027806:	4608      	mov	r0, r1
90027808:	4611      	mov	r1, r2
9002780a:	2200      	movs	r2, #0
9002780c:	602a      	str	r2, [r5, #0]
9002780e:	461a      	mov	r2, r3
90027810:	f7dd fb12 	bl	90004e38 <_write>
90027814:	1c43      	adds	r3, r0, #1
90027816:	d102      	bne.n	9002781e <_write_r+0x1e>
90027818:	682b      	ldr	r3, [r5, #0]
9002781a:	b103      	cbz	r3, 9002781e <_write_r+0x1e>
9002781c:	6023      	str	r3, [r4, #0]
9002781e:	bd38      	pop	{r3, r4, r5, pc}
90027820:	240283dc 	.word	0x240283dc

90027824 <__errno>:
90027824:	4b01      	ldr	r3, [pc, #4]	; (9002782c <__errno+0x8>)
90027826:	6818      	ldr	r0, [r3, #0]
90027828:	4770      	bx	lr
9002782a:	bf00      	nop
9002782c:	24000138 	.word	0x24000138

90027830 <__libc_init_array>:
90027830:	b570      	push	{r4, r5, r6, lr}
90027832:	4d0d      	ldr	r5, [pc, #52]	; (90027868 <__libc_init_array+0x38>)
90027834:	4c0d      	ldr	r4, [pc, #52]	; (9002786c <__libc_init_array+0x3c>)
90027836:	1b64      	subs	r4, r4, r5
90027838:	10a4      	asrs	r4, r4, #2
9002783a:	2600      	movs	r6, #0
9002783c:	42a6      	cmp	r6, r4
9002783e:	d109      	bne.n	90027854 <__libc_init_array+0x24>
90027840:	4d0b      	ldr	r5, [pc, #44]	; (90027870 <__libc_init_array+0x40>)
90027842:	4c0c      	ldr	r4, [pc, #48]	; (90027874 <__libc_init_array+0x44>)
90027844:	f000 fcda 	bl	900281fc <_init>
90027848:	1b64      	subs	r4, r4, r5
9002784a:	10a4      	asrs	r4, r4, #2
9002784c:	2600      	movs	r6, #0
9002784e:	42a6      	cmp	r6, r4
90027850:	d105      	bne.n	9002785e <__libc_init_array+0x2e>
90027852:	bd70      	pop	{r4, r5, r6, pc}
90027854:	f855 3b04 	ldr.w	r3, [r5], #4
90027858:	4798      	blx	r3
9002785a:	3601      	adds	r6, #1
9002785c:	e7ee      	b.n	9002783c <__libc_init_array+0xc>
9002785e:	f855 3b04 	ldr.w	r3, [r5], #4
90027862:	4798      	blx	r3
90027864:	3601      	adds	r6, #1
90027866:	e7f2      	b.n	9002784e <__libc_init_array+0x1e>
90027868:	9002c570 	.word	0x9002c570
9002786c:	9002c570 	.word	0x9002c570
90027870:	9002c570 	.word	0x9002c570
90027874:	9002c58c 	.word	0x9002c58c

90027878 <__retarget_lock_init_recursive>:
90027878:	4770      	bx	lr

9002787a <__retarget_lock_acquire_recursive>:
9002787a:	4770      	bx	lr

9002787c <__retarget_lock_release_recursive>:
9002787c:	4770      	bx	lr

9002787e <memcpy>:
9002787e:	440a      	add	r2, r1
90027880:	4291      	cmp	r1, r2
90027882:	f100 33ff 	add.w	r3, r0, #4294967295
90027886:	d100      	bne.n	9002788a <memcpy+0xc>
90027888:	4770      	bx	lr
9002788a:	b510      	push	{r4, lr}
9002788c:	f811 4b01 	ldrb.w	r4, [r1], #1
90027890:	f803 4f01 	strb.w	r4, [r3, #1]!
90027894:	4291      	cmp	r1, r2
90027896:	d1f9      	bne.n	9002788c <memcpy+0xe>
90027898:	bd10      	pop	{r4, pc}
	...

9002789c <__register_exitproc>:
9002789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900278a0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90027954 <__register_exitproc+0xb8>
900278a4:	4606      	mov	r6, r0
900278a6:	f8d8 0000 	ldr.w	r0, [r8]
900278aa:	461f      	mov	r7, r3
900278ac:	460d      	mov	r5, r1
900278ae:	4691      	mov	r9, r2
900278b0:	f7ff ffe3 	bl	9002787a <__retarget_lock_acquire_recursive>
900278b4:	4b23      	ldr	r3, [pc, #140]	; (90027944 <__register_exitproc+0xa8>)
900278b6:	681c      	ldr	r4, [r3, #0]
900278b8:	b934      	cbnz	r4, 900278c8 <__register_exitproc+0x2c>
900278ba:	4c23      	ldr	r4, [pc, #140]	; (90027948 <__register_exitproc+0xac>)
900278bc:	601c      	str	r4, [r3, #0]
900278be:	4b23      	ldr	r3, [pc, #140]	; (9002794c <__register_exitproc+0xb0>)
900278c0:	b113      	cbz	r3, 900278c8 <__register_exitproc+0x2c>
900278c2:	681b      	ldr	r3, [r3, #0]
900278c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
900278c8:	6863      	ldr	r3, [r4, #4]
900278ca:	2b1f      	cmp	r3, #31
900278cc:	dd07      	ble.n	900278de <__register_exitproc+0x42>
900278ce:	f8d8 0000 	ldr.w	r0, [r8]
900278d2:	f7ff ffd3 	bl	9002787c <__retarget_lock_release_recursive>
900278d6:	f04f 30ff 	mov.w	r0, #4294967295
900278da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900278de:	b32e      	cbz	r6, 9002792c <__register_exitproc+0x90>
900278e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
900278e4:	b968      	cbnz	r0, 90027902 <__register_exitproc+0x66>
900278e6:	4b1a      	ldr	r3, [pc, #104]	; (90027950 <__register_exitproc+0xb4>)
900278e8:	2b00      	cmp	r3, #0
900278ea:	d0f0      	beq.n	900278ce <__register_exitproc+0x32>
900278ec:	f44f 7084 	mov.w	r0, #264	; 0x108
900278f0:	f7ff fc54 	bl	9002719c <malloc>
900278f4:	2800      	cmp	r0, #0
900278f6:	d0ea      	beq.n	900278ce <__register_exitproc+0x32>
900278f8:	2300      	movs	r3, #0
900278fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
900278fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90027902:	6863      	ldr	r3, [r4, #4]
90027904:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90027908:	2201      	movs	r2, #1
9002790a:	409a      	lsls	r2, r3
9002790c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90027910:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90027914:	4313      	orrs	r3, r2
90027916:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
9002791a:	2e02      	cmp	r6, #2
9002791c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90027920:	bf02      	ittt	eq
90027922:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90027926:	4313      	orreq	r3, r2
90027928:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
9002792c:	6863      	ldr	r3, [r4, #4]
9002792e:	f8d8 0000 	ldr.w	r0, [r8]
90027932:	1c5a      	adds	r2, r3, #1
90027934:	3302      	adds	r3, #2
90027936:	6062      	str	r2, [r4, #4]
90027938:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
9002793c:	f7ff ff9e 	bl	9002787c <__retarget_lock_release_recursive>
90027940:	2000      	movs	r0, #0
90027942:	e7ca      	b.n	900278da <__register_exitproc+0x3e>
90027944:	24028470 	.word	0x24028470
90027948:	240283e4 	.word	0x240283e4
9002794c:	9002c380 	.word	0x9002c380
90027950:	9002719d 	.word	0x9002719d
90027954:	2400013c 	.word	0x2400013c

90027958 <_free_r>:
90027958:	b537      	push	{r0, r1, r2, r4, r5, lr}
9002795a:	2900      	cmp	r1, #0
9002795c:	d044      	beq.n	900279e8 <_free_r+0x90>
9002795e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90027962:	9001      	str	r0, [sp, #4]
90027964:	2b00      	cmp	r3, #0
90027966:	f1a1 0404 	sub.w	r4, r1, #4
9002796a:	bfb8      	it	lt
9002796c:	18e4      	addlt	r4, r4, r3
9002796e:	f7ff fcc5 	bl	900272fc <__malloc_lock>
90027972:	4a1e      	ldr	r2, [pc, #120]	; (900279ec <_free_r+0x94>)
90027974:	9801      	ldr	r0, [sp, #4]
90027976:	6813      	ldr	r3, [r2, #0]
90027978:	b933      	cbnz	r3, 90027988 <_free_r+0x30>
9002797a:	6063      	str	r3, [r4, #4]
9002797c:	6014      	str	r4, [r2, #0]
9002797e:	b003      	add	sp, #12
90027980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90027984:	f7ff bcc0 	b.w	90027308 <__malloc_unlock>
90027988:	42a3      	cmp	r3, r4
9002798a:	d908      	bls.n	9002799e <_free_r+0x46>
9002798c:	6825      	ldr	r5, [r4, #0]
9002798e:	1961      	adds	r1, r4, r5
90027990:	428b      	cmp	r3, r1
90027992:	bf01      	itttt	eq
90027994:	6819      	ldreq	r1, [r3, #0]
90027996:	685b      	ldreq	r3, [r3, #4]
90027998:	1949      	addeq	r1, r1, r5
9002799a:	6021      	streq	r1, [r4, #0]
9002799c:	e7ed      	b.n	9002797a <_free_r+0x22>
9002799e:	461a      	mov	r2, r3
900279a0:	685b      	ldr	r3, [r3, #4]
900279a2:	b10b      	cbz	r3, 900279a8 <_free_r+0x50>
900279a4:	42a3      	cmp	r3, r4
900279a6:	d9fa      	bls.n	9002799e <_free_r+0x46>
900279a8:	6811      	ldr	r1, [r2, #0]
900279aa:	1855      	adds	r5, r2, r1
900279ac:	42a5      	cmp	r5, r4
900279ae:	d10b      	bne.n	900279c8 <_free_r+0x70>
900279b0:	6824      	ldr	r4, [r4, #0]
900279b2:	4421      	add	r1, r4
900279b4:	1854      	adds	r4, r2, r1
900279b6:	42a3      	cmp	r3, r4
900279b8:	6011      	str	r1, [r2, #0]
900279ba:	d1e0      	bne.n	9002797e <_free_r+0x26>
900279bc:	681c      	ldr	r4, [r3, #0]
900279be:	685b      	ldr	r3, [r3, #4]
900279c0:	6053      	str	r3, [r2, #4]
900279c2:	440c      	add	r4, r1
900279c4:	6014      	str	r4, [r2, #0]
900279c6:	e7da      	b.n	9002797e <_free_r+0x26>
900279c8:	d902      	bls.n	900279d0 <_free_r+0x78>
900279ca:	230c      	movs	r3, #12
900279cc:	6003      	str	r3, [r0, #0]
900279ce:	e7d6      	b.n	9002797e <_free_r+0x26>
900279d0:	6825      	ldr	r5, [r4, #0]
900279d2:	1961      	adds	r1, r4, r5
900279d4:	428b      	cmp	r3, r1
900279d6:	bf04      	itt	eq
900279d8:	6819      	ldreq	r1, [r3, #0]
900279da:	685b      	ldreq	r3, [r3, #4]
900279dc:	6063      	str	r3, [r4, #4]
900279de:	bf04      	itt	eq
900279e0:	1949      	addeq	r1, r1, r5
900279e2:	6021      	streq	r1, [r4, #0]
900279e4:	6054      	str	r4, [r2, #4]
900279e6:	e7ca      	b.n	9002797e <_free_r+0x26>
900279e8:	b003      	add	sp, #12
900279ea:	bd30      	pop	{r4, r5, pc}
900279ec:	24028298 	.word	0x24028298

900279f0 <__sfputc_r>:
900279f0:	6893      	ldr	r3, [r2, #8]
900279f2:	3b01      	subs	r3, #1
900279f4:	2b00      	cmp	r3, #0
900279f6:	b410      	push	{r4}
900279f8:	6093      	str	r3, [r2, #8]
900279fa:	da08      	bge.n	90027a0e <__sfputc_r+0x1e>
900279fc:	6994      	ldr	r4, [r2, #24]
900279fe:	42a3      	cmp	r3, r4
90027a00:	db01      	blt.n	90027a06 <__sfputc_r+0x16>
90027a02:	290a      	cmp	r1, #10
90027a04:	d103      	bne.n	90027a0e <__sfputc_r+0x1e>
90027a06:	f85d 4b04 	ldr.w	r4, [sp], #4
90027a0a:	f7ff bda8 	b.w	9002755e <__swbuf_r>
90027a0e:	6813      	ldr	r3, [r2, #0]
90027a10:	1c58      	adds	r0, r3, #1
90027a12:	6010      	str	r0, [r2, #0]
90027a14:	7019      	strb	r1, [r3, #0]
90027a16:	4608      	mov	r0, r1
90027a18:	f85d 4b04 	ldr.w	r4, [sp], #4
90027a1c:	4770      	bx	lr

90027a1e <__sfputs_r>:
90027a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027a20:	4606      	mov	r6, r0
90027a22:	460f      	mov	r7, r1
90027a24:	4614      	mov	r4, r2
90027a26:	18d5      	adds	r5, r2, r3
90027a28:	42ac      	cmp	r4, r5
90027a2a:	d101      	bne.n	90027a30 <__sfputs_r+0x12>
90027a2c:	2000      	movs	r0, #0
90027a2e:	e007      	b.n	90027a40 <__sfputs_r+0x22>
90027a30:	f814 1b01 	ldrb.w	r1, [r4], #1
90027a34:	463a      	mov	r2, r7
90027a36:	4630      	mov	r0, r6
90027a38:	f7ff ffda 	bl	900279f0 <__sfputc_r>
90027a3c:	1c43      	adds	r3, r0, #1
90027a3e:	d1f3      	bne.n	90027a28 <__sfputs_r+0xa>
90027a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90027a44 <_vfiprintf_r>:
90027a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90027a48:	460d      	mov	r5, r1
90027a4a:	b09d      	sub	sp, #116	; 0x74
90027a4c:	4614      	mov	r4, r2
90027a4e:	4698      	mov	r8, r3
90027a50:	4606      	mov	r6, r0
90027a52:	b118      	cbz	r0, 90027a5c <_vfiprintf_r+0x18>
90027a54:	6a03      	ldr	r3, [r0, #32]
90027a56:	b90b      	cbnz	r3, 90027a5c <_vfiprintf_r+0x18>
90027a58:	f7ff fcf6 	bl	90027448 <__sinit>
90027a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027a5e:	07d9      	lsls	r1, r3, #31
90027a60:	d405      	bmi.n	90027a6e <_vfiprintf_r+0x2a>
90027a62:	89ab      	ldrh	r3, [r5, #12]
90027a64:	059a      	lsls	r2, r3, #22
90027a66:	d402      	bmi.n	90027a6e <_vfiprintf_r+0x2a>
90027a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027a6a:	f7ff ff06 	bl	9002787a <__retarget_lock_acquire_recursive>
90027a6e:	89ab      	ldrh	r3, [r5, #12]
90027a70:	071b      	lsls	r3, r3, #28
90027a72:	d501      	bpl.n	90027a78 <_vfiprintf_r+0x34>
90027a74:	692b      	ldr	r3, [r5, #16]
90027a76:	b99b      	cbnz	r3, 90027aa0 <_vfiprintf_r+0x5c>
90027a78:	4629      	mov	r1, r5
90027a7a:	4630      	mov	r0, r6
90027a7c:	f7ff fdac 	bl	900275d8 <__swsetup_r>
90027a80:	b170      	cbz	r0, 90027aa0 <_vfiprintf_r+0x5c>
90027a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027a84:	07dc      	lsls	r4, r3, #31
90027a86:	d504      	bpl.n	90027a92 <_vfiprintf_r+0x4e>
90027a88:	f04f 30ff 	mov.w	r0, #4294967295
90027a8c:	b01d      	add	sp, #116	; 0x74
90027a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027a92:	89ab      	ldrh	r3, [r5, #12]
90027a94:	0598      	lsls	r0, r3, #22
90027a96:	d4f7      	bmi.n	90027a88 <_vfiprintf_r+0x44>
90027a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027a9a:	f7ff feef 	bl	9002787c <__retarget_lock_release_recursive>
90027a9e:	e7f3      	b.n	90027a88 <_vfiprintf_r+0x44>
90027aa0:	2300      	movs	r3, #0
90027aa2:	9309      	str	r3, [sp, #36]	; 0x24
90027aa4:	2320      	movs	r3, #32
90027aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90027aaa:	f8cd 800c 	str.w	r8, [sp, #12]
90027aae:	2330      	movs	r3, #48	; 0x30
90027ab0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 90027c64 <_vfiprintf_r+0x220>
90027ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90027ab8:	f04f 0901 	mov.w	r9, #1
90027abc:	4623      	mov	r3, r4
90027abe:	469a      	mov	sl, r3
90027ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
90027ac4:	b10a      	cbz	r2, 90027aca <_vfiprintf_r+0x86>
90027ac6:	2a25      	cmp	r2, #37	; 0x25
90027ac8:	d1f9      	bne.n	90027abe <_vfiprintf_r+0x7a>
90027aca:	ebba 0b04 	subs.w	fp, sl, r4
90027ace:	d00b      	beq.n	90027ae8 <_vfiprintf_r+0xa4>
90027ad0:	465b      	mov	r3, fp
90027ad2:	4622      	mov	r2, r4
90027ad4:	4629      	mov	r1, r5
90027ad6:	4630      	mov	r0, r6
90027ad8:	f7ff ffa1 	bl	90027a1e <__sfputs_r>
90027adc:	3001      	adds	r0, #1
90027ade:	f000 80a9 	beq.w	90027c34 <_vfiprintf_r+0x1f0>
90027ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
90027ae4:	445a      	add	r2, fp
90027ae6:	9209      	str	r2, [sp, #36]	; 0x24
90027ae8:	f89a 3000 	ldrb.w	r3, [sl]
90027aec:	2b00      	cmp	r3, #0
90027aee:	f000 80a1 	beq.w	90027c34 <_vfiprintf_r+0x1f0>
90027af2:	2300      	movs	r3, #0
90027af4:	f04f 32ff 	mov.w	r2, #4294967295
90027af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
90027afc:	f10a 0a01 	add.w	sl, sl, #1
90027b00:	9304      	str	r3, [sp, #16]
90027b02:	9307      	str	r3, [sp, #28]
90027b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90027b08:	931a      	str	r3, [sp, #104]	; 0x68
90027b0a:	4654      	mov	r4, sl
90027b0c:	2205      	movs	r2, #5
90027b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
90027b12:	4854      	ldr	r0, [pc, #336]	; (90027c64 <_vfiprintf_r+0x220>)
90027b14:	f7d8 fbf4 	bl	90000300 <memchr>
90027b18:	9a04      	ldr	r2, [sp, #16]
90027b1a:	b9d8      	cbnz	r0, 90027b54 <_vfiprintf_r+0x110>
90027b1c:	06d1      	lsls	r1, r2, #27
90027b1e:	bf44      	itt	mi
90027b20:	2320      	movmi	r3, #32
90027b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90027b26:	0713      	lsls	r3, r2, #28
90027b28:	bf44      	itt	mi
90027b2a:	232b      	movmi	r3, #43	; 0x2b
90027b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90027b30:	f89a 3000 	ldrb.w	r3, [sl]
90027b34:	2b2a      	cmp	r3, #42	; 0x2a
90027b36:	d015      	beq.n	90027b64 <_vfiprintf_r+0x120>
90027b38:	9a07      	ldr	r2, [sp, #28]
90027b3a:	4654      	mov	r4, sl
90027b3c:	2000      	movs	r0, #0
90027b3e:	f04f 0c0a 	mov.w	ip, #10
90027b42:	4621      	mov	r1, r4
90027b44:	f811 3b01 	ldrb.w	r3, [r1], #1
90027b48:	3b30      	subs	r3, #48	; 0x30
90027b4a:	2b09      	cmp	r3, #9
90027b4c:	d94d      	bls.n	90027bea <_vfiprintf_r+0x1a6>
90027b4e:	b1b0      	cbz	r0, 90027b7e <_vfiprintf_r+0x13a>
90027b50:	9207      	str	r2, [sp, #28]
90027b52:	e014      	b.n	90027b7e <_vfiprintf_r+0x13a>
90027b54:	eba0 0308 	sub.w	r3, r0, r8
90027b58:	fa09 f303 	lsl.w	r3, r9, r3
90027b5c:	4313      	orrs	r3, r2
90027b5e:	9304      	str	r3, [sp, #16]
90027b60:	46a2      	mov	sl, r4
90027b62:	e7d2      	b.n	90027b0a <_vfiprintf_r+0xc6>
90027b64:	9b03      	ldr	r3, [sp, #12]
90027b66:	1d19      	adds	r1, r3, #4
90027b68:	681b      	ldr	r3, [r3, #0]
90027b6a:	9103      	str	r1, [sp, #12]
90027b6c:	2b00      	cmp	r3, #0
90027b6e:	bfbb      	ittet	lt
90027b70:	425b      	neglt	r3, r3
90027b72:	f042 0202 	orrlt.w	r2, r2, #2
90027b76:	9307      	strge	r3, [sp, #28]
90027b78:	9307      	strlt	r3, [sp, #28]
90027b7a:	bfb8      	it	lt
90027b7c:	9204      	strlt	r2, [sp, #16]
90027b7e:	7823      	ldrb	r3, [r4, #0]
90027b80:	2b2e      	cmp	r3, #46	; 0x2e
90027b82:	d10c      	bne.n	90027b9e <_vfiprintf_r+0x15a>
90027b84:	7863      	ldrb	r3, [r4, #1]
90027b86:	2b2a      	cmp	r3, #42	; 0x2a
90027b88:	d134      	bne.n	90027bf4 <_vfiprintf_r+0x1b0>
90027b8a:	9b03      	ldr	r3, [sp, #12]
90027b8c:	1d1a      	adds	r2, r3, #4
90027b8e:	681b      	ldr	r3, [r3, #0]
90027b90:	9203      	str	r2, [sp, #12]
90027b92:	2b00      	cmp	r3, #0
90027b94:	bfb8      	it	lt
90027b96:	f04f 33ff 	movlt.w	r3, #4294967295
90027b9a:	3402      	adds	r4, #2
90027b9c:	9305      	str	r3, [sp, #20]
90027b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90027c74 <_vfiprintf_r+0x230>
90027ba2:	7821      	ldrb	r1, [r4, #0]
90027ba4:	2203      	movs	r2, #3
90027ba6:	4650      	mov	r0, sl
90027ba8:	f7d8 fbaa 	bl	90000300 <memchr>
90027bac:	b138      	cbz	r0, 90027bbe <_vfiprintf_r+0x17a>
90027bae:	9b04      	ldr	r3, [sp, #16]
90027bb0:	eba0 000a 	sub.w	r0, r0, sl
90027bb4:	2240      	movs	r2, #64	; 0x40
90027bb6:	4082      	lsls	r2, r0
90027bb8:	4313      	orrs	r3, r2
90027bba:	3401      	adds	r4, #1
90027bbc:	9304      	str	r3, [sp, #16]
90027bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
90027bc2:	4829      	ldr	r0, [pc, #164]	; (90027c68 <_vfiprintf_r+0x224>)
90027bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90027bc8:	2206      	movs	r2, #6
90027bca:	f7d8 fb99 	bl	90000300 <memchr>
90027bce:	2800      	cmp	r0, #0
90027bd0:	d03f      	beq.n	90027c52 <_vfiprintf_r+0x20e>
90027bd2:	4b26      	ldr	r3, [pc, #152]	; (90027c6c <_vfiprintf_r+0x228>)
90027bd4:	bb1b      	cbnz	r3, 90027c1e <_vfiprintf_r+0x1da>
90027bd6:	9b03      	ldr	r3, [sp, #12]
90027bd8:	3307      	adds	r3, #7
90027bda:	f023 0307 	bic.w	r3, r3, #7
90027bde:	3308      	adds	r3, #8
90027be0:	9303      	str	r3, [sp, #12]
90027be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027be4:	443b      	add	r3, r7
90027be6:	9309      	str	r3, [sp, #36]	; 0x24
90027be8:	e768      	b.n	90027abc <_vfiprintf_r+0x78>
90027bea:	fb0c 3202 	mla	r2, ip, r2, r3
90027bee:	460c      	mov	r4, r1
90027bf0:	2001      	movs	r0, #1
90027bf2:	e7a6      	b.n	90027b42 <_vfiprintf_r+0xfe>
90027bf4:	2300      	movs	r3, #0
90027bf6:	3401      	adds	r4, #1
90027bf8:	9305      	str	r3, [sp, #20]
90027bfa:	4619      	mov	r1, r3
90027bfc:	f04f 0c0a 	mov.w	ip, #10
90027c00:	4620      	mov	r0, r4
90027c02:	f810 2b01 	ldrb.w	r2, [r0], #1
90027c06:	3a30      	subs	r2, #48	; 0x30
90027c08:	2a09      	cmp	r2, #9
90027c0a:	d903      	bls.n	90027c14 <_vfiprintf_r+0x1d0>
90027c0c:	2b00      	cmp	r3, #0
90027c0e:	d0c6      	beq.n	90027b9e <_vfiprintf_r+0x15a>
90027c10:	9105      	str	r1, [sp, #20]
90027c12:	e7c4      	b.n	90027b9e <_vfiprintf_r+0x15a>
90027c14:	fb0c 2101 	mla	r1, ip, r1, r2
90027c18:	4604      	mov	r4, r0
90027c1a:	2301      	movs	r3, #1
90027c1c:	e7f0      	b.n	90027c00 <_vfiprintf_r+0x1bc>
90027c1e:	ab03      	add	r3, sp, #12
90027c20:	9300      	str	r3, [sp, #0]
90027c22:	462a      	mov	r2, r5
90027c24:	4b12      	ldr	r3, [pc, #72]	; (90027c70 <_vfiprintf_r+0x22c>)
90027c26:	a904      	add	r1, sp, #16
90027c28:	4630      	mov	r0, r6
90027c2a:	f3af 8000 	nop.w
90027c2e:	4607      	mov	r7, r0
90027c30:	1c78      	adds	r0, r7, #1
90027c32:	d1d6      	bne.n	90027be2 <_vfiprintf_r+0x19e>
90027c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027c36:	07d9      	lsls	r1, r3, #31
90027c38:	d405      	bmi.n	90027c46 <_vfiprintf_r+0x202>
90027c3a:	89ab      	ldrh	r3, [r5, #12]
90027c3c:	059a      	lsls	r2, r3, #22
90027c3e:	d402      	bmi.n	90027c46 <_vfiprintf_r+0x202>
90027c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027c42:	f7ff fe1b 	bl	9002787c <__retarget_lock_release_recursive>
90027c46:	89ab      	ldrh	r3, [r5, #12]
90027c48:	065b      	lsls	r3, r3, #25
90027c4a:	f53f af1d 	bmi.w	90027a88 <_vfiprintf_r+0x44>
90027c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
90027c50:	e71c      	b.n	90027a8c <_vfiprintf_r+0x48>
90027c52:	ab03      	add	r3, sp, #12
90027c54:	9300      	str	r3, [sp, #0]
90027c56:	462a      	mov	r2, r5
90027c58:	4b05      	ldr	r3, [pc, #20]	; (90027c70 <_vfiprintf_r+0x22c>)
90027c5a:	a904      	add	r1, sp, #16
90027c5c:	4630      	mov	r0, r6
90027c5e:	f000 f879 	bl	90027d54 <_printf_i>
90027c62:	e7e4      	b.n	90027c2e <_vfiprintf_r+0x1ea>
90027c64:	9002c384 	.word	0x9002c384
90027c68:	9002c38e 	.word	0x9002c38e
90027c6c:	00000000 	.word	0x00000000
90027c70:	90027a1f 	.word	0x90027a1f
90027c74:	9002c38a 	.word	0x9002c38a

90027c78 <_printf_common>:
90027c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90027c7c:	4616      	mov	r6, r2
90027c7e:	4699      	mov	r9, r3
90027c80:	688a      	ldr	r2, [r1, #8]
90027c82:	690b      	ldr	r3, [r1, #16]
90027c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
90027c88:	4293      	cmp	r3, r2
90027c8a:	bfb8      	it	lt
90027c8c:	4613      	movlt	r3, r2
90027c8e:	6033      	str	r3, [r6, #0]
90027c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90027c94:	4607      	mov	r7, r0
90027c96:	460c      	mov	r4, r1
90027c98:	b10a      	cbz	r2, 90027c9e <_printf_common+0x26>
90027c9a:	3301      	adds	r3, #1
90027c9c:	6033      	str	r3, [r6, #0]
90027c9e:	6823      	ldr	r3, [r4, #0]
90027ca0:	0699      	lsls	r1, r3, #26
90027ca2:	bf42      	ittt	mi
90027ca4:	6833      	ldrmi	r3, [r6, #0]
90027ca6:	3302      	addmi	r3, #2
90027ca8:	6033      	strmi	r3, [r6, #0]
90027caa:	6825      	ldr	r5, [r4, #0]
90027cac:	f015 0506 	ands.w	r5, r5, #6
90027cb0:	d106      	bne.n	90027cc0 <_printf_common+0x48>
90027cb2:	f104 0a19 	add.w	sl, r4, #25
90027cb6:	68e3      	ldr	r3, [r4, #12]
90027cb8:	6832      	ldr	r2, [r6, #0]
90027cba:	1a9b      	subs	r3, r3, r2
90027cbc:	42ab      	cmp	r3, r5
90027cbe:	dc26      	bgt.n	90027d0e <_printf_common+0x96>
90027cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90027cc4:	1e13      	subs	r3, r2, #0
90027cc6:	6822      	ldr	r2, [r4, #0]
90027cc8:	bf18      	it	ne
90027cca:	2301      	movne	r3, #1
90027ccc:	0692      	lsls	r2, r2, #26
90027cce:	d42b      	bmi.n	90027d28 <_printf_common+0xb0>
90027cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
90027cd4:	4649      	mov	r1, r9
90027cd6:	4638      	mov	r0, r7
90027cd8:	47c0      	blx	r8
90027cda:	3001      	adds	r0, #1
90027cdc:	d01e      	beq.n	90027d1c <_printf_common+0xa4>
90027cde:	6823      	ldr	r3, [r4, #0]
90027ce0:	6922      	ldr	r2, [r4, #16]
90027ce2:	f003 0306 	and.w	r3, r3, #6
90027ce6:	2b04      	cmp	r3, #4
90027ce8:	bf02      	ittt	eq
90027cea:	68e5      	ldreq	r5, [r4, #12]
90027cec:	6833      	ldreq	r3, [r6, #0]
90027cee:	1aed      	subeq	r5, r5, r3
90027cf0:	68a3      	ldr	r3, [r4, #8]
90027cf2:	bf0c      	ite	eq
90027cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90027cf8:	2500      	movne	r5, #0
90027cfa:	4293      	cmp	r3, r2
90027cfc:	bfc4      	itt	gt
90027cfe:	1a9b      	subgt	r3, r3, r2
90027d00:	18ed      	addgt	r5, r5, r3
90027d02:	2600      	movs	r6, #0
90027d04:	341a      	adds	r4, #26
90027d06:	42b5      	cmp	r5, r6
90027d08:	d11a      	bne.n	90027d40 <_printf_common+0xc8>
90027d0a:	2000      	movs	r0, #0
90027d0c:	e008      	b.n	90027d20 <_printf_common+0xa8>
90027d0e:	2301      	movs	r3, #1
90027d10:	4652      	mov	r2, sl
90027d12:	4649      	mov	r1, r9
90027d14:	4638      	mov	r0, r7
90027d16:	47c0      	blx	r8
90027d18:	3001      	adds	r0, #1
90027d1a:	d103      	bne.n	90027d24 <_printf_common+0xac>
90027d1c:	f04f 30ff 	mov.w	r0, #4294967295
90027d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90027d24:	3501      	adds	r5, #1
90027d26:	e7c6      	b.n	90027cb6 <_printf_common+0x3e>
90027d28:	18e1      	adds	r1, r4, r3
90027d2a:	1c5a      	adds	r2, r3, #1
90027d2c:	2030      	movs	r0, #48	; 0x30
90027d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90027d32:	4422      	add	r2, r4
90027d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90027d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90027d3c:	3302      	adds	r3, #2
90027d3e:	e7c7      	b.n	90027cd0 <_printf_common+0x58>
90027d40:	2301      	movs	r3, #1
90027d42:	4622      	mov	r2, r4
90027d44:	4649      	mov	r1, r9
90027d46:	4638      	mov	r0, r7
90027d48:	47c0      	blx	r8
90027d4a:	3001      	adds	r0, #1
90027d4c:	d0e6      	beq.n	90027d1c <_printf_common+0xa4>
90027d4e:	3601      	adds	r6, #1
90027d50:	e7d9      	b.n	90027d06 <_printf_common+0x8e>
	...

90027d54 <_printf_i>:
90027d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90027d58:	7e0f      	ldrb	r7, [r1, #24]
90027d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90027d5c:	2f78      	cmp	r7, #120	; 0x78
90027d5e:	4691      	mov	r9, r2
90027d60:	4680      	mov	r8, r0
90027d62:	460c      	mov	r4, r1
90027d64:	469a      	mov	sl, r3
90027d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
90027d6a:	d807      	bhi.n	90027d7c <_printf_i+0x28>
90027d6c:	2f62      	cmp	r7, #98	; 0x62
90027d6e:	d80a      	bhi.n	90027d86 <_printf_i+0x32>
90027d70:	2f00      	cmp	r7, #0
90027d72:	f000 80d4 	beq.w	90027f1e <_printf_i+0x1ca>
90027d76:	2f58      	cmp	r7, #88	; 0x58
90027d78:	f000 80c0 	beq.w	90027efc <_printf_i+0x1a8>
90027d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
90027d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90027d84:	e03a      	b.n	90027dfc <_printf_i+0xa8>
90027d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90027d8a:	2b15      	cmp	r3, #21
90027d8c:	d8f6      	bhi.n	90027d7c <_printf_i+0x28>
90027d8e:	a101      	add	r1, pc, #4	; (adr r1, 90027d94 <_printf_i+0x40>)
90027d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90027d94:	90027ded 	.word	0x90027ded
90027d98:	90027e01 	.word	0x90027e01
90027d9c:	90027d7d 	.word	0x90027d7d
90027da0:	90027d7d 	.word	0x90027d7d
90027da4:	90027d7d 	.word	0x90027d7d
90027da8:	90027d7d 	.word	0x90027d7d
90027dac:	90027e01 	.word	0x90027e01
90027db0:	90027d7d 	.word	0x90027d7d
90027db4:	90027d7d 	.word	0x90027d7d
90027db8:	90027d7d 	.word	0x90027d7d
90027dbc:	90027d7d 	.word	0x90027d7d
90027dc0:	90027f05 	.word	0x90027f05
90027dc4:	90027e2d 	.word	0x90027e2d
90027dc8:	90027ebf 	.word	0x90027ebf
90027dcc:	90027d7d 	.word	0x90027d7d
90027dd0:	90027d7d 	.word	0x90027d7d
90027dd4:	90027f27 	.word	0x90027f27
90027dd8:	90027d7d 	.word	0x90027d7d
90027ddc:	90027e2d 	.word	0x90027e2d
90027de0:	90027d7d 	.word	0x90027d7d
90027de4:	90027d7d 	.word	0x90027d7d
90027de8:	90027ec7 	.word	0x90027ec7
90027dec:	682b      	ldr	r3, [r5, #0]
90027dee:	1d1a      	adds	r2, r3, #4
90027df0:	681b      	ldr	r3, [r3, #0]
90027df2:	602a      	str	r2, [r5, #0]
90027df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
90027df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90027dfc:	2301      	movs	r3, #1
90027dfe:	e09f      	b.n	90027f40 <_printf_i+0x1ec>
90027e00:	6820      	ldr	r0, [r4, #0]
90027e02:	682b      	ldr	r3, [r5, #0]
90027e04:	0607      	lsls	r7, r0, #24
90027e06:	f103 0104 	add.w	r1, r3, #4
90027e0a:	6029      	str	r1, [r5, #0]
90027e0c:	d501      	bpl.n	90027e12 <_printf_i+0xbe>
90027e0e:	681e      	ldr	r6, [r3, #0]
90027e10:	e003      	b.n	90027e1a <_printf_i+0xc6>
90027e12:	0646      	lsls	r6, r0, #25
90027e14:	d5fb      	bpl.n	90027e0e <_printf_i+0xba>
90027e16:	f9b3 6000 	ldrsh.w	r6, [r3]
90027e1a:	2e00      	cmp	r6, #0
90027e1c:	da03      	bge.n	90027e26 <_printf_i+0xd2>
90027e1e:	232d      	movs	r3, #45	; 0x2d
90027e20:	4276      	negs	r6, r6
90027e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90027e26:	485a      	ldr	r0, [pc, #360]	; (90027f90 <_printf_i+0x23c>)
90027e28:	230a      	movs	r3, #10
90027e2a:	e012      	b.n	90027e52 <_printf_i+0xfe>
90027e2c:	682b      	ldr	r3, [r5, #0]
90027e2e:	6820      	ldr	r0, [r4, #0]
90027e30:	1d19      	adds	r1, r3, #4
90027e32:	6029      	str	r1, [r5, #0]
90027e34:	0605      	lsls	r5, r0, #24
90027e36:	d501      	bpl.n	90027e3c <_printf_i+0xe8>
90027e38:	681e      	ldr	r6, [r3, #0]
90027e3a:	e002      	b.n	90027e42 <_printf_i+0xee>
90027e3c:	0641      	lsls	r1, r0, #25
90027e3e:	d5fb      	bpl.n	90027e38 <_printf_i+0xe4>
90027e40:	881e      	ldrh	r6, [r3, #0]
90027e42:	4853      	ldr	r0, [pc, #332]	; (90027f90 <_printf_i+0x23c>)
90027e44:	2f6f      	cmp	r7, #111	; 0x6f
90027e46:	bf0c      	ite	eq
90027e48:	2308      	moveq	r3, #8
90027e4a:	230a      	movne	r3, #10
90027e4c:	2100      	movs	r1, #0
90027e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90027e52:	6865      	ldr	r5, [r4, #4]
90027e54:	60a5      	str	r5, [r4, #8]
90027e56:	2d00      	cmp	r5, #0
90027e58:	bfa2      	ittt	ge
90027e5a:	6821      	ldrge	r1, [r4, #0]
90027e5c:	f021 0104 	bicge.w	r1, r1, #4
90027e60:	6021      	strge	r1, [r4, #0]
90027e62:	b90e      	cbnz	r6, 90027e68 <_printf_i+0x114>
90027e64:	2d00      	cmp	r5, #0
90027e66:	d04b      	beq.n	90027f00 <_printf_i+0x1ac>
90027e68:	4615      	mov	r5, r2
90027e6a:	fbb6 f1f3 	udiv	r1, r6, r3
90027e6e:	fb03 6711 	mls	r7, r3, r1, r6
90027e72:	5dc7      	ldrb	r7, [r0, r7]
90027e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
90027e78:	4637      	mov	r7, r6
90027e7a:	42bb      	cmp	r3, r7
90027e7c:	460e      	mov	r6, r1
90027e7e:	d9f4      	bls.n	90027e6a <_printf_i+0x116>
90027e80:	2b08      	cmp	r3, #8
90027e82:	d10b      	bne.n	90027e9c <_printf_i+0x148>
90027e84:	6823      	ldr	r3, [r4, #0]
90027e86:	07de      	lsls	r6, r3, #31
90027e88:	d508      	bpl.n	90027e9c <_printf_i+0x148>
90027e8a:	6923      	ldr	r3, [r4, #16]
90027e8c:	6861      	ldr	r1, [r4, #4]
90027e8e:	4299      	cmp	r1, r3
90027e90:	bfde      	ittt	le
90027e92:	2330      	movle	r3, #48	; 0x30
90027e94:	f805 3c01 	strble.w	r3, [r5, #-1]
90027e98:	f105 35ff 	addle.w	r5, r5, #4294967295
90027e9c:	1b52      	subs	r2, r2, r5
90027e9e:	6122      	str	r2, [r4, #16]
90027ea0:	f8cd a000 	str.w	sl, [sp]
90027ea4:	464b      	mov	r3, r9
90027ea6:	aa03      	add	r2, sp, #12
90027ea8:	4621      	mov	r1, r4
90027eaa:	4640      	mov	r0, r8
90027eac:	f7ff fee4 	bl	90027c78 <_printf_common>
90027eb0:	3001      	adds	r0, #1
90027eb2:	d14a      	bne.n	90027f4a <_printf_i+0x1f6>
90027eb4:	f04f 30ff 	mov.w	r0, #4294967295
90027eb8:	b004      	add	sp, #16
90027eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90027ebe:	6823      	ldr	r3, [r4, #0]
90027ec0:	f043 0320 	orr.w	r3, r3, #32
90027ec4:	6023      	str	r3, [r4, #0]
90027ec6:	4833      	ldr	r0, [pc, #204]	; (90027f94 <_printf_i+0x240>)
90027ec8:	2778      	movs	r7, #120	; 0x78
90027eca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90027ece:	6823      	ldr	r3, [r4, #0]
90027ed0:	6829      	ldr	r1, [r5, #0]
90027ed2:	061f      	lsls	r7, r3, #24
90027ed4:	f851 6b04 	ldr.w	r6, [r1], #4
90027ed8:	d402      	bmi.n	90027ee0 <_printf_i+0x18c>
90027eda:	065f      	lsls	r7, r3, #25
90027edc:	bf48      	it	mi
90027ede:	b2b6      	uxthmi	r6, r6
90027ee0:	07df      	lsls	r7, r3, #31
90027ee2:	bf48      	it	mi
90027ee4:	f043 0320 	orrmi.w	r3, r3, #32
90027ee8:	6029      	str	r1, [r5, #0]
90027eea:	bf48      	it	mi
90027eec:	6023      	strmi	r3, [r4, #0]
90027eee:	b91e      	cbnz	r6, 90027ef8 <_printf_i+0x1a4>
90027ef0:	6823      	ldr	r3, [r4, #0]
90027ef2:	f023 0320 	bic.w	r3, r3, #32
90027ef6:	6023      	str	r3, [r4, #0]
90027ef8:	2310      	movs	r3, #16
90027efa:	e7a7      	b.n	90027e4c <_printf_i+0xf8>
90027efc:	4824      	ldr	r0, [pc, #144]	; (90027f90 <_printf_i+0x23c>)
90027efe:	e7e4      	b.n	90027eca <_printf_i+0x176>
90027f00:	4615      	mov	r5, r2
90027f02:	e7bd      	b.n	90027e80 <_printf_i+0x12c>
90027f04:	682b      	ldr	r3, [r5, #0]
90027f06:	6826      	ldr	r6, [r4, #0]
90027f08:	6961      	ldr	r1, [r4, #20]
90027f0a:	1d18      	adds	r0, r3, #4
90027f0c:	6028      	str	r0, [r5, #0]
90027f0e:	0635      	lsls	r5, r6, #24
90027f10:	681b      	ldr	r3, [r3, #0]
90027f12:	d501      	bpl.n	90027f18 <_printf_i+0x1c4>
90027f14:	6019      	str	r1, [r3, #0]
90027f16:	e002      	b.n	90027f1e <_printf_i+0x1ca>
90027f18:	0670      	lsls	r0, r6, #25
90027f1a:	d5fb      	bpl.n	90027f14 <_printf_i+0x1c0>
90027f1c:	8019      	strh	r1, [r3, #0]
90027f1e:	2300      	movs	r3, #0
90027f20:	6123      	str	r3, [r4, #16]
90027f22:	4615      	mov	r5, r2
90027f24:	e7bc      	b.n	90027ea0 <_printf_i+0x14c>
90027f26:	682b      	ldr	r3, [r5, #0]
90027f28:	1d1a      	adds	r2, r3, #4
90027f2a:	602a      	str	r2, [r5, #0]
90027f2c:	681d      	ldr	r5, [r3, #0]
90027f2e:	6862      	ldr	r2, [r4, #4]
90027f30:	2100      	movs	r1, #0
90027f32:	4628      	mov	r0, r5
90027f34:	f7d8 f9e4 	bl	90000300 <memchr>
90027f38:	b108      	cbz	r0, 90027f3e <_printf_i+0x1ea>
90027f3a:	1b40      	subs	r0, r0, r5
90027f3c:	6060      	str	r0, [r4, #4]
90027f3e:	6863      	ldr	r3, [r4, #4]
90027f40:	6123      	str	r3, [r4, #16]
90027f42:	2300      	movs	r3, #0
90027f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90027f48:	e7aa      	b.n	90027ea0 <_printf_i+0x14c>
90027f4a:	6923      	ldr	r3, [r4, #16]
90027f4c:	462a      	mov	r2, r5
90027f4e:	4649      	mov	r1, r9
90027f50:	4640      	mov	r0, r8
90027f52:	47d0      	blx	sl
90027f54:	3001      	adds	r0, #1
90027f56:	d0ad      	beq.n	90027eb4 <_printf_i+0x160>
90027f58:	6823      	ldr	r3, [r4, #0]
90027f5a:	079b      	lsls	r3, r3, #30
90027f5c:	d413      	bmi.n	90027f86 <_printf_i+0x232>
90027f5e:	68e0      	ldr	r0, [r4, #12]
90027f60:	9b03      	ldr	r3, [sp, #12]
90027f62:	4298      	cmp	r0, r3
90027f64:	bfb8      	it	lt
90027f66:	4618      	movlt	r0, r3
90027f68:	e7a6      	b.n	90027eb8 <_printf_i+0x164>
90027f6a:	2301      	movs	r3, #1
90027f6c:	4632      	mov	r2, r6
90027f6e:	4649      	mov	r1, r9
90027f70:	4640      	mov	r0, r8
90027f72:	47d0      	blx	sl
90027f74:	3001      	adds	r0, #1
90027f76:	d09d      	beq.n	90027eb4 <_printf_i+0x160>
90027f78:	3501      	adds	r5, #1
90027f7a:	68e3      	ldr	r3, [r4, #12]
90027f7c:	9903      	ldr	r1, [sp, #12]
90027f7e:	1a5b      	subs	r3, r3, r1
90027f80:	42ab      	cmp	r3, r5
90027f82:	dcf2      	bgt.n	90027f6a <_printf_i+0x216>
90027f84:	e7eb      	b.n	90027f5e <_printf_i+0x20a>
90027f86:	2500      	movs	r5, #0
90027f88:	f104 0619 	add.w	r6, r4, #25
90027f8c:	e7f5      	b.n	90027f7a <_printf_i+0x226>
90027f8e:	bf00      	nop
90027f90:	9002c395 	.word	0x9002c395
90027f94:	9002c3a6 	.word	0x9002c3a6

90027f98 <__sflush_r>:
90027f98:	898a      	ldrh	r2, [r1, #12]
90027f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90027f9e:	4605      	mov	r5, r0
90027fa0:	0710      	lsls	r0, r2, #28
90027fa2:	460c      	mov	r4, r1
90027fa4:	d458      	bmi.n	90028058 <__sflush_r+0xc0>
90027fa6:	684b      	ldr	r3, [r1, #4]
90027fa8:	2b00      	cmp	r3, #0
90027faa:	dc05      	bgt.n	90027fb8 <__sflush_r+0x20>
90027fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90027fae:	2b00      	cmp	r3, #0
90027fb0:	dc02      	bgt.n	90027fb8 <__sflush_r+0x20>
90027fb2:	2000      	movs	r0, #0
90027fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90027fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027fba:	2e00      	cmp	r6, #0
90027fbc:	d0f9      	beq.n	90027fb2 <__sflush_r+0x1a>
90027fbe:	2300      	movs	r3, #0
90027fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90027fc4:	682f      	ldr	r7, [r5, #0]
90027fc6:	6a21      	ldr	r1, [r4, #32]
90027fc8:	602b      	str	r3, [r5, #0]
90027fca:	d032      	beq.n	90028032 <__sflush_r+0x9a>
90027fcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
90027fce:	89a3      	ldrh	r3, [r4, #12]
90027fd0:	075a      	lsls	r2, r3, #29
90027fd2:	d505      	bpl.n	90027fe0 <__sflush_r+0x48>
90027fd4:	6863      	ldr	r3, [r4, #4]
90027fd6:	1ac0      	subs	r0, r0, r3
90027fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
90027fda:	b10b      	cbz	r3, 90027fe0 <__sflush_r+0x48>
90027fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
90027fde:	1ac0      	subs	r0, r0, r3
90027fe0:	2300      	movs	r3, #0
90027fe2:	4602      	mov	r2, r0
90027fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027fe6:	6a21      	ldr	r1, [r4, #32]
90027fe8:	4628      	mov	r0, r5
90027fea:	47b0      	blx	r6
90027fec:	1c43      	adds	r3, r0, #1
90027fee:	89a3      	ldrh	r3, [r4, #12]
90027ff0:	d106      	bne.n	90028000 <__sflush_r+0x68>
90027ff2:	6829      	ldr	r1, [r5, #0]
90027ff4:	291d      	cmp	r1, #29
90027ff6:	d82b      	bhi.n	90028050 <__sflush_r+0xb8>
90027ff8:	4a29      	ldr	r2, [pc, #164]	; (900280a0 <__sflush_r+0x108>)
90027ffa:	410a      	asrs	r2, r1
90027ffc:	07d6      	lsls	r6, r2, #31
90027ffe:	d427      	bmi.n	90028050 <__sflush_r+0xb8>
90028000:	2200      	movs	r2, #0
90028002:	6062      	str	r2, [r4, #4]
90028004:	04d9      	lsls	r1, r3, #19
90028006:	6922      	ldr	r2, [r4, #16]
90028008:	6022      	str	r2, [r4, #0]
9002800a:	d504      	bpl.n	90028016 <__sflush_r+0x7e>
9002800c:	1c42      	adds	r2, r0, #1
9002800e:	d101      	bne.n	90028014 <__sflush_r+0x7c>
90028010:	682b      	ldr	r3, [r5, #0]
90028012:	b903      	cbnz	r3, 90028016 <__sflush_r+0x7e>
90028014:	6560      	str	r0, [r4, #84]	; 0x54
90028016:	6b61      	ldr	r1, [r4, #52]	; 0x34
90028018:	602f      	str	r7, [r5, #0]
9002801a:	2900      	cmp	r1, #0
9002801c:	d0c9      	beq.n	90027fb2 <__sflush_r+0x1a>
9002801e:	f104 0344 	add.w	r3, r4, #68	; 0x44
90028022:	4299      	cmp	r1, r3
90028024:	d002      	beq.n	9002802c <__sflush_r+0x94>
90028026:	4628      	mov	r0, r5
90028028:	f7ff fc96 	bl	90027958 <_free_r>
9002802c:	2000      	movs	r0, #0
9002802e:	6360      	str	r0, [r4, #52]	; 0x34
90028030:	e7c0      	b.n	90027fb4 <__sflush_r+0x1c>
90028032:	2301      	movs	r3, #1
90028034:	4628      	mov	r0, r5
90028036:	47b0      	blx	r6
90028038:	1c41      	adds	r1, r0, #1
9002803a:	d1c8      	bne.n	90027fce <__sflush_r+0x36>
9002803c:	682b      	ldr	r3, [r5, #0]
9002803e:	2b00      	cmp	r3, #0
90028040:	d0c5      	beq.n	90027fce <__sflush_r+0x36>
90028042:	2b1d      	cmp	r3, #29
90028044:	d001      	beq.n	9002804a <__sflush_r+0xb2>
90028046:	2b16      	cmp	r3, #22
90028048:	d101      	bne.n	9002804e <__sflush_r+0xb6>
9002804a:	602f      	str	r7, [r5, #0]
9002804c:	e7b1      	b.n	90027fb2 <__sflush_r+0x1a>
9002804e:	89a3      	ldrh	r3, [r4, #12]
90028050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90028054:	81a3      	strh	r3, [r4, #12]
90028056:	e7ad      	b.n	90027fb4 <__sflush_r+0x1c>
90028058:	690f      	ldr	r7, [r1, #16]
9002805a:	2f00      	cmp	r7, #0
9002805c:	d0a9      	beq.n	90027fb2 <__sflush_r+0x1a>
9002805e:	0793      	lsls	r3, r2, #30
90028060:	680e      	ldr	r6, [r1, #0]
90028062:	bf08      	it	eq
90028064:	694b      	ldreq	r3, [r1, #20]
90028066:	600f      	str	r7, [r1, #0]
90028068:	bf18      	it	ne
9002806a:	2300      	movne	r3, #0
9002806c:	eba6 0807 	sub.w	r8, r6, r7
90028070:	608b      	str	r3, [r1, #8]
90028072:	f1b8 0f00 	cmp.w	r8, #0
90028076:	dd9c      	ble.n	90027fb2 <__sflush_r+0x1a>
90028078:	6a21      	ldr	r1, [r4, #32]
9002807a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9002807c:	4643      	mov	r3, r8
9002807e:	463a      	mov	r2, r7
90028080:	4628      	mov	r0, r5
90028082:	47b0      	blx	r6
90028084:	2800      	cmp	r0, #0
90028086:	dc06      	bgt.n	90028096 <__sflush_r+0xfe>
90028088:	89a3      	ldrh	r3, [r4, #12]
9002808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002808e:	81a3      	strh	r3, [r4, #12]
90028090:	f04f 30ff 	mov.w	r0, #4294967295
90028094:	e78e      	b.n	90027fb4 <__sflush_r+0x1c>
90028096:	4407      	add	r7, r0
90028098:	eba8 0800 	sub.w	r8, r8, r0
9002809c:	e7e9      	b.n	90028072 <__sflush_r+0xda>
9002809e:	bf00      	nop
900280a0:	dfbffffe 	.word	0xdfbffffe

900280a4 <_fflush_r>:
900280a4:	b538      	push	{r3, r4, r5, lr}
900280a6:	690b      	ldr	r3, [r1, #16]
900280a8:	4605      	mov	r5, r0
900280aa:	460c      	mov	r4, r1
900280ac:	b913      	cbnz	r3, 900280b4 <_fflush_r+0x10>
900280ae:	2500      	movs	r5, #0
900280b0:	4628      	mov	r0, r5
900280b2:	bd38      	pop	{r3, r4, r5, pc}
900280b4:	b118      	cbz	r0, 900280be <_fflush_r+0x1a>
900280b6:	6a03      	ldr	r3, [r0, #32]
900280b8:	b90b      	cbnz	r3, 900280be <_fflush_r+0x1a>
900280ba:	f7ff f9c5 	bl	90027448 <__sinit>
900280be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900280c2:	2b00      	cmp	r3, #0
900280c4:	d0f3      	beq.n	900280ae <_fflush_r+0xa>
900280c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
900280c8:	07d0      	lsls	r0, r2, #31
900280ca:	d404      	bmi.n	900280d6 <_fflush_r+0x32>
900280cc:	0599      	lsls	r1, r3, #22
900280ce:	d402      	bmi.n	900280d6 <_fflush_r+0x32>
900280d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
900280d2:	f7ff fbd2 	bl	9002787a <__retarget_lock_acquire_recursive>
900280d6:	4628      	mov	r0, r5
900280d8:	4621      	mov	r1, r4
900280da:	f7ff ff5d 	bl	90027f98 <__sflush_r>
900280de:	6e63      	ldr	r3, [r4, #100]	; 0x64
900280e0:	07da      	lsls	r2, r3, #31
900280e2:	4605      	mov	r5, r0
900280e4:	d4e4      	bmi.n	900280b0 <_fflush_r+0xc>
900280e6:	89a3      	ldrh	r3, [r4, #12]
900280e8:	059b      	lsls	r3, r3, #22
900280ea:	d4e1      	bmi.n	900280b0 <_fflush_r+0xc>
900280ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
900280ee:	f7ff fbc5 	bl	9002787c <__retarget_lock_release_recursive>
900280f2:	e7dd      	b.n	900280b0 <_fflush_r+0xc>

900280f4 <__swhatbuf_r>:
900280f4:	b570      	push	{r4, r5, r6, lr}
900280f6:	460c      	mov	r4, r1
900280f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900280fc:	2900      	cmp	r1, #0
900280fe:	b096      	sub	sp, #88	; 0x58
90028100:	4615      	mov	r5, r2
90028102:	461e      	mov	r6, r3
90028104:	da0d      	bge.n	90028122 <__swhatbuf_r+0x2e>
90028106:	89a3      	ldrh	r3, [r4, #12]
90028108:	f013 0f80 	tst.w	r3, #128	; 0x80
9002810c:	f04f 0100 	mov.w	r1, #0
90028110:	bf0c      	ite	eq
90028112:	f44f 6380 	moveq.w	r3, #1024	; 0x400
90028116:	2340      	movne	r3, #64	; 0x40
90028118:	2000      	movs	r0, #0
9002811a:	6031      	str	r1, [r6, #0]
9002811c:	602b      	str	r3, [r5, #0]
9002811e:	b016      	add	sp, #88	; 0x58
90028120:	bd70      	pop	{r4, r5, r6, pc}
90028122:	466a      	mov	r2, sp
90028124:	f000 f848 	bl	900281b8 <_fstat_r>
90028128:	2800      	cmp	r0, #0
9002812a:	dbec      	blt.n	90028106 <__swhatbuf_r+0x12>
9002812c:	9901      	ldr	r1, [sp, #4]
9002812e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
90028132:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
90028136:	4259      	negs	r1, r3
90028138:	4159      	adcs	r1, r3
9002813a:	f44f 6380 	mov.w	r3, #1024	; 0x400
9002813e:	e7eb      	b.n	90028118 <__swhatbuf_r+0x24>

90028140 <__smakebuf_r>:
90028140:	898b      	ldrh	r3, [r1, #12]
90028142:	b573      	push	{r0, r1, r4, r5, r6, lr}
90028144:	079d      	lsls	r5, r3, #30
90028146:	4606      	mov	r6, r0
90028148:	460c      	mov	r4, r1
9002814a:	d507      	bpl.n	9002815c <__smakebuf_r+0x1c>
9002814c:	f104 0347 	add.w	r3, r4, #71	; 0x47
90028150:	6023      	str	r3, [r4, #0]
90028152:	6123      	str	r3, [r4, #16]
90028154:	2301      	movs	r3, #1
90028156:	6163      	str	r3, [r4, #20]
90028158:	b002      	add	sp, #8
9002815a:	bd70      	pop	{r4, r5, r6, pc}
9002815c:	ab01      	add	r3, sp, #4
9002815e:	466a      	mov	r2, sp
90028160:	f7ff ffc8 	bl	900280f4 <__swhatbuf_r>
90028164:	9900      	ldr	r1, [sp, #0]
90028166:	4605      	mov	r5, r0
90028168:	4630      	mov	r0, r6
9002816a:	f7ff f847 	bl	900271fc <_malloc_r>
9002816e:	b948      	cbnz	r0, 90028184 <__smakebuf_r+0x44>
90028170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028174:	059a      	lsls	r2, r3, #22
90028176:	d4ef      	bmi.n	90028158 <__smakebuf_r+0x18>
90028178:	f023 0303 	bic.w	r3, r3, #3
9002817c:	f043 0302 	orr.w	r3, r3, #2
90028180:	81a3      	strh	r3, [r4, #12]
90028182:	e7e3      	b.n	9002814c <__smakebuf_r+0xc>
90028184:	89a3      	ldrh	r3, [r4, #12]
90028186:	6020      	str	r0, [r4, #0]
90028188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002818c:	81a3      	strh	r3, [r4, #12]
9002818e:	9b00      	ldr	r3, [sp, #0]
90028190:	6163      	str	r3, [r4, #20]
90028192:	9b01      	ldr	r3, [sp, #4]
90028194:	6120      	str	r0, [r4, #16]
90028196:	b15b      	cbz	r3, 900281b0 <__smakebuf_r+0x70>
90028198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002819c:	4630      	mov	r0, r6
9002819e:	f000 f81d 	bl	900281dc <_isatty_r>
900281a2:	b128      	cbz	r0, 900281b0 <__smakebuf_r+0x70>
900281a4:	89a3      	ldrh	r3, [r4, #12]
900281a6:	f023 0303 	bic.w	r3, r3, #3
900281aa:	f043 0301 	orr.w	r3, r3, #1
900281ae:	81a3      	strh	r3, [r4, #12]
900281b0:	89a3      	ldrh	r3, [r4, #12]
900281b2:	431d      	orrs	r5, r3
900281b4:	81a5      	strh	r5, [r4, #12]
900281b6:	e7cf      	b.n	90028158 <__smakebuf_r+0x18>

900281b8 <_fstat_r>:
900281b8:	b538      	push	{r3, r4, r5, lr}
900281ba:	4d07      	ldr	r5, [pc, #28]	; (900281d8 <_fstat_r+0x20>)
900281bc:	2300      	movs	r3, #0
900281be:	4604      	mov	r4, r0
900281c0:	4608      	mov	r0, r1
900281c2:	4611      	mov	r1, r2
900281c4:	602b      	str	r3, [r5, #0]
900281c6:	f7dc fe49 	bl	90004e5c <_fstat>
900281ca:	1c43      	adds	r3, r0, #1
900281cc:	d102      	bne.n	900281d4 <_fstat_r+0x1c>
900281ce:	682b      	ldr	r3, [r5, #0]
900281d0:	b103      	cbz	r3, 900281d4 <_fstat_r+0x1c>
900281d2:	6023      	str	r3, [r4, #0]
900281d4:	bd38      	pop	{r3, r4, r5, pc}
900281d6:	bf00      	nop
900281d8:	240283dc 	.word	0x240283dc

900281dc <_isatty_r>:
900281dc:	b538      	push	{r3, r4, r5, lr}
900281de:	4d06      	ldr	r5, [pc, #24]	; (900281f8 <_isatty_r+0x1c>)
900281e0:	2300      	movs	r3, #0
900281e2:	4604      	mov	r4, r0
900281e4:	4608      	mov	r0, r1
900281e6:	602b      	str	r3, [r5, #0]
900281e8:	f7dc fe3e 	bl	90004e68 <_isatty>
900281ec:	1c43      	adds	r3, r0, #1
900281ee:	d102      	bne.n	900281f6 <_isatty_r+0x1a>
900281f0:	682b      	ldr	r3, [r5, #0]
900281f2:	b103      	cbz	r3, 900281f6 <_isatty_r+0x1a>
900281f4:	6023      	str	r3, [r4, #0]
900281f6:	bd38      	pop	{r3, r4, r5, pc}
900281f8:	240283dc 	.word	0x240283dc

900281fc <_init>:
900281fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900281fe:	bf00      	nop
90028200:	bcf8      	pop	{r3, r4, r5, r6, r7}
90028202:	bc08      	pop	{r3}
90028204:	469e      	mov	lr, r3
90028206:	4770      	bx	lr

90028208 <_fini>:
90028208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002820a:	bf00      	nop
9002820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9002820e:	bc08      	pop	{r3}
90028210:	469e      	mov	lr, r3
90028212:	4770      	bx	lr
